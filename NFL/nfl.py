import praw
from praw.models import Message
import re
import math
import time
import sqlite3
import traceback
import urllib.request
import urllib.parse
from bs4 import BeautifulSoup, Comment, Tag
from urllib.parse import urlparse
import dateutil.parser
import dateutil.relativedelta
import dateutil.rrule
import datetime
from prettytable import PrettyTable
from concurrent.futures import ThreadPoolExecutor
import time
import logging
from logging.handlers import TimedRotatingFileHandler
import sys
import threading
import concurrent
import getopt
import socket
import statistics
import json
import copy
from pytz import timezone
import unidecode
from html import unescape
from word2number import w2n
from nameparser import HumanName
import get_constant_data
import calendar
from num2words import num2words
import collections
import numbers
import inflect
inflect_engine = inflect.engine()
import calendar
import pdfkit
import io
import uuid
import subprocess
import os
import tempfile
import shutil
import base64
import pytz
import requests
from convertdate import holidays
import inspect
import numexpr
all_holidays = inspect.getmembers(holidays, inspect.isfunction)
import custom_holidays
all_custom_holidays = inspect.getmembers(custom_holidays, inspect.isfunction)
import numeral
import numpy
import lxml
import lxml.html
from lxml import etree
import cchardet
import multiprocessing
import functools
import ephem
import ssl

subreddits_to_crawl = {
    "sportscomparebots" : False,
    "nfl" : False,
    "fantasyfootball" : True,
    "dynastyff" : True,
    "nflnoobs" : False,
    "browns" : False,
    "cowboys" : False,
    "nygiants" : False,
    "saints" : False,
    "watercoolerwednesday" : False,
    "greenbaypackers" : False
}

approved_subreddits = [
    "sportscomparebots",
    "nfl"
]

blocked_users = ["mlbcomparebot", "nflcomparebot", "nhlcomparebot", "nbacomparebot"]

request_headers = {
    "User-Agent" : "NFLCompareRedditBot"
}

max_request_retries = 3
retry_failure_delay = 3
max_reddit_retries = 3

player_season_age_date = datetime.datetime(1, 12, 31)

imgur_upload_url = "https://api.imgur.com/3/upload.json"
imgur_headers = {
    "Authorization" : "Client-ID a79699457a20a4d"
}

use_threads_for_game = False
display_progress_as_edit = True
ignore_approved = True

current_season = 2021
show_title_current_season = True

alert_message_no_approved = "Comparison received! The comment reply will be made with the comparison is finished\n\nComparisons may be slow due to recent Reddit API changes\n\n---"
alert_message = "Comparison received! Updates will be provided as players finish\n\n---"
alert_message_no_update = "Comparison received! A new message will be sent when the comparison is finished\n\n---"

all_months = [month.lower() for month in calendar.month_name[1:len(calendar.month_name)] + calendar.month_abbr[1:len(calendar.month_abbr)]]
all_months_re = r"(?:" + "|".join([month + "-?" for month in all_months]) + r")+"

all_days = [day.lower() for day in calendar.day_name[0:len(calendar.day_name)] + calendar.day_abbr[0:len(calendar.day_abbr)]]
all_days_re = r"(?:" + "|".join([day + "-?" for day in all_days]) + r")+"

string_stats = ["Tm"]

year_weeks_played = [
    {
        "start_year" : None,
        "end_year" : 1936,
        "weeks" : 12,
        "weeks_playoffs" : 1
    },
    {
        "start_year" : 1937,
        "end_year" : 1942,
        "weeks" : 11,
        "weeks_playoffs" : 1
    },
    {
        "start_year" : 1943,
        "end_year" : 1945,
        "weeks" : 10,
        "weeks_playoffs" : 1
    },
    {
        "start_year" : 1946,
        "end_year" : 1946,
        "weeks" : 11,
        "weeks_playoffs" : 1
    },
    {
        "start_year" : 1947,
        "end_year" : 1960,
        "weeks" : 12,
        "weeks_playoffs" : 1
    },
    {
        "start_year" : 1961,
        "end_year" : 1965,
        "weeks" : 14,
        "weeks_playoffs" : 1
    },
    {
        "start_year" : 1966,
        "end_year" : 1966,
        "weeks" : 14,
        "weeks_playoffs" : 2
    },
    {
        "start_year" : 1967,
        "end_year" : 1969,
        "weeks" : 14,
        "weeks_playoffs" : 3
    },
    {
        "start_year" : 1970,
        "end_year" : 1977,
        "weeks" : 14,
        "weeks_playoffs" : 4
    },
    {
        "start_year" : 1978,
        "end_year" : 1981,
        "weeks" : 16,
        "weeks_playoffs" : 4
    },
    {
        "start_year" : 1982,
        "end_year" : 1982,
        "weeks" : 9,
        "weeks_playoffs" : 4
    },
    {
        "start_year" : 1983,
        "end_year" : 1986,
        "weeks" : 16,
        "weeks_playoffs" : 4
    },
    {
        "start_year" : 1987,
        "end_year" : 1987,
        "weeks" : 15,
        "weeks_playoffs" : 4
    },
    {
        "start_year" : 1988,
        "end_year" : 1992,
        "weeks" : 16,
        "weeks_playoffs" : 4
    },
    {
        "start_year" : 1993,
        "end_year" : 2020,
        "weeks" : 17,
        "weeks_playoffs" : 4
    },
    {
        "start_year" : 2021,
        "end_year" : None,
        "weeks" : 18,
        "weeks_playoffs" : 4
    }
]

headers = {
    "QB" : {
        "Passing" : True,
        "Rushing" : True,
        "Era Adjusted Passing" : True,
        "Advanced/Passing" : True,
        "Fantasy" : True,
        "Awards/Honors/Pass" : True,
        "Receiving" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Scrimmage/All Purpose" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "B" : {
        "Passing" : True,
        "Rushing" : True,
        "Era Adjusted Passing" : True,
        "Advanced/Passing" : True,
        "Fantasy" : True,
        "Awards/Honors/Pass" : True,
        "Receiving" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Scrimmage/All Purpose" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "HB" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "RB" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "TB" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "FB" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "LH" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "RH" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "BB" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "WB" : {
        "Rushing" : True,
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Rushing" : True,
        "Fantasy" : True,
        "Awards/Honors/Rush" : True,
        "Passing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "WR" : {
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Receiving" : True,
        "Fantasy" : True,
        "Awards/Honors/Rec" : True,
        "Passing" : False,
        "Rushing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "FL" : {
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Receiving" : True,
        "Fantasy" : True,
        "Awards/Honors/Rec" : True,
        "Passing" : False,
        "Rushing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "SE" : {
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Receiving" : True,
        "Fantasy" : True,
        "Awards/Honors/Rec" : True,
        "Passing" : False,
        "Rushing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "E" : {
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Receiving" : True,
        "Fantasy" : True,
        "Awards/Honors/Rec" : True,
        "Passing" : False,
        "Rushing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "LE" : {
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Receiving" : True,
        "Fantasy" : True,
        "Awards/Honors/Rec" : True,
        "Passing" : False,
        "Rushing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "RE" : {
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Receiving" : True,
        "Fantasy" : True,
        "Awards/Honors/Rec" : True,
        "Passing" : False,
        "Rushing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "TE" : {
        "Receiving" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Receiving" : True,
        "Fantasy" : True,
        "Awards/Honors/Rec" : True,
        "Passing" : False,
        "Rushing" : False,
        "Punt Returns" : False,
        "Kick Returns" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "K" : {
        "Scoring" : True,
        "Advanced/Kicking" : True,
        "Awards/Honors/Other" : True,
        "Snaps" : False
    },
    "P" : {
        "Punting" : True,
        "Advanced/Punting" : True,
        "Awards/Honors/Other" : True,
        "Snaps" : False
    },
    "KR" : {
        "Kick Returns" : True,
        "Punt Returns" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Kick Returns" : True,
        "Fantasy" : True,
        "Awards/Honors/Other" : True,
        "Passing" : False,
        "Receiving" : False,
        "Rushing" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "PR" : {
        "Punt Returns" : True,
        "Kick Returns" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Punt Returns" : True,
        "Fantasy" : True,
        "Awards/Honors/Other" : True,
        "Passing" : False,
        "Receiving" : False,
        "Rushing" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "RET" : {
        "Kick Returns" : True,
        "Punt Returns" : True,
        "Scrimmage/All Purpose" : True,
        "Advanced/Kick Returns" : True,
        "Fantasy" : True,
        "Awards/Honors/Other" : True,
        "Passing" : False,
        "Receiving" : False,
        "Rushing" : False,
        "Defense" : False,
        "Snaps" : False
    },
    "DL" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "DT" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "LDT" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "RDT" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "DE" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "LDE" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "RDE" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "NT" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "MG" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "DG" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "LB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "MLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "ILB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "OLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "LOLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "ROLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "LLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "RLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "LILB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "RILB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "WILL" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "MIKE" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "WLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "SLB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "RUSH" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "EDGE" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Defensive" : True
    },
    "DB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "FS" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "SS" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "S" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "CB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "RCB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "LCB" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "LDH" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "RDH" : {
        "Defense" : True,
        "Defense Per Game/Snap" : True,
        "Advanced/Defense" : True,
        "Penalties/Snaps" : True,
        "Awards/Honors/Int" : True
    },
    "PEN" : {
        "Penalties/Snaps" : True,
        "Awards/Honors/Other" : True
    },
    "SNP" : {
        "Snaps" : True
    }
}

position_scores = {
    "QB" : 50,
    "WR" : 47,
    "HB" : 47,
    "TE" : 47,
    "K" : 40,
    "P" : 40,
    "KR" : 40,
    "PR" : 40,
    "RET" : 40
}

missing_player_data = {
    "ids" : [],
    "Player" : "No Player Match!",
    "Type" : None,
    "id" : "No Player Match!",
    "Search Term" : None,
    "LastUpdated" : None,
    "player_image_url" : [],
    "player_current_team" : [],
    "player_position" : [],
    "player_current_number" : [],
    "player_hof" : [],
    "has_season_stats" : True,
    "has_award_stats" : True,
    "error_getting_pen" : False,
    "error_getting_fmb_lst" : False,
    "error_getting_adv" : False,
    "error_getting_adj" : False,
    "error_getting_gwd" : False,
    "error_getting_pick" : False,
    "rows" : [],
    "seperate_rows" : [],
    "DateStart" : [],
    "DateEnd" : [],
    "YearStart" : [],
    "YearEnd" : [],
    "Birthday" : None,
    "Deathday" : None,
    "stat_values" : {
        "Shared" : {
            "Player" : ["No Player Match!"],
            "any_missing_games" : False,
            "is_playoffs" : False,
            "Raw Player" : "No Player Found!",
            "Raw Range" : "No Matching Games!",
            "Raw Time" : "",
            "Raw Quals" : "",
            "Types" : []
        }
    }
}

advanced_stats = [
    "Cmp%+",
    "Y/A+",
    "AY/A+",
    "NY/A+",
    "ANY/A+",
    "TD%+",
    "Int%+",
    "Rate+",
    "Sk%+"
]

div_id_to_stat = {
    "Shared" : {
    },
    "Awards/Honors/Pass" : {
        "leaderboard_av" : "AV",
        "leaderboard_apmvp_shares" : "MVPShares",
        "leaderboard_apopoy_shares" : "OPOYShares"
    },
    "Awards/Honors/Rush" : {
        "leaderboard_av" : "AV",
        "leaderboard_apmvp_shares" : "MVPShares",
        "leaderboard_apopoy_shares" : "OPOYShares"
    },
    "Awards/Honors/Rec" : {
        "leaderboard_av" : "AV",
        "leaderboard_apmvp_shares" : "MVPShares",
        "leaderboard_apopoy_shares" : "OPOYShares"
    },
    "Awards/Honors/Defensive" : {
        "leaderboard_av" : "AV",
        "leaderboard_apmvp_shares" : "MVP",
        "leaderboard_apdpoy_shares" : "DPOYShares"
    },
    "Awards/Honors/Int" : {
        "leaderboard_av" : "AV",
        "leaderboard_apmvp_shares" : "MVP",
        "leaderboard_apdpoy_shares" : "DPOYShares"
    },
    "Awards/Honors/Other" : {
        "leaderboard_av" : "AV",
        "leaderboard_apmvp_shares" : "MVP"
    },
    "Advanced/Passing" : {
       "leaderboard_pass_long" : "LngPass",
       "leaderboard_rush_long" : "LngRush",
    },
    "Advanced/Rushing" : {
       "leaderboard_rush_long" : "LngRush",
       "leaderboard_rec_long" : "LngRec"
    },
    "Advanced/Receiving" : {
       "leaderboard_rush_long" : "LngRush",
       "leaderboard_rec_long" : "LngRec"
    },
    "Era Adjusted Passing" : {
        "leaderboard_pick_six" : "Pick6",
        "leaderboard_gwd" : "GWD",
        "leaderboard_comebacks" : "4QC",
        "leaderboard_pass_cmp_perc_index" : "Cmp%+",
        "leaderboard_pass_yds_per_att_index" : "Y/A+",
        "leaderboard_pass_adj_yds_per_att_index" : "AY/A+",
        "leaderboard_pass_net_yds_per_att_index" : "NY/A+",
        "leaderboard_pass_adj_net_yds_per_att_index" : "ANY/A+",
        "leaderboard_pass_td_perc_index" : "TD%+",
        "leaderboard_pass_int_perc_index" : "Int%+",
        "leaderboard_pass_sacked_perc_index" : "Sk%+",
        "leaderboard_pass_rating_index" : "Rate+",
        "leaderboard_total_offense" : "TtlYds"
    },
    "Passing" : {
        "leaderboard_pass_cmp" : "Cmp",
        "leaderboard_pass_att" : "Att",
        "leaderboard_pass_yds" : "Yds",
        "leaderboard_pass_td" : "TD",
        "leaderboard_pass_rating" : "Rate",
        "leaderboard_pass_int" : "Int",
        "leaderboard_pass_sacked" : "Sk",
        "leaderboard_pass_sacked_yds" : "SkYds",
        "leaderboard_pass_yds_per_g" : "Yds/G",
        "leaderboard_pass_yds_per_att" : "Y/A",
        "leaderboard_pass_yds_per_cmp" : "Y/C",
        "leaderboard_pass_att_per_g" : "Att/G",
        "leaderboard_pass_cmp_per_g" : "Cmp/G",
        "leaderboard_pass_adj_yds_per_att" : "AY/A",
        "leaderboard_pass_net_yds_per_att" : "NY/A",
        "leaderboard_pass_adj_net_yds_per_att" : "ANY/A",
        "leaderboard_pass_cmp_perc" : "Cmp%",
        "leaderboard_pass_td_perc" : "TD%",
        "leaderboard_pass_int_perc" : "Int%",
        "leaderboard_pass_sacked_perc" : "Sk%",
        "leaderboard_qbr" : "QBR"
    }, "Rushing" : {
        "leaderboard_rush_att" : "Att",
        "leaderboard_rush_yds" : "Yds",
        "leaderboard_rush_td" : "TD",
        "leaderboard_rush_yds_per_att" : "Yds/Att",
        "leaderboard_rush_yds_per_g" : "Yds/G",
        "leaderboard_fumbles" : "Fmb"
    }, "Receiving" : {
        "leaderboard_rec" : "Rec",
        "leaderboard_rec_yds" : "Yds",
        "leaderboard_rec_td" : "TD",
        "leaderboard_rec_yds_per_rec" : "Yds/Rec",
        "leaderboard_rec_yds_per_g" : "Yds/G",
    }, "Scrimmage/All Purpose" : {
        "leaderboard_yds_from_scrimmage" : "Yds",
        "leaderboard_fumbles" : "Fmb",
        "leaderboard_rush_receive_td" : "TD",
        "leaderboard_all_purpose_yds" : "APYds",
        "leaderboard_touches" : "Touch",
        "leaderboard_two_pt_md" : "2PM",
        "leaderboard_yds_per_touch" : "Yds/Tch",
        "leaderboard_all_td_no_other" : "APTD",
    },
    "Kick Returns" : {
        "leaderboard_kick_ret" : "Ret",
        "leaderboard_kick_ret_yds" : "Yds",
        "leaderboard_kick_ret_td" : "TD",
        "leaderboard_kick_ret_yds_per_ret" : "Yds/Ret"
    },
    "Advanced/Kick Returns" : {
        "leaderboard_kick_ret_long" : "LngKick",
        "leaderboard_punt_ret_long" : "LngPunt"
    },
    "Punt Returns" : {
        "leaderboard_punt_ret" : "Ret",
        "leaderboard_punt_ret_yds" : "Yds",
        "leaderboard_punt_ret_td" : "TD",
        "leaderboard_punt_ret_yds_per_ret" : "Yds/Ret"
    },
    "Advanced/Punt Returns" : {
        "leaderboard_punt_ret_long" : "LngPunt",
        "leaderboard_kick_ret_long" : "LngKick",
    },
    "Scoring" : {
        "leaderboard_xpm" : "XPM",
        "leaderboard_xpa" : "XPA",
        "leaderboard_fgm" : "FGM",
        "leaderboard_fga" : "FGA",
        "leaderboard_fg_perc" : "FG%",
        "leaderboard_scoring" : "Pts"
    },
    "Punting" : {
        "leaderboard_punt" : "Pnt",
        "leaderboard_punt_yds" : "Yds",
        "leaderboard_punt_yds_per_punt" : "Yds/Pnt"
    },
    "Advanced/Punting" : {
        "leaderboard_punt_long" : "Lng"
    },
    "Defense" : {
        "leaderboard_fumbles_rec" : "FR",
        "leaderboard_fumbles_rec_yds" : "FR Yds",
        "leaderboard_fumbles_rec_td" : "FR TD",
        "leaderboard_def_int" : "Int",
        "leaderboard_def_int_yds" : "Int Yds",
        "leaderboard_def_int_td" : "Int TD",
        "leaderboard_tackles_solo" : "Solo",
        "leaderboard_tackles_combined" : "Comb",
        "leaderboard_tackles_loss" : "TFL",
        "leaderboard_fumbles_forced" : "FF",
        "leaderboard_pass_defended" : "PD",
        "leaderboard_sacks" : "Sk",
        "leaderboard_safety_md" : "Sfty",
    }
}

team_renames = {
    "oakland raiders" : "las vegas raiders",
    "los angeles raiders" : "las vegas raiders",
    "san diego chargers" : "los angeles chargers",
    "phoenix cardinals" : "arizona cardinals",
    "washington tbd" : "washington football team"
}

manual_awards_map = {}
manual_players = {}

logname = "nfl.log"
logger = logging.getLogger("nfl")
logger.setLevel(logging.INFO)
formatter = logging.Formatter(fmt='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
handler = TimedRotatingFileHandler(logname, when="midnight", interval=1)
handler.suffix = "%Y%m%d"
handler.setFormatter(formatter)
logger.addHandler(handler)
streamhandler = logging.StreamHandler(sys.stdout)
streamhandler.setLevel(logging.DEBUG)
logger.addHandler(streamhandler)

home_page = "https://www.pro-football-reference.com"
main_page_url_format = "https://www.pro-football-reference.com/players/{}/{}.htm"
player_search_url_format = "https://www.pro-football-reference.com/search/search.fcgi?search={}"
game_splits_url_format = "https://www.pro-football-reference.com/players/{}/{}/gamelog"
advanced_game_splits_url_format = "https://www.pro-football-reference.com/players/{}/{}/gamelog/advanced"
yearly_game_splits_url_format = "https://www.pro-football-reference.com/players/{}/{}/gamelog/{}"
gwd_url_format = "https://www.pro-football-reference.com/play-index/comeback.cgi?player={}"
penalties_url = "https://www.pro-football-reference.com/players/{}/{}/penalties"
pick6_url = "https://www.pro-football-reference.com/players/{}/{}/pick-sixes"
team_schedule_url_format = "https://www.pro-football-reference.com/teams/{}/{}.htm"
team_injury_url_format = "https://www.pro-football-reference.com/teams/{}/{}_injuries.htm"
team_spread_url_format = "https://www.pro-football-reference.com/teams/{}/{}_lines.htm"
opponent_schedule_url_format = "https://www.pro-football-reference.com/years/{}"
opponent_yearly_schedule_url_format = "https://www.pro-football-reference.com/years/{}/games.htm"
opponent_defense_schedule_url_format = "https://www.pro-football-reference.com/years/{}/opp.htm"
opponent_fantasy_rank_url_format = "https://www.pro-football-reference.com/years/{}/fantasy-points-against-{}.htm"

totals = None
with open("yearly_totals.json", "r") as file:
    totals = json.load(file)

css_string = None
with open ("nfl.css", "r") as file:
    css_string = file.read()

team_colors = None
with open ("../team_colors.json", "r") as file:
    team_colors = json.load(file)

champs = None
with open ("champs.json", "r") as file:
    champs = json.load(file)

super_bowls = None
with open ("super_bowls.json", "r") as file:
    super_bowls = json.load(file)

team_venues = None
with open ("team_venues.json", "r") as file:
    team_venues = json.load(file)

team_venue_history = None
with open ("team_venue_history.json", "r") as file:
    team_venue_history = json.load(file)

ssl._create_default_https_context = ssl._create_unverified_context

def main():
    """The main function."""

    manual_comment_short = "c"
    manual_comment_long = "comment"
    debug_mode_short = "d"
    debug_mode_long = "debug"
    try:
        options = getopt.getopt(sys.argv[1:], manual_comment_short + ":" + debug_mode_short + ":", [manual_comment_long + "=", debug_mode_long + "="])[0]
    except getopt.GetoptError as err:
        logger.error("Encountered error \"" + str(err) + "\" parsing arguments")
        return

    reddit = praw.Reddit("nflcomparebot")
 
    subreddit = reddit.subreddit("+".join(subreddits_to_crawl.keys()))
    #subreddit = reddit.subreddit("pythonforengineers")

    conn = sqlite3.connect("nfl.db")
    try:
        with conn:
            curr = conn.cursor()
            
            curr.execute("SELECT COUNT(*) FROM sqlite_master WHERE type=\"table\" AND name=\"nfl\";")
            
            numtables = int(curr.fetchone()[0])

            if not numtables:
                logger.info("nfl table missing. Creating...")
                curr.execute("CREATE TABLE nfl (reply_id TEXT PRIMARY KEY, reply_comment_id TEXT, reply_author TEXT NOT NULL, subreddit TEXT NOT NULL, original_comment TEXT, was_successful BOOLEAN NOT NULL CHECK (was_successful IN (0,1)), was_deleted BOOLEAN NOT NULL CHECK (was_deleted IN (0,1)), timestamp INTEGER NOT NULL);")
                curr.execute("SELECT COUNT(*) FROM sqlite_master WHERE type=\"table\" AND name=\"nfl\";")
                numtables = int(curr.fetchone()[0])
                if numtables:
                    logger.info("nfl table created!")
                else:
                    raise Exception("Error creating table!")
    finally:
        conn.close()

    for opt, arg in options:
        if opt in ("-" + manual_comment_short, "--" + manual_comment_long):
            comment = reddit.comment(id=arg.strip())
            if not comment.archived and comment.author and not comment.author.name.lower() in blocked_users:
                if re.search(r"!\bnflcompare\b", comment.body, re.IGNORECASE):
                    logger.info("FOUND COMMENT " + str(comment.id))
                    parse_input(comment, False, comment.subreddit.display_name in approved_subreddits)
            return
        elif opt in ("-" + debug_mode_short, "--" + debug_mode_long):
            comment_str = arg.strip()
            comment = FakeComment(comment_str, "-1", "", "nfl")
            if re.search(r"!\bnflcompare\b", comment.body, re.IGNORECASE):
                logger.info("FOUND COMMENT " + str(comment.id))
                parse_input(comment, True, False)
            return

    with ThreadPoolExecutor(max_workers=10) as executor:
        for comment in subreddit.stream.comments():
            if not comment.archived and comment.author and not comment.author.name.lower() in blocked_users:
                if re.search(r"!\bnflcompare\b", comment.body, re.IGNORECASE):
                    logger.info("FOUND COMMENT " + str(comment.id))
                    executor.submit(parse_input, comment, False, comment.subreddit.display_name in approved_subreddits)

def parse_input(comment, debug_mode, is_approved, existing_cur=None, existing_comment=None):
    try:
        start_time = datetime.datetime.now()
        logger.info("#" + str(threading.get_ident()) + "#   " + "THREAD STARTED FOR " + str(comment.id))
        logger.info("#" + str(threading.get_ident()) + "#   " + "COMMENT: " + comment.body)

        if existing_comment and not isinstance(existing_comment, Message):
            try:
                existing_comment.delete()
            except praw.exceptions.APIException as e:
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
            existing_comment = None
        
        if ignore_approved:
            is_approved = True

        manager = multiprocessing.Manager()
        comment_obj = manager.dict()
        comment_obj["comment"] = comment
        comment_obj["reply"] = existing_comment if not isinstance(existing_comment, Message) else None
        comment_obj["total_players"] = 0
        comment_obj["player_count"] = 0
        comment_obj["start_time"] = datetime.datetime.now(timezone("US/Eastern"))
        comment_obj["debug_mode"] = debug_mode
        comment_obj["is_approved"] = is_approved

        if existing_cur:
            sub_parse_input(existing_cur, comment, debug_mode, comment_obj, True)
        else:
            conn = sqlite3.connect("nfl.db")
            try:
                with conn:
                    curr = conn.cursor()
                    sub_parse_input(curr, comment, debug_mode, comment_obj, False)
            finally:
                conn.close()
    except BaseException as e:
        logger.error(traceback.format_exc())
        raise e
    finally:
        end_time = datetime.datetime.now() - start_time
        time_str = str(end_time)
        logger.info("#" + str(threading.get_ident()) + "#   " + "RunTime : " + time_str)

def sub_parse_input(curr, comment, debug_mode, comment_obj, force_through):
    curr.execute("SELECT 1 FROM nfl WHERE reply_id = ?;", (comment.id, ))
    if not curr.fetchone() or force_through:
        reddit_message = None
        last_updated = None
        imgur_link = None
        hide_table = False
        main_comment = None
        was_successful = 0
        try:
            main_comment = parse_comment_str(comment.body).group(0)

            is_fantasy = subreddits_to_crawl[comment.subreddit.display_name.lower()] if hasattr(comment, "subreddit") and comment.subreddit else False

            player_type = {
                "da_type" : None
            }
            player_datas, last_updated, original_comment, hide_table, is_fantasy, extra_stats = handle_player_string(comment.body, player_type, is_fantasy, last_updated, hide_table, comment_obj)

            has_one_player = False
            for player_data in player_datas:
                if player_data["stat_values"]["Shared"]["Player"] != ["No Player Match!"]:
                    has_one_player =  True
                    break
            #if not has_one_player:
            #    raise get_constant_data.CustomMessageException("Zero player matches in search!")

            has_one_player_games = False
            for player_data in player_datas:
                if "all_rows" in player_data["stat_values"]["Shared"] and len(player_data["stat_values"]["Shared"]["all_rows"]):
                    has_one_player_games = True
                    break
            #if not has_one_player_games:
                #raise get_constant_data.CustomMessageException("Zero players have games in the provided query!")
            
            reddit_message, imgur_link = get_reddit_player_table(player_datas, player_type, is_fantasy, debug_mode, original_comment, last_updated, str(comment.id), hide_table, extra_stats, has_one_player, has_one_player_games)
            if hide_table:
                reddit_message = "### Comparison complete! Image is available [here](" + imgur_link + ")"
            if has_one_player_games:
                reddit_message += "\n\n^(N/A indicates stat was not tracked at all during the time frame, * indicates stat was not tracked consistently throughout the entire time frame)"
            else:
                reddit_message = reddit_message[:-5]
            was_successful = 1
        except get_constant_data.CustomMessageException as e:
            reddit_message = "Oh no, I had a problem with your request: " + e.message
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        except (urllib.error.URLError, socket.timeout, requests.exceptions.ConnectionError) as e:
            reddit_message = "Oh no, I had a problem with your request: Unable to connect to Pro Football Reference! Please try again later"
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        except BaseException as e:
            reddit_message = "Oh no, I had a problem with your request. If you leave your comment I will try to fix this issue and re-run the comparison"
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        reddit_message += "\n\n---"
        if imgur_link and not hide_table:
            reddit_message = "Tables cutoff or tough to read? Click [here](" + imgur_link + ") to view this comparison as an image\n\n---\n" + reddit_message
        if last_updated:
            reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
        non_message_reddit_message = reddit_message
        if not isinstance(comment, Message):
            reddit_message += "\n\n^(Made a mistake? Edit your comment and send me this )[^message](https://www.reddit.com/message/compose?to=nflcomparebot&subject=Re-Run&message=" + comment.id + ")^( to re-run the comparison)"
            reddit_message += "\n\n^(Or delete the comparison by sending me this )[^message](https://www.reddit.com/message/compose?to=nflcomparebot&subject=Delete&message=" + comment.id + ")"
        reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
        if len(reddit_message) > 10000:
            reddit_message = "Oh no, I had a problem with your request: Comment would be over the reddit max of 10000 characters!"
            if imgur_link:
                reddit_message += "\n\nI can at least provide an image of this comparison [here](" + imgur_link + ")\n"
            else:
                reddit_message += "\n\nI was also unable to generate an image of this comparison. This may be resolved if you try again later\n"
            reddit_message += "\n\n---"
            if last_updated:
                reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
            if not isinstance(comment, Message):
                reddit_message += "\n\n^(Made a mistake? Edit your comment and send me this )[^message](https://www.reddit.com/message/compose?to=nflcomparebot&subject=Re-Run&message=" + comment.id + ")^( to re-run the comparison)"
                reddit_message += "\n\n^(Or delete the comparison by sending me this )[^message](https://www.reddit.com/message/compose?to=nflcomparebot&subject=Delete&message=" + comment.id + ")"
            reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
        failed_counter = 0
        try_counter = 0
        last_wait_time = None
        while True:
            curr.execute("SELECT COUNT(*) FROM nfl;")
            num_replies = curr.fetchone()[0] + 1
            logger.info("#" + str(threading.get_ident()) + "#   " + "REPLY: " + comment.id + "(" + str(num_replies) + ")")
            if imgur_link:
                logger.info("#" + str(threading.get_ident()) + "#   " + "IMGUR LINK: " + imgur_link)
            try:
                if not debug_mode:
                    if isinstance(comment_obj["reply"], Message) or not comment_obj["reply"]:
                        reply_comment = comment_obj["comment"].reply(reddit_message)
                    else:
                        reply_comment = comment_obj["comment"].reply(reddit_message)
                        comment_obj["reply"].delete()
                        comment_obj["reply"] = None
                    logger.info("#" + str(threading.get_ident()) + "#   " + "MESSAGE: " + reddit_message)
            except praw.exceptions.APIException as e:
                if (e.error_type == "RATELIMIT"):
                    if failed_counter == 0 and not isinstance(comment_obj["reply"], Message):
                        non_message_reddit_message = "Reddit is currently rate limiting this bot's comments! If this bot gets added to the approved users of r/" + comment.subreddit.display_name + " this should no longer occur. We will delay and try a few more times, but in the meantime here is your comparison as a message\n\n---\n" + non_message_reddit_message
                        non_message_reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
                        if len(non_message_reddit_message) > 10000:
                            non_message_reddit_message = "Reddit is currently rate limiting this bot's comments! If this bot gets added to the approved users of r/" + comment.subreddit.display_name + " this should no longer occur. We will delay and try a few more times, but in the meantime here is your comparison as a message\n\n---\n"
                            non_message_reddit_message += "Oh no, I had a problem with your request: Comment would be over the reddit max of 10000 characters!"
                            if imgur_link:
                                non_message_reddit_message += "\n\nI can at least provide an image of this comparison [here](" + imgur_link + ")\n"
                            else:
                                non_message_reddit_message += "\n\nI was also unable to generate an image of this comparison. This may be resolved if you try again later\n"
                            non_message_reddit_message += "\n\n---"
                            if last_updated:
                                reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
                            non_message_reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
                        try:
                            comment.author.message("NFLCompareBot Comparison " + comment.id, non_message_reddit_message)
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                        except Exception:
                            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                    failed_counter += 1
                    match = re.search(r"(\d+) (second|minute)s?", e.message.lower())
                    if match:
                        match = match.groups()
                        delay_time = int(match[0])
                        units = match[1]
                        if units == "minute":
                            delay_time = (delay_time * 60)
                        if last_wait_time == None or delay_time < last_wait_time or try_counter < max_reddit_retries:
                            last_wait_time = delay_time
                            if not (last_wait_time == None or delay_time < last_wait_time):
                                try_counter += 1
                            delay_step = 10
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(delay_time) + " seconds to allow us to chill")
                            time_to_wait = int(math.ceil(float(delay_time)/float(delay_step)))
                            for i in range(delay_time, 0, -time_to_wait):
                                logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                                time.sleep(time_to_wait)
                            logger.info("#" + str(threading.get_ident()) + "#   " + "0")
                            continue
                        elif not isinstance(comment_obj["reply"], Message):
                            try:
                                comment.author.message("NFLCompareBot Comparison " + comment.id, "We were unable to make the comment due to the rate limits :(. Please see the previous message for the comparison")
                                logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                            except Exception:
                                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                    elif not isinstance(comment_obj["reply"], Message):
                        try:
                            comment.author.message("NFLCompareBot Comparison " + comment.id, "We were unable to make the comment due to the rate limits :(. Please see the previous message for the comparison")
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                        except Exception:
                            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                
                if not (isinstance(comment_obj["reply"], Message) or not comment_obj["reply"]):
                    comment_obj["reply"].delete()
                    comment_obj["reply"] = None
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                break

            if not debug_mode:
                failed_counter = 0
                while(True):
                    try:
                        if reply_comment:
                            curr.execute("INSERT OR REPLACE INTO nfl VALUES (?,?,?,?,?,?,?,?);", (comment.id, reply_comment.id, comment.author.name, comment.subreddit.display_name if hasattr(comment, "subreddit") and comment.subreddit else "from_message", main_comment, was_successful, 0, get_constant_data.round_value(time.time() * 1000)))
                        else:
                            curr.execute("INSERT OR REPLACE INTO nfl VALUES (?,?,?,?,?,?,?,?);", (comment.id, None, comment.author.name, comment.subreddit.display_name if hasattr(comment, "subreddit") and comment.subreddit else "from_message", main_comment, was_successful, 0, get_constant_data.round_value(time.time() * 1000)))
                        break
                    except Exception:
                        failed_counter += 1
                        if failed_counter > max_request_retries:
                            raise

                    delay_step = 10
                    logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow db to chill")
                    time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
                    for i in range(retry_failure_delay, 0, -time_to_wait):
                        logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                        time.sleep(time_to_wait)
                    logger.info("#" + str(threading.get_ident()) + "#   " + "0")
            break
    else:
        logger.info("#" + str(threading.get_ident()) + "#   " + "SKIP: " +  comment.id)

def parse_comment_str(comment_str):
    input_str = re.sub(r"\s+", " ", comment_str).strip()
    input_str = unescape(input_str)
    input_str = input_str.replace("\\<", "<").replace("\\>", ">").replace("\\]", "]").replace("\\[", "[")
    input_str = re.sub(r"(?<!\\)(?:[*_^`]|[~]{2})", "", input_str)
    match = re.search(r"!\bnflcompare\b\s*(?<!\\)<(.+?)(?<!\\)>(?:\s*(?<!\\)\[(.+?)(?<!\\)\](?!\s*\((http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\)))?", input_str, re.IGNORECASE)

    if not match:
        input_split = re.split(r"!\bnflcompare\b", input_str, 1, re.IGNORECASE)
        input_str = "!nflcompare <" + input_split[1].strip() + ">"
        match = re.search(r"!\bnflcompare\b\s*(?<!\\)<(.+?)(?<!\\)>(?:\s*(?<!\\)\[(.+?)(?<!\\)\](?!\s*\((http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\)))?", input_str, re.IGNORECASE)
    if not match:
        raise get_constant_data.CustomMessageException("No players in search!")

    return match

def handle_player_string(comment, player_type, is_fantasy, last_updated, hide_table, comment_obj):
    match = parse_comment_str(comment)

    original_comment = match.group(0)

    names = re.split(r"(?<!\\)\,", match.group(1))

    remove_duplicates = False
    remove_duplicate_games = False
    extra_stats = set()
    is_fantasy_manually_set = False
    current_week = None

    try:
        sub_time_frames = match.group(2)
        parse_time_frames = []
        if sub_time_frames:
            sub_time_frames = re.split(r"(?<!\\)\,", unidecode.unidecode(sub_time_frames).lower().strip())
            for sub_time_frame in sub_time_frames:
                subb_time_frames = re.split(r"(?<!\\)\|", sub_time_frame.strip())
                sub_parsed_time_frames = []
                for sub_time_frame in subb_time_frames:
                    time_frames = re.split(r"(?<!\\)(?:\+|\bdiff\b)", sub_time_frame.strip())
                    add_type = "minus" if re.search(r"\b(diff|playerdiff)\b", sub_time_frame.strip()) else "plus"
                    da_time_frames = []
                    for time_frame in time_frames:
                        time_start = None
                        time_end = None
                        playoffs = None

                        og_time_str = time_frame
                        qualifiers = {}

                        time_frame = re.sub(r"\bplayerdiff\b", "", time_frame).strip()

                        is_sub_query = False
                        last_match = re.search(r"\bis-sub-query\b", time_frame)
                        if last_match:
                            is_sub_query = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:qual-sub-query):(?<!\\)\((.*?)(?<!\\)\))", time_frame)
                        for m in last_match:
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip() + " " + m.group(3)

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:sub-query|event-sub-query|or-sub-query|or-event-sub-query|day-after-sub-query|day-before-sub-query|day-of-sub-query|game-after-sub-query|game-before-sub-query|season-sub-query|or-season-sub-query|season-after-sub-query|season-before-sub-query):(?<!\\)\{.*?(?<!\\)\})", time_frame)
                        last_match = list(last_match)
                        # if len(last_match) > 10:
                        #     raise get_constant_data.CustomMessageException("Only can have a max of 10 sub queries!")
                        for m in last_match:
                            # if is_sub_query:
                            #     raise get_constant_data.CustomMessageException("Cannot have nested sub queries!")

                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)

                            if qualifier_str.startswith("sub-query:"):
                                qual_str = "sub-query:"
                                qual_type = "Sub Query"
                            elif qualifier_str.startswith("event-sub-query:"):
                                qual_str = "event-sub-query:"
                                qual_type = "Event Sub Query"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("or-sub-query:"):
                                qual_str = "or-sub-query:"
                                qual_type = "Or Sub Query"
                            elif qualifier_str.startswith("or-event-sub-query:"):
                                qual_str = "or-event-sub-query:"
                                qual_type = "Or Event Sub Query"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("day-of-sub-query:"):
                                qual_str = "day-of-sub-query:"
                                qual_type = "Day Of Sub Query"
                            elif qualifier_str.startswith("day-after-sub-query:"):
                                qual_str = "day-after-sub-query:"
                                qual_type = "Day After Sub Query"
                            elif qualifier_str.startswith("day-before-sub-query:"):
                                qual_str = "day-before-sub-query:"
                                qual_type = "Day Before Sub Query"
                            elif qualifier_str.startswith("game-after-sub-query:"):
                                qual_str = "game-after-sub-query:"
                                qual_type = "Game After Sub Query"
                            elif qualifier_str.startswith("game-before-sub-query:"):
                                qual_str = "game-before-sub-query:"
                                qual_type = "Game Before Sub Query"
                            elif qualifier_str.startswith("season-sub-query:"):
                                qual_str = "season-sub-query:"
                                qual_type = "Season Sub Query"
                            elif qualifier_str.startswith("or-season-sub-query:"):
                                qual_str = "or-season-sub-query:"
                                qual_type = "Or Season Sub Query"
                            elif qualifier_str.startswith("season-after-sub-query:"):
                                qual_str = "season-after-sub-query:"
                                qual_type = "Season After Sub Query"
                            elif qualifier_str.startswith("season-before-sub-query:"):
                                qual_str = "season-before-sub-query:"
                                qual_type = "Season Before Sub Query"

                            qualifier_obj["values"] = re.split(r"(?<!\\)\~", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])
                            qualifier_obj["values"] = [value.strip() for value in qualifier_obj["values"]]

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:w|(?:playing|starting)-with|a|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|holidays?|dts|dates|stadium|exact-stadium|arena|exact-arena|opponent-city|opponent-exact-city|team-city|team-exact-city|city|exact-city|surface|roof|thrown-to|injury|exact-official|exact-referee|exact-umpire|exact-team-head-coach|exact-opponent-head-coach|official|referee|umpire|team-head-coach|opponent-head-coach|start-time):(?<!\\)\(.*?(?<!\\)\))", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("starting-"):
                                qualifier_str = qualifier_str.replace("starting-", "playing-", 1)
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })

                            if qualifier_str.startswith("w:"):
                                qual_str = "w:"
                                qual_type = "Playing With"
                            elif qualifier_str.startswith("playing-with:"):
                                qual_str = "playing-with:"
                                qual_type = "Playing With"
                            elif qualifier_str.startswith("a:"):
                                qual_str = "a:"
                                qual_type = "Playing Against"
                            elif qualifier_str.startswith("playing-against:"):
                                qual_str = "playing-against:"
                                qual_type = "Playing Against"
                            elif qualifier_str.startswith("thrown-to:"):
                                qual_str = "thrown-to:"
                                qual_type = "Thrown To"
                                extra_stats.add("thrown-to")
                            elif qualifier_str.startswith("prv-w:"):
                                qual_str = "prv-w:"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("previous-playing-with:"):
                                qual_str = "previous-playing-with:"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("prv-a:"):
                                qual_str = "playing-against:"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("previous-playing-against:"):
                                qual_str = "previous-playing-against:"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("upc-w:"):
                                qual_str = "playing-against:"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upcoming-playing-with:"):
                                qual_str = "upcoming-playing-with:"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upc-a:"):
                                qual_str = "upc-a:"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("upcoming-playing-against:"):
                                qual_str = "upcoming-playing-against:"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("playing-same-opponent:"):
                                qual_str = "playing-same-opponent:"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-opponents:"):
                                qual_str = "playing-same-opponents:"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-date:"):
                                qual_str = "playing-same-date:"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("playing-same-dates:"):
                                qual_str = "playing-same-dates:"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("stadium:"):
                                qual_str = "stadium:"
                                qual_type = "Stadium"
                            elif qualifier_str.startswith("exact-stadium:"):
                                qual_str = "exact-stadium:"
                                qual_type = "Exact Stadium"
                            elif qualifier_str.startswith("arena:"):
                                qual_str = "arena:"
                                qual_type = "Stadium"
                            elif qualifier_str.startswith("exact-arena:"):
                                qual_str = "exact-arena:"
                                qual_type = "Exact Stadium"
                            elif qualifier_str.startswith("city:"):
                                qual_str = "city:"
                                qual_type = "City"
                            elif qualifier_str.startswith("exact-city:"):
                                qual_str = "exact-city:"
                                qual_type = "Exact City"
                            elif qualifier_str.startswith("team-city:"):
                                qual_str = "team-city:"
                                qual_type = "Team City"
                            elif qualifier_str.startswith("team-exact-city:"):
                                qual_str = "team-exact-city:"
                                qual_type = "Team Exact City"
                            elif qualifier_str.startswith("opponent-city:"):
                                qual_str = "opponent-city:"
                                qual_type = "Opponent City"
                            elif qualifier_str.startswith("opponent-exact-city:"):
                                qual_str = "opponent-exact-city:"
                                qual_type = "Opponent Exact City"
                            elif qualifier_str.startswith("surface:"):
                                qual_str = "surface:"
                                qual_type = "Surface"
                            elif qualifier_str.startswith("roof:"):
                                qual_str = "roof:"
                                qual_type = "Roof"
                            elif qualifier_str.startswith("holiday:"):
                                qual_str = "holiday:"
                                qual_type = "Holiday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str.startswith("holidays:"):
                                qual_str = "holidays:"
                                qual_type = "Holiday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str.startswith("dts:"):
                                qual_str = "dts:"
                                qual_type = "Dates"
                            elif qualifier_str.startswith("dates:"):
                                qual_str = "dates:"
                                qual_type = "Dates"
                            elif qualifier_str.startswith("injury:"):
                                qual_str = "injury:"
                                qual_type = "Injury"
                            elif qualifier_str.startswith("playing-same-game:"):
                                qual_str = "playing-same-game:"
                                qual_type = "Playing Same Game"
                            elif qualifier_str.startswith("official:"):
                                qual_str = "official:"
                                qual_type = "Official"
                            elif qualifier_str.startswith("referee:"):
                                qual_str = "referee:"
                                qual_type = "Referee"
                            elif qualifier_str.startswith("umpire:"):
                                qual_str = "umpire:"
                                qual_type = "Umpire"
                            elif qualifier_str.startswith("team-head-coach:"):
                                qual_str = "team-head-coach:"
                                qual_type = "Team Head Coach"
                            elif qualifier_str.startswith("opponent-head-coach:"):
                                qual_str = "opponent-head-coach:"
                                qual_type = "Opponent Head Coach"
                            elif qualifier_str.startswith("official:"):
                                qual_str = "official:"
                                qual_type = "Exact Official"
                            elif qualifier_str.startswith("exact-referee:"):
                                qual_str = "exact-referee:"
                                qual_type = "Exact Referee"
                            elif qualifier_str.startswith("exact-umpire:"):
                                qual_str = "exact-umpire:"
                                qual_type = "Exact Umpire"
                            elif qualifier_str.startswith("exact-team-head-coach:"):
                                qual_str = "exact-team-head-coach:"
                                qual_type = "Exact Team Head Coach"
                            elif qualifier_str.startswith("exact-opponent-head-coach:"):
                                qual_str = "exact-opponent-head-coach:"
                                qual_type = "Exact Opponent Head Coach"
                            elif qualifier_str.startswith("start-time:"):
                                if qualifier_str.startswith("start-time:"):
                                    qual_str = "start-time:"
                                    qual_type = "Start Time"

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])

                                time_zones = {
                                    "CDT" : "US/Central",
                                    "CST" : "US/Central",
                                    "EST" : "US/Eastern",
                                    "EDT" : "US/Eastern",
                                    "MDT" : "US/Mountain",
                                    "MST" : "US/Mountain",
                                    "PDT" : "US/Pacific",
                                    "PST" : "US/Pacific",
                                    "ET" : "US/Eastern",
                                    "CT" : "US/Central",
                                    "MT" : "US/Mountain",
                                    "PT" : "US/Pacific"
                                }
                                time_zone = None
                                last_val = split_vals[len(split_vals) - 1]
                                for index, split_val in enumerate(split_vals):
                                    for key in time_zones:
                                        if split_val.upper().endswith(key):
                                            time_zone = time_zones[key]
                                            split_vals[index] = split_vals[index][:-(len(key))].strip()
                                            break
                                    if not time_zone:
                                        for key in pytz.all_timezones:
                                            if split_val.upper().endswith(key.upper()):
                                                time_zone = key
                                                split_vals[index] = split_vals[index][:-(len(key))].strip()
                                                break
                                if not time_zone:
                                    time_zone = "US/Eastern"
                                
                                if len(split_vals) == 1:
                                    the_date = dateutil.parser.parse(split_vals[0]).time()
                                    the_date_2 = dateutil.parser.parse(split_vals[0]).time()
                                    if split_vals[0].count(":") == 0:
                                        the_date_2 = the_date_2.replace(minute=59).replace(second=59)
                                    elif split_vals[0].count(":") == 1:
                                        the_date_2 = the_date_2.replace(second=59)
                                    qualifier_obj["values"] = {
                                        "start_val" : the_date,
                                        "end_val" : the_date_2,
                                        "time_zone" : time_zone
                                    }
                                else:
                                    start_date = None
                                    end_date = None
                                    if split_vals[0] == "min" and split_vals[1] == "max":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = datetime.time(23, 59, 59)
                                    elif split_vals[0] == "min":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = dateutil.parser.parse(split_vals[1]).time()
                                    elif split_vals[1] == "max":
                                        start_date = dateutil.parser.parse(split_vals[0]).time()
                                        end_date = datetime.time(23, 59, 59)
                                    else:
                                        start_date = dateutil.parser.parse(split_vals[0]).time()
                                        end_date = dateutil.parser.parse(split_vals[1]).time()

                                    qualifier_obj["values"] = {
                                        "start_val" : start_date,
                                        "end_val" : end_date,
                                        "time_zone" : time_zone
                                    }
                                
                                qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"].replace(microsecond=0).replace(second=0)
                                qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"].replace(microsecond=0).replace(second=0)
                            
                            if not qual_type in ["Start Time"]:
                                qualifier_obj["values"] = re.split(r"(?<!\\)\~", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])
                                qualifier_obj["values"] = [value.strip() for value in qualifier_obj["values"]]

                            if qual_type == "Dates":
                                new_values = []
                                for value in qualifier_obj["values"]:
                                    replace_first_year = {
                                        "replace" : False
                                    }

                                    if "to" in value:
                                        dates = re.split(r"(?<!\\)to", value)
                                        date1 = dateutil.parser.parse(dates[0].strip()).date()
                                        date2 = dateutil.parser.parse(dates[1].strip()).date()
                                        new_values = [date1 + datetime.timedelta(days=x) for x in range((date2-date1).days + 1)]
                                        date1 = handle_string_year(dates[0], True, replace_first_year)
                                        date2 = handle_string_year(dates[1], False, replace_first_year)
                                        new_values.append({
                                            "start_val" : date1,
                                            "end_val" : date2,
                                        })
                                    else:
                                        new_values.append(dateutil.parser.parse(value).date())
                                        date1 = handle_string_year(value, True, replace_first_year)
                                        new_values.append({
                                            "start_val" : date1,
                                            "end_val" : date1,
                                        })
                                qualifier_obj["values"] = new_values

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(career(?: |-)?(year|season|game|team|franchise|number))s?\b", time_frame)
                        for m in last_match:
                            if m.group(1) == "career-season":
                                extra_stats.add("career-year")
                            else:
                                extra_stats.add(m.group(1))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(show(?: |-)?only(?: |-)?table:)\(.+?\)", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("show-only-table-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(hide(?: |-)?table:)\(.+?\)", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("hide-table-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        time_frame = re.sub(r"\s+", " ", re.sub(r"(?:career)(?!-)", "", time_frame)).strip()

                        time_frame = re.sub(r"tables?", "", time_frame).strip()
                        time_frame, is_image = re.subn(r"images?", "", time_frame)
                        if is_image:
                            time_frame = time_frame.strip()
                            hide_table = True
                        
                        last_match = re.search(r"\bremove[-\s]duplicate-games?\b", time_frame)
                        if last_match:
                            remove_duplicate_games = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_match = re.search(r"\bremove[-\s]duplicates?\b", time_frame)
                        if last_match:
                            remove_duplicates = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(seasons-leading)s?:(\S+)-(\S+)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1) + "-" + str(ordinal_to_number(m.group(2))) + "-" + str(str(ordinal_to_number(m.group(3)))))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(best-season|worst-season|seasons-leading)s?:(\S+)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1) + "-" + str(ordinal_to_number(m.group(2))))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\badd-extra-stat:\((.+?)\)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\bshow(?: |-)?(only(?: |-)?)?(ats-record|ou-record|qb-record|era-adjusted|era-adjusted-passing|record|score|year|games?-count|seasons-leading|season|date|game|best-season|worst-season|team|franchise|number|award|play)s?\b", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(2))
                            if m.group(2) == "play":
                                extra_stats.add("current-stats")
                            elif m.group(2) == "season":
                                extra_stats.add("year")
                            elif m.group(2) == "game-count" or m.group(2) == "games-count":
                                extra_stats.add("show-only-stat-g")
                                extra_stats.add("show-only-stat-gs")
                                extra_stats.add("show-only-table-0")
                            elif m.group(2) == "qb-record":
                                extra_stats.add("show-only-stat-rec")
                                extra_stats.add("show-only-stat-rec/17g")
                                extra_stats.add("show-only-stat-w/l%")
                                player_type["da_type"] = "QB"
                            elif m.group(2) == "era-adjusted" or m.group(2) == "era-adjusted-passing":
                                for header in advanced_stats:
                                    extra_stats.add("show-only-stat-" + header.lower())
                                player_type["da_type"] = "QB"

                            if m.group(1):
                                if m.group(2) == "record":
                                    for header in ("TmRec", "TmW/L%"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "ats-record":
                                    for header in ("ATS TmRec", "ATS TmW/L%", "Spread/G", "SpreadMargin/G", "TmRec", "TmW/L%"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "ou-record":
                                    for header in ("O/U TmRec", "O/U TmW/L%", "OverUnder/G", "OUMargin/G", "TmRec", "TmW/L%"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "score":
                                    for header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G"):
                                        extra_stats.add("show-only-stat-" + header.lower())

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\bhide(?: |-)?(name|year|season|date|query|queries|advanced)s?\b", time_frame)
                        for m in last_match:
                            if m.group(1) == "date" or m.group(1) == "season":
                                extra_stats.add("hide-year")
                            elif m.group(1).startswith("quer"):
                                extra_stats.add("hide-query")
                            else:
                                extra_stats.add("hide-" + m.group(1))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(show(?: |-)?stat:)[\S-]+", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("show-stat-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(show(?: |-)?only(?: |-)?stat:)[\S-]+", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("show-only-stat-" + unescape_string(stat.strip()))
                                extra_stats.add("show-stat-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(hide(?: |-)?stat:)[\S-]+", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("hide-stat-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        if is_sub_query:
                            extra_stats = set()
                        
                        last_match = re.search(r"\b(no(?:t|n)? ?)?-?fantasy(?!-)\b", time_frame)
                        if last_match:
                            is_fantasy_manually_set = True
                            if last_match.group(1):
                                is_fantasy = False
                            else:
                                is_fantasy = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_match = re.search(r"\b(no(?:t|n)?(?: -)?)?(?:(?<!-)includes?|(?<!-)including|(?<!-)and|(?<!-)with)(?: |-)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", time_frame)
                        if last_match:
                            playoff_match_str = last_match.group(1)
                            if "regular" in last_match.group(0):
                                if playoff_match_str:
                                    playoffs = "Only"
                                else:
                                    playoffs = "Include"
                            else:
                                if playoff_match_str:
                                    playoffs = "No"
                                else:
                                    playoffs = "Include"
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        else:
                            last_match = re.search(r"\b(no(?:t|n)?(?: -)?)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", time_frame)
                            if last_match:
                                playoff_match_str = last_match.group(1)
                                if "regular" in last_match.group(0):
                                    if playoff_match_str:
                                        playoffs = "Only"
                                    else:
                                        playoffs = "No"
                                else:
                                    if playoff_match_str:
                                        playoffs = "No"
                                    else:
                                        playoffs = "Only"
                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        time_frame = re.sub(r"\s+", " ", re.sub(r"(?:regular(?:-| )?season|playoffs?|post(?:-| )?seasons?)(?!-)", "", time_frame)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:(?:playing|starting)-with|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?))\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("starting-"):
                                qualifier_str = qualifier_str.replace("starting-", "playing-", 1)
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })
                                
                            if qualifier_str.startswith("playing-with") or qualifier_str.startswith("playing-same-game") or qualifier_str.startswith("starting-same-game") or qualifier_str.startswith("playing-against") or qualifier_str.startswith("prv-w") or qualifier_str.startswith("previous-playing-with") or qualifier_str.startswith("prv-a") or qualifier_str.startswith("previous-playing-against") or qualifier_str.startswith("upc-w") or qualifier_str.startswith("upcoming-playing-with") or qualifier_str.startswith("upc-a") or qualifier_str.startswith("upcoming-playing-against") or qualifier_str.startswith("playing-same-opponent")  or qualifier_str.startswith("playing-same-opponents") or qualifier_str.startswith("playing-same-date") or qualifier_str.startswith("playing-same-dates"):
                                if qualifier_str.startswith("playing-with"):
                                    qual_str = "playing-with"
                                    qual_type = "Playing With"
                                elif qualifier_str.startswith("playing-against"):
                                    qual_str = "playing-against"
                                    qual_type = "Playing Against"
                                elif qualifier_str.startswith("prv-w"):
                                    qual_str = "prv-w"
                                    qual_type = "Previous Playing With"
                                elif qualifier_str.startswith("previous-playing-with"):
                                    qual_str = "previous-playing-with"
                                    qual_type = "Previous Playing With"
                                elif qualifier_str.startswith("prv-a"):
                                    qual_str = "playing-against"
                                    qual_type = "Previous Playing Against"
                                elif qualifier_str.startswith("previous-playing-against"):
                                    qual_str = "previous-playing-against"
                                    qual_type = "Previous Playing Against"
                                elif qualifier_str.startswith("upc-w"):
                                    qual_str = "playing-against"
                                    qual_type = "Upcoming Playing With"
                                elif qualifier_str.startswith("upcoming-playing-with"):
                                    qual_str = "upcoming-playing-with"
                                    qual_type = "Upcoming Playing With"
                                elif qualifier_str.startswith("upc-a"):
                                    qual_str = "upc-a"
                                    qual_type = "Upcoming Playing Against"
                                elif qualifier_str.startswith("upcoming-playing-against"):
                                    qual_str = "upcoming-playing-against"
                                    qual_type = "Upcoming Playing Against"
                                elif qualifier_str.startswith("playing-same-opponent"):
                                    qual_str = "playing-same-opponent"
                                    qual_type = "Playing Same Opponents"
                                elif qualifier_str.startswith("playing-same-opponents"):
                                    qual_str = "playing-same-opponents"
                                    qual_type = "Playing Same Opponents"
                                elif qualifier_str.startswith("playing-same-date"):
                                    qual_str = "playing-same-date"
                                    qual_type = "Playing Same Date"
                                elif qualifier_str.startswith("playing-same-dates"):
                                    qual_str = "playing-same-dates"
                                    qual_type = "Playing Same Date"
                                elif qualifier_str.startswith("playing-same-game"):
                                    qual_str = "playing-same-game:"
                                    qual_type = "Playing Same Game"
                            
                            qualifier_obj["time_frame_str"] = re.sub(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:(?:playing|starting)-with|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|-?starts?|-?started|-?starting|-?ignore-starts?|-?ignore-started?|-?ignore-starting|start-if-qb))(?!:)\b", "", og_time_str)
                            qualifier_obj["time_frame_str"] = re.sub(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:qual-sub-query):(?<!\\)\(.*?(?<!\\)\))", "", qualifier_obj["time_frame_str"])

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:formula|season-formula|max-streak-formula|count-streak-formula):\{.+?\})", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("formula:"):
                                qual_str = "formula:"
                                qual_type = "Formula"
                            elif qualifier_str.startswith("season-formula:"):
                                qual_str = "season-formula:"
                                qual_type = "Season Formula"
                            elif qualifier_str.startswith("max-streak-formula:"):
                                qual_str = "max-streak-formula:"
                                qual_type = "Max Streak Formula"
                            elif qualifier_str.startswith("count-streak-formula:"):
                                qual_str = "count-streak-formula:"
                                qual_type = "Count Streak Formula"

                            formula = unescape_string(re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])
                            if "Streak" in qual_type:
                                qualifier_obj["values"] = [{
                                    "start_level" : 1,
                                    "end_level" : 1,
                                    "stat_quals" : None,
                                    "time_frame" : None,
                                    "stats" : [{
                                        "stat" : formula,
                                        "over_stat" : None,
                                        "start_val" : 1,
                                        "end_val" : 1,
                                    }]
                                }]
                            else:
                                qualifier_obj["values"] = [formula]

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"(no(?:t|n)?(?: |-))?(?:only ?)?(before|after|exact|through)? *(?:season-)?age:? *(?:(\d+)(y|m|d)?)(?:(\d+)(y|m|d)?)?(?:(\d+)(y|m|d)?)?(?:-(?:(\d+)(y|m|d)?)(?:(\d+)(y|m|d)?)?(?:(\d+)(y|m|d)?)?)?", time_frame)
                        for m in last_match:
                            qualifier_obj = {}

                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            compare_type = m.group(2)

                            days = 0
                            years = 0
                            months = 0
                            days_2 = 0
                            years_2 = 0
                            months_2 = 0

                            date_1 = m.group(3)
                            unit_1 = m.group(4)
                            date_2 = m.group(5)
                            unit_2 = m.group(6)
                            date_3 = m.group(7)
                            unit_3 = m.group(8)
                            date_1_2 = m.group(9)
                            unit_1_2 = m.group(10)
                            date_2_2 = m.group(11)
                            unit_2_2 = m.group(12)
                            date_3_2 = m.group(13)
                            unit_3_2 = m.group(14)

                            has_first_months = False
                            has_first_days = False
                            has_second_months = False
                            has_second_days = False

                            if date_1:
                                if unit_1 == "d":
                                    days = int(date_1)
                                    has_first_days = True
                                elif unit_1 == "m":
                                    months = int(date_1)
                                    has_first_months = True
                                else:
                                    years = int(date_1)

                            if date_2:
                                if unit_2 == "d":
                                    days = int(date_2)
                                    has_first_days = True
                                elif unit_2 == "m":
                                    months = int(date_2)
                                    has_first_months = True
                                else:
                                    years = int(date_2)

                            if date_3:
                                if unit_3 == "d":
                                    days = int(date_3)
                                    has_first_days = True
                                elif unit_3 == "m":
                                    months = int(date_3)
                                    has_first_months = True
                                else:
                                    years = int(date_3)

                            second_match = False
                            if date_1_2 or date_2_2 or date_3_2:
                                second_match = True
                                if date_1_2:
                                    if unit_1_2 == "d":
                                        days_2 = int(date_1_2)
                                        has_second_days = True
                                    elif unit_1_2 == "m":
                                        months_2 = int(date_1_2)
                                        has_second_months = True
                                    else:
                                        years_2 = int(date_1_2)

                                if date_2_2:
                                    if unit_2_2 == "d":
                                        days_2 = int(date_2_2)
                                        has_second_days = True
                                    elif unit_2 == "m":
                                        months_2 = int(date_2_2)
                                        has_second_months = True
                                    else:
                                        years_2 = int(date_2_2)

                                if date_3_2:
                                    if unit_3_2 == "d":
                                        days_2 = int(date_3_2)
                                        has_second_days = True
                                    elif unit_3 == "m":
                                        months_2 = int(date_3_2)
                                        has_second_months = True
                                    else:
                                        years_2 = int(date_3_2)

                            if not compare_type or not compare_type.strip():
                                if second_match:
                                    qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years_2, months=months_2, days=days_2)
                                    if not has_second_months:
                                        qualifier_obj["time_unit_end"].months = 12
                                    if not has_second_days:
                                        qualifier_obj["time_unit_end"].days = -1
                                else:
                                    qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                    if not has_second_months:
                                        qualifier_obj["time_unit_end"].months = 12
                                    if not has_second_days:
                                        qualifier_obj["time_unit_end"].days = -1
                            elif compare_type.startswith("after"):
                                qualifier_obj["time_unit_end"] = datetime.date.max
                                qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                            elif compare_type.startswith("exact"):
                                qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                qualifier_obj["time_unit_start"] = qualifier_obj["time_unit_start"]
                            elif compare_type.startswith("through"):
                                qualifier_obj["time_unit_start"] = datetime.date.min
                                qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                if not has_second_months:
                                    qualifier_obj["time_unit_end"].months = 12
                                if not has_second_days:
                                    qualifier_obj["time_unit_end"].days = -1
                            else:
                                qualifier_obj["time_unit_start"] = datetime.date.min
                                if "season-age" in m.group(0):
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years - 1, months=months, days=days)
                                else:
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days - 1)

                            compare_str = compare_type.title() + " " if compare_type else ""
                
                            if years:
                                compare_str += str(years) + "Y-"
                            if months:
                                compare_str += str(months) + "M-"
                            if days:
                                compare_str += str(days) + "D-"
                            qualifier_obj["compare_str"] = compare_str[:-1]

                            if not compare_type and second_match:
                                qualifier_obj["compare_str"] += " to "
                                if years_2:
                                    qualifier_obj["compare_str"] += str(years_2) + "Y-"
                                if months_2:
                                    qualifier_obj["compare_str"] += str(months_2) + "M-"
                                if days_2:
                                    qualifier_obj["compare_str"] += str(days_2) + "D-"
                                qualifier_obj["compare_str"] = qualifier_obj["compare_str"][:-1]
                                
                            qual_type = "Season Age" if "season-age" in m.group(0) else "Age"

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((\S+)-(week|score-game|point-game)s?)\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False
                            
                            qualifier_str = m.group(4)
                            if qualifier_str == "week":
                                qual_type = "Week"
                            elif qualifier_str == "score-game":
                                qual_type = "Current Score Margin"
                                extra_stats.add("current-stats")

                            value = ordinal_to_number(m.group(3))

                            if isinstance(value, int):
                                if qual_type == "Current Score Margin":
                                    if qualifier_str == "score-game":
                                        qualifier_obj["values"] = {
                                            "start_val" : -value * 7,
                                            "end_val" : value * 7
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : -value,
                                            "end_val" : value
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : value,
                                        "end_val" : value
                                    }

                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((week|leading-by|trailing-by)-(\S+))\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False
                            
                            qualifier_str = m.group(3)
                            if qualifier_str == "week":
                                qual_type = "Week"
                            elif qualifier_str == "leading-by":
                                qual_type = "Current Score Margin"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "trailing-by":
                                qual_type = "Current Score Margin"
                                extra_stats.add("current-stats")

                            value = ordinal_to_number(m.group(4))

                            if isinstance(value, int):
                                if qual_type == "Current Score Margin":
                                    if qualifier_str == "leading-by":
                                        qualifier_obj["values"] = {
                                            "start_val" : value,
                                            "end_val" : value
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : -value,
                                            "end_val" : -value
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : value,
                                        "end_val" : value
                                    }

                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?(current-season-age|first-games?|current-games?|first-seasons?|current-seasons?|last-games?|last-seasons?|first-starts?|last-starts?|current-age|rookie|facing-former-franchise|facing-former-team|rook|interleague|intraleague|interconference|intraconference|interdivision|intradivision|first-half|second-half|leading(:?-in-game)?|trailing(:?-in-game)?|tied(:?(?:-in)?-game)?|force-dates|even-calendar-year|odd-calendar-year|even-year|odd-year|current-winning-opponents?|current-losing-opponents?|current-tied-opponents?|current-winning-or-tied-opponents?|current-losing-or-tied-opponents?|winning-opponents?|losing-opponents?|tied-opponents?|winning-or-tied-opponents?|losing-or-tied-opponents?|playoff-opponents?|champ-winner-opponent|conf-winner-opponent|division-winner-opponents?|current-winning-teams?|current-losing-teams?|current-tied-teams?|current-winning-or-tied-teams?|current-losing-or-tied-teams?|winning-teams?|losing-teams?|tied-teams?|winning-or-tied-teams?|losing-or-tied-teams?|playoff-teams?|champ-winner-team|conf-winner-team|division-winner-teams?|national-game|t:[\w-]+|o:[\w-]+|m:[\w-]+|d:[\w-]+|dt:[\w-]+|wk:\w+(?:-\w+)?|week:\w+(?:-\w+)?|team-franchise:[\w-]+|opponent-franchise:[\w-]+|franchise:[\w-]+|tf:[\w-]+|of:[\w-]+|f:[\w-]+|start-position:[\w-]+|franchise-stadium:[\w-]+|franchise-arena:[\w-]+|team:[\w-]+|opponent:[\w-]+|team-central-european-time-zone|team-eastern-european-time-zone|team-japan-time-zone|team-hawaii-time-zone|team-greenwich-time-zone|team-australian-time-zone|team-atlantic-time-zone|team-eastern-time-zone|team-central-time-zone|team-mountain-time-zone|team-pacific-time-zone|opponent-central-european-time-zone|opponent-eastern-european-time-zone|opponent-japan-time-zone|opponent-hawaii-time-zone|opponent-greenwich-time-zone|opponent-australian-time-zone|opponent-atlantic-time-zone|opponent-eastern-time-zone|opponent-central-time-zone|opponent-mountain-time-zone|opponent-pacific-time-zone|central-european-time-zone|eastern-european-time-zone|japan-time-zone|hawaii-time-zone|greenwich-time-zone|australian-time-zone|atlantic-time-zone|eastern-time-zone|central-time-zone|mountain-time-zone|pacific-time-zone|time-zone:[\S-]+|exact-time-zone:[\S-]+|state:[\w-]+|exact-state:[\w-]+|province:[\w-]+|exact-province:[\w-]+|team-time-zone:[\S-]+|team-exact-time-zone:[\S-]+|team-state:[\w-]+|team-exact-state:[\w-]+|team-province:[\w-]+|team-exact-province:[\w-]+|opponent-time-zone:[\S-]+|opponent-exact-time-zone:[\S-]+|opponent-state:[\w-]+|opponent-exact-state:[\w-]+|opponent-province:[\w-]+|opponent-exact-province:[\w-]+|opponent-country:[\w-]+|opponent-exact-country:[\w-]+|team-country:[\w-]+|team-exact-country:[\w-]+|country:[\w-]+|exact-country:[\w-]+|month:[\w-]+|short|middle|long|deep|right|left|middle|center|overtime-result|overtime|redzone|day:[\w-]+|date:[\w-]+|gm:[\w-]+|game:[\w-]+|season-gm:[\w-]+|season-game:[\w-]+|season:[\w-]+|seasons:[\w-]+|local-start-time:[\S-]+|team-start-time:[\S-]+|opponent-start-time:[\S-]+|seasons-reversed:[\w-]+|quarter:[\w-]+|down:[\w-]+|down-distance:[\w-]+|field-position:[\w-]+|quarter-time:[\S-]+|quarter-time-remaining:[\S-]+|current-team-score:[\w-]+|current-opponent-score:[\w-]+|current-score-margin:[\S-]+|current-score-difference:[\S-]+|season-reversed:[\w-]+|crgm:[\w-]+|career-games?-reversed:[\w-]+|team-games?-reversed:[\w-]+|season-games?-reversed:[\w-]+|games?-reversed:[\w-]+|career-games?:[\w-]+|tmgm:[\w-]+|team-games?:[\w-]+|number:[\w-]+|dr:[\w-]+|starts-days-rest:[\w-]+|days-rest:[\w-]+|prv-dr:[\w-]+|previous-days-rest:[\w-]+|upc-dr:[\w-]+|upcoming-starts-days-rest:[\w-]+|upcoming-days-rest:[\w-]+|gr:[\w-]+|games-rest:[\w-]+|starts-rest:[\w-]+|prv-gr:[\w-]+|previous-games-rest:[\w-]+|upc-gr:[\w-]+|upcoming-games-rest:[\w-]+|days-in-a-row:[\w-]+|games-in-a-row:[\w-]+|starts-in-a-row:[\w-]+|prv-t:[\w-]+|prv-o:[\w-]+|upc-t:[\w-]+|upc-o:[\w-]+|upcoming-same-opponent|previous-same-opponent|previous-franchise:[\w-]+|previous-team-franchise:[\w-]+|previous-opponent-franchise:[\w-]+|upcoming-franchise:[\w-]+|upcoming-team-franchise:[\w-]+|upcoming-opponent-franchise:[\w-]+|previous-team:[\w-]+|previous-opponent:[\w-]+|upcoming-team:[\w-]+|upcoming-opponent:[\w-]+|prv-season-st:[\S-]+|previous-season-stat:[\S-]+|upc-season-st:[\S-]+|upcoming-season-stat:[\S-]+|season-st:[\S-]+|season-stat:[\S-]+|st:[\S-]+|stat:[\S-]+|prv-st:[\S-]+|previous-stat:[\S-]+|upc-st:[\S-]+|upcoming-stat:[\S-]+|min-st:[\S-]+|min-stat:[\S-]+|max-st:[\S-]+|max-stat:[\S-]+|totalgames-st:[\S-]+|totalgames-stat:[\S-]+|max-str:[\S-]+|max-streak:[\S-]+|ctn-str:[\S-]+|count-streak:[\S-]+|q:[\S-]+|quickest:[\S-]+|s:[\S-]+|slowest:[\S-]+|champ(?:ionship)?(?:s)?|ch|super(?: |-)?bowl(?:s)?(:?[\w-]+)?|sb(:?[\w-]+)?|league(?: |-)champ(?:ionship)?(?:s)?|lc|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)?conf(?:erence)?((?: |-)champ(?:ionship)?(?:s)?)?|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)?(?:conf(?:erence)?(?: |-))?(champ(?:ionship)?(?:s)?)|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)?cc|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)c|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)?division(?:al)(?:(?: |-)round?(?:s)?)?|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)?dr|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)?wild(?: |-)?card(?:(?: |-)?round(?:s)?)?|(?:(?:(?:american|afc|national|nfc)(?:(?: |-)league)?)(?: |-)?)?wc|with-new-team|with-new-franchise|summer|spring|winter|fall|autumn|away|home|road|neutral|previous-away|previous-home|previous-road|previous-neutral|upcoming-away|upcoming-home|upcoming-road|upcoming-neutral|new-moon|waning-crescent|third-quarter|waning-gibbous|full-moon|waxing-gibbous|first-quarter|waxing-crescent|outdoors|dome|retroof|retroof-closed|retroof-open|grass|artificial|team-after-bye|team-before-bye|team-after-playoffs-bye|team-before-playoffs-bye|team-game-after-bye|team-game-before-bye|team-had-bye|opponent-after-bye|opponent-before-bye|opponent-after-playoffs-bye|opponent-before-playoffs-bye|opponent-game-after-bye|opponent-game-before-bye|opponent-had-bye|after-bye|before-bye|after-playoffs-bye|before-playoffs-bye|game-after-bye|game-before-bye|had-bye|underdogs?|favorites?|probable|questionable|doubtful|injured|start-if-qb|-?starts?|-?started|-?starting|-?ignore-starts?|-?ignore-started?|-?ignore-starting|win(?:s)?|loss(?:es)?|tie(?:s)?|w|l|t|prv-w|prv-l|prv-t|upc-w|upc-l|upc-t|previous-win(?:s)?|previous-loss(?:es)?|previous-tie(?:s)?|upcoming-win(?:s)?|upcoming-loss(?:es)?|upcoming-tie(?:s)?|team-score:[\w-]+|opponent-score:[\w-]+|score-margin:[\S-]+|score-difference:[\S-]+|spread:[\S-]+|over-under:[\w-]+|spread-margin:[\S-]+|over-under-margin:[\S-]+|previous-team-score:[\w-]+|previous-opponent-score:[\w-]+|previous-score-margin:[\S-]+|previous-score-difference:[\S-]+|upcoming-team-score:[\w-]+|upcoming-opponent-score:[\w-]+|upcoming-score-margin:[\S-]+|upcoming-score-difference:[\S-]+|humidity:[\w-]+|wind:[\w-]+|wind-chill:[\w-]+|temperature:[\w-]+|current-team-wins:[\w-]+|current-team-losses:[\w-]+|current-team-ties:[\w-]+|current-team-games-over-500:[\S-]+|current-opponent-wins:[\w-]+|current-opponent-losses:[\w-]+|current-opponent-games-over-500:[\S-]+|current-opponent-ties:[\w-]+|attendance:[\w-]+|team-wins:[\w-]+|team-losses:[\w-]+|team-ties:[\w-]+|team-games-over-500:[\S-]+|opponent-wins:[\w-]+|opponent-losses:[\w-]+|opponent-ties:[\w-]+|opponent-games-over-500:[\S-]+|opponent-points-rank:[\S-]+|opponent-points-allowed-rank:[\S-]+|opponent-yards-rank:[\S-]+|opponent-yards-allowed-rank:[\S-]+|opponent-yds-rank:[\S-]+|opponent-yds-allowed-rank:[\S-]+|opponent-pass-tds?-rank:[\S-]+|opponent-pass-tds?-allowed-rank:[\S-]+|opponent-pass-yards-rank:[\S-]+|opponent-pass-yards-allowed-rank:[\S-]+|opponent-pass-yds-rank:[\S-]+|opponent-pass-yds-allowed-rank:[\S-]+|opponent-rush-tds?-rank:[\S-]+|opponent-rush-tds?-allowed-rank:[\S-]+|opponent-rush-yards-rank:[\S-]+|opponent-rush-yards-allowed-rank:[\S-]+|opponent-rush-yds-rank:[\S-]+|opponent-rush-yds-allowed-rank:[\S-]+|opponent-any/a-rank:[\S-]+|opponent-any/a-allowed-rank:[\S-]+|opponent-pass(?:er)?-rat(?:e|ing)-rank:[\S-]+|opponent-pass(?:er)?-rat(?:e|ing)-allowed-rank:[\S-]+|opponent-fantasy-qb-rank:[\S-]+|opponent-fantasy-(?:rb|hb)-rank:[\S-]+|opponent-fantasy-wr-rank:[\S-]+|opponent-fantasy-te-rank:[\S-]+|current-team-win(?:ning)?-percent:[\S-]+|team-win(?:ning)?-percent:[\S-]+|current-opponent-win(?:ning)?-percent:[\S-]+|opponent-win(?:ning)?-percent:[\S-]+|team-points-rank:[\S-]+|team-points-allowed-rank:[\S-]+|team-yards-rank:[\S-]+|team-yards-allowed-rank:[\S-]+|team-yds-rank:[\S-]+|team-yds-allowed-rank:[\S-]+|team-pass-tds?-rank:[\S-]+|team-pass-tds?-allowed-rank:[\S-]+|team-pass-yards-rank:[\S-]+|team-pass-yards-allowed-rank:[\S-]+|team-pass-yds-rank:[\S-]+|team-pass-yds-allowed-rank:[\S-]+|team-rush-tds?-rank:[\S-]+|team-rush-tds?-allowed-rank:[\S-]+|team-rush-yards-rank:[\S-]+|team-rush-yards-allowed-rank:[\S-]+|team-rush-yds-rank:[\S-]+|team-rush-yds-allowed-rank:[\S-]+|team-any/a-rank:[\S-]+|team-any/a-allowed-rank:[\S-]+|team-pass(?:er)?-rat(?:e|ing)-rank:[\S-]+|team-pass(?:er)?-rat(?:e|ing)-allowed-rank:[\S-]+|team-fantasy-qb-rank:[\S-]+|team-fantasy-(?:rb|hb)-rank:[\S-]+|team-fantasy-wr-rank:[\S-]+|team-fantasy-te-rank:[\S-]+|team-win(?:ning)?-percent:[\S-]+|offensive-snap-percent:[\S-]+|defensive-snap-percent:[\S-]+|special-teams-snap-percent:[\S-]+|off-snap-percent:[\S-]+|def-snap-percent:[\S-]+|st-snap-percent:[\S-]+|calendar-years?:[\w-]+|years?:[\w-]+|early-?afternoon|late-?afternoon|morning|early|afternoon|day|night(?:time)?|evening|late|team-league:[\w-]+|opponent-league:[\w-]+|team-conference:[\S-]+|opponent-conference:[\S-]+|team-division:[\S-]+|opponent-division:[\S-]+|birthda(?:y|te)|defense|" + all_months_re + r"|" + all_days_re + r"|" + r"|".join([pos.lower() + "-start" for pos in headers]) + r"|" + r"|".join([pos.lower() for pos in headers]) + r")(?!\S+)", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            og_qual_str = qualifier_str
                            league_qual_obj = None
                            if qualifier_str.startswith("american") or qualifier_str.startswith("afc") or qualifier_str.startswith("national") or qualifier_str.startswith("nfc"):
                                league_team_league = "afc" if qualifier_str.startswith("american") or qualifier_str.startswith("afc") else "nfc"
                                league_qual_obj = {}
                                league_qual_obj["negate"] = qualifier_obj["negate"]
                                league_qual_obj["values"] = [league_team_league]

                                if qualifier_str.startswith("american") or qualifier_str.startswith("national"):
                                    qualifier_str = qualifier_str[8:].strip()
                                else:
                                    qualifier_str = qualifier_str[3:].strip()
                                if qualifier_str.startswith("-"):
                                    qualifier_str = qualifier_str[1:]
                            
                            qual_type = None

                            if not qualifier_str.endswith("-opponent") and not qualifier_str.endswith("-team"):
                                if qualifier_str.startswith("champ"):
                                    if league_qual_obj:
                                        qualifier_str = "cc"
                                    else:
                                        qualifier_str = "ch"
                                elif qualifier_str.startswith("super"):
                                    qualifier_str = "sb"
                                elif qualifier_str.startswith("league"):
                                    if league_qual_obj:
                                        qualifier_str = "cc"
                                    else:
                                        qualifier_str = "lc"
                                elif qualifier_str.startswith("conf"):
                                    qualifier_str = "cc"
                                elif qualifier_str.startswith("division"):
                                    qualifier_str = "dr"
                                elif qualifier_str.startswith("wild"):
                                    qualifier_str = "wc"
                            
                            if not (qualifier_str == "ch" or qualifier_str == "sb" or qualifier_str == "lc" or qualifier_str == "cc" or qualifier_str == "dr" or qualifier_str == "wc"):
                                qualifier_str = og_qual_str

                            if qualifier_str == "ch" or qualifier_str == "sb" or qualifier_str == "lc" or qualifier_str == "cc" or qualifier_str == "dr" or qualifier_str == "wc":
                                qual_type = "Round"
                                if not playoffs:
                                    playoffs = "Only"
                                qualifier_obj["values"] = [qualifier_str]

                                if league_qual_obj:
                                    if not "Team Conference" in qualifiers:
                                        qualifiers["Team Conference"] = []
                                    qualifiers["Team Conference"].append(league_qual_obj)
                            elif qualifier_str.startswith("rook"):
                                qual_type = "Rookie"
                            elif qualifier_str == "facing-former-team":
                                qual_type = "Facing Former Team"
                            elif qualifier_str == "facing-former-franchise":
                                qual_type = "Facing Former Franchise"
                            elif qualifier_str.startswith("current-season-age"):
                                qual_type = "Current Season Age"
                            elif qualifier_str.startswith("first-game") or qualifier_str.startswith("current-game"):
                                qual_type = "First Games"
                            elif qualifier_str.startswith("first-season") or qualifier_str.startswith("current-season"):
                                qual_type = "First Seasons"
                            elif qualifier_str.startswith("last-game"):
                                qual_type = "Last Games"
                            elif qualifier_str.startswith("last-season"):
                                qual_type = "Last Seasons"
                            elif qualifier_str.startswith("first-start"):
                                qual_type = "First Games"
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })
                            elif qualifier_str.startswith("last-start"):
                                qual_type = "Last Games"
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })
                            elif qualifier_str.startswith("current-age"):
                                qual_type = "Current Age"
                            elif qualifier_str == "interleague":
                                qual_type = "Interleague"
                            elif qualifier_str == "intraleague":
                                qual_type = "Intraleague"
                            elif qualifier_str == "interconference":
                                qual_type = "Interconference"
                            elif qualifier_str == "intraconference":
                                qual_type = "Intraconference"
                            elif qualifier_str == "interdivision":
                                qual_type = "Interdivision"
                            elif qualifier_str == "intradivision":
                                qual_type = "Intradivision"
                            elif qualifier_str.startswith("first-half"):
                                qual_type = "First Half"
                            elif qualifier_str.startswith("second-half"):
                                qual_type = "Second Half"
                            elif qualifier_str == "national-game":
                                qual_type = "National Game"
                            elif qualifier_str.startswith("current-winning-opponent"):
                                qual_type = "Current Winning Opponent"
                            elif qualifier_str.startswith("current-losing-opponent"):
                                qual_type = "Current Losing Opponent"
                            elif qualifier_str.startswith("current-tied-opponent"):
                                qual_type = "Current Tied Opponent"
                            elif qualifier_str.startswith("current-winning-or-tied-opponent"):
                                qual_type = "Current Winning Or Tied Opponent"
                            elif qualifier_str.startswith("current-losing-or-tied-opponent"):
                                qual_type = "Current Losing Or Tied Opponent"
                            elif qualifier_str.startswith("winning-opponent"):
                                qual_type = "Winning Opponent"
                            elif qualifier_str.startswith("losing-opponent"):
                                qual_type = "Losing Opponent"
                            elif qualifier_str.startswith("tied-opponent"):
                                qual_type = "Tied Opponent"
                            elif qualifier_str.startswith("winning-or-tied-opponent"):
                                qual_type = "Winning Or Tied Opponent"
                            elif qualifier_str.startswith("losing-or-tied-opponent"):
                                qual_type = "Losing Or Tied Opponent"
                            elif qualifier_str.startswith("playoff-opponent"):
                                qual_type = "Playoff Opponent"
                            elif qualifier_str.startswith("champ-winner-opponent"):
                                qual_type = "Champ Winner Opponent"
                            elif qualifier_str.startswith("conf-winner-opponent"):
                                qual_type = "Conference Winner Opponent"
                            elif qualifier_str.startswith("division-winner-opponent"):
                                qual_type = "Division Winner Opponent"
                            elif qualifier_str.startswith("current-winning-team"):
                                qual_type = "Current Winning Team"
                            elif qualifier_str.startswith("current-losing-team"):
                                qual_type = "Current Losing Team"
                            elif qualifier_str.startswith("current-tied-team"):
                                qual_type = "Current Tied Team"
                            elif qualifier_str.startswith("current-winning-or-tied-team"):
                                qual_type = "Current Winning Or Tied Team"
                            elif qualifier_str.startswith("current-losing-or-tied-team"):
                                qual_type = "Current Losing Or Tied Team"
                            elif qualifier_str.startswith("winning-team"):
                                qual_type = "Winning Team"
                            elif qualifier_str.startswith("losing-team"):
                                qual_type = "Losing Team"
                            elif qualifier_str.startswith("tied-team"):
                                qual_type = "Tied Team"
                            elif qualifier_str.startswith("winning-or-tied-team"):
                                qual_type = "Winning Or Tied Team"
                            elif qualifier_str.startswith("losing-or-tied-team"):
                                qual_type = "Losing Or Tied Team"
                            elif qualifier_str.startswith("overtime-result"):
                                qual_type = "Overtime Result"
                            elif qualifier_str == "eastern-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/New_York", "America/Kentucky/Louisville", "America/Toronto", "America/Detroit", "America/Indiana/Indianapolis"]
                            elif qualifier_str == "central-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Chicago", "America/Winnipeg", "America/Regina", "America/Mexico_City", "America/Monterrey"]
                            elif qualifier_str == "mountain-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Denver", "America/Edmonton", "America/Phoenix", "America/Boise"]
                            elif qualifier_str == "pacific-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Los_Angeles", "America/Vancouver"]
                            elif qualifier_str == "atlantic-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Halifax", "America/Puerto_Rico"]
                            elif qualifier_str == "hawaii-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Pacific/Honolulu"]
                            elif qualifier_str == "japan-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Asia/Tokyo"]
                            elif qualifier_str == "greenwich-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/London"]
                            elif qualifier_str == "australian-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Australia/Sydney"]
                            elif qualifier_str == "central-european-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Stockholm", "Europe/Berlin", "Europe/Prague"]
                            elif qualifier_str == "eastern-european-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Helsinki"]
                            elif qualifier_str == "team-eastern-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/New_York", "America/Kentucky/Louisville", "America/Toronto", "America/Detroit", "America/Indiana/Indianapolis"]
                            elif qualifier_str == "team-central-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Chicago", "America/Winnipeg", "America/Regina", "America/Mexico_City", "America/Monterrey"]
                            elif qualifier_str == "team-mountain-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Denver", "America/Edmonton", "America/Phoenix", "America/Boise"]
                            elif qualifier_str == "team-pacific-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Los_Angeles", "America/Vancouver"]
                            elif qualifier_str == "team-atlantic-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Halifax", "America/Puerto_Rico"]
                            elif qualifier_str == "team-hawaii-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Pacific/Honolulu"]
                            elif qualifier_str == "team-japan-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Asia/Tokyo"]
                            elif qualifier_str == "team-greenwich-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/London"]
                            elif qualifier_str == "team-australian-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Australia/Sydney"]
                            elif qualifier_str == "team-central-european-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Stockholm", "Europe/Berlin", "Europe/Prague"]
                            elif qualifier_str == "team-eastern-european-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Helsinki"]
                            elif qualifier_str == "opponent-eastern-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/New_York", "America/Kentucky/Louisville", "America/Toronto", "America/Detroit", "America/Indiana/Indianapolis"]
                            elif qualifier_str == "opponent-central-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Chicago", "America/Winnipeg", "America/Regina", "America/Mexico_City", "America/Monterrey"]
                            elif qualifier_str == "opponent-mountain-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Denver", "America/Edmonton", "America/Phoenix", "America/Boise"]
                            elif qualifier_str == "opponent-pacific-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Los_Angeles", "America/Vancouver"]
                            elif qualifier_str == "opponent-atlantic-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Halifax", "America/Puerto_Rico"]
                            elif qualifier_str == "opponent-hawaii-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Pacific/Honolulu"]
                            elif qualifier_str == "opponent-japan-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Asia/Tokyo"]
                            elif qualifier_str == "opponent-greenwich-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/London"]
                            elif qualifier_str == "opponent-australian-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Australia/Sydney"]
                            elif qualifier_str == "opponent-central-european-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Stockholm", "Europe/Berlin", "Europe/Prague"]
                            elif qualifier_str == "opponent-eastern-european-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Helsinki"]
                            elif qualifier_str in ["new-moon", "waning-crescent", "third-quarter", "waning-gibbous", "full-moon", "waxing-gibbous", "first-quarter", "waxing-crescent"]:
                                qual_type = "Moon Phase"
                                qualifier_obj["values"] = [qualifier_str.replace("-", " ")]
                            elif qualifier_str == "overtime":
                                qual_type = "Overtime"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "redzone":
                                qual_type = "RedZone"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "even-year":
                                qual_type = "Even Year"
                            elif qualifier_str == "odd-year":
                                qual_type = "Odd Year"
                            elif qualifier_str == "even-calendar-year":
                                qual_type = "Even Calendar Year"
                            elif qualifier_str == "odd-calendar-year":
                                qual_type = "Odd Calendar Year"
                            elif qualifier_str == "short" or qualifier_str == "middle" or qualifier_str == "deep":
                                qual_type = "Pass Distance"
                                extra_stats.add("thrown-to")
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "long":
                                qual_type = "Pass Distance"
                                extra_stats.add("thrown-to")
                                qualifier_obj["values"] = ["deep"]
                            elif qualifier_str == "right" or qualifier_str == "left" or qualifier_str == "middle":
                                qual_type = "Pass Direction"
                                extra_stats.add("thrown-to")
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "center":
                                qual_type = "Pass Direction"
                                extra_stats.add("thrown-to")
                                qualifier_obj["values"] = ["middle"]
                            elif qualifier_str.startswith("playoff-team"):
                                qual_type = "Playoff Team"
                            elif qualifier_str.startswith("champ-winner-team"):
                                qual_type = "Champ Winner Team"
                            elif qualifier_str.startswith("conf-winner-team"):
                                qual_type = "Conference Winner Team"
                            elif qualifier_str.startswith("division-winner-team"):
                                qual_type = "Division Winner Team"
                            elif qualifier_str == "leading" or qualifier_str == "leading-in-game":
                                qual_type = "Current Score Margin"
                                qualifier_obj["values"] = {
                                    "start_val" : 1,
                                    "end_val" : float("inf")
                                }
                                extra_stats.add("current-stats")
                            elif qualifier_str == "trailing" or qualifier_str == "trailing-in-game":
                                qual_type = "Current Score Margin"
                                qualifier_obj["values"] = {
                                    "start_val" : -float("inf"),
                                    "end_val" : -1
                                }
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tied" or qualifier_str == "tied-in-game" or qualifier_str == "tied-game":
                                qual_type = "Current Score Margin"
                                qualifier_obj["values"] = {
                                    "start_val" : 0,
                                    "end_val" : 0
                                }
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("force-dates"):
                                qual_type = "Force Dates"
                            elif qualifier_str == "outdoors" or qualifier_str == "dome" or "retroof" in qualifier_str:
                                qual_type = "Roof"
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "grass" or qualifier_str == "artificial":
                                qual_type = "Surface"
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "with-new-team":
                                qual_type = "With New Team"
                            elif qualifier_str == "with-new-franchise":
                                qual_type = "With New Franchise"
                            elif qualifier_str.startswith("previous-same-opponent"):
                                qual_str = "previous-same-opponent"
                                qual_type = "Previous Same Opponent"
                            elif qualifier_str.startswith("upcoming-same-opponent"):
                                qual_str = "upcoming-same-opponent"
                                qual_type = "Upcoming Same Opponent"
                            elif qualifier_str == "winter" or qualifier_str == "spring" or qualifier_str == "summer" or qualifier_str == "fall" or qualifier_str == "autumn":
                                qual_type = "Temperate Season"
                                if qualifier_str == "autumn":
                                    qualifier_obj["values"] = ["Fall"]
                                else:
                                    qualifier_obj["values"] = [qualifier_str.title()]
                            elif qualifier_str == "probable" or qualifier_str == "questionable" or qualifier_str == "doubtful" or qualifier_str == "injured" or qualifier_str == "away" or qualifier_str == "road" or qualifier_str == "home" or qualifier_str == "after-bye" or qualifier_str == "before-bye"  or qualifier_str == "after-playoffs-bye" or qualifier_str == "before-playoffs-bye" or qualifier_str == "game-after-bye" or qualifier_str == "game-before-bye" or qualifier_str == "had-bye" or qualifier_str == "team-after-bye" or qualifier_str == "team-before-bye"  or qualifier_str == "team-after-playoffs-bye" or qualifier_str == "team-before-playoffs-bye" or qualifier_str == "team-game-after-bye" or qualifier_str == "team-game-before-bye" or qualifier_str == "team-had-bye" or qualifier_str == "opponent-after-bye" or qualifier_str == "opponent-before-bye"  or qualifier_str == "opponent-after-playoffs-bye" or qualifier_str == "opponent-before-playoffs-bye" or qualifier_str == "opponent-game-after-bye" or qualifier_str == "opponent-game-before-bye" or qualifier_str == "opponent-had-bye" or "underdog" in qualifier_str or "favorite" in qualifier_str or qualifier_str == "neutral" or qualifier_str == "a" or qualifier_str == "r" or qualifier_str == "h" or qualifier_str == "n" or qualifier_str == "previous-away" or qualifier_str == "previous-road" or qualifier_str == "previous-home" or qualifier_str == "previous-neutral" or qualifier_str == "upcoming-away" or qualifier_str == "upcoming-road" or qualifier_str == "upcoming-home" or qualifier_str == "upcoming-neutral" or qualifier_str == "prv-a" or qualifier_str == "prv-r" or qualifier_str == "prv-h" or qualifier_str == "prv-n" or qualifier_str == "upc-a" or qualifier_str == "upc-r" or qualifier_str == "upc-h" or qualifier_str == "upc-n" or qualifier_str.startswith("morning") or qualifier_str.startswith("early") or qualifier_str.startswith("afternoon") or qualifier_str == "day" or qualifier_str.startswith("night") or qualifier_str.startswith("late") or qualifier_str == "evening":
                                if qualifier_str == "away":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "road":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "home":
                                    qual_val = "home"
                                    qual_type = "Location"
                                elif qualifier_str == "neutral":
                                    qual_val = "neutral"
                                    qual_type = "Location"
                                elif qualifier_str == "a":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "r":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "h":
                                    qual_val = "home"
                                    qual_type = "Location"
                                elif qualifier_str == "n":
                                    qual_val = "n"
                                    qual_type = "Location"
                                elif qualifier_str == "previous-away":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "previous-road":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "previous-home":
                                    qual_val = "home"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "previous-neutral":
                                    qual_val = "neutral"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "upcoming-away":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upcoming-road":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upcoming-home":
                                    qual_val = "home"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upcoming-neutral":
                                    qual_val = "neutral"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "prv-a":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "prv-r":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "prv-h":
                                    qual_val = "home"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "prv-n":
                                    qual_val = "neutral"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "upc-a":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upc-r":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upc-h":
                                    qual_val = "home"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upc-n":
                                    qual_val = "neutral"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str.startswith("morning"):
                                    qual_type = "Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(0, 0, 0),
                                        "end_val" : datetime.time(11, 59, 0),
                                        "time_zone" : "US/Eastern"
                                    }
                                elif qualifier_str.startswith("early"):
                                    qual_type = "Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(12, 0, 0),
                                        "end_val" : datetime.time(15, 59, 0),
                                        "time_zone" : "US/Eastern"
                                    }
                                elif qualifier_str.startswith("late"):
                                    qual_type = "Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(16, 0, 0),
                                        "end_val" : datetime.time(18, 59, 0),
                                        "time_zone" : "US/Eastern"
                                    }
                                elif qualifier_str.startswith("afternoon"):
                                    qual_type = "Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(12, 0, 0),
                                        "end_val" : datetime.time(18, 59, 0),
                                        "time_zone" : "US/Eastern"
                                    }
                                elif qualifier_str.startswith("night"):
                                    qual_type = "Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(19, 0, 0),
                                        "end_val" : datetime.time(23, 59, 0),
                                        "time_zone" : "US/Eastern"
                                    }
                                elif qualifier_str == "day":
                                    qual_type = "Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(0, 0, 0),
                                        "end_val" : datetime.time(18, 59, 0),
                                        "time_zone" : "US/Eastern"
                                    }
                                elif qualifier_str == "evening":
                                    qual_type = "Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(19, 0, 0),
                                        "end_val" : datetime.time(23, 59, 0),
                                        "time_zone" : "US/Eastern"
                                    }
                                elif qualifier_str == "after-bye":
                                    qual_val = "after-bye"
                                    qual_type = "Team After Bye"
                                elif qualifier_str == "before-bye":
                                    qual_val = "before-bye"
                                    qual_type = "Team Before Bye"
                                elif qualifier_str == "after-playoffs-bye":
                                    qual_val = "after-playoffs-bye"
                                    qual_type = "Team After Playoffs Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "before-playoffs-bye":
                                    qual_val = "before-playoffs-bye"
                                    qual_type = "Team Before Playoffs Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "game-after-bye":
                                    qual_val = "game-after-bye"
                                    qual_type = "Team Game After Bye"
                                elif qualifier_str == "game-before-bye":
                                    qual_val = "game-before-bye"
                                    qual_type = "Team Game Before Bye"
                                elif qualifier_str == "had-bye":
                                    qual_val = "had-bye"
                                    qual_type = "Team Had Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "team-after-bye":
                                    qual_val = "team-after-bye"
                                    qual_type = "Team After Bye"
                                elif qualifier_str == "team-before-bye":
                                    qual_val = "team-before-bye"
                                    qual_type = "Team Before Bye"
                                elif qualifier_str == "team-after-playoffs-bye":
                                    qual_val = "team-after-playoffs-bye"
                                    qual_type = "Team After Playoffs Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "team-before-playoffs-bye":
                                    qual_val = "team-before-playoffs-bye"
                                    qual_type = "Team Before Playoffs Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "team-game-after-bye":
                                    qual_val = "team-game-after-bye"
                                    qual_type = "Team Game After Bye"
                                elif qualifier_str == "team-game-before-bye":
                                    qual_val = "team-game-before-bye"
                                    qual_type = "Team Game Before Bye"
                                elif qualifier_str == "team-had-bye":
                                    qual_val = "team-had-bye"
                                    qual_type = "Team Had Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "opponent-after-bye":
                                    qual_val = "opponent-after-bye"
                                    qual_type = "Opponent After Bye"
                                elif qualifier_str == "opponent-before-bye":
                                    qual_val = "opponent-before-bye"
                                    qual_type = "Opponent Before Bye"
                                elif qualifier_str == "opponent-after-playoffs-bye":
                                    qual_val = "opponent-after-playoffs-bye"
                                    qual_type = "Opponent After Playoffs Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "opponent-before-playoffs-bye":
                                    qual_val = "opponent-before-playoffs-bye"
                                    qual_type = "Opponent Before Playoffs Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "opponent-game-after-bye":
                                    qual_val = "opponent-game-after-bye"
                                    qual_type = "Opponent Game After Bye"
                                elif qualifier_str == "opponent-game-before-bye":
                                    qual_val = "opponent-game-before-bye"
                                    qual_type = "Opponent Game Before Bye"
                                elif qualifier_str == "opponent-had-bye":
                                    qual_val = "opponent-had-bye"
                                    qual_type = "Opponent Had Bye"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str == "probable":
                                    qual_val = "probable"
                                    qual_type = "Probable"
                                elif qualifier_str == "doubtful":
                                    qual_val = "doubtful"
                                    qual_type = "Doubtful"
                                elif qualifier_str == "questionable":
                                    qual_val = "questionable"
                                    qual_type = "Questionable"
                                elif qualifier_str == "injured":
                                    qual_val = "injured"
                                    qual_type = "Injured"
                                elif "underdog" in qualifier_str:
                                    qual_val = "underdog"
                                    qual_type = "Underdog"
                                    if "record" not in extra_stats:
                                        extra_stats.add("record")
                                    if "ats-record" not in extra_stats:
                                        extra_stats.add("ats-record")
                                elif "favorite" in qualifier_str:
                                    qual_val = "favorite"
                                    qual_type = "Favorite"
                                    if "record" not in extra_stats:
                                        extra_stats.add("record")
                                    if "ats-record" not in extra_stats:
                                        extra_stats.add("ats-record")
                                
                                qualifier_obj["values"] = qual_val if isinstance(qual_val, list) or qual_type == "Start Time" else [qual_val]
                            elif (qualifier_str.startswith("win") and not "wind:" in qualifier_str) or qualifier_str.startswith("loss") or qualifier_str.startswith("tie") or qualifier_str == "w" or qualifier_str == "l" or qualifier_str == "t" or qualifier_str.startswith("previous-win") or qualifier_str.startswith("previous-loss") or qualifier_str.startswith("previous-tie") or qualifier_str == "prv-w" or qualifier_str == "prv-l" or qualifier_str == "prv-t" or qualifier_str.startswith("upcoming-win") or qualifier_str.startswith("upcoming-loss") or qualifier_str.startswith("upcoming-tie") or qualifier_str == "upc-w" or qualifier_str == "upc-l" or qualifier_str == "upc-t" or qualifier_str.startswith("previous-team-win") or qualifier_str.startswith("previous-team-loss") or qualifier_str.startswith("previous-team-tie") or qualifier_str == "prv-t-w" or qualifier_str == "prv-t-l" or qualifier_str == "prv-t-t" or qualifier_str.startswith("upcoming-team-win") or qualifier_str.startswith("upcoming-team-loss") or qualifier_str.startswith("upcoming-team-tie") or qualifier_str == "upc-t-w" or qualifier_str == "upc-t-l" or qualifier_str == "upc-t-t":
                                if qualifier_str.startswith("win"):
                                    qual_val = "W"
                                    qual_type = "Result"
                                elif qualifier_str.startswith("loss"):
                                    qual_val = "L"
                                    qual_type = "Result"
                                elif qualifier_str.startswith("tie"):
                                    qual_val = "T"
                                    qual_type = "Result"
                                elif qualifier_str == "w":
                                    qual_val = "W"
                                    qual_type = "Result"
                                elif qualifier_str == "l":
                                    qual_val = "L"
                                    qual_type = "Result"
                                elif qualifier_str == "t":
                                    qual_val = "T"
                                    qual_type = "Result"
                                elif qualifier_str.startswith("previous-win"):
                                    qual_val = "W"
                                    qual_type = "Previous Result"
                                elif qualifier_str.startswith("previous-loss"):
                                    qual_val = "L"
                                    qual_type = "Previous Result"
                                elif qualifier_str.startswith("previous-tie"):
                                    qual_val = "T"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-w":
                                    qual_val = "W"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-l":
                                    qual_val = "L"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-t":
                                    qual_val = "T"
                                    qual_type = "Previous Result"
                                elif qualifier_str.startswith("upcoming-win"):
                                    qual_val = "W"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str.startswith("upcoming-loss"):
                                    qual_val = "L"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str.startswith("upcoming-tie"):
                                    qual_val = "T"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-w":
                                    qual_val = "W"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-l":
                                    qual_val = "L"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-t":
                                    qual_val = "T"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str.startswith("previous-team-win"):
                                    qual_val = "W"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str.startswith("previous-team-loss"):
                                    qual_val = "L"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str.startswith("previous-team-tie"):
                                    qual_val = "T"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-w":
                                    qual_val = "W"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-l":
                                    qual_val = "L"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-t":
                                    qual_val = "T"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str.startswith("upcoming-team-win"):
                                    qual_val = "W"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str.startswith("upcoming-team-loss"):
                                    qual_val = "L"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str.startswith("upcoming-team-tie"):
                                    qual_val = "T"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-w":
                                    qual_val = "W"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-l":
                                    qual_val = "L"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-t":
                                    qual_val = "T"
                                    qual_type = "Upcoming Team Result"
                                
                                qualifier_obj["values"] = [qual_val]
                            elif qualifier_str.startswith("team-score:") or qualifier_str.startswith("opponent-score:") or qualifier_str.startswith("score-margin:") or qualifier_str.startswith("score-difference:") or  qualifier_str.startswith("previous-team-score:") or qualifier_str.startswith("previous-opponent-score:") or qualifier_str.startswith("previous-score-margin:") or qualifier_str.startswith("previous-score-difference:") or  qualifier_str.startswith("upcoming-team-score:") or qualifier_str.startswith("upcoming-opponent-score:") or qualifier_str.startswith("upcoming-score-margin:") or qualifier_str.startswith("upcoming-score-difference:") or qualifier_str.startswith("spread:") or qualifier_str.startswith("over-under:") or qualifier_str.startswith("spread-margin:") or qualifier_str.startswith("over-under-margin:") or qualifier_str.startswith("calendar-year") or qualifier_str.startswith("year") or qualifier_str.startswith("temperature:") or qualifier_str.startswith("wind:") or qualifier_str.startswith("wind-chill:") or qualifier_str.startswith("humidity:") or qualifier_str.startswith("quarter:") or qualifier_str.startswith("down:") or qualifier_str.startswith("down-distance:") or qualifier_str.startswith("field-position:") or qualifier_str.startswith("quarter-time:") or qualifier_str.startswith("quarter-time-remaining:") or qualifier_str.startswith("current-team-score:") or qualifier_str.startswith("current-opponent-score:") or qualifier_str.startswith("current-score-margin:") or qualifier_str.startswith("current-score-difference:") or qualifier_str.startswith("team-games-over-500:") or qualifier_str.startswith("opponent-games-over-500:") or qualifier_str.startswith("current-team-games-over-500:") or qualifier_str.startswith("current-opponent-games-over-500:"):
                                if qualifier_str.startswith("team-score:"):
                                    qual_str = "team-score:"
                                    qual_type = "Team Score"
                                elif qualifier_str.startswith("opponent-score:"):
                                    qual_str = "opponent-score:"
                                    qual_type = "Opponent Score"
                                elif qualifier_str.startswith("score-margin:"):
                                    qual_str = "score-margin:"
                                    qual_type = "Score Margin"
                                elif qualifier_str.startswith("score-difference:"):
                                    qual_str = "score-difference:"
                                    qual_type = "Score Difference"
                                elif qualifier_str.startswith("previous-team-score:"):
                                    qual_str = "previous-team-score:"
                                    qual_type = "Previous Team Score"
                                elif qualifier_str.startswith("previous-opponent-score:"):
                                    qual_str = "previous-opponent-score:"
                                    qual_type = "Previous Opponent Score"
                                elif qualifier_str.startswith("previous-score-margin:"):
                                    qual_str = "previous-score-margin:"
                                    qual_type = "Previous Score Margin"
                                elif qualifier_str.startswith("previous-score-difference:"):
                                    qual_str = "previous-score-difference:"
                                    qual_type = "Previous Score Difference"
                                elif qualifier_str.startswith("upcoming-team-score:"):
                                    qual_str = "upcoming-team-score:"
                                    qual_type = "Upcoming Team Score"
                                elif qualifier_str.startswith("upcoming-opponent-score:"):
                                    qual_str = "upcoming-opponent-score:"
                                    qual_type = "Upcoming Opponent Score"
                                elif qualifier_str.startswith("upcoming-score-margin:"):
                                    qual_str = "upcoming-score-margin:"
                                    qual_type = "Upcoming Score Margin"
                                elif qualifier_str.startswith("upcoming-score-difference:"):
                                    qual_str = "upcoming-score-difference:"
                                    qual_type = "Upcoming Score Difference"
                                elif qualifier_str.startswith("temperature:"):
                                    qual_str = "temperature:"
                                    qual_type = "Temperature"
                                elif qualifier_str.startswith("wind:"):
                                    qual_str = "wind:"
                                    qual_type = "Wind"
                                elif qualifier_str.startswith("wind-chill:"):
                                    qual_str = "wind-chill:"
                                    qual_type = "Wind Chill"
                                elif qualifier_str.startswith("humidity:"):
                                    qual_str = "humidity:"
                                    qual_type = "Humidity"
                                elif qualifier_str.startswith("years:"):
                                    qual_str = "years:"
                                    qual_type = "Year"
                                elif qualifier_str.startswith("year:"):
                                    qual_str = "year:"
                                    qual_type = "Year"
                                elif qualifier_str.startswith("calendar-years:"):
                                    qual_str = "calendar-years:"
                                    qual_type = "Calendar Year"
                                elif qualifier_str.startswith("calendar-year:"):
                                    qual_str = "calendar-year:"
                                    qual_type = "Calendar Year"
                                elif qualifier_str.startswith("quarter:"):
                                    qual_str = "quarter:"
                                    qual_type = "Quarter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("down:"):
                                    qual_str = "down:"
                                    qual_type = "Down"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("down-distance:"):
                                    qual_str = "down-distance:"
                                    qual_type = "Down Distance"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("field-position:"):
                                    qual_str = "field-position:"
                                    qual_type = "Field Position"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("quarter-time:"):
                                    qual_str = "quarter-time:"
                                    qual_type = "Quarter Time"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("quarter-time-remaining:"):
                                    qual_str = "quarter-time-remaining:"
                                    qual_type = "Quarter Time Remaining"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("current-team-score:"):
                                    qual_str = "current-team-score:"
                                    qual_type = "Current Team Score"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("current-opponent-score:"):
                                    qual_str = "current-opponent-score:"
                                    qual_type = "Current Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("current-score-margin:"):
                                    qual_str = "current-score-margin:"
                                    qual_type = "Current Score Margin"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("current-score-difference:"):
                                    qual_str = "current-score-difference:"
                                    qual_type = "Current Score Difference"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("spread:"):
                                    qual_str = "spread:"
                                    qual_type = "Spread"
                                    if "record" not in extra_stats:
                                        extra_stats.add("record")
                                    if "ats-record" not in extra_stats:
                                        extra_stats.add("ats-record")
                                elif qualifier_str.startswith("over-under:"):
                                    qual_str = "over-under:"
                                    qual_type = "Over/Under"
                                    if "ou-record" not in extra_stats:
                                        extra_stats.add("ou-record")
                                elif qualifier_str.startswith("spread-margin:"):
                                    qual_str = "spread-margin:"
                                    qual_type = "Spread Margin"
                                    if "record" not in extra_stats:
                                        extra_stats.add("record")
                                    if "ats-record" not in extra_stats:
                                        extra_stats.add("ats-record")
                                elif qualifier_str.startswith("over-under-margin:"):
                                    qual_str = "over-under-margin:"
                                    qual_type = "Over/Under Margin"
                                    if "ou-record" not in extra_stats:
                                        extra_stats.add("ou-record")
                                elif qualifier_str.startswith("team-games-over-500:"):
                                    qual_str = "team-games-over-500:"
                                    qual_type = "Team Games Over 500"
                                elif qualifier_str.startswith("opponent-games-over-500:"):
                                    qual_str = "opponent-games-over-500:"
                                    qual_type = "Opponent Games Over 500"
                                elif qualifier_str.startswith("current-team-games-over-500:"):
                                    qual_str = "current-team-games-over-500:"
                                    qual_type = "Current Team Games Over 500"
                                elif qualifier_str.startswith("current-opponent-games-over-500:"):
                                    qual_str = "current-opponent-games-over-500:"
                                    qual_type = "Current Opponent Games Over 500"

                                split_vals = re.split(r"(?<!\\)(?<!^)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)
                                
                                if qual_type.startswith("Quarter Time"):
                                    new_split_vals = []
                                    for split_val in split_vals:
                                        period_time_spl = split_val.split(":")
                                        if len(period_time_spl) > 1:
                                            period_time = (int(ordinal_to_number(period_time_spl[0])) * 60) + int(ordinal_to_number(period_time_spl[1]))
                                        else:
                                            period_time = (int(ordinal_to_number(period_time_spl[0])) * 60)
                                        new_split_vals.append(period_time)
                                    split_vals = new_split_vals
                                
                                if len(split_vals) == 1:
                                    if qual_type.startswith("Quarter Time"):
                                        qualifier_obj["values"] = {
                                            "start_val" : 0,
                                            "end_val" : split_vals[0]
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                else:
                                    if qual_type.startswith("Quarter Time"):
                                        qualifier_obj["values"] = {
                                            "start_val" : split_vals[0],
                                            "end_val" : split_vals[1]
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[1])
                                        }
                            elif "start-if-qb" in qualifier_str:
                                qual_type = "Start If QB"
                            elif "start" in qualifier_str and not qualifier_str.startswith("starts-rest:") and not qualifier_str.startswith("starts-in-a-row:") and not qualifier_str.startswith("starts-days-rest:") and not qualifier_str.startswith("upcoming-starts-days-rest:") and not qualifier_str.startswith("local-start-time:") and not qualifier_str.startswith("team-start-time:") and not qualifier_str.startswith("opponent-start-time:"):
                                for pos in headers:
                                    if qualifier_str == pos.lower() + "-start":
                                        qual_type = "Start Position"
                                        qualifier_obj["values"] = [pos]
                                        break

                                if not qual_type:
                                    if "ignore" in qualifier_str:
                                        qual_type = "Ignore Start"
                                    else:
                                        qual_type = "Start"
                            elif "birth" in qualifier_str:
                                qual_type = "Birthday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str in [pos.lower() for pos in headers]:
                                player_type["da_type"] = qualifier_str.upper()
                            elif qualifier_str == "defense":
                                player_type["da_type"] = "LB"
                            elif qualifier_str.startswith("t:") or qualifier_str.startswith("start-position:") or qualifier_str.startswith("o:") or qualifier_str.startswith("franchise-stadium:") or qualifier_str.startswith("franchise-arena:") or qualifier_str.startswith("team:") or qualifier_str.startswith("opponent:") or qualifier_str.startswith("franchise:") or qualifier_str.startswith("tf:") or qualifier_str.startswith("of:") or qualifier_str.startswith("f:") or qualifier_str.startswith("team-franchise:") or qualifier_str.startswith("opponent-franchise:") or qualifier_str.startswith("previous-franchise:") or qualifier_str.startswith("previous-team-franchise:") or qualifier_str.startswith("previous-opponent-franchise:") or qualifier_str.startswith("upcoming-franchise:") or qualifier_str.startswith("upcoming-team-franchise:") or qualifier_str.startswith("upcoming-opponent-franchise:") or qualifier_str.startswith("state:") or qualifier_str.startswith("exact-state:") or qualifier_str.startswith("province:") or qualifier_str.startswith("exact-province:") or qualifier_str.startswith("team-province:") or qualifier_str.startswith("team-exact-province:") or qualifier_str.startswith("opponent-province:") or qualifier_str.startswith("opponent-exact-province:") or qualifier_str.startswith("time-zone:") or qualifier_str.startswith("exact-time-zone:") or qualifier_str.startswith("team-state:") or qualifier_str.startswith("team-exact-state:") or qualifier_str.startswith("team-time-zone:") or qualifier_str.startswith("team-exact-time-zone:") or qualifier_str.startswith("opponent-state:") or qualifier_str.startswith("opponent-exact-state:") or qualifier_str.startswith("opponent-time-zone:") or qualifier_str.startswith("opponent-exact-time-zone:") or qualifier_str.startswith("country:") or qualifier_str.startswith("exact-country:") or qualifier_str.startswith("team-country:") or qualifier_str.startswith("team-exact-country:") or qualifier_str.startswith("opponent-country:") or qualifier_str.startswith("opponent-exact-country:") or qualifier_str.startswith("prv-t:") or qualifier_str.startswith("prv-o:") or qualifier_str.startswith("previous-team:") or qualifier_str.startswith("previous-opponent:") or qualifier_str.startswith("upc-t:") or qualifier_str.startswith("upc-o:") or qualifier_str.startswith("upcoming-team:") or qualifier_str.startswith("upcoming-opponent:") or qualifier_str.startswith("team-league:") or qualifier_str.startswith("opponent-league:") or qualifier_str.startswith("team-conference:") or qualifier_str.startswith("opponent-conference:") or qualifier_str.startswith("team-division:")  or qualifier_str.startswith("opponent-division:"):
                                split_str = "-"
                                if qualifier_str.startswith("t:"):
                                    qual_str = "t:"
                                    qual_type = "Team"
                                elif qualifier_str.startswith("team:"):
                                    qual_str = "team:"
                                    qual_type = "Team"
                                elif qualifier_str.startswith("franchise-stadium:"):
                                    qual_str = "franchise-stadium:"
                                    qual_type = "Franchise Stadium"
                                elif qualifier_str.startswith("franchise-arena:"):
                                    qual_str = "franchise-arena:"
                                    qual_type = "Franchise Stadium"
                                elif qualifier_str.startswith("start-position:"):
                                    qual_str = "start-position:"
                                    qual_type = "Start Position"
                                elif qualifier_str.startswith("o:"):
                                    qual_str = "o:"
                                    qual_type = "Opponent"
                                elif qualifier_str.startswith("opponent:"):
                                    qual_str = "opponent:"
                                    qual_type = "Opponent"
                                elif qualifier_str.startswith("tf:"):
                                    qual_str = "tf:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("of:"):
                                    qual_str = "of:"
                                    qual_type = "Opponent Franchise"
                                elif qualifier_str.startswith("f:"):
                                    qual_str = "f:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("franchise:"):
                                    qual_str = "franchise:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("team-franchise:"):
                                    qual_str = "team-franchise:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("opponent-franchise:"):
                                    qual_str = "opponent-franchise:"
                                    qual_type = "Opponent Franchise"
                                elif qualifier_str.startswith("upcoming-franchise:"):
                                    qual_str = "upcoming-franchise:"
                                    qual_type = "Upcoming Team Franchise"
                                elif qualifier_str.startswith("upcoming-team-franchise:"):
                                    qual_str = "upcoming-team-franchise:"
                                    qual_type = "Upcoming Team Franchise"
                                elif qualifier_str.startswith("upcoming-opponent-franchise:"):
                                    qual_str = "upcoming-opponent-franchise:"
                                    qual_type = "Upcoming Opponent Franchise"
                                elif qualifier_str.startswith("previous-franchise:"):
                                    qual_str = "previous-franchise:"
                                    qual_type = "Previous Team Franchise"
                                elif qualifier_str.startswith("previous-team-franchise:"):
                                    qual_str = "previous-team-franchise:"
                                    qual_type = "Previous Team Franchise"
                                elif qualifier_str.startswith("previous-opponent-franchise:"):
                                    qual_str = "previous-opponent-franchise:"
                                    qual_type = "Previous Opponent Franchise"
                                elif qualifier_str.startswith("prv-t:"):
                                    qual_str = "prv-t:"
                                    qual_type = "Previous Team"
                                elif qualifier_str.startswith("previous-team:"):
                                    qual_str = "previous-team:"
                                    qual_type = "Previous Team"
                                elif qualifier_str.startswith("prv-o:"):
                                    qual_str = "prv-o:"
                                    qual_type = "Previous Opponent"
                                elif qualifier_str.startswith("previous-opponent:"):
                                    qual_str = "previous-opponent:"
                                    qual_type = "Previous Opponent"
                                elif qualifier_str.startswith("upc-t:"):
                                    qual_str = "upc-t:"
                                    qual_type = "Upcoming Team"
                                elif qualifier_str.startswith("upcoming-team:"):
                                    qual_str = "upcoming-team:"
                                    qual_type = "Upcoming Team"
                                elif qualifier_str.startswith("upc-o:"):
                                    qual_str = "upc-o:"
                                    qual_type = "Upcoming Opponent"
                                elif qualifier_str.startswith("upcoming-opponent:"):
                                    qual_str = "upcoming-opponent:"
                                    qual_type = "Upcoming Opponent"
                                elif qualifier_str.startswith("team-league:"):
                                    qual_str = "team-league:"
                                    qual_type = "Team League"
                                elif qualifier_str.startswith("opponent-league:"):
                                    qual_str = "opponent-league:"
                                    qual_type = "Opponent League"
                                elif qualifier_str.startswith("team-conference:"):
                                    qual_str = "team-conference:"
                                    qual_type = "Team Conference"
                                elif qualifier_str.startswith("opponent-conference:"):
                                    qual_str = "opponent-conference:"
                                    qual_type = "Opponent Conference"
                                elif qualifier_str.startswith("team-division:"):
                                    qual_str = "team-division:"
                                    qual_type = "Team Division"
                                    split_str = ";"
                                elif qualifier_str.startswith("opponent-division:"):
                                    qual_str = "opponent-division:"
                                    qual_type = "Opponent Division"
                                    split_str = ";"
                                elif qualifier_str.startswith("state:"):
                                    qual_str = "state:"
                                    qual_type = "State"
                                elif qualifier_str.startswith("exact-state:"):
                                    qual_str = "exact-state:"
                                    qual_type = "Exact State"
                                elif qualifier_str.startswith("province:"):
                                    qual_str = "province:"
                                    qual_type = "State"
                                elif qualifier_str.startswith("exact-province:"):
                                    qual_str = "exact-province:"
                                    qual_type = "Exact State"
                                elif qualifier_str.startswith("team-province:"):
                                    qual_str = "team-province:"
                                    qual_type = "Team State"
                                elif qualifier_str.startswith("team-exact-province:"):
                                    qual_str = "team-exact-province:"
                                    qual_type = "Team Exact State"
                                elif qualifier_str.startswith("opponent-province:"):
                                    qual_str = "opponent-province:"
                                    qual_type = "Opponent State"
                                elif qualifier_str.startswith("opponent-exact-province:"):
                                    qual_str = "opponent-exact-province:"
                                    qual_type = "Opponent Exact State"
                                elif qualifier_str.startswith("time-zone:"):
                                    qual_str = "time-zone:"
                                    qual_type = "Time Zone"
                                elif qualifier_str.startswith("exact-time-zone:"):
                                    qual_str = "exact-time-zone:"
                                    qual_type = "Exact Time Zone"
                                elif qualifier_str.startswith("team-state:"):
                                    qual_str = "team-state:"
                                    qual_type = "Team State"
                                elif qualifier_str.startswith("team-exact-state:"):
                                    qual_str = "team-exact-state:"
                                    qual_type = "Team Exact State"
                                elif qualifier_str.startswith("team-time-zone:"):
                                    qual_str = "team-time-zone:"
                                    qual_type = "Team Time Zone"
                                elif qualifier_str.startswith("team-exact-time-zone:"):
                                    qual_str = "team-exact-time-zone:"
                                    qual_type = "Team Exact Time Zone"
                                elif qualifier_str.startswith("opponent-state:"):
                                    qual_str = "opponent-state:"
                                    qual_type = "Opponent State"
                                elif qualifier_str.startswith("opponent-exact-state:"):
                                    qual_str = "opponent-exact-state:"
                                    qual_type = "Opponent Exact State"
                                elif qualifier_str.startswith("opponent-time-zone:"):
                                    qual_str = "opponent-time-zone:"
                                    qual_type = "Opponent Time Zone"
                                elif qualifier_str.startswith("opponent-exact-time-zone:"):
                                    qual_str = "opponent-exact-time-zone:"
                                    qual_type = "Opponent Exact Time Zone"
                                elif qualifier_str.startswith("country:"):
                                    qual_str = "country:"
                                    qual_type = "Country"
                                elif qualifier_str.startswith("exact-country:"):
                                    qual_str = "exact-country:"
                                    qual_type = "Exact Country"
                                elif qualifier_str.startswith("team-country:"):
                                    qual_str = "team-country:"
                                    qual_type = "Team Country"
                                elif qualifier_str.startswith("team-exact-country:"):
                                    qual_str = "team-exact-country:"
                                    qual_type = "Team Exact Country"
                                elif qualifier_str.startswith("opponent-country:"):
                                    qual_str = "opponent-country:"
                                    qual_type = "Opponent Country"
                                elif qualifier_str.startswith("opponent-exact-country:"):
                                    qual_str = "opponent-exact-country:"
                                    qual_type = "Opponent Exact Country"
                                
                                qualifier_obj["values"] = re.split(r"(?<!\\)" + split_str, re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                            elif qualifier_str.startswith("local-start-time:") or qualifier_str.startswith("team-start-time:") or qualifier_str.startswith("opponent-start-time:"):
                                if qualifier_str.startswith("local-start-time:"):
                                    qual_str = "local-start-time:"
                                    qual_type = "Local Start Time"
                                elif qualifier_str.startswith("team-start-time:"):
                                    qual_str = "team-start-time:"
                                    qual_type = "Team Start Time"
                                elif qualifier_str.startswith("opponent-start-time:"):
                                    qual_str = "opponent-start-time:"
                                    qual_type = "Opponent Start Time"

                                split_vals = re.split(r"(?<!\\)-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    the_date = dateutil.parser.parse(split_vals[0]).time()
                                    the_date_2 = dateutil.parser.parse(split_vals[0]).time()
                                    if split_vals[0].count(":") == 0:
                                        the_date_2 = the_date_2.replace(minute=59).replace(second=59)
                                    elif split_vals[0].count(":") == 1:
                                        the_date_2 = the_date_2.replace(second=59)
                                    qualifier_obj["values"] = {
                                        "start_val" : the_date,
                                        "end_val" : the_date_2
                                    }
                                else:
                                    start_date = None
                                    end_date = None
                                    if split_vals[0] == "min" and split_vals[1] == "max":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = datetime.time(23, 59, 59)
                                    elif split_vals[0] == "min":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = dateutil.parser.parse(split_vals[1].upper()).time()
                                    elif split_vals[1] == "max":
                                        start_date = dateutil.parser.parse(split_vals[0].upper()).time()
                                        end_date = datetime.time(23, 59, 59)
                                    else:
                                        start_date = dateutil.parser.parse(split_vals[0].upper()).time()
                                        end_date = dateutil.parser.parse(split_vals[1].upper()).time()

                                    qualifier_obj["values"] = {
                                        "start_val" : start_date,
                                        "end_val" : end_date
                                    }
                                
                                qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"].replace(microsecond=0).replace(second=0)
                                qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"].replace(microsecond=0).replace(second=0)
                            elif qualifier_str.startswith("m:") or qualifier_str.startswith("month:") or re.match(all_months_re, qualifier_str):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("m:"):
                                    qual_str = "m:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                elif qualifier_str.startswith("month:"):
                                    qual_str = "month:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                else:
                                    values = re.split(r"(?<!\\)\-", qualifier_str)

                                if len(values) == 2:
                                    start_month = dateutil.parser.parse(values[0]).date().month
                                    end_month =  dateutil.parser.parse(values[1]).date().month
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 13)) + list(range(1, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(dateutil.parser.parse(value).date().month)
                                qual_type = "Month"
                            elif qualifier_str.startswith("d:") or qualifier_str.startswith("day:") or re.match(all_days_re, qualifier_str):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("d:"):
                                    qual_str = "d:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                elif qualifier_str.startswith("day:"):
                                    qual_str = "day:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                else:
                                    values = re.split(r"(?<!\\)\-", qualifier_str)

                                if len(values) == 2:
                                    start_month = dateutil.parser.parse(values[0]).date().weekday()
                                    end_month =  dateutil.parser.parse(values[1]).date().weekday()
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 7)) + list(range(0, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(dateutil.parser.parse(value).date().weekday())
                                qual_type = "Day"
                            elif qualifier_str.startswith("dt:") or qualifier_str.startswith("date:"):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("dt:"):
                                    qual_str = "dt:"
                                elif qualifier_str.startswith("date:"):
                                    qual_str = "date:"

                                values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(values) == 2:
                                    start_month = ordinal_to_number(values[0])
                                    end_month =  ordinal_to_number(values[1])
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 32)) + list(range(1, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(ordinal_to_number(value))
                                qual_type = "Date"
                            elif qualifier_str.startswith("wk:") or qualifier_str.startswith("week:") or qualifier_str.startswith("gm:") or qualifier_str.startswith("game:") or qualifier_str.startswith("season-gm:") or qualifier_str.startswith("season-game:") or qualifier_str.startswith("season:") or qualifier_str.startswith("season-reversed:") or qualifier_str.startswith("seasons:") or qualifier_str.startswith("seasons-reversed:") or qualifier_str.startswith("tmgm:") or qualifier_str.startswith("team-game:") or qualifier_str.startswith("crgm:") or qualifier_str.startswith("career-game:") or qualifier_str.startswith("game-reversed:") or qualifier_str.startswith("career-game-reversed:") or qualifier_str.startswith("season-game-reversed:") or qualifier_str.startswith("team-game-reversed:") or qualifier_str.startswith("career-games:") or qualifier_str.startswith("games-reversed:") or qualifier_str.startswith("career-games-reversed:") or qualifier_str.startswith("season-games-reversed:") or qualifier_str.startswith("team-games-reversed:") or qualifier_str.startswith("team-games:") or qualifier_str.startswith("dr:") or qualifier_str.startswith("days-rest:") or qualifier_str.startswith("starts-days-rest:") or qualifier_str.startswith("prv-dr:") or qualifier_str.startswith("previous-days-rest:") or qualifier_str.startswith("upc-dr:") or qualifier_str.startswith("upcoming-days-rest:") or qualifier_str.startswith("upcoming-starts-days-rest:") or qualifier_str.startswith("gr:") or qualifier_str.startswith("games-rest:") or qualifier_str.startswith("starts-rest:") or qualifier_str.startswith("prv-gr:") or qualifier_str.startswith("previous-games-rest:") or qualifier_str.startswith("upc-gr:") or qualifier_str.startswith("upcoming-games-rest:") or qualifier_str.startswith("days-in-a-row:") or qualifier_str.startswith("games-in-a-row:") or qualifier_str.startswith("starts-in-a-row:") or qualifier_str.startswith("super bowl") or qualifier_str.startswith("sb") or qualifier_str.startswith("number:"):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("wk:"):
                                    qual_str = "wk:"
                                    qual_type = "Week"
                                elif qualifier_str.startswith("week:"):
                                    qual_str = "week:"
                                    qual_type = "Week"
                                elif qualifier_str.startswith("gm:"):
                                    qual_str = "gm:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("game:"):
                                    qual_str = "game:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("season-gm:"):
                                    qual_str = "season-gm:"
                                    qual_type = "Season Game"
                                elif qualifier_str.startswith("season-game:"):
                                    qual_str = "season-game:"
                                    qual_type = "Season Game"
                                elif qualifier_str.startswith("season:"):
                                    qual_str = "season:"
                                    qual_type = "Season"
                                elif qualifier_str.startswith("season-reversed:"):
                                    qual_str = "season-reversed:"
                                    qual_type = "Season Reversed"
                                elif qualifier_str.startswith("season-index:"):
                                    qual_str = "season-index:"
                                    qual_type = "Season Index"
                                elif qualifier_str.startswith("season-index-reversed:"):
                                    qual_str = "season-index-reversed:"
                                    qual_type = "Season Index Reversed"
                                elif qualifier_str.startswith("tmgm:"):
                                    qual_str = "tmgm:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("team-game:"):
                                    qual_str = "team-game:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("crgm:"):
                                    qual_str = "crgm:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-game:"):
                                    qual_str = "career-game:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-game-reversed:"):
                                    qual_str = "career-game-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("team-game-reversed:"):
                                    qual_str = "team-game-reversed:"
                                    qual_type = "Team Game Reversed"
                                elif qualifier_str.startswith("game-reversed:"):
                                    qual_str = "game-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("season-game-reversed:"):
                                    qual_str = "season-game-reversed:"
                                    qual_type = "Season Game Reversed"
                                elif qualifier_str.startswith("career-games:"):
                                    qual_str = "career-games:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-games-reversed:"):
                                    qual_str = "career-games-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("team-games-reversed:"):
                                    qual_str = "team-games-reversed:"
                                    qual_type = "Team Game Reversed"
                                elif qualifier_str.startswith("games-reversed:"):
                                    qual_str = "games-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("season-games-reversed:"):
                                    qual_str = "season-games-reversed:"
                                    qual_type = "Season Game Reversed"
                                elif qualifier_str.startswith("team-games:"):
                                    qual_str = "team-games:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("dr:"):
                                    qual_str = "dr:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("days-rest:"):
                                    qual_str = "days-rest:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("prv-dr:"):
                                    qual_str = "prv-dr:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("previous-days-rest:"):
                                    qual_str = "previous-days-rest:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("starts-days-rest:"):
                                    qual_str = "starts-days-rest:"
                                    qual_type = "Starts Days Rest"
                                elif qualifier_str.startswith("upc-dr:"):
                                    qual_str = "upc-dr:"
                                    qual_type = "Upcoming Days Rest"
                                elif qualifier_str.startswith("upcoming-days-rest:"):
                                    qual_str = "upcoming-days-rest:"
                                    qual_type = "Upcoming Days Rest"
                                elif qualifier_str.startswith("upcoming-starts-days-rest:"):
                                    qual_str = "upcoming-starts-days-rest:"
                                    qual_type = "Upcoming Starts Days Rest"
                                elif qualifier_str.startswith("gr:"):
                                    qual_str = "gr:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("games-rest:"):
                                    qual_str = "games-rest:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("prv-gr:"):
                                    qual_str = "prv-gr:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("previous-games-rest:"):
                                    qual_str = "previous-games-rest:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("starts-rest:"):
                                    qual_str = "starts-rest:"
                                    qual_type = "Starts Rest"
                                elif qualifier_str.startswith("days-in-a-row:"):
                                    qual_str = "days-in-a-row:"
                                    qual_type = "Days In A Row"
                                elif qualifier_str.startswith("games-in-a-row:"):
                                    qual_str = "games-in-a-row:"
                                    qual_type = "Games In A Row"
                                elif qualifier_str.startswith("starts-in-a-row:"):
                                    qual_str = "starts-in-a-row:"
                                    qual_type = "Starts In A Row"
                                elif qualifier_str.startswith("super bowl"):
                                    qual_str = "super bowl"
                                    if qualifier_str == "super bowl:":
                                        qual_str += ":"
                                    qual_type = "Super Bowl"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("sb"):
                                    qual_str = "sb"
                                    if qualifier_str == "sb:":
                                        qual_str += ":"
                                    qual_type = "Super Bowl"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("number:"):
                                    qual_str = "number:"
                                    qual_type = "Number"
                                
                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                
                                if len(split_vals) == 1:
                                    if qual_type == "Week" or qual_type == "Super Bowl" or qual_type == "Number" or "In A Row" in qual_type or "Rest" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1])
                                    }
                            elif qualifier_str.startswith("opponent-points-rank:") or qualifier_str.startswith("opponent-points-allowed-rank:") or qualifier_str.startswith("opponent-yards-rank:") or qualifier_str.startswith("opponent-yds-rank:") or qualifier_str.startswith("opponent-yards-allowed-rank:") or qualifier_str.startswith("opponent-yds-allowed-rank:") or qualifier_str.startswith("opponent-pass-td-rank:") or qualifier_str.startswith("opponent-pass-td-allowed-rank:")  or qualifier_str.startswith("opponent-pass-tds-rank:") or qualifier_str.startswith("opponent-pass-tds-allowed-rank:") or qualifier_str.startswith("opponent-pass-yards-rank:") or qualifier_str.startswith("opponent-pass-yards-allowed-rank:") or qualifier_str.startswith("opponent-pass-yds-rank:") or qualifier_str.startswith("opponent-pass-yds-allowed-rank:") or qualifier_str.startswith("opponent-rush-td-rank:") or qualifier_str.startswith("opponent-rush-td-allowed-rank:") or qualifier_str.startswith("opponent-rush-tds-rank:") or qualifier_str.startswith("opponent-rush-tds-allowed-rank:") or qualifier_str.startswith("opponent-rush-yards-rank:") or qualifier_str.startswith("opponent-rush-yards-allowed-rank:") or qualifier_str.startswith("opponent-rush-yds-rank:") or qualifier_str.startswith("opponent-rush-yds-allowed-rank:") or qualifier_str.startswith("opponent-any/a-rank:") or qualifier_str.startswith("opponent-any/a-allowed-rank:") or qualifier_str.startswith("opponent-passer-rating-rank:") or qualifier_str.startswith("opponent-passer-rating-allowed-rank:") or qualifier_str.startswith("opponent-pass-rating-rank:") or qualifier_str.startswith("opponent-pass-rating-allowed-rank:") or qualifier_str.startswith("opponent-passer-rate-rank:") or qualifier_str.startswith("opponent-passer-rate-allowed-rank:") or qualifier_str.startswith("opponent-pass-rate-rank:") or qualifier_str.startswith("opponent-pass-rate-rank:") or qualifier_str.startswith("opponent-pass-rate-allowed-rank:") or qualifier_str.startswith("opponent-fantasy-qb-rank:") or qualifier_str.startswith("opponent-fantasy-hb-rank:") or qualifier_str.startswith("opponent-fantasy-rb-rank:") or qualifier_str.startswith("opponent-fantasy-wr-rank:") or qualifier_str.startswith("opponent-fantasy-te-rank:") or qualifier_str.startswith("opponent-wins:") or qualifier_str.startswith("opponent-losses:") or qualifier_str.startswith("opponent-ties:") or qualifier_str.startswith("current-opponent-wins:") or qualifier_str.startswith("current-opponent-losses:") or qualifier_str.startswith("current-opponent-ties:") or qualifier_str.startswith("opponent-win-percent:") or qualifier_str.startswith("opponent-winning-percent:") or qualifier_str.startswith("current-opponent-win-percent:") or qualifier_str.startswith("current-opponent-winning-percent:") or qualifier_str.startswith("offensive-snap-percent:") or qualifier_str.startswith("defensive-snap-percent:") or qualifier_str.startswith("special-teams-snap-percent:") or qualifier_str.startswith("off-snap-percent:") or qualifier_str.startswith("def-snap-percent:") or qualifier_str.startswith("st-snap-percent:") or qualifier_str.startswith("attendance:"):
                                position = None
                                if qualifier_str.startswith("opponent-points-rank:"):
                                    qual_str = "opponent-points-rank:"
                                    qual_type = "Opponent Points Rank"
                                elif qualifier_str.startswith("opponent-points-allowed-rank:"):
                                    qual_str = "opponent-points-allowed-rank:"
                                    qual_type = "Opponent Points Allowed Rank"
                                elif qualifier_str.startswith("opponent-yards-rank:"):
                                    qual_str = "opponent-yards-rank:"
                                    qual_type = "Opponent Yards Rank"
                                elif qualifier_str.startswith("opponent-yds-rank:"):
                                    qual_str = "opponent-yds-rank:"
                                    qual_type = "Opponent Yards Rank"
                                elif qualifier_str.startswith("opponent-yards-allowed-rank:"):
                                    qual_str = "opponent-yards-allowed-rank:"
                                    qual_type = "Opponent Yards Allowed Rank"
                                elif qualifier_str.startswith("opponent-yds-allowed-rank:"):
                                    qual_str = "opponent-yds-allowed-rank:"
                                    qual_type = "Opponent Yards Allowed Rank"
                                elif qualifier_str.startswith("opponent-pass-td-rank:"):
                                    qual_str = "opponent-pass-td-rank:"
                                    qual_type = "Opponent Pass TD Rank"
                                elif qualifier_str.startswith("opponent-pass-td-allowed-rank:"):
                                    qual_str = "opponent-pass-td-allowed-rank:"
                                    qual_type = "Opponent Pass TD Allowed Rank"
                                elif qualifier_str.startswith("opponent-pass-tds-rank:"):
                                    qual_str = "opponent-pass-tds-rank:"
                                    qual_type = "Opponent Pass TD Rank"
                                elif qualifier_str.startswith("opponent-pass-tds-allowed-rank:"):
                                    qual_str = "opponent-pass-tds-allowed-rank:"
                                    qual_type = "Opponent Pass TD Allowed Rank"
                                elif qualifier_str.startswith("opponent-pass-yards-rank:"):
                                    qual_str = "opponent-pass-yards-rank:"
                                    qual_type = "Opponent Pass Yards Rank"
                                elif qualifier_str.startswith("opponent-pass-yards-allowed-rank:"):
                                    qual_str = "opponent-pass-yards-allowed-rank:"
                                    qual_type = "Opponent Pass Yards Allowed Rank"
                                elif qualifier_str.startswith("opponent-pass-yds-rank:"):
                                    qual_str = "opponent-pass-yds-rank:"
                                    qual_type = "Opponent Pass Yards Rank"
                                elif qualifier_str.startswith("opponent-pass-yds-allowed-rank:"):
                                    qual_str = "opponent-pass-yds-allowed-rank:"
                                    qual_type = "Opponent Pass Yards Allowed Rank"
                                elif qualifier_str.startswith("opponent-rush-td-rank:"):
                                    qual_str = "opponent-rush-td-rank:"
                                    qual_type = "Opponent Rush TD Rank"
                                elif qualifier_str.startswith("opponent-rush-td-allowed-rank:"):
                                    qual_str = "opponent-rush-td-allowed-rank:"
                                    qual_type = "Opponent Rush TD Allowed Rank"
                                elif qualifier_str.startswith("opponent-rush-tds-rank:"):
                                    qual_str = "opponent-rush-tds-rank:"
                                    qual_type = "Opponent Rush TD Rank"
                                elif qualifier_str.startswith("opponent-rush-tds-allowed-rank:"):
                                    qual_str = "opponent-rush-tds-allowed-rank:"
                                    qual_type = "Opponent Rush TD Allowed Rank"
                                elif qualifier_str.startswith("opponent-rush-yards-rank:"):
                                    qual_str = "opponent-rush-yards-rank:"
                                    qual_type = "Opponent Rush Yards Rank"
                                elif qualifier_str.startswith("opponent-rush-yards-allowed-rank:"):
                                    qual_str = "opponent-rush-yards-allowed-rank:"
                                    qual_type = "Opponent Rush Yards Allowed Rank"
                                elif qualifier_str.startswith("opponent-rush-yds-rank:"):
                                    qual_str = "opponent-rush-yds-rank:"
                                    qual_type = "Opponent Rush Yards Rank"
                                elif qualifier_str.startswith("opponent-rush-yds-allowed-rank:"):
                                    qual_str = "opponent-rush-yds-allowed-rank:"
                                    qual_type = "Opponent Rush Yards Allowed Rank"
                                elif qualifier_str.startswith("opponent-any/a-rank:"):
                                    qual_str = "opponent-any/a-rank:"
                                    qual_type = "Opponent ANY/A Rank"
                                elif qualifier_str.startswith("opponent-any/a-allowed-rank:"):
                                    qual_str = "opponent-any/a-allowed-rank:"
                                    qual_type = "Opponent ANY/A Allowed Rank"
                                elif qualifier_str.startswith("opponent-passer-rating-rank:"):
                                    qual_str = "opponent-passer-rating-rank:"
                                    qual_type = "Opponent Passer Rating Rank"
                                elif qualifier_str.startswith("opponent-passer-rating-allowed-rank:"):
                                    qual_str = "opponent-passer-rating-allowed-rank:"
                                    qual_type = "Opponent Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("opponent-pass-rating-rank:"):
                                    qual_str = "opponent-pass-rating-rank:"
                                    qual_type = "Opponent Passer Rating Rank"
                                elif qualifier_str.startswith("opponent-pass-rating-allowed-rank:"):
                                    qual_str = "opponent-pass-rating-allowed-rank:"
                                    qual_type = "Opponent Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("opponent-passer-rate-rank:"):
                                    qual_str = "opponent-passer-rate-rank:"
                                    qual_type = "Opponent Passer Rating Rank"
                                elif qualifier_str.startswith("opponent-passer-rate-allowed-rank:"):
                                    qual_str = "opponent-passer-rate-allowed-rank:"
                                    qual_type = "Opponent Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("opponent-pass-rate-rank:"):
                                    qual_str = "opponent-pass-rate-rank:"
                                    qual_type = "Opponent Passer Rating Rank"
                                elif qualifier_str.startswith("opponent-pass-rate-allowed-rank:"):
                                    qual_str = "opponent-pass-rate-allowed-rank:"
                                    qual_type = "Opponent Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("opponent-wins:"):
                                    qual_str = "opponent-wins:"
                                    qual_type = "Opponent Wins"
                                elif qualifier_str.startswith("opponent-losses:"):
                                    qual_str = "opponent-losses:"
                                    qual_type = "Opponent Losses"
                                elif qualifier_str.startswith("opponent-ties:"):
                                    qual_str = "opponent-ties:"
                                    qual_type = "Opponent Ties"
                                elif qualifier_str.startswith("current-opponent-wins:"):
                                    qual_str = "current-opponent-wins:"
                                    qual_type = "Current Opponent Wins"
                                elif qualifier_str.startswith("current-opponent-losses:"):
                                    qual_str = "current-opponent-losses:"
                                    qual_type = "Current Opponent Losses"
                                elif qualifier_str.startswith("current-opponent-ties:"):
                                    qual_str = "current-opponent-ties:"
                                    qual_type = "Current Opponent Ties"
                                elif qualifier_str.startswith("opponent-win-percent:"):
                                    qual_str = "opponent-win-percent:"
                                    qual_type = "Opponent Win Percentage"
                                elif qualifier_str.startswith("opponent-winning-percent:"):
                                    qual_str = "opponent-winning-percent:"
                                    qual_type = "Opponent Win Percentage"
                                elif qualifier_str.startswith("current-opponent-win-percent:"):
                                    qual_str = "current-opponent-win-percent:"
                                    qual_type = "Current Opponent Win Percentage"
                                elif qualifier_str.startswith("current-opponent-winning-percent:"):
                                    qual_str = "current-opponent-winning-percent:"
                                    qual_type = "Current Opponent Win Percentage"
                                elif qualifier_str.startswith("opponent-fantasy-qb-rank:"):
                                    qual_str = "opponent-fantasy-qb-rank:"
                                    qual_type = "Opponent Fantasy Position Rank"
                                    position = "QB"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("opponent-fantasy-hb-rank:"):
                                    qual_str = "opponent-fantasy-hb-rank:"
                                    qual_type = "Opponent Fantasy Position Rank"
                                    position = "RB"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("opponent-fantasy-rb-rank:"):
                                    qual_str = "opponent-fantasy-rb-rank:"
                                    qual_type = "Opponent Fantasy Position Rank"
                                    position = "RB"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("opponent-fantasy-wr-rank:"):
                                    qual_str = "opponent-fantasy-wr-rank:"
                                    qual_type = "Opponent Fantasy Position Rank"
                                    position = "WR"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("opponent-fantasy-te-rank:"):
                                    qual_str = "opponent-fantasy-te-rank:"
                                    qual_type = "Opponent Fantasy Position Rank"
                                    position = "TE"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("offensive-snap-percent:"):
                                    qual_str = "offensive-snap-percent:"
                                    qual_type = "Offensive Snap Percentage"
                                elif qualifier_str.startswith("defensive-snap-percent:"):
                                    qual_str = "defensive-snap-percent:"
                                    qual_type = "Defensive Snap Percentage"
                                elif qualifier_str.startswith("special-teams-snap-percent:"):
                                    qual_str = "special-teams-snap-percent:"
                                    qual_type = "Special Teams Snap Percentage"
                                elif qualifier_str.startswith("off-snap-percent:"):
                                    qual_str = "off-snap-percent:"
                                    qual_type = "Offensive Snap Percentage"
                                elif qualifier_str.startswith("def-snap-percent:"):
                                    qual_str = "def-snap-percent:"
                                    qual_type = "Defensive Snap Percentage"
                                elif qualifier_str.startswith("st-snap-percent:"):
                                    qual_str = "st-snap-percent:"
                                    qual_type = "Special Teams Snap Percentage"
                                elif qualifier_str.startswith("attendance:"):
                                    qual_str = "attendance:"
                                    qual_type = "Attendance"

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                reverse = False
                                rate = False
                                if len(split_vals) == 4:
                                    reverse = True
                                    rate = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]
                                elif len(split_vals) == 3:
                                    if split_vals[2].startswith("reverse"):
                                        reverse = True
                                    else:
                                        rate = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]
                                
                                if qual_type == "Opponent ANY/A Rank" or qual_type == "Opponent ANY/A Allowed Rank" or qual_type == "Opponent Passer Rating Rank" or qual_type == "Opponent Passer Rating Allowed Rank":
                                    rate = False

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    if "Percentage" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : 1,
                                            "reverse" : reverse,
                                            "rate" : rate,
                                            "position" : position
                                        }
                                    elif "Attendance" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : float("inf"),
                                            "reverse" : reverse,
                                            "rate" : rate,
                                            "position" : position
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0]),
                                            "reverse" : reverse,
                                            "rate" : rate,
                                            "position" : position
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1]),
                                        "reverse" : reverse,
                                        "rate" : rate,
                                        "position" : position
                                    }
                                
                                if "Percentage" in qual_type:
                                    if qualifier_obj["values"]["start_val"] > 1:
                                        qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"] / 100
                                    if qualifier_obj["values"]["end_val"] > 1:
                                        qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"] / 100

                                if "Snap Percentage" in qual_type:
                                    if not qualifier_obj["values"]["start_val"] in (-float("inf"), float("inf")):
                                        qualifier_obj["values"]["start_val"] = get_constant_data.round_value(qualifier_obj["values"]["start_val"], 2)
                                    if not qualifier_obj["values"]["end_val"] in (-float("inf"), float("inf")):
                                        qualifier_obj["values"]["end_val"] = get_constant_data.round_value(qualifier_obj["values"]["end_val"], 2)
                            elif qualifier_str.startswith("team-points-rank:") or qualifier_str.startswith("team-points-allowed-rank:") or qualifier_str.startswith("team-yards-rank:") or qualifier_str.startswith("team-yds-rank:") or qualifier_str.startswith("team-yards-allowed-rank:") or qualifier_str.startswith("team-yds-allowed-rank:") or qualifier_str.startswith("team-pass-td-rank:") or qualifier_str.startswith("team-pass-td-allowed-rank:")  or qualifier_str.startswith("team-pass-tds-rank:") or qualifier_str.startswith("team-pass-tds-allowed-rank:") or qualifier_str.startswith("team-pass-yards-rank:") or qualifier_str.startswith("team-pass-yards-allowed-rank:") or qualifier_str.startswith("team-pass-yds-rank:") or qualifier_str.startswith("team-pass-yds-allowed-rank:") or qualifier_str.startswith("team-rush-td-rank:") or qualifier_str.startswith("team-rush-td-allowed-rank:") or qualifier_str.startswith("team-rush-tds-rank:") or qualifier_str.startswith("team-rush-tds-allowed-rank:") or qualifier_str.startswith("team-rush-yards-rank:") or qualifier_str.startswith("team-rush-yards-allowed-rank:") or qualifier_str.startswith("team-rush-yds-rank:") or qualifier_str.startswith("team-rush-yds-allowed-rank:") or qualifier_str.startswith("team-any/a-rank:") or qualifier_str.startswith("team-any/a-allowed-rank:") or qualifier_str.startswith("team-passer-rating-rank:") or qualifier_str.startswith("team-passer-rating-allowed-rank:") or qualifier_str.startswith("team-pass-rating-rank:") or qualifier_str.startswith("team-pass-rating-allowed-rank:") or qualifier_str.startswith("team-passer-rate-rank:") or qualifier_str.startswith("team-passer-rate-allowed-rank:") or qualifier_str.startswith("team-pass-rate-rank:") or qualifier_str.startswith("team-pass-rate-rank:") or qualifier_str.startswith("team-pass-rate-allowed-rank:") or qualifier_str.startswith("team-fantasy-qb-rank:") or qualifier_str.startswith("team-fantasy-hb-rank:") or qualifier_str.startswith("team-fantasy-rb-rank:") or qualifier_str.startswith("team-fantasy-wr-rank:") or qualifier_str.startswith("team-fantasy-te-rank:") or qualifier_str.startswith("team-wins:") or qualifier_str.startswith("team-losses:") or qualifier_str.startswith("team-ties:") or qualifier_str.startswith("current-team-wins:") or qualifier_str.startswith("current-team-losses:") or qualifier_str.startswith("current-team-ties:") or qualifier_str.startswith("team-win-percent:") or qualifier_str.startswith("current-team-winning-percent:") or qualifier_str.startswith("current-team-win-percent:") or qualifier_str.startswith("team-winning-percent:"):
                                position = None
                                if qualifier_str.startswith("team-points-rank:"):
                                    qual_str = "team-points-rank:"
                                    qual_type = "Team Points Rank"
                                elif qualifier_str.startswith("team-points-allowed-rank:"):
                                    qual_str = "team-points-allowed-rank:"
                                    qual_type = "Team Points Allowed Rank"
                                elif qualifier_str.startswith("team-yards-rank:"):
                                    qual_str = "team-yards-rank:"
                                    qual_type = "Team Yards Rank"
                                elif qualifier_str.startswith("team-yds-rank:"):
                                    qual_str = "team-yds-rank:"
                                    qual_type = "Team Yards Rank"
                                elif qualifier_str.startswith("team-yards-allowed-rank:"):
                                    qual_str = "team-yards-allowed-rank:"
                                    qual_type = "Team Yards Allowed Rank"
                                elif qualifier_str.startswith("team-yds-allowed-rank:"):
                                    qual_str = "team-yds-allowed-rank:"
                                    qual_type = "Team Yards Allowed Rank"
                                elif qualifier_str.startswith("team-pass-td-rank:"):
                                    qual_str = "team-pass-td-rank:"
                                    qual_type = "Team Pass TD Rank"
                                elif qualifier_str.startswith("team-pass-td-allowed-rank:"):
                                    qual_str = "team-pass-td-allowed-rank:"
                                    qual_type = "Team Pass TD Allowed Rank"
                                elif qualifier_str.startswith("team-pass-tds-rank:"):
                                    qual_str = "team-pass-tds-rank:"
                                    qual_type = "Team Pass TD Rank"
                                elif qualifier_str.startswith("team-pass-tds-allowed-rank:"):
                                    qual_str = "team-pass-tds-allowed-rank:"
                                    qual_type = "Team Pass TD Allowed Rank"
                                elif qualifier_str.startswith("team-pass-yards-rank:"):
                                    qual_str = "team-pass-yards-rank:"
                                    qual_type = "Team Pass Yards Rank"
                                elif qualifier_str.startswith("team-pass-yards-allowed-rank:"):
                                    qual_str = "team-pass-yards-allowed-rank:"
                                    qual_type = "Team Pass Yards Allowed Rank"
                                elif qualifier_str.startswith("team-pass-yds-rank:"):
                                    qual_str = "team-pass-yds-rank:"
                                    qual_type = "Team Pass Yards Rank"
                                elif qualifier_str.startswith("team-pass-yds-allowed-rank:"):
                                    qual_str = "team-pass-yds-allowed-rank:"
                                    qual_type = "Team Pass Yards Allowed Rank"
                                elif qualifier_str.startswith("team-rush-td-rank:"):
                                    qual_str = "team-rush-td-rank:"
                                    qual_type = "Team Rush TD Rank"
                                elif qualifier_str.startswith("team-rush-td-allowed-rank:"):
                                    qual_str = "team-rush-td-allowed-rank:"
                                    qual_type = "Team Rush TD Allowed Rank"
                                elif qualifier_str.startswith("team-rush-tds-rank:"):
                                    qual_str = "team-rush-tds-rank:"
                                    qual_type = "Team Rush TD Rank"
                                elif qualifier_str.startswith("team-rush-tds-allowed-rank:"):
                                    qual_str = "team-rush-tds-allowed-rank:"
                                    qual_type = "Team Rush TD Allowed Rank"
                                elif qualifier_str.startswith("team-rush-yards-rank:"):
                                    qual_str = "team-rush-yards-rank:"
                                    qual_type = "Team Rush Yards Rank"
                                elif qualifier_str.startswith("team-rush-yards-allowed-rank:"):
                                    qual_str = "team-rush-yards-allowed-rank:"
                                    qual_type = "Team Rush Yards Allowed Rank"
                                elif qualifier_str.startswith("team-rush-yds-rank:"):
                                    qual_str = "team-rush-yds-rank:"
                                    qual_type = "Team Rush Yards Rank"
                                elif qualifier_str.startswith("team-rush-yds-allowed-rank:"):
                                    qual_str = "team-rush-yds-allowed-rank:"
                                    qual_type = "Team Rush Yards Allowed Rank"
                                elif qualifier_str.startswith("team-any/a-rank:"):
                                    qual_str = "team-any/a-rank:"
                                    qual_type = "Team ANY/A Rank"
                                elif qualifier_str.startswith("team-any/a-allowed-rank:"):
                                    qual_str = "team-any/a-allowed-rank:"
                                    qual_type = "Team ANY/A Allowed Rank"
                                elif qualifier_str.startswith("team-passer-rating-rank:"):
                                    qual_str = "team-passer-rating-rank:"
                                    qual_type = "Team Passer Rating Rank"
                                elif qualifier_str.startswith("team-passer-rating-allowed-rank:"):
                                    qual_str = "team-passer-rating-allowed-rank:"
                                    qual_type = "Team Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("team-pass-rating-rank:"):
                                    qual_str = "team-pass-rating-rank:"
                                    qual_type = "Team Passer Rating Rank"
                                elif qualifier_str.startswith("team-pass-rating-allowed-rank:"):
                                    qual_str = "team-pass-rating-allowed-rank:"
                                    qual_type = "Team Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("team-passer-rate-rank:"):
                                    qual_str = "team-passer-rate-rank:"
                                    qual_type = "Team Passer Rating Rank"
                                elif qualifier_str.startswith("team-passer-rate-allowed-rank:"):
                                    qual_str = "team-passer-rate-allowed-rank:"
                                    qual_type = "Team Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("team-pass-rate-rank:"):
                                    qual_str = "team-pass-rate-rank:"
                                    qual_type = "Team Passer Rating Rank"
                                elif qualifier_str.startswith("team-pass-rate-allowed-rank:"):
                                    qual_str = "team-pass-rate-allowed-rank:"
                                    qual_type = "Team Passer Rating Allowed Rank"
                                elif qualifier_str.startswith("team-wins:"):
                                    qual_str = "team-wins:"
                                    qual_type = "Team Wins"
                                elif qualifier_str.startswith("team-losses:"):
                                    qual_str = "team-losses:"
                                    qual_type = "Team Losses"
                                elif qualifier_str.startswith("team-ties:"):
                                    qual_str = "team-ties:"
                                    qual_type = "Team Ties"
                                elif qualifier_str.startswith("team-win-percent:"):
                                    qual_str = "team-win-percent:"
                                    qual_type = "Team Win Percentage"
                                elif qualifier_str.startswith("team-winning-percent:"):
                                    qual_str = "team-winning-percent:"
                                    qual_type = "Team Win Percentage"
                                elif qualifier_str.startswith("current-team-wins:"):
                                    qual_str = "current-team-wins:"
                                    qual_type = "Current Team Wins"
                                elif qualifier_str.startswith("current-team-losses:"):
                                    qual_str = "current-team-losses:"
                                    qual_type = "Current Team Losses"
                                elif qualifier_str.startswith("current-team-ties:"):
                                    qual_str = "current-team-ties:"
                                    qual_type = "Current Team Ties"
                                elif qualifier_str.startswith("current-team-win-percent:"):
                                    qual_str = "current-team-win-percent:"
                                    qual_type = "Current Team Win Percentage"
                                elif qualifier_str.startswith("current-team-winning-percent:"):
                                    qual_str = "current-team-winning-percent:"
                                    qual_type = "Current Team Win Percentage"
                                elif qualifier_str.startswith("team-fantasy-qb-rank:"):
                                    qual_str = "team-fantasy-qb-rank:"
                                    qual_type = "Team Fantasy Position Rank"
                                    position = "QB"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("team-fantasy-hb-rank:"):
                                    qual_str = "team-fantasy-hb-rank:"
                                    qual_type = "Team Fantasy Position Rank"
                                    position = "RB"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("team-fantasy-rb-rank:"):
                                    qual_str = "team-fantasy-rb-rank:"
                                    qual_type = "Team Fantasy Position Rank"
                                    position = "RB"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("team-fantasy-wr-rank:"):
                                    qual_str = "team-fantasy-wr-rank:"
                                    qual_type = "Team Fantasy Position Rank"
                                    position = "WR"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True
                                elif qualifier_str.startswith("team-fantasy-te-rank:"):
                                    qual_str = "team-fantasy-te-rank:"
                                    qual_type = "Team Fantasy Position Rank"
                                    position = "TE"
                                    if not is_fantasy_manually_set:
                                        is_fantasy = True

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                reverse = False
                                rate = False
                                if len(split_vals) == 4:
                                    reverse = True
                                    rate = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]
                                elif len(split_vals) == 3:
                                    if split_vals[2].startswith("reverse"):
                                        reverse = True
                                    else:
                                        rate = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]
                                
                                if qual_type == "Team ANY/A Rank" or qual_type == "Team ANY/A Allowed Rank" or qual_type == "Team Passer Rating Rank" or qual_type == "Team Passer Rating Allowed Rank":
                                    rate = False

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    if "Percentage" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : 1,
                                            "reverse" : reverse,
                                            "rate" : rate,
                                            "position" : position
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0]),
                                            "reverse" : reverse,
                                            "rate" : rate,
                                            "position" : position
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1]),
                                        "reverse" : reverse,
                                        "rate" : rate,
                                        "position" : position
                                    }
                                
                                if "Percentage" in qual_type:
                                    if qualifier_obj["values"]["start_val"] > 1:
                                        qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"] / 100
                                    if qualifier_obj["values"]["end_val"] > 1:
                                        qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"] / 100
                            elif qualifier_str.startswith("st:") or qualifier_str.startswith("stat:") or qualifier_str.startswith("prv-st:") or qualifier_str.startswith("previous-stat:") or qualifier_str.startswith("upc-st:") or qualifier_str.startswith("upcoming-stat:") or qualifier_str.startswith("season-st:") or qualifier_str.startswith("season-stat:") or qualifier_str.startswith("prv-season-st:") or qualifier_str.startswith("previous-season-stat:") or qualifier_str.startswith("upc-season-st:") or qualifier_str.startswith("upcoming-season-stat:") or qualifier_str.startswith("totalgames-st:") or qualifier_str.startswith("totalgames-stat:"):
                                if qualifier_str.startswith("st:"):
                                    qual_str = "st:"
                                    qual_type = "Stat"
                                elif qualifier_str.startswith("stat:"):
                                    qual_str = "stat:"
                                    qual_type = "Stat"
                                elif qualifier_str.startswith("prv-st:"):
                                    qual_str = "prv-st:"
                                    qual_type = "Previous Stat"
                                elif qualifier_str.startswith("previous-stat:"):
                                    qual_str = "previous-stat:"
                                    qual_type = "Previous Stat"
                                elif qualifier_str.startswith("upc-st:"):
                                    qual_str = "upc-st:"
                                    qual_type = "Upcoming Stat"
                                elif qualifier_str.startswith("upcoming-stat:"):
                                    qual_str = "upcoming-stat:"
                                    qual_type = "Upcoming Stat"
                                elif qualifier_str.startswith("season-st:"):
                                    qual_str = "season-st:"
                                    qual_type = "Season Stat"
                                elif qualifier_str.startswith("season-stat:"):
                                    qual_str = "season-stat:"
                                    qual_type = "Season Stat"
                                elif qualifier_str.startswith("prv-season-st:"):
                                    qual_str = "prv-season-st:"
                                    qual_type = "Previous Season Stat"
                                elif qualifier_str.startswith("previous-season-stat:"):
                                    qual_str = "previous-season-stat:"
                                    qual_type = "Previous Season Stat"
                                elif qualifier_str.startswith("upc-season-st:"):
                                    qual_str = "upc-season-st:"
                                    qual_type = "Upcoming Season Stat"
                                elif qualifier_str.startswith("upcoming-season-stat:"):
                                    qual_str = "upcoming-season-stat:"
                                    qual_type = "Upcoming Season Stat"
                                elif qualifier_str.startswith("totalgames-st:"):
                                    qual_str = "totalgames-st:"
                                    qual_type = "Total Games Stat"
                                elif qualifier_str.startswith("totalgames-stat:"):
                                    qual_str = "totalgames-stat:"
                                    qual_type = "Total Games Stat"
                                
                                qualifier_obj["values"] = []
                                
                                all_vals = re.split(r"(?<!\\)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])

                                for val in all_vals:
                                    split_vals = re.split(r"(?<!\\)\=", val)
                                    stat = split_vals[0]
                                    sub_split_vals = re.split(r"(?<!\\)\>", stat)
                                    if len(sub_split_vals) == 1:
                                        over_stat = None
                                        stat = unescape_string(sub_split_vals[0])
                                    else:
                                        over_stat = sub_split_vals[0]
                                        stat = unescape_string(sub_split_vals[1])

                                    if len(split_vals) == 1:
                                        qualifier_obj["values"].append({
                                            "over_stat" : over_stat,
                                            "stat" : stat,
                                            "start_val" : 1,
                                            "end_val" : float("inf"),
                                            "end_exclusive" : False
                                        })
                                    else:
                                        split_vals = re.split(r"(?<!\\)(?<!^)\-", split_vals[1], 1)
                                        if len(split_vals) == 1:
                                            end_exclusive = False
                                            if split_vals[0].endswith("exc"):
                                                end_exclusive = True
                                                split_vals[0] = split_vals[0].rsplit("exc", 1)[0]

                                            if qual_type == "Total Games Stat":
                                                the_val = ordinal_to_number(split_vals[0])
                                                if the_val > 0:
                                                    qualifier_obj["values"].append({
                                                        "over_stat" : over_stat,
                                                        "stat" : stat,
                                                        "start_val" : 0,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                elif the_val < 0:
                                                    qualifier_obj["values"].append({
                                                        "over_stat" : over_stat,
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : 0,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                else:
                                                    qualifier_obj["values"].append({
                                                        "over_stat" : over_stat,
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                            else:
                                                the_val = ordinal_to_number(split_vals[0])
                                                if the_val > 0:
                                                    qualifier_obj["values"].append({
                                                        "over_stat" : over_stat,
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : float("inf"),
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                elif the_val < 0:
                                                    qualifier_obj["values"].append({
                                                        "over_stat" : over_stat,
                                                        "stat" : stat,
                                                        "start_val" : -float("inf"),
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                else:
                                                    qualifier_obj["values"].append({
                                                        "over_stat" : over_stat,
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                        else:
                                            end_exclusive = False
                                            if split_vals[1].endswith("exc"):
                                                end_exclusive = True
                                                split_vals[1] = split_vals[1].rsplit("exc", 1)[0]

                                            qualifier_obj["values"].append({
                                                "over_stat" : over_stat,
                                                "stat" : stat,
                                                "start_val" : ordinal_to_number(split_vals[0]),
                                                "end_val" : ordinal_to_number(split_vals[1]),
                                                "end_exclusive" : end_exclusive
                                            })
                            elif qualifier_str.startswith("min-st:") or qualifier_str.startswith("min-stat:") or qualifier_str.startswith("max-st:") or qualifier_str.startswith("max-stat:") or qualifier_str.startswith("max-str:") or qualifier_str.startswith("max-streak:") or qualifier_str.startswith("max-stretch:") or qualifier_str.startswith("ctn-str:") or qualifier_str.startswith("count-streak:") or qualifier_str.startswith("q:") or qualifier_str.startswith("quickest:") or qualifier_str.startswith("s:") or qualifier_str.startswith("slowest:"):
                                if qualifier_str.startswith("min-st:"):
                                    qual_str = "min-st:"
                                    qual_type = "Min Stat"
                                elif qualifier_str.startswith("min-stat:"):
                                    qual_str = "min-stat:"
                                    qual_type = "Min Stat"
                                elif qualifier_str.startswith("max-st:"):
                                    qual_str = "max-st:"
                                    qual_type = "Max Stat"
                                elif qualifier_str.startswith("max-stat:"):
                                    qual_str = "max-stat:"
                                    qual_type = "Max Stat"
                                elif qualifier_str.startswith("max-str:"):
                                    qual_str = "max-str:"
                                    qual_type = "Max Streak"
                                elif qualifier_str.startswith("max-streak:"):
                                    qual_str = "max-streak:"
                                    qual_type = "Max Streak"
                                elif qualifier_str.startswith("max-stretch:"):
                                    qual_str = "max-stretch:"
                                    qual_type = "Max Stretch"
                                elif qualifier_str.startswith("ctn-str:"):
                                    qual_str = "cnt-str:"
                                    qual_type = "Count Streak"
                                elif qualifier_str.startswith("count-streak:"):
                                    qual_str = "count-streak:"
                                    qual_type = "Count Streak"
                                elif qualifier_str.startswith("quickest:"):
                                    qual_str = "quickest:"
                                    qual_type = "Quickest"
                                elif qualifier_str.startswith("q:"):
                                    qual_str = "q:"
                                    qual_type = "Quickest"
                                elif qualifier_str.startswith("slowest:"):
                                    qual_str = "slowest:"
                                    qual_type = "Slowest"
                                elif qualifier_str.startswith("s:"):
                                    qual_str = "s:"
                                    qual_type = "Slowest"

                                qualifier_obj["values"] = []
                                values = re.split(r"(?<!\\)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                for value in values:
                                    split_vals = re.split(r"(?<!\\)\:", value)
                                    stats = []
                                    for stat in re.split(r"(?<!\\)\~", split_vals[0]):
                                        start_val = 1
                                        end_val = float("inf")
                                        subbb_stat = re.split(r"(?<!\\)\=", stat)
                                        if len(subbb_stat) > 1:
                                            split_stats = re.split(r"(?<!\\)(?<!^)\-", subbb_stat[1], 1)
                                            stat = subbb_stat[0]
                                            if qual_type == "Quickest" or qual_type == "Slowest":
                                                start_val = ordinal_to_number(split_stats[0])
                                                end_val = float("inf")
                                            else:
                                                if len(split_stats) == 1:
                                                    start_val = ordinal_to_number(split_stats[0])
                                                    if start_val == 0:
                                                        end_val = start_val
                                                    else:
                                                        end_val = float("inf")
                                                else:
                                                    start_val = ordinal_to_number(split_stats[0])
                                                    end_val = ordinal_to_number(split_stats[1])
                                        sub_split_vals = re.split(r"(?<!\\)\>", stat)
                                        if len(sub_split_vals) == 1:
                                            over_stat = None
                                            stat = unescape_string(sub_split_vals[0])
                                        else:
                                            over_stat = sub_split_vals[0]
                                            stat = unescape_string(sub_split_vals[1])
                                        stats.append({
                                            "over_stat" : over_stat,
                                            "stat" : unescape_string(stat),
                                            "start_val" : start_val,
                                            "end_val" : end_val
                                        })
                                    if len(split_vals) == 1:
                                        start_level = 1
                                        end_level = 1
                                        time_frame_obj = None
                                        stat_quals = None
                                    elif len(split_vals) == 2:
                                        try:
                                            start_level = 1
                                            end_level = 1
                                            stat_quals = None
                                            time_frame_obj = handle_stat_time_frame(split_vals[1])
                                        except Exception:
                                            time_frame_obj = None
                                            levels = re.split(r"(?<!\\)\-", split_vals[1])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[1])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = sub_split_vals[0]

                                                    sub_sub_split_vals = re.split(r"(?<!\\)\>", sub_stat)
                                                    if len(sub_sub_split_vals) == 1:
                                                        over_stat = None
                                                        sub_stat = unescape_string(sub_sub_split_vals[0])
                                                    else:
                                                        over_stat = sub_sub_split_vals[0]
                                                        sub_stat = unescape_string(sub_sub_split_vals[1])

                                                    sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "over_stat" : over_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "over_stat" : over_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                    elif len(split_vals) == 3:
                                        try:
                                            time_frame_obj = handle_stat_time_frame(split_vals[1])
                                            levels = re.split(r"(?<!\\)\-", split_vals[2])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                                stat_quals = None
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[2])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = sub_split_vals[0]

                                                    sub_sub_split_vals = re.split(r"(?<!\\)\>", sub_stat)
                                                    if len(sub_sub_split_vals) == 1:
                                                        over_stat = None
                                                        sub_stat = unescape_string(sub_sub_split_vals[0])
                                                    else:
                                                        over_stat = sub_sub_split_vals[0]
                                                        sub_stat = unescape_string(sub_sub_split_vals[1])
                                                    
                                                    sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "over_stat" : over_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "over_stat" : over_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                        except Exception:
                                            time_frame_obj = None
                                            stat_quals = None
                                            levels = re.split(r"(?<!\\)\-", split_vals[1])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                                stat_quals = None
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[1])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = sub_split_vals[0]

                                                    sub_sub_split_vals = re.split(r"(?<!\\)\>", sub_stat)
                                                    if len(sub_sub_split_vals) == 1:
                                                        over_stat = None
                                                        sub_stat = unescape_string(sub_sub_split_vals[0])
                                                    else:
                                                        over_stat = sub_sub_split_vals[0]
                                                        sub_stat = unescape_string(sub_sub_split_vals[1])
                                                    
                                                    sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "over_stat" : over_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "over_stat" : over_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                    else:
                                        time_frame_obj = handle_stat_time_frame(split_vals[1])
                                        levels = re.split(r"(?<!\\)\-", split_vals[3])
                                        if len(levels) == 1:
                                            start_level = 1
                                            end_level = ordinal_to_number(levels[0])
                                        else:
                                            start_level = ordinal_to_number(levels[0])
                                            end_level = ordinal_to_number(levels[1])
                                        values = re.split(r"(?<!\\)\~", split_vals[2])
                                        stat_quals = []
                                        for value in values:
                                            sub_split_vals = re.split(r"(?<!\\)\=", value)
                                            sub_stat = sub_split_vals[0]

                                            sub_sub_split_vals = re.split(r"(?<!\\)\>", sub_stat)
                                            if len(sub_sub_split_vals) == 1:
                                                over_stat = None
                                                sub_stat = unescape_string(sub_sub_split_vals[0])
                                            else:
                                                over_stat = sub_sub_split_vals[0]
                                                sub_stat = unescape_string(sub_sub_split_vals[1])
                                            
                                            sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                            if len(sub_split_vals) == 1:
                                                start_val = ordinal_to_number(sub_split_vals[0])
                                                if start_val > 0:
                                                    end_val = float("inf")
                                                elif start_val < 0:
                                                    end_val = start_val
                                                    start_val = -float("inf")
                                                else:
                                                    end_val = start_val
                                                stat_quals.append({
                                                    "stat" : sub_stat,
                                                    "over_stat" : over_stat,
                                                    "start_val" : start_val,
                                                    "end_val" : end_val
                                                })
                                            else:
                                                stat_quals.append({
                                                    "stat" : sub_stat,
                                                    "over_stat" : over_stat,
                                                    "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                    "end_val" : ordinal_to_number(sub_split_vals[1])
                                                })

                                    qualifier_obj["values"].append({
                                        "start_level" : start_level,
                                        "end_level" : end_level,
                                        "stat_quals" : stat_quals,
                                        "time_frame" : time_frame_obj,
                                        "stats" : stats
                                    })
                                    
                            if qual_type:
                                if "Time Zone" in qual_type:
                                    new_values = []
                                    for old_time_zone in qualifier_obj["values"]:
                                        new_values.append(old_time_zone.lower().replace("_", ""))
                                    qualifier_obj["values"] = new_values
                                    
                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_matches = list(re.finditer(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?(?:season(?:[- ]))?(games?|weeks?)", time_frame))
                        start_match = False
                        sub_last_match = re.search(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)( ([\w-]+)( reversed?)?)?", time_frame)
                        if ("Start" in qualifiers or playoffs != "Only") and (not sub_last_match or sub_last_match.group(3).endswith("to") or sub_last_match.group(3).endswith("yester")):
                            last_matches += list(re.finditer(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past) ?(\S*)", time_frame))
                            start_match = True
                        for last_match in last_matches:
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester") and (last_match.group(2) or not re.search(r"(no(?:t|n)?(?: |-))?((?:season(?:[- ]))?games?|weeks?) ([\w-]+)( reversed?)?", time_frame)) and (start_match or "week" not in last_match.group(4) or not re.search(r"(no(?:t|n)?(?: |-))?(?:(?:calendar|date)(?: |-))weeks?", time_frame)):
                                compare_type = last_match.group(2)
                                skip_time = False
                                if not compare_type or not compare_type.strip():
                                    if last_match.group(3) == "first" or last_match.group(3) == "1st" or last_match.group(3) == "this" or last_match.group(3) == "past" or last_match.group(3) == "last":
                                        compare_type = last_match.group(3)
                                        skip_time = True
                                    else:
                                        compare_type = "special"

                                if compare_type == "1st":
                                    compare_type = "first"

                                if not skip_time:
                                    time_unit = last_match.group(3)
                                    if time_unit and "season" not in time_unit:
                                        time_unit = ordinal_to_number(time_unit)
                                        if time_unit < 1:
                                            time_unit = 1
                                    else:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                
                                if len(last_match.groups()) == 4 and "week" in last_match.group(4):
                                    compare_unit = "Weeks"
                                    if compare_type == "last" and not current_week:
                                        current_week = get_current_week()
                                else:
                                    compare_unit = "Games"
                                    if "season" in last_match.group(0):
                                        compare_unit = "Season Games"

                                if compare_type == "special":
                                    qual_type = "Week" if compare_unit == "Weeks" else "Career Game"
                                    qualifier_obj = {}
                                    qualifier_obj["negate"] = bool(last_match.group(1))
                                    qualifier_obj["values"] = {
                                        "start_val" : time_unit,
                                        "end_val" : time_unit
                                    }
                                    if not qual_type in qualifiers:
                                        qualifiers[qual_type] = []
                                    qualifiers[qual_type].append(qualifier_obj)
                                else:
                                    if not compare_unit in qualifiers:
                                        qualifiers[compare_unit] = []

                                    qualifiers[compare_unit] = {
                                        "compare_type" : compare_type,
                                        "time_unit" : time_unit,
                                        "current_week" : current_week,
                                        "negate" : bool(last_match.group(1))
                                    }

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_matches = re.finditer(r"(no(?:t|n)?(?: |-))?((?:season(?:[- ]))?games?|weeks?) ([\w-]+)( reversed?)?", time_frame)
                        for last_match in last_matches:
                            time_unit = re.split(r"(?<!\\)-", last_match.group(2))
                            if len(time_unit) == 1:
                                time_start = ordinal_to_number(time_unit[0])
                                time_end = ordinal_to_number(time_unit[0])
                            else:
                                time_start = ordinal_to_number(time_unit[0])
                                time_end = ordinal_to_number(time_unit[1])

                            qual_type = "Week" if "week" in last_match.group(2) else "Games"
                            if "season" in last_match.group(0):
                                qual_type = "Season Games"

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            
                            reverse = False
                            if last_match.group(3):
                                reverse = True

                            if qual_type == "Week":
                                qualifier_obj = {}
                                qualifier_obj["negate"] = False
                                qualifier_obj["values"] =  {
                                    "start_val" : time_start,
                                    "end_val" : time_end,
                                    "negate" : bool(last_match.group(1))
                                }
                                qualifiers[qual_type].append(qualifier_obj)
                            else:
                                qualifiers[qual_type] = {
                                    "start_val" : time_start,
                                    "end_val" : time_end,
                                    "reverse" : reverse,
                                    "negate" : bool(last_match.group(1))
                                }

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_matches = re.finditer(r"(no(?:t|n)?(?: |-))(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)( ([\w-]+)( reversed?)?)?", time_frame)
                        for last_match in last_matches:
                            unit = None
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester"):
                                compare_type = last_match.group(2)
                                if not compare_type or not compare_type.strip():
                                    if unit == "season" or (last_match.group(4) and (last_match.group(4).startswith("season") or last_match.group(3).startswith("year"))):
                                        compare_type = "special"
                                    else:
                                        compare_type = "last"

                                if compare_type == "1st":
                                    compare_type = "first"

                                time_unit = last_match.group(3)
                                if time_unit and not ("calendar" in time_unit or "date" in time_unit):
                                    time_unit = ordinal_to_number(time_unit)
                                    if time_unit < 1:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                if not unit:
                                    unit = last_match.group(4)
                                if ("calendar" in last_match.group(3) or "date" in last_match.group(3)):
                                    unit = last_match.group(3) + unit
                                if unit.startswith("season"):
                                    if len(last_match.groups()) > 3 and last_match.group(6):
                                        time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                        if len(time_unit) == 1:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[0])
                                        else:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[1])
                                    else:
                                        if compare_type == "first":
                                            time_start = time_unit
                                        else:
                                            time_end = time_unit
                                else:
                                    days = 0
                                    weeks = 0
                                    months = 0
                                    years = 0

                                    is_seasons = False
                                    if "week" in unit:
                                        weeks = time_unit
                                    elif "month" in unit:
                                        months = time_unit
                                    elif "year" in unit:
                                        if "date" in unit or "calendar" in unit:
                                            years = time_unit
                                        else:
                                            if len(last_match.groups()) > 3 and last_match.group(6):
                                                time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                                time_start = -float("inf")
                                                time_end = float("inf")
                                                if len(time_unit) == 1:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[0])
                                                else:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[1])
                                            else:
                                                if compare_type == "first":
                                                    time_start = time_unit
                                                else:
                                                    time_end = time_unit
                                            is_seasons = True
                                    else:
                                        days = time_unit

                                    if not is_seasons:
                                        if compare_type == "first":
                                            time_start = datetime.date.min
                                            time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)

                                            if "week" in unit:
                                                time_end.seconds = 1
                                                time_end.minutes = weeks
                                            elif "month" in unit:
                                                time_end.seconds = 2
                                                time_end.minutes = months
                                            elif "year" in unit:
                                                time_end.seconds = 3
                                                time_end.minutes = years
                                            else:
                                                time_end.minutes = days

                                            if "calendar" in unit:
                                                time_end.microseconds = 1
                                        else:
                                            time_end = datetime.date.today()
                                            if "calendar" in unit:
                                                if "week" in unit:
                                                    time_end = time_end + datetime.timedelta(days=6 - time_end.weekday())
                                                    if datetime.date.today().weekday() <= 3:
                                                        time_end -= dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                elif "month" in unit:
                                                    if datetime.date.today().day > 15:
                                                        time_end = datetime.datetime(time_end.year, time_end.month, calendar.monthrange(time_end.year, time_end.month)[1]).date()
                                                    else:
                                                        if time_end.month == 1:
                                                            time_end = datetime.datetime(time_end.year - 1, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                        else:
                                                            time_end = datetime.datetime(time_end.year, time_end.month - 1, calendar.monthrange(time_end.year, time_end.month - 1)[1]).date()
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    original_day = time_start.day
                                                    time_start = time_start.replace(day=1)
                                                    if original_day > 15:
                                                        if time_start.month == 12:
                                                            time_start = time_start.replace(month=1, year=time_start.year + 1)
                                                        else:
                                                            time_start = time_start.replace(month=(time_start.month + 1))
                                                elif "year" in unit:
                                                    time_end = datetime.datetime(time_end.year, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                    if datetime.date.today().month <= 6:
                                                        time_end -=- dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                else:
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                            else:
                                                time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                
                                qualifier_obj = {}
                                qualifier_obj["negate"] = True
                                qual_str = "Season Index" if (unit.startswith("season") or time_frame_type == "special-qual") else "Dates"
                                if qual_str == "Season Index":
                                    qual_str = "Season Index Reversed" if time_start == None and compare_type != "special" else "Season Index"
                                    if not time_start or not time_end:    
                                        time_end = time_start if time_start else time_end
                                        if compare_type != "special":
                                            time_start = 1
                                        else:
                                            time_start = time_end
                                    qualifier_obj["values"] = {
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }
                                else:
                                    qualifier_obj["values"] = [{
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }]

                                if not qual_str in qualifiers:
                                    qualifiers[qual_str] = []
                                qualifiers[qual_str].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_matches = re.finditer(r"(no(?:t|n)?(?: |-))(first|1st|last|this|past) ?(\S*)", time_frame)
                        for last_match in last_matches:
                            unit = "season"
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester") and playoffs == "Only":
                                time_frame_type = "special-qual"
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester"):
                                compare_type = last_match.group(2)
                                if not compare_type or not compare_type.strip():
                                    if unit == "season" or (last_match.group(4) and (last_match.group(4).startswith("season") or last_match.group(3).startswith("year"))):
                                        compare_type = "special"
                                    else:
                                        compare_type = "last"

                                if compare_type == "1st":
                                    compare_type = "first"

                                time_unit = last_match.group(3)
                                if time_unit and not ("calendar" in time_unit or "date" in time_unit):
                                    time_unit = ordinal_to_number(time_unit)
                                    if time_unit < 1:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                if not unit:
                                    unit = last_match.group(4)
                                if ("calendar" in last_match.group(3) or "date" in last_match.group(3)):
                                    unit = last_match.group(3) + unit
                                if unit.startswith("season"):
                                    if len(last_match.groups()) > 3 and last_match.group(6):
                                        time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                        if len(time_unit) == 1:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[0])
                                        else:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[1])
                                    else:
                                        if compare_type == "first":
                                            time_start = time_unit
                                        else:
                                            time_end = time_unit
                                else:
                                    days = 0
                                    weeks = 0
                                    months = 0
                                    years = 0

                                    is_seasons = False
                                    if "week" in unit:
                                        weeks = time_unit
                                    elif "month" in unit:
                                        months = time_unit
                                    elif "year" in unit:
                                        if "date" in unit or "calendar" in unit:
                                            years = time_unit
                                        else:
                                            if len(last_match.groups()) > 3 and last_match.group(6):
                                                time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                                time_start = -float("inf")
                                                time_end = float("inf")
                                                if len(time_unit) == 1:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[0])
                                                else:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[1])
                                            else:
                                                if compare_type == "first":
                                                    time_start = time_unit
                                                else:
                                                    time_end = time_unit
                                            is_seasons = True
                                    else:
                                        days = time_unit

                                    if not is_seasons:
                                        if compare_type == "first":
                                            time_start = datetime.date.min
                                            time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)

                                            if "week" in unit:
                                                time_end.seconds = 1
                                                time_end.minutes = weeks
                                            elif "month" in unit:
                                                time_end.seconds = 2
                                                time_end.minutes = months
                                            elif "year" in unit:
                                                time_end.seconds = 3
                                                time_end.minutes = years
                                            else:
                                                time_end.minutes = days

                                            if "calendar" in unit:
                                                time_end.microseconds = 1
                                        else:
                                            time_end = datetime.date.today()
                                            if "calendar" in unit:
                                                if "week" in unit:
                                                    time_end = time_end + datetime.timedelta(days=6 - time_end.weekday())
                                                    if datetime.date.today().weekday() <= 3:
                                                        time_end -= dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                elif "month" in unit:
                                                    if datetime.date.today().day > 15:
                                                        time_end = datetime.datetime(time_end.year, time_end.month, calendar.monthrange(time_end.year, time_end.month)[1]).date()
                                                    else:
                                                        if time_end.month == 1:
                                                            time_end = datetime.datetime(time_end.year - 1, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                        else:
                                                            time_end = datetime.datetime(time_end.year, time_end.month - 1, calendar.monthrange(time_end.year, time_end.month - 1)[1]).date()
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    original_day = time_start.day
                                                    time_start = time_start.replace(day=1)
                                                    if original_day > 15:
                                                        if time_start.month == 12:
                                                            time_start = time_start.replace(month=1, year=time_start.year + 1)
                                                        else:
                                                            time_start = time_start.replace(month=(time_start.month + 1))
                                                elif "year" in unit:
                                                    time_end = datetime.datetime(time_end.year, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                    if datetime.date.today().month <= 6:
                                                        time_end -=- dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                else:
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                            else:
                                                time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                
                                qualifier_obj = {}
                                qualifier_obj["negate"] = True
                                qual_str = "Season Index" if (unit.startswith("season") or time_frame_type == "special-qual") else "Dates"
                                if qual_str == "Season Index":
                                    qual_str = "Season Index Reversed" if time_start == None and compare_type != "special" else "Season Index"
                                    if not time_start or not time_end:
                                        time_end = time_start if time_start else time_end
                                        if compare_type != "special":
                                            time_start = 1
                                        else:
                                            time_start = time_end
                                    qualifier_obj["values"] = {
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }
                                else:
                                    qualifier_obj["values"] = [{
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }]

                                if not qual_str in qualifiers:
                                    qualifiers[qual_str] = []
                                qualifiers[qual_str].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        time_frame_type = "date"
                        if not time_frame:
                            time_start = datetime.date.min.year
                            time_end = current_season
                        else:
                            unit = None
                            last_match = re.search(r"(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)( ([\w-]+)( reversed?)?)?", time_frame)
                            if not last_match:
                                last_match = re.search(r"(first|1st|last|this|past) ?(\S*)", time_frame)
                                unit = "season"
                                if last_match and not last_match.group(2).endswith("to") and not last_match.group(2).endswith("yester") and playoffs == "Only":
                                    time_frame_type = "special-qual"
                            if last_match and not last_match.group(2).endswith("to") and not last_match.group(2).endswith("yester"):
                                compare_type = last_match.group(1)
                                if not compare_type or not compare_type.strip():
                                    if unit == "season" or (last_match.group(3) and (last_match.group(3).startswith("season") or last_match.group(3).startswith("year"))):
                                        compare_type = "special"
                                    else:
                                        compare_type = "last"

                                if compare_type == "1st":
                                    compare_type = "first"

                                time_unit = last_match.group(2)
                                if time_unit and not ("calendar" in time_unit or "date" in time_unit):
                                    time_unit = ordinal_to_number(time_unit)
                                    if time_unit < 1:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                if not unit:
                                    unit = last_match.group(3)
                                if ("calendar" in last_match.group(2) or "date" in last_match.group(2)):
                                    unit = last_match.group(2) + unit
                                if unit.startswith("season"):
                                    if len(last_match.groups()) > 2 and last_match.group(5):
                                        time_unit = re.split(r"(?<!\\)-", last_match.group(5))
                                        if len(time_unit) == 1:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[0])
                                        else:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[1])

                                        if time_frame_type != "special-qual":
                                            time_frame_type = "season-range"
                                            if last_match.group(6):
                                                time_frame_type = "season-range-reversed"
                                    else:
                                        if time_frame_type != "special-qual":
                                            time_frame_type = "season"
                                        if compare_type == "first":
                                            time_start = time_unit
                                        else:
                                            time_end = time_unit
                                else:
                                    days = 0
                                    weeks = 0
                                    months = 0
                                    years = 0

                                    is_seasons = False
                                    if "week" in unit:
                                        weeks = time_unit
                                    elif "month" in unit:
                                        months = time_unit
                                    elif "year" in unit:
                                        if "date" in unit or "calendar" in unit:
                                            years = time_unit
                                        else:
                                            if len(last_match.groups()) > 2 and last_match.group(5):
                                                time_unit = re.split(r"(?<!\\)-", last_match.group(5))
                                                time_start = -float("inf")
                                                time_end = float("inf")
                                                if len(time_unit) == 1:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[0])
                                                else:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[1])

                                                time_frame_type = "season-range"
                                                if last_match.group(6):
                                                    time_frame_type = "season-range-reversed"
                                            else:
                                                time_frame_type = "season"
                                                if compare_type == "first":
                                                    time_start = time_unit
                                                else:
                                                    time_end = time_unit
                                            is_seasons = True
                                    else:
                                        days = time_unit

                                    if not is_seasons:
                                        if compare_type == "first":
                                            time_start = datetime.date.min
                                            time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)

                                            if "week" in unit:
                                                time_end.seconds = 1
                                                time_end.minutes = weeks
                                            elif "month" in unit:
                                                time_end.seconds = 2
                                                time_end.minutes = months
                                            elif "year" in unit:
                                                time_end.seconds = 3
                                                time_end.minutes = years
                                            else:
                                                time_end.minutes = days

                                            if "calendar" in unit:
                                                time_end.microseconds = 1
                                        else:
                                            time_end = datetime.date.today()
                                            if "calendar" in unit:
                                                if "week" in unit:
                                                    time_end = time_end + datetime.timedelta(days=6 - time_end.weekday())
                                                    if datetime.date.today().weekday() <= 3:
                                                        time_end -= dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                elif "month" in unit:
                                                    if datetime.date.today().day > 15:
                                                        time_end = datetime.datetime(time_end.year, time_end.month, calendar.monthrange(time_end.year, time_end.month)[1]).date()
                                                    else:
                                                        if time_end.month == 1:
                                                            time_end = datetime.datetime(time_end.year - 1, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                        else:
                                                            time_end = datetime.datetime(time_end.year, time_end.month - 1, calendar.monthrange(time_end.year, time_end.month - 1)[1]).date()
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    original_day = time_start.day
                                                    time_start = time_start.replace(day=1)
                                                    if original_day > 15:
                                                        if time_start.month == 12:
                                                            time_start = time_start.replace(month=1, year=time_start.year + 1)
                                                        else:
                                                            time_start = time_start.replace(month=(time_start.month + 1))
                                                elif "year" in unit:
                                                    time_end = datetime.datetime(time_end.year, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                    if datetime.date.today().month <= 6:
                                                        time_end -=- dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                else:
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                            else:
                                                time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                
                                if compare_type == "special" and time_frame_type == "season":
                                    time_frame_type = "season-range"
                                
                                if time_frame_type == "special-qual":
                                    time_frame_type = "season"

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                            if time_frame:
                                replace_first_year = {
                                    "replace" : False
                                }

                                while True:
                                    m = re.search(r"no(?:t|n)?(?: |-)(.+)(?=no(?:t|n)?(?: |-)(?:.+))", time_frame)
                                    if not m:
                                        m = re.search(r"no(?:t|n)?(?: |-)(.+)", time_frame)
                                    if not m:
                                        break

                                    date_str = m.group(1)
                                    find_all_match = tuple(re.finditer(r"(?<!\\)-", date_str))
                                    if len(find_all_match) == 5:
                                        match_span = find_all_match[2].span()[0]
                                        time_frame_range = [date_str[:match_span], date_str[match_span + 1:]]
                                    else:
                                        time_frame_range = re.split(r"(?<!\\)\bto\b", date_str)
                                    try:
                                        sub_time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)
                                    except ValueError:
                                        time_frame_range = re.split(r"(?<!\\)-", date_str)
                                        sub_time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)

                                    if len(time_frame_range) == 2:
                                        sub_time_end = handle_string_year(time_frame_range[1].strip(), False, replace_first_year)
                                    else:
                                        sub_time_end = sub_time_start
                                    
                                    if isinstance(sub_time_start, int) and not isinstance(sub_time_end, int):
                                        sub_time_start = datetime.date(year=sub_time_start, month=1, day=1)
                                    elif isinstance(sub_time_end, int) and not isinstance(sub_time_start, int):
                                        sub_time_end = datetime.date(year=sub_time_end, month=12, day=31)

                                    qualifier_obj = {}
                                    qualifier_obj["negate"] = True
                                    qual_str = "Year" if isinstance(sub_time_start, int) else "Dates"
                                    if qual_str == "Year":
                                        qualifier_obj["values"] = {
                                            "start_val" : sub_time_start,
                                            "end_val" : sub_time_end
                                        }
                                    else:
                                        qualifier_obj["values"] = [{
                                            "start_val" : sub_time_start,
                                            "end_val" : sub_time_end
                                        }]

                                    if not qual_str in qualifiers:
                                        qualifiers[qual_str] = []
                                    qualifiers[qual_str].append(qualifier_obj)

                                    time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                                
                                time_start = datetime.date.min.year
                                time_end = current_season

                                if time_frame:
                                    find_all_match = tuple(re.finditer(r"(?<!\\)-", time_frame))
                                    if len(find_all_match) == 5:
                                        match_span = find_all_match[2].span()[0]
                                        time_frame_range = [time_frame[:match_span], time_frame[match_span + 1:]]
                                    else:
                                        time_frame_range = re.split(r"(?<!\\)\bto\b", time_frame)
                                    try:
                                        time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)
                                    except ValueError:
                                        time_frame_range = re.split(r"(?<!\\)-", time_frame)
                                        time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)

                                    if len(time_frame_range) == 2:
                                        time_end = handle_string_year(time_frame_range[1].strip(), False, replace_first_year)
                                    else:
                                        time_end = time_start
                                        if not isinstance(time_start, int):
                                            if not playoffs:
                                                playoffs = "Include"
                                    
                                    if isinstance(time_start, int) and not isinstance(time_end, int):
                                        time_start = datetime.date(year=time_start, month=1, day=1)
                                    elif isinstance(time_end, int) and not isinstance(time_start, int):
                                        time_end = datetime.date(year=time_end, month=12, day=31)

                        da_time_frames.append({
                            "time_start" : time_start,
                            "time_end" : time_end,
                            "type" : time_frame_type,
                            "add_type" : add_type, 
                            "playoffs" : playoffs if playoffs != "No" else None,
                            "qualifiers" : qualifiers
                        })
                    sub_parsed_time_frames.append(da_time_frames)
                parse_time_frames.append(sub_parsed_time_frames)
        else:
            parse_time_frames.append([[{
                "time_start" : datetime.date.min.year,
                "time_end" : current_season,
                "type" : "date",
                "playoffs" : None,
                "add_type" : "plus",
                "qualifiers" : []
            }]])
    except BaseException as e:
        if isinstance(e, get_constant_data.CustomMessageException):
            raise e
        else: 
            raise get_constant_data.CustomMessageException("Invalid query format!")

    if "hide-advanced" in extra_stats and "current-stats" in extra_stats:
        extra_stats.remove("current-stats")

    best_games_table = 0
    worst_games_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-game"):
            if "-" in extra_stat:
                best_games_table = int(extra_stat.split("-")[2])
            else:
                best_games_table = 1
        elif extra_stat.startswith("worst-game"):
            if "-" in extra_stat:
                worst_games_table = int(extra_stat.split("-")[2])
            else:
                worst_games_table = 1

    if remove_duplicates or remove_duplicate_games or "score" in extra_stats or "record" in extra_stats or "current-stats" in extra_stats or "ats-record" in extra_stats or "ou-record" in extra_stats or "game" in extra_stats or best_games_table or worst_games_table:
        for subb_frame in parse_time_frames:
            for subbb_frame in subb_frame:
                for time_frame in subbb_frame:
                    time_frame["qualifiers"]["Force Dates"] = [{
                        "negate" : False
                    }]

    while len(names) < len(parse_time_frames):
        names.append(names[len(names) - 1])

    while len(parse_time_frames) < len(names):
        parse_time_frames.append(copy.deepcopy(parse_time_frames[len(parse_time_frames) - 1]))

    for index, subb_name in enumerate(names):
        subb_frame = parse_time_frames[index]
        subb_names = re.split(r"(?<!\\)\+", subb_name.strip())
        while len(subb_names) < len(subb_frame):
            subb_names.append(subb_names[len(subb_names) - 1])

        while len(subb_frame) < len(subb_names):
            subb_frame.append(copy.deepcopy(subb_frame[len(subb_frame) - 1]))

    parsed_game_quals = set()

    name_count = sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
    sub_name_count = 0
    player_str_set = set()
    for index, subb_date in enumerate(parse_time_frames):
        for subbbb_index, subbb_date in enumerate(subb_date):
            subb_names_with = []
            subb_names_against = []
            sub_matching_names = []
            for sub_index, sub_name in enumerate(names):
                sub_names_split = re.split(r"(?<!\\)\+", sub_name.strip())
                for subbbbbbb_index, subbb_name in enumerate(sub_names_split):
                    if len(sub_names_split) > 1:
                        if sub_index == index:
                            if subbbbbbb_index != subbbb_index:
                                subb_names_with.append(subbb_name)
                            else:
                                sub_matching_names.append(subbb_name)
                        else:
                            subb_names_against.append(subbb_name)
                    else:
                        if sub_index != index or subbbbbbb_index != subbbb_index:
                            subb_names_with.append(subbb_name)
                            subb_names_against.append(subbb_name)
                        else:
                            sub_matching_names.append(subbb_name)
            for subbbb_date in subbb_date:
                if "Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Previous Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Previous Playing With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Previous Playing With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Previous Playing Against" in subbbb_date["qualifiers"]:
                   for qual in subbbb_date["qualifiers"]["Previous Playing Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Previous Playing Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Upcoming Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Upcoming Playing With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Upcoming Playing With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Upcoming Playing Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Upcoming Playing Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Upcoming Playing Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Game" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Game"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Same Game")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Opponents" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Opponents"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Same Opponents")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Date" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Date"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Same Date")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Thrown To" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Thrown To"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Thrown To")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
            name_count += len(subbb_date) - 1

    if name_count > 30:
        raise get_constant_data.CustomMessageException("You can only compare a max of 30 players!")

    if sub_name_count > 30:
        raise CustomMessageException("You can only have a max of 30 sub-players!")

    years_table = "year" in extra_stats
    years_table_career = "career-year" in extra_stats
    games_table = "game" in extra_stats
    games_table_career = "career-game" in extra_stats
    teams_table = "team" in extra_stats
    teams_table_career = "career-team" in extra_stats
    franchise_table = "franchise" in extra_stats
    franchise_table_career = "career-franchise" in extra_stats
    numbers_table = "number" in extra_stats
    numbers_table_career = "career-number" in extra_stats

    if comment_obj:
        comment_obj["total_players"] = name_count
        try:
            string_output = format_alert_message(comment_obj, False)
            if not comment_obj["debug_mode"]:
                if not comment_obj["reply"]:
                    if not comment_obj["is_approved"]:
                        comment_obj["comment"].author.message("NFLCompareBot Comparison " + comment_obj["comment"].id, string_output)
                    else:
                        comment_obj["reply"] = comment_obj["comment"].reply(string_output)
                logger.info("#" + str(threading.get_ident()) + "#   User alerted")
        except Exception:
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
    
    if player_type["da_type"] == None:
        player_type["da_type"] = get_init_type(names, player_type, parse_time_frames)

    handle_against_qual(names, parse_time_frames, comment_obj)
    handle_same_games_qual(names, player_type, parse_time_frames, comment_obj)

    player_datas = []
    arguments = []
    for index, sub_name in enumerate(names):
        arguments.append([sub_name, parse_time_frames, index, player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj])
    with multiprocessing.Pool(processes=multiprocessing.cpu_count()) as pool:
        sub_player_datas = pool.starmap(handle_name_threads, arguments)
        for sub_player_data in sub_player_datas:
            player_datas += sub_player_data
    # with ThreadPoolExecutor(max_workers=5) as sub_executor:
    #     futures = []
    #     for index, sub_name in enumerate(names):
    #         futures.append(sub_executor.submit(handle_name_threads, sub_name, parse_time_frames, index, player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj))
    #     for future in concurrent.futures.as_completed(futures):
    #         player_datas += future.result()
    # for index, sub_name in enumerate(names):
    #     player_datas += handle_name_threads(sub_name, parse_time_frames, index, player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)

    for player_data in player_datas:
        if player_data["stat_values"]["Shared"]["LastUpdated"] and (not last_updated or player_data["stat_values"]["Shared"]["LastUpdated"] < last_updated):
            last_updated = player_data["stat_values"]["Shared"]["LastUpdated"]

    if not player_type["da_type"]:
        player_type["da_type"] = "QB"

    player_datas.sort(key=lambda player_data: player_data["sort_index"])

    if years_table or years_table_career or games_table or teams_table or teams_table_career or franchise_table or franchise_table_career or numbers_table or numbers_table_career:
        datas_by_index = {}
        for player_data in player_datas:
            if player_data["sort_index"] not in datas_by_index:
                datas_by_index[player_data["sort_index"]] = []
            datas_by_index[player_data["sort_index"]].append(player_data)
        max_value = max(len(datas_by_index[index]) for index in datas_by_index)
        player_datas = []
        for index in range(0, max_value + 1):
            for sub_index in datas_by_index:
                if len(datas_by_index[sub_index]) > index:
                    player_datas.append(datas_by_index[sub_index][index])
    
    return player_datas, last_updated, original_comment, hide_table, is_fantasy, extra_stats

def get_init_type(names, player_type, time_frames):
    for index, sub_name in enumerate(names):
        sub_names = re.split(r"(?<!\\)\+", sub_name.strip())
        for sub_index, name in enumerate(sub_names):
            real_index = sub_index if len(time_frames[index]) > sub_index else len(time_frames[index]) - 1
            player_id, player_page = get_player(name, player_type, time_frames[index][real_index])
            if player_id and player_page:
                return get_player_type(player_page)

def handle_name_threads(sub_name, parse_time_frames, index, player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj):
    try:
        player_datas = []

        years_table = "year" in extra_stats
        years_table_career = "career-year" in extra_stats
        games_table = "game" in extra_stats
        games_table_career = "career-game" in extra_stats
        teams_table = "team" in extra_stats
        teams_table_career = "career-team" in extra_stats
        franchise_table = "franchise" in extra_stats
        franchise_table_career = "career-franchise" in extra_stats
        numbers_table = "number" in extra_stats
        numbers_table_career = "career-number" in extra_stats
        best_table = 0
        worst_table = 0
        for extra_stat in extra_stats:
            if extra_stat.startswith("best-season"):
                if len(extra_stat.split("-")) == 3:
                    best_table = int(extra_stat.split("-")[2])
                else:
                    best_table = 1
            elif extra_stat.startswith("worst-season"):
                if len(extra_stat.split("-")) == 3:
                    worst_table = int(extra_stat.split("-")[2])
                else:
                    worst_table = 1
        best_games_table = 0
        worst_games_table = 0
        for extra_stat in extra_stats:
            if extra_stat.startswith("best-game"):
                if len(extra_stat.split("-")) == 3:
                    best_games_table = int(extra_stat.split("-")[2])
                else:
                    best_games_table = 1
            elif extra_stat.startswith("worst-game"):
                if len(extra_stat.split("-")) == 3:
                    worst_games_table = int(extra_stat.split("-")[2])
                else:
                    worst_games_table = 1
        
        sub_names = re.split(r"(?<!\\)\+", sub_name.strip())
        player_data, sub_player_datas = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)

        if (years_table or years_table_career) and "all_rows" in player_data["stat_values"]["Shared"] and player_data["stat_values"]["Shared"]["all_rows"]:
            seasons = sorted(list(set([row["Shared"]["Year"] for row in player_data["stat_values"]["Shared"]["all_rows"]])))
            if len(seasons) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(seasons) * len(parse_time_frames[index]) * len(sub_names)
                    
                for season in seasons:
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["time_start"] = season
                            time_frame["time_end"] = season
                            time_frame["type"] = "date"
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                years_table = False
                years_table_career = False
            
        if (best_table or worst_table) and "all_rows" in player_data["stat_values"]["Shared"] and player_data["stat_values"]["Shared"]["all_rows"]:
            import numbers
            if player_type["da_type"]:
                for header in get_constant_data.stat_groups["Shared"]:
                    if header != "Player":
                        if isinstance(player_data["stat_values"]["Shared"][header], numbers.Number):
                            player_data["stat_values"]["Shared"][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"]["Shared"][header] = ""

                for over_header in headers[player_type["da_type"]]:
                    if not over_header in player_data["stat_values"]:
                        player_data["stat_values"][over_header] = {}
                    for header in get_constant_data.stat_groups[over_header]:
                        if isinstance(player_data["stat_values"][over_header][header], numbers.Number):
                            player_data["stat_values"][over_header][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"][over_header][header] = ""

            seasons = calculate_chunks(sorted(list(set([row["Shared"]["Year"] for row in player_data["stat_values"]["Shared"]["all_rows"]]))), best_table if best_table else worst_table)
            if comment_obj:
                comment_obj["total_players"] += len(seasons) * len(parse_time_frames[index]) * len(sub_names)
                
            season_player_datas = []
            for season in seasons:
                clear_time_frames(parse_time_frames[index])
                for subbb_frames in parse_time_frames[index]:
                    for time_frame in subbb_frames:
                        time_frame["time_start"] = season[0]
                        time_frame["time_end"] = season[len(season) - 1]
                        time_frame["type"] = "date"
                sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                season_player_datas.append(sub_player_data)
            combined_datas = calculate_best(player_data, season_player_datas, player_type, is_fantasy, extra_stats, best_table)
            if combined_datas["stat_values"]["Shared"]["G"]:
                player_datas.append(combined_datas)
            else:
                best_table = False
                worst_table = False
        else:
            best_table = False
            worst_table = False
        
        if (teams_table or teams_table_career) and "all_rows" in player_data["stat_values"]["Shared"] and player_data["stat_values"]["Shared"]["all_rows"]:
            franchises = {}
            for row in player_data["stat_values"]["Shared"]["all_rows"]:
                year = str(row["Shared"]["Year"])
                team_franchise = row["Shared"]["Tm"]
                if team_franchise not in franchises:
                    franchises[team_franchise] = set()
                franchises[team_franchise].add(year)
            if len(franchises) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(franchises) * len(parse_time_frames[index]) * len(sub_names)
                    
                for team in sorted(franchises.items(), key=lambda item: len(item[1]), reverse=True):
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Team"] = [{
                                "negate" : False,
                                "values" : [
                                    team[0].lower()
                                ]
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                teams_table = False
                teams_table_career = False
        
        if (franchise_table or franchise_table_career) and "all_rows" in player_data["stat_values"]["Shared"] and player_data["stat_values"]["Shared"]["all_rows"]:
            franchises = {}
            for row in player_data["stat_values"]["Shared"]["all_rows"]:
                year = str(row["Shared"]["Year"])
                team_franchise = row["Shared"]["RawTm"]
                if team_franchise not in franchises:
                    franchises[team_franchise] = set()
                franchises[team_franchise].add(year)
            if len(franchises) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(franchises) * len(parse_time_frames[index]) * len(sub_names)
                    
                for team in sorted(franchises.items(), key=lambda item: len(item[1]), reverse=True):
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Team Franchise"] = [{
                                "negate" : False,
                                "values" : [
                                    team[0].lower()
                                ]
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                franchise_table = False
                franchise_table_career = False
        
        if numbers_table or numbers_table_career:
            numbers = []
            for sub_player_data in sub_player_datas:
                player_numbers = sorted(sub_player_data["player_all_numbers"], key=lambda num: num["start_year"])
                numbers += [number["number"] for number in player_numbers]
            numbers =  list(dict.fromkeys(numbers))
            if len(numbers) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(numbers) * len(parse_time_frames[index]) * len(sub_names)
                    
                for number in numbers:
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Number"] = [{
                                "negate" : False,
                                "values" : {
                                    "start_val" : number,
                                    "end_val" : number
                                }
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                numbers_table = False
                numbers_table_career = False
        
        if (games_table or games_table_career):
            rows_count = 0
            for subb_player_data in sub_player_datas:
                for row in subb_player_data["rows"]:
                    rows_count += 1
            
            if rows_count > 20:
                raise get_constant_data.CustomMessageException("Cannot show more than 20 games!")
            
            if rows_count > 1:
                for subb_player_data in sub_player_datas:
                    for row in subb_player_data["rows"]:
                        game_player_data = copy.copy(subb_player_data)
                        game_player_data["rows"] = [row]
                        game_player_data["DateStart"] = [row["Shared"]["Date"]]
                        game_player_data["DateEnd"] = [row["Shared"]["Date"]]
                        game_player_data["YearStart"] = [row["Shared"]["Year"]]
                        game_player_data["YearEnd"] = [row["Shared"]["Year"]]

                        sub_player_data = combine_player_datas([game_player_data], player_type, False, parse_time_frames[index], "add", remove_duplicates, remove_duplicate_games, extra_stats)
                        player_datas.append(sub_player_data)
            else:
                games_table = False
                games_table_career = False
        
        if (best_games_table or worst_games_table) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            import numbers
            if player_type["da_type"]:
                for header in get_constant_data.stat_groups["Shared"]:
                    if header != "Player":
                        if isinstance(player_data["stat_values"]["Shared"][header], numbers.Number):
                            player_data["stat_values"]["Shared"][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"]["Shared"][header] = ""

                for over_header in headers[player_type["da_type"]]:
                    if not over_header in player_data["stat_values"]:
                        player_data["stat_values"][over_header] = {}
                    for header in get_constant_data.stat_groups[over_header]:
                        if isinstance(player_data["stat_values"][over_header][header], numbers.Number):
                            player_data["stat_values"][over_header][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"][over_header][header] = ""

            game_player_datas = []
            for subb_player_data in sub_player_datas:
                rows = []
                for row in subb_player_data["rows"]:
                    rows.append(row)
                rows = calculate_chunks(rows, best_games_table if best_games_table else worst_games_table)
                for row in rows:
                    subbb_player_data = {
                        "ids" : [subb_player_data["id"]],
                        "stat_values" : {
                            "Shared" : {
                                "YearStart" : subb_player_data["YearStart"],
                                "YearEnd" : subb_player_data["YearEnd"],
                                "DateStart" : subb_player_data["DateStart"],
                                "DateEnd" : subb_player_data["DateEnd"],
                                "Birthdays" : [subb_player_data["Birthday"]],
                                "Deathdays" : [subb_player_data["Deathday"]],
                                "is_playoffs" : subb_player_data["is_playoffs"],
                                "Player" : [subb_player_data["Player"]],
                                "Types" : [subb_player_data["Type"]],
                                "any_missing_games" : False,
                                "all_rows" : row
                            }
                        }
                    }
                    calculated_values = calculate_values(row, player_type, subbb_player_data, extra_stats)
                    for over_header in calculated_values["stat_values"]:
                        if not over_header in subbb_player_data["stat_values"]:
                            subbb_player_data["stat_values"][over_header] = {}

                        for stat in calculated_values["stat_values"][over_header]:
                            if stat not in subbb_player_data["stat_values"][over_header]:
                                subbb_player_data["stat_values"][over_header][stat] = calculated_values["stat_values"][over_header][stat]
                    game_player_datas.append(subbb_player_data)
            combined_datas = calculate_best(player_data, game_player_datas, player_type, is_fantasy, extra_stats, best_games_table)
            if combined_datas["stat_values"]["Shared"]["G"]:
                player_datas.append(combined_datas)
            else:
                best_games_table = False
                worst_games_table = False
        else:
            best_games_table = False
            worst_games_table = False

        clear_time_frames(parse_time_frames[index])

        if not games_table and not years_table and not teams_table and not franchise_table and not numbers_table and not best_table and not worst_table and not best_games_table and not worst_games_table:
            player_datas.append(player_data)
        
        for player_data in player_datas:
            player_data["sort_index"] = index
        
        return player_datas
    except urllib.error.URLError as err:
        logger.error(traceback.format_exc())
        raise urllib.error.URLError(err.reason)
    except Exception as err:
        logger.error(traceback.format_exc())
        raise err

def calculate_chunks(da_list, size):
    all_items = []
    for index, item in enumerate(da_list):
        sub_array = [item]
        if len(sub_array) == size:
            all_items.append(sub_array)
            continue
        for sub_index in range(index + 1, len(da_list)):
            sub_item = da_list[sub_index]
            sub_array.append(sub_item)
            if len(sub_array) == size:
                all_items.append(sub_array)
                break
    return all_items

def calculate_best(player_data, player_datas, player_type, is_fantasy, extra_stats, is_best):
    has_non_playoffs = False
    for sub_player_data in player_datas:
        if sub_player_data["stat_values"]["Shared"]["is_playoffs"] != "Only":
            has_non_playoffs = True
    
    error_getting_adj = False
    for player_data in player_datas:
        if player_data["error_getting_adj"]:
            error_getting_adj = True
            break

    highest_vals, lowest_vals = calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, is_fantasy, 0, error_getting_adj, extra_stats)
    if is_best:
        for over_header in highest_vals:
            for header in highest_vals[over_header]:
                player_data["stat_values"][over_header][header] = highest_vals[over_header][header]["original_value"]
    else:
        for over_header in lowest_vals:
            for header in lowest_vals[over_header]:
                player_data["stat_values"][over_header][header] = lowest_vals[over_header][header]["original_value"]
    
    return player_data

def get_current_week():
    request = urllib.request.Request(home_page, headers=request_headers)
    response, player_page = url_request(request)

    current_games_per_season = year_weeks_played[len(year_weeks_played) - 1]["weeks"]

    current_weeks = {}
    current_playoff_weeks = {}
    scores_container = player_page.find("div", id="scores")
    if scores_container:
        heading_container = scores_container.find("div", {"class" : "section_heading"})
        if heading_container:
            heading_text = heading_container.find(text=True)
            if heading_text and str(heading_text)[len(heading_text) - 1].isdigit():
                heading_text_split = str(heading_text).split()
                current_max_week = int(heading_text_split[len(heading_text_split) - 1]) - 1
                
                game_summaries = scores_container.find_all("div", {"class" : "game_summary"})
                for game_summary in game_summaries:
                    current_playoff_week = current_max_week
                    game_link = game_summary.find("td", {"class" : "gamelink"})
                    if game_link and str(game_link.text).strip() == "Final":
                        current_playoff_week += 1
                    
                    if current_playoff_week > current_games_per_season:
                        current_week = current_games_per_season
                    else:
                        current_week = current_playoff_week
                    
                    team_links = game_summary.find_all("a")
                    for team_link in team_links:
                        team_link_text = team_link["href"]
                        if team_link_text.startswith("/teams/"):
                            team = team_link_text.split("/")[2].upper()
                            current_weeks[team] = current_week
                            current_playoff_weeks[team] = current_playoff_week

    return {
        "regular_season" : current_weeks,
        "playoffs" : current_playoff_weeks
    }

def clear_time_frames(subb_frames):
    for subbb_frames in subb_frames:
        for time_frame in subbb_frames:
            for qualifier in time_frame["qualifiers"]:
                if qualifier == "Min Stat" or qualifier == "Max Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Max Stretch Formula" or qualifier == "Count Streak Formula" or qualifier == "Quickest" or qualifier == "Slowest" or qualifier == "Season Stat" or qualifier == "Previous Season Stat" or qualifier == "Upcoming Season Stat" or qualifier == "Total Games Stat" or qualifier == "Weeks":
                    if qualifier == "Weeks":
                        time_frame["qualifiers"][qualifier].pop("explain_str", None)
                    else:
                        for qual_obj in time_frame["qualifiers"][qualifier]:
                            for sub_qualifier in qual_obj["values"]:
                                sub_qualifier.pop("explain_str", None)

def handle_stat_time_frame(time_frame, hide_exceptions=False):
    match = re.match(r"\b(only-season-?(?:st-?)?(?:end-?)?)?(games?-start(?:~[\S]+)?|games?-end(?:~[\S]+)?|seasons?-end(?:~[\S]+)?|totalgames?(?:~[\S]+)?|days?(?:~[\S]+)?|weeks?(?:~[\S]+)?|months?(?:~[\S]+)?|years?(?:~[\S]+)?|calendarweeks?(?:~[\S]+)?|calendarmonths?(?:~[\S]+)?|calendaryears?(?:~[\S]+)?|games?(?:~[\S]+)?|seasons?(?:~[\S]+)?|teams?(?:~[\S]+)?|opponents?(?:~[\S]+)?|g-st(?:~[\S]+)?|tg(?:~[\S]+)?|s-st(?:~[\S]+)?|g-end(?:~[\S]+)?|s-end(?:~[\S]+)?|d(?:~[\S]+)?|w(?:~[\S]+)?|m(?:~[\S]+)?|y(?:~[\S]+)?|g(?:~[\S]+)?|s(?:~[\S]+)?|t(?:~[\S]+)?|o(?:~[\S]+)?)?", time_frame)
    
    qualifier = match.group(2)
    if not qualifier:
        if match.group(1):
            qualifier = "games"
        else:
            raise Exception("Invalid query: " + time_frame)
    
    if qualifier.startswith("d") or qualifier.startswith("day"):
        qual_type = "Days"
    elif qualifier.startswith("w") or qualifier.startswith("week"):
        qual_type = "Weeks"
    elif qualifier.startswith("m") or qualifier.startswith("month"):
        qual_type = "Months"
    elif qualifier.startswith("y") or qualifier.startswith("year"):
        qual_type = "Years"
    elif qualifier.startswith("calw") or qualifier.startswith("calendarweek"):
        qual_type = "Calendar-Weeks"
    elif qualifier.startswith("calm") or qualifier.startswith("calendarmonth"):
        qual_type = "Calendar-Months"
    elif qualifier.startswith("caly") or qualifier.startswith("calendaryear"):
        qual_type = "Calendar-Years"
    elif qualifier.startswith("g") or qualifier.startswith("game"):
        qual_type = "Games"
    elif qualifier.startswith("tg") or qualifier.startswith("totalgame"):
        qual_type = "Total Games"
    elif qualifier.startswith("s") or qualifier.startswith("season"):
        qual_type = "Seasons"
    elif qualifier.startswith("t") or qualifier.startswith("team"):
        qual_type = "Teams"
    elif qualifier.startswith("o") or qualifier.startswith("opponent"):
        qual_type = "Opponents"

    if match.group(1):
        qual_type = "Only-Season-" + qual_type
        if "st" in match.group(1):
            qual_type += "-Start"
        elif "end" in match.group(1):
            qual_type += "-End"

    if qualifier.endswith("-st"):
        qual_type += "-Start"
    elif qualifier.endswith("-end"):
         qual_type += "-End"

    qual_split = re.split(r"(?<!\\)\=", time_frame)
    if len(qual_split) > 1:
        raise Exception("Cant have = in query: " + time_frame)

    qual_split = re.split(r"(?<!\\)\~", qualifier)
    if len(qual_split) > 1:
        qual_nums = re.split(r"(?<!\\)\-", qual_split[1])
        if len(qual_nums) > 1:
            qual_num_start = ordinal_to_number(qual_nums[0])
            qual_num_end = ordinal_to_number(qual_nums[1])
        else:
            qual_num_start = ordinal_to_number(qual_nums[0])
            qual_num_end = ordinal_to_number(qual_nums[0])
    else:
        qual_num_start = 1
        qual_num_end = 1

    return {
        "qual_type" : qual_type,
        "qual_num_start" : qual_num_start,
        "qual_num_end" : qual_num_end
    }

def handle_against_qual(names, time_frames, comment_obj):
    players_map = {}
    for index, subb_frames in enumerate(time_frames):
        for subbbb_index, subbb_frames in enumerate(subb_frames):
            subb_names_with = []
            subb_names_against = []
            sub_matching_names = []
            for sub_index, sub_name in enumerate(names):
                sub_names_split = re.split(r"(?<!\\)\+", sub_name.strip())
                for subbbbbbb_index, subbb_name in enumerate(sub_names_split):
                    if len(sub_names_split) > 1:
                        if sub_index == index:
                            if subbbbbbb_index != subbbb_index:
                                subb_names_with.append(subbb_name)
                            else:
                                sub_matching_names.append(subbb_name)
                        else:
                            subb_names_against.append(subbb_name)
                    else:
                        if sub_index != index or subbbbbbb_index != subbbb_index:
                            subb_names_with.append(subbb_name)
                            subb_names_against.append(subbb_name)
                        else:
                            sub_matching_names.append(subbb_name)
            for time_frame in subbb_frames:
                if "Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map)
                if "Or Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Or Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map)
                if "Day Of Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Day Of Sub Query", sub_matching_names, time_frame, "Date", comment_obj, players_map)
                if "Day After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Day After Sub Query", sub_matching_names, time_frame, "DateAfter", comment_obj, players_map)
                if "Day Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Day Before Sub Query", sub_matching_names, time_frame, "DateBefore", comment_obj, players_map)
                if "Game After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Game After Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map)
                if "Game Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Game Before Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map)
                if "Season Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Season Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map)
                if "Or Season Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Or Season Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map)
                if "Season After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Season After Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map)
                if "Season Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Season Before Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map)
                if "Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map)
                if "Previous Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Previous Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map)
                if "Upcoming Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Upcoming Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map)
                if "Playing Same Game" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Same Game", subb_names_with, time_frame, "Either", comment_obj, players_map)
                if "Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map)
                if "Previous Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Previous Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map)
                if "Upcoming Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Upcoming Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map)
                if "Playing Same Opponents" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Same Opponents", subb_names_against, time_frame, "Same Opponent", comment_obj, players_map)
                if "Playing Same Date" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Same Date", subb_names_against, time_frame, "Date", comment_obj, players_map)
                if "Thrown To" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Thrown To", subb_names_with, time_frame, "Tm", comment_obj, players_map)

def handle_same_games_qual(names, player_type, time_frames, comment_obj):
    qual_map = {}
    for index, sub_name in enumerate(names):
        for subbb_frames in time_frames[index]:
            for time_frame in subbb_frames:
                if "First Games" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Games", subbb_frames, time_frame, player_type, "Games", True, comment_obj, qual_map)
                if "First Seasons" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Seasons", subbb_frames, time_frame, player_type, "Seasons", True, comment_obj, qual_map)
                if "Last Games" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Games", subbb_frames, time_frame, player_type, "Games", False, comment_obj, qual_map)
                if "Last Seasons" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Seasons", subbb_frames, time_frame, player_type, "Seasons", False, comment_obj, qual_map)
                if "Current Age" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Current Age", subbb_frames, time_frame, player_type, "Age", False, comment_obj, qual_map)
                if "Current Season Age" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Current Season Age", subbb_frames, time_frame, player_type, "Season Age", False, comment_obj, qual_map)
    
    for index, sub_name in enumerate(names):
        for subbb_frames in time_frames[index]:
            for time_frame in subbb_frames:
                for qual_str in qual_map:
                    min_value = qual_map[qual_str]["min_value"]
                    is_first =  qual_map[qual_str]["is_first"]
                    new_qual_type = qual_map[qual_str]["new_qual_type"]

                    if new_qual_type == "Games":
                        compare_type = "first" if is_first else "last" 
                        time_frame["qualifiers"][new_qual_type] = {
                            "compare_type" : compare_type,
                            "time_unit" : int(min_value),
                            "negate" : False
                        }
                    elif new_qual_type == "Seasons":
                        time_start = None
                        time_end = None
                        if is_first:
                            time_start = min_value
                        else:
                            time_end = min_value

                        time_frame["time_start"] = time_start
                        time_frame["time_end"] = time_end
                        time_frame["type"] = "season"
                    else:
                        if new_qual_type == "Age":
                            compare_str = ""
                            if min_value.years:
                                compare_str += str(min_value.years).replace("-", "") + "Y"
                            if min_value.months:
                                if min_value.years:
                                    compare_str += "-"
                                compare_str += str(min_value.months).replace("-", "") + "M"
                            if min_value.days:
                                if min_value.years or min_value.months:
                                    compare_str += "-"
                                compare_str += str(min_value.days).replace("-", "") + "D"
                        else:
                            compare_str = ""
                            if min_value.years:
                                compare_str += str(min_value.years).replace("-", "") + "Y"

                        time_frame["qualifiers"][new_qual_type] = [{
                            "negate" : False,
                            "time_unit_start" : datetime.date.min,
                            "time_unit_end" : dateutil.relativedelta.relativedelta(years=min_value.years, months=min_value.months, days=min_value.days),
                            "compare_str" : compare_str
                        }]

def handle_the_quals(qualifiers, qual_str, subb_names, time_frame, key, comment_obj, players_map):    
    the_quals = qualifiers[qual_str]
    new_quals = []
    for qualifier in the_quals:
        players = []
        seperate_quals = not "values" in qualifier
        for player_str in (qualifier["values"] if not seperate_quals else subb_names):
            if "Sub Query" in qual_str:
                for match_name in subb_names:
                    sub_handle_the_quals(players, qualifier, qual_str, "<" + match_name + "> [" + player_str + "]", time_frame, key, comment_obj, players_map)
            else:
                sub_handle_the_quals(players, qualifier, qual_str, player_str, time_frame, key, comment_obj, players_map)
                    
        if seperate_quals:
            for player in players:
                new_qual = copy.deepcopy(qualifier)
                new_qual["values"] = [player]
                new_quals.append(new_qual)
        else:
            qualifier["values"] = players
            new_quals.append(qualifier)
    
    qualifiers[qual_str] = new_quals

def sub_handle_the_quals(players, qualifier, qual_str, player_str, time_frame, key, comment_obj, players_map):
    new_search = False

    is_raw_query = False
    if "time_frame_str" not in qualifier:
        is_raw_query = bool("Sub Query" in qual_str or re.search(r"(?<!\\)]", unescape_string(player_str)) or re.search(r"(?<!\\)}", unescape_string(player_str)))

    player_str = determine_player_str(qualifier, player_str, time_frame, qual_str)

    player_type = {
        "da_type" : None
    }

    if player_str in players_map:
        player_datas = players_map[player_str]
    else:
        player_datas = handle_player_string(player_str, player_type, False, None, False, None)[0]
        players_map[player_str] = player_datas
        new_search = True

    for player_data in player_datas:
        player_games = {}
        missing_games = player_data["stat_values"]["Shared"]["any_missing_games"]

        if "all_rows" in player_data["stat_values"]["Shared"]:
            for row in player_data["stat_values"]["Shared"]["all_rows"]:
                if key == "Same Opponent":
                    date = row["Shared"]["Year"]
                    opponent = row["Shared"]["Opponent"]
                    if not opponent in player_games:
                        player_games[opponent] = set()
                    player_games[opponent].add(date)
                elif key == "Game":
                    player_games[row["Shared"]["GameLink"]] = True
                elif key == "Season":
                    player_games[row["Shared"]["Year"]] = True
                elif key == "Date":
                    date = row["Shared"]["Date"]
                    opponent = row["Shared"][key]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)
                elif key == "DateAfter":
                    date = row["Shared"]["Date"] + datetime.timedelta(days=1)
                    opponent = row["Shared"]["Tm"]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)
                elif key == "DateBefore":
                    date = row["Shared"]["Date"] - datetime.timedelta(days=1)
                    opponent = row["Shared"]["Tm"]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)
                elif key == "Either":
                    date = row["Shared"]["Date"]
                    if not row["Shared"]["Tm"].lower() in player_games:
                        player_games[row["Shared"]["Tm"].lower()] = []
                    player_games[row["Shared"]["Tm"].lower()].append(date)
                    if not row["Shared"]["Opponent"].lower() in player_games:
                        player_games[row["Shared"]["Opponent"].lower()] = []
                    player_games[row["Shared"]["Opponent"].lower()].append(date)
                else:
                    date = row["Shared"]["Date"]
                    opponent = row["Shared"][key]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)

        for index, player_name in enumerate(player_data["stat_values"]["Shared"]["Player"]):
            players.append({
                "id" : player_data["ids"][index],
                "name" : player_name,
                "missing_games" : missing_games,
                "query" : player_data["stat_values"]["Shared"]["Raw Quals"],
                "search_term" : player_data["stat_values"]["Shared"]["Search Term"],
                "games" : player_games,
                "is_raw_query" : is_raw_query
            })

    # if comment_obj and new_search and comment_obj["is_approved"] and "time_frame_str" not in qualifier:
    #     try:
    #         string_output = format_alert_message(comment_obj)
    #         if comment_obj["reply"]:
    #             if isinstance(comment_obj["reply"], Message):
    #                 #comment_obj["comment"].reply(string_output.split(alert_message + "\n\n", 1)[1])
    #                 pass
    #             else:
    #                 if display_progress_as_edit:
    #                     comment_obj["reply"].edit(string_output)
    #                 #else:
    #                 #    comment_obj["reply"].delete()
    #                 #    comment_obj["reply"] = None
    #                 #    comment_obj["reply"] = comment_obj["comment"].reply(string_output)
    #             logger.info("#" + str(threading.get_ident()) + "#   User alert edited")
    #     except Exception:
    #         logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())

def determine_player_str(qualifier, player_str, time_frame, qual_str):
    player_str = unescape_string(player_str)
            
    is_pre_query = "time_frame_str" not in qualifier and not "Sub Query" in qual_str and not re.search(r"(?<!\\)]", player_str)
    if not "<" in player_str:
        player_str = "<" + player_str + ">"
    player_str = "!nflcompare " + player_str

    if "values" in qualifier:
        if re.search(r"(?<!\\)}", player_str):
            player_str = re.sub(r"(?<!\\)}", "]", re.sub(r"(?<!\\){", "[", player_str))
        elif not re.search(r"(?<!\\)]", player_str):
            player_str += " []"

        if time_frame["playoffs"] and time_frame["playoffs"] != "No" and not re.search(r"\b(no(?:t|n)?(?: -)?)?(?:(?<!-)includes?|(?<!-)including|(?<!-)and|(?<!-)with)(?: |-)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", player_str) and not re.search(r"\b(no(?:t|n)?(?: -)?)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", player_str):
            bracket_index = re.search(r"(?<!\\)]", player_str).start()
            playoffs_str = "playoffs" if time_frame["playoffs"] == "Only" else "including playoffs"
            player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
    elif "time_frame_str" in qualifier:
        player_str += " [" + qualifier["time_frame_str"] + "]"
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " hide-advanced" + player_str[bracket_index:]
    else:
        player_str += " []"
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " hide-advanced" + player_str[bracket_index:]

    if is_pre_query and time_frame["type"] == "date" and not (time_frame["time_start"] == datetime.date.min.year and time_frame["time_end"] == current_season):
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " " + get_time_str(time_frame["time_start"], False) + " to " + get_time_str(time_frame["time_end"], False) + player_str[bracket_index:]

    if not qual_str in ["Season Sub Query", "Or Season Sub Query", "Season After Sub Query", "Season Before Sub Query"]:
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " force-dates" + player_str[bracket_index:]

    bracket_index = re.search(r"(?<!\\)]", player_str).start()
    player_str = player_str[:bracket_index] + " is-sub-query" + player_str[bracket_index:]
    
    if "Ignore Start" not in time_frame["qualifiers"]:
        if "Start If QB" in time_frame["qualifiers"]:
            if time_frame["qualifiers"]["Start If QB"][0]["negate"]:
                bracket_index = re.search(r"(?<!\\)]", player_str).start()
                playoffs_str = "not start-if-qb"
                player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
            else:
                bracket_index = re.search(r"(?<!\\)]", player_str).start()
                playoffs_str = "start-if-qb"
                player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
        else:
            if "Start" in time_frame["qualifiers"]:
                if time_frame["qualifiers"]["Start"][0]["negate"]:
                    bracket_index = re.search(r"(?<!\\)]", player_str).start()
                    playoffs_str = "not starts"
                    player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
                else:
                    bracket_index = re.search(r"(?<!\\)]", player_str).start()
                    playoffs_str = "starts"
                    player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]

    if qual_str == "Thrown To":
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " WR" + player_str[bracket_index:]

    return player_str

def handle_the_same_games_quals(sub_name, qual_str, subbb_frames, time_frame, player_type, new_qual_type, is_first, comment_obj, qual_map):
    del time_frame["qualifiers"][qual_str]

    names = re.split(r"(?<!\\)\+", sub_name.strip())

    for name in names:
        min_value = float("inf")
        player_id, player_page = get_player(name, player_type, subbb_frames)
        if player_id and player_page:
            player_data = handle_multi_player_data(player_id, subbb_frames, player_type, player_page, False, False, False, set(), comment_obj)[0]
            
            player_data["stat_values"] = {
                "Shared" : {}
            }
            player_data["stat_values"]["Shared"]["DateStart"] = player_data["DateStart"]
            player_data["stat_values"]["Shared"]["DateEnd"] = player_data["DateEnd"]
            player_data["stat_values"]["Shared"]["YearStart"] = player_data["YearStart"]
            player_data["stat_values"]["Shared"]["YearEnd"] = player_data["YearEnd"]
            player_data["stat_values"]["Shared"]["Birthdays"] = [player_data["Birthday"]]
            player_data["stat_values"]["Shared"]["Deathdays"] = [player_data["Deathday"]]
            player_data["stat_values"]["Shared"]["is_playoffs"] = None
            if time_frame["playoffs"] == "Only":
                player_data["stat_values"]["Shared"]["is_playoffs"] = "Only"
            elif time_frame["playoffs"]:
                player_data["stat_values"]["Shared"]["is_playoffs"] = "Include"
            player_data["stat_values"]["Shared"]["all_rows"] = player_data["rows"]

            calculated_values = calculate_values(player_data["stat_values"]["Shared"]["all_rows"], player_type, player_data)

            if new_qual_type == "Games":
                min_value = calculated_values["stat_values"]["Shared"]["G"]
            elif new_qual_type == "Seasons":
                min_value = len(set([row["Shared"]["Year"] for row in player_data["stat_values"]["Shared"]["all_rows"]]))
            elif new_qual_type == "Age":
                min_value = dateutil.relativedelta.relativedelta(datetime.datetime.now(), player_data["Birthday"])
            else:
                min_value = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=current_season), player_data["Birthday"])

            if min_value != 0 and min_value != float("inf") or isinstance(min_value, dateutil.relativedelta.relativedelta):
                if qual_str not in qual_map or (isinstance(min_value, numbers.Number) and min_value < qual_map[qual_str]["min_value"]) or (isinstance(min_value, dateutil.relativedelta.relativedelta) and (min_value + datetime.datetime.now()) < (qual_map[qual_str]["min_value"] + datetime.datetime.now())):
                    qual_map[qual_str] = {
                        "min_value" : min_value,
                        "is_first" : is_first,
                        "new_qual_type" : new_qual_type
                    }

def url_request(request, timeout=30):
    failed_counter = 0
    while(True):
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
            text = response.read()
            try:
                text = text.decode(response.headers.get_content_charset())
            except UnicodeDecodeError:
                bs = BeautifulSoup(text, "html.parser")
                if not bs.contents:
                    raise urllib.error.URLError("Page is empty!")
                return response, bs

            bs = BeautifulSoup(text, "lxml")
            if not bs.contents:
                raise urllib.error.URLError("Page is empty!")
            return response, bs
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_lxml(session, url, timeout=30):
    failed_counter = 0
    while(True):
        try:
            response = session.get(url, timeout=timeout)
            bs = lxml.html.document_fromstring(response.text)
            if not bs:
                raise urllib.error.URLError("Page is empty!")
            return response, bs
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + url + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_bytes(request, timeout=30):
    failed_counter = 0
    while(True):
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
            return response.read()
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_json(session, url, timeout=30):
    failed_counter = 0
    while(True):
        try:
            return session.get(url, timeout=timeout).json()
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow " + url + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_json_urlib(request, timeout=30):
    failed_counter = 0
    while(True):
        try:
            return json.load(urllib.request.urlopen(request, timeout=timeout))
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def handle_multi_name_data(names, time_frames, player_type, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj):
    player_datas = []
    any_missing_games = False

    add_type = "plus"

    for index, name in enumerate(names):
        real_index = index if len(time_frames) > index else len(time_frames) - 1
        player_id, player_page = get_player(name, player_type, time_frames[real_index])
        if player_id and player_page:
            player_data, missing_games = handle_multi_player_data(player_id, time_frames[real_index], player_type, player_page, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)
            player_data["Search Term"] = name
            for sub_frame in time_frames[real_index]:
                if sub_frame["add_type"] == "minus":
                    add_type = "minus"

            player_datas.append(player_data)
            
            if missing_games:
                any_missing_games = True
        else:
            player_data = copy.deepcopy(missing_player_data)
            player_data["Search Term"] = name
            player_datas.append(player_data)
    
    # if len(player_datas) > 1:
    #     add_type = "plus"
    
    return combine_player_datas(player_datas, player_type, any_missing_games, time_frames, add_type, remove_duplicates, remove_duplicate_games, extra_stats), player_datas

def get_player(name, player_type, time_frames):
    name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", unidecode.unidecode(name))).strip()
    name_sub = re.sub(r"[^\w\s']", "", name).lower().strip()    
    if name_sub in manual_players:
        player_id = manual_players[name_sub]
        player_url = main_page_url_format.format(player_id[0].upper(), player_id)
        request = urllib.request.Request(player_url, headers=request_headers)
        try:
            response, player_page = url_request(request)
            return player_id, player_page
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return None, None
            else:
                raise

    search_url = player_search_url_format.format(urllib.parse.quote_plus(name.replace(".", "")))
    request = urllib.request.Request(search_url, headers=request_headers)
    response = None
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return None, None
        else:
            raise
        
    url = urlparse(response.geturl())
    path = url.path[1:].split("/")

    if path[0] == "players":
        player_id = path[2][:-4]
        return player_id, player_page
    elif path[0] == "cfb":
        player_name = get_player_name(player_page)
        player_draft_info = get_college_draft_info(player_page)
        parsed_name = create_human_name(player_name)
        first_name = re.sub(r"[^a-zA-Z]", "", parsed_name.first).strip()[:2].title()
        last_name = re.sub(r"[^a-zA-Z]", "", parsed_name.last).strip()[:4].title()
        pot_id = last_name + first_name

        for i in range(0, 10):
            the_id = pot_id + str(i).zfill(2)            
            url = main_page_url_format.format(the_id[0].upper(), the_id)
            request = urllib.request.Request(url, headers=request_headers)
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    return None, None
                else:
                    raise

            potential_draft_into = get_pro_draft_info(player_page)
            if potential_draft_into == player_draft_info:
                return the_id, player_page
    elif path[0] == "search":
        player_div = player_page.find("div", {"id" : "players"})
        common_search_div = player_page.find("div", {"id" : "common_searches"})
        player_search_divs = []
        if player_div:
            player_search_divs += player_div.find_all("div", {"class" : "search-item"})
        if common_search_div:
            player_search_divs += common_search_div.find_all("div", {"class" : "search-item"})

        if player_search_divs:
            matching_players = []
            for player_search_div in player_search_divs:
                player_url_div = player_search_div.find("div", {"class" : "search-item-url"})
                player_url_div = player_search_div.find("div", {"class" : "search-item-url"})
                path = str(player_url_div.find(text=True))
                path_split = path.split("/")
                if path_split[1] == "players":
                    player_id = path_split[3][:-4]
                    
                    player_pos_div = player_search_div.find("div", {"class" : "search-item-name"})

                    player_name = unidecode.unidecode(str(player_pos_div.find("a").find(text=True)).strip().lower())
                    
                    parsed_name = create_human_name(player_name)
                    
                    last_name_match = False
                    is_exact = False
                    contains_name = False
                    if re.search(r"^" + name.lower() + "$", parsed_name.last) or re.search(r"^" + parsed_name.last + "$", name.lower()):
                        last_name_match = True
                        is_exact = True
                        contains_name = True
                    else:
                        if re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", re.sub(r"[^A-Za-z\s]", "", parsed_name.last)) or re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", parsed_name.last) + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())):
                            last_name_match = True
                            is_exact = True
                            contains_name = True
                        else:
                            if re.search(r"^" + player_name + "$", name.lower()) or re.search(r"^" + name.lower() + "$", player_name):
                                is_exact = True
                                contains_name = True
                            else:
                                if re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", player_name) + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())) or re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", re.sub(r"[^A-Za-z\s]", "", player_name)):
                                    is_exact = True
                                    contains_name = True
                                else:
                                    contains_name = name.lower() in player_name
                                    if not contains_name:
                                        contains_name = re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", player_name)
                                    if re.search(r"^" + name.lower() + "$", parsed_name.first) or re.search(r"^" + parsed_name.first + "$", name.lower()):
                                        is_exact = True
                                        contains_name = True
                                    elif re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", parsed_name.first) or re.search(r"^" + parsed_name.first + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())):
                                        is_exact = True
                                        contains_name = True
                                    elif name.lower() in parsed_name.first or name.lower() in parsed_name.last or parsed_name.first in name.lower() or parsed_name.last in name.lower():
                                        contains_name = True
                                    elif re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", parsed_name.first) or re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", parsed_name.last) or re.sub(r"[^A-Za-z\s]", "", parsed_name.first) in re.sub(r"[^A-Za-z\s]", "", name.lower()) or re.sub(r"[^A-Za-z\s]", "", parsed_name.last) in re.sub(r"[^A-Za-z\s]", "", name.lower()):
                                        contains_name = True
                    
                    has_first_name_match = False
                    name_split = name.split()
                    if len(name_split) >= 2:
                        if parsed_name.first.startswith(name_split[0].lower()):
                            has_first_name_match = True
                        
                    player_contents = player_pos_div.contents[2].strip()
                    player_info = player_contents.split(" ")
                    year_start = 0
                    year_end = 0
                    if len(player_info) == 2:
                        years = player_info[1][1:][:-1].split("-")
                        year_start = int(years[0])
                        year_end = year_start
                        if len(years) == 2:
                            year_end = int(years[1])
                    
                    has_year_match_count = 0
                    if year_start:
                        for time_frame in time_frames:
                            frame_start = time_frame["time_start"]
                            frame_end = time_frame["time_end"]
                            if frame_start and frame_end:
                                if not (isinstance(frame_start, int) or isinstance(frame_end, int)):
                                    frame_start = frame_start.year
                                    frame_end = frame_end.year
                                
                                player_range = range(year_start, year_end + 1)
                                frame_range = range(frame_start, frame_end + 1)

                                if set(player_range).intersection(frame_range):
                                    has_year_match_count += 1

                    position_split = player_info[0].split("-")
                    primary_pos = position_split[0].upper()

                    is_position_type = False
                    if player_type["da_type"]:
                        if primary_pos in headers:
                            header_to_chec = headers[primary_pos]
                        else:
                            header_to_chec = headers["PEN"]
                        is_position_type = headers[player_type["da_type"]] == header_to_chec

                    is_hof = bool(player_pos_div.find("span", {"class" : "search-hof"}))
                    is_allstar = bool(player_pos_div.find("span", {"class" : "search-allstar"}))
                    is_active = bool(player_pos_div.find("a").find("strong"))
                            
                    year_score = -1000
                    career_length = 0
                    if year_start and year_end:
                        current_year = current_season
                        if current_year < year_end:
                            year_end = current_year
                        year_score = math.log(1 / (current_year - year_end + 1), 1.2)
                        career_length = (year_end - year_start) + 1

                    position_score = position_scores[primary_pos] if primary_pos in position_scores else (45 if primary_pos in headers else 30)

                    score = 0
                    if is_hof:
                        score += 20
                    elif is_allstar:
                        score += 2
                    if is_active:
                        score += 2
                    score += year_score
                    score += career_length * .2
                    score += position_score

                    matching_players.append({
                        "name" : player_name,
                        "id" : player_id,
                        "has_years" : bool(career_length),
                        "is_exact" : is_exact,
                        "last_name_match" : last_name_match,
                        "has_year_match_count": has_year_match_count,
                        "contains_name" : contains_name,
                        "has_first_name_match" : has_first_name_match,
                        "is_position_type" : is_position_type,
                        "score" : score
                    })
            if matching_players:
                matching_players.sort(key=lambda player: (-player["has_years"], -player["has_year_match_count"], -player["is_exact"], -player["last_name_match"], -player["contains_name"], -player["has_first_name_match"], -player["is_position_type"], -player["score"]))
                matching_player = matching_players[0]

                player_url = main_page_url_format.format(matching_player["id"][0].upper(), matching_player["id"])
                request = urllib.request.Request(player_url, headers=request_headers)
                response = None
                try:
                    response, player_page = url_request(request)
                except urllib.error.HTTPError as err:
                    if err.status == 404:
                        return None, None
                    else:
                        raise
                return matching_player["id"], player_page

    return None, None

def combine_player_datas(player_datas, player_type, any_missing_games, time_frames, add_type, remove_duplicates, remove_duplicate_games, extra_stats):
    player_data = {
        "ids": [],
        "stat_values": {
            "Shared" : {}
        },
        "add_type" : add_type
    }

    player_data["stat_values"]["Shared"]["DateStart"] = []
    player_data["stat_values"]["Shared"]["DateEnd"] = []
    player_data["stat_values"]["Shared"]["YearStart"] = []
    player_data["stat_values"]["Shared"]["YearEnd"] = []
    player_data["stat_values"]["Shared"]["Birthdays"] = []
    player_data["stat_values"]["Shared"]["Deathdays"] = []
    player_data["stat_values"]["Shared"]["Player"] = []
    player_data["stat_values"]["Shared"]["Search Term"] = []
    player_data["stat_values"]["Shared"]["Types"] = []
    player_data["stat_values"]["Shared"]["Raw Player"] = ""
    player_data["stat_values"]["Shared"]["Raw Range"] = ""
    player_data["stat_values"]["Shared"]["Raw Time"] = ""
    player_data["stat_values"]["Shared"]["Raw Quals"] = "Query: "

    is_playoffs = None
    has_reg_season = False
    has_playoffs = False
    for subb_frame in time_frames:
        for time_frame in subb_frame:
            if "Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Or Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Or Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Day Of Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Of Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Day After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day After Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Day Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Before Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Game After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Game After Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Game Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Game Before Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Season Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Or Season Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Or Season Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Season After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season After Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Season Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season Before Sub Query"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing With"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Previous Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Previous Playing With"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Upcoming Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Upcoming Playing With"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Against"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Previous Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Previous Playing Against"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Upcoming Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Upcoming Playing Against"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Playing Same Game" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Game"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Playing Same Opponents" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Opponents"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Playing Same Date" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Date"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            if "Thrown To" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Thrown To"]:
                    for player in qualifier["values"]:
                        if player["missing_games"]:
                            any_missing_games = True
            
            if time_frame["playoffs"]:
                if time_frame["playoffs"] == "Only":
                    has_playoffs = True
                    if not is_playoffs or is_playoffs == "Only":
                        is_playoffs = "Only"
                    else:
                        is_playoffs = "Include"
                else:
                    has_reg_season = True
                    is_playoffs = "Include"
            else:
                has_reg_season = True
                if is_playoffs:
                    is_playoffs = "Include"

    player_data["stat_values"]["Shared"]["any_missing_games"] = any_missing_games
    player_data["stat_values"]["Shared"]["is_playoffs"] = is_playoffs

    all_rows = []
    sub_add_rows = []
    multiple_matches = False
    has_season_stats = True
    has_award_stats = True
    error_getting_pen = False
    error_getting_fmb_lst = False
    error_getting_adv = False
    error_getting_gwd = False
    error_getting_pick = False
    player_images = []
    player_teams = []
    player_positions = []
    player_numbers = []
    player_hofs = []
    has_one_player = False
    for sub_player_data in player_datas:
        sub_range = ""
        raw_sub_range = ""
        raw_sub_time = ""
        all_rows += sub_player_data["rows"]
        sub_add_rows.append(sub_player_data["rows"])

        if sub_player_data["Player"] != "No Player Match!":
            has_one_player = True

        for index, date_start in enumerate(sub_player_data["DateStart"]):
            if len(player_data["stat_values"]["Shared"]["DateStart"]) - 1 < index:
                player_data["stat_values"]["Shared"]["DateStart"].append(date_start)
            elif date_start < player_data["stat_values"]["Shared"]["DateStart"][index]:
                player_data["stat_values"]["Shared"]["DateStart"][index] = date_start
        for index, date_end in enumerate(sub_player_data["DateEnd"]):
            if len(player_data["stat_values"]["Shared"]["DateEnd"]) - 1 < index:
                player_data["stat_values"]["Shared"]["DateEnd"].append(date_end)
            elif date_end > player_data["stat_values"]["Shared"]["DateEnd"][index]:
                player_data["stat_values"]["Shared"]["DateEnd"][index] = date_end

            date_start = sub_player_data["DateStart"][index]
            
            if isinstance(date_start, int):
                original_start_year = date_start
                original_end_year = date_end
                
                if date_start in sub_player_data["game_valid_years"]:
                    date_start = "[" + str(date_start) + "](" + yearly_game_splits_url_format.format(sub_player_data["id"][0].upper(), sub_player_data["id"], str(date_start)) + ")"
                if date_end in sub_player_data["game_valid_years"]:
                    date_end = "[" + str(date_end) + "](" + yearly_game_splits_url_format.format(sub_player_data["id"][0].upper(), sub_player_data["id"], str(date_end)) + ")"
                
                if "date" not in extra_stats:
                    if date_start == date_end:
                        raw_sub_range += str(date_start)
                    else:
                        raw_sub_range += str(date_start) + " to " + str(date_end)
                    
                    if add_type == "minus":
                        raw_sub_range += " DIFF "
                    else:
                        raw_sub_range += " + "
                
                start_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(original_start_year) + 1)
                end_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(original_end_year) + 1)

                start_age = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=original_start_year), sub_player_data["Birthday"])
                end_age = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=original_end_year), sub_player_data["Birthday"])

                date_start = str(date_start) + " [" + start_season + " Season - Age: " + str(start_age.years) + "]"
                date_end = str(date_end) + " [" + end_season + " Season - Age: " + str(end_age.years) + "]"

                raw_date_start = str(original_start_year)
                raw_date_end = str(original_end_year)

                raw_time_start = "[" + start_season + " Season - Age: " + str(start_age.years) + "]"
                raw_time_end = "[" + end_season + " Season - Age: " + str(end_age.years) + "]"
            else:
                original_start_date = date_start
                original_end_date = date_end
                
                date_start_link = None
                date_end_link = None
                start_season = None
                end_season = None
                for row in sub_player_data["rows"]:
                    if row["Shared"]["Date"] == date_start:
                        date_start_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                        start_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(row["Shared"]["Year"]) + 1)
                    if row["Shared"]["Date"] == date_end:
                        date_end_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                        end_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(row["Shared"]["Year"]) + 1)
                    
                    if date_start_link and date_end_link:
                        break
                date_start = "[" + str(date_start) + "](" + date_start_link + ")"
                date_end = "[" + str(date_end) + "](" + date_end_link + ")"

                if "date" not in extra_stats:
                    if date_start == date_end:
                        raw_sub_range += str(date_start)
                    else:
                        raw_sub_range += str(date_start) + " to " + str(date_end)
                    
                    if add_type == "minus":
                        raw_sub_range += " DIFF "
                    else:
                        raw_sub_range += " + "

                start_age = dateutil.relativedelta.relativedelta(original_start_date, sub_player_data["Birthday"])
                start_date_diff_str = ""
                if start_age.years:
                    start_date_diff_str += str(start_age.years).replace("-", "") + "Y"
                if start_age.months:
                    if start_age.years:
                        start_date_diff_str += "-"
                    start_date_diff_str += str(start_age.months).replace("-", "") + "M"
                if start_age.days:
                    if start_age.years or start_age.months:
                        start_date_diff_str += "-"
                    start_date_diff_str += str(start_age.days).replace("-", "") + "D"

                end_age = dateutil.relativedelta.relativedelta(original_end_date, sub_player_data["Birthday"])
                end_date_diff_str = ""
                if end_age.years:
                    end_date_diff_str += str(end_age.years).replace("-", "") + "Y"
                if end_age.months:
                    if end_age.years:
                        end_date_diff_str += "-"
                    end_date_diff_str += str(end_age.months).replace("-", "") + "M"
                if end_age.days:
                    if end_age.years or end_age.months:
                        end_date_diff_str += "-"
                    end_date_diff_str += str(end_age.days).replace("-", "") + "D"

                date_start += " [" + start_season + " Season - Age: " + start_date_diff_str + "]"
                date_end += " [" + end_season + " Season - Age: " + end_date_diff_str + "]"

                raw_date_start = str(original_start_date)
                raw_date_end = str(original_end_date)

                raw_time_start = "[" + start_season + " Season - Age: " + start_date_diff_str + "]"
                raw_time_end = "[" + end_season + " Season - Age: " + end_date_diff_str + "]"

            if "date" in extra_stats:
                dates = sorted(list(set([row["Shared"]["Date"] for row in sub_player_data["rows"]])))
                if len(dates) > 20:
                    raise get_constant_data.CustomMessageException("Cannot show more than 20 dates!")

                for date_start in dates:
                    if isinstance(date_start, int):
                        if date_start in sub_player_data["game_valid_years"]:
                            date_start = "[" + str(date_start) + "](" + yearly_game_splits_url_format.format(sub_player_data["id"][0].upper(), sub_player_data["id"], str(date_start)) + ")"
                        raw_sub_range += str(date_start) + " + "
                    else:
                        date_start_link = None
                        for row in sub_player_data["rows"]:
                            if row["Shared"]["Date"] == date_start:
                                date_start_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                                break
                        raw_sub_range += "[" + str(date_start) + "](" + date_start_link + ")" + " + "
            else:
                if date_start == date_end:
                    sub_range += str(date_start)
                else:
                    sub_range += str(date_start) + " to " + str(date_end)
                
                if add_type == "minus":
                    sub_range += " DIFF "
                else:
                    sub_range += " + "

                if raw_time_start == raw_time_end:
                    raw_sub_time += str(raw_time_start)
                else:
                    raw_sub_time += str(raw_time_start) + " to " + str(raw_time_end)
                
                if add_type == "minus":
                    raw_sub_time += " DIFF "
                else:
                    raw_sub_time += " + "

        for index, year_start in enumerate(sub_player_data["YearStart"]):
            if len(player_data["stat_values"]["Shared"]["YearStart"]) - 1 < index:
                player_data["stat_values"]["Shared"]["YearStart"].append(year_start)
            elif year_start < player_data["stat_values"]["Shared"]["YearStart"][index]:
                player_data["stat_values"]["Shared"]["YearStart"][index] = year_start
        for index, year_end in enumerate(sub_player_data["YearEnd"]):
            if len(player_data["stat_values"]["Shared"]["YearEnd"]) - 1 < index:
                player_data["stat_values"]["Shared"]["YearEnd"].append(year_end)
            elif year_end > player_data["stat_values"]["Shared"]["YearEnd"][index]:
                player_data["stat_values"]["Shared"]["YearEnd"][index] = year_end

        player_data["stat_values"]["Shared"]["Raw Player"] += "{" + (sub_player_data["Player"] if "hide-name" not in extra_stats else "?????") + "} " + ("DIFF" if add_type == "minus" else "+") + " "
        if raw_sub_range[:(-6 if add_type == "minus" else -3)]:
            player_data["stat_values"]["Shared"]["Raw Range"] += "{" + raw_sub_range[:(-6 if add_type == "minus" else -3)] + "}"
        else:
            player_data["stat_values"]["Shared"]["Raw Range"] += "{No Matching Games!}"
        
        if add_type == "minus":
            player_data["stat_values"]["Shared"]["Raw Range"] += " DIFF "
        else:
            player_data["stat_values"]["Shared"]["Raw Range"] += " + "

        if raw_sub_time[:(-6 if add_type == "minus" else -3)]:
            player_data["stat_values"]["Shared"]["Raw Time"] += "{" + raw_sub_time[:(-6 if add_type == "minus" else -3)] + "}"

            if add_type == "minus":
                player_data["stat_values"]["Shared"]["Raw Time"] += " DIFF "
            else:
                player_data["stat_values"]["Shared"]["Raw Time"] += " + "

        if not multiple_matches and len(sub_player_data["DateEnd"]) > 1 and len(player_datas) > 1:
            multiple_matches = True

        player_data["ids"].append(sub_player_data["id"])
        player_data["stat_values"]["Shared"]["Player"].append((sub_player_data["Player"] if "hide-name" not in extra_stats else "?????"))
        player_data["stat_values"]["Shared"]["Birthdays"].append(sub_player_data["Birthday"])
        player_data["stat_values"]["Shared"]["Deathdays"].append(sub_player_data["Deathday"])
        player_data["stat_values"]["Shared"]["Search Term"].append(sub_player_data["Search Term"])
        player_data["stat_values"]["Shared"]["LastUpdated"] = sub_player_data["LastUpdated"]
        player_data["stat_values"]["Shared"]["Types"].append(sub_player_data["Type"])

        if not sub_player_data["has_season_stats"]:
            has_season_stats = False
        if not sub_player_data["has_award_stats"]:
            has_award_stats = False
        if sub_player_data["error_getting_pen"]:
            error_getting_pen = True
        if sub_player_data["error_getting_fmb_lst"]:
            error_getting_fmb_lst = True
        if sub_player_data["error_getting_adv"]:
            error_getting_adv = True
        if sub_player_data["error_getting_pick"]:
            error_getting_pick = True
        if sub_player_data["error_getting_gwd"]:
            error_getting_gwd = True
        player_images.append(sub_player_data["player_image_url"])
        player_teams.append(sub_player_data["player_current_team"])
        player_positions.append(sub_player_data["player_position"])
        player_numbers.append(sub_player_data["player_current_number"])
        player_hofs.append(sub_player_data["player_hof"])

    if has_reg_season and has_playoffs:
        has_award_stats = False

    player_data["has_season_stats"] = has_season_stats
    player_data["has_award_stats"] = has_award_stats
    player_data["error_getting_pen"] = error_getting_pen
    player_data["error_getting_fmb_lst"] = error_getting_fmb_lst
    player_data["error_getting_adv"] = error_getting_adv
    player_data["error_getting_adj"] = False
    player_data["error_getting_pick"] = error_getting_pick
    player_data["error_getting_gwd"] = error_getting_gwd
    player_data["player_image_url"] = player_images
    player_data["player_current_team"] = player_teams
    player_data["player_position"] = player_positions
    player_data["player_current_number"] = player_numbers
    player_data["player_hof"] = player_hofs

    player_data["stat_values"]["Shared"]["Raw Player"] = player_data["stat_values"]["Shared"]["Raw Player"][:(-6 if add_type == "minus" else -3)]
    player_data["stat_values"]["Shared"]["Raw Range"] = player_data["stat_values"]["Shared"]["Raw Range"][:(-6 if add_type == "minus" else -3)]
    player_data["stat_values"]["Shared"]["Raw Time"] = player_data["stat_values"]["Shared"]["Raw Time"][:(-6 if add_type == "minus" else -3)]
    if not multiple_matches:
        player_data["stat_values"]["Shared"]["Raw Player"] = player_data["stat_values"]["Shared"]["Raw Player"].replace("{", "").replace("}", "")
        player_data["stat_values"]["Shared"]["Raw Range"] = player_data["stat_values"]["Shared"]["Raw Range"].replace("{", "").replace("}", "")
        player_data["stat_values"]["Shared"]["Raw Time"] = player_data["stat_values"]["Shared"]["Raw Time"].replace("{", "").replace("}", "")
    
    if not has_one_player:
        return player_data

    player_data["stat_values"]["Shared"]["all_rows"] = all_rows
    player_data["stat_values"]["Shared"]["seperate_rows"] = sub_add_rows
    
    if add_type == "minus":
        parsed_stats = {}
        total_count = sum([len(sub_player_data["seperate_rows"]) for sub_player_data in player_datas])
        for sub_player_data in player_datas:
            for sub_all_rows in sub_player_data["seperate_rows"]:
                calculated_values = calculate_values(sub_all_rows, player_type, player_data, extra_stats)
                for over_header in calculated_values["stat_values"]:
                    if not over_header in parsed_stats:
                        parsed_stats[over_header] = set()
                    if not over_header in player_data["stat_values"]:
                        player_data["stat_values"][over_header] = {}

                    for stat in calculated_values["stat_values"][over_header]:
                        if stat in parsed_stats[over_header]:
                            if isinstance(player_data["stat_values"][over_header][stat], numbers.Number):
                                if abs(calculated_values["stat_values"][over_header][stat]):
                                    player_data["stat_values"][over_header][stat] = (player_data["stat_values"][over_header][stat] - calculated_values["stat_values"][over_header][stat]) / abs(calculated_values["stat_values"][over_header][stat])
                                else:
                                    if player_data["stat_values"][over_header][stat] > 0:
                                        player_data["stat_values"][over_header][stat] = float("inf")
                                    elif player_data["stat_values"][over_header][stat] < 0:
                                        player_data["stat_values"][over_header][stat] = -float("inf")
                                    else:
                                        player_data["stat_values"][over_header][stat] = 0
                            elif (over_header == "Era Adjusted Passing" and stat.startswith("Rec")) or stat == "TmRec" or stat == "ATS TmRec" or stat == "O/U TmRec":
                                old_rec_split = player_data["stat_values"][over_header][stat].split(":")
                                new_rec_split = calculated_values["stat_values"][over_header][stat].split(":")
                                player_data["stat_values"][over_header][stat] = str(get_constant_data.round_value(float(old_rec_split[0]) - float(new_rec_split[0]))) + ":" + str(get_constant_data.round_value(float(old_rec_split[1]) - float(new_rec_split[1]))) + ":" + str(get_constant_data.round_value(float(old_rec_split[2]) - float(new_rec_split[2])))
                            elif stat in string_stats:
                                if not player_data["stat_values"][over_header][stat]:
                                    player_data["stat_values"][over_header][stat] = ""
                                player_data["stat_values"][over_header][stat] += calculated_values["stat_values"][over_header][stat] + "-"
                        else:
                            if stat not in player_data["stat_values"][over_header]:
                                player_data["stat_values"][over_header][stat] = calculated_values["stat_values"][over_header][stat]
                                parsed_stats[over_header].add(stat)
                                if isinstance(player_data["stat_values"][over_header][stat], numbers.Number):
                                    if total_count == 1:
                                        if player_data["stat_values"][over_header][stat] > 0:
                                            player_data["stat_values"][over_header][stat] = float("inf")
                                        elif player_data["stat_values"][over_header][stat] < 0:
                                            player_data["stat_values"][over_header][stat] = -float("inf")
                                        else:
                                            player_data["stat_values"][over_header][stat] = 0
                
                for over_header in calculated_values["stat_values"]:
                    if not over_header in player_data["stat_values"]:
                        player_data["stat_values"][over_header] = {}

                    for stat in calculated_values["stat_values"][over_header]:
                        if stat in string_stats:
                            if player_data["stat_values"][over_header][stat]:
                                parsed_teams = set()
                                stat_vals = player_data["stat_values"][over_header][stat].split("-")
                                player_data["stat_values"][over_header][stat] = ""
                                for stat_val in stat_vals:
                                    if stat_val and stat_val not in parsed_teams:
                                        player_data["stat_values"][over_header][stat] += stat_val + "-"
                                        parsed_teams.add(stat_val)
                                player_data["stat_values"][over_header][stat] = player_data["stat_values"][over_header][stat][:-1]
    else:
        calculated_values = calculate_values(all_rows, player_type, player_data, extra_stats)
        for over_header in calculated_values["stat_values"]:
            if not over_header in player_data["stat_values"]:
                player_data["stat_values"][over_header] = {}

            for stat in calculated_values["stat_values"][over_header]:
                if stat not in player_data["stat_values"][over_header]:
                    player_data["stat_values"][over_header][stat] = calculated_values["stat_values"][over_header][stat]
    
    if player_type["da_type"]:
        for header in get_constant_data.stat_groups["Shared"]:
            if header != "Player":
                if header not in player_data["stat_values"]["Shared"]:
                    player_data["stat_values"]["Shared"][header] = 0.0

        for over_header in headers[player_type["da_type"]]:
            if not over_header in player_data["stat_values"]:
                player_data["stat_values"][over_header] = {}
            for header in get_constant_data.stat_groups[over_header]:
                if header not in player_data["stat_values"][over_header]:
                    player_data["stat_values"][over_header][header] = 0.0
    
    best_table = 0
    worst_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-season"):
            if len(extra_stat.split("-")) == 3:
                best_table = int(extra_stat.split("-")[2])
            else:
                best_table = 1
        elif extra_stat.startswith("worst-season"):
            if len(extra_stat.split("-")) == 3:
                worst_table = int(extra_stat.split("-")[2])
            else:
                worst_table = 1
    best_games_table = 0
    worst_games_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-game"):
            if len(extra_stat.split("-")) == 3:
                best_games_table = int(extra_stat.split("-")[2])
            else:
                best_games_table = 1
        elif extra_stat.startswith("worst-game"):
            if len(extra_stat.split("-")) == 3:
                worst_games_table = int(extra_stat.split("-")[2])
            else:
                worst_games_table = 1
    seasons_leading_start = 0
    seasons_leading_end = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading_end = int(extra_stat.split("-")[2])
                if len(extra_stat.split("-")) >= 4:
                    seasons_leading_start = int(extra_stat.split("-")[2])
                else:
                    seasons_leading_start = 1
            else:
                seasons_leading_start = 1
                seasons_leading_end = 1
    
    all_unique_quals = True
    last_qual_str = None
    for subb_frame in time_frames:
        for subbb_frame in subb_frame:
            qual_str = determine_raw_str(subbb_frame)
            if not last_qual_str:
                last_qual_str = qual_str
            if last_qual_str != qual_str:
                all_unique_quals = False
                break
        if not all_unique_quals:
            break

    first_qual = True
    multiple_matches = len(time_frames) > 1
    for subb_index, subb_frame in enumerate(time_frames):
        if not multiple_matches and len(subb_frame) > 1:
            multiple_matches = True
        if all_unique_quals:
            multiple_matches = False
        for subbb_index, subbb_frame in enumerate(subb_frame):
            if all_unique_quals and (subb_index or subbb_index):
                continue

            qual_str = ""
            if multiple_matches:
                qual_str += "("
            
            qual_str += determine_raw_str(subbb_frame)
            
            if multiple_matches:
                qual_str += ")"
            if qual_str and qual_str != " ()":
                if not first_qual:
                    if add_type == "minus":
                        player_data["stat_values"]["Shared"]["Raw Quals"] += " DIFF "
                    else:
                        player_data["stat_values"]["Shared"]["Raw Quals"] += " + "
                else:
                    first_qual = False

                player_data["stat_values"]["Shared"]["Raw Quals"] += qual_str
        
        if remove_duplicates:
            if first_qual:
                first_qual = False
            
            player_data["stat_values"]["Shared"]["Raw Quals"] += " [Duplicates Removed]"
        
        if remove_duplicate_games:
            if first_qual:
                first_qual = False
            
            player_data["stat_values"]["Shared"]["Raw Quals"] += " [Duplicate Games Removed]"
        
        if best_table:
            if first_qual:
                first_qual = False
            
            if best_table == 1:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Best Season]"
            else:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Best " + str(best_table) + " Seasons]"
        
        if worst_table:
            if first_qual:
                first_qual = False
            
            if best_table == 1:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Worst Season]"
            else:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Worst " + str(worst_table) + " Seasons]"
        
        if best_games_table:
            if first_qual:
                first_qual = False
            
            if best_games_table == 1:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Best Game]"
            else:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Best " + str(best_games_table) + " Games]"
        
        if worst_games_table:
            if first_qual:
                first_qual = False
            
            if worst_games_table == 1:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Worst Game]"
            else:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Worst " + str(worst_games_table) + " Games]"
        
        if seasons_leading_start:
            if first_qual:
                first_qual = False
            
            if seasons_leading_start == seasons_leading_end:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Seasons In " + get_time_str(seasons_leading_start, True) + "]"
            elif seasons_leading_end == 1:
                player_data["stat_values"]["Shared"]["Raw Quals"] += " [Seasons In Top " + str(seasons_leading_end) + "]"
            else:
                player_data["stat_values"]["Shared"]["Raw Quals"] +=  " [Seasons In Top " + str(seasons_leading_start) + "-" + str(seasons_leading_end) + "]"
    
    player_data["stat_values"]["Shared"]["Raw Quals"] = player_data["stat_values"]["Shared"]["Raw Quals"].strip()

    for row in player_data["stat_values"]["Shared"]["all_rows"]:
        shared_keys_to_delete = set()
        if "Shared" in row:
            for sub_key in row["Shared"]:
                if sub_key in ("Previous Row", "Upcoming Row"):
                    shared_keys_to_delete.add(sub_key)
        for key in shared_keys_to_delete:
            del row["Shared"][key]

    if "hide-year" in extra_stats:
        player_data["stat_values"]["Shared"]["Raw Range"] = "Dates: ?????"
        player_data["stat_values"]["Shared"]["Raw Time"] = ""
    elif "hide-name" in extra_stats:
        match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", player_data["stat_values"]["Shared"]["Raw Range"])
        while match:
            player_data["stat_values"]["Shared"]["Raw Range"] = player_data["stat_values"]["Shared"]["Raw Range"].replace(match.group(0), match.group(1), 1)
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", player_data["stat_values"]["Shared"]["Raw Range"])
        player_data["stat_values"]["Raw Time"] = ""

    if "hide-query" in extra_stats:
        player_data["stat_values"]["Shared"]["Raw Quals"] = "Query: ?????"

    return player_data

def determine_raw_str(subbb_frame):
    qual_str = ""

    if subbb_frame["type"].startswith("season"):
        if subbb_frame["type"].startswith("season-range"):
            qual_str += "Seasons: "
            if not subbb_frame["time_start"]:
                qual_str += get_time_str(subbb_frame["time_end"], True)
            elif not subbb_frame["time_end"]:
                qual_str += get_time_str(subbb_frame["time_start"], True)
            elif subbb_frame["time_start"] == subbb_frame["time_end"]:
                qual_str += get_time_str(subbb_frame["time_start"], True)
            else:
                qual_str += (get_time_str(subbb_frame["time_start"], True)) + "-" + (get_time_str(subbb_frame["time_end"], True))
                if subbb_frame["type"] == "season-range-reversed":
                    qual_str += " [Reverse]"
        else:
            if subbb_frame["time_start"]:
                if subbb_frame["time_start"] == 1:
                    qual_str += "First Season"
                else:
                    qual_str += "First " + str(subbb_frame["time_start"]) + " Seasons"
            else:
                if subbb_frame["time_end"] == 1:
                    qual_str += "Last Season"
                else:
                    qual_str += "Last " + str(subbb_frame["time_end"]) + " Seasons"
    else:
        if subbb_frame["time_start"] == datetime.date.min.year and subbb_frame["time_end"] == current_season:
            qual_str += "Career"
        else:
            if isinstance(subbb_frame["time_end"], dateutil.relativedelta.relativedelta):
                qual_str += "First "
                if subbb_frame["time_end"].microseconds:
                    qual_str += "Calendar "
                if subbb_frame["time_end"].minutes > 1:
                    qual_str += str(subbb_frame["time_end"].minutes) + " "

                if subbb_frame["time_end"].seconds == 0:
                    qual_str += "Day"
                elif subbb_frame["time_end"].seconds == 1:
                    qual_str += "Week"
                elif subbb_frame["time_end"].seconds == 2:
                    qual_str += "Month"
                else:
                    qual_str += "Year"
                if subbb_frame["time_end"].minutes > 1:
                    qual_str += "s"
            else:
                time_start = subbb_frame["time_start"]
                if time_start == datetime.date.min or time_start == datetime.date.min.year:
                    time_start = "MIN"
                if time_start == subbb_frame["time_end"]:
                    qual_str += str(time_start)
                else:
                    qual_str += str(time_start) + " to " + str(subbb_frame["time_end"])
    
    if subbb_frame["playoffs"]:
        if subbb_frame["playoffs"] == "Only":
            qual_str += " - Playoffs"
        else:
            qual_str += " - Regular Season and Playoffs"
    else:
        qual_str += " - Regular Season"

    for qualifier in subbb_frame["qualifiers"]:
        if qualifier == "Force Dates" or qualifier == "Ignore Start":
            continue

        sub_sub_first = True
        if qual_str:
            qual_str += " - "
        
        if qualifier != "Start" and qualifier != "Birthday" and qualifier != "Games" and qualifier != "Season Games" and qualifier != "Weeks":
            qual_str += qualifier + ": "

        if qualifier == "Games" or qualifier == "Season Games" or qualifier == "Weeks":            
            if subbb_frame["qualifiers"][qualifier]["negate"]:
                qual_str += "Not "
            if "explain_str" in subbb_frame["qualifiers"][qualifier] and subbb_frame["qualifiers"][qualifier]["explain_str"]:
                for explain_str in subbb_frame["qualifiers"][qualifier]["explain_str"]:
                    qual_str += explain_str + " + "
                qual_str = qual_str[:-3]
            else: 
                if "compare_type" in subbb_frame["qualifiers"][qualifier]:
                    qual_str += subbb_frame["qualifiers"][qualifier]["compare_type"].capitalize()
                    if subbb_frame["qualifiers"][qualifier]["time_unit"] == 1:
                        qual_str += " " + qualifier[:-1]
                    else:
                        qual_str += " " + str(subbb_frame["qualifiers"][qualifier]["time_unit"]) + " " + qualifier
                else:
                    qual_str += qualifier + ": "
                    if subbb_frame["qualifiers"][qualifier]["start_val"] == subbb_frame["qualifiers"][qualifier]["end_val"]:
                        qual_str += get_time_str(subbb_frame["qualifiers"][qualifier]["start_val"], True)
                    else:
                        qual_str += (get_time_str(subbb_frame["qualifiers"][qualifier]["start_val"], True)) + "-" + (get_time_str(subbb_frame["qualifiers"][qualifier]["end_val"], True))
                        if subbb_frame["qualifiers"][qualifier]["reverse"]:
                            qual_str += " [Reverse]"
        else:
            for qual_obj in subbb_frame["qualifiers"][qualifier]:
                sub_sub_sub_first = True
                if not sub_sub_first:
                    qual_str += " OR " if qualifier.startswith("Or") and qualifier.endswith("Sub Query") else " AND "
                else:
                    sub_sub_first = False
                if len(subbb_frame["qualifiers"][qualifier]) > 1:
                    if "values" in qual_obj and isinstance(qual_obj["values"], list) and len(qual_obj["values"]) > 1:
                        qual_str += "("

                if qualifier == "Start" or qualifier == "Birthday":
                    qual_str += get_constant_data.qualifier_map[qualifier][not qual_obj["negate"]]
                elif qualifier == "Rookie" or qualifier == "Facing Former Franchise" or qualifier == "Facing Former Team" or qualifier == "Previous Same Opponent" or qualifier == "Upcoming Same Opponent" or qualifier == "With New Team" or qualifier == "With New Franchise" or qualifier == "Even Calendar Year" or qualifier == "Odd Calendar Year" or qualifier == "Even Year" or qualifier == "Odd Year" or qualifier == "Interleague" or qualifier == "Intraleague" or qualifier == "Interconference" or qualifier == "Intraconference" or qualifier == "Interdivision" or qualifier == "Intradivision" or qualifier == "First Half" or qualifier == "Second Half" or qualifier == "National Game" or qualifier == "Overtime Result" or qualifier == "Winning Opponent" or qualifier == "Losing Opponent" or qualifier == "Tied Opponent" or qualifier == "Winning Or Tied Opponent" or qualifier == "Losing Or Tied Opponent" or qualifier == "Current Winning Opponent" or qualifier == "Current Losing Opponent" or qualifier == "Current Tied Opponent" or qualifier == "Current Winning Or Tied Opponent" or qualifier == "Current Losing Or Tied Opponent" or qualifier == "Playoff Opponent"  or qualifier == "Champ Winner Opponent" or qualifier == "Conference Winner Opponent" or qualifier == "Division Winner Opponent" or qualifier == "Winning Team" or qualifier == "Losing Team" or qualifier == "Tied Team" or qualifier == "Winning Or Tied Team" or qualifier == "Losing Or Tied Team" or qualifier == "Current Winning Team" or qualifier == "Current Losing Team" or qualifier == "Current Tied Team" or qualifier == "Current Winning Or Tied Team" or qualifier == "Current Losing Or Tied Team" or qualifier == "Playoff Team"  or qualifier == "Champ Winner Team" or qualifier == "Conference Winner Team" or qualifier == "Division Winner Team" or qualifier == "Team After Bye" or qualifier == "Team Before Bye" or qualifier == "Team After Playoffs Bye" or qualifier == "Team Before Playoffs Bye" or qualifier == "Team Game After Bye" or qualifier == "Team Game Before Bye" or qualifier == "Team Had Bye" or qualifier == "Opponent After Bye" or qualifier == "Opponent Before Bye" or qualifier == "Opponent After Playoffs Bye" or qualifier == "Opponent Before Playoffs Bye" or qualifier == "Opponent Game After Bye" or qualifier == "Opponent Game Before Bye" or qualifier == "Opponent Had Bye" or qualifier == "Probable" or qualifier == "Doubtful" or qualifier == "Questionable" or qualifier == "Injured" or qualifier == "Underdog" or qualifier == "Favorite" or qualifier == "Overtime" or qualifier == "RedZone":
                    qual_str += str(not qual_obj["negate"])
                elif qualifier == "Playing With" or qualifier == "Playing Against" or qualifier == "Previous Playing With" or qualifier == "Playing Same Game" or qualifier == "Previous Playing Against" or qualifier == "Upcoming Playing With" or qualifier == "Upcoming Playing Against" or qualifier == "Playing Same Opponents" or qualifier == "Playing Same Date" or qualifier == "Thrown To":
                    for player in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        player_url_str = create_player_url_string(player["name"], player["id"], {})
                        if player_url_str == "No Player Match!":
                            qual_str += player_url_str + " (Searched Term: \"" + "+".join(player["search_term"]) + "\")"
                        else:
                            query = player["query"].replace("Query: ", "", 1)
                            qual_str += player_url_str + ((" (" + query + ")") if query and player["is_raw_query"] else "")
                elif qualifier == "Sub Query" or qualifier == "Or Sub Query" or qualifier == "Day Of Sub Query" or qualifier == "Day After Sub Query" or qualifier == "Day Before Sub Query" or qualifier == "Game After Sub Query" or qualifier == "Game Before Sub Query" or qualifier == "Season Sub Query" or qualifier == "Or Season Sub Query" or qualifier == "Season After Sub Query" or qualifier == "Season Before Sub Query":
                    for player in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        qual_str += "(" + player["query"].replace("Query: ", "", 1) + ")"
                elif qualifier == "Days Rest" or qualifier == "Upcoming Days Rest" or qualifier == "Starts Days Rest" or qualifier == "Upcoming Starts Days Rest" or qualifier == "Days In A Row" or qualifier == "Games In A Row" or qualifier == "Starts In A Row" or qualifier == "Games Rest" or qualifier == "Starts Rest" or qualifier == "Team Score" or qualifier == "Opponent Score" or qualifier == "Previous Team Score" or qualifier == "Previous Opponent Score" or qualifier == "Upcoming Team Score" or qualifier == "Upcoming Opponent Score" or qualifier == "Over/Under" or qualifier == "Super Bowl" or qualifier == "Number" or qualifier == "Team Wins" or qualifier == "Team Losses" or qualifier == "Team Ties" or qualifier == "Opponent Wins" or qualifier == "Opponent Losses" or qualifier == "Opponent Ties" or qualifier == "Current Team Wins" or qualifier == "Current Team Losses" or qualifier == "Current Team Ties" or qualifier == "Current Opponent Wins" or qualifier == "Current Opponent Losses" or qualifier == "Current Opponent Ties" or qualifier == "Team Games Over 500" or qualifier == "Opponent Games Over 500" or qualifier == "Current Team Games Over 500" or qualifier == "Current Opponent Games Over 500" or qualifier == "Attendance":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Year" or qualifier == "Calendar Year":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Temperature" or qualifier == "Wind Chill":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                    qual_str += " °F"
                elif qualifier == "Wind":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                
                    qual_str += " MPH"
                elif qualifier == "Humidity":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                
                    qual_str += "%"
                elif qualifier == "Dates":
                    for date_obj in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        
                        if date_obj["start_val"] == date_obj["end_val"]:
                            qual_str += get_time_str(date_obj["start_val"], False)
                        else:
                            qual_str += get_time_str(date_obj["start_val"], False) + " to " + get_time_str(date_obj["end_val"], False)
                elif qualifier == "Score Margin" or qualifier == "Previous Score Margin" or qualifier == "Upcoming Score Margin" or qualifier == "Score Difference" or qualifier == "Previous Score Difference" or qualifier == "Upcoming Score Difference" or qualifier == "Spread" or qualifier == "Spread Margin" or qualifier == "Over/Under Margin" or qualifier == "Quarter" or qualifier == "Down" or qualifier == "Down Distance" or qualifier == "Field Position" or qualifier == "Current Team Score" or qualifier == "Current Opponent Score" or qualifier == "Current Score Margin" or qualifier == "Current Score Difference":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Quarter Time" or qualifier == "Quarter Time Remaining":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False, quarter=True)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False, quarter=True)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False, quarter=True))
                elif qualifier == "Season" or qualifier == "Season Reversed" or qualifier == "Season Index" or qualifier == "Season Index Reversed" or qualifier == "Series Game" or qualifier == "Season Game" or qualifier == "Career Game" or qualifier == "Career Game Reversed" or qualifier == "Season Game Reversed" or qualifier == "Team Game Reversed" or qualifier == "Team Game" or qualifier == "Week" or qualifier == "Opponent Points Rank" or qualifier == "Opponent Points Allowed Rank" or qualifier == "Opponent Yards Rank" or qualifier == "Opponent Yards Allowed Rank" or qualifier == "Opponent Pass TD Rank" or qualifier == "Opponent Pass TD Allowed Rank" or qualifier == "Opponent Pass Yards Rank" or qualifier == "Opponent Pass Yards Allowed Rank" or qualifier == "Opponent Rush TD Rank" or qualifier == "Opponent Rush TD Allowed Rank" or qualifier == "Opponent Rush Yards Rank" or qualifier == "Opponent Rush Yards Allowed Rank" or qualifier == "Opponent ANY/A Rank" or qualifier == "Opponent ANY/A Allowed Rank" or qualifier == "Opponent Passer Rating Rank" or qualifier == "Opponent Passer Rating Allowed Rank" or qualifier == "Opponent Fantasy Position Rank" or qualifier == "Team Points Rank" or qualifier == "Team Points Allowed Rank" or qualifier == "Team Yards Rank" or qualifier == "Team Yards Allowed Rank" or qualifier == "Team Pass TD Rank" or qualifier == "Team Pass TD Allowed Rank" or qualifier == "Team Pass Yards Rank" or qualifier == "Team Pass Yards Allowed Rank" or qualifier == "Team Rush TD Rank" or qualifier == "Team Rush TD Allowed Rank" or qualifier == "Team Rush Yards Rank" or qualifier == "Team Rush Yards Allowed Rank" or qualifier == "Team ANY/A Rank" or qualifier == "Team ANY/A Allowed Rank" or qualifier == "Team Passer Rating Rank" or qualifier == "Team Passer Rating Allowed Rank" or qualifier == "Team Fantasy Position Rank":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], True)
                        if "rate" in qual_obj["values"] and qual_obj["values"]["rate"]:
                            if qualifier.startswith("Opponent Points") or qualifier.startswith("Opponent TD") or qualifier.startswith("Team Points") or qualifier.startswith("Team TD"):
                                new_qual = qualifier.replace("Points", "Points/Play").replace("Yards", "Yards/Play")
                            else:
                                new_qual = qualifier.replace("TD", "TD/Att").replace("Yards", "Yards/Att")
                            qual_str = last_replace(qual_str, qualifier, new_qual)
                        if "reverse" in qual_obj["values"] and qual_obj["values"]["reverse"]:
                            qual_str += " [Reverse]"
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], True)) + "-" + (get_time_str(qual_obj["values"]["end_val"], True))
                        if "rate" in qual_obj["values"] and qual_obj["values"]["rate"]:
                            if qualifier.startswith("Opponent Points") or qualifier.startswith("Opponent TD") or qualifier.startswith("Team Points") or qualifier.startswith("Team TD"):
                                new_qual = qualifier.replace("Points", "Points/Play").replace("Yards", "Yards/Play")
                            else:
                                new_qual = qualifier.replace("TD", "TD/Att").replace("Yards", "Yards/Att")
                            qual_str = last_replace(qual_str, qualifier, new_qual)
                        if "reverse" in qual_obj["values"] and qual_obj["values"]["reverse"]:
                            qual_str += " [Reverse]"
                    if "position" in qual_obj["values"] and qual_obj["values"]["position"]:
                        qual_str += " against " + qual_obj["values"]["position"] + "s"
                elif qualifier == "Opponent Win Percentage" or qualifier == "Team Win Percentage" or qualifier == "Current Opponent Win Percentage" or qualifier == "Current Team Win Percentage":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], True, True)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], True, True)) + " to " + (get_time_str(qual_obj["values"]["end_val"], True, True))
                elif qualifier == "Offensive Snap Percentage" or qualifier == "Defensive Snap Percentage" or qualifier == "Special Teams Snap Percentage":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        if qual_obj["values"]["start_val"] == -float("inf"):
                            qual_str += "MIN"
                        elif qual_obj["values"]["start_val"] == float("inf"):
                            qual_str += "MAX"
                        else:
                            qual_str += ("{:.0f}").format(get_constant_data.round_value(100 * qual_obj["values"]["start_val"])) + "%"
                    else:
                        if qual_obj["values"]["start_val"] == -float("inf"):
                            qual_str += "MIN"
                        elif qual_obj["values"]["start_val"] == float("inf"):
                            qual_str += "MAX"
                        else:
                            qual_str += ("{:.0f}").format(get_constant_data.round_value(100 * qual_obj["values"]["start_val"])) + "%"
                        qual_str += " to "
                        if qual_obj["values"]["end_val"] == -float("inf"):
                            qual_str += "MIN"
                        elif qual_obj["values"]["end_val"] == float("inf"):
                            qual_str += "MAX"
                        else:
                            qual_str += ("{:.0f}").format(get_constant_data.round_value(100 * qual_obj["values"]["end_val"])) + "%"
                elif qualifier == "Start Time":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    start_time = datetime.datetime.now().replace(hour=qual_obj["values"]["start_val"].hour).replace(minute=qual_obj["values"]["start_val"].minute).replace(second=qual_obj["values"]["start_val"].second)
                    end_time = datetime.datetime.now().replace(hour=qual_obj["values"]["end_val"].hour).replace(minute=qual_obj["values"]["end_val"].minute).replace(second=qual_obj["values"]["end_val"].second)

                    if start_time == end_time:
                        qual_str += start_time.strftime("%I:%M%p")
                    else:
                        qual_str += start_time.strftime("%I:%M%p") + " to " + end_time.strftime("%I:%M%p")
                    qual_str += " " + qual_obj["values"]["time_zone"]
                elif qualifier == "Local Start Time" or qualifier == "Team Start Time" or qualifier == "Opponent Start Time":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    start_time = qual_obj["values"]["start_val"]
                    end_time = qual_obj["values"]["end_val"]

                    if start_time == end_time:
                        qual_str += start_time.strftime("%I:%M%p")
                    else:
                        qual_str += start_time.strftime("%I:%M%p") + " to " + end_time.strftime("%I:%M%p")
                elif qualifier == "Age" or qualifier == "Season Age":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    qual_str += qual_obj["compare_str"]
                else:
                    for sub_qualifier in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        
                        if qualifier == "Stat" or qualifier == "Previous Stat" or qualifier == "Upcoming Stat" or qualifier == "Season Stat" or qualifier == "Previous Season Stat" or qualifier == "Upcoming Season Stat" or qualifier == "Total Games Stat":
                            if "explain_str" in sub_qualifier and sub_qualifier["explain_str"]:
                                for explain_str in sub_qualifier["explain_str"]:
                                    qual_str += explain_str + " + "
                                qual_str = qual_str[:-3]
                            else:
                                if sub_qualifier["over_stat"]:
                                    qual_str += sub_qualifier["over_stat"].title() + ">"
                                qual_str += sub_qualifier["stat"].upper() + "="
                                if sub_qualifier["start_val"] == sub_qualifier["end_val"]:
                                    qual_str += get_time_str(sub_qualifier["start_val"], False)
                                else:
                                    qual_str += (get_time_str(sub_qualifier["start_val"], False)) + "-" + (get_time_str(sub_qualifier["end_val"], False))
                        elif qualifier == "Min Stat" or qualifier == "Max Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Max Streak Formula" or qualifier == "Count Streak Formula" or qualifier == "Quickest" or qualifier == "Slowest":
                            if "explain_str" in sub_qualifier and sub_qualifier["explain_str"]:
                                for explain_str in sub_qualifier["explain_str"]:
                                    qual_str += explain_str + " + "
                                qual_str = qual_str[:-3]
                            else:                                           
                                for stat in sub_qualifier["stats"]:
                                    if stat["over_stat"]:
                                        qual_str += sub_qualifier["over_stat"].title() + ">"
                                    qual_str += stat["stat"].upper()
                                    if stat["start_val"] == stat["end_val"]:
                                        qual_str += "=" + (get_time_str(stat["start_val"], False))
                                    else:
                                        if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                                            qual_str += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
                                    qual_str += " + "
                                qual_str = qual_str[:-3]
                                if sub_qualifier["start_level"] == sub_qualifier["end_level"]:
                                    if sub_qualifier["start_level"] != 1:
                                        qual_str += "|" + (get_time_str(sub_qualifier["start_level"], True)) + " Result"
                                else:
                                    qual_str += "|" + (get_time_str(sub_qualifier["start_level"], True)) + " Result to " + (get_time_str(sub_qualifier["end_level"], True)) + " Result"
                        else:
                            if sub_qualifier in get_constant_data.qualifier_map[qualifier]:
                                qual_str += get_constant_data.qualifier_map[qualifier][sub_qualifier]
                            else:
                                if qualifier == "Team" or qualifier == "Opponent" or qualifier == "Franchise Stadium" or qualifier == "Team Franchise" or qualifier == "Opponent Franchise" or qualifier == "Previous Team" or qualifier == "Upcoming Team" or qualifier == "Previous Opponent" or qualifier == "Upcoming Opponent" or qualifier == "Previous Team Franchise" or qualifier == "Upcoming Team Franchise" or qualifier == "Previous Opponent Franchise" or qualifier == "Upcoming Opponent Franchise" or qualifier == "Team League" or qualifier == "Opponent League" or qualifier == "Team Conference" or qualifier == "Opponent Conference" or qualifier == "Formula" or qualifier == "Season Formula" or qualifier == "Injury" or qualifier == "State" or qualifier == "Exact State" or qualifier == "Team State" or qualifier == "Team Exact State" or qualifier == "Opponent State" or qualifier == "Opponent Exact State" or qualifier == "Country" or qualifier == "Exact Country" or qualifier == "Team Country" or qualifier == "Team Exact Country" or qualifier == "Opponent Country" or qualifier == "Opponent Exact Country" or qualifier == "Start Position":
                                    sub_qualifier = sub_qualifier.upper()
                                elif qualifier == "Holiday" or qualifier == "City" or qualifier == "Exact City" or qualifier == "Team City" or qualifier == "Team Exact City" or qualifier == "Opponent City" or qualifier == "Opponent Exact City" or qualifier == "Surface" or qualifier == "Roof" or qualifier == "Moon Phase" or qualifier == "Exact Official" or qualifier == "Exact Referee" or qualifier == "Exact Umpire" or qualifier == "Exact Team Head Coach" or qualifier == "Exact Opponent Head Coach" or qualifier == "Official" or qualifier == "Referee" or qualifier == "Umpire" or qualifier == "Team Head Coach" or qualifier == "Opponent Head Coach" or qualifier == "Pass Distance" or qualifier == "Pass Direction" or qualifier == "Team Time Zone" or qualifier == "Team Exact Time Zone" or qualifier == "Opponent Time Zone" or qualifier == "Opponent Exact Time Zone" or qualifier == "Time Zone" or qualifier == "Exact Time Zone":
                                    sub_qualifier = sub_qualifier.title()
                                elif qualifier == "Stadium"  or qualifier == "Exact Stadium":
                                    if sub_qualifier.upper() in team_venues:
                                        sub_qualifier = team_venues[sub_qualifier.upper()]["venues"][len(team_venues[sub_qualifier.upper()]["venues"]) - 1] + " (" + sub_qualifier.upper() + ")"
                                    else:
                                        sub_qualifier = sub_qualifier.title()
                                elif qualifier == "Team Division" or qualifier == "Opponent Division":
                                    sub_qualifier_split = sub_qualifier.split("-")
                                    sub_qualifier = sub_qualifier_split[0].upper() + "-"
                                    if len(sub_qualifier_split) > 1:
                                        sub_qualifier += sub_qualifier_split[1].title()
                                elif qualifier == "Month":
                                    sub_qualifier = calendar.month_name[sub_qualifier]
                                elif qualifier == "Day":
                                    sub_qualifier = calendar.day_name[sub_qualifier]
                                elif qualifier == "Date":
                                    sub_qualifier = num2words(sub_qualifier, lang="en", to="ordinal_num")
                                qual_str += sub_qualifier           
                if len(subbb_frame["qualifiers"][qualifier]) > 1:
                    if "values" in qual_obj and isinstance(qual_obj["values"], list) and len(qual_obj["values"]) > 1:
                        qual_str += ")"
    
    return qual_str

def calculate_values(all_rows, player_type, og_player_data, extra_stats={}):
    player_data = {
        "stat_values": {
            "Shared" : {
                "YearStart" : og_player_data["stat_values"]["Shared"]["YearStart"],
                "YearEnd" : og_player_data["stat_values"]["Shared"]["YearEnd"],
                "DateStart" : og_player_data["stat_values"]["Shared"]["DateStart"],
                "DateEnd" : og_player_data["stat_values"]["Shared"]["DateEnd"],
                "is_playoffs" : og_player_data["stat_values"]["Shared"]["is_playoffs"]
            }
        }
    }

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    if player_type["da_type"]:
        for header in get_constant_data.stat_groups["Shared"]:
            if header != "Player":
                if header not in player_data["stat_values"]["Shared"]:
                    player_data["stat_values"]["Shared"][header] = 0.0

        for over_header in headers[player_type["da_type"]]:
            if not over_header in player_data["stat_values"]:
                player_data["stat_values"][over_header] = {}
            for header in get_constant_data.stat_groups[over_header]:
                player_data["stat_values"][over_header][header] = 0.0

    for row_data in all_rows:
        for over_header in row_data:
            for stat in row_data[over_header]:
                if stat == "hide_first_downs" and row_data[over_header][stat]:
                    player_data["stat_values"]["Shared"]["hide_first_downs"] = True
                elif stat != "is_playoffs" and stat in player_data["stat_values"][over_header] and isinstance(row_data[over_header][stat], numbers.Number) and isinstance(player_data["stat_values"][over_header][stat], numbers.Number) and (not stat in get_constant_data.qualifier_map or stat == "Team Score" or stat == "Opponent Score") and (seasons_leading or (not stat in get_constant_data.formulas[over_header] and not stat in advanced_stats and row_data[over_header][stat] != 0)):
                    player_data["stat_values"][over_header][stat] += row_data[over_header][stat]
                elif stat in string_stats:
                    if not player_data["stat_values"][over_header][stat]:
                        player_data["stat_values"][over_header][stat] = ""
                    player_data["stat_values"][over_header][stat] += row_data[over_header][stat] + "-"

    for over_header in player_data["stat_values"]:
        for stat in player_data["stat_values"][over_header]:
            if stat in string_stats:
                if player_data["stat_values"][over_header][stat]:
                    parsed_teams = set()
                    stat_vals = player_data["stat_values"][over_header][stat].split("-")
                    player_data["stat_values"][over_header][stat] = ""
                    for stat_val in stat_vals:
                        if stat_val and stat_val not in parsed_teams:
                            player_data["stat_values"][over_header][stat] += stat_val + "-"
                            parsed_teams.add(stat_val)
                    player_data["stat_values"][over_header][stat] = player_data["stat_values"][over_header][stat][:-1]
    
    if not seasons_leading:
        if "Scrimmage/All Purpose" in headers[player_type["da_type"]]:
            touches = 0.0
            yds = 0.0
            tds = 0
            apyds = 0
            aptd = 0

            if "Rushing" in headers[player_type["da_type"]]:
                touches += player_data["stat_values"]["Rushing"]["Att"]
                yds += player_data["stat_values"]["Rushing"]["Yds"]
                tds += player_data["stat_values"]["Rushing"]["TD"]
                apyds += player_data["stat_values"]["Rushing"]["Yds"]
                aptd += player_data["stat_values"]["Rushing"]["TD"]
            if "Receiving" in headers[player_type["da_type"]]:
                touches += player_data["stat_values"]["Receiving"]["Rec"]
                yds += player_data["stat_values"]["Receiving"]["Yds"]
                tds += player_data["stat_values"]["Receiving"]["TD"]
                apyds += player_data["stat_values"]["Receiving"]["Yds"]
                aptd += player_data["stat_values"]["Receiving"]["TD"]
            if "Kick Returns" in headers[player_type["da_type"]]:
                apyds += player_data["stat_values"]["Kick Returns"]["Yds"]
                aptd += player_data["stat_values"]["Kick Returns"]["TD"]
            if "Punt Returns" in headers[player_type["da_type"]]:
                apyds += player_data["stat_values"]["Punt Returns"]["Yds"]
                aptd += player_data["stat_values"]["Punt Returns"]["TD"]
            if "Defense" in headers[player_type["da_type"]]:
                apyds += player_data["stat_values"]["Defense"]["FR Yds"]
                apyds += player_data["stat_values"]["Defense"]["Int Yds"]
                aptd += player_data["stat_values"]["Defense"]["FR TD"]
                aptd += player_data["stat_values"]["Defense"]["Int TD"]

            player_data["stat_values"]["Scrimmage/All Purpose"]["Touch"] = touches
            player_data["stat_values"]["Scrimmage/All Purpose"]["Yds"] = yds
            player_data["stat_values"]["Scrimmage/All Purpose"]["TD"] = tds
            player_data["stat_values"]["Scrimmage/All Purpose"]["APYds"] = apyds
            player_data["stat_values"]["Scrimmage/All Purpose"]["APTD"] = aptd

        for stat in get_constant_data.formulas["Shared"]:
            formula = get_constant_data.formulas["Shared"][stat]
            value = get_constant_data.calculate_formula(stat, formula, player_data["stat_values"], "Shared", headers, og_player_data, player_type, all_rows)
            player_data["stat_values"]["Shared"][stat] = value
        for over_header in headers[player_type["da_type"]]:
            if over_header != "Fantasy":
                for stat in get_constant_data.formulas[over_header]:
                    formula = get_constant_data.formulas[over_header][stat]
                    value = get_constant_data.calculate_formula(stat, formula, player_data["stat_values"], over_header, headers, og_player_data, player_type, all_rows)
                    player_data["stat_values"][over_header][stat] = value

        if "Fantasy" in headers[player_type["da_type"]]:
            for stat in list(player_data["stat_values"]["Fantasy"]):
                per_game_val = 0
                try:
                    per_game_val = player_data["stat_values"]["Fantasy"][stat] / player_data["stat_values"]["Shared"]["G"]
                except ZeroDivisionError:
                    pass

                player_data["stat_values"]["Fantasy"][stat + "/G"] = per_game_val
                player_data["stat_values"]["Fantasy"][stat + "/17G"] = per_game_val * 17

                all_vals = []
                for row in all_rows:
                    if "Fantasy" in row and stat in row["Fantasy"]:
                        all_vals.append(row["Fantasy"][stat])
                
                if all_vals:
                    player_data["stat_values"]["Fantasy"][stat + " Median"] = statistics.median(all_vals)
                    player_data["stat_values"]["Fantasy"][stat + " High"] = max(all_vals)
                    player_data["stat_values"]["Fantasy"][stat + " Low"] = min(all_vals)

                    variance = 0.0
                    if len(all_vals) > 1:
                        try:
                            variance = statistics.stdev(all_vals) / per_game_val
                        except ZeroDivisionError:
                            pass
                    player_data["stat_values"]["Fantasy"][stat + " Variance"] = variance

    if not seasons_leading:
        try:
            calculate_advanced_stats(player_data["stat_values"], all_rows, og_player_data, player_type)
        except:
            og_player_data["error_getting_adj"] = True

        if "Advanced/Defense" in headers[player_type["da_type"]]:
            total_games = 0
            total_games_started = 0
            for row in all_rows:
                if row["Shared"]["Year"] >= 2018:
                    if "G" in row["Shared"]:
                        total_games += row["Shared"]["G"]
                    if "GS" in row["Shared"]:
                        total_games_started += row["Shared"]["GS"]
            player_data["stat_values"]["Shared"]["G_Adv"] = total_games
            player_data["stat_values"]["Shared"]["GS_Adv"] = total_games_started

    return player_data

def handle_multi_player_data(player_id, time_frames, player_type, player_page, is_fantasy, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj):
    player_data = {
        "id": player_id,
        "rows" : [],
        "seperate_rows" : []
    }

    needs_numbers = False
    for time_frame in time_frames:
        if "Number" in time_frame["qualifiers"] or "number" in extra_stats or "career-number" in extra_stats:
            needs_numbers =  True
            break

    player_data["Player"] = get_player_name(player_page)
    try:
        player_data["LastUpdated"] = get_last_updated(player_page)
    except Exception:
        player_data["LastUpdated"] = None
    player_data["Birthday"] = get_player_birthday(player_page)
    player_data["Deathday"] = get_player_deathday(player_page)
    player_data["player_image_url"] = get_player_image(player_page)
    player_data["player_current_team"], player_data["player_current_team_link"], player_data["player_current_number"], player_data["player_all_numbers"] = get_player_current_team_number(player_page, needs_numbers)
    player_data["player_position"] = get_player_position(player_page)
    player_data["player_hof"] = get_player_hof(player_page)
    player_data["year_valid_years"], player_data["reg_year_valid_years"], player_data["game_valid_years"], valid_teams, raw_valid_teams, valid_year_teams = get_valid_years(player_page)
    player_data["valid_year_teams"] = valid_year_teams
    player_data["has_season_stats"] = True
    player_data["has_award_stats"] = True
    player_data["error_getting_pen"] = False
    player_data["error_getting_fmb_lst"] = False
    player_data["error_getting_adv"] = False
    player_data["error_getting_pick"] = False
    player_data["error_getting_gwd"] = False

    ind_player_type = get_player_type(player_page)

    player_data["DateStart"] = []
    player_data["DateEnd"] = []
    player_data["YearStart"] = []
    player_data["YearEnd"] = []
    player_data["is_playoffs"] = []
    player_data["Type"] = ind_player_type

    any_missing_games = False

    for time_frame in time_frames:
        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting player " + player_id)
        if ("Facing Former Team" in time_frame["qualifiers"] or "Facing Former Franchise" in time_frame["qualifiers"] or "With New Team" in time_frame["qualifiers"] or "With New Franchise" in time_frame["qualifiers"]) and not "valid_teams_order" in player_data:
            get_team_map_info(player_data, player_type, raw_valid_teams, comment_obj)
        if ("Game After Sub Query" in time_frame["qualifiers"] or "Game Before Sub Query" in time_frame["qualifiers"] or "Games Rest" in time_frame["qualifiers"] or "Starts Rest" in time_frame["qualifiers"] or "Days In A Row" in time_frame["qualifiers"] or "Games In A Row" in time_frame["qualifiers"] or "Starts In A Row" in time_frame["qualifiers"] or "Game Days Rest" in time_frame["qualifiers"] or "Start Days Rest" in time_frame["qualifiers"] or "Start Days In A Row" in time_frame["qualifiers"] or "Game Days In A Row" in time_frame["qualifiers"] or "Days Rest" in time_frame["qualifiers"] or "Starts Days Rest" in time_frame["qualifiers"] or "Upcoming Days Rest" in time_frame["qualifiers"] or "Upcoming Starts Days Rest" in time_frame["qualifiers"]) and not "all_games" in player_data:
            get_all_games(player_data, time_frame, player_type, comment_obj)
        row, missing_games = handle_player_data(player_data, time_frame, player_type, player_page, is_fantasy, ind_player_type, valid_teams, valid_year_teams, extra_stats)

        if remove_duplicates:
            current_dates = set([row_data["Shared"]["Date"] for row_data in player_data["rows"]])
            new_rows = []
            for row_data in row:
                if row_data["Shared"]["Date"] not in current_dates:
                    new_rows.append(row_data)
            row = new_rows
        
        if remove_duplicate_games:
            current_dates = set([row_data["Shared"]["Date"] for row_data in player_data["rows"]])
            for row_data in row:
                if row_data["Shared"]["Date"] in current_dates:
                    row_data["Shared"]["G"] = 0
                    row_data["Shared"]["GS"] = 0

        date_start = 0
        date_end = 0
        year_start = 0
        year_end = 0

        for row_data in row:
            for stat in row_data["Shared"]:
                if stat == "Date":
                    if date_start == 0 or row_data["Shared"][stat] < date_start:
                        date_start = row_data["Shared"][stat]
                    if date_end == 0 or row_data["Shared"][stat] > date_end:
                        date_end = row_data["Shared"][stat]
                elif stat == "Year":
                    if year_start == 0 or row_data["Shared"][stat] < year_start:
                        year_start = row_data["Shared"][stat]
                    if year_end == 0 or row_data["Shared"][stat] > year_end:
                        year_end = row_data["Shared"][stat]
        
        if date_start:
            player_data["DateStart"].append(date_start)
        if date_end:
            player_data["DateEnd"].append(date_end)
        if year_start:
            player_data["YearStart"].append(year_start)
        if year_end:
            player_data["YearEnd"].append(year_end)
        player_data["is_playoffs"].append(time_frame["playoffs"])

        player_data["rows"] += row
        player_data["seperate_rows"] += [row]

        if missing_games:
            any_missing_games = True
        
        if comment_obj and comment_obj["is_approved"]:
            try:
                string_output = format_alert_message(comment_obj)
                if comment_obj["reply"]:
                    if isinstance(comment_obj["reply"], Message):
                        #comment_obj["comment"].reply(string_output.split(alert_message + "\n\n", 1)[1])
                        pass
                    else:
                        if display_progress_as_edit:
                            comment_obj["reply"].edit(string_output)
                        #else:
                        #    comment_obj["reply"].delete()
                        #    comment_obj["reply"] = None
                        #    comment_obj["reply"] = comment_obj["comment"].reply(string_output)
                    logger.info("#" + str(threading.get_ident()) + "#   User alert edited")
            except Exception:
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())

        logger.info("#" + str(threading.get_ident()) + "#   " + "Done with player " + player_id)

    return player_data, any_missing_games

def handle_player_data(player_data, time_frame, player_type, player_page, is_fantasy, ind_player_type, valid_teams, valid_year_teams, extra_stats):
    time_frame = {
        "playoffs" : time_frame["playoffs"],
        "time_start" : time_frame["time_start"],
        "time_end" : time_frame["time_end"],
        "type" : time_frame["type"],
        "qualifiers" : time_frame["qualifiers"]
    }
    
    if "Start If QB" in time_frame["qualifiers"]:
        if "Passing" in headers[player_type["da_type"]] and headers[player_type["da_type"]]["Passing"] and not "Start" in time_frame["qualifiers"]:
            time_frame["qualifiers"]["Start"] = []
            for qualifier in time_frame["qualifiers"]["Start If QB"]:
                time_frame["qualifiers"]["Start"].append(qualifier)
        del time_frame["qualifiers"]["Start If QB"]
    
    is_qual_match = False
    is_qual_match_excl_round = False
    for qualifier in time_frame["qualifiers"]:
        if qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team League" and qualifier != "Team Conference" and qualifier != "Team Division" and qualifier != "Rookie" and qualifier != "Max Stat" and qualifier != "Min Stat" and qualifier != "Max Streak" and qualifier != "Max Stretch" and qualifier != "Count Streak" and qualifier != "Quickest"  and qualifier != "Slowest" and qualifier != "Season Stat" and qualifier != "Season Age" and qualifier != "Season" and qualifier != "Season Reversed" and qualifier != "Season Index" and qualifier != "Season Index Reversed" and qualifier != "Previous Season Stat"  and qualifier != "Upcoming Season Stat" and qualifier != "Season Sub Query" and qualifier != "Or Season Sub Query" and qualifier != "Season Before Sub Query" and qualifier != "Season After Sub Query" and qualifier != "Winning Team" and qualifier != "Losing Team" and qualifier != "Tied Team" and qualifier !=  "Winning Or Tied Team" and qualifier !=  "Losing Or Tied Team" and qualifier != "Playoff Team" and qualifier != "Champ Winner Team" and qualifier != "Conference Winner Team" and qualifier != "Division Winner Team" and qualifier != "Team Win Percentage" and qualifier != "Team Games Over 500" and qualifier != "Team Wins" and qualifier != "Team Losses" and qualifier != "Team Ties" and qualifier != "Team Points Rank" and qualifier != "Team Points Allowed Rank" and qualifier != "Team Yards Rank" and qualifier != "Team Yards Allowed Rank" and qualifier != "Team Pass TD Rank" and qualifier != "Team Pass TD Allowed Rank" and qualifier != "Team Pass Yards Rank" and qualifier != "Team Pass Yards Allowed Rank" and qualifier != "Team ANY/A Rank" and qualifier != "Team ANY/A Allowed Rank" and qualifier != "Team Passer Rating Rank" and qualifier != "Team Passer Rating Allowed Rank" and qualifier != "Team Rush TD Rank" and qualifier != "Team Rush TD Allowed Rank" and qualifier != "Team Rush Yards Rank" and qualifier != "Team Rush Yards Allowed Rank" and qualifier != "Team Fantasy Position Rank" and qualifier != "Season Formula" and qualifier != "Team Had Bye" and qualifier != "Number" and qualifier != "Even Year" and qualifier != "Odd Year" and qualifier != "Year" and qualifier != "Team City" and qualifier != "Team Exact City" and qualifier != "Team State" and qualifier != "Team Exact State" and qualifier != "Team Country" and qualifier != "Team Exact Country" and qualifier != "Team Time Zone" and qualifier != "Team Exact Time Zone":
            is_qual_match = True
            if qualifier != "Round" and qualifier != "Super Bowl":
                is_qual_match_excl_round = True
        elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
            for qual_object in time_frame["qualifiers"][qualifier]:
                for stat_obj in qual_object["values"]:
                    if not stat_obj["time_frame"] or not (stat_obj["time_frame"]["qual_type"] == "Seasons" or stat_obj["time_frame"]["qual_type"] == "Teams"):
                        is_qual_match = True
                        is_qual_match_excl_round = True

    missing_games = False
    valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]
    if not (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int))) or is_qual_match:
        is_seasons = (time_frame["type"].startswith("season") and not is_qual_match) or time_frame["playoffs"] == "Only"
        if not is_seasons:
            valid_years = player_data["game_valid_years"]
            if time_frame["playoffs"] != "Only":
                if min(player_data["year_valid_years"]) < 1950:
                    missing_games = True

    all_rows = []

    if "Rookie" in time_frame["qualifiers"]:
        determine_rookie_years(player_page, time_frame["qualifiers"]["Rookie"])

    is_game = (is_fantasy and "Fantasy" in headers[player_type["da_type"]]) or not (time_frame["type"].startswith("season") or (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)))) or is_qual_match
    is_game_page = is_game or time_frame["playoffs"]
    is_only_round = (time_frame["type"].startswith("season") or (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)))) and ("Round" in time_frame["qualifiers"] or "Super Bowl" in time_frame["qualifiers"]) and not is_qual_match_excl_round
    if is_only_round and "Round" in time_frame["qualifiers"]:
        is_only_round = False
        for qual_object in time_frame["qualifiers"]["Round"]:
            if not qual_object["negate"]:
                if "sb" in qual_object["values"]:
                    is_only_round = True
                    break
    if is_only_round and "Super Bowl" in time_frame["qualifiers"]:
        for qual_object in time_frame["qualifiers"]["Super Bowl"]:
            if qual_object["negate"]:
                is_only_round = False

    og_player_page = player_page
    if (is_fantasy and "Fantasy" in headers[player_type["da_type"]]) or not (time_frame["type"].startswith("season") or (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)))) or is_qual_match:
        player_url = game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"])
        request = urllib.request.Request(player_url, headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return [], missing_games
            else:
                raise

    gwd_data = None
    pick_six_data = None
    penalty_data = None

    if "Era Adjusted Passing" in headers[player_type["da_type"]] and headers[player_type["da_type"]]["Era Adjusted Passing"]:
        if is_game_page:
            try:
                gwd_data = handle_gwd(player_data)
            except Exception:
                player_data["error_getting_gwd"] = True
        try:
            pick_six_data = handle_pick_sixes(player_data)
        except Exception:
            player_data["error_getting_pick"] = True

    if "Penalties/Snaps" in headers[player_type["da_type"]] and headers[player_type["da_type"]]["Penalties/Snaps"]:
        try:
            penalty_data = handle_penalties(player_data, player_type, ind_player_type, is_game_page)
        except Exception:
            player_data["error_getting_pen"] = True

    playoff_data = None
    if time_frame["playoffs"]:
        player_url = game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"])
        request = urllib.request.Request(player_url, headers=request_headers)
        try:
            response, playoff_player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return [], missing_games
            else:
                raise
            
        playoff_data = parse_table(playoff_player_page, player_data, None, None, player_type, ind_player_type, gwd_data, pick_six_data, penalty_data)
    
    if time_frame["playoffs"]:
        if not (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int))):
            valid_years = add_valid_playoff_years(valid_years, playoff_data, time_frame)

    if time_frame["type"].startswith("season"):
        if not valid_years:
            time_frame["time_start"] = -1
            time_frame["time_end"] = -1
        elif time_frame["type"].startswith("season-range"):
            if not time_frame["time_start"]:
                time_index_end = time_frame["time_end"] - 1
                time_index_start = time_index_end
            elif not time_frame["time_end"]:
                time_index_start = time_frame["time_start"] - 1
                time_index_end = time_index_start
            else:
                time_index_start = time_frame["time_start"] - 1
                time_index_end = time_frame["time_end"] - 1
            
            if time_frame["type"] == "season-range-reversed":
                temp_time_index_end = time_index_end
                time_index_end = len(valid_years) - time_index_start - 1
                time_index_start = len(valid_years) - temp_time_index_end - time_index_start

            if time_index_start < 0:
                time_index_start = 0
            if time_index_end < 0:
                time_index_end = 0
            if time_index_start > len(valid_years) - 1:
                time_frame["time_start"] = -1
                time_frame["time_end"] = -1
            else:
                if time_index_end > len(valid_years) - 1:
                    time_index_end = len(valid_years) - 1
                time_frame["time_start"] = valid_years[time_index_start]
                time_frame["time_end"] = valid_years[time_index_end]
        elif time_frame["time_start"]:
            time_index = time_frame["time_start"]
            time_frame["time_start"] = valid_years[0]
            time_index = len(valid_years) - 1 if time_index > len(valid_years) else time_index - 1
            time_frame["time_end"] = valid_years[time_index]
        else:
            time_index = len(valid_years) - time_frame["time_end"]
            time_frame["time_end"] = valid_years[len(valid_years) - 1]
            time_index = 0 if time_index < 0 else time_index
            time_frame["time_start"] = valid_years[time_index]
        time_frame["type"] = "date"
    elif time_frame["type"] == "date":
        if isinstance(time_frame["time_end"], dateutil.relativedelta.relativedelta):
            if not player_data["game_valid_years"]:
                time_frame["time_start"] = -1
                time_frame["time_end"] = -1
            else:
                first_year =  player_data["game_valid_years"][0]
                temp_time_frame = {
                    "type" : "date",
                    "time_start" : first_year,
                    "time_end" : first_year,
                    "qualifiers" : []
                }
                temp_rows = parse_table(player_page, player_data, temp_time_frame, True, player_type, ind_player_type, gwd_data, pick_six_data, penalty_data)
                if time_frame["playoffs"]:
                    temp_rows = handle_playoffs_data(temp_rows, player_data, player_type, ind_player_type, playoff_data, temp_time_frame, (is_fantasy and "Fantasy" in headers[player_type["da_type"]]))
                if temp_rows:
                    first_date = temp_rows[0]["Date"]

                    if time_frame["time_end"].microseconds:
                        if time_frame["time_end"].seconds == 1:
                            first_date = first_date - datetime.timedelta(days=first_date.weekday()) + dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                            time_frame["time_end"] = first_date + time_frame["time_end"]
                        elif time_frame["time_end"].seconds == 2:
                            first_date = datetime.datetime(first_date.year, first_date.month, 1).date() + dateutil.relativedelta.relativedelta(years=0, months=1, weeks=0, days=0)
                            time_frame["time_end"] = first_date + time_frame["time_end"]
                            original_day = time_frame["time_end"].day
                            time_frame["time_end"] = time_frame["time_end"].replace(day=1)
                            if original_day <= 15:
                                time_frame["time_end"] = time_frame["time_end"].replace(month=(time_frame["time_end"].month - 1))
                            time_frame["time_end"] = time_frame["time_end"].replace(day=calendar.monthrange(time_frame["time_end"].year, time_frame["time_end"].month)[1])
                        elif time_frame["time_end"].seconds == 3:
                           first_date = datetime.datetime(first_date.year, 1, 1).date() + dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                           time_frame["time_end"] = first_date + time_frame["time_end"]
                    else:
                        time_frame["time_end"] = first_date + time_frame["time_end"]

                    time_frame["time_start"] = first_date
                else:
                    time_frame["time_start"] = -1
                    time_frame["time_end"] = -1

    if time_frame["playoffs"] == "Only":
        all_rows = handle_playoffs_data(all_rows, player_data, player_type, ind_player_type, playoff_data, time_frame, (is_fantasy and "Fantasy" in headers[player_type["da_type"]]))
    else:
        if time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)):
            if is_qual_match:
                all_rows += parse_table(player_page, player_data, time_frame, True, player_type, ind_player_type, gwd_data, pick_six_data, penalty_data)
            else:
                all_rows += parse_table(player_page, player_data, time_frame, (is_fantasy and "Fantasy" in headers[player_type["da_type"]]), player_type, ind_player_type, gwd_data, pick_six_data, penalty_data)
                
            if time_frame["playoffs"]:
                all_rows = handle_playoffs_data(all_rows, player_data, player_type, ind_player_type, playoff_data, time_frame, (is_fantasy and "Fantasy" in headers[player_type["da_type"]]))
        else:
            all_rows += parse_table(player_page, player_data, time_frame, True, player_type, ind_player_type, gwd_data, pick_six_data, penalty_data)
                    
            if time_frame["playoffs"]:
                all_rows = handle_playoffs_data(all_rows, player_data, player_type, ind_player_type, playoff_data, time_frame, (is_fantasy and "Fantasy" in headers[player_type["da_type"]]))
    
    if not is_game_page:
        if "Rushing" in headers[player_type["da_type"]]:
            try:
                handle_fumbles_lost(player_data, all_rows, player_type, ind_player_type, time_frame)
            except Exception:
                player_data["error_getting_fmb_lst"] = True
        handle_missing_playoff_rows(player_page, player_data, valid_years, all_rows, player_type, ind_player_type, time_frame)

    if is_game:
        handle_date_row_data(all_rows)

    pre_qual_teams = set([row["Shared"]["Tm"] for row in all_rows])
    pre_qual_years = set([row["Shared"]["Year"] for row in all_rows])

    pre_qual_teams_map = {}
    for year in pre_qual_years:
        pre_qual_teams_map[year] = set([row["Shared"]["Tm"] for row in all_rows if row["Shared"]["Year"] == year])

    pre_qual_years_no_playoffs = set([row["Shared"]["Year"] for row in all_rows])
    pre_qual_teams_map_no_playoffs = {}
    for year in pre_qual_years_no_playoffs:
        pre_qual_teams_map_no_playoffs[year] = set([row["Shared"]["Tm"] for row in all_rows if row["Shared"]["Year"] == year and not row["Shared"]["is_playoffs"]])

    has_spread_stat_qual = False
    for qualifier in time_frame["qualifiers"]:
        if "Season" not in qualifier and "State" not in qualifier and ("Stat" in qualifier or "Streak" in qualifier or "Stretch" in qualifier or ("Formula" in qualifier and qualifier != "Event Formula") or "Quickest" in qualifier or "Slowest" in qualifier):
            for qual_object in time_frame["qualifiers"][qualifier]:
                for sub_qual_object in qual_object["values"]:
                    if "Formula" in qualifier:
                        stats = qual_object["values"]
                    else:
                        if "stats" in sub_qual_object:
                            stats = []
                            for stat in sub_qual_object["stats"]:
                                stats.append(stat["stat"])
                        else:
                            stats = [sub_qual_object["stat"]]
                for stat in stats:
                    if "spread" in stat or "overunder" in stat or "spreadmargin" in stat or "oumargin" in stat or "atsteamw" in stat or "atsteaml" in stat or "atsteamt" in stat or "ousteamw" in stat or "outeaml" in stat or "outeamt" in stat:
                        has_spread_stat_qual = True

    for extra_stat in extra_stats:
        if extra_stat.startswith("show-stat-"):
            stat = extra_stat.split("show-stat-", 1)[1]
            if "spread" in stat or "overunder" in stat or "spreadmargin" in stat or "oumargin" in stat or "atsteamw" in stat or "atsteaml" in stat or "atsteamt" in stat or "ousteamw" in stat or "outeaml" in stat or "outeamt" in stat:
                has_spread_stat_qual = True
    
    fix_first_downs(pre_qual_teams_map_no_playoffs, all_rows)
    
    if "Week" in time_frame["qualifiers"] or "Weeks" in time_frame["qualifiers"] and time_frame["playoffs"]:
        handle_playoff_weeks(all_rows)
    
    if "Week" in time_frame["qualifiers"]:
        new_rows = []
        for row in all_rows:
            add_row = True
            for qual_object in time_frame["qualifiers"]["Week"]:
                if qual_object["negate"]:
                    if row["Shared"]["Week"] >= qual_object["values"]["start_val"] and row["Shared"]["Week"] <= qual_object["values"]["end_val"]:
                        add_row = False
                else:
                    if not (row["Shared"]["Week"] >= qual_object["values"]["start_val"] and row["Shared"]["Week"] <= qual_object["values"]["end_val"]):
                        add_row = False
            if add_row:
                new_rows.append(row)
        all_rows = new_rows
    
    if "Weeks" in time_frame["qualifiers"]:
        all_rows = handle_week_qual(all_rows, time_frame["qualifiers"]["Weeks"], player_data, time_frame["playoffs"])
    
    if "Round" in time_frame["qualifiers"] or "Start Time" in time_frame["qualifiers"] or "Team Start Time" in time_frame["qualifiers"] or "Opponent Start Time" in time_frame["qualifiers"] or "National Game" in time_frame["qualifiers"] or "Team League" in time_frame["qualifiers"] or "Team Conference" in time_frame["qualifiers"] or "Team Division" in time_frame["qualifiers"] or "Intraleague" in time_frame["qualifiers"] or "Interleague" in time_frame["qualifiers"] or "Intraconference" in time_frame["qualifiers"]  or "Interconference" in time_frame["qualifiers"] or "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"] or "Team Game" in time_frame["qualifiers"] or "Team Game Reversed" in time_frame["qualifiers"] or "First Half" in time_frame["qualifiers"] or "Second Half" in time_frame["qualifiers"] or "Games Rest" in time_frame["qualifiers"] or "Starts Rest" in time_frame["qualifiers"] or "Days In A Row" in time_frame["qualifiers"] or "Games In A Row" in time_frame["qualifiers"] or "Starts In A Row" in time_frame["qualifiers"] or "Team After Bye" in time_frame["qualifiers"] or "Team Before Bye" in time_frame["qualifiers"] or "Team After Playoffs Bye" in time_frame["qualifiers"] or "Team Before Playoffs Bye" in time_frame["qualifiers"] or "Team After Playoffs Bye" in time_frame["qualifiers"] or "Team Before Playoffs Bye" in time_frame["qualifiers"] or "Team Game After Bye" in time_frame["qualifiers"] or "Team Game Before Bye" in time_frame["qualifiers"] or "Team Had Bye" in time_frame["qualifiers"] or "Previous Team Result" in time_frame["qualifiers"] or "Upcoming Team Result" in time_frame["qualifiers"] or "Overtime Result" in time_frame["qualifiers"]:
        all_rows = handle_schedule_stats(all_rows, time_frame["qualifiers"], time_frame["playoffs"])

    if "Probable" in time_frame["qualifiers"] or "Questionable" in time_frame["qualifiers"] or "Doubtful" in time_frame["qualifiers"] or "Injured" in time_frame["qualifiers"] or "Injury" in time_frame["qualifiers"]:
        all_rows = handle_injury_stats(player_data, all_rows, time_frame["qualifiers"])
    
    if has_spread_stat_qual or "Spread" in time_frame["qualifiers"] or "Over/Under" in time_frame["qualifiers"] or "Spread Margin" in time_frame["qualifiers"] or "Over/Under Margin" in time_frame["qualifiers"] or "Underdog" in time_frame["qualifiers"] or "Favorite" in time_frame["qualifiers"] or "ats-record" in extra_stats or "ou-record" in extra_stats:
        all_rows = handle_spread_stats(player_data, all_rows, time_frame["qualifiers"])
    
    if "Winning Opponent" in time_frame["qualifiers"] or "Losing Opponent" in time_frame["qualifiers"] or "Tied Opponent" in time_frame["qualifiers"] or "Winning Or Tied Opponent" in time_frame["qualifiers"] or "Losing Or Tied Opponent" in time_frame["qualifiers"] or "Playoff Opponent" in time_frame["qualifiers"] or "Champ Winner Opponent" in time_frame["qualifiers"] or "Conference Winner Opponent" in time_frame["qualifiers"] or "Division Winner Opponent" in time_frame["qualifiers"] or "Opponent Points Rank" in time_frame["qualifiers"] or "Opponent Points Allowed Rank" in time_frame["qualifiers"] or "Opponent Yards Rank" in time_frame["qualifiers"] or "Opponent Yards Allowed Rank" in time_frame["qualifiers"] or "Opponent Pass TD Rank" in time_frame["qualifiers"] or "Opponent Pass TD Allowed Rank" in time_frame["qualifiers"] or "Opponent Pass Yards Rank" in time_frame["qualifiers"] or "Opponent Pass Yards Allowed Rank" in time_frame["qualifiers"] or "Opponent Rush TD Rank" in time_frame["qualifiers"] or "Opponent Rush TD Allowed Rank" in time_frame["qualifiers"] or "Opponent Rush Yards Rank" in time_frame["qualifiers"] or "Opponent Rush Yards Allowed Rank" in time_frame["qualifiers"] or "Opponent ANY/A Rank" in time_frame["qualifiers"] or "Opponent ANY/A Allowed Rank" in time_frame["qualifiers"]  or "Opponent Passer Rating Rank" in time_frame["qualifiers"] or "Opponent Passer Rating Allowed Rank" in time_frame["qualifiers"] or "Opponent Fantasy Position Rank" in time_frame["qualifiers"] or "Team Win Percentage" in time_frame["qualifiers"] or "Team Wins" in time_frame["qualifiers"] or "Team Losses" in time_frame["qualifiers"] or "Team Ties" in time_frame["qualifiers"] or "Opponent Wins" in time_frame["qualifiers"] or "Opponent Losses" in time_frame["qualifiers"] or "Opponent Ties" in time_frame["qualifiers"] or "Team Games Over 500" in time_frame["qualifiers"] or "Opponent Games Over 500" in time_frame["qualifiers"] or "Winning Team" in time_frame["qualifiers"] or "Losing Team" in time_frame["qualifiers"] or "Tied Team" in time_frame["qualifiers"] or "Winning Or Tied Team" in time_frame["qualifiers"] or "Losing Or Tied Team" in time_frame["qualifiers"] or "Playoff Team" in time_frame["qualifiers"] or "Champ Winner Team" in time_frame["qualifiers"] or "Conference Winner Team" in time_frame["qualifiers"] or "Division Winner Team" in time_frame["qualifiers"] or "Team Points Rank" in time_frame["qualifiers"] or "Team Points Allowed Rank" in time_frame["qualifiers"] or "Team Yards Rank" in time_frame["qualifiers"] or "Team Yards Allowed Rank" in time_frame["qualifiers"] or "Team Pass TD Rank" in time_frame["qualifiers"] or "Team Pass TD Allowed Rank" in time_frame["qualifiers"] or "Team Pass Yards Rank" in time_frame["qualifiers"] or "Team Pass Yards Allowed Rank" in time_frame["qualifiers"] or "Team Rush TD Rank" in time_frame["qualifiers"] or "Team Rush TD Allowed Rank" in time_frame["qualifiers"] or "Team Rush Yards Rank" in time_frame["qualifiers"] or "Team Rush Yards Allowed Rank" in time_frame["qualifiers"] or "Team ANY/A Rank" in time_frame["qualifiers"] or "Team ANY/A Allowed Rank" in time_frame["qualifiers"]  or "Team Passer Rating Rank" in time_frame["qualifiers"] or "Team Passer Rating Allowed Rank" in time_frame["qualifiers"] or "Team Fantasy Position Rank" in time_frame["qualifiers"] or "Opponent Win Percentage" in time_frame["qualifiers"] or "Opponent League" in time_frame["qualifiers"] or "Opponent Conference" in time_frame["qualifiers"] or "Opponent Division" in time_frame["qualifiers"] or "Intraleague" in time_frame["qualifiers"] or "Interleague" in time_frame["qualifiers"] or "Intraconference" in time_frame["qualifiers"]  or "Interconference" in time_frame["qualifiers"] or "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"]:
        all_rows = handle_opponent_schedule_stats(all_rows, time_frame["qualifiers"])

    if "Opponent After Bye" in time_frame["qualifiers"] or "Opponent Before Bye" in time_frame["qualifiers"] or "Opponent After Playoffs Bye" in time_frame["qualifiers"] or "Opponent Before Playoffs Bye" in time_frame["qualifiers"] or "Opponent After Playoffs Bye" in time_frame["qualifiers"] or "Opponent Before Playoffs Bye" in time_frame["qualifiers"] or "Opponent Game After Bye" in time_frame["qualifiers"] or "Opponent Game Before Bye" in time_frame["qualifiers"] or "Opponent Had Bye" in time_frame["qualifiers"]:
        all_rows = handle_indv_opponent_schedule_stats(all_rows, time_frame["qualifiers"])
    
    if "Intraleague" in time_frame["qualifiers"] or "Interleague" in time_frame["qualifiers"] or "Intraconference" in time_frame["qualifiers"]  or "Interconference" in time_frame["qualifiers"] or "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"]:
        new_rows = []
        for row in all_rows:
            if perform_team_opponent_schedule_qualifiers(row, time_frame["qualifiers"]):
                new_rows.append(row)
        all_rows = new_rows
    
    if time_frame["qualifiers"]:
        new_rows = []
        for row_data in all_rows:
            if perform_qualifier(player_data, player_type, ind_player_type, row_data, time_frame, all_rows):
                new_rows.append(row_data)
        all_rows = new_rows

    needs_qb_starts = "Era Adjusted Passing" in headers[player_type["da_type"]] and "Era Adjusted Passing" in headers[ind_player_type] and is_game_page
    
    if "Start Position" in time_frame["qualifiers"] or "Exact Official" in time_frame["qualifiers"] or "Exact Referee" in time_frame["qualifiers"] or "Exact Umpire" in time_frame["qualifiers"] or "Exact Team Head Coach" in time_frame["qualifiers"] or "Exact Opponent Head Coach" in time_frame["qualifiers"] or "Official" in time_frame["qualifiers"] or "Referee" in time_frame["qualifiers"] or "Umpire" in time_frame["qualifiers"] or "Team Head Coach" in time_frame["qualifiers"] or "Opponent Head Coach" in time_frame["qualifiers"] or "Franchise Stadium" in time_frame["qualifiers"] or "Stadium" in time_frame["qualifiers"] or "Exact Stadium" in time_frame["qualifiers"] or "Local Start Time" in time_frame["qualifiers"] or "Exact City" in time_frame["qualifiers"] or "City" in time_frame["qualifiers"] or "Exact State" in time_frame["qualifiers"] or "State" in time_frame["qualifiers"] or "Exact Time Zone" in time_frame["qualifiers"] or "Time Zone" in time_frame["qualifiers"] or "Exact Country" in time_frame["qualifiers"] or "Country" in time_frame["qualifiers"] or "Surface" in time_frame["qualifiers"] or "Roof" in time_frame["qualifiers"] or "Temperature" in time_frame["qualifiers"] or "Wind" in time_frame["qualifiers"] or "Wind Chill" in time_frame["qualifiers"] or "Humidity" in time_frame["qualifiers"] or "Current Winning Opponent" in time_frame["qualifiers"] or "Current Losing Opponent" in time_frame["qualifiers"] or "Current Tied Opponent" in time_frame["qualifiers"] or "Current Winning Or Tied Opponent" in time_frame["qualifiers"] or "Current Losing Or Tied Opponent" in time_frame["qualifiers"] or "Current Winning Team" in time_frame["qualifiers"] or "Current Losing Team" in time_frame["qualifiers"] or "Current Tied Team" in time_frame["qualifiers"] or "Current Winning Or Tied Team" in time_frame["qualifiers"] or "Current Losing Or Tied Team" in time_frame["qualifiers"] or "Current Team Win Percentage" in time_frame["qualifiers"] or "Current Opponent Win Percentage" in time_frame["qualifiers"] or "Current Team Wins" in time_frame["qualifiers"] or "Current Team Losses" in time_frame["qualifiers"] or "Current Team Ties" in time_frame["qualifiers"] or "Current Opponent Wins" in time_frame["qualifiers"] or "Current Opponent Losses" in time_frame["qualifiers"] or "Current Opponent Ties" in time_frame["qualifiers"] or "Attendance" in time_frame["qualifiers"] or "Quarter" in time_frame["qualifiers"] or "Down" in time_frame["qualifiers"] or "Down Distance" in time_frame["qualifiers"] or "Field Position" in time_frame["qualifiers"] or "Quarter Time" in time_frame["qualifiers"] or "Quarter Time Remaining" in time_frame["qualifiers"] or "Pass Distance" in time_frame["qualifiers"] or "Pass Direction" in time_frame["qualifiers"] or "Current Team Score" in time_frame["qualifiers"] or "Current Opponent Score" in time_frame["qualifiers"] or "Current Score Margin" in time_frame["qualifiers"] or "Current Score Difference" in time_frame["qualifiers"] or "Thrown To" in time_frame["qualifiers"] or "Overtime" in time_frame["qualifiers"] or "RedZone" in time_frame["qualifiers"] or "Current Team Games Over 500" in time_frame["qualifiers"] or "Current Opponent Games Over 500" in time_frame["qualifiers"] or needs_qb_starts or "current-stats" in extra_stats:
        all_rows, missing_games = handle_nfl_game_stats(player_data, all_rows, time_frame["qualifiers"], extra_stats, missing_games, player_type)

    if needs_qb_starts:
        for row_data in all_rows:
            if "Start-QB" in row_data["Shared"] and row_data["Shared"]["Start-QB"]:
                if not "Era Adjusted Passing" in row_data:
                    row_data["Era Adjusted Passing"] = {}
                if row_data["Shared"]["Result"] == "W":
                    row_data["Era Adjusted Passing"].update({"QBW" : 1})
                elif row_data["Shared"]["Result"] == "L":
                    row_data["Era Adjusted Passing"].update({"QBL" : 1})
                else:
                    row_data["Era Adjusted Passing"].update({"QBT" : 1})

    if time_frame["qualifiers"]:
        new_rows = []
        for row_data in all_rows:
            if perform_post_qualifier(player_data, player_type, ind_player_type, row_data, time_frame["qualifiers"], all_rows):
                new_rows.append(row_data)
        all_rows = new_rows

    years_full_team = set()
    post_qual_teams = set([row["Shared"]["Tm"] for row in all_rows])
    post_qual_years = set([row["Shared"]["Year"] for row in all_rows])
    has_all_years = post_qual_years == set(valid_years)
    is_full_career = has_all_years and pre_qual_teams == post_qual_teams
    for year in post_qual_years:
        if pre_qual_teams_map[year] == set([row["Shared"]["Tm"] for row in all_rows if row["Shared"]["Year"] == year]):
            years_full_team.add(year)
    
    years_to_skip = set()
    years_to_skip_champ = {}
    if ("Team" in time_frame["qualifiers"] or "Team Franchise" in time_frame["qualifiers"] or "Team League" in time_frame["qualifiers"] or "Team Division" in time_frame["qualifiers"] or "Number" in time_frame["qualifiers"]):
        years_count = {}
        for team in valid_teams:
            for year in valid_teams[team]:
                if not year in years_count:
                    years_count[year] = 0
                years_count[year] += 1
        
        for year in years_count:
            if years_count[year] > 1:
                if not year in years_full_team:
                    years_to_skip.add(year)
                    years_to_skip_champ[year] = valid_year_teams[year][len(valid_year_teams[year]) - 1]
    
    if "Season Stat" in time_frame["qualifiers"] or "Previous Season Stat" in time_frame["qualifiers"] or "Upcoming Season Stat" in time_frame["qualifiers"] or "Season Formula" in time_frame["qualifiers"] or "Total Games Stat" in time_frame["qualifiers"] or "Max Streak" in time_frame["qualifiers"] or "Count Streak" in time_frame["qualifiers"] or "Max Streak Formula" in time_frame["qualifiers"] or "Count Streak Formula" in time_frame["qualifiers"] or "Max Stretch" in time_frame["qualifiers"] or "Quickest" in time_frame["qualifiers"] or "Slowest" in time_frame["qualifiers"] or "Max Stat" in time_frame["qualifiers"] or "Min Stat" in time_frame["qualifiers"] or "Season" in time_frame["qualifiers"] or "Season Reversed" in time_frame["qualifiers"] or "Season Games" in time_frame["qualifiers"] or "Games" in time_frame["qualifiers"]:
        is_full_career = False
    
    has_season_stats = False
    has_award_stats = False
    if not all_rows:
        has_season_stats = True
        has_award_stats = True
    elif (not is_game or is_only_round) or ("Advanced/Passing" in headers[player_type["da_type"]] or "Advanced/Rushing" in headers[player_type["da_type"]] or "Advanced/Receiving" in headers[player_type["da_type"]] or "Advanced/Defense" in headers[player_type["da_type"]]):
        has_season_stats = True
        if [row for row in all_rows if row["Shared"]["Year"] >= 2018] or not is_game:
            try:
                handle_season_only_stats(is_game_page, is_game, player_page, player_data, player_type, ind_player_type, time_frame, all_rows, pre_qual_teams_map_no_playoffs)
            except Exception:
                player_data["error_getting_adv"] = True
        if (not is_game or is_only_round):
            if not (is_game and is_only_round):
                the_over_header = None
                for pot_header in headers[player_type["da_type"]]:
                    if pot_header.startswith("Awards/Honors/"):
                        the_over_header = pot_header
                        break
                
                if the_over_header:
                    regular_seasons = set()
                    playoff_seasons = set()
                    all_seasons = set()
                    for row in all_rows:
                        if the_over_header not in row:
                            row[the_over_header] = {}
                        if row["Shared"]["Year"] not in years_to_skip:
                            if "fake_playoff_row" in row["Shared"] and row["Shared"]["fake_playoff_row"]:
                                row[the_over_header]["PlayoffSeasons"] = 1
                                regular_seasons.add(row["Shared"]["Year"])
                            elif row["Shared"]["is_playoffs"]:
                                row[the_over_header]["PlayoffSeasons"] = 1
                                playoff_seasons.add(row["Shared"]["Year"])
                            else:
                                row[the_over_header]["RegularSeasons"] = 1
                                regular_seasons.add(row["Shared"]["Year"])
                        if row["Shared"]["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Shared"]["Year"]] == row["Shared"]["RawTm"]:
                            row[the_over_header]["UniqueSeasons"] = 1
                        
                        row[the_over_header]["Seasons"] = 1
                        if not ("fake_playoff_row" in row["Shared"] and row["Shared"]["fake_playoff_row"]):
                            row[the_over_header]["NonFakeSeasons"] = 1
                            if not row["Shared"]["is_playoffs"]:
                                row[the_over_header]["RegularAVSeasons"] = 1
                        all_seasons.add(row["Shared"]["Year"])

                    handle_awards(og_player_page, player_data, player_type, ind_player_type, time_frame, years_to_skip, years_to_skip_champ, all_rows, is_full_career)
                    has_award_stats = True
    
    if "Season Stat" in time_frame["qualifiers"] or "Previous Season Stat" in time_frame["qualifiers"] or "Upcoming Season Stat" in time_frame["qualifiers"] or "Season Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_season_stats(all_rows, player_data, player_type, time_frame["qualifiers"])
    
    if "Total Games Stat" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_career_stats(all_rows, player_data, player_type, time_frame["qualifiers"])

    if "Max Streak" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], True, False)
    
    if "Count Streak" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], False, False)

    if "Max Streak Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], True, True)
    
    if "Count Streak Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], False, True)

    if "Max Stretch" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_max_stretch(all_rows, player_data, player_type, time_frame["qualifiers"])

    if "Quickest" in time_frame["qualifiers"] or "Slowest" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_quick_long(all_rows, player_data, player_type, time_frame["qualifiers"])

    if "Max Stat" in time_frame["qualifiers"] or "Min Stat" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
        all_rows = handle_max_min_data(all_rows, player_data, player_type, time_frame["qualifiers"])
    
    if "Season" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        new_rows = []
        for row in all_rows:
            add_row = True
            for qual_object in time_frame["qualifiers"]["Season"]:
                season_index = seasons.index(row["Shared"]["Year"]) + 1
                if qual_object["negate"]:
                    if season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]:
                        add_row =  False
                        break
                else:
                    if not (season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]):
                        add_row =  False
                        break
                if add_row:
                    new_rows.append(row)
        all_rows = new_rows
    
    if "Season Reversed" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])), reverse=True)
        new_rows = []
        for row in all_rows:
            add_row = True
            for qual_object in time_frame["qualifiers"]["Season Reversed"]:
                season_index = seasons.index(row["Shared"]["Year"]) + 1
                if qual_object["negate"]:
                    if season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]:
                        add_row =  False
                        break
                else:
                    if not (season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]):
                        add_row =  False
                        break
                if add_row:
                    new_rows.append(row)
        all_rows = new_rows

    if "Season Games" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        new_rows = []
        for season in seasons:
            yearly_rows = []
            for row in all_rows:
                if row["Shared"]["Year"] == season:
                    yearly_rows.append(row)
            
            if "compare_type" in time_frame["qualifiers"]["Season Games"]:
                yearly_rows = sorted(yearly_rows, key=lambda row: row["Shared"]["Date"])
                if time_frame["qualifiers"]["Season Games"]["negate"]:
                    if time_frame["qualifiers"]["Season Games"]["compare_type"] == "first":
                        yearly_rows = yearly_rows[time_frame["qualifiers"]["Season Games"]["time_unit"]:]
                    else:
                        yearly_rows = yearly_rows[:-time_frame["qualifiers"]["Season Games"]["time_unit"]]
                else:
                    if time_frame["qualifiers"]["Season Games"]["compare_type"] == "first":
                        yearly_rows = yearly_rows[:time_frame["qualifiers"]["Season Games"]["time_unit"]]
                    else:
                        yearly_rows = yearly_rows[-time_frame["qualifiers"]["Season Games"]["time_unit"]:]
            else:
                yearly_rows = sorted(yearly_rows, key=lambda row: row["Shared"]["Date"], reverse=time_frame["qualifiers"]["Season Games"]["reverse"])
                time_start = time_frame["qualifiers"]["Season Games"]["start_val"]
                if time_start == float("inf"):
                    time_start = len(yearly_rows) - 1
                elif time_start == -float("inf"):
                    time_start = 0
                else:
                    time_start -= 1
                time_end = time_frame["qualifiers"]["Season Games"]["end_val"]
                if time_end == float("inf"):
                    time_end = len(yearly_rows)
                elif time_end == -float("inf"):
                    time_end = 1
                if time_frame["qualifiers"]["Season Games"]["negate"]:
                    yearly_rows = yearly_rows[:time_start] + yearly_rows[time_end:]
                else:
                    yearly_rows = yearly_rows[time_start:time_end]
            
            new_rows.extend(yearly_rows)
        all_rows = new_rows

    if "Games" in time_frame["qualifiers"]:
        if "compare_type" in time_frame["qualifiers"]["Games"]:
            all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
            if time_frame["qualifiers"]["Games"]["negate"]:
                if time_frame["qualifiers"]["Games"]["compare_type"] == "first":
                    all_rows = all_rows[time_frame["qualifiers"]["Games"]["time_unit"]:]
                else:
                    all_rows = all_rows[:-time_frame["qualifiers"]["Games"]["time_unit"]]
            else:
                if time_frame["qualifiers"]["Games"]["compare_type"] == "first":
                    all_rows = all_rows[:time_frame["qualifiers"]["Games"]["time_unit"]]
                else:
                    all_rows = all_rows[-time_frame["qualifiers"]["Games"]["time_unit"]:]
        else:
            all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"], reverse=time_frame["qualifiers"]["Games"]["reverse"])
            time_start = time_frame["qualifiers"]["Games"]["start_val"]
            if time_start == float("inf"):
                time_start = len(all_rows) - 1
            elif time_start == -float("inf"):
                time_start = 0
            else:
                time_start -= 1
            time_end = time_frame["qualifiers"]["Games"]["end_val"]
            if time_end == float("inf"):
                time_end = len(all_rows)
            elif time_end == -float("inf"):
                time_end = 1
            if time_frame["qualifiers"]["Games"]["negate"]:
                all_rows = all_rows[:time_start] + all_rows[time_end:]
            else:
                all_rows = all_rows[time_start:time_end]
    
    if is_game and is_only_round:
        the_over_header = None
        for pot_header in headers[player_type["da_type"]]:
            if pot_header.startswith("Awards/Honors/"):
                the_over_header = pot_header
                break
        
        if the_over_header:
            regular_seasons = set()
            playoff_seasons = set()
            all_seasons = set()
            for row in all_rows:
                if the_over_header not in row:
                    row[the_over_header] = {}
                if row["Shared"]["Year"] not in years_to_skip:
                    if "fake_playoff_row" in row["Shared"] and row["Shared"]["fake_playoff_row"]:
                        row[the_over_header]["PlayoffSeasons"] = 1
                        regular_seasons.add(row["Shared"]["Year"])
                    elif row["Shared"]["is_playoffs"]:
                        row[the_over_header]["PlayoffSeasons"] = 1
                        playoff_seasons.add(row["Shared"]["Year"])
                    else:
                        row[the_over_header]["RegularSeasons"] = 1
                        regular_seasons.add(row["Shared"]["Year"])
                if row["Shared"]["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Shared"]["Year"]] == row["Shared"]["RawTm"]:
                    row[the_over_header]["UniqueSeasons"] = 1
                
                row[the_over_header]["Seasons"] = 1
                if not ("fake_playoff_row" in row["Shared"] and row["Shared"]["fake_playoff_row"]):
                    row[the_over_header]["NonFakeSeasons"] = 1
                    if not row["Shared"]["is_playoffs"]:
                        row[the_over_header]["RegularAVSeasons"] = 1
                all_seasons.add(row["Shared"]["Year"])

            handle_awards(og_player_page, player_data, player_type, ind_player_type, time_frame, years_to_skip, years_to_skip_champ, all_rows, is_full_career)
            has_award_stats = True
    
    seasons_leading_start = 0
    seasons_leading_end = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading_end = int(extra_stat.split("-")[2])
                if len(extra_stat.split("-")) >= 4:
                    seasons_leading_start = int(extra_stat.split("-")[2])
                else:
                    seasons_leading_start = 1
            else:
                seasons_leading_start = 1
                seasons_leading_end = 1
    if not is_game_page and seasons_leading_start:
        handle_leading_seasons(player_page, player_data, player_type, time_frame, years_to_skip, all_rows, seasons_leading_start, seasons_leading_end)
    
    if not has_season_stats:
        player_data["has_season_stats"] = False
    if not has_award_stats:
        player_data["has_award_stats"] = False

    if has_award_stats:
        fix_seasons(all_rows, player_type)

    return all_rows, missing_games

def get_team_map_info(player_data, player_type, valid_teams, comment_obj):
    subbb_frames = [{
        "time_start" : datetime.date.min.year,
        "time_end" : current_season,
        "type" : "date",
        "add_type" : "add", 
        "playoffs" : "Include",
        "qualifiers" : {
            "Force Dates" : [{
                "negate" : False
            }]
        }
    }]

    player_url = main_page_url_format.format(player_data["id"][0].upper(), player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        player_page = url_request(request)[1]
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return None, None
        else:
            raise
    
    sub_player_data = handle_multi_player_data(player_data["id"], subbb_frames, player_type, player_page, False, False, False, set(), comment_obj)[0]

    teams_map = {}
    franc_map = {}
    team_ranges = {}
    franc_ranges = {}
    last_team = None
    last_franchise = None
    for row_data in sorted(sub_player_data["rows"], key=lambda row: row["Shared"]["Date"]):
        if row_data["Shared"]["Tm"] not in teams_map:
            teams_map[row_data["Shared"]["Tm"]] = row_data["Shared"]["Date"]
        if row_data["Shared"]["Tm"] not in team_ranges:
            team_ranges[row_data["Shared"]["Tm"]] = {}
            last_team = None
        if row_data["Shared"]["Year"] not in team_ranges[row_data["Shared"]["Tm"]]:
            team_ranges[row_data["Shared"]["Tm"]][row_data["Shared"]["Year"]] = []
            last_team = None
        if last_team != row_data["Shared"]["Tm"]:
            team_ranges[row_data["Shared"]["Tm"]][row_data["Shared"]["Year"]].append({
                "start" : row_data["Shared"]["Date"]
            })
        team_ranges[row_data["Shared"]["Tm"]][row_data["Shared"]["Year"]][len(team_ranges[row_data["Shared"]["Tm"]][row_data["Shared"]["Year"]]) - 1]["end"] = row_data["Shared"]["Date"]
        last_team = row_data["Shared"]["Tm"]

        team_franchise = row_data["Shared"]["RawTm"]
        if team_franchise not in franc_map:
            franc_map[team_franchise] = row_data["Shared"]["Date"]
        if team_franchise not in franc_ranges:
            franc_ranges[team_franchise] = {}
            last_franchise = None
        if row_data["Shared"]["Year"] not in franc_ranges[team_franchise]:
            franc_ranges[team_franchise][row_data["Shared"]["Year"]] = []
            last_franchise = None
        if last_franchise != team_franchise:
            franc_ranges[team_franchise][row_data["Shared"]["Year"]].append({
                "start" : row_data["Shared"]["Date"]
            })
        franc_ranges[team_franchise][row_data["Shared"]["Year"]][len(franc_ranges[team_franchise][row_data["Shared"]["Year"]]) - 1]["end"] = row_data["Shared"]["Date"]
        last_franchise = team_franchise

    last_team = None
    last_franchise = None
    for team in valid_teams:
        for year in sorted(valid_teams[team]):
            if year not in player_data["game_valid_years"]:
                if team not in teams_map:
                    teams_map[team] = year
                if team not in team_ranges:
                    team_ranges[team] = {}
                    last_team = None
                if year not in team_ranges[team]:
                    team_ranges[team][year] = []
                    last_team = None
                if last_team != team:
                    team_ranges[team][year].append({
                        "start" : year
                    })
                team_ranges[team][year][len(team_ranges[team][year]) - 1]["end"] = year
                last_team = team

                if team not in franc_map:
                    franc_map[team] = year
                if team_franchise not in team_ranges:
                    team_ranges[team_franchise] = {}
                    last_franchise = None
                if year not in team_ranges[team_franchise]:
                    team_ranges[team_franchise][year] = []
                    last_franchise = None
                if last_franchise != team_franchise:
                    team_ranges[team_franchise][year].append({
                        "start" : year
                    })
                team_ranges[team_franchise][year][len(team_ranges[team_franchise][year]) - 1]["end"] = year
                last_franchise = team_franchise
    
    player_data["valid_teams_order"] = {
        "team" : teams_map,
        "franchise" : franc_map
    }

    player_data["valid_team_ranges"] = {
        "team" : team_ranges,
        "franchise" : franc_ranges
    }

def get_all_games(player_data, time_frame, player_type, comment_obj):
    subbb_frames = [{
        "time_start" : datetime.date.min.year,
        "time_end" : current_season,
        "type" : "date",
        "add_type" : "add", 
        "playoffs" : "Include",
        "qualifiers" : {
            "Force Dates" : [{
                "negate" : False
            }]
        }
    }]

    player_url = main_page_url_format.format(player_data["id"][0].upper(), player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        player_page = url_request(request)[1]
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return None, None
        else:
            raise

    sub_player_data = handle_multi_player_data(player_data["id"], subbb_frames, player_type, player_page, False, False, False, set(), comment_obj)[0]

    player_data["all_games"] = {}
    for row in sorted(sub_player_data["rows"], key=lambda row: row["Shared"]["Date"]):
        if row["Shared"]["Year"] not in player_data["all_games"]:
            player_data["all_games"][row["Shared"]["Year"]] = []
        player_data["all_games"][row["Shared"]["Year"]].append(row)

def handle_date_row_data(all_rows):
    all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])

    game_counter = 0
    prev_year = None
    last_date = None
    year_count = None
    for index, row_data in enumerate(all_rows):
        if last_date == row_data["Shared"]["Date"]:
            row_data["Shared"]["Gm"] = all_rows[index - 1]["Shared"]["Gm"]
            row_data["Shared"]["GmRev"] = all_rows[index - 1]["Shared"]["GmRev"]
            row_data["Shared"]["CrGm"] = all_rows[index - 1]["Shared"]["CrGm"]
            row_data["Shared"]["CrGmRev"] = all_rows[index - 1]["Shared"]["CrGmRev"]
            row_data["Shared"]["Previous Row"] = all_rows[index - 1]["Shared"]["Previous Row"]
            row_data["Shared"]["Upcoming Row"] = all_rows[index - 1]["Shared"]["Upcoming Row"]
            continue
        
        last_date = row_data["Shared"]["Date"]
        if prev_year != row_data["Shared"]["Year"]:
            game_counter = 0
        prev_year = row_data["Shared"]["Year"]

        if not year_count:
            year_count = len(set([row["Shared"]["Date"] for row in all_rows if row["Shared"]["Year"] == row_data["Shared"]["Year"]]))

        game_counter += 1

        row_data["Shared"]["Gm"] = game_counter
        row_data["Shared"]["GmRev"] = year_count - game_counter + 1
        row_data["Shared"]["CrGm"] = index + 1
        row_data["Shared"]["CrGmRev"] = len(all_rows) - index

        if index == 0:
            row_data["Shared"]["Previous Row"] = None
        else:
            row_data["Shared"]["Previous Row"] = all_rows[index - 1]
            if row_data["Shared"]["Previous Row"]["Shared"]["Year"] != row_data["Shared"]["Year"]:
                row_data["Shared"]["Previous Row"] = None
        
        if index == len(all_rows) - 1:
            row_data["Shared"]["Upcoming Row"] = None
        else:
            row_data["Shared"]["Upcoming Row"] = all_rows[index + 1]
            if row_data["Shared"]["Upcoming Row"]["Shared"]["Year"] != row_data["Shared"]["Year"]:
                row_data["Shared"]["Upcoming Row"] = None

def handle_nfl_game_stats(player_data, all_rows, qualifiers, extra_stats, missing_games, player_type):
    games_to_skip = set()            
    if "Thrown To" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Thrown To"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Shared"]["Tm"].lower() in player["games"] and row_data["Shared"]["Date"] in player["games"][row_data["Shared"]["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["Shared"]["GameLink"])

    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " starting game data")
    count_info = {
        "current_percent" : 10,
        "count" : 1,
        "total_count" : len(all_rows) - len(games_to_skip),
        "missing_games" : missing_games,
        "exception" : None
    }
    new_rows = []

    if not count_info["total_count"]:
        return new_rows, count_info["missing_games"]

    
    with requests.Session() as s:
        with ThreadPoolExecutor(max_workers=5) as sub_executor:
            for index, row_data in enumerate(all_rows):
                if "GameLink" in row_data["Shared"]:
                    if row_data["Shared"]["GameLink"]:
                        if row_data["Shared"]["GameLink"] not in games_to_skip:
                            future = sub_executor.submit(get_game_data, index, player_data, row_data, qualifiers, extra_stats, s)
                            future.add_done_callback(functools.partial(result_call_back, qualifiers, count_info, new_rows, player_type, player_data, row_data, extra_stats))
                    else:
                        count_info["missing_games"] = True
                else:
                    new_rows.append(row_data)

    if count_info["exception"]:
        raise count_info["exception"]

    return sorted(new_rows, key=lambda row: row["Shared"]["Date"]), count_info["missing_games"]

def result_call_back(qualifiers, count_info, new_rows, player_type, player_data, old_row_data, extra_stats, result):
    try:
        if result.exception():
            logger.info("Error parsing date " + str(old_row_data["Shared"]["Date"]) + " for player " + str(player_data["id"]))
            if not count_info["exception"]:
                count_info["exception"] = result.exception()
            percent_complete = 100 * (count_info["count"] / count_info["total_count"])
            if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                count_info["current_percent"] += 10
            count_info["count"] += 1
            return
            
        game_data, row_data, sub_missing_games = result.result()
        if sub_missing_games:
            count_info["missing_games"] = True

        set_row_data(player_data, game_data, row_data)

        if "Start Position" in qualifiers or "Exact Official" in qualifiers or "Exact Referee" in qualifiers or "Exact Umpire" in qualifiers or "Exact Team Head Coach" in qualifiers or "Exact Opponent Head Coach" in qualifiers or "Official" in qualifiers or "Referee" in qualifiers or "Umpire" in qualifiers or "Team Head Coach" in qualifiers or "Opponent Head Coach" in qualifiers or "Franchise Stadium" in qualifiers or "Stadium" in qualifiers or "Exact Stadium" in qualifiers or "Local Start Time" in qualifiers or "Exact City" in qualifiers or "City" in qualifiers or "Exact State" in qualifiers or "State" in qualifiers or "Exact Time Zone" in qualifiers or "Time Zone" in qualifiers or "Exact Country" in qualifiers or "Country" in qualifiers or "Surface" in qualifiers or "Roof" in qualifiers or "Temperature" in qualifiers or "Wind" in qualifiers or "Wind Chill" in qualifiers or "Humidity" in qualifiers or "Current Winning Opponent" in qualifiers or "Current Losing Opponent" in qualifiers or "Current Tied Opponent" in qualifiers or "Current Winning Or Tied Opponent" in qualifiers or "Current Losing Or Tied Opponent" in qualifiers or "Current Winning Team" in qualifiers or "Current Losing Team" in qualifiers or "Current Tied Team" in qualifiers or "Current Winning Or Tied Team" in qualifiers or "Current Losing Or Tied Team" in qualifiers or "Current Team Win Percentage" in qualifiers or "Current Team Wins" in qualifiers or "Current Team Losses" in qualifiers or "Current Team Ties" in qualifiers or "Current Opponent Win Percentage" in qualifiers or "Current Opponent Wins" in qualifiers or "Current Opponent Losses" in qualifiers or "Current Opponent Ties" in qualifiers or "Current Team Games Over 500" in qualifiers or "Current Opponent Games Over 500" in qualifiers or "Attendance" in qualifiers:
            if not perform_nfl_game_qualifiers(row_data, qualifiers):
                percent_complete = 100 * (count_info["count"] / count_info["total_count"])
                if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                    count_info["current_percent"] += 10
                count_info["count"] += 1
                return
            
        if "Quarter" in qualifiers or "Down" in qualifiers or "Down Distance" in qualifiers or "Field Position" in qualifiers or "Quarter Time" in qualifiers or "Quarter Time Remaining" in qualifiers or "Pass Distance" in qualifiers or "Pass Direction" in qualifiers or "Overtime" in qualifiers or "RedZone" in qualifiers or "Current Team Score" in qualifiers or "Current Opponent Score" in qualifiers or "Current Score Margin" in qualifiers or "Current Score Difference" in qualifiers or "Thrown To" in qualifiers or "current-stats" in extra_stats:
            if not perform_sub_nfl_game_qualifiers(row_data, player_data, qualifiers, game_data, player_type):
                percent_complete = 100 * (count_info["count"] / count_info["total_count"])
                if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                    count_info["current_percent"] += 10
                count_info["count"] += 1
                return

        new_rows.append(row_data)

        percent_complete = 100 * (count_info["count"] / count_info["total_count"])
        if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
            logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
            count_info["current_percent"] += 10
        count_info["count"] += 1
    except Exception as err:
        try:
            if not count_info["exception"]:
                count_info["exception"] = err
            percent_complete = 100 * (count_info["count"] / count_info["total_count"])
            if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                count_info["current_percent"] += 10
            count_info["count"] += 1
        except Exception as err:
            if not count_info["exception"]:
                count_info["exception"] = err
        return

def set_row_data(player_data, player_game_info, row_data):
    if not player_game_info or player_game_info["missing_data"]:
        return
    row_data["Shared"]["CurrTmWins"] = player_game_info["CurrTmWins"]
    row_data["Shared"]["CurrTmLosses"] = player_game_info["CurrTmLosses"]
    row_data["Shared"]["CurrTmTies"] = player_game_info["CurrTmTies"]
    row_data["Shared"]["CurrOppWins"] = player_game_info["CurrOppWins"]
    row_data["Shared"]["CurrOppLosses"] = player_game_info["CurrOppLosses"]
    row_data["Shared"]["CurrOppTies"] = player_game_info["CurrOppTies"]
    row_data["Shared"]["StadiumID"] = player_game_info["StadiumID"]
    row_data["Shared"]["Stadium"] = player_game_info["Stadium"]
    row_data["Shared"]["StartTime"] = player_game_info["StartTime"]
    row_data["Shared"]["Roof"] = player_game_info["Roof"]
    row_data["Shared"]["Surface"] = player_game_info["Surface"]
    row_data["Shared"]["Temperature"] = player_game_info["Temperature"]
    row_data["Shared"]["Humidity"] = player_game_info["Humidity"]
    row_data["Shared"]["Wind"] = player_game_info["Wind"]
    row_data["Shared"]["WindChill"] = player_game_info["WindChill"]
    row_data["Shared"]["Attendance"] = player_game_info["Attendance"]

    row_data["Shared"]["Referee"] = player_game_info["Referee"]
    row_data["Shared"]["Umpire"] = player_game_info["Umpire"]
    row_data["Shared"]["OtherOfficial"] = player_game_info["OtherOfficial"]
    row_data["Shared"]["RefereeID"] = player_game_info["RefereeID"]
    row_data["Shared"]["UmpireID"] = player_game_info["UmpireID"]
    row_data["Shared"]["OtherOfficialID"] = player_game_info["OtherOfficialID"]
    row_data["Shared"]["TmHeadCoach"] = player_game_info["TmHeadCoach"]
    row_data["Shared"]["TmHeadCoachID"] = player_game_info["TmHeadCoachID"]
    row_data["Shared"]["OppHeadCoach"] = player_game_info["OppHeadCoach"]
    row_data["Shared"]["OppHeadCoachID"] = player_game_info["OppHeadCoachID"]

    has_qb_starter = False
    for player_id in player_game_info["team_starters"]:
        position = player_game_info["team_starters"][player_id]
        if position == "QB":
            has_qb_starter = True

        if player_id == player_data["id"]:
            row_data["Shared"]["Start-" + position] = True

    if not has_qb_starter:
        if row_data["Shared"]["Start"]:
            row_data["Shared"]["Start-QB"] = True

def get_game_data(index, player_data, row_data, qualifiers, extra_stats, s):
    missing_games = False
    game_data = {
        "missing_data" : False,
        "CurrTmWins" : None,
        "CurrTmLosses" : None,
        "CurrTmTies" : None,
        "CurrOppWins" : None,
        "CurrOppLosses" : None,
        "CurrOppTies" : None,
        "Attendance" : None,
        "Stadium" : None,
        "StadiumID" : None,
        "Roof" : None,
        "Surface" : None,
        "Temperature" : None,
        "Humidity" : None,
        "Wind" : None,
        "WindChill" : None,
        "StartTime" : None,
        "pass_completions" : [],
        "pass_incompletions" : [],
        "pass_interceptions" : [],
        "pass_sacks" : [],
        "rushes" : [],
        "rush_2PM" : [],
        "wr_completions" : [],
        "wr_2PM" : [],
        "wr_incompletions" : [],
        "team_starters" : {},
        "opp_starters" : {},
        "Referee" : [],
        "Umpire"  : [],
        "OtherOfficial" : [],
        "RefereeID" : [],
        "UmpireID"  : [],
        "OtherOfficialID" : [],
        "TmHeadCoach" : None,
        "TmHeadCoachID" : None,
        "OppHeadCoach" : None,
        "OppHeadCoachID" : None,
        "fumbles" : []
    }

    try:
        response, player_page_xml = url_request_lxml(s, "https://www.pro-football-reference.com" + row_data["Shared"]["GameLink"])
    except urllib.error.HTTPError as err:
        if err.status == 404:
            missing_games = True
            game_data["missing_data"] = True
            return game_data, row_data, missing_games
        else:
            raise
    
    scorebox = player_page_xml.xpath("//div[@class = 'scorebox']")[0]
    scor_divs = scorebox.xpath("./div")
    home_team_div = scor_divs[0]
    away_team_div = scor_divs[1]

    home_team_divs = home_team_div.xpath("./div")
    away_team_divs = away_team_div.xpath("./div")

    home_team_abbr = home_team_divs[0].xpath(".//strong")[0].xpath(".//a")[0].get("href").split("/")[2].upper()

    home_team_record = str(home_team_divs[2].text_content()).split("-")
    away_team_record = str(away_team_divs[2].text_content()).split("-")

    home_team_wins = int(home_team_record[0])
    home_team_losses = int(home_team_record[1])
    if len(home_team_record) > 2:
        home_team_ties = int(home_team_record[2])
    else:
        home_team_ties = 0

    away_team_wins = int(away_team_record[0])
    away_team_losses = int(away_team_record[1])
    if len(away_team_record) > 2:
        away_team_ties = int(away_team_record[2])
    else:
        away_team_ties = 0

    home_team_score = int(str(home_team_divs[1].text_content()))
    away_team_score = int(str(away_team_divs[1].text_content()))

    if home_team_score > away_team_score:
        home_team_wins -= 1
        away_team_losses -= 1
    elif home_team_score < away_team_score:
        away_team_wins -= 1
        home_team_losses -= 1
    else:
        home_team_ties -= 1
        away_team_ties -= 1
    
    if row_data["Shared"]["RawTm"] == home_team_abbr:
        game_data["CurrTmWins"] = home_team_wins
        game_data["CurrTmLosses"] = home_team_losses
        game_data["CurrTmTies"] = home_team_ties
        game_data["CurrOppWins"] = away_team_wins
        game_data["CurrOppLosses"] = away_team_losses
        game_data["CurrOppTies"] = away_team_ties
    else:
        game_data["CurrTmWins"] = away_team_wins
        game_data["CurrTmLosses"] = away_team_losses
        game_data["CurrTmTies"] = away_team_ties
        game_data["CurrOppWins"] = home_team_wins
        game_data["CurrOppLosses"] = home_team_losses
        game_data["CurrOppTies"] = home_team_ties
    
    scorebox_info = scor_divs[2]
    scorebox_divs = scorebox_info.xpath("./div")
    for scorebox_div in scorebox_divs:
        strongs = scorebox_div.xpath(".//strong")
        if strongs and str(strongs[0].text_content()).strip() == "Stadium":
            game_data["Stadium"] = str(scorebox_div.xpath(".//a")[0].text_content()).strip()
            game_data["StadiumID"] = str(scorebox_div.xpath(".//a")[0].get("href").split("/")[2][:-4].upper()).strip()
        elif strongs and str(strongs[0].text_content()).strip() == "Start Time":
            time_str = scorebox_div.text_content().strip().split("Start Time")[1][1:].strip()
            game_time = dateutil.parser.parse(time_str).time()
            game_datetime = dateutil.parser.parse(time_str)
            game_datetime = game_datetime.replace(hour=game_time.hour).replace(minute=game_time.minute).replace(second=0).replace(microsecond=0)
            game_datetime = timezone("US/Eastern").localize(game_datetime)
            game_data["StartTime"] = game_datetime
    game_info = player_page_xml.xpath("//table[@id = 'game_info']")
    if not game_info:
        for node in player_page_xml.xpath("//comment()"):
            try:
                temp_lxml = lxml.html.fragment_fromstring(str(node.text))
            except Exception:
                continue
            temp_table = temp_lxml.xpath("//table[@id = 'game_info']")
            if temp_table:
                game_info = temp_table
                break
    
    game_info = game_info[0]
    game_info_rows = game_info.xpath("./tr")
    for sub_row in game_info_rows:
        header = sub_row.xpath("./th")
        column = sub_row.xpath("./td")
        if len(header) == 1 and len(column) == 1:
            column_name = str(header[0].text_content()).strip()
            column_value = str(column[0].text_content()).strip()
            if column_value:
                if column_name == "Roof" or column_name == "Surface":
                    if column_name == "Roof" and "retractable roof" in column_value:
                        column_value = "Retroof"
                        if "closed" in column_value:
                            column_value += "-Closed"
                        if "open" in column_value:
                            column_value += "-Open"
                    game_data[column_name] = column_value
                elif column_name == "Weather":
                    weather_info = re.search(r"(\d+) degrees", column_value)
                    if weather_info:
                        game_data["Temperature"] = int(weather_info.group(1))
                    weather_info = re.search(r"relative humidity (\d+)", column_value)
                    if weather_info:
                        game_data["Humidity"] = int(weather_info.group(1))
                    weather_info = re.search(r"wind (\d+) mph", column_value)
                    if weather_info:
                        game_data["Wind"] = int(weather_info.group(1))
                    weather_info = re.search(r"wind chill (\d+)", column_value)
                    if weather_info:
                        game_data["WindChill"] = int(weather_info.group(1))
                elif column_name == "Attendance":
                    game_data["Attendance"] = int(column_value.replace(",", ""))

    home_coach_link = home_team_div.xpath(".//div[@class = 'datapoint']")[0].xpath(".//a")[0]
    home_coach_name = str(home_coach_link.text_content()).strip()
    home_coach_id = home_coach_link.get("href").split("/")[2][:-4]
    if row_data["Shared"]["RawTm"] == home_team_abbr:
        game_data["TmHeadCoach"] = home_coach_name
        game_data["TmHeadCoachID"] = home_coach_id
    else:
        game_data["OppHeadCoach"] = home_coach_name
        game_data["OppHeadCoachID"] = home_coach_id
    
    away_coach_link = away_team_div.xpath(".//div[@class = 'datapoint']")[0].xpath(".//a")[0]
    away_coach_name = str(away_coach_link.text_content()).strip()
    away_coach_id = away_coach_link.get("href").split("/")[2][:-4]
    if row_data["Shared"]["RawTm"] == home_team_abbr:
        game_data["OppHeadCoach"] = away_coach_name
        game_data["OppHeadCoachID"] = away_coach_id
    else:
        game_data["TmHeadCoach"] = away_coach_name
        game_data["TmHeadCoachID"] = away_coach_id


    officials = player_page_xml.xpath("//table[@id = 'officials']")
    if not officials:
        for node in player_page_xml.xpath("//comment()"):
            try:
                temp_lxml = lxml.html.fragment_fromstring(str(node.text))
            except Exception:
                continue
            temp_table = temp_lxml.xpath("//table[@id = 'officials']")
            if temp_table:
                officials = temp_table
                break

    if officials:
        officials = officials[0]
        official_rows = officials.xpath(".//tr")
        for index, sub_row in enumerate(official_rows):
            if index:
                header = sub_row.xpath("./th")[0]
                column = sub_row.xpath("./td")[0]

                pos_name = str(header.text_content()).strip()
                ref_name = str(column.text_content()).strip()
                ref_id = column.xpath(".//a")[0].get("href").split("/")[2][:-4]

                if pos_name == "Referee":
                    game_data["Referee"].append(ref_name)
                    game_data["RefereeID"].append(ref_id)
                elif pos_name == "Umpire":
                    game_data["Umpire"].append(ref_name)
                    game_data["UmpireID"].append(ref_id)
                
                game_data["OtherOfficial"].append(ref_name)
                game_data["OtherOfficialID"].append(ref_id)

    home_starters = player_page_xml.xpath("//table[@id = 'home_starters']")
    if not home_starters:
        for node in player_page_xml.xpath("//comment()"):
            try:
                temp_lxml = lxml.html.fragment_fromstring(str(node.text))
            except Exception:
                continue
            temp_table = temp_lxml.xpath("//table[@id = 'home_starters']")
            if temp_table:
                home_starters = temp_table
                break

    if home_starters:
        home_starters = home_starters[0]
        home_starter_rows = home_starters.xpath(".//tr")
        for index, sub_row in enumerate(home_starter_rows):
            if index:
                header = sub_row.xpath("./th")[0]
                column = sub_row.xpath("./td")[0]

                player_id = header.get("data-append-csv")
                positon = str(column.text_content()).strip()

                if row_data["Shared"]["RawTm"] == home_team_abbr:
                    game_data["team_starters"][player_id] = positon
                else:
                    game_data["opp_starters"][player_id] = positon

        away_starters = player_page_xml.xpath("//table[@id = 'vis_starters']")
        if not away_starters:
            for node in player_page_xml.xpath("//comment()"):
                try:
                    temp_lxml = lxml.html.fragment_fromstring(str(node.text))
                except Exception:
                    continue
                temp_table = temp_lxml.xpath("//table[@id = 'vis_starters']")
                if temp_table:
                    away_starters = temp_table
                    break

        away_starters = away_starters[0]
        away_starter_rows = away_starters.xpath(".//tr")
        for index, sub_row in enumerate(away_starter_rows):
            if index:
                header = sub_row.xpath("./th")[0]
                column = sub_row.xpath("./td")[0]

                player_id = header.get("data-append-csv")
                positon = str(column.text_content()).strip()

                if row_data["Shared"]["RawTm"] == home_team_abbr:
                    game_data["opp_starters"][player_id] = positon
                else:
                    game_data["team_starters"][player_id] = positon
    
    # play_by_play = player_page_xml.xpath("//table[@id = 'pbp']")
    # if not play_by_play:
    #     for node in player_page_xml.xpath("//comment()"):
    #         try:
    #             temp_lxml = lxml.html.fragment_fromstring(str(node.text))
    #         except Exception:
    #             continue
    #         temp_table = temp_lxml.xpath("//table[@id = 'pbp']")
    #         if temp_table:
    #             play_by_play = temp_table
    #             break
    # if play_by_play:
    #     play_by_play = play_by_play[0].xpath(".//tr")

    play_by_play = []
    if not play_by_play:
        if "Quarter" in qualifiers or "Down" in qualifiers or "Down Distance" in qualifiers or "Field Position" in qualifiers or "Quarter Time" in qualifiers or "Quarter Time Remaining" in qualifiers or "Pass Distance" in qualifiers or "Pass Direction" in qualifiers or "Overtime" in qualifiers or "RedZone" in qualifiers or "Current Team Score" in qualifiers or "Current Opponent Score" in qualifiers or "Current Score Margin" in qualifiers or "Current Score Difference" in qualifiers or "Thrown To" in qualifiers or "current-stats" in extra_stats:
            missing_games = True
            game_data["missing_data"] = True
    else:
        previous_team_points = 0
        preavious_opp_points = 0
        for index, scoring_play in enumerate(play_by_play):
            columns = scoring_play.xpath(".//td")
            if len(columns) >= 7 and str(columns[3].text_content()).strip() and str(columns[5].text_content()).strip() and str(columns[6].text_content()).strip():
                quarter = str(scoring_play.xpath(".//th")[0].text_content()).strip().upper()
                if quarter == "OT":
                    quarter = 5
                else:
                    quarter = int(quarter)
                time = str(columns[0].text_content()).strip()
                time_remaining = None
                if time:
                    time = start_time_to_str(str(columns[0].text_content()).strip())
                    time_remaining = 900 - time
                else:
                    time = None
                down = str(columns[1].text_content()).strip()
                if down:
                    down = int(down)
                else:
                    down = None
                yards_to_go = str(columns[2].text_content()).strip()
                if yards_to_go:
                    yards_to_go = int(yards_to_go)
                else:
                    yards_to_go = None
                position = str(columns[3].text_content()).strip().split()
                if len(position) == 1:
                    team_position = None
                    yard_position = 50
                else:
                    team_position = position[0].strip()
                    yard_position = int(position[1].strip())
                play_description = str(etree.tostring(columns[4]).strip())
                for index, player_link in enumerate(columns[4].xpath(".//a")):
                    if index:
                        tail = player_link.tail
                        player_link.clear()
                        player_link.tail = tail
                play_description_no_players = str(columns[4].text_content()).strip().lower()
                away_points = int(str(columns[5].text_content()).strip())
                home_points = int(str(columns[6].text_content()).strip())

                if team_position != row_data["Shared"]["Tm"]:
                    yard_position += (50 - yard_position) * 2

                base_obj = {
                    "quarter" : quarter,
                    "time" : time,
                    "time_remaining" : time_remaining,
                    "down" : down,
                    "yards_to_go" : yards_to_go,
                    "yard_position" : yard_position,
                    "team_points" : previous_team_points,
                    "opp_points" : preavious_opp_points,
                    "score_margin" : previous_team_points - preavious_opp_points
                }

                if row_data["Shared"]["RawTm"] == home_team_abbr:
                    previous_team_points = home_points
                    preavious_opp_points = away_points
                else:
                    previous_team_points = away_points
                    preavious_opp_points = home_points

                if "(no play)" in play_description.lower():
                    continue

                pass_complete_match = re.search(r" pass complete ?(short|middle|deep)? ?(right|middle|left)? to .*? for (?:(\S+) yards?|no gain)", play_description, re.IGNORECASE)
                if pass_complete_match:
                    qb_player = get_html_player(play_description, " pass complete ", True)
                    wr_player = get_html_player(play_description, "pass complete ", False)
                    length = pass_complete_match.group(1)
                    direction = pass_complete_match.group(2)
                    if pass_complete_match.group(3):
                        yards = int(pass_complete_match.group(3))
                    else:
                        yards = 0
                    is_touchdown = ", touchdown" in play_description.lower()
                    is_two_point_conv = "two point attempt" in play_description.lower() and "conversion succeeds" in play_description.lower()
                    is_first_down = yards_to_go and yards >= yards_to_go

                    if qb_player == player_data["id"]:
                        base_obj["wr_player"] = wr_player
                        base_obj["length"] = length
                        base_obj["direction"] = direction
                        base_obj["yards"] = yards
                        base_obj["is_touchdown"] = is_touchdown
                        base_obj["is_first_down"] = is_first_down
                        if not "two point attempt" in play_description:
                            game_data["pass_completions"].append(base_obj)
                    elif wr_player == player_data["id"]:
                        base_obj["qb_player"] = wr_player
                        base_obj["length"] = length
                        base_obj["direction"] = direction
                        base_obj["yards"] = yards
                        base_obj["is_touchdown"] = is_touchdown
                        base_obj["is_two_point_conv"] = is_two_point_conv
                        base_obj["is_first_down"] = is_first_down
                        if not "two point attempt" in play_description.lower():
                            game_data["wr_completions"].append(base_obj)
                        elif is_two_point_conv:
                            game_data["wr_2PM"].append(base_obj)
                
                pass_incomplete_match = not pass_complete_match and re.search(r" pass incomplete ?(short|middle|deep)? ?(right|middle|left)?", play_description, re.IGNORECASE)
                if pass_incomplete_match and not "two point attempt" in play_description.lower():
                    qb_player = get_html_player(play_description, " pass incomplete", True)
                    wr_player = None
                    if " intended for " in play_description:
                        wr_player = get_html_player(play_description, " intended for ", False)
                    length = pass_incomplete_match.group(1)
                    direction = pass_incomplete_match.group(2)

                    if qb_player == player_data["id"]:
                        base_obj["wr_player"] = wr_player
                        base_obj["length"] = length
                        base_obj["direction"] = direction
                        game_data["pass_incompletions"].append(base_obj)
                    elif wr_player == player_data["id"]:
                        base_obj["qb_player"] = qb_player
                        base_obj["length"] = length
                        base_obj["direction"] = direction
                        game_data["wr_incompletions"].append(base_obj)
                if not pass_incomplete_match:
                    pass_incomplete_match = not pass_complete_match and re.search(r" spiked the ball", play_description, re.IGNORECASE)
                    if pass_incomplete_match:
                        qb_player = get_html_player(play_description, " spiked the ball", True)
                        if qb_player == player_data["id"]:
                            base_obj["wr_player"] = None
                            base_obj["length"] = None
                            base_obj["direction"] = None
                            game_data["pass_incompletions"].append(base_obj)
                
                pass_interception_match = not pass_complete_match and not pass_incomplete_match and re.search(r" pass (short|middle|deep)? ?(right|middle|left)?", play_description, re.IGNORECASE)
                if pass_interception_match and not "two point attempt" in play_description.lower():
                    qb_player = get_html_player(play_description, " pass ", True)
                    wr_player = None
                    if " intended for " in play_description.lower():
                        wr_player = get_html_player(play_description, " intended for ", False)
                    length = pass_interception_match.group(1)
                    direction = pass_interception_match.group(2)
                    int_player = get_html_player(play_description, " intercepted by ", False)
                    is_touchdown = ", touchdown" in play_description.lower()

                    if qb_player == player_data["id"]:
                        base_obj["wr_player"] = wr_player
                        base_obj["int_player"] = int_player
                        base_obj["length"] = length
                        base_obj["direction"] = direction
                        base_obj["is_touchdown"] = is_touchdown
                        game_data["pass_interceptions"].append(base_obj)
                    elif wr_player == player_data["id"]:
                        base_obj["qb_player"] = qb_player
                        base_obj["length"] = length
                        base_obj["direction"] = direction
                        game_data["wr_incompletions"].append(base_obj)
 
                sack_match = re.search(r" sacked by (.*?) for (?:(\S+) yards?|no gain)", play_description, re.IGNORECASE)
                if sack_match and not "two point attempt" in play_description.lower():
                    qb_player = get_html_player(play_description, " sacked by ", True)
                    if sack_match.group(2):
                        yards = int(sack_match.group(2))
                    else:
                        yards = 0
                    if qb_player == player_data["id"]:
                        base_obj["yards"] = yards * -1
                        game_data["pass_sacks"].append(base_obj)
                
                rush_match = re.search(r"(right tackle|left tackle|right guard|left guard|right end|left end|up the middle|middle|kneels)? ?(for (?:(\S+) yards?|no gain))", play_description, re.IGNORECASE)
                if rush_match:
                    if rush_match.group(1) or play_description_no_players.startswith("for "):
                        rush_player = get_html_player(play_description, " " + rush_match.group(2), True)
                        if rush_match.group(3):
                            yards = int(rush_match.group(3))
                        else:
                            yards = 0
                        is_touchdown = ", touchdown" in play_description.lower()
                        is_two_point_conv = "two point attempt" in play_description.lower() and "conversion succeeds" in play_description.lower()
                        is_first_down = yards_to_go and yards >= yards_to_go
                        if rush_player == player_data["id"]:
                            base_obj["yards"] = yards
                            base_obj["is_touchdown"] = is_touchdown
                            base_obj["is_two_point_conv"] = is_two_point_conv
                            base_obj["is_first_down"] = is_first_down
                            if not "two point attempt" in play_description.lower():
                                game_data["rushes"].append(base_obj)
                            elif is_two_point_conv:
                                game_data["rush_2PM"].append(base_obj)

                rush_match = re.search(r"(aborted snap)", play_description, re.IGNORECASE)
                if rush_match:
                    if rush_match.group(1) or play_description_no_players.startswith("for "):
                        rush_player = get_html_player(play_description, " aborted snap", True)
                        if rush_player == player_data["id"]:
                            base_obj["yards"] = 0
                            base_obj["is_touchdown"] = False
                            base_obj["is_two_point_conv"] = False
                            base_obj["is_first_down"] = False
                            if not "two point attempt" in play_description.lower():
                                game_data["rushes"].append(base_obj)
                                game_data["fumbles"].append(base_obj)
                
                if re.search(r" fumbles", play_description, re.IGNORECASE) and not "two point attempt" in play_description.lower():
                    fumble_player = get_html_player(play_description, " fumbles", True)
                    if fumble_player == player_data["id"]:
                        game_data["fumbles"].append(base_obj)

    return game_data, row_data, missing_games

def get_html_player(play_description, search_str, is_after):
    play_description = play_description
    search_str = search_str
    if search_str.lower() not in play_description.lower():
        return None
    start_index = play_description.lower().index(search_str.lower())
    if is_after:
        start_pos = play_description.lower().rfind("<a href=\"/players/", 0, start_index)
    else:
        start_pos = play_description.lower().find("<a href=\"/players/", start_index)
    play_substr = play_description[start_pos:]
    return re.match(r"\<a href\=\"\/players\/[a-z]\/(.*?)\.htm\"\>", play_substr, re.IGNORECASE).group(1)
    

def start_time_to_str(time_str):
    time_split = time_str.split(":")
    if len(time_split) > 1:
        minutes = int(time_split[0])
        seconds = int(time_split[1])
        return (minutes * 60) + seconds
    else:
        return int(time_split[0]) * 60

def perform_nfl_game_qualifiers(row, qualifiers):
    if "Start Position" in qualifiers:
        for qual_object in qualifiers["Start Position"]:
            has_match = False
            for pos in qual_object["values"]:
                if "Start-" + pos in row["Shared"] and row["Shared"]["Start-" + pos]:
                    has_match = True
                    break
        
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Official" in qualifiers:
        if ("Referee" not in row["Shared"] or not row["Shared"]["Referee"]) and ("Umpire" not in row["Shared"] or not row["Shared"]["Umpire"]) and ("OtherOfficial" not in row["Shared"] or not row["Shared"]["OtherOfficial"]):
            return False

        for qual_object in qualifiers["Official"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["Referee", "Umpire", "OtherOfficial"]:
                    if (ump_str not in row["Shared"] or not row["Shared"][ump_str]):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        for ump_value in row["Shared"][ump_str + "ID"]:
                            if stadium == ump_value:
                                has_match = True
                                is_id = True
                                break
                    if not is_id:
                        for ump_value in row["Shared"][ump_str]:
                            if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", ump_value.lower()).strip():
                                has_match = True
                                break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Referee" in qualifiers:
        if ("Referee" not in row["Shared"] or not row["Shared"]["Referee"]):
            return False

        for qual_object in qualifiers["Referee"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["Referee"]:
                    if (ump_str not in row["Shared"] or not row["Shared"][ump_str]):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        for ump_value in row["Shared"][ump_str + "ID"]:
                            if stadium == ump_value:
                                has_match = True
                                is_id = True
                                break
                    if not is_id:
                        for ump_value in row["Shared"][ump_str]:
                            if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", ump_value.lower()).strip():
                                has_match = True
                                break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Umpire" in qualifiers:
        if ("Umpire" not in row["Shared"] or not row["Shared"]["Umpire"]):
            return False

        for qual_object in qualifiers["Umpire"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["Umpire"]:
                    if (ump_str not in row["Shared"] or not row["Shared"][ump_str]):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        for ump_value in row["Shared"][ump_str + "ID"]:
                            if stadium == ump_value:
                                has_match = True
                                is_id = True
                                break
                    if not is_id:
                        for ump_value in row["Shared"][ump_str]:
                            if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", ump_value.lower()).strip():
                                has_match = True
                                break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Head Coach" in qualifiers:
        if ("TmHeadCoach" not in row["Shared"] or row["Shared"]["TmHeadCoach"] == None):
            return False

        for qual_object in qualifiers["Team Head Coach"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["TmHeadCoach"]:
                    if (ump_str not in row["Shared"] or row["Shared"][ump_str] == None):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        if stadium == row["Shared"][ump_str + "ID"]:
                            has_match = True
                            is_id = True
                            break
                    if not is_id:
                        if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", row["Shared"][ump_str].lower()).strip():
                            has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Head Coach" in qualifiers:
        if ("OppHeadCoach" not in row["Shared"] or row["Shared"]["OppHeadCoach"] == None):
            return False

        for qual_object in qualifiers["Opponent Head Coach"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["OppHeadCoach"]:
                    if (ump_str not in row["Shared"] or row["Shared"][ump_str] == None):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        if stadium == row["Shared"][ump_str + "ID"]:
                            has_match = True
                            is_id = True
                            break
                    if not is_id:
                        if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", row["Shared"][ump_str].lower()).strip():
                            has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Exact Official" in qualifiers:
        if ("Referee" not in row["Shared"] or not row["Referee"]) and ("Umpire" not in row["Shared"] or not row["Shared"]["Umpire"]) and ("OtherOfficial" not in row["Shared"] or not row["Shared"]["OtherOfficial"]):
            return False

        for qual_object in qualifiers["Exact Official"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["Referee", "Umpire", "OtherOfficial"]:
                    if (ump_str not in row["Shared"] or not row["Shared"][ump_str]):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        for ump_value in row["Shared"][ump_str + "ID"]:
                            if stadium == ump_value:
                                has_match = True
                                is_id = True
                                break
                    if not is_id:
                        for ump_value in row["Shared"][ump_str]:
                            if stadium == ump_value.lower():
                                has_match = True
                                break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Exact Referee" in qualifiers:
        if ("Referee" not in row["Shared"] or not row["Shared"]["Referee"]):
            return False

        for qual_object in qualifiers["Referee"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["Exact Referee"]:
                    if (ump_str not in row["Shared"] or not row["Shared"][ump_str]):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        for ump_value in row["Shared"][ump_str + "ID"]:
                            if stadium == ump_value:
                                has_match = True
                                is_id = True
                                break
                    if not is_id:
                        for ump_value in row["Shared"][ump_str]:
                            if stadium == ump_value.lower():
                                has_match = True
                                break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Umpire" in qualifiers:
        if ("Umpore" not in row or not row["Umpire"]):
            return False

        for qual_object in qualifiers["Exact Umpire"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["Umpire"]:
                    if (ump_str not in row["Shared"] or not row["Shared"][ump_str]):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        for ump_value in row["Shared"][ump_str + "ID"]:
                            if stadium == ump_value:
                                has_match = True
                                is_id = True
                                break
                    if not is_id:
                        for ump_value in row["Shared"][ump_str]:
                            if stadium == ump_value.lower():
                                has_match = True
                                break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Team Head Coach" in qualifiers:
        if ("TmHeadCoach" not in row["Shared"] or row["Shared"]["TmHeadCoach"] == None):
            return False

        for qual_object in qualifiers["Exact Team Head Coach"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["TmHeadCoach"]:
                    if (ump_str not in row["Shared"] or row["Shared"][ump_str] == None):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        if stadium == row["Shared"][ump_str + "ID"]:
                            has_match = True
                            is_id = True
                            break
                    if not is_id:
                        if stadium == row["Shared"][ump_str].lower():
                            has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Opponent Head Coach" in qualifiers:
        if ("OppHeadCoach" not in row["Shared"] or row["Shared"]["OppHeadCoach"] == None):
            return False

        for qual_object in qualifiers["Exact Opponent Head Coach"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["OppHeadCoach"]:
                    if (ump_str not in row["Shared"] or row["Shared"][ump_str] == None):
                        continue
                    is_id = False
                    if ump_str + "ID" in row["Shared"] and row["Shared"][ump_str + "ID"]:
                        if stadium == row["Shared"][ump_str + "ID"]:
                            has_match = True
                            is_id = True
                            break
                    if not is_id:
                        if stadium == row["Shared"][ump_str].lower():
                            has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Franchise Stadium" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False
        
        for qual_object in qualifiers["Franchise Stadium"]:
            has_match = False
            for franchise in qual_object["values"]:
                venue_id = get_venue_obj(franchise.upper(), row["Shared"]["Year"])[0]
                if venue_id == None:
                    continue

                if venue_id == row["Shared"]["StadiumID"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Stadium" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]

        for qual_object in qualifiers["Stadium"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium.upper() in team_venues:
                    if stadium.upper() == row["Shared"]["StadiumID"]:
                        has_match = True
                        break
                else:
                    for sub_stadium in venue_obj["venues"]:
                        if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", sub_stadium.lower()).strip():
                            has_match = True
                            break
                    if has_match:
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Stadium" in qualifiers:
        if "Stadium" not in row["Shared"] or row["Shared"]["Stadium"] == None:
            return False

        for qual_object in qualifiers["Exact Stadium"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium.upper() in team_venues:
                    if stadium.upper() == row["Shared"]["StadiumID"]:
                        has_match = True
                        break
                else:
                    if stadium == row["Shared"]["Stadium"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "City" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact City" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Exact City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "State" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact State" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Exact State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Time Zone" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Time Zone" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Exact Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Country" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Country" in qualifiers:
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Exact Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Surface" in qualifiers:
        if "Surface" not in row["Shared"] or row["Shared"]["Surface"] == None:
            return False

        for qual_object in qualifiers["Surface"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "artificial":
                    if row["Shared"]["Surface"].lower() != "grass":
                        has_match = True
                        break
                else:
                    if stadium == row["Shared"]["Surface"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Roof" in qualifiers:
        if "Roof" not in row["Shared"] or row["Shared"]["Roof"] == None:
            return False

        for qual_object in qualifiers["Roof"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "retroof":
                    if "retroof" in row["Shared"]["Roof"].lower():
                        has_match = True
                        break
                else:
                    if stadium == row["Shared"]["Roof"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Temperature" in qualifiers:
        if "Temperature" not in row["Shared"] or row["Shared"]["Temperature"] == None:
            return False

        for qual_object in qualifiers["Temperature"]:
            if qual_object["negate"]:
                if row["Shared"]["Temperature"] >= qual_object["values"]["start_val"] and row["Shared"]["Temperature"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Temperature"] >= qual_object["values"]["start_val"] and row["Shared"]["Temperature"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Wind" in qualifiers:
        if "Wind" not in row["Shared"] or row["Shared"]["Wind"] == None:
            return False

        for qual_object in qualifiers["Wind"]:
            if qual_object["negate"]:
                if row["Shared"]["Wind"] >= qual_object["values"]["start_val"] and row["Shared"]["Wind"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Wind"] >= qual_object["values"]["start_val"] and row["Shared"]["Wind"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Wind Chill" in qualifiers:
        if "WindChill" not in row["Shared"] or row["Shared"]["WindChill"] == None:
            return False

        for qual_object in qualifiers["Wind Chill"]:
            if qual_object["negate"]:
                if row["Shared"]["WindChill"] >= qual_object["values"]["start_val"] and row["Shared"]["WindChill"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["WindChill"] >= qual_object["values"]["start_val"] and row["Shared"]["WindChill"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Humidity" in qualifiers:
        if "Humidity" not in row["Shared"] or row["Shared"]["Humidity"] == None:
            return False

        for qual_object in qualifiers["Humidity"]:
            if qual_object["negate"]:
                if row["Shared"]["Humidity"] >= qual_object["values"]["start_val"] and row["Shared"]["Humidity"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Humidity"] >= qual_object["values"]["start_val"] and row["Shared"]["Humidity"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Winning Opponent" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrOppWins"] > row["Shared"]["CurrOppLosses"]
        for qual_object in qualifiers["Current Winning Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Opponent" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrOppWins"] < row["Shared"]["CurrOppLosses"]
        for qual_object in qualifiers["Current Losing Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrOppWins"] == row["Shared"]["CurrOppLosses"]
        for qual_object in qualifiers["Current Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Or Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrOppWins"] >= row["Shared"]["CurrOppLosses"]
        for qual_object in qualifiers["Current Winning Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Or Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrOppWins"] <= row["Shared"]["CurrOppLosses"]
        for qual_object in qualifiers["Current Losing Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Team" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrTmWins"] > row["Shared"]["CurrTmLosses"]
        for qual_object in qualifiers["Current Winning Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Team" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False
            
        opponent_match = row["Shared"]["CurrTmWins"] < row["Shared"]["CurrTmLosses"]
        for qual_object in qualifiers["Current Losing Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Tied Team" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrTmWins"] == row["Shared"]["CurrTmLosses"]
        for qual_object in qualifiers["Current Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Or Tied Team" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        opponent_match = row["Shared"]["CurrTmWins"] >= row["Shared"]["CurrTmLosses"]
        for qual_object in qualifiers["Current Winning Or Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Or Tied Team" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False
            
        opponent_match = row["Shared"]["CurrTmWins"] <= row["Shared"]["CurrTmLosses"]
        for qual_object in qualifiers["Current Losing Or Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Team Win Percentage" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Win Percentage"]:
            try:
                win_percentage = row["Shared"]["CurrTmWins"] / (row["Shared"]["CurrTmWins"] + row["Shared"]["CurrTmLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Games Over 500" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Games Over 500"]:
            games_over_500 = row["Shared"]["CurrTmWins"] - row["Shared"]["CurrTmLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Wins" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Wins"]:
            if qual_object["negate"]:
                if row["Shared"]["CurrTmWins"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrTmWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CurrTmWins"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrTmWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Losses" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Losses"]:
            if qual_object["negate"]:
                if row["Shared"]["CurrTmLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrTmLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CurrTmLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrTmLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Ties" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Ties"]:
            if qual_object["negate"]:
                if row["Shared"]["CurrTmTies"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrTmTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CurrTmTies"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrTmTies"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Win Percentage" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Win Percentage"]:
            try:
                win_percentage = row["Shared"]["CurrOppWins"] / (row["Shared"]["CurrOppWins"] + row["Shared"]["CurrOppLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Games Over 500" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Games Over 500"]:
            games_over_500 = row["Shared"]["CurrOppWins"] - row["Shared"]["CurrOppLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Wins" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Wins"]:
            if qual_object["negate"]:
                if row["Shared"]["CurrOppWins"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrOppWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CurrOppWins"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrOppWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Losses" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Losses"]:
            if qual_object["negate"]:
                if row["Shared"]["CurrOppLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrOppLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CurrOppLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrOppLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Ties" in qualifiers:
        if "CurrOppWins" not in row["Shared"] or row["Shared"]["CurrOppWins"] == None:
            return False
            
        for qual_object in qualifiers["Current Opponent Ties"]:
            if qual_object["negate"]:
                if row["Shared"]["CurrOppTies"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrOppTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CurrOppTies"] >= qual_object["values"]["start_val"] and row["Shared"]["CurrOppTies"] <= qual_object["values"]["end_val"]):
                    return False

    if "Attendance" in qualifiers:
        if "Attendance" not in row["Shared"] or row["Shared"]["Attendance"] == None:
            return False

        for qual_object in qualifiers["Attendance"]:
            if qual_object["negate"]:
                if row["Shared"]["Attendance"] >= qual_object["values"]["start_val"] and row["Shared"]["Attendance"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Attendance"] >= qual_object["values"]["start_val"] and row["Shared"]["Attendance"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Local Start Time" in qualifiers:
        if "StartTime" not in row["Shared"] or row["Shared"]["StartTime"] == None:
            return False
        if "StadiumID" not in row["Shared"] or row["Shared"]["StadiumID"] == None:
            return False

        venue_obj = team_venues[row["Shared"]["StadiumID"]]
        val_to_check = venue_obj["time_zone"]
        
        event_time = row["Shared"]["StartTime"].astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0).replace(second=0)
        for qual_object in qualifiers["Local Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]

            is_match = event_time >= stat_val and event_time <= end_val
            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    return True

def perform_sub_nfl_game_qualifiers(row, player_data, qualifiers, player_game_info, player_type):
    if not player_game_info or player_game_info["missing_data"]:
        return False

    clear_data(row, player_type)
    
    for at_bat_event in player_game_info["pass_completions"]:
        if handle_da_nfl_quals(row, "pass_completions", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Passing" in headers[player_type["da_type"]]:
                row["Passing"]["Att"] += 1
                row["Passing"]["Cmp"] += 1
                row["Passing"]["Yds"] += at_bat_event["yards"]
                if at_bat_event["is_touchdown"]:
                    row["Passing"]["TD"] += 1
            if at_bat_event["is_first_down"]:
                if "Advanced/Passing" in headers[player_type["da_type"]]:
                    row["Advanced/Passing"]["Pass1D"] += 1
                if "Advanced/Rushing" in headers[player_type["da_type"]]:
                    row["Advanced/Rushing"]["Pass1D"] += 1
                if "Advanced/Receiving" in headers[player_type["da_type"]]:
                    row["Advanced/Receiving"]["Pass1D"] += 1
    
    for at_bat_event in player_game_info["pass_incompletions"]:
        if handle_da_nfl_quals(row, "pass_incompletions", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Passing" in headers[player_type["da_type"]]:
                row["Passing"]["Att"] += 1
    
    for at_bat_event in player_game_info["pass_interceptions"]:
        if handle_da_nfl_quals(row, "pass_interceptions", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Passing" in headers[player_type["da_type"]]:
                row["Passing"]["Att"] += 1
                row["Passing"]["Int"] += 1
                if at_bat_event["is_touchdown"]:
                    row["Era Adjusted Passing"]["Pick6"] += 1
    
    for at_bat_event in player_game_info["pass_sacks"]:
        if handle_da_nfl_quals(row, "pass_sacks", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Passing" in headers[player_type["da_type"]]:
                row["Passing"]["Sk"] += 1
                row["Passing"]["SkYds"] += at_bat_event["yards"]
    
    for at_bat_event in player_game_info["wr_completions"]:
        if handle_da_nfl_quals(row, "wr_completions", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Receiving" in headers[player_type["da_type"]]:
                row["Receiving"]["Tgt"] += 1
                row["Receiving"]["Rec"] += 1
                row["Receiving"]["Yds"] += at_bat_event["yards"]
                if at_bat_event["is_touchdown"]:
                    row["Receiving"]["TD"] += 1
            if at_bat_event["is_first_down"]:
                if "Advanced/Passing" in headers[player_type["da_type"]]:
                    row["Advanced/Passing"]["Rec1D"] += 1
                if "Advanced/Rushing" in headers[player_type["da_type"]]:
                    row["Advanced/Rushing"]["Rec1D"] += 1
                if "Advanced/Receiving" in headers[player_type["da_type"]]:
                    row["Advanced/Receiving"]["Rec1D"] += 1
    
    for at_bat_event in player_game_info["wr_incompletions"]:
        if handle_da_nfl_quals(row, "wr_incompletions", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Receiving" in headers[player_type["da_type"]]:
                row["Receiving"]["Tgt"] += 1
    
    for at_bat_event in player_game_info["wr_2PM"]:
        if handle_da_nfl_quals(row, "wr_2PM", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Scrimmage/All Purpose" in headers[player_type["da_type"]]:
                row["Scrimmage/All Purpose"]["2PM"] += 1

    for at_bat_event in player_game_info["rushes"]:
        if handle_da_nfl_quals(row, "rushes", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Rushing" in headers[player_type["da_type"]]:
                row["Rushing"]["Att"] += 1
                row["Rushing"]["Yds"] += at_bat_event["yards"]
                if at_bat_event["is_touchdown"]:
                    row["Rushing"]["TD"] += 1
            if at_bat_event["is_first_down"]:
                if "Advanced/Passing" in headers[player_type["da_type"]]:
                    row["Advanced/Passing"]["Rush1D"] += 1
                if "Advanced/Rushing" in headers[player_type["da_type"]]:
                    row["Advanced/Rushing"]["Rush1D"] += 1
                if "Advanced/Receiving" in headers[player_type["da_type"]]:
                    row["Advanced/Receiving"]["Rush1D"] += 1
    
    for at_bat_event in player_game_info["rush_2PM"]:
        if handle_da_nfl_quals(row, "rush_2PM", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Scrimmage/All Purpose" in headers[player_type["da_type"]]:
                row["Scrimmage/All Purpose"]["2PM"] += 1
    
    for at_bat_event in player_game_info["fumbles"]:
        if handle_da_nfl_quals(row, "fumbles", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            if "Rushing" in headers[player_type["da_type"]]:
                row["Rushing"]["Fmb"] += 1

    return True

def handle_da_nfl_quals(row, event_name, at_bat_event, qualifiers, player_data, player_type, player_game_info):
    if "Thrown To" in qualifiers:
        if "wr_player" not in at_bat_event or at_bat_event["wr_player"] == None:
            return False

        for qual_object in qualifiers["Thrown To"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["wr_player"] == player["id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Current Team Score" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Current Team Score"], "team_points"):
            return False
    
    if "Current Opponent Score" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Current Opponent Score"], "opp_points"):
            return False
    
    if "Current Score Margin" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Current Score Margin"], "score_margin"):
            return False
    
    if "Current Score Difference" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Current Score Difference"], "score_margin", absolue=True):
            return False

    if "Quarter" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Quarter"], "quarter"):
            return False
    
    if "Overtime" in qualifiers:
        if "down" not in at_bat_event or at_bat_event["down"] == None:
            return False
            
        for qual_object in qualifiers["Overtime"]:
            num_val = at_bat_event["down"]
            if qual_object["negate"]:
                if num_val >= 5:
                    return False
            else:
                if not (num_val >= 5):
                    return False
    
    if "RedZone" in qualifiers:
        if "yard_position" not in at_bat_event or at_bat_event["yard_position"] == None:
            return False
            
        for qual_object in qualifiers["RedZone"]:
            num_val = at_bat_event["yard_position"]
            if qual_object["negate"]:
                if num_val >= 81 and num_val <= 99:
                    return False
            else:
                if not (num_val >= 81 and num_val <= 99):
                    return False
    
    if "Down" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Down"], "down"):
            return False

    if "Down Distance" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Down Distance"], "yards_to_go"):
            return False

    if "Field Position" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Field Position"], "yard_position"):
            return False

    if "Quarter Time" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Quarter Time"], "time"):
            return False

    if "Quarter Time Remaining" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Quarter Time Remaining"], "time_remaining"):
            return False
    
    if "Pass Distance" in qualifiers:
        if not handle_str_qual(at_bat_event, qualifiers["Pass Distance"], "length"):
            return False

    if "Pass Direction" in qualifiers:
        if not handle_str_qual(at_bat_event, qualifiers["Pass Direction"], "direction"):
            return False
    
    return True

def handle_num_qual(at_bat_event, qualifiers, num_str, absolute=False):
    has_any_match = False
    if num_str not in at_bat_event or at_bat_event[num_str] == None:
        return False
        
    has_row_match = True
    for qual_object in qualifiers:
        num_val = at_bat_event[num_str]
        if absolute:
            num_val = abs(num_val)
        stat_val = qual_object["values"]["start_val"]
        end_val = qual_object["values"]["end_val"]

        if qual_object["negate"]:
            if num_val >= stat_val and num_val <= end_val:
                has_row_match = False
        else:
            if not (num_val >= stat_val and num_val <= end_val):
                has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def handle_str_qual(at_bat_event, qualifiers, str_str):
    has_any_match = False
    if str_str not in at_bat_event or at_bat_event[str_str] == None:
        return False
        
    has_row_match = True
    for qual_object in qualifiers:
        str_val = at_bat_event[str_str].lower()
        if qual_object["negate"]:
            if str_val in qual_object["values"]:
                has_row_match = False
        else:
            if not str_val in qual_object["values"]:
                has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def clear_data(row, player_type):
    if "Passing" in headers[player_type["da_type"]]:
        if not "Passing" in row:
            row["Passing"] = {}
        row["Passing"]["Cmp"] = 0
        row["Passing"]["Att"] = 0
        row["Passing"]["Yds"] = 0
        row["Passing"]["TD"] = 0
        row["Passing"]["Int"] = 0
        row["Passing"]["Sk"] = 0
        row["Passing"]["SkYds"] = 0
    if "Era Adjusted Passing" in headers[player_type["da_type"]]:
        if not "Era Adjusted Passing" in row:
            row["Era Adjusted Passing"] = {}
        row["Era Adjusted Passing"]["Pick6"] = 0
    if "Receiving" in headers[player_type["da_type"]]:
        if not "Receiving" in row:
            row["Receiving"] = {}
        row["Receiving"]["Tgt"] = 0
        row["Receiving"]["Rec"] = 0
        row["Receiving"]["Yds"] = 0
        row["Receiving"]["TD"] = 0
    if "Rushing" in headers[player_type["da_type"]]:
        if not "Rushing" in row:
            row["Rushing"] = {}
        row["Rushing"]["Att"] = 0
        row["Rushing"]["Yds"] = 0
        row["Rushing"]["TD"] = 0
        row["Rushing"]["Fmb"] = 0
        row["Rushing"]["FmbLst"] = 0
    if "Scrimmage/All Purpose" in headers[player_type["da_type"]]:
        if not "Scrimmage/All Purpose" in row:
            row["Scrimmage/All Purpose"] = {}
        row["Scrimmage/All Purpose"]["2PM"] = 0
    if "Advanced/Passing" in headers[player_type["da_type"]]:
        if not "Advanced/Passing" in row:
            row["Advanced/Passing"] = {}
        row["Advanced/Passing"]["Att"] = 0
        row["Advanced/Passing"]["Rush"] = 0
        row["Advanced/Passing"]["Rec"] = 0
        row["Advanced/Passing"]["Pass1D"] = 0
        row["Advanced/Passing"]["Rush1D"] = 0
        row["Advanced/Passing"]["Rec1D"] = 0
    if "Advanced/Rushing" in headers[player_type["da_type"]]:
        if not "Advanced/Rushing" in row:
            row["Advanced/Rushing"] = {}
        row["Advanced/Rushing"]["Att"] = 0
        row["Advanced/Rushing"]["Rush"] = 0
        row["Advanced/Rushing"]["Rec"] = 0
        row["Advanced/Rushing"]["Pass1D"] = 0
        row["Advanced/Rushing"]["Rush1D"] = 0
        row["Advanced/Rushing"]["Rec1D"] = 0
    if "Advanced/Receiving" in headers[player_type["da_type"]]:
        if not "Advanced/Receiving" in row:
            row["Advanced/Receiving"] = {}
        row["Advanced/Receiving"]["Att"] = 0
        row["Advanced/Receiving"]["Rush"] = 0
        row["Advanced/Receiving"]["Rec"] = 0
        row["Advanced/Receiving"]["Pass1D"] = 0
        row["Advanced/Receiving"]["Rush1D"] = 0
        row["Advanced/Receiving"]["Rec1D"] = 0

def fix_first_downs(pre_qual_teams_map, all_rows):
    for row in all_rows:
        if len(pre_qual_teams_map[row["Shared"]["Year"]]) == 1 or row["Shared"]["Year"] >= 2018 or row["Shared"]["is_playoffs"]:
            if "G" in row["Shared"]:
                row["Shared"]["G1D"] = row["Shared"]["G"]
            if "Passing" in row and "Att" in row["Passing"]:
                row["Passing"]["Att1D"] = row["Passing"]["Att"]
            if "Rushing" in row and "Att" in row["Rushing"]:
                row["Rushing"]["Att1D"] = row["Rushing"]["Att"]
            if "Receiving" in row and "Rec" in row["Receiving"]:
                row["Receiving"]["Rec1D"] = row["Receiving"]["Rec"]
        else:
            if "Advanced/Passing" in row:
                if "Pass1D" in row["Advanced/Passing"]:
                    del row["Advanced/Passing"]["Pass1D"]
                if "Rush1D" in row["Advanced/Passing"]:
                    del row["Advanced/Passing"]["Rush1D"]
                if "Rec1D" in row["Advanced/Passing"]:
                    del row["Advanced/Passing"]["Rec1D"]
            if "Advanced/Rushing" in row and "Att" in row["Advanced/Rushing"]:
                if "Pass1D" in row["Advanced/Rushing"]:
                    del row["Advanced/Rushing"]["Pass1D"]
                if "Rush1D" in row["Advanced/Rushing"]:
                    del row["Advanced/Rushing"]["Rush1D"]
                if "Rec1D" in row["Advanced/Rushing"]:
                    del row["Advanced/Rushing"]["Rec1D"]
            if "Advanced/Receiving" in row and "Rec" in row["Advanced/Receiving"]:
                if "Pass1D" in row["Advanced/Receiving"]:
                    del row["Advanced/Receiving"]["Pass1D"]
                if "Rush1D" in row["Advanced/Receiving"]:
                    del row["Advanced/Receiving"]["Rush1D"]
                if "Rec1D" in row["Advanced/Receiving"]:
                    del row["Advanced/Receiving"]["Rec1D"]
            row["Shared"]["is_missing_first_downs"] = True

def fix_seasons(all_rows, player_type):
    the_over_header = None
    for pot_header in headers[player_type["da_type"]]:
        if pot_header.startswith("Awards/Honors/"):
            the_over_header = pot_header
            break

    if the_over_header:
        stats_to_fix = ["Seasons", "UniqueSeasons", "NonFakeSeasons", "RegularSeasons", "RegularAVSeasons", "PlayoffSeasons"]
        for stat_to_fix in stats_to_fix:
            years = set()
            for row in all_rows:
                if row["Shared"]["Year"] in years:
                    row[the_over_header][stat_to_fix] = 0
                else:
                    if stat_to_fix in row[the_over_header] and row[the_over_header][stat_to_fix]:
                        years.add(row["Shared"]["Year"])

def handle_playoff_weeks(all_rows):
    handle_schedule_stats(all_rows, [], "Only")

    for row in all_rows:
        weeks_per_season = None
        for weeks_obj in year_weeks_played:
            weeks_start_year = weeks_obj["start_year"]
            weeks_end_year = weeks_obj["end_year"]
            if (not weeks_start_year or row["Shared"]["Year"] >= weeks_start_year) and (not weeks_end_year or row["Shared"]["Year"] <= weeks_end_year):
                weeks_per_season = weeks_obj["weeks"]
                
        if not weeks_per_season:
            raise get_constant_data.CustomMessageException("Unknown number of weeks in season " + row["Shared"]["Year"])
        
        if row["Shared"]["is_playoffs"]:
            if row["Shared"]["Round"] == "wc":
                row["Shared"]["Week"] = weeks_per_season + 1
            elif row["Shared"]["Round"] == "dr":
                if row["Shared"]["Year"] < 1978 or row["Shared"]["Year"] == 1982:
                    row["Shared"]["Week"] = weeks_per_season + 1
                else:
                    row["Shared"]["Week"] = weeks_per_season + 2
            elif row["Shared"]["Round"] == "cc":
                if row["Shared"]["Year"] < 1970: 
                    row["Shared"]["Week"] = weeks_per_season + 1
                elif row["Shared"]["Year"] < 1978 or row["Shared"]["Year"] == 1982:
                    row["Shared"]["Week"] = weeks_per_season + 2
                else:
                    row["Shared"]["Week"] = weeks_per_season + 3
            elif row["Shared"]["Round"] == "sb":
                if row["Shared"]["Year"] < 1967: 
                    row["Shared"]["Week"] = weeks_per_season + 2
                elif row["Shared"]["Year"] < 1970: 
                    row["Shared"]["Week"] = weeks_per_season + 3
                elif row["Shared"]["Year"] < 1978 or row["Shared"]["Year"] == 1982:
                    row["Shared"]["Week"] = weeks_per_season + 3
                else:
                    row["Shared"]["Week"] = weeks_per_season + 4
            elif row["Shared"]["Round"] == "lc":
                if row["Shared"]["Year"] < 1967: 
                    row["Shared"]["Week"] = weeks_per_season + 1
                elif row["Shared"]["Year"] < 1970: 
                    row["Shared"]["Week"] = weeks_per_season + 2

def handle_week_qual(all_rows, qualifier, player_data, is_playoffs):
    new_rows = []
    week_count = qualifier["time_unit"]
    current_week = 0
    valid_weeks_by_year = {}
    seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))

    if qualifier["compare_type"] == "first":
        for year in seasons:
            if year not in valid_weeks_by_year:
                valid_weeks_by_year[year] = set()
            
            weeks_per_season = None
            for weeks_obj in year_weeks_played:
                weeks_start_year = weeks_obj["start_year"]
                weeks_end_year = weeks_obj["end_year"]
                if (not weeks_start_year or year >= weeks_start_year) and (not weeks_end_year or year <= weeks_end_year):
                    weeks_per_season = weeks_obj["weeks"]
                    if is_playoffs:
                        weeks_per_season += weeks_obj["weeks_playoffs"]
                    
            if not weeks_per_season:
                raise get_constant_data.CustomMessageException("Unknown number of weeks in season " + year)

            for week_num in range(1, weeks_per_season + 1):
                valid_weeks_by_year[year].add(week_num)
                current_week += 1
                if current_week == week_count:
                    break
            if current_week == week_count:
                break
    else:
        for year in reversed(seasons):
            if year not in valid_weeks_by_year:
                valid_weeks_by_year[year] = set()
            
            weeks_per_season = None
            for weeks_obj in year_weeks_played:
                weeks_start_year = weeks_obj["start_year"]
                weeks_end_year = weeks_obj["end_year"]
                if (not weeks_start_year or year >= weeks_start_year) and (not weeks_end_year or year <= weeks_end_year):
                    weeks_per_season = weeks_obj["weeks"]
                    if is_playoffs:
                        weeks_per_season += weeks_obj["weeks_playoffs"]
                    
            if not weeks_per_season:
                raise get_constant_data.CustomMessageException("Unknown number of weeks in season " + year)

            if year == get_constant_data.end_year:
                week_to_use = 0

                if player_data["player_current_team_link"] and player_data["player_current_team_link"] in qualifier["current_week"]["regular_season"]:
                    week_to_use += qualifier["current_week"]["regular_season"][player_data["player_current_team_link"]]
                else:
                    if qualifier["current_week"]["regular_season"]:
                        week_to_use += max(qualifier["current_week"]["regular_season"].values())
                    else:
                        week_to_use = year_weeks_played[len(year_weeks_played) - 1]["weeks"]
                if is_playoffs:
                    if player_data["player_current_team_link"] and player_data["player_current_team_link"] in qualifier["current_week"]["playoffs"]:
                        week_to_use += qualifier["current_week"]["playoffs"][player_data["player_current_team_link"]]
                    else:
                        if qualifier["current_week"]["regular_season"]:
                            week_to_use += max(qualifier["current_week"]["playoffs"].values())
                        else:
                            week_to_use = year_weeks_played[len(year_weeks_played) - 1]["weeks"] + year_weeks_played[len(year_weeks_played) - 1]["weeks_playoffs"] 

                week_range = reversed(range(1, week_to_use + 1))
            else:
                week_range = reversed(range(1, weeks_per_season + 1))

            for week_num in week_range:
                valid_weeks_by_year[year].add(week_num)
                current_week += 1
                if current_week == week_count:
                    break
            if current_week == week_count:
                break
    
    if valid_weeks_by_year:
        first_year = min(valid_weeks_by_year.keys())
        first_week = min(valid_weeks_by_year[first_year])

        last_year = max(valid_weeks_by_year.keys())
        last_week = max(valid_weeks_by_year[last_year])

        if "explain_str" not in qualifier:
            qualifier["explain_str"] = []
        current_explain_strs = qualifier["explain_str"]

        if first_year == last_year and first_week == last_week:
            qualifier["explain_str"] = "Week " + str(first_week) + " " + str(first_year)
        else:
            qualifier["explain_str"] = "Week " + str(first_week) + " " + str(first_year) + " to " + "Week " + str(last_week) + " " + str(last_year)
        
        qualifier["explain_str"] = current_explain_strs + [qualifier["explain_str"]]

    for row in all_rows:
        if qualifier["negate"]:
            if not (row["Shared"]["Year"] in valid_weeks_by_year and row["Shared"]["Week"] in valid_weeks_by_year[row["Shared"]["Year"]]):
                new_rows.append(row)
        else:
            if row["Shared"]["Year"] in valid_weeks_by_year and row["Shared"]["Week"] in valid_weeks_by_year[row["Shared"]["Year"]]:
                new_rows.append(row)

    return new_rows

def handle_fumbles_lost(player_data, all_rows, player_type, ind_player_type, time_frame):
    player_url = game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return
        else:
            raise

    comments = None
    previous_headers = set()
    game_map = {}
    table_name = "stats"
    table = player_page.find("table", id=table_name)
    the_over_header = "Rushing"
    if not table:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_table = temp_soup.find("table", id=table_name)
            if temp_table:
                table = temp_table
                break

    if table:
        over_header_values = []
        over_header_columns = []
        over_header_columns = table.find("thead").find("tr", {"class" : "over_header"})
        for over_header_column in over_header_columns.find_all("th"):
            colspan = over_header_column.get("colspan")
            if colspan:
                colspan = int(colspan)
            else:
                colspan = 1
            contents = over_header_column.find(text=True)
            for x in range(colspan):
                if contents:
                    over_header_values.append(str(contents))
                else:
                    over_header_values.append(None)

        header_columns = None
        if over_header_columns: 
            header_columns = over_header_columns.find_next_sibling().find_all("th")
        else:
            header_columns = table.find("thead").find_all("th")
        
        header_values = []
        for header in header_columns:
            contents = header.find(text=True)
            if contents:
                header_values.append(str(contents))
            else:
                header_values.append(None)
                
        standard_table_rows = table.find("tbody").find_all("tr")
        for i in range(len(standard_table_rows)):
            row = standard_table_rows[i]
            if not row.get("class") or "full_table" in row.get("class"):
                row_data = parse_row(row, table_name, time_frame, False, True, player_type, ind_player_type, header_values, over_header_values, previous_headers, game_map, None, None, None)
                
                if not row_data:
                    continue

                if "Tm" in row_data["Shared"] and row_data["Shared"]["Tm"] != "TOT" and the_over_header in row_data and "FmbLst" in row_data[the_over_header]:
                    for row in all_rows:
                        if row["Shared"]["Year"] == row_data["Shared"]["Year"] and row["Shared"]["Tm"] == row_data["Shared"]["Tm"]:
                            if the_over_header not in row:
                                row[the_over_header] = {}
                            if not "FmbLst" in row[the_over_header]:
                                row[the_over_header]["FmbLst"] = 0
                            row[the_over_header]["FmbLst"] += row_data[the_over_header]["FmbLst"]
                            if "Scrimmage/All Purpose" in headers[player_type["da_type"]]:
                                if not "Scrimmage/All Purpose" in row:
                                    row["Scrimmage/All Purpose"] = {}
                                if not "FmbLst" in row["Scrimmage/All Purpose"]:
                                    row["Scrimmage/All Purpose"]["FmbLst"] = 0
                                row["Scrimmage/All Purpose"]["FmbLst"] += row_data["Scrimmage/All Purpose"]["FmbLst"]
                            break

def handle_missing_playoff_rows(player_page, player_data, valid_years, all_rows, player_type, ind_player_type, time_frame):     
    table_names = ["passing_playoffs", "receiving_and_rushing_playoffs", "rushing_and_receiving_playoffs", "scoring_playoffs", "defense_playoffs", "kicking_playoffs", "returns_playoffs", "snap_counts_playoffs", "games_played_playoffs"]
    comments = None
    previous_headers = set()
    game_map = {}
    for table_index, table_name in enumerate(table_names):
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            over_header_values = []
            over_header_columns = []
            if table_name != "passing_playoffs" and table_name != "scoring_playoffs" and table_name != "games_played_playoffs":
                over_header_columns = table.find("thead").find("tr", {"class" : "over_header"})
                for over_header_column in over_header_columns.find_all("th"):
                    colspan = over_header_column.get("colspan")
                    if colspan:
                        colspan = int(colspan)
                    else:
                        colspan = 1
                    contents = over_header_column.find(text=True)
                    for x in range(colspan):
                        if contents:
                            over_header_values.append(str(contents))
                        else:
                            over_header_values.append(None)

            header_columns = None
            if over_header_columns: 
                header_columns = over_header_columns.find_next_sibling().find_all("th")
            else:
                header_columns = table.find("thead").find_all("th")
            
            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))
                else:
                    header_values.append(None)
            
            if (table_name == "passing_playoffs" or table_name == "scoring_playoffs" or table_name == "games_played_playoffs"):
                for x in range(len(header_values)):
                    if table_name == "passing_playoffs":
                        over_header_values.append("Passing")
                    else:
                        over_header_values.append("Rushing")
                    
            standard_table_rows = table.find("tbody").find_all("tr")
            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                if not row.get("class") or "full_table" in row.get("class"):
                    row_data = parse_row(row, table_name, time_frame, False, False, player_type, ind_player_type, header_values, over_header_values, previous_headers, game_map, None, None, None)
                    
                    if not row_data:
                        continue

                    if "Tm" in row_data["Shared"] and row_data["Shared"]["Tm"] != "TOT":
                        if not perform_qualifier(player_data, player_type, ind_player_type, row_data, time_frame, all_rows):
                            continue

                        if not row_data["Shared"]["Year"] in valid_years:
                            all_rows.append({"Shared" : {"Year" : row_data["Shared"]["Year"], "Date" : row_data["Shared"]["Date"], "Tm" : row_data["Shared"]["Tm"], "SpecificDate" : row_data["Shared"]["SpecificDate"], "is_playoffs" : False, "fake_playoff_row" : True}})
                            valid_years.append(row_data["Shared"]["Year"])

def handle_season_only_stats(is_game_page, is_game, player_page, player_data, player_type, ind_player_type, time_frame, all_rows, pre_qual_teams_map):
    the_over_header = None
    for pot_header in headers[player_type["da_type"]]:
        if pot_header.startswith("Advanced/"):
            the_over_header = pot_header
            break
    
    if not the_over_header:
        return
    
    og_player_age = player_page

    if is_game_page:
        player_url = advanced_game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"])
        request = urllib.request.Request(player_url, headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return
            else:
                raise

    if is_game_page:
        if the_over_header == "Advanced/Passing":
            table_names = ["advanced_passing", "advanced_passing_playoffs", "advanced_rushing_and_receiving", "advanced_rushing_and_receiving_playoffs"]
        elif the_over_header == "Advanced/Rushing":
            table_names = ["advanced_rushing_and_receiving", "advanced_rushing_and_receiving_playoffs"]
        elif the_over_header == "Advanced/Receiving":
            table_names = ["advanced_rushing_and_receiving", "advanced_rushing_and_receiving_playoffs"]
        elif the_over_header.startswith("Advanced/Defense"):
            table_names = ["advanced_defense", "advanced_defense_playoffs"]
        else:
            table_names = []
    else:
        if the_over_header == "Advanced/Passing":
            table_names = ["advanced_air_yards", "advanced_accuracy", "advanced_pressure", "detailed_rushing_and_receiving", "detailed_receiving_and_rushing"]
        elif the_over_header == "Advanced/Rushing":
            table_names = ["detailed_rushing_and_receiving", "detailed_receiving_and_rushing"]
        elif the_over_header == "Advanced/Receiving":
            table_names = ["detailed_rushing_and_receiving", "detailed_receiving_and_rushing"]
        elif the_over_header.startswith("Advanced/Defense"):
            table_names = ["detailed_defense"]
        else:
            table_names = []
        
    comments = None
    previous_headers = set()
    game_map = {}
    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            over_header_values = []
            over_header_columns = []
            if table_name != "passing" and table_name != "scoring" and table_name != "games_played":
                over_header_columns = table.find("thead").find("tr", {"class" : "over_header"})
                for over_header_column in over_header_columns.find_all("th"):
                    colspan = over_header_column.get("colspan")
                    if colspan:
                        colspan = int(colspan)
                    else:
                        colspan = 1
                    contents = over_header_column.find(text=True)
                    for x in range(colspan):
                        if contents:
                            over_header_values.append(str(contents))
                        else:
                            over_header_values.append(None)

            header_columns = None
            if over_header_columns: 
                header_columns = over_header_columns.find_next_sibling().find_all("th")
            else:
                header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))
                else:
                    header_values.append(None)
            
            if (table_name == "passing" or table_name == "scoring" or table_name == "games_played"):
                for x in range(len(header_values)):
                    if table_name == "passing":
                        over_header_values.append("Passing")
                    else:
                        over_header_values.append("Rushing")

            standard_table_rows = table.find_all("tr")

            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                    if not match and (row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class")):
                        match = True
                    elif table_name.startswith("advanced_") and (row_id.startswith("stats.") or row_id.startswith("stats_playoffs.")):
                        match = True
                elif ((table_name == "advanced_air_yards" or table_name == "advanced_accuracy" or table_name == "advanced_pressure") or table_name.startswith("detailed_")) and row.get("class") and ("full_table" in row.get("class") or ("partial_table" in row.get("class") and not "spacer" in row.get("class"))):
                    match = True

                if match:
                    row_data = parse_row(row, table_name, time_frame, is_game_page, False, player_type, ind_player_type, header_values, over_header_values, previous_headers, game_map, None, None, None)
                    
                    if not row_data:
                        continue

                    if row_data["Shared"]["Tm"] != "TOT":
                        if the_over_header in row_data:
                            for pot_row in all_rows:
                                pot_row_col_to_use = ("SpecificDate" if "SpecificDate" in pot_row["Shared"] else "Date") if is_game_page else "Year"
                                row_data_col_to_use = "Date" if is_game_page else "Year"
                                if pot_row["Shared"][pot_row_col_to_use] == row_data["Shared"][row_data_col_to_use] and pot_row["Shared"]["Tm"] == row_data["Shared"]["Tm"]:
                                    if not the_over_header in pot_row:
                                        pot_row[the_over_header] = {}
                                        
                                    for stat in row_data[the_over_header]:
                                        if stat in get_constant_data.stat_groups[the_over_header]:
                                            if stat == "Pass1D" or stat == "Rush1D" or stat == "Rec1D":
                                                if not (pot_row["Shared"]["is_playoffs"] and not is_game):
                                                    if stat not in pot_row[the_over_header]:
                                                        pot_row[the_over_header][stat] = 0
                                                    pot_row[the_over_header][stat] += row_data[the_over_header][stat]
                                            else:
                                                pot_row[the_over_header][stat] = row_data[the_over_header][stat]
                                                if stat == "ThAwy" or stat == "Spikes":
                                                    new_stat = stat + "Tgt"
                                                    pot_row[the_over_header][new_stat] = row_data[the_over_header][stat]
                                    break

    for pot_row in all_rows:
        if the_over_header in pot_row:
            if the_over_header == "Advanced/Passing" or the_over_header == "Advanced/Rushing" or the_over_header == "Advanced/Receiving":                
                touches = 0.0
                if "Rush" in pot_row[the_over_header]:
                    touches += pot_row[the_over_header]["Rush"]
                if "Rec" in pot_row[the_over_header]:
                    touches += pot_row[the_over_header]["Rec"]
                pot_row[the_over_header]["Touch"] = touches

                if "Receiving" in pot_row and pot_row["Shared"]["Year"] >= 2018:
                    pot_row[the_over_header]["RecTD"] = pot_row["Receiving"]["TD"]
    
    if not is_game:
        table_names = ["passing_playoffs", "receiving_and_rushing_playoffs", "rushing_and_receiving_playoffs"]

        comments = None
        previous_headers = set()
        game_map = {}
        for table_name in table_names:
            table = og_player_age.find("table", id=table_name)
            if not table:
                if not comments:
                    comments = og_player_age.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("table", id=table_name)
                    if temp_table:
                        table = temp_table
                        break

            if table:
                over_header_values = []
                over_header_columns = []
                if not table_name.startswith("passing"):
                    over_header_columns = table.find("thead").find("tr", {"class" : "over_header"})
                    for over_header_column in over_header_columns.find_all("th"):
                        colspan = over_header_column.get("colspan")
                        if colspan:
                            colspan = int(colspan)
                        else:
                            colspan = 1
                        contents = over_header_column.find(text=True)
                        for x in range(colspan):
                            if contents:
                                over_header_values.append(str(contents))
                            else:
                                over_header_values.append(None)

                header_columns = None
                if over_header_columns: 
                    header_columns = over_header_columns.find_next_sibling().find_all("th")
                else:
                    header_columns = table.find("thead").find_all("th")

                header_values = []
                for header in header_columns:
                    contents = header.find(text=True)
                    if contents:
                        header_values.append(str(contents))
                    else:
                        header_values.append(None)
                
                if table_name.startswith("passing"):
                    for x in range(len(header_values)):
                        over_header_values.append("Passing")

                standard_table_rows = table.find("tbody").find_all("tr")
                for i in range(len(standard_table_rows)):
                    row = standard_table_rows[i]
                    row_id = row.get("id")
                    if not row.get("class") or "full_table" in row.get("class"):
                        row_data = parse_row(row, table_name, time_frame, False, False, player_type, ind_player_type, header_values, over_header_values, previous_headers, game_map, None, None, None)
                        
                        if not row_data:
                            continue

                        if the_over_header in row_data:
                            for pot_row in all_rows:
                                if pot_row["Shared"]["Year"] == row_data["Shared"]["Year"] and pot_row["Shared"]["is_playoffs"]:
                                    if not the_over_header in pot_row:
                                        pot_row[the_over_header] = {}
                                        
                                    for stat in row_data[the_over_header]:
                                        if stat in get_constant_data.stat_groups[the_over_header]:
                                            if "1D" in stat or "Lng" in stat:
                                                if stat not in pot_row[the_over_header]:
                                                    pot_row[the_over_header][stat] = row_data[the_over_header][stat]
                                    break


        if [row for row in all_rows if not row["Shared"]["is_playoffs"] and row["Shared"]["Year"] >= 2018] and [year for year in pre_qual_teams_map if year >= 2018 and len(pre_qual_teams_map[year]) > 1]:
            if the_over_header == "Advanced/Passing":
                table_names = ["advanced_passing", "advanced_passing_playoffs", "advanced_rushing_and_receiving", "advanced_rushing_and_receiving_playoffs"]
            elif the_over_header == "Advanced/Rushing":
                table_names = ["advanced_rushing_and_receiving", "advanced_rushing_and_receiving_playoffs"]
            elif the_over_header == "Advanced/Receiving":
                table_names = ["advanced_rushing_and_receiving", "advanced_rushing_and_receiving_playoffs"]
            elif the_over_header.startswith("Advanced/Defense"):
                table_names = ["advanced_defense", "advanced_defense_playoffs"]
            else:
                table_names = []

            for table_name in table_names:
                table = player_page.find("table", id=table_name)
                if not table:
                    if not comments:
                        comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                    for c in comments:
                        temp_soup = BeautifulSoup(c, "lxml")
                        temp_table = temp_soup.find("table", id=table_name)
                        if temp_table:
                            table = temp_table
                            break

                if table:
                    over_header_values = []
                    over_header_columns = []
                    if table_name != "passing" and table_name != "scoring" and table_name != "games_played":
                        over_header_columns = table.find("thead").find("tr", {"class" : "over_header"})
                        for over_header_column in over_header_columns.find_all("th"):
                            colspan = over_header_column.get("colspan")
                            if colspan:
                                colspan = int(colspan)
                            else:
                                colspan = 1
                            contents = over_header_column.find(text=True)
                            for x in range(colspan):
                                if contents:
                                    over_header_values.append(str(contents))
                                else:
                                    over_header_values.append(None)

                    header_columns = None
                    if over_header_columns: 
                        header_columns = over_header_columns.find_next_sibling().find_all("th")
                    else:
                        header_columns = table.find("thead").find_all("th")

                    header_values = []
                    for header in header_columns:
                        contents = header.find(text=True)
                        if contents:
                            header_values.append(str(contents))
                        else:
                            header_values.append(None)
                    
                    if (table_name == "passing" or table_name == "scoring" or table_name == "games_played"):
                        for x in range(len(header_values)):
                            if table_name == "passing":
                                over_header_values.append("Passing")
                            else:
                                over_header_values.append("Rushing")

                    standard_table_rows = table.find_all("tr")

                    for i in range(len(standard_table_rows)):
                        row = standard_table_rows[i]
                        row_id = row.get("id")
                        match = False
                        if row_id:
                            match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                            if not match and (row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class")):
                                match = True
                            elif table_name.startswith("advanced_") and (row_id.startswith("stats.") or row_id.startswith("stats_playoffs.")):
                                match = True
                        elif ((table_name == "advanced_air_yards" or table_name == "advanced_accuracy" or table_name == "advanced_pressure") or table_name.startswith("detailed_")) and row.get("class") and ("full_table" in row.get("class") or ("partial_table" in row.get("class") and not "spacer" in row.get("class"))):
                            match = True

                        if match:
                            row_data = parse_row(row, table_name, time_frame, is_game_page, False, player_type, ind_player_type, header_values, over_header_values, previous_headers, game_map, None, None, None)
                            
                            if not row_data:
                                continue

                            if row_data["Shared"]["Tm"] != "TOT":
                                if the_over_header in row_data:
                                    for pot_row in all_rows:
                                        pot_row_col_to_use = ("SpecificDate" if "SpecificDate" in pot_row["Shared"] else "Date") if is_game_page else "Year"
                                        row_data_col_to_use = "Date" if is_game_page else "Year"
                                        if pot_row["Shared"][pot_row_col_to_use] == row_data["Shared"][row_data_col_to_use] and pot_row["Shared"]["Tm"] == row_data["Shared"]["Tm"]:
                                            if not the_over_header in pot_row:
                                                pot_row[the_over_header] = {}
                                                
                                            for stat in row_data[the_over_header]:
                                                if stat in get_constant_data.stat_groups[the_over_header]:
                                                    if stat == "Pass1D" or stat == "Rush1D" or stat == "Rec1D":
                                                        if row_data["Shared"]["Year"] >= 2018 and len(pre_qual_teams_map[row_data["Shared"]["Year"]]) > 1:
                                                            if stat not in pot_row[the_over_header]:
                                                                pot_row[the_over_header][stat] = 0
                                                            pot_row[the_over_header][stat] += row_data[the_over_header][stat]
                                            break

def handle_awards(player_page, player_data, player_type, ind_player_type, time_frame, years_to_skip, years_to_skip_champ, all_rows, is_full_career):
    the_over_header = None
    for pot_header in headers[player_type["da_type"]]:
        if pot_header.startswith("Awards/Honors/"):
            the_over_header = pot_header
            break

    count_divs = {
        "leaderboard_pro_bowls" : "ProBowl"
    }

    is_career = (time_frame["type"] == "date" and time_frame["time_start"] == datetime.date.min.year and time_frame["time_end"] == current_season) or is_full_career
    has_quals = bool(time_frame["qualifiers"])
    is_full_career = is_full_career if is_full_career else is_career and not has_quals

    comments = None
    for div_id in count_divs:
        count_div = player_page.find("div", id=div_id)
        if not count_div:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_div = temp_soup.find("div", id=div_id)
                if temp_div:
                    count_div = temp_div
                    break
                    
        if count_div:
            count_table_links = count_div.find("table").find_all("a")
            for count_table_link in count_table_links:
                year_str = str(count_table_link.find(text=True)).split("-")[0].split()[0]
                if year_str.isdigit():
                    year = int(year_str)
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Shared"]["Year"] == year:
                                if the_over_header not in row:
                                    row[the_over_header] = {}
                                if not count_divs[div_id] in row[the_over_header]:
                                    row[the_over_header][count_divs[div_id]] = 0
                                row[the_over_header][count_divs[div_id]] += 1
                                break

    awards_div = player_page.find("div", id="leaderboard_awards")
    if not awards_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="leaderboard_awards")
            if temp_div:
                awards_div = temp_div
                break

    if awards_div:
        awards_table_rows = awards_div.find("table").find_all("td")
        for awards_table_row in awards_table_rows:
            award_text = ""
            award_text_links = awards_table_row.find_all("a")
            for award_text_link in award_text_links:
                award_text += str(award_text_link.find(text=True))

            if award_text.endswith("AP MVP"):
                year = int(award_text.split()[0])
                if int(year) not in years_to_skip:
                    for row in all_rows:
                        if row["Shared"]["Year"] == year:
                            if the_over_header not in row:
                                row[the_over_header] = {}
                            if not "MVP" in row[the_over_header]:
                                row[the_over_header]["MVP"] = 0
                            row[the_over_header]["MVP"] += 1
                            break
            elif award_text.endswith("AP Offensive Rookie of the Year") or award_text.endswith("AP Defensive Rookie of the Year") or award_text.endswith("AP Rookie of the Year"):
                year = int(award_text.split()[0])
                if int(year) not in years_to_skip:
                    for row in all_rows:
                        if row["Shared"]["Year"] == year:
                            if the_over_header not in row:
                                row[the_over_header] = {}
                            if not "ROY" in row[the_over_header]:
                                row[the_over_header]["ROY"] = 0
                            row[the_over_header]["ROY"] += 1
                            break
            elif award_text.endswith("AP Offensive Player of the Year"):
                if "OPOY" in get_constant_data.stat_groups[the_over_header]:
                    year = int(award_text.split()[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Shared"]["Year"] == year:
                                if the_over_header not in row:
                                    row[the_over_header] = {}
                                if not "OPOY" in row[the_over_header]:
                                    row[the_over_header]["OPOY"] = 0
                                row[the_over_header]["OPOY"] += 1
                                break
            elif award_text.endswith("AP Defensive Player of the Year"):
                if "DPOY" in get_constant_data.stat_groups[the_over_header]:
                    year = int(award_text.split()[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Shared"]["Year"] == year:
                                if the_over_header not in row:
                                    row[the_over_header] = {}
                                if not "DPOY" in row[the_over_header]:
                                    row[the_over_header]["DPOY"] = 0
                                row[the_over_header]["DPOY"] += 1
                                break
            elif award_text.endswith("Super Bowl MVP"):
                year = int(award_text.split()[0])
                for row in all_rows:
                    if row["Shared"]["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Shared"]["Year"]] == row["Shared"]["RawTm"]:
                        if row["Shared"]["Year"] == year:
                            if the_over_header not in row:
                                row[the_over_header] = {}
                            if not "SBMVP" in row[the_over_header]:
                                row[the_over_header]["SBMVP"] = 0
                            row[the_over_header]["SBMVP"] += 1
                            break

    all_pro_table = player_page.find("table", id="all_pro")
    if not all_pro_table:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_table = temp_soup.find("table", id="all_pro")
            if temp_table:
                all_pro_table = temp_table
                break
    
    if all_pro_table:
        all_pro_rows = all_pro_table.find_all("tr")
        for all_pro_row in all_pro_rows:
            year_col = all_pro_row.find(attrs={"data-stat" : "year"})
            if year_col:
                year_str = year_col.find(text=True)
                if year_str and str(year_str).isdigit():
                    year = int(str(year_str))
                    if int(year) not in years_to_skip:
                        team_str = str(all_pro_row.find(attrs={"data-stat" : "team"}).find(text=True))
                        voter_str = str(all_pro_row.find(attrs={"data-stat" : "voters"}).find(text=True))
                        level_str = all_pro_row.find(attrs={"data-stat" : "level"}).find(text=True)
                        if voter_str == "Associated Press" and not level_str:
                            level = "APAllPro:1st" if team_str.startswith("1st") else "APAllPro:2nd"
                            for row in all_rows:
                                if row["Shared"]["Year"] == year:
                                    if the_over_header not in row:
                                        row[the_over_header] = {}
                                    if level == "APAllPro:1st":
                                        row[the_over_header][level] = 1
                                        row[the_over_header]["APAllPro:2nd"] = 0
                                    elif not row[the_over_header].get("APAllPro:1st", None):
                                        row[the_over_header]["APAllPro:2nd"] = 1
                                    break
    
    if "PassTitle" in get_constant_data.stat_groups[the_over_header] or "RushTitle" in get_constant_data.stat_groups[the_over_header] or "RecTitle" in get_constant_data.stat_groups[the_over_header] or "SkTitle" in get_constant_data.stat_groups[the_over_header] or "IntTitle" in get_constant_data.stat_groups[the_over_header]:
        if "PassTitle" in get_constant_data.stat_groups[the_over_header]:
            table_names = ["passing"]
            row_names = ["pass_yds"]
            field_names = ["PassTitle"]
        elif "RushTitle" in get_constant_data.stat_groups[the_over_header]:
            table_names = ["receiving_and_rushing", "rushing_and_receiving"]
            row_names = ["rush_yds"]
            field_names = ["RushTitle"]
        elif "RecTitle" in get_constant_data.stat_groups[the_over_header]:
            table_names = ["receiving_and_rushing", "rushing_and_receiving"]
            row_names = ["rec_yds"]
            field_names = ["RecTitle"]
        elif "SkTitle" in get_constant_data.stat_groups[the_over_header]:
            table_names = ["defense"]
            row_names = ["sacks", "tackles_combined"]
            field_names = ["SkTitle", "TcklTitle"]
        else:
            table_names = ["defense"]
            row_names = ["def_int"]
            field_names = ["IntTitle"]
        
        for table_name in table_names:
            per_game_table = player_page.find("table", id=table_name)
            if not awards_div:
                if not comments:
                    comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_div = temp_soup.find("table", id=table_name)
                    if temp_div:
                        per_game_table = temp_div
                        break
            
            if per_game_table:
                standard_table_rows = per_game_table.find("tbody").find_all("tr")
                for row in standard_table_rows:
                    row_id = row.get("id")
                    match = False
                    if row_id:
                        match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                    elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                        match = True
                    if match:
                        year_row = row.find("th")
                        year_str = year_row.find(text=True)
                        if year_str:
                            year = re.sub("[^0-9]", "", str(year_str).split("-")[0])
                            if year:
                                year = int(year)
                            else:
                                season_year_str = year_row.get("csk", None)
                                if season_year_str:
                                    year = int(season_year_str.split(".")[0])
                                else:
                                    year = int(year_row.find("a").get("href").split("/")[2])
                        else:
                            season_year_str = year_row.get("csk", None)
                            if season_year_str:
                                year = int(season_year_str.split(".")[0])
                            else:
                                year = int(year_row.find("a").get("href").split("/")[2])

                        if int(year) not in years_to_skip:
                            if year < current_season or show_title_current_season:
                                for index, row_name in enumerate(row_names):
                                    match_row = row.find("td", {"data-stat" : row_name})
                                    if match_row and match_row.find("strong"):
                                        for row_data in all_rows:
                                            if row_data["Shared"]["Year"] == year:
                                                if not field_names[index] in row_data[the_over_header]:
                                                    row_data[the_over_header][field_names[index]] = 0
                                                row_data[the_over_header][field_names[index]] += 1
                                                break
    
    valid_years = set()
    for row in all_rows:
        if row["Shared"]["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Shared"]["Year"]] == row["Shared"]["RawTm"]:
            year = str(row["Shared"]["Year"])
            team = row["Shared"]["RawTm"]
            if year not in valid_years and year in champs and team in champs[year]:
                valid_years.add(year)
                if not "Champ" in row[the_over_header]:
                    row[the_over_header]["Champ"] = 0
                row[the_over_header]["Champ"] += 1

    award_results_map = {
        "leaderboard_apmvp_shares" : "MVPShares",
        "leaderboard_apopoy_shares" : "OPOYShares",
        "leaderboard_apdpoy_shares" : "DPOYShares"
    }
    for table_name in  award_results_map:
        award_name = award_results_map[table_name]

        shares_div = player_page.find("div", id=table_name)
        if not shares_div:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_div = temp_soup.find("div", id=table_name)
                if temp_div:
                    shares_div = temp_div
                    break
                    
        if shares_div:
            shares_table_rows = shares_div.find("table").find_all("td")
            if is_full_career:
                shares_table_row = shares_table_rows[len(shares_table_rows) - 1]
                share_text = str(shares_table_row.text).strip()
                share = float(re.match(r"^Career .* ([\d.]+) \((?:\d+)\)$", share_text).group(1))
                if all_rows:
                    row = all_rows[len(all_rows) - 1]
                    if not award_name in row[the_over_header]:
                        row[the_over_header][award_name] = 0.0
                    row[the_over_header][award_name] += share
            else:
                valid_years = set()
                for shares_table_row in shares_table_rows:
                    share_text = str(shares_table_row.text).strip()
                    share_regex = re.match(r"^(\d{4}) .* ([\d.]+) \((?:\d+)\)$", share_text)
                    if share_regex:
                        year = int(share_regex.group(1))
                        if int(year) not in years_to_skip:
                            if year not in valid_years:
                                valid_years.add(year)

                                share = float(share_regex.group(2))
                                for row in all_rows:
                                    if row["Shared"]["Year"] == year:
                                        if not award_name in row[the_over_header]:
                                            row[the_over_header][award_name] = 0.0
                                        row[the_over_header][award_name] += share
                                        break
    
    if player_data["id"] in manual_awards_map:
        if the_over_header in manual_awards_map[player_data["id"]]:
            for row in all_rows:
                if row["Shared"]["Year"] not in years_to_skip:
                    if row["Shared"]["Year"] in manual_awards_map[player_data["id"]][the_over_header]:
                        for award_stat in manual_awards_map[player_data["id"]][the_over_header][row["Shared"]["Year"]]:
                            has_row_match = False
                            for sub_row in all_rows:
                                if sub_row["Shared"]["Year"] == row["Shared"]["Year"] and the_over_header in sub_row and award_stat in sub_row[the_over_header] and sub_row[the_over_header][award_stat] != 0:
                                    has_row_match = True

                            if not has_row_match:
                                if the_over_header not in row:
                                    row[the_over_header] = {}
                                if not award_stat in row[the_over_header]:
                                    row[the_over_header][award_stat] = 0.0
                                row[the_over_header][award_stat] += manual_awards_map[player_data["id"]][player_type["da_type"]][row["Shared"]["Year"]][award_stat]

def handle_leading_seasons(player_page, player_data, player_type, time_frame, years_to_skip, all_rows, seasons_leading_start, seasons_leading_end):   
    the_over_header = None
    for pot_header in headers[player_type["da_type"]]:
        if pot_header.startswith("Awards/Honors/"):
            the_over_header = pot_header
            break

    if player_type["da_type"]:
        for over_header in div_id_to_stat:
            if over_header in headers[player_type["da_type"]] or over_header == "Shared":
                for header in div_id_to_stat[over_header].values():
                    for row in all_rows:
                        if over_header in row:
                            row[over_header][header] = 0.0

    comments = None
    count_div = player_page.find("div", id="div_leaderboard")
    if not count_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="div_leaderboard")
            if temp_div:
                count_div = temp_div
                break

    if not count_div:
        return
    
    for over_header in div_id_to_stat:
        if over_header in headers[player_type["da_type"]] or over_header == "Shared":
            for div_id in div_id_to_stat[over_header]:
                sub_count_div = count_div.find("div", id=div_id) 
                if sub_count_div:
                    stat = div_id_to_stat[over_header][div_id]
                    count_table_rows = sub_count_div.find("table").find_all("tr")
                    parsed_years = set()
                    for count_table_row in count_table_rows:
                        count_table_link = count_table_row.find("a")
                        match = re.search(r".* \((\d+)(?:\/\d+)?\)", str(count_table_row.text))
                        year_str = str(count_table_link.find(text=True)).split("-")[0].split()[0]
                        if year_str.isdigit() and match:
                            year = int(year_str)
                            if year < current_season or True:
                                if not year in parsed_years:
                                    lead_num = ordinal_to_number(match.group(1))
                                    if int(year) not in years_to_skip:
                                        for row in all_rows:
                                            if row["Shared"]["Year"] == year:
                                                if lead_num >= seasons_leading_start and lead_num <= seasons_leading_end:
                                                    if not over_header in row:
                                                        row[over_header] = {}
                                                    row[over_header][stat] = 1
                                                parsed_years.add(year)
                                                break

def calculate_rank(the_awards):
    values = {}
    rank = 1
    for player_obj in sorted(the_awards.items(), key=lambda item: item[1], reverse=True):
        if player_obj[1] not in values:
            values[player_obj[1]] = rank
            rank += 1

    ranks = {}
    for player in the_awards:
        ranks[player] = values[the_awards[player]]
        
    return ranks

def perform_post_qualifier(player_data, player_type, ind_player_type, row, qualifiers, all_rows):
    if "Stat" in qualifiers:
        stats = {}
        find_stat_match(qualifiers["Stat"], player_type, stats)
        row_lower = fill_row(row, player_data, player_type, stats=stats)

        for qual_object in qualifiers["Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                over_stat = sub_qual_object["over_stat"]
                stat = sub_qual_object["stat"]

                if not over_stat:
                    for sub_over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break
                
                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                        if stat in over_row_lower:
                            has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                        elif over_stat == "rushing" and "passing" in row_lower:
                            over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]

                if has_match:
                    break
        
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Formula" in qualifiers:
        stats = set()
        for qual_object in qualifiers["Formula"]:
            formula = qual_object["values"][0]
            formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula))
            for header in list(headers[player_type["da_type"]].keys()) + ["Shared"]:
                header_match = r"(?:" + header.lower() + r")"
                if header == "Era Adjusted Passing":
                    header_match = r"(?:era adjusted passing|total)"
                elif header == "Scrimmage/All Purpose":
                    header_match = r"(?:scrimmage/all purpose|scrimmage)"
                for stat in get_constant_data.stat_groups[over_header]:
                    has_match = False
                    for formula_match in formula_matches:
                        if formula_match.group() == header.lower():
                            has_match = True
                            break
                    if has_match:
                        if header not in stats:
                            stats[header] = set()
                        stats[header].add(header)
            
        row_normal = fill_row(row, player_data, player_type, lower=False, stats=stats)
        for qual_object in qualifiers["Formula"]:
            formula = qual_object["values"][0]
            try:
                has_match = bool(get_constant_data.calculate_formula("custom_formula", formula, row_normal, None, headers, player_data, player_type, all_rows, safe_eval=True))
            except Exception:
                return False

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Stat" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        stats = {}
        find_stat_match(qualifiers["Previous Stat"], player_type, stats)
        prev_row = row["Shared"]["Previous Row"]
        row_lower = fill_row(prev_row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Previous Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                over_stat = sub_qual_object["over_stat"]
                stat = sub_qual_object["stat"]

                if not over_stat:
                    for sub_over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break
                
                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                        if stat in over_row_lower:
                            has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                        elif over_stat == "rushing" and "passing" in row_lower:
                            over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Stat" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        stats = {}
        find_stat_match(qualifiers["Upcoming Stat"], player_type, stats)
        upc_row = row["Shared"]["Upcoming Row"]
        row_lower = fill_row(upc_row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Upcoming Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                over_stat = sub_qual_object["over_stat"]
                stat = sub_qual_object["stat"]

                if not over_stat:
                    for sub_over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                        if stat in over_row_lower:
                            has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                        elif over_stat == "rushing" and "passing" in row_lower:
                            over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]

                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    return True

def perform_qualifier(player_data, player_type, ind_player_type, row, time_frame, all_rows):
    qualifiers = time_frame["qualifiers"]

    if "fake_playoff_row" in row["Shared"] and row["Shared"]["fake_playoff_row"]:
        return True
        
    if "Rookie" in qualifiers:
        for qual_object in qualifiers["Rookie"]:
            if qual_object["negate"]:
                if row["Shared"]["Year"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Year"] in qual_object["values"]:
                    return False

    if "Facing Former Team" in qualifiers:
        for qual_object in qualifiers["Facing Former Team"]:
            has_match =  row["Shared"]["Opponent"].upper() in player_data["valid_teams_order"]["team"]
            if has_match:
                if isinstance(player_data["valid_teams_order"]["team"][row["Shared"]["Opponent"].upper()], int):
                    has_match = row["Shared"]["Year"] > player_data["valid_teams_order"]["team"][row["Shared"]["Opponent"].upper()]
                else:
                    has_match = row["Shared"]["Date"] > player_data["valid_teams_order"]["team"][row["Shared"]["Opponent"].upper()]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Former Franchise" in qualifiers:
        for qual_object in qualifiers["Facing Former Franchise"]:
            team_franchise = row["Shared"]["RawOpponent"]

            has_match =  team_franchise in player_data["valid_teams_order"]["franchise"]
            if has_match:
                if isinstance(player_data["valid_teams_order"]["franchise"][team_franchise], int):
                    has_match = row["Shared"]["Year"] > player_data["valid_teams_order"]["franchise"][team_franchise]
                else:
                    has_match = row["Shared"]["Date"] > player_data["valid_teams_order"]["franchise"][team_franchise]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "With New Team" in qualifiers:
        for qual_object in qualifiers["With New Team"]:
            has_match = row["Shared"]["Tm"] != list(player_data["valid_team_ranges"]["team"].keys())[0]
            if has_match:
                first_year = list(player_data["valid_team_ranges"]["team"][row["Shared"]["Tm"]].keys())[0]
                has_match = row["Shared"]["Year"] == first_year
                if has_match:
                    first_range = player_data["valid_team_ranges"]["team"][row["Shared"]["Tm"]][first_year][0]
                    has_match = row["Shared"]["Date"] >= first_range["start"] and row["Shared"]["Date"] <= first_range["end"]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "With New Franchise" in qualifiers:
        team_franchise = row["Shared"]["RawOpponent"]

        for qual_object in qualifiers["With New Franchise"]:
            has_match = team_franchise != list(player_data["valid_team_ranges"]["franchise"].keys())[0]
            if has_match:
                first_year = list(player_data["valid_team_ranges"]["franchise"][team_franchise].keys())[0]
                has_match = row["Shared"]["Year"] == first_year
                if has_match:
                    first_range = player_data["valid_team_ranges"]["franchise"][team_franchise][first_year][0]
                    has_match = row["Shared"]["Date"] >= first_range["start"] and row["Shared"]["Date"] <= first_range["end"]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Season Age" in qualifiers:
        for qual_object in qualifiers["Season Age"]:
            player_age_date = player_season_age_date.replace(year=row["Shared"]["Year"])
            player_delt = dateutil.relativedelta.relativedelta(player_age_date, player_data["Birthday"])
            player_delt_start = qual_object["time_unit_start"].year if qual_object["time_unit_start"] == datetime.date.min else qual_object["time_unit_start"].years
            player_delt_end = qual_object["time_unit_end"].year if qual_object["time_unit_end"] == datetime.date.max else qual_object["time_unit_end"].years
            if qual_object["negate"]:
                if player_delt.years >= player_delt_start and player_delt.years <= player_delt_end:
                    return False
            else:
                if not (player_delt.years >= player_delt_start and player_delt.years <= player_delt_end):
                    return False

    if "Age" in qualifiers:
        for qual_object in qualifiers["Age"]:
            player_delt_start = datetime.date.min if qual_object["time_unit_start"] == datetime.date.min else player_data["Birthday"] + qual_object["time_unit_start"]
            player_delt_end = datetime.date.max if qual_object["time_unit_end"] == datetime.date.max else player_data["Birthday"] + qual_object["time_unit_end"]
            if qual_object["negate"]:
                if row["Shared"]["Date"] >= player_delt_start and row["Shared"]["Date"] <= player_delt_end:
                    return False
            else:
                if not (row["Shared"]["Date"] >= player_delt_start and row["Shared"]["Date"] <= player_delt_end):
                    return False

    if "Location" in qualifiers:
        for qual_object in qualifiers["Location"]:
            if row["Shared"]["Location"] == "Home":
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            elif row["Shared"]["Location"] == "Away":
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False
            else:
                if qual_object["negate"]:
                    if "neutral" in qual_object["values"]:
                        return False
                else:
                    if not "neutral" in qual_object["values"]:
                        return False
    
    if "Temperate Season" in qualifiers:
        for qual_object in qualifiers["Temperate Season"]:
            winter_start = ephem.date(ephem.previous_winter_solstice(str(row["Year"]))).datetime().date()
            spring_start = ephem.date(ephem.next_spring_equinox(str(row["Year"]))).datetime().date()
            summer_start = ephem.date(ephem.next_summer_solstice(str(row["Year"]))).datetime().date()
            fall_start = ephem.date(ephem.next_fall_equinox(str(row["Year"]))).datetime().date()
            winter_2_start = ephem.date(ephem.next_winter_solstice(str(row["Year"]))).datetime().date()

            season = None
            if row["Shared"]["Date"] >= winter_start and row["Shared"]["Date"] < spring_start:
                season = "Winter"
            elif row["Shared"]["Date"] >= spring_start and row["Shared"]["Date"] < summer_start:
                season = "Spring"
            elif row["Shared"]["Date"] >= summer_start and row["Shared"]["Date"] < fall_start:
                season = "Summer"
            elif row["Shared"]["Date"] >= fall_start and row["Shared"]["Date"] < winter_2_start:
                season = "Fall"
            else:
                season = "Winter"

            if qual_object["negate"]:
                if season in qual_object["values"]:
                    return False
            else:
                if not season in qual_object["values"]:
                    return False

    if "Previous Location" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Location"]:
            if row["Shared"]["Previous Row"]["Shared"]["Location"] == "Home":
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            elif row["Shared"]["Previous Row"]["Shared"]["Location"] == "Away":
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False
            else:
                if qual_object["negate"]:
                    if "neutral" in qual_object["values"]:
                        return False
                else:
                    if not "neutral" in qual_object["values"]:
                        return False

    if "Upcoming Location" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Location"]:
            if row["Shared"]["Upcoming Row"]["Shared"]["Location"] == "Home":
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            elif row["Shared"]["Upcoming Row"]["Shared"]["Location"] == "Away":
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False
            else:
                if qual_object["negate"]:
                    if "neutral" in qual_object["values"]:
                        return False
                else:
                    if not "neutral" in qual_object["values"]:
                        return False

    if "Team" in qualifiers:
        for qual_object in qualifiers["Team"]:
            if qual_object["negate"]:
                if row["Shared"]["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Tm"].lower() in qual_object["values"]:
                    return False

    if "Opponent" in qualifiers:
        for qual_object in qualifiers["Opponent"]:
            if qual_object["negate"]:
                if row["Shared"]["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Opponent"] in qual_object["values"]:
                    return False
    
    if "Team Franchise" in qualifiers:
        team_franchise = row["Shared"]["RawTm"]
        for qual_object in qualifiers["Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Opponent Franchise" in qualifiers:
        team_franchise = row["Shared"]["RawOpponent"]
        for qual_object in qualifiers["Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False

    if "Previous Team" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Team"]:
            if qual_object["negate"]:
                if row["Shared"]["Previous Row"]["Shared"]["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Previous Row"]["Shared"]["Tm"].lower() in qual_object["values"]:
                    return False

    if "Previous Opponent" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Opponent"]:
            if qual_object["negate"]:
                if row["Shared"]["Previous Row"]["Shared"]["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Previous Row"]["Shared"]["Opponent"] in qual_object["values"]:
                    return False
    
    if "Upcoming Team" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Team"]:
            if qual_object["negate"]:
                if row["Shared"]["Upcoming Row"]["Shared"]["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Upcoming Row"]["Shared"]["Tm"].lower() in qual_object["values"]:
                    return False

    if "Upcoming Opponent" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Opponent"]:
            if qual_object["negate"]:
                if row["Shared"]["Upcoming Row"]["Shared"]["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Upcoming Row"]["Shared"]["Opponent"] in qual_object["values"]:
                    return False
    
    if "Previous Team Franchise" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False

        team_franchise = row["Shared"]["Previous Row"]["Shared"]["RawTm"]
        for qual_object in qualifiers["Previous Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Previous Opponent Franchise" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False

        team_franchise = row["Shared"]["Previous Row"]["Shared"]["RawOpponent"]
        for qual_object in qualifiers["Previous Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Upcoming Team Franchise" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False

        team_franchise = row["Shared"]["Upcoming Row"]["Shared"]["RawTm"]
        for qual_object in qualifiers["Upcoming Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Upcoming Opponent Franchise" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False

        team_franchise = row["Shared"]["Upcoming Row"]["Shared"]["RawOpponent"]
        for qual_object in qualifiers["Upcoming Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Previous Same Opponent" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Same Opponent"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Opponent"] == row["Opponent"]:
                    return False
            else:
                if not row["Previous Row"]["Opponent"] == row["Opponent"]:
                    return False
    
    if "Upcoming Same Opponent" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Same Opponent"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Opponent"] == row["Opponent"]:
                    return False
            else:
                if not row["Upcoming Row"]["Opponent"] == row["Opponent"]:
                    return False
    
    if "Sub Query" in qualifiers:
        for qual_object in qualifiers["Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["GameLink"] in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Or Sub Query" in qualifiers:
        has_any_match = False
        for qual_object in qualifiers["Or Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["GameLink"] in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if not has_match:
                    has_any_match = True
            else:
                if has_match:
                    has_any_match = True
        if not has_any_match:
            return False

    if "Day Of Sub Query" in qualifiers:
        for qual_object in qualifiers["Day Of Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Shared"]["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day After Sub Query" in qualifiers:
        for qual_object in qualifiers["Day After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Shared"]["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day Before Sub Query" in qualifiers:
        for qual_object in qualifiers["Day Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Shared"]["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Game After Sub Query" in qualifiers:
        if row["Shared"]["Year"] not in player_data["all_games"]:
            return False
        all_games = player_data["all_games"][row["Shared"]["Year"]]

        game_index = [sub_row["Shared"]["GameLink"] for sub_row in player_data["all_games"][row["Shared"]["Year"]]].index(row["Shared"]["GameLink"])
        if game_index == 0:
            return False
        previous_game = all_games[game_index - 1]["Shared"]["GameLink"]

        for qual_object in qualifiers["Game After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if previous_game in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Game Before Sub Query" in qualifiers:
        if row["Shared"]["Year"] not in player_data["all_games"]:
            return False
        all_games = player_data["all_games"][row["Shared"]["Year"]]

        game_index = [sub_row["Shared"]["GameLink"] for sub_row in player_data["all_games"][row["Shared"]["Year"]]].index(row["Shared"]["GameLink"])
        if game_index == len(all_games) - 1:
            return False
        next_game = all_games[game_index + 1]["Shared"]["GameLink"]

        for qual_object in qualifiers["Game Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if next_game in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Season Sub Query" in qualifiers:
        for qual_object in qualifiers["Season Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Year"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Or Season Sub Query" in qualifiers:
        has_row_match = False
        for qual_object in qualifiers["Or Season Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Year"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if not has_match:
                    has_row_match = True
            else:
                if has_match:
                    has_row_match = True
        if not has_row_match:
            return False


    if "Season After Sub Query" in qualifiers:
        valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]

        if row["Shared"]["Year"] not in valid_years:
            return False

        year_index = valid_years.index(row["Shared"]["Year"])
        if year_index == 0:
            return False
        previous_year = valid_years[year_index - 1]

        for qual_object in qualifiers["Season After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if previous_year in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Season Before Sub Query" in qualifiers:
        valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]

        if row["Shared"]["Year"] not in valid_years:
            return False

        year_index = valid_years.index(row["Shared"]["Year"])
        if year_index == len(valid_years) - 1:
            return False
        next_year = valid_years[year_index + 1]

        for qual_object in qualifiers["Season Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if next_year in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Playing With" in qualifiers:
        for qual_object in qualifiers["Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Playing Against" in qualifiers:
        for qual_object in qualifiers["Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Playing With" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Previous Row"]["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Playing With" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Upcoming Row"]["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Playing Against" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Previous Row"]["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Playing Against" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Upcoming Row"]["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Opponents" in qualifiers:
        for qual_object in qualifiers["Playing Same Opponents"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Opponent"] in player["games"] and row["Shared"]["Year"] in player["games"][row["Shared"]["Opponent"]]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Game" in qualifiers:
        for qual_object in qualifiers["Playing Same Game"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Shared"]["Tm"].lower() in player["games"] and row["Shared"]["Date"] in player["games"][row["Shared"]["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Date" in qualifiers:
        for qual_object in qualifiers["Playing Same Date"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Shared"]["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Start" in qualifiers:
        for qual_object in qualifiers["Start"]:
            if row["Shared"]["Start"]:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False

    if "Birthday" in qualifiers:
        for qual_object in qualifiers["Birthday"]:
            is_birthday = row["Shared"]["Date"].month == player_data["Birthday"].month and row["Shared"]["Date"].day == player_data["Birthday"].day
            if is_birthday:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False

    if "Month" in qualifiers:
        for qual_object in qualifiers["Month"]:
            if qual_object["negate"]:
                if row["Shared"]["Date"].month in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Date"].month in qual_object["values"]:
                    return False

    if "Day" in qualifiers:
        for qual_object in qualifiers["Day"]:
            if qual_object["negate"]:
                if row["Shared"]["Date"].weekday() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Date"].weekday() in qual_object["values"]:
                    return False

    if "Date" in qualifiers:
        for qual_object in qualifiers["Date"]:
            if qual_object["negate"]:
                if row["Shared"]["Date"].day in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Date"].day in qual_object["values"]:
                    return False
    
    if "Dates" in qualifiers:
        for qual_object in qualifiers["Dates"]:
            has_one_match = False
            for date_obj in qual_object["values"]:
                if qual_object["negate"]:
                    if not (row["Shared"]["Date"] >= date_obj["start_val"] and row["Shared"]["Date"] <= date_obj["end_val"]):
                        has_one_match = True
                else:
                    if row["Shared"]["Date"] >= date_obj["start_val"] and row["Shared"]["Date"] <= date_obj["end_val"]:
                        has_one_match = True
            if not has_one_match:
                return False

    if "Season Game" in qualifiers:
        for qual_object in qualifiers["Season Game"]:
            if qual_object["negate"]:
                if row["Shared"]["Gm"] >= qual_object["values"]["start_val"] and row["Shared"]["Gm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Gm"] >= qual_object["values"]["start_val"] and row["Shared"]["Gm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Career Game" in qualifiers:
        for qual_object in qualifiers["Career Game"]:
            if qual_object["negate"]:
                if row["Shared"]["CrGm"] >= qual_object["values"]["start_val"] and row["Shared"]["CrGm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CrGm"] >= qual_object["values"]["start_val"] and row["Shared"]["CrGm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Career Game Reversed" in qualifiers:
        for qual_object in qualifiers["Career Game Reversed"]:
            if qual_object["negate"]:
                if row["Shared"]["CrGmRev"] >= qual_object["values"]["start_val"] and row["Shared"]["CrGmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["CrGmRev"] >= qual_object["values"]["start_val"] and row["Shared"]["CrGmRev"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Season Game Reversed" in qualifiers:
        for qual_object in qualifiers["Season Game Reversed"]:
            if qual_object["negate"]:
                if row["Shared"]["GmRev"] >= qual_object["values"]["start_val"] and row["Shared"]["GmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["GmRev"] >= qual_object["values"]["start_val"] and row["Shared"]["GmRev"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Score" in qualifiers:
        if "Team Score" not in row["Shared"] or row["Shared"]["Team Score"] == None:
            return False

        for qual_object in qualifiers["Team Score"]:
            if qual_object["negate"]:
                if row["Shared"]["Team Score"] >= qual_object["values"]["start_val"] and row["Shared"]["Team Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Team Score"] >= qual_object["values"]["start_val"] and row["Shared"]["Team Score"] <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Score" in qualifiers:
        if "Opponent Score" not in row["Shared"] or row["Shared"]["Opponent Score"] == None:
            return False

        for qual_object in qualifiers["Opponent Score"]:
            if qual_object["negate"]:
                if row["Shared"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Shared"]["Opponent Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Shared"]["Opponent Score"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Score Margin" in qualifiers:
        if "Team Score" not in row["Shared"] or row["Shared"]["Team Score"] == None or "Opponent Score" not in row["Shared"] or row["Shared"]["Opponent Score"] == None:
            return False

        score_margin = row["Shared"]["Team Score"] - row["Shared"]["Opponent Score"]

        for qual_object in qualifiers["Score Margin"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Score Difference" in qualifiers:
        if "Team Score" not in row["Shared"] or row["Shared"]["Team Score"] == None or "Opponent Score" not in row["Shared"] or row["Shared"]["Opponent Score"] == None:
            return False

        score_margin = abs(row["Shared"]["Team Score"] - row["Shared"]["Opponent Score"])

        for qual_object in qualifiers["Score Difference"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Previous Team Score" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        if "Team Score" not in row["Previous Row"]["Shared"] or row["Previous Row"]["Shared"]["Team Score"] == None:
            return False

        for qual_object in qualifiers["Previous Team Score"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Shared"]["Team Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Shared"]["Team Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Previous Row"]["Shared"]["Team Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Shared"]["Team Score"] <= qual_object["values"]["end_val"]):
                    return False

    if "Previous Opponent Score" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        if "Opponent Score" not in row["Previous Row"]["Shared"] or row["Previous Row"]["Shared"]["Opponent Score"] == None:
            return False

        for qual_object in qualifiers["Previous Opponent Score"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Shared"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Shared"]["Opponent Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Previous Row"]["Shared"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Shared"]["Opponent Score"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Previous Score Margin" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        if "Team Score" not in row["Previous Row"]["Shared"] or row["Previous Row"]["Shared"]["Team Score"] == None or "Opponent Score" not in row["Previous Row"]["Shared"] or row["Previous Row"]["Shared"]["Opponent Score"] == None:
            return False

        score_margin = row["Previous Row"]["Shared"]["Team Score"] - row["Previous Row"]["Shared"]["Opponent Score"]

        for qual_object in qualifiers["Previous Score Margin"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Previous Score Difference" in qualifiers:
        if not row["Shared"]["Previous Row"]:
            return False
        if "Team Score" not in row["Previous Row"]["Shared"] or row["Previous Row"]["Shared"]["Team Score"] == None or "Opponent Score" not in row["Previous Row"]["Shared"] or row["Previous Row"]["Shared"]["Opponent Score"] == None:
            return False

        score_margin = abs(row["Previous Row"]["Shared"]["Team Score"] - row["Previous Row"]["Shared"]["Opponent Score"])

        for qual_object in qualifiers["Previous Score Difference"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Team Score" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        if "Team Score" not in row["Upcoming Row"]["Shared"] or row["Upcoming Row"]["Shared"]["Team Score"] == None:
            return False

        for qual_object in qualifiers["Upcoming Team Score"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Shared"]["Team Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Shared"]["Team Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Upcoming Row"]["Shared"]["Team Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Shared"]["Team Score"] <= qual_object["values"]["end_val"]):
                    return False

    if "Upcoming Opponent Score" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        if "Opponent Score" not in row["Upcoming Row"]["Shared"] or row["Upcoming Row"]["Shared"]["Opponent Score"] == None:
            return False

        for qual_object in qualifiers["Upcoming Opponent Score"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Shared"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Shared"]["Opponent Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Upcoming Row"]["Shared"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Shared"]["Opponent Score"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Score Margin" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        if "Team Score" not in row["Upcoming Row"]["Shared"] or row["Upcoming Row"]["Shared"]["Team Score"] == None or "Opponent Score" not in row["Upcoming Row"]["Shared"] or row["Upcoming Row"]["Shared"]["Opponent Score"] == None:
            return False

        score_margin = row["Upcoming Row"]["Shared"]["Team Score"] - row["Upcoming Row"]["Shared"]["Opponent Score"]

        for qual_object in qualifiers["Upcoming Score Margin"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Score Difference" in qualifiers:
        if not row["Shared"]["Upcoming Row"]:
            return False
        if "Team Score" not in row["Upcoming Row"]["Shared"] or row["Upcoming Row"]["Shared"]["Team Score"] == None or "Opponent Score" not in row["Upcoming Row"]["Shared"] or row["Upcoming Row"]["Shared"]["Opponent Score"] == None:
            return False

        score_margin = abs(row["Upcoming Row"]["Shared"]["Team Score"] - row["Upcoming Row"]["Shared"]["Opponent Score"])

        for qual_object in qualifiers["Upcoming Score Difference"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False

    if "Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Shared"]["Year"]], key=lambda seas_row: seas_row["Shared"]["Date"], reverse=True):
            if sub_data["Shared"]["Date"] < row["Shared"]["Date"]:
                days_rest = (row["Shared"]["Date"] - sub_data["Shared"]["Date"]).days - 1
                break

        for qual_object in qualifiers["Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Shared"]["Year"]], key=lambda seas_row: seas_row["Shared"]["Date"], reverse=True):
            if sub_data["Shared"]["Date"] < row["Shared"]["Date"] and sub_data["Shared"]["Start"]:
                days_rest = (row["Shared"]["Date"] - sub_data["Shared"]["Date"]).days - 1
                break

        for qual_object in qualifiers["Starts Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Starts Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Shared"]["Year"]], key=lambda seas_row: seas_row["Shared"]["Date"], reverse=False):
            if sub_data["Shared"]["Date"] > row["Shared"]["Date"] and sub_data["Shared"]["Start"]:
                days_rest = (row["Date"] - sub_data["Shared"]["Date"]).days - 1
                break

        for qual_object in qualifiers["Upcoming Starts Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False

    if "Upcoming Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Shared"]["Year"]], key=lambda seas_row: seas_row["Shared"]["Date"], reverse=False):
            if sub_dat["Shared"]["Date"] > row["Shared"]["Date"]:
                days_rest = (row["Shared"]["Date"] - sub_data["Shared"]["Date"]).days - 1
                break

        for qual_object in qualifiers["Upcoming Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False

    if "Days In A Row" in qualifiers:
        days_in_a_row = 1
        date_to_check = row["Shared"]["Date"] - datetime.timedelta(days=1)
        for sub_data in sorted(player_data["all_games"][row["Shared"]["Year"]], key=lambda seas_row: seas_row["Shared"]["Date"], reverse=True):
            if sub_data["Shared"]["Date"] == date_to_check:
                days_in_a_row += 1
                date_to_check -= datetime.timedelta(days=1)

        for qual_object in qualifiers["Days In A Row"]:
            if qual_object["negate"]:
                if days_in_a_row >= qual_object["values"]["start_val"] and days_in_a_row <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_in_a_row >= qual_object["values"]["start_val"] and days_in_a_row <= qual_object["values"]["end_val"]):
                    return False

    if "Result" in qualifiers:
        for qual_object in qualifiers["Result"]:
            if qual_object["negate"]:
                if row["Shared"]["Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Result"] in qual_object["values"]:
                    return False

    if "Previous Result" in qualifiers:
        if not row["Shared"]["Previous Row"] or row["Shared"]["Previous Row"]["Shared"]["Year"] != row["Shared"]["Year"]:
            return False
        for qual_object in qualifiers["Previous Result"]:
            if qual_object["negate"]:
                if row["Shared"]["Previous Row"]["Shared"]["Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Previous Row"]["Shared"]["Result"] in qual_object["values"]:
                    return False

    if "Year" in qualifiers:
        for qual_object in qualifiers["Year"]:
            if qual_object["negate"]:
                if row["Shared"]["Year"] >= qual_object["values"]["start_val"] and row["Shared"]["Year"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Year"] >= qual_object["values"]["start_val"] and row["Shared"]["Year"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Even Year" in qualifiers:
        is_even = row["Shared"]["Year"] % 2 == 0
        for qual_object in qualifiers["Even Year"]:
            if qual_object["negate"]:
                if is_even:
                    return False
            else:
                if not is_even:
                    return False
    
    if "Odd Year" in qualifiers:
        is_odd = row["Shared"]["Year"] % 2 == 1
        for qual_object in qualifiers["Odd Year"]:
            if qual_object["negate"]:
                if is_odd:
                    return False
            else:
                if not is_odd:
                    return False

    if "Calendar Year" in qualifiers:
        for qual_object in qualifiers["Calendar Year"]:
            if qual_object["negate"]:
                if row["Shared"]["Date"].year >= qual_object["values"]["start_val"] and row["Shared"]["Date"].year <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Date"].year >= qual_object["values"]["start_val"] and row["Shared"]["Date"].year <= qual_object["values"]["end_val"]):
                    return False

    if "Even Calendar Year" in qualifiers:
        is_even = row["Shared"]["Date"].year % 2 == 0
        for qual_object in qualifiers["Even Calendar Year"]:
            if qual_object["negate"]:
                if is_even:
                    return False
            else:
                if not is_even:
                    return False

    if "Odd Calendar Year" in qualifiers:
        is_odd = row["Shared"]["Date"].year % 2 == 1
        for qual_object in qualifiers["Odd Calendar Year"]:
            if qual_object["negate"]:
                if is_odd:
                    return False
            else:
                if not is_odd:
                    return False

    if "Upcoming Result" in qualifiers:
        if not row["Shared"]["Upcoming Row"] or row["Shared"]["Upcoming Row"]["Shared"]["Year"] != row["Shared"]["Year"]:
            return False
        for qual_object in qualifiers["Upcoming Result"]:
            if qual_object["negate"]:
                if row["Shared"]["Upcoming Row"]["Shared"]["Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Upcoming Row"]["Shared"]["Result"] in qual_object["values"]:
                    return False
    
    if "Holiday" in qualifiers:
        game_date = row["Shared"]["Date"]
        for qual_object in qualifiers["Holiday"]:
            has_match = False
            for holiday in qual_object["values"]:
                country = "usa"
                eve = False
                observed = False
                church = "western"
                if "canadian" in holiday:
                    country = "canada"
                    holiday = re.sub(r"\s+", " ", holiday.replace("canadian", "")).strip()
                elif "canada" in holiday:
                    country = "canada"
                    holiday = re.sub(r"\s+", " ", holiday.replace("canada", "")).strip()
                elif "eve" in holiday:
                    eve = True
                    holiday = re.sub(r"\s+", " ", holiday.replace("eve", "")).strip()
                elif "observed" in holiday:
                    observed = True
                    holiday = re.sub(r"\s+", " ", holiday.replace("observed", "")).strip()
                elif "orthodox" in holiday:
                    church = "orthodox"
                    holiday = re.sub(r"\s+", " ", holiday.replace("orthodox", "")).strip()
                elif "eastern" in holiday:
                    church = "eastern"
                    holiday = re.sub(r"\s+", " ", holiday.replace("eastern", "")).strip()
                holiday = re.sub(r"\W+", "", re.sub(r"[\s-]+", "_", holiday))

                has_custom_match = False
                for holiday_func in all_custom_holidays:
                    if holiday_func[0] == holiday:
                        has_custom_match = True
                        if holiday_func[1](game_date, church, country, observed, eve):
                            has_match = True
                        break

                if not has_custom_match:
                    for holiday_func in all_holidays:
                        if holiday_func[0] == holiday:
                            arguments = inspect.signature(holiday_func[1]).parameters
                            if "church" in arguments:
                                holiday_date = holiday_func[1](game_date.year, church=church)
                            elif "country" in arguments:
                                holiday_date = holiday_func[1](game_date.year, country=country)
                            elif "observed" in arguments:
                                holiday_date = holiday_func[1](game_date.year, observed=observed)
                            elif "eve" in arguments:
                                holiday_date = holiday_func[1](game_date.year, eve=eve)
                            else:
                                holiday_date = holiday_func[1](game_date.year)

                            if holiday_date:
                                holiday_date = datetime.datetime(holiday_date[0], holiday_date[1], holiday_date[2]).date()
                                if eve:
                                    holiday_date -= datetime.timedelta(days=1)
                                if game_date == holiday_date:
                                    has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Super Bowl" in qualifiers:
        sb_key = str(row["Shared"]["Date"])
        for qual_object in qualifiers["Super Bowl"]:
            if qual_object["negate"]:
                if sb_key in super_bowls:
                    sb_value = super_bowls[sb_key]
                    if sb_value >= qual_object["values"]["start_val"] and sb_value <= qual_object["values"]["end_val"]:
                        return False
            else:
                if sb_key not in super_bowls:
                    return False

                sb_value = super_bowls[sb_key]
                if not (sb_value >= qual_object["values"]["start_val"] and sb_value <= qual_object["values"]["end_val"]):
                    return False
    
    if "Number" in qualifiers:
        if not player_data["player_all_numbers"]:
            return False
        for qual_object in qualifiers["Number"]:
            has_number_match = False

            for num_obj in player_data["player_all_numbers"]:
                if row["Shared"]["Tm"] in num_obj["teams"]:
                    if row["Shared"]["Year"] >= num_obj["start_year"] and row["Shared"]["Year"] <= num_obj["end_year"]:
                        if num_obj["number"] >= qual_object["values"]["start_val"] and num_obj["number"] <= qual_object["values"]["end_val"]:
                            has_number_match = True
                            break

            if qual_object["negate"]:
                if has_number_match:
                    return False
            else:
                if not has_number_match:
                    return False
    
    if "Moon Phase" in qualifiers:
        moon_phases = human_moon(row["Shared"]["Date"])

        for qual_object in qualifiers["Moon Phase"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in moon_phases:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team City" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Team City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact City" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Team Exact City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team State" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Team State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact State" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Team Exact State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Country" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Team Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact Country" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Team Exact Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Team Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Team Exact Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent City" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Opponent City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact City" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Opponent Exact City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent State" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Opponent State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact State" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Opponent Exact State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Country" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Opponent Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact Country" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Opponent Exact Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Opponent Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False
            
        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Opponent Exact Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Offensive Snap Percentage" in qualifiers:
        if row["Shared"]["Year"] < 2012:
            return False

        the_snap_header = "Penalties/Snaps" if "Penalties/Snaps" in headers[player_type["da_type"]] else ("Snaps" if "Snaps" in headers[player_type["da_type"]] else None)
        if not the_snap_header or not the_snap_header in row:
            return False

        for qual_object in qualifiers["Offensive Snap Percentage"]:
            if qual_object["negate"]:
                if row[the_snap_header]["OffSnp%"] >= qual_object["values"]["start_val"] and row[the_snap_header]["OffSnp%"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[the_snap_header]["OffSnp%"] >= qual_object["values"]["start_val"] and row[the_snap_header]["OffSnp%"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Defensive Snap Percentage" in qualifiers:
        if row["Shared"]["Year"] < 2012:
            return False

        the_snap_header = "Penalties/Snaps" if "Penalties/Snaps" in headers[player_type["da_type"]] else ("Snaps" if "Snaps" in headers[player_type["da_type"]] else None)
        if not the_snap_header or not the_snap_header in row:
            return False
            
        for qual_object in qualifiers["Defensive Snap Percentage"]:
            if qual_object["negate"]:
                if row[the_snap_header]["DefSnp%"] >= qual_object["values"]["start_val"] and row[the_snap_header]["DefSnp%"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[the_snap_header]["DefSnp%"] >= qual_object["values"]["start_val"] and row[the_snap_header]["DefSnp%"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Special Teams Snap Percentage" in qualifiers:
        if row["Shared"]["Year"] < 2012:
            return False
    
        the_snap_header = "Penalties/Snaps" if "Penalties/Snaps" in headers[player_type["da_type"]] else ("Snaps" if "Snaps" in headers[player_type["da_type"]] else None)
        if not the_snap_header or not the_snap_header in row:
            return False
            
        for qual_object in qualifiers["Special Teams Snap Percentage"]:
            if qual_object["negate"]:
                if row[the_snap_header]["STSnp%"] >= qual_object["values"]["start_val"] and row[the_snap_header]["STSnp%"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[the_snap_header]["STSnp%"] >= qual_object["values"]["start_val"] and row[the_snap_header]["STSnp%"] <= qual_object["values"]["end_val"]):
                    return False

    return True

def determine_venue_obj(row, is_team):
    team_id = row["Shared"]["RawTm" if is_team else "RawOpponent"].upper()
    
    return get_venue_obj(team_id, row["Shared"]["Year"])[1]

def get_venue_obj(team_id, year):
    if team_id in team_venue_history:
        for pot_team_venue in team_venue_history[team_id]:
            for stadium_id in team_venue_history[team_id]:
                if year in team_venue_history[team_id][stadium_id]:
                    return stadium_id, team_venues[str(stadium_id)]
    
    return None, None

def human_moon(date):
    date = datetime.datetime(year=date.year, month=date.month, day=date.day, hour=19, minute=0, second=0)
    date = pytz.timezone("US/Eastern").localize(date)
    next_full = ephem.next_full_moon(date)
    next_new = ephem.next_new_moon(date)
    next_last_quarter = ephem.next_last_quarter_moon(date)
    next_first_quarter = ephem.next_first_quarter_moon(date)
    previous_full = ephem.previous_full_moon(date)
    previous_new = ephem.previous_new_moon(date)
    previous_last_quarter = ephem.previous_last_quarter_moon(date)
    previous_first_quarter = ephem.previous_first_quarter_moon(date)

    moon_phases = []

    if is_moon_match(date.date(), next_full):
        moon_phases.append("Full Moon")
    if is_moon_match(date.date(), previous_full):
        moon_phases.append("Full Moon")
    
    if is_moon_match(date.date(), next_new):
        moon_phases.append("New Moon")
    if is_moon_match(date.date(), previous_new):
        moon_phases.append("New Moon")
    
    if is_moon_match(date.date(), next_first_quarter):
        moon_phases.append("First Quarter")
    if is_moon_match(date.date(), previous_first_quarter):
        moon_phases.append("First Quarter")
    
    if is_moon_match(date.date(), next_last_quarter):
        moon_phases.append("Third Quarter")
    if is_moon_match(date.date(), previous_last_quarter):
        moon_phases.append("Third Quarter")
    
    if previous_new < next_first_quarter < next_full < next_last_quarter < next_new:
        moon_phases.append("Waxing Crescent")
    elif previous_first_quarter < next_full < next_last_quarter < next_new < next_first_quarter:
        moon_phases.append("Waxing Gibbous")
    elif previous_full < next_last_quarter < next_new < next_first_quarter < next_full:
        moon_phases.append("Waning Gibbous")
    elif previous_last_quarter < next_new < next_first_quarter < next_full < next_last_quarter:
        moon_phases.append("Waning Crescent")

    return [moon_phase.lower() for moon_phase in moon_phases]

def is_moon_match(da_date, da_moon_date):
    da_moon_date = da_moon_date.datetime()
    da_moon_date = pytz.utc.localize(da_moon_date).astimezone(pytz.timezone("US/Eastern"))
    if da_moon_date.time() < datetime.time(hour=12, minute=0, second=0):
        dt_1 = da_moon_date - datetime.timedelta(days=1)
        dt_2 = da_moon_date
    else:
        dt_1 = da_moon_date
        dt_2 = da_moon_date
    
    return da_date >= dt_1.date() and da_date <= dt_2.date()

def handle_max_min_data(all_rows, player_data, player_type, qualifiers):
    new_rows = []
    stat_vals = []

    da_max_stats = {}
    if "Min Stat" in qualifiers:
        find_stat_sub_match(qualifiers["Min Stat"], player_type, da_max_stats)
        for qual_object in qualifiers["Min Stat"]:
            for stat_obj in qual_object["values"]:
                the_over_stat = stat_obj["stats"][0]["over_stat"]
                stat = stat_obj["stats"][0]["stat"]
                start_level = stat_obj["start_level"] - 1
                end_level = stat_obj["end_level"]
                time_frame = stat_obj["time_frame"]
                stat_quals = stat_obj["stat_quals"]

                min_stats = []
                if not time_frame:
                    for row in all_rows:
                        row_lower = fill_row(row, player_data, player_type, stats=da_max_stats)

                        over_stat = the_over_stat
                        if not the_over_stat:
                            for sub_over_stat in row_lower:
                                over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                                if stat in over_row_lower:
                                    over_stat = sub_over_stat
                                    break

                        if over_stat:
                            if over_stat == "total":
                                over_stat = "era adjusted passing"
                            elif over_stat == "scrimmage":
                                over_stat = "scrimmage/all purpose"

                            if over_stat in row_lower:
                                over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                                if stat in over_row_lower:
                                    single_index = 0
                                    for single_stat in min_stats:
                                        if single_stat["value"] == over_row_lower[stat]:
                                            single_index += 1
                                    min_stats.append({
                                        "index" : single_index,
                                        "value" : over_row_lower[stat],
                                        "counter" : 0
                                    })
                                elif over_stat == "passing":
                                    over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                                    if stat in over_row_lower:
                                        single_index = 0
                                        for single_stat in min_stats:
                                            if single_stat["value"] == over_row_lower[stat]:
                                                single_index += 1
                                        min_stats.append({
                                            "index" : single_index,
                                            "value" : over_row_lower[stat],
                                            "counter" : 0
                                        })
                                elif over_stat == "rushing" and "passing" in row_lower:
                                    over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                                    if stat in over_row_lower:
                                        single_index = 0
                                        for single_stat in min_stats:
                                            if single_stat["value"] == over_row_lower[stat]:
                                                single_index += 1
                                        min_stats.append({
                                            "index" : single_index,
                                            "value" : over_row_lower[stat],
                                            "counter" : 0
                                        })
                else:
                    handle_min_max_calc(min_stats, stat_quals, player_data, player_type, stat, the_over_stat, time_frame, qualifiers, all_rows)

                if start_level == float("inf"):
                    start_level = len(min_stats) - 1
                elif start_level < 0:
                    start_level = 0
                elif start_level >= len(min_stats):
                    start_level = len(min_stats) - 1
                
                if end_level == float("inf"):
                    end_level = len(min_stats)
                elif end_level < 0:
                    end_level = 0
                elif end_level >= len(min_stats):
                    end_level = len(min_stats)

                stat_vals.append({
                    "stat_obj" : stat_obj,
                    "values" : sorted(min_stats, key=lambda stat:(stat["value"], -stat["index"]))[start_level:end_level],
                    "negate" : qual_object["negate"]
                }) 

    da_min_stats = {}
    if "Max Stat" in qualifiers:
        find_stat_sub_match(qualifiers["Max Stat"], player_type, da_min_stats)
        for qual_object in qualifiers["Max Stat"]:
            for stat_obj in qual_object["values"]:
                the_over_stat = stat_obj["stats"][0]["over_stat"]
                stat = stat_obj["stats"][0]["stat"]
                start_level = stat_obj["start_level"] - 1
                end_level = stat_obj["end_level"]
                time_frame = stat_obj["time_frame"]
                stat_quals = stat_obj["stat_quals"]

                max_stats = []
                if not time_frame:
                    for row in all_rows:
                        row_lower = fill_row(row, player_data, player_type, stats=da_min_stats)

                        over_stat = the_over_stat
                        if not the_over_stat:
                            for sub_over_stat in row_lower:
                                over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                                if stat in over_row_lower:
                                    over_stat = sub_over_stat
                                    break

                        if over_stat:
                            if over_stat == "total":
                                over_stat = "era adjusted passing"
                            elif over_stat == "scrimmage":
                                over_stat = "scrimmage/all purpose"

                            if over_stat in row_lower:
                                over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                                if stat in over_row_lower:
                                    single_index = 0
                                    for single_stat in max_stats:
                                        if single_stat["value"] == over_row_lower[stat]:
                                            single_index += 1
                                    max_stats.append({
                                        "index" : single_index,
                                        "value" : over_row_lower[stat],
                                        "counter" : 0
                                    })
                                elif over_stat == "passing":
                                    over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                                    if stat in over_row_lower:
                                        single_index = 0
                                        for single_stat in max_stats:
                                            if single_stat["value"] == over_row_lower[stat]:
                                                single_index += 1
                                        max_stats.append({
                                            "index" : single_index,
                                            "value" : over_row_lower[stat],
                                            "counter" : 0
                                        })
                                elif over_stat == "rushing" and "passing" in row_lower:
                                    over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                                    if stat in over_row_lower:
                                        single_index = 0
                                        for single_stat in max_stats:
                                            if single_stat["value"] == over_row_lower[stat]:
                                                single_index += 1
                                        max_stats.append({
                                            "index" : single_index,
                                            "value" : over_row_lower[stat],
                                            "counter" : 0
                                        })
                else:
                    handle_min_max_calc(max_stats, stat_quals, player_data, player_type, stat, the_over_stat, time_frame, qualifiers, all_rows)
                                    
                if start_level == float("inf"):
                    start_level = len(max_stats) - 1
                elif start_level < 0:
                    start_level = 0
                elif start_level >= len(max_stats):
                    start_level = len(max_stats) - 1
                
                if end_level == float("inf"):
                    end_level = len(max_stats)
                elif end_level < 0:
                    end_level = 0
                elif end_level >= len(max_stats):
                    end_level = len(max_stats)

                stat_vals.append({
                    "stat_obj" : stat_obj,
                    "values" : sorted(max_stats, key=lambda stat:(-stat["value"], -stat["index"]))[start_level:end_level],
                    "negate" : qual_object["negate"]
                }) 
    
    stats = da_max_stats.update(da_min_stats)
    for stat_val in stat_vals:
        the_over_stat = stat_val["stat_obj"]["stats"][0]["over_stat"]
        stat = stat_val["stat_obj"]["stats"][0]["stat"]
        time_frame = stat_val["stat_obj"]["time_frame"]

        transformed_vals = []
        for single_stat in stat_val["values"]:
            value = single_stat["value"]
            real_over_stat = the_over_stat
            real_stat = None

            if not real_over_stat:
                for sub_over_stat in get_constant_data.stat_groups:
                    for sub_stat in get_constant_data.stat_groups[sub_over_stat]:
                        if sub_stat.lower() == stat:
                            real_over_stat = sub_over_stat
                            break
                    if real_over_stat:
                        break
            else:
                if real_over_stat == "total":
                    real_over_stat = "era adjusted passing"
                elif real_over_stat == "scrimmage":
                    real_over_stat = "scrimmage/all purpose"
                for sub_over_stat in get_constant_data.stat_groups:
                    if sub_over_stat.lower() == real_over_stat:
                        real_over_stat = sub_over_stat
                        break

            if real_over_stat:
                if real_over_stat in get_constant_data.stat_groups:
                    for sub_stat in get_constant_data.stat_groups[real_over_stat]:
                        if sub_stat.lower() == stat:
                            real_stat = sub_stat
                            break
                    if not real_stat:
                        if real_over_stat == "Passing":
                            for sub_stat in get_constant_data.stat_groups["Era Adjusted Passing"]:
                                if sub_stat.lower() == stat:
                                    real_over_stat = "Era Adjusted Passing"
                                    real_stat = sub_stat
                                    break
                        elif over_stat == "Rushing" and "Passing" in headers[player_type["da_type"]]:
                            for sub_stat in get_constant_data.stat_groups["Passing"]:
                                if sub_stat.lower() == stat:
                                    real_over_stat = "Passing" 
                                    real_stat = sub_stat
                                    break
                    if not real_stat:
                        real_over_stat = None
            else:
                real_over_stat = None
                real_stat = None

            if isinstance(value, numbers.Number):
                if real_over_stat and real_stat and "round" in get_constant_data.stat_groups[real_over_stat][real_stat]:
                    round_val = get_constant_data.stat_groups[real_over_stat][real_stat]["round"]
                    if round_val == "percent":
                        value = ("{:.2f}").format(get_constant_data.round_value(100 * value, 2)) + "%"
                    else:
                        value = get_constant_data.round_value(value, round_val)
                        value = ("{:." + str(round_val) + "f}").format(value)
                else:
                    value = get_constant_data.round_value(value)
            elif (real_over_stat == "Era Adjusted Passing" and real_stat.startswith("Rec")) or real_stat == "TmRec" or real_stat == "ATS TmRec" or real_stat == "O/U TmRec":
                rec_split = value.split(":")
                value = str(get_constant_data.round_value(float(rec_split[0]))) + ":" + str(get_constant_data.round_value(float(rec_split[1]))) + ":" + str(get_constant_data.round_value(float(rec_split[2])))
            value = str(value) 
            transformed_vals.append(value)

        if "explain_str" not in stat_val["stat_obj"]:
            stat_val["stat_obj"]["explain_str"] = []
        current_explain_strs = stat_val["stat_obj"]["explain_str"]
        stat_val["stat_obj"]["explain_str"] = ""

        if not time_frame:
            if over_stat:
                stat_val["stat_obj"]["explain_str"] += over_stat.title() + ">"
            stat_val["stat_obj"]["explain_str"] += stat.upper() + ":" + ",".join(transformed_vals)
            for row in all_rows:
                row_lower = fill_row(row, player_data, player_type, stats=stats)

                over_stat = the_over_stat
                if not the_over_stat:
                    for sub_over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                        if stat in over_row_lower:
                            has_value_match = False
                            for single_stat in stat_val["values"]:
                                if single_stat["value"] == over_row_lower[stat]:
                                    if single_stat["counter"] == single_stat["index"]:
                                        has_value_match = True
                                    single_stat["counter"] += 1
                            if has_value_match:
                                if not stat_val["negate"]:
                                    new_rows.append(row)
                            elif stat_val["negate"]:
                                new_rows.append(row)
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                has_value_match = False
                                for single_stat in stat_val["values"]:
                                    if single_stat["value"] == over_row_lower[stat]:
                                        if single_stat["counter"] == single_stat["index"]:
                                            has_value_match = True
                                        single_stat["counter"] += 1
                                if has_value_match:
                                    if not stat_val["negate"]:
                                        new_rows.append(row)
                                elif stat_val["negate"]:
                                    new_rows.append(row)
                        elif over_stat == "rushing" and "passing" in row_lower:
                            over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                            if stat in over_row_lower:
                                has_value_match = False
                                for single_stat in stat_val["values"]:
                                    if single_stat["value"] == over_row_lower[stat]:
                                        if single_stat["counter"] == single_stat["index"]:
                                            has_value_match = True
                                        single_stat["counter"] += 1
                                if has_value_match:
                                    if not stat_val["negate"]:
                                        new_rows.append(row)
                                elif stat_val["negate"]:
                                    new_rows.append(row)
            stat_val["stat_obj"]["explain_str"] = current_explain_strs + [stat_val["stat_obj"]["explain_str"]]
        else:
            matching_rows = handle_min_max_final(stat_val, current_explain_strs, player_data, player_type, stat, the_over_stat, qualifiers, all_rows, transformed_vals)
            if matching_rows:
                new_rows.extend(matching_rows)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_min_max_calc(the_stats, stat_quals, player_data, player_type, stat, over_stat, time_frame, qualifiers, all_rows):
    if not all_rows:
        return

    qual_type = time_frame["qual_type"]
    qual_num_start = time_frame["qual_num_start"]
    qual_num_end = time_frame["qual_num_end"]

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")

    if qual_type == "Days" or qual_type == "Weeks" or qual_type == "Months" or qual_type == "Years":
        dates = [row["Shared"]["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        qual_num = qual_num_start
        while (True):
            if qual_type == "Days":
                date_diff = dateutil.relativedelta.relativedelta(days=qual_num)
            elif qual_type == "Weeks":
                start_date -= datetime.timedelta(days=7)
                end_date += datetime.timedelta(days=7)
                date_diff = dateutil.relativedelta.relativedelta(weeks=qual_num)
            elif qual_type == "Months":
                start_date -= datetime.timedelta(days=31)
                end_date += datetime.timedelta(days=31)
                date_diff = dateutil.relativedelta.relativedelta(months=qual_num)
            elif qual_type == "Years":
                start_date -= datetime.timedelta(days=365)
                end_date += datetime.timedelta(days=365)
                date_diff = dateutil.relativedelta.relativedelta(years=qual_num)
            
            for days in range((end_date - start_date).days + 1):
                current_start_date = start_date + datetime.timedelta(days)
                stat_value, matching_rows = handle_date_rows(player_data, player_type, stat, over_stat, current_start_date, date_diff, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
            
            if qual_num >= qual_num_end:
                break
            if start_date + date_diff > end_date:
                break
            qual_num += 1
    elif qual_type == "Calendar-Weeks" or qual_type == "Calendar-Months" or qual_type == "Calendar-Years":
        dates = [row["Shared"]["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        if qual_type == "Calendar-Weeks":
            start_date = start_date - datetime.timedelta(days=start_date.weekday())
            tmp_end_date = end_date - datetime.timedelta(days=end_date.weekday())
            end_date = tmp_end_date + datetime.timedelta(days=6)
            for date in dateutil.rrule.rrule(dateutil.rrule.WEEKLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_week_rows(player_data, player_type, stat, over_stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
        elif qual_type == "Calendar-Months":
            start_date = datetime.datetime(start_date.year, start_date.month, 1)
            end_date = datetime.datetime(end_date.year, end_date.month, calendar.monthrange(end_date.year, end_date.month)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.MONTHLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_month_rows(player_data, player_type, stat, over_stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
        elif qual_type == "Calendar-Years":
            start_date = datetime.datetime(start_date.year, 1, 1)
            end_date = datetime.datetime(end_date.year, 12, calendar.monthrange(end_date.year, 12)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.YEARLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_year_rows(player_data, player_type, stat, over_stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
    elif qual_type == "Games":
        qual_num = qual_num_start
        while (True):
            for i in range(len(all_rows)):
                stat_value, matching_rows = handle_game_rows(i, player_data, player_type, stat, over_stat, qual_num, all_rows, only_seasons)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })

            if qual_num >= qual_num_end:
                break
            if qual_num > len(all_rows):
                break
            qual_num += 1
    elif qual_type == "Seasons":
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        qual_num = qual_num_start
        while (True):
            for i in range(len(seasons)):
                season = seasons[i]
                next_season_index = i + qual_num
                if next_season_index > len(seasons):
                    continue
                if next_season_index == len(seasons):
                    current_end_season = seasons[next_season_index - 1] + 1
                else:
                    current_end_season = seasons[next_season_index]
                stat_value, matching_rows = handle_season_rows(season, current_end_season, player_data, player_type, stat, over_stat, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })

            if qual_num >= qual_num_end:
                break
            if qual_num > len(seasons):
                break
            qual_num += 1
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        if only_seasons:
            seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
            for season in seasons:
                season_rows = [row for row in all_rows if row["Shared"]["Year"] == season]
                teams = set([row["Shared"][row_stat] for row in season_rows])
                for team in teams:
                    stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, over_stat, season_rows)
                    if matching_rows:
                        if not stat_quals:
                            single_index = 0
                            for single_stat in the_stats:
                                if single_stat["value"] == stat_value:
                                    single_index += 1
                            the_stats.append({
                                "index" : single_index,
                                "value" : stat_value,
                                "counter" : 0
                            })
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            single_index = 0
                            for single_stat in the_stats:
                                if single_stat["value"] == stat_value:
                                    single_index += 1
                            the_stats.append({
                                "index" : single_index,
                                "value" : stat_value,
                                "counter" : 0
                            })
        else:
            teams = set([row["Shared"][row_stat] for row in all_rows])
            for team in teams:
                stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, over_stat, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
    
def handle_min_max_final(stat_val, current_explain_strs, player_data, player_type, stat, over_stat, qualifiers, all_rows, transformed_vals):
    if not all_rows:
        stat_val["stat_obj"]["explain_str"] = current_explain_strs
        return []

    qual_type = stat_val["stat_obj"]["time_frame"]["qual_type"]
    qual_num_start = stat_val["stat_obj"]["time_frame"]["qual_num_start"]
    qual_num_end = stat_val["stat_obj"]["time_frame"]["qual_num_end"]
    stat_quals = stat_val["stat_obj"]["stat_quals"]

    qual_num_str = ""
    if qual_num_start == qual_num_end:
        qual_num_str = str(qual_num_start)
    else:
        qual_num_str = str(qual_num_start) + "-" + str(qual_num_end)

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    match_all = False
    if not stat:
        over_stat = "shared"
        stat = "datestart"
        match_all = True

    if not match_all:
        if over_stat:
            stat_val["stat_obj"]["explain_str"] += over_stat.title() + ">"
        stat_val["stat_obj"]["explain_str"] += stat.upper() + ":" + ",".join(transformed_vals)

    range_str = ""

    match_count = 0
    total_matching_rows = []
    if qual_type == "Days" or qual_type == "Weeks" or qual_type == "Months" or qual_type == "Years":
        dates = [row["Shared"]["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        qual_num = qual_num_start
        while (True):
            if qual_type == "Days":
                date_diff = dateutil.relativedelta.relativedelta(days=qual_num)
            elif qual_type == "Weeks":
                start_date -= datetime.timedelta(days=7)
                end_date += datetime.timedelta(days=7)
                date_diff = dateutil.relativedelta.relativedelta(weeks=qual_num)
            elif qual_type == "Months":
                start_date -= datetime.timedelta(days=31)
                end_date += datetime.timedelta(days=31)
                date_diff = dateutil.relativedelta.relativedelta(months=qual_num)
            elif qual_type == "Years":
                start_date -= datetime.timedelta(days=365)
                end_date += datetime.timedelta(days=365)
                date_diff = dateutil.relativedelta.relativedelta(years=qual_num)
            
            for days in range((end_date - start_date).days + 1):
                current_start_date = start_date + datetime.timedelta(days)
                stat_value, matching_rows = handle_date_rows(player_data, player_type, stat, over_stat, current_start_date, date_diff, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                        
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                found_match = True
                                break

                    if not found_match:                
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if current_start_date ==  (current_start_date + date_diff - datetime.timedelta(days=1)):
                                    range_str += str(current_start_date)
                                else:
                                    range_str += "[" + str(current_start_date) + " - " +  str(current_start_date + date_diff - datetime.timedelta(days=1)) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            if current_start_date ==  (current_start_date + date_diff - datetime.timedelta(days=1)):
                                range_str += str(current_start_date)
                            else:
                                range_str += "[" + str(current_start_date) + " - " +  str(current_start_date + date_diff - datetime.timedelta(days=1)) + "]"

            if qual_num >= qual_num_end:
                break
            if start_date + end_date > date_diff:
                break
            qual_num += 1
    elif qual_type == "Calendar-Weeks" or qual_type == "Calendar-Months" or qual_type == "Calendar-Years":
        dates = [row["Shared"]["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        if qual_type == "Calendar-Weeks":
            start_date = start_date - datetime.timedelta(days=start_date.weekday())
            tmp_end_date = end_date - datetime.timedelta(days=end_date.weekday())
            end_date = tmp_end_date + datetime.timedelta(days=6)
            for date in dateutil.rrule.rrule(dateutil.rrule.WEEKLY, dtstart=start_date, until=end_date):
                tmp_real_end_date = date - datetime.timedelta(days=date.weekday())
                real_end_date = tmp_real_end_date + datetime.timedelta(days=6)

                stat_value, matching_rows = handle_week_rows(player_data, player_type, stat, over_stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                found_match = True
                                break

                    if not found_match:
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if date ==  real_end_date:
                                    range_str += str(date)
                                else:
                                    range_str += "[" + str(date.date()) + " - " + str(real_end_date.date()) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            if date ==  real_end_date:
                                range_str += str(date)
                            else:
                                range_str += "[" + str(date.date()) + " - " + str(real_end_date.date()) + "]"
        elif qual_type == "Calendar-Months":
            start_date = datetime.datetime(start_date.year, start_date.month, 1)
            end_date = datetime.datetime(end_date.year, end_date.month, calendar.monthrange(end_date.year, end_date.month)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.MONTHLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_month_rows(player_data, player_type, stat, over_stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True

                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                found_match = True
                                break

                    if not found_match:  
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += "[" + calendar.month_name[date.month] + " " + str(date.year)  + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += "[" + calendar.month_name[date.month] + " " + str(date.year)  + "]"
        elif qual_type == "Calendar-Years":
            start_date = datetime.datetime(start_date.year, 1, 1)
            end_date = datetime.datetime(end_date.year, 12, calendar.monthrange(end_date.year, 12)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.YEARLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_year_rows(player_data, player_type, stat, over_stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                found_match = True
                                break

                    if not found_match:
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += str(date.year)
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += str(date.year)
    elif qual_type == "Games":
        qual_num = qual_num_start
        while (True):
            for i in range(len(all_rows)):
                stat_value, matching_rows = handle_game_rows(i, player_data, player_type, stat, over_stat, qual_num, all_rows, only_seasons)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True

                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                found_match = True
                                break

                    if not found_match:     
                        if has_match:
                            if not stat_val["negate"]:
                                dates = [matching_row["Shared"]["Date"] for matching_row in matching_rows]
                                start_date = min(dates)
                                end_date = max(dates)
                                if total_matching_rows:
                                    total_dates = [matching_row["Shared"]["Date"] for matching_row in total_matching_rows]
                                    total_start_date = min(total_dates)
                                    total_end_date = max(total_dates)
                                else:
                                    total_start_date = datetime.date.max
                                    total_end_date = datetime.date.min
                                if start_date < total_start_date or end_date > total_end_date:
                                    match_count += 1
                                    total_matching_rows.extend(matching_rows)

                                    date_start_link = None
                                    date_end_link = None
                                    for row in all_rows:
                                        if row["Shared"]["Date"] == start_date:
                                            date_start_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                                        if row["Shared"]["Date"] == end_date:
                                            date_end_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                                        
                                        if date_start_link and date_end_link:
                                            break
                                    start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                                    end_date = "[" + str(end_date) + "](" + date_end_link + ")"

                                    if range_str:
                                        range_str += " + "
                                    else:
                                        range_str += qual_type + ":" + qual_num_str + "|"
                                    if start_date == end_date:
                                        range_str += str(start_date)
                                    else:
                                        range_str += "[" + str(start_date)  + " - " + str(end_date) + "]"
                        elif stat_val["negate"]:
                            dates = [matching_row["Shared"]["Date"] for matching_row in matching_rows]
                            start_date = min(dates)
                            end_date = max(dates)
                            if total_matching_rows:
                                total_dates = [matching_row["Shared"]["Date"] for matching_row in total_matching_rows]
                                total_start_date = min(total_dates)
                                total_end_date = max(total_dates)
                            else:
                                total_start_date = datetime.date.max
                                total_end_date = datetime.date.min
                            if start_date < total_start_date or end_date > total_end_date:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)

                                date_start_link = None
                                date_end_link = None
                                for row in all_rows:
                                    if row["Shared"]["Date"] == start_date:
                                        date_start_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                                    if row["Shared"]["Date"] == end_date:
                                        date_end_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                                    
                                    if date_start_link and date_end_link:
                                        break
                                start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                                end_date = "[" + str(end_date) + "](" + date_end_link + ")"

                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if start_date == end_date:
                                    range_str += str(start_date)
                                else:
                                    range_str += "[" + str(start_date)  + " - " + str(end_date) + "]"

            if qual_num >= qual_num_end:
                break
            if qual_num > len(all_rows):
                break
            qual_num += 1
    elif qual_type == "Seasons":
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        qual_num = qual_num_start
        while (True):
            for i in range(len(seasons)):
                season = seasons[i]
                next_season_index = i + qual_num
                if next_season_index > len(seasons):
                    continue
                if next_season_index == len(seasons):
                    current_end_season = seasons[next_season_index - 1] + 1
                else:
                    current_end_season = seasons[next_season_index]
                stat_value, matching_rows = handle_season_rows(season, current_end_season, player_data, player_type, stat, over_stat, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                found_match = True
                                break

                    if not found_match:
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"

                                if season in player_data["game_valid_years"]:
                                    start_date = "[" + str(season) + "](" + yearly_game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"], str(season)) + ")"
                                else:
                                    start_date = season
                                if current_end_season - 1 in player_data["game_valid_years"]:
                                    end_date = "[" + str(current_end_season - 1) + "](" + yearly_game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"], str(current_end_season - 1)) + ")"
                                else:
                                    end_date = current_end_season - 1

                                if start_date == end_date:
                                    range_str += str(start_date)
                                else:
                                    range_str += "[" + str(start_date) + " to " + str(end_date) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"

                            if season in player_data["game_valid_years"]:
                                start_date = "[" + str(season) + "](" + yearly_game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"], str(season)) + ")"
                            else:
                                start_date = season
                            if current_end_season - 1 in player_data["game_valid_years"]:
                                end_date = "[" + str(current_end_season - 1) + "](" + yearly_game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"], str(current_end_season - 1)) + ")"
                            else:
                                end_date = current_end_season - 1

                            if start_date == end_date:
                                range_str += str(start_date)
                            else:
                                range_str += "[" + str(start_date) + " to " + str(end_date) + "]"
                        
            if qual_num >= qual_num_end:
                break
            if qual_num > len(seasons):
                break
            qual_num += 1
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        if only_seasons:
            seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
            for season in seasons:
                season_rows = [row for row in all_rows if row["Shared"]["Year"] == season]
                teams = set([row["Shared"][row_stat] for row in season_rows])
                for team in teams:
                    stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, over_stat, season_rows)
                    if matching_rows:
                        has_match = False
                        has_value_match = False
                        for single_stat in stat_val["values"]:
                            if single_stat["value"] == stat_value:
                                if single_stat["counter"] == single_stat["index"]:
                                    has_value_match = True
                                single_stat["counter"] += 1
                        if has_value_match or match_all:
                            if not stat_quals:
                                has_match = True
                            elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                                has_match = True
                        
                        found_match = False
                        for old_row in total_matching_rows:
                            for new_row in matching_rows:
                                if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                    found_match = True
                                    break

                        if not found_match:
                            if has_match:
                                if not stat_val["negate"]:
                                    match_count += 1
                                    total_matching_rows.extend(matching_rows)
                                    if range_str:
                                        range_str += " + "
                                    else:
                                        range_str += qual_type + ":" + qual_num_str + "|"
                                    range_str += team.upper()
                            elif stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += team.upper()
        else:
            teams = set([row["Shared"][row_stat] for row in all_rows])
            for team in teams:
                stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, over_stat, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                found_match = True
                                break

                    if not found_match:
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += team.upper()
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += team.upper()

    if not range_str:
        if not match_all:
            if over_stat:
                stat_val["stat_obj"]["explain_str"] =  over_stat.title() + ">" + stat.upper() + "|" + qual_type + ":" + qual_num_str
            else:
                stat_val["stat_obj"]["explain_str"] = stat.upper() + "|" + qual_type + ":" + qual_num_str
            if match_count != 1:
                stat_val["stat_obj"]["explain_str"] += "|" + str(match_count) + " Stretches"
        else:
            stat_val["stat_obj"]["explain_str"] += str(match_count) + " Stretches"
        if only_seasons:
            stat_val["stat_obj"]["explain_str"] += "|Only Seasons"
    else:
        if not match_all:
            if match_count != 1:
                stat_val["stat_obj"]["explain_str"] += "|" + str(match_count) + " Stretches"
        else:
            stat_val["stat_obj"]["explain_str"] += str(match_count) + " Stretches"
        if only_seasons:
            stat_val["stat_obj"]["explain_str"] += "|Only Seasons"
        stat_val["stat_obj"]["explain_str"] += "|" + range_str
    if stat_quals:
        stat_val["stat_obj"]["explain_str"] += "|"
        for stat_qual in stat_quals:
            stat_val["stat_obj"]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_val["stat_obj"]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_val["stat_obj"]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_val["stat_obj"]["explain_str"] += ", "
        stat_val["stat_obj"]["explain_str"] = stat_val["stat_obj"]["explain_str"][:-2]

    stat_val["stat_obj"]["explain_str"] = current_explain_strs + [stat_val["stat_obj"]["explain_str"]]

    return total_matching_rows

def find_stat_sub_match(qual_objects, player_type, stats):
    for qual_object in qual_objects:
        find_sub_stat_sub_match(qual_object["values"], player_type, stats)

def find_sub_stat_sub_match(sub_qual_objects, player_type, stats):
    for sub_qual_object in sub_qual_objects:
        over_stat = sub_qual_object["stats"][0]["over_stat"]
        stat = sub_qual_object["stats"][0]["stat"]
        find_sub_sub_stat_match(over_stat, stat, player_type, stats)

def find_stat_match(qual_objects, player_type, stats, stat_name="values"):
    for qual_object in qual_objects:
        find_sub_stat_match(qual_object[stat_name], player_type, stats)

def find_sub_stat_match(sub_qual_objects, player_type, stats):
    for sub_qual_object in sub_qual_objects:
        over_stat = sub_qual_object["over_stat"]
        stat = sub_qual_object["stat"]
        find_sub_sub_stat_match(over_stat, stat, player_type, stats)

def find_sub_sub_stat_match(over_stat, stat, player_type, stats):
    if not over_stat:
        for sub_over_stat in list(headers[player_type["da_type"]].keys()) + ["Shared"]:
            for sub_stat in get_constant_data.stat_groups[sub_over_stat]:
                if sub_stat.lower() == stat:
                    if not sub_over_stat in stats:
                        stats[sub_over_stat] = set()
                    stats[sub_over_stat].add(sub_stat)
                    return
    else:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        for sub_over_stat in list(headers[player_type["da_type"]].keys()) + ["Shared"]:
            if sub_over_stat.lower() == over_stat:
                for sub_stat in get_constant_data.stat_groups[sub_over_stat]:
                    if sub_stat.lower() == stat:
                        if not sub_over_stat in stats:
                            stats[sub_over_stat] = set()
                        stats[sub_over_stat].add(sub_stat)
                        return
        
                if sub_over_stat == "Passing" and "Era Adjusted Passing" in headers[player_type["da_type"]]:
                    for sub_stat in get_constant_data.stat_groups["Era Adjusted Passing"]:
                        if sub_stat.lower() == stat:
                            if not "Era Adjusted Passing" in stats:
                                stats["Era Adjusted Passing"] = set()
                            stats["Era Adjusted Passing"].add(sub_stat)
                            return
                
                if sub_over_stat == "Rushing" and "Passing" in headers[player_type["da_type"]]:
                    for sub_stat in get_constant_data.stat_groups["Passing"]:
                        if sub_stat.lower() == stat:
                            if not "Passing" in stats:
                                stats["Passing"] = set()
                            stats["Passing"].add(sub_stat)
                            return

            
def handle_season_stats(all_rows, player_data, player_type, qualifiers):
    if not all_rows:
        return []

    stats = {}
    if "Season Stat" in qualifiers:
        find_stat_match(qualifiers["Season Stat"], player_type, stats)
    if "Previous Season Stat" in qualifiers:
        find_stat_match(qualifiers["Previous Season Stat"], player_type, stats)
    if "Upcoming Season Stat" in qualifiers:
        find_stat_match(qualifiers["Upcoming Season Stat"], player_type, stats)

    season_row_map = {}
    seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
    for season in seasons:
        season_matching_rows = []
        for row in all_rows:
            year = row["Shared"]["Year"]
            if year == season:
                season_matching_rows.append(row)
        season_row_map[season] = {
            "ind_rows" : season_matching_rows
        }

        if "Season Stat" in qualifiers or "Previous Season Stat" in qualifiers or "Upcoming Season Stat" in qualifiers:
            season_row_map[season]["comb_row"] = comb_rows(season_matching_rows, player_data, player_type, stats=stats)
            season_row_map[season]["comb_row"]["Shared"] = {
                "Year" : season
            }
        if "Season Formula" in qualifiers:
            stats = set()
            for qual_object in qualifiers["Season Formula"]:
                formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula))
                for header in list(headers[player_type["da_type"]].keys()) + ["Shared"]:
                    header_match = r"(?:" + header.lower() + r")"
                    if header == "Era Adjusted Passing":
                        header_match = r"(?:era adjusted passing|total)"
                    elif header == "Scrimmage/All Purpose":
                        header_match = r"(?:scrimmage/all purpose|scrimmage)"
                    for stat in get_constant_data.stat_groups[over_header]:
                        has_match = False
                        for formula_match in formula_matches:
                            if formula_match.group() == header.lower():
                                has_match = True
                                break
                        if has_match:
                            if header not in stats:
                                stats[header] = set()
                            stats[header].add(header)

            season_row_map[season]["comb_row_upper"] = comb_rows(season_matching_rows, player_data, player_type, False, stats=stats)
            season_row_map[season]["comb_row_upper"]["Shared"] = {
                "Year" : season
            }

    explain_str_obj = None
    
    new_rows = []
    for season in seasons:
        if "Season Stat" in qualifiers or "Previous Season Stat" in qualifiers or "Upcoming Season Stat" in qualifiers:
            season_row = season_row_map[season]["comb_row"]
            previous_row = None
            if season - 1 in season_row_map:
                previous_row = season_row_map[season - 1]["comb_row"]
            upcoming_row = None
            if season + 1 in season_row_map:
                upcoming_row = season_row_map[season + 1]["comb_row"]

        add_row = True
        if "Season Stat" in qualifiers:
            for qual_object in qualifiers["Season Stat"]:    
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    over_stat = sub_qual_object["over_stat"]
                    stat = sub_qual_object["stat"]

                    if not over_stat:
                        for sub_over_stat in season_row:
                            over_row_lower = {key.lower(): value for key, value in season_row[sub_over_stat].items()}
                            if stat in over_row_lower:
                                over_stat = sub_over_stat
                                break
                    
                    if over_stat:
                        if over_stat == "total":
                            over_stat = "era adjusted passing"
                        elif over_stat == "scrimmage":
                            over_stat = "scrimmage/all purpose"

                        if over_stat in season_row:
                            over_row_lower = {key.lower(): value for key, value in season_row[over_stat].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                            elif over_stat == "passing":
                                over_row_lower = {key.lower(): value for key, value in season_row["era adjusted passing"].items()}
                                if stat in over_row_lower:
                                    has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                            elif over_stat == "rushing" and "passing" in season_row:
                                over_row_lower = {key.lower(): value for key, value in season_row["passing"].items()}
                                if stat in over_row_lower:
                                    has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]

                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break

        if add_row and "Previous Season Stat" in qualifiers:
            if not previous_row:
                add_row = False
                continue
            for qual_object in qualifiers["Previous Season Stat"]:
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    over_stat = sub_qual_object["over_stat"]
                    stat = sub_qual_object["stat"]

                    if not over_stat:
                        for sub_over_stat in previous_row:
                            over_row_lower = {key.lower(): value for key, value in previous_row[sub_over_stat].items()}
                            if stat in over_row_lower:
                                over_stat = sub_over_stat
                                break
                    
                    if over_stat:
                        if over_stat == "total":
                            over_stat = "era adjusted passing"
                        elif over_stat == "scrimmage":
                            over_stat = "scrimmage/all purpose"

                        if over_stat in previous_row:
                            over_row_lower = {key.lower(): value for key, value in previous_row[over_stat].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                            elif over_stat == "passing":
                                over_row_lower = {key.lower(): value for key, value in previous_row["era adjusted passing"].items()}
                                if stat in over_row_lower:
                                    has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                            elif over_stat == "rushing" and "passing" in previous_row:
                                over_row_lower = {key.lower(): value for key, value in previous_row["passing"].items()}
                                if stat in over_row_lower:
                                    has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]

                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break

        if add_row and "Upcoming Season Stat" in qualifiers:
            if not upcoming_row:
                add_row = False
                continue
            for qual_object in qualifiers["Upcoming Season Stat"]:                    
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    over_stat = sub_qual_object["over_stat"]
                    stat = sub_qual_object["stat"]

                    if not over_stat:
                        for sub_over_stat in upcoming_row:
                            over_row_lower = {key.lower(): value for key, value in upcoming_row[sub_over_stat].items()}
                            if stat in over_row_lower:
                                over_stat = sub_over_stat
                                break
                    
                    if over_stat:
                        if over_stat == "total":
                            over_stat = "era adjusted passing"
                        elif over_stat == "scrimmage":
                            over_stat = "scrimmage/all purpose"

                        if over_stat in upcoming_row:
                            over_row_lower = {key.lower(): value for key, value in upcoming_row[over_stat].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                            elif over_stat == "passing":
                                over_row_lower = {key.lower(): value for key, value in upcoming_row["era adjusted passing"].items()}
                                if stat in over_row_lower:
                                    has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                            elif over_stat == "rushing" and "passing" in upcoming_row:
                                over_row_lower = {key.lower(): value for key, value in upcoming_row["passing"].items()}
                                if stat in over_row_lower:
                                    has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]

                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break
            
        if add_row and "Season Formula" in qualifiers:
            for qual_object in qualifiers["Season Formula"]:
                formula = qual_object["values"][0]
                try:
                    has_match = bool(get_constant_data.calculate_formula("custom_formula", formula, season_row_map[season]["comb_row_upper"], None, headers, player_data, player_type, season_row_map[season]["ind_rows"], safe_eval=True))
                except Exception:
                    has_match = False
                    add_row = False

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break
        
        if add_row:
            new_rows.extend(season_row_map[season]["ind_rows"])
    
    new_rows =  [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

    if explain_str_obj:
        if "explain_str" not in explain_str_obj:
            explain_str_obj["explain_str"] = []
        current_explain_strs = explain_str_obj["explain_str"]
        explain_str_obj["explain_str"] = ""

        seasons = sorted(list(set([str(row["Shared"]["Year"]) for row in new_rows])))
        explain_str_obj["explain_str"] = ""

        explain_str_obj["explain_str"] += explain_str_obj["stat"].upper() + "="
        if explain_str_obj["start_val"] == explain_str_obj["end_val"]:
             explain_str_obj["explain_str"] += get_time_str(explain_str_obj["start_val"], False)
        else:
             explain_str_obj["explain_str"] += (get_time_str(explain_str_obj["start_val"], False)) + "-" + (get_time_str(explain_str_obj["end_val"], False))

        explain_str_obj["explain_str"] = current_explain_strs + [explain_str_obj["explain_str"]]

    return new_rows

def handle_career_stats(all_rows, player_data, player_type, qualifiers):
    if not all_rows:
        return []

    new_rows = []
    matching_rows = []
    explain_str_obj = None

    found_first_end = False

    stats = {}
    find_stat_match(qualifiers["Total Games Stat"], player_type, stats)

    for row in all_rows:
        matching_rows.append(row)
        comb_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        add_row = True
        for qual_object in qualifiers["Total Games Stat"]:    
            has_match = False
            for sub_qual_object in qual_object["values"]:
                if not explain_str_obj:
                    explain_str_obj = sub_qual_object

                over_stat = sub_qual_object["over_stat"]
                stat = sub_qual_object["stat"]
                if not over_stat:
                    for sub_over_stat in comb_row:
                        over_row_lower = {key.lower(): value for key, value in comb_row[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in comb_row:
                        over_row_lower = {key.lower(): value for key, value in comb_row[over_stat].items()}
                        if stat in over_row_lower:
                            has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                            if not sub_qual_object["end_exclusive"]:
                                if over_row_lower[stat] >= sub_qual_object["end_val"]:
                                    if found_first_end:
                                        has_match = False
                                    else:
                                        has_match = True

                                    found_first_end = True
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in comb_row["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                                if not sub_qual_object["end_exclusive"]:
                                    if over_row_lower[stat] >= sub_qual_object["end_val"]:
                                        if found_first_end:
                                            has_match = False
                                        else:
                                            has_match = True

                                        found_first_end = True
                        elif over_stat == "rushing" and "passing" in comb_row:
                            over_row_lower = {key.lower(): value for key, value in comb_row["passing"].items()}
                            if stat in over_row_lower:
                                has_match = over_row_lower[stat] >= sub_qual_object["start_val"] and over_row_lower[stat] <= sub_qual_object["end_val"]
                                if not sub_qual_object["end_exclusive"]:
                                    if over_row_lower[stat] >= sub_qual_object["end_val"]:
                                        if found_first_end:
                                            has_match = False
                                        else:
                                            has_match = True

                                        found_first_end = True
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    add_row = False
                    break
            else:
                if not has_match:
                    add_row = False
                    break
        
        if add_row:
            new_rows.append(row)
    
    new_rows =  [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

    date_diff = None
    if new_rows:
        dates = set([row["Shared"]["Date"] for row in new_rows])
        min_date = min(dates)
        max_date = max(dates)
        date_diff = dateutil.relativedelta.relativedelta(min_date, max_date)

    if explain_str_obj:
        if "explain_str" not in explain_str_obj:
            explain_str_obj["explain_str"] = []
        current_explain_strs = explain_str_obj["explain_str"]
        explain_str_obj["explain_str"] = ""

        explain_str_obj["explain_str"] += explain_str_obj["stat"].upper() + "="
        if explain_str_obj["start_val"] == explain_str_obj["end_val"]:
             explain_str_obj["explain_str"] += get_time_str(explain_str_obj["start_val"], False)
        else:
             explain_str_obj["explain_str"] += (get_time_str(explain_str_obj["start_val"], False)) + "-" + (get_time_str(explain_str_obj["end_val"], False))

        explain_str_obj["explain_str"] += "|" + str(len(new_rows)) + " Total Games"

        if date_diff:
            date_diff_str = "|Time: "
            if date_diff.years:
                date_diff_str += str(date_diff.years).replace("-", "") + "Y"
            if date_diff.months:
                if date_diff.years:
                    date_diff_str += "-"
                date_diff_str += str(date_diff.months).replace("-", "") + "M"
            if date_diff.days:
                if date_diff.years or date_diff.months:
                    date_diff_str += "-"
                date_diff_str += str(date_diff.days).replace("-", "") + "D"

            explain_str_obj["explain_str"] += date_diff_str

        explain_str_obj["explain_str"] = current_explain_strs + [explain_str_obj["explain_str"]]

    return new_rows

def handle_max_streak(all_rows, player_data, player_type, qualifiers, max_streak, is_formula):
    new_rows = []

    if "Max Streak" in qualifiers and max_streak and not is_formula:
        for qual_object in qualifiers["Max Streak"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
    
    if "Count Streak" in qualifiers and not max_streak and not is_formula:
        for qual_object in qualifiers["Count Streak"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
    
    if "Max Streak Formula" in qualifiers and max_streak and is_formula:
        for qual_object in qualifiers["Max Streak Formula"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
    
    if "Count Streak Formula" in qualifiers and not max_streak and is_formula:
        for qual_object in qualifiers["Count Streak Formula"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_max_stretch(all_rows, player_data, player_type, qualifiers):
    new_rows = []

    if "Max Stretch" in qualifiers:
        for qual_object in qualifiers["Max Stretch"]:
            handle_max_stretch_calc(new_rows, qual_object["values"], player_data, player_type, all_rows)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_max_streak_calc(new_rows, stat_objs, player_data, player_type, all_rows, max_streak, is_formula):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))
        
    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        prev_year = None
        break_next = False
        for i in range(len(all_rows)):
            row = all_rows[i]
            if prev_year != None and prev_year == row["Shared"]["Year"]:
                if break_next:
                    continue
            else:
                break_next = False
            prev_year = row["Shared"]["Year"]

            matching_rows = handle_streak_game_rows(i, player_data, player_type, stat_objs, all_rows, only_seasons, is_formula)
            if matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
            elif only_seasons and (is_start == True or is_start == False):
                break_next = True

            if not only_seasons and (is_start == True or is_start == False):
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        for i in range(len(seasons)):
            matching_rows = handle_streak_season_rows(i, seasons, player_data, player_type, stat_objs, all_rows)
            if matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Year"] == old_row["Shared"]["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Shared"]["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Year"] == old_row["Shared"]["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Shared"]["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
            if is_start == True or is_start == False:
                break
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        teams = sorted(list(set([row["Shared"][row_stat] for row in all_rows])))
        for team in teams:
            team_rows = [row for row in all_rows if row["Shared"][row_stat] == team]
            prev_year = None
            break_next = False
            for i in range(len(team_rows)):
                row = team_rows[i]
                if prev_year != None and prev_year == row["Shared"]["Year"]:
                    if break_next:
                        continue
                else:
                    break_next = False
                prev_year = row["Shared"]["Year"]

                matching_rows = handle_streak_game_rows(i, player_data, player_type, stat_objs, team_rows, only_seasons, False)
                if matching_rows:
                    if not stat_quals:
                        found_match = False
                        for key in all_streak_obj:
                            for old_rows in all_streak_obj[key]:
                                for old_row in old_rows:
                                    for new_row in matching_rows:
                                        if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                            found_match = True
                                            break
                        if not found_match:
                            streak_length = len(matching_rows)
                            if not streak_length in all_streak_obj:
                                all_streak_obj[streak_length] = []
                            all_streak_obj[streak_length].append(matching_rows)
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        found_match = False
                        for key in all_streak_obj:
                            for old_rows in all_streak_obj[key]:
                                for old_row in old_rows:
                                    for new_row in matching_rows:
                                        if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                            found_match = True
                                            break
                        if not found_match:
                            streak_length = len(matching_rows)
                            if not streak_length in all_streak_obj:
                                all_streak_obj[streak_length] = []
                            all_streak_obj[streak_length].append(matching_rows)
                elif only_seasons and (is_start == True or is_start == False):
                    break_next = True

                if not only_seasons and (is_start == True or is_start == False):
                    break

    all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)
    if max_streak:
        if start_level == float("inf"):
            start_level = len(all_streak_counts) - 1
        elif start_level < 0:
            start_level = 0
        elif start_level >= len(all_streak_counts):
            start_level = len(all_streak_counts) - 1
        
        if end_level == float("inf"):
            end_level = len(all_streak_counts)
        elif end_level < 0:
            end_level = 0
        elif end_level >= len(all_streak_counts):
            end_level = len(all_streak_counts)
            
        our_keys = all_streak_counts[start_level:end_level]
    else:
        our_keys = all_streak_counts
    
    all_streaks = []
    match_count = 0
    for key in our_keys:
        for match in all_streak_obj[key]:
            team = None
            if "Games" in qual_type or qual_type == "Teams" or qual_type == "Opponents":
                dates = [row["Shared"]["Date"] for row in match]
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                date_start_link = None
                date_end_link = None
                for row in all_rows:
                    if row["Shared"]["Date"] == start_date:
                        date_start_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                    if row["Shared"]["Date"] == end_date:
                        date_end_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                    
                    if date_start_link and date_end_link:
                        break
                start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                end_date = "[" + str(end_date) + "](" + date_end_link + ")"

                if qual_type == "Teams":
                    team = match[0]["Shared"]["Tm"]
                elif qual_type == "Opponents":
                    team = match[0]["Shared"]["Opponent"]
            else:
                dates = set([row["Shared"]["Year"] for row in match])
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                if start_date in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + yearly_game_splits_url_format.format(player_data["id"].upper(), player_data["id"], str(start_date)) + ")"
                if end_date in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + yearly_game_splits_url_format.format(player_data["id"].upper(), player_data["id"], str(end_date)) + ")"
                
            all_streaks.append({
                "start_date" : start_date,
                "end_date" : end_date,
                "games" : match_count,
                "match" : match,
                "team" : team
            })
    
    if not max_streak:
        qual_type = "Streaks"
        match_count = len(all_streaks)
    
    all_streaks = sorted(all_streaks, key=lambda streak: (-streak["games"], streak["start_date"]))

    if max_streak:
        all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    if qual_type == "Teams" or qual_type == "Opponents":
        stat_objs[0]["explain_str"] += qual_type + "|"
    else:
        stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count) + "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            if stat["over_stat"]:
                stat_objs[0]["explain_str"] += stat["over_stat"].title() + ">"
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if not is_formula:
                if stat["start_val"] == stat["end_val"]:
                    stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
                else:
                    if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if only_seasons:
        stat_objs[0]["explain_str"] += "|Only Seasons"
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    if len(all_streaks) > 1 or qual_type == "Teams" or qual_type == "Opponents":
        for i in range(len(all_streaks)):
            streak = all_streaks[i]
            if i:
                stat_objs[0]["explain_str"] += " + "
            else:
                stat_objs[0]["explain_str"] += "|"
            if qual_type == "Teams" or qual_type == "Opponents":
                stat_objs[0]["explain_str"] += streak["team"].upper() + ": "
            if streak["start_date"] == streak["end_date"]:
                stat_objs[0]["explain_str"] += str(streak["start_date"])
            else:
                stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
                if not max_streak or qual_type == "Teams" or qual_type == "Opponents":
                    stat_objs[0]["explain_str"] += " (" + str(streak["games"]) + " Games)"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_objs[0]["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_objs[0]["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]

    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def handle_max_stretch_calc(new_rows, stat_objs, player_data, player_type, all_rows):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))

    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        prev_year = None
        break_next = False
        for i in range(len(all_rows)):
            row = all_rows[i]
            if prev_year != None and prev_year == row["Shared"]["Year"]:
                if break_next:
                    continue
            else:
                break_next = False
            prev_year = row["Shared"]["Year"]

            total_matching_rows = handle_stretch_game_rows(i, player_data, player_type, stat_objs, all_rows, only_seasons)
            for matching_rows in total_matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Date"] == old_row["Shared"]["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
            
            if not total_matching_rows and only_seasons and (is_start == True or is_start == False):
                break_next = True

            if not only_seasons and (is_start == True or is_start == False):
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        for i in range(len(seasons)):
            total_matching_rows = handle_stretch_season_rows(i, seasons, player_data, player_type, stat_objs, all_rows)
            for matching_rows in total_matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Year"] == old_row["Shared"]["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Shared"]["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    if matching_rows not in all_streak_obj[streak_length]:
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Shared"]["Year"] == old_row["Shared"]["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Shared"]["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    if matching_rows not in all_streak_obj[streak_length]:
                        all_streak_obj[streak_length].append(matching_rows)
            if is_start == True or is_start == False:
                break

    all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if start_level == float("inf"):
        start_level = len(all_streak_counts) - 1
    elif start_level < 0:
        start_level = 0
    elif start_level >= len(all_streak_counts):
        start_level = len(all_streak_counts) - 1
    
    if end_level == float("inf"):
        end_level = len(all_streak_counts)
    elif end_level < 0:
        end_level = 0
    elif end_level >= len(all_streak_counts):
        end_level = len(all_streak_counts)
        
    our_keys = all_streak_counts[start_level:end_level]

    all_streaks = []
    match_count = 0
    for key in our_keys:
        for match in all_streak_obj[key]:
            if "Games" in qual_type:
                dates = [row["Shared"]["Date"] for row in match]
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                date_start_link = None
                date_end_link = None
                for row in all_rows:
                    if row["Shared"]["Date"] == start_date:
                        date_start_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                    if row["Shared"]["Date"] == end_date:
                        date_end_link = "https://www.pro-football-reference.com" + row["Shared"]["GameLink"]
                    
                    if date_start_link and date_end_link:
                        break
                start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                end_date = "[" + str(end_date) + "](" + date_end_link + ")"
            else:
                dates = set([row["Shared"]["Year"] for row in match])
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                if start_date in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + yearly_game_splits_url_format.format(player_data["id"].upper(), player_data["id"], str(start_date)) + ")"
                if end_date in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + yearly_game_splits_url_format.format(player_data["id"].upper(), player_data["id"], str(end_date)) + ")"
                
            all_streaks.append({
                "start_date" : start_date,
                "end_date" : end_date,
                "games" : match_count,
                "match" : match
            })
        
    all_streaks = sorted(all_streaks, key=lambda streak: (-streak["games"], streak["start_date"]))

    all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count) + "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if stat["start_val"] == stat["end_val"]:
                stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
            else:
                if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                    stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if only_seasons:
        stat_objs[0]["explain_str"] += "|Only Seasons"
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    if len(all_streaks) > 1:
        for i in range(len(all_streaks)):
            streak = all_streaks[i]
            if i:
                stat_objs[0]["explain_str"] += " + "
            else:
                stat_objs[0]["explain_str"] += "|"
            if streak["start_date"] == streak["end_date"]:
                stat_objs[0]["explain_str"] += str(streak["start_date"])
            else:
                stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
                stat_objs[0]["explain_str"] += " (" + str(streak["games"]) + " Games)"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]
    
    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def handle_quick_long(all_rows, player_data, player_type, qualifiers):
    new_rows = []

    if "Quickest" in qualifiers:
        for qual_object in qualifiers["Quickest"]:
            handle_quick_long_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, True)
    
    if "Slowest" in qualifiers:
        for qual_object in qualifiers["Slowest"]:
            handle_quick_long_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, False)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_quick_long_calc(new_rows, stat_objs, player_data, player_type, all_rows, is_quickest):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))

    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        for season in seasons:
            matching_rows = handle_quickest_game_rows(season, player_data, player_type, stat_objs, all_rows, is_quickest)
            if matching_rows:
                if not stat_quals:
                    streak_length = len(matching_rows)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    streak_length = len(matching_rows)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
            if is_start == True or is_start == False:
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Shared"]["Year"] for row in all_rows])))
        matching_rows = handle_quickest_season_rows(seasons, player_data, player_type, stat_objs, all_rows)
        if matching_rows:
            if not stat_quals:
                dates = set([row["Shared"]["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
            elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                dates = set([row["Shared"]["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
    elif qual_type == "Total Games":
        matching_rows = handle_quickest_career_rows(player_data, player_type, stat_objs, all_rows)
        if matching_rows:
            if not stat_quals:
                dates = set([row["Shared"]["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
            elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                dates = set([row["Shared"]["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)

    if is_quickest:
        all_streak_counts = sorted(list(all_streak_obj.keys()))
    else:
        all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if start_level == float("inf"):
        start_level = len(all_streak_counts) - 1
    elif start_level < 0:
        start_level = 0
    elif start_level >= len(all_streak_counts):
        start_level = len(all_streak_counts) - 1
    
    if end_level == float("inf"):
        end_level = len(all_streak_counts)
    elif end_level < 0:
        end_level = 0
    elif end_level >= len(all_streak_counts):
        end_level = len(all_streak_counts)
        
    our_keys = all_streak_counts[start_level:end_level]

    all_streaks = []
    match_count = 0
    age = None
    for key in our_keys:
        for match in all_streak_obj[key]:
            dates = [row["Shared"]["Date"] for row in match]
            match_count = len(dates)
            if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
                dates = set([row["Shared"]["Year"] for row in match])
                start_date = min(dates)
                end_date = max(dates)

                if start_date in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + yearly_game_splits_url_format.format(player_data["id"].upper(), player_data["id"], str(start_date)) + ")"
                if end_date in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + yearly_game_splits_url_format.format(player_data["id"].upper(), player_data["id"], str(end_date)) + ")"

                all_streaks.append({
                    "start_date" : start_date,
                    "end_date" : end_date,
                    "match" : match
                })
            elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
                new_rows.extend(match)
                dates = set([row["Shared"]["Year"] for row in match])
                match_count = len(dates)
            elif qual_type == "Total Games":
                new_rows.extend(match)
                dates = set([row["Shared"]["Date"] for row in match])
                end_date = max(dates)
                age = dateutil.relativedelta.relativedelta(player_data["Birthday"], end_date)
    
    all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count)
    # if age:
    #     age_str = "|Age: "
    #     if age.years:
    #         age_str += str(age.years).replace("-", "") + "Y"
    #     if age.months:
    #         if age.years:
    #             age_str += "-"
    #         age_str += str(age.months).replace("-", "") + "M"
    #     if age.days:
    #         if age.years or age.months:
    #             age_str += "-"
    #         age_str += str(age.days).replace("-", "") + "D"

    #     stat_objs[0]["explain_str"] += age_str
    stat_objs[0]["explain_str"] += "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            if stat["over_stat"]:
                stat_objs[0]["explain_str"] += stat["over_stat"].title() + ">"
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if stat["start_val"] == stat["end_val"]:
                stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
            else:
                if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                    if stat["end_val"] == float("inf"):
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
                    else:
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    for i in range(len(all_streaks)):
        streak = all_streaks[i]
        if i:
            stat_objs[0]["explain_str"] += " + "
        else:
            stat_objs[0]["explain_str"] += "|"
        if streak["start_date"] == streak["end_date"]:
            stat_objs[0]["explain_str"] += str(streak["start_date"])
        else:
            stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_obj["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_obj["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]

    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
    stats = {}
    find_sub_stat_match(stat_quals, player_type, stats)
    row_lower = comb_rows(matching_rows, player_data, player_type, stats=stats)
    for qual_object in stat_quals:
        has_match = False
        over_stat = qual_object["over_stat"]
        stat = qual_object["stat"]

        if stat.startswith("season"):
            season_num = len(set([row["Shared"]["Year"] for row in matching_rows]))
            has_match = season_num >= qual_object["start_val"] and season_num <= qual_object["end_val"]
        else:
            if not over_stat:
                for sub_over_stat in row_lower:
                    over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                    if stat in over_row_lower:
                        over_stat = sub_over_stat
                        break
            
            if over_stat:
                if over_stat == "total":
                    over_stat = "era adjusted passing"
                elif over_stat == "scrimmage":
                    over_stat = "scrimmage/all purpose"

                if over_stat in row_lower:
                    over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                    if stat in over_row_lower:
                        has_match = over_row_lower[stat] >= qual_object["start_val"] and over_row_lower[stat] <= qual_object["end_val"]
                    elif over_stat == "passing":
                        over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                        if stat in over_row_lower:
                            has_match = over_row_lower[stat] >= qual_object["start_val"] and over_row_lower[stat] <= qual_object["end_val"]
                    elif over_stat == "rushing" and "passing" in row_lower:
                        over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                        if stat in over_row_lower:
                            has_match = over_row_lower[stat] >= qual_object["start_val"] and over_row_lower[stat] <= qual_object["end_val"]

        if not has_match:
            return False
    
    return True

def comb_rows(matching_rows, player_data, player_type, lower=True, stats=None):
    comb_row = {
        "Shared" : {}
    }
    for header in get_constant_data.stat_groups["Shared"]:
        if header != "Player":
            if not header in get_constant_data.formulas["Shared"]:
                comb_row["Shared"][header] = 0.0

    for over_header in headers[player_type["da_type"]]:
        if not over_header in comb_row:
            comb_row[over_header] = {}
        for header in get_constant_data.stat_groups[over_header]:
            if not header in get_constant_data.formulas[over_header] and not header in advanced_stats:
                comb_row[over_header][header] = 0.0

    date_start = 0
    date_end = 0
    year_start = 0
    year_end = 0
    is_playoffs = None
    for row_data in matching_rows:
        for over_header in row_data:
            if over_header in comb_row:
                for stat in row_data[over_header]:
                    if stat in comb_row[over_header] and isinstance(row_data[over_header][stat], numbers.Number) and isinstance(comb_row[over_header][stat], numbers.Number) and (not stat in get_constant_data.qualifier_map or stat == "Team Score" or stat == "Opponent Score") and not stat in get_constant_data.formulas[over_header] and not stat in advanced_stats and row_data[over_header][stat] != 0:
                        comb_row[over_header][stat] += row_data[over_header][stat]

                    if stat == "Date":
                        if date_start == 0 or row_data["Shared"][stat] < date_start:
                            date_start = row_data["Shared"][stat]
                        if date_end == 0 or row_data["Shared"][stat] > date_end:
                            date_end = row_data["Shared"][stat]
                    elif stat == "Year":
                        if year_start == 0 or row_data["Shared"][stat] < year_start:
                            year_start = row_data["Shared"][stat]
                        if year_end == 0 or row_data["Shared"][stat] > year_end:
                            year_end = row_data["Shared"][stat]
        
        if row_data["Shared"]["is_playoffs"]:
            if not is_playoffs or is_playoffs == "Only":
                is_playoffs = "Only"
            else:
                is_playoffs = "Include"
        else:
            if is_playoffs:
                is_playoffs = "Include"
    
    if date_start:
        comb_row["Shared"]["DateStart"] = [date_start]
    else:
        comb_row["Shared"]["DateStart"] = []
    if date_end:
        comb_row["Shared"]["DateEnd"] = [date_end]
    else:
        comb_row["Shared"]["DateEnd"] = []
    if year_start:
        comb_row["Shared"]["YearStart"] = [year_start]
    else:
        comb_row["Shared"]["YearStart"] = []
    if year_end:
        comb_row["Shared"]["YearEnd"] = [year_end]
    else:
        comb_row["Shared"]["YearEnd"] = []
    comb_row["Shared"]["is_playoffs"] = is_playoffs
    comb_row["Shared"]["all_rows"] = matching_rows

    if "Scrimmage/All Purpose" in headers[player_type["da_type"]] and (stats == None or "Scrimmage/All Purpose" in stats):
        touches = 0.0
        yds = 0.0
        tds = 0
        apyds = 0
        aptd = 0

        if "Rushing" in headers[player_type["da_type"]]:
            touches += comb_row["Rushing"]["Att"]
            yds += comb_row["Rushing"]["Yds"]
            tds += comb_row["Rushing"]["TD"]
            apyds += comb_row["Rushing"]["Yds"]
            aptd += comb_row["Rushing"]["TD"]
        if "Receiving" in headers[player_type["da_type"]]:
            touches += comb_row["Receiving"]["Rec"]
            yds += comb_row["Receiving"]["Yds"]
            tds += comb_row["Receiving"]["TD"]
            apyds += comb_row["Receiving"]["Yds"]
            aptd += comb_row["Receiving"]["TD"]
        if "Kick Returns" in headers[player_type["da_type"]]:
            apyds += comb_row["Kick Returns"]["Yds"]
            aptd += comb_row["Kick Returns"]["TD"]
        if "Punt Returns" in headers[player_type["da_type"]]:
            apyds += comb_row["Punt Returns"]["Yds"]
            aptd += comb_row["Punt Returns"]["TD"]
        if "Defense" in headers[player_type["da_type"]]:
            apyds += comb_row["Defense"]["FR Yds"]
            apyds += comb_row["Defense"]["Int Yds"]
            aptd += comb_row["Defense"]["FR TD"]
            aptd += comb_row["Defense"]["Int TD"]

        comb_row["Scrimmage/All Purpose"]["Touch"] = touches
        comb_row["Scrimmage/All Purpose"]["Yds"] = yds
        comb_row["Scrimmage/All Purpose"]["TD"] = tds
        comb_row["Scrimmage/All Purpose"]["APYds"] = apyds
        comb_row["Scrimmage/All Purpose"]["APTD"] = aptd

    if stats == None or "Shared" in stats:
        for stat in stats["Shared"]:
            if stats == None or set(stats["Shared"]).intersection(get_constant_data.formulas["Shared"].keys()):
                if stat in get_constant_data.formulas["Shared"]:
                    calculate_recursive_formula("Shared", stat, player_data, player_type, comb_row, matching_rows)
    for over_header in headers[player_type["da_type"]]:
        if stats == None or over_header in stats:
            if stats == None or set(stats[over_header]).intersection(get_constant_data.formulas[over_header].keys()):
                for stat in stats[over_header]:
                    if stat in get_constant_data.formulas[over_header]:
                        calculate_recursive_formula(over_header, stat, player_data, player_type, comb_row, matching_rows)

    if "Fantasy" in comb_row:
        for stat in list(comb_row["Fantasy"]):
            per_game_val = 0
            try:
                per_game_val = comb_row["Fantasy"][stat] / comb_row["Shared"]["G"]
            except ZeroDivisionError:
                pass

            comb_row["Fantasy"][stat + "/G"] = per_game_val
            comb_row["Fantasy"][stat + "/17G"] = per_game_val * 17

            all_vals = []
            for row in matching_rows:
                if "Fantasy" in row and stat in row["Fantasy"]:
                    all_vals.append(row["Fantasy"][stat])

            if all_vals:
                comb_row["Fantasy"][stat + " Median"] = statistics.median(all_vals)
                comb_row["Fantasy"][stat + " High"] = max(all_vals)
                comb_row["Fantasy"][stat + " Low"] = min(all_vals)

                variance = 0.0
                if len(all_vals) > 1:
                    try:
                        variance = statistics.stdev(all_vals) / per_game_val
                    except ZeroDivisionError:
                        pass
                comb_row["Fantasy"][stat + " Variance"] = variance


    if stats == None or ("Era Adjusted Passing" in stats and set(stats["Era Adjusted Passing"]).intersection(advanced_stats)):
        calculate_advanced_stats(comb_row, matching_rows, player_data, player_type)

    headers_to_remove = {}
    for over_header in comb_row:
        for header in comb_row[over_header]:
            if header in get_constant_data.stat_groups[over_header]:
                if get_constant_data.is_invalid_stat(over_header, header, comb_row, False):
                    if over_header not in headers_to_remove:
                        headers_to_remove[over_header] = set()
                    headers_to_remove[over_header].add(header)

    for over_header in headers_to_remove:
        for key in headers_to_remove[over_header]:
            del comb_row[over_header][key]

    if lower:
        return {key.lower(): value for key, value in comb_row.items()}
    else:
        return comb_row

def calculate_recursive_formula(over_header, stat, player_data, player_type, comb_row, matching_rows):
    formula = get_constant_data.formulas[over_header][stat]
    formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula.lower()))
    for header_stat in get_constant_data.formulas[over_header]:
        if header_stat == stat:
            break
        has_match = False
        for formula_match in formula_matches:
            if formula_match.group() == header_stat.lower():
                has_match = True
                break
        if has_match:
            calculate_recursive_formula(over_header, header_stat, player_data, player_type, comb_row, matching_rows)
    comb_row[over_header][stat] = get_constant_data.calculate_formula(stat, formula, comb_row, over_header, headers, player_data, player_type, matching_rows)

def handle_date_rows(player_data, player_type, stat, the_over_stat, start_date, date_diff, all_rows):
    stat_value = 0
    matching_rows = []
    over_stat = the_over_stat
    end_date = start_date + date_diff
    for row in all_rows:
        if row["Shared"]["Date"] >= start_date and row["Shared"]["Date"] < end_date:
            matching_rows.append(row)

    stats = {}
    find_sub_sub_stat_match(over_stat, stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

    if not the_over_stat:
        for sub_over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
            if stat in over_row_lower:
                over_stat = sub_over_stat
                break

    if over_stat:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        if over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
            if stat not in over_row_lower:
                if over_stat == "passing":
                    over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "era adjusted passing"
                elif over_stat == "rushing" and "passing" in combined_row:
                    over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "passing"

    if over_stat in combined_row:
        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
        if stat in over_row_lower:
            stat_value = over_row_lower[stat]
        else:
            matching_rows = []
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_week_rows(player_data, player_type, stat, the_over_stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    over_stat = the_over_stat
    for row in all_rows:
        if row["Shared"]["Date"].year == date.year and row["Shared"]["Date"].isocalendar()[1] == date.isocalendar()[1]:
            matching_rows.append(row)

    stats = {}
    find_sub_sub_stat_match(over_stat, stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

    if not the_over_stat:
        for sub_over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
            if stat in over_row_lower:
                over_stat = sub_over_stat
                break

    if over_stat:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        if over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
            if stat not in over_row_lower:
                if over_stat == "passing":
                    over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "era adjusted passing"
                elif over_stat == "rushing" and "passing" in combined_row:
                    over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "passing"

    if over_stat in combined_row:
        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
        if stat in over_row_lower:
            stat_value = over_row_lower[stat]
        else:
            matching_rows = []
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_month_rows(player_data, player_type, stat, the_over_stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    over_stat = the_over_stat
    for row in all_rows:
        if row["Shared"]["Date"].year == date.year and row["Shared"]["Date"].month == date.month:
            matching_rows.append(row)

    stats = {}
    find_sub_sub_stat_match(over_stat, stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

    if not the_over_stat:
        for sub_over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
            if stat in over_row_lower:
                over_stat = sub_over_stat
                break

    if over_stat:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        if over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
            if stat not in over_row_lower:
                if over_stat == "passing":
                    over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "era adjusted passing"
                elif over_stat == "rushing" and "passing" in combined_row:
                    over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "passing"

    if over_stat in combined_row:
        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
        if stat in over_row_lower:
            stat_value = over_row_lower[stat]
        else:
            matching_rows = []
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_year_rows(player_data, player_type, stat, the_over_stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    over_stat = the_over_stat
    for row in all_rows:
        if row["Shared"]["Date"].year == date.year:
            matching_rows.append(row)

    stats = {}
    find_sub_sub_stat_match(over_stat, stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

    if not the_over_stat:
        for sub_over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
            if stat in over_row_lower:
                over_stat = sub_over_stat
                break

    if over_stat:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        if over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
            if stat not in over_row_lower:
                if over_stat == "passing":
                    over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "era adjusted passing"
                elif over_stat == "rushing" and "passing" in combined_row:
                    over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "passing"

    if over_stat in combined_row:
        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
        if stat in over_row_lower:
            stat_value = over_row_lower[stat]
        else:
            matching_rows = []
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_game_rows(start_index, player_data, player_type, stat, the_over_stat, num_games, all_rows, only_seasons):
    stat_value = 0
    matching_rows = []
    over_stat = the_over_stat
    prev_year = None
    for i in range(start_index, start_index + num_games):
        if i >= len(all_rows):
            return 0, []
        
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Shared"]["Year"]:
            return 0, []
        prev_year = row["Shared"]["Year"]

        matching_rows.append(row)

    stats = {}
    find_sub_sub_stat_match(over_stat, stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

    if not the_over_stat:
        for sub_over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
            if stat in over_row_lower:
                over_stat = sub_over_stat
                break

    if over_stat:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        if over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
            if stat not in over_row_lower:
                if over_stat == "passing":
                    over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "era adjusted passing"
                elif over_stat == "rushing" and "passing" in combined_row:
                    over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "passing"

    if over_stat in combined_row:
        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
        if stat in over_row_lower:
            stat_value = over_row_lower[stat]
        else:
            matching_rows = []
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_streak_game_rows(start_index, player_data, player_type, over_stat_objs, all_rows, only_seasons, is_formula):
    matching_rows = []
    prev_year = None
    stats = {}
    if not is_formula:
        find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(all_rows)):      
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Shared"]["Year"]:
            break
        prev_year = row["Shared"]["Year"]

        if is_formula:
            row_normal = fill_row(row, player_data, player_type, lower=False)
        else:
            row_lower = fill_row(row, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                the_over_stat = stat_obj["over_stat"]
                over_stat = the_over_stat
                stat = stat_obj["stat"]
                if is_formula:
                    try:
                        if not bool(get_constant_data.calculate_formula("custom_formula", stat, row_normal, None, headers, player_data, player_type, all_rows, safe_eval=True)):
                            all_passed = False
                            break
                    except Exception:
                        all_passed = False
                else:
                    if not the_over_stat:
                        for sub_over_stat in row_lower:
                            over_row_lower = {key.lower(): value for key, value in row_lower[sub_over_stat].items()}
                            if stat in over_row_lower:
                                over_stat = sub_over_stat
                                break

                    if over_stat:
                        if over_stat == "total":
                            over_stat = "era adjusted passing"
                        elif over_stat == "scrimmage":
                            over_stat = "scrimmage/all purpose"

                        if over_stat in row_lower:
                            over_row_lower = {key.lower(): value for key, value in row_lower[over_stat].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            elif over_stat == "passing":
                                over_row_lower = {key.lower(): value for key, value in row_lower["era adjusted passing"].items()}
                                if stat in over_row_lower:
                                    if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                        all_passed = False
                                        break
                                else:
                                    all_passed = False
                                    break
                            elif over_stat == "rushing" and "passing" in row_lower:
                                over_row_lower = {key.lower(): value for key, value in row_lower["passing"].items()}
                                if stat in over_row_lower:
                                    if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                        all_passed = False
                                        break
                                else:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        else:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break

            if all_passed:
                any_passed = True
                break
        if any_passed:
            matching_rows.append(row)
        else:
            break
    return matching_rows

def handle_stretch_game_rows(start_index, player_data, player_type, over_stat_objs, all_rows, only_seasons):
    total_matching_rows = []

    matching_rows = []
    prev_year = None
    stats = {}
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(all_rows)):
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Shared"]["Year"]:
            break
        prev_year = row["Shared"]["Year"]
        
        matching_rows.append(row)
        combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                the_over_stat = stat_obj["over_stat"]
                stat = stat_obj["stat"]
                if not the_over_stat:
                    for sub_over_stat in combined_row:
                        over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in combined_row:
                        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
                        if stat in over_row_lower:
                            if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                all_passed = False
                                break
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        elif over_stat == "rushing" and "passing" in combined_row:
                            over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        else:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break
            if all_passed:
                any_passed = True
                break

        if any_passed:
            row_copy = []
            for row in matching_rows:
                row_copy.append(row)
            total_matching_rows.append(row_copy)

    return total_matching_rows

def handle_quickest_game_rows(season, player_data, player_type, over_stat_objs, all_rows, is_quickest):
    matching_rows = []

    stats = {}
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for row in all_rows:
        year = row["Shared"]["Year"]
        if year == season:
            matching_rows.append(row)
            combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
            any_passed = False
            for over_stat_obj in over_stat_objs:
                all_passed = True
                for stat_obj in over_stat_obj["stats"]:
                    the_over_stat = stat_obj["over_stat"]
                    over_stat = the_over_stat
                    stat = stat_obj["stat"]
                    if not the_over_stat:
                        for sub_over_stat in combined_row:
                            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
                            if stat in over_row_lower:
                                over_stat = sub_over_stat
                                break

                    if over_stat:
                        if over_stat == "total":
                            over_stat = "era adjusted passing"
                        elif over_stat == "scrimmage":
                            over_stat = "scrimmage/all purpose"

                        if over_stat in combined_row:
                            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            elif over_stat == "passing":
                                over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                                if stat in over_row_lower:
                                    if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                        all_passed = False
                                        break
                                else:
                                    all_passed = False
                                    break
                            elif over_stat == "rushing" and "passing" in combined_row:
                                over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                                if stat in over_row_lower:
                                    if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                        all_passed = False
                                        break
                                else:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        else:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break

                if all_passed:
                    any_passed = True
                    break
            if any_passed:
                return matching_rows

    if is_quickest:
        return None
    else:
        return matching_rows

def handle_season_rows(start_season, end_season, player_data, player_type, stat, the_over_stat, all_rows):
    stat_value = 0
    matching_rows = []
    over_stat = the_over_stat
    for row in all_rows:
        if row["Shared"]["Year"] >= start_season and row["Shared"]["Year"] < end_season:
            matching_rows.append(row)
            
    stats = {}
    find_sub_sub_stat_match(over_stat, stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

    if not the_over_stat:
        for sub_over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
            if stat in over_row_lower:
                over_stat = sub_over_stat
                break

    if over_stat:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        if over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
            if stat not in over_row_lower:
                if over_stat == "passing":
                    over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "era adjusted passing"
                elif over_stat == "rushing" and "passing" in combined_row:
                    over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "passing"

    if over_stat in combined_row:
        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
        if stat in over_row_lower:
            stat_value = over_row_lower[stat]
        else:
            matching_rows = []
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_streak_season_rows(start_index, seasons, player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = {}
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(seasons)):
        season = seasons[i]
        season_matching_rows = []
        for row in all_rows:
            year = row["Shared"]["Year"]
            if year == season:
                season_matching_rows.append(row)
        season_combined_row = comb_rows(season_matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                the_over_stat = stat_obj["over_stat"]
                over_stat = the_over_stat
                stat = stat_obj["stat"]
                if not the_over_stat:
                    for sub_over_stat in season_combined_row:
                        over_row_lower = {key.lower(): value for key, value in season_combined_row[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in season_combined_row:
                        over_row_lower = {key.lower(): value for key, value in season_combined_row[over_stat].items()}
                        if stat in over_row_lower:
                            if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                all_passed = False
                                break
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in season_combined_row["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        elif over_stat == "rushing" and "passing" in season_combined_row:
                            over_row_lower = {key.lower(): value for key, value in season_combined_row["passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        else:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break

            if all_passed:
                any_passed = True
                break
        if any_passed:
            matching_rows.extend(season_matching_rows)
        else:
            break
    return matching_rows

def handle_stretch_season_rows(start_index, seasons, player_data, player_type, over_stat_objs, all_rows):
    total_matching_rows = []

    matching_rows = []
    stats = {}
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(seasons)):
        season = seasons[i]
        for row in all_rows:
            year = row["Shared"]["Year"]
            if year == season:
                matching_rows.append(row)
        combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                the_over_stat = stat_obj["over_stat"]
                stat = stat_obj["stat"]
                if not the_over_stat:
                    for sub_over_stat in combined_row:
                        over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in combined_row:
                        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
                        if stat in over_row_lower:
                            if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                all_passed = False
                                break
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        elif over_stat == "rushing" and "passing" in combined_row:
                            over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        else:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break
            if all_passed:
                any_passed = True
                break

        if any_passed:
            row_copy = []
            for row in matching_rows:
                row_copy.append(row)
            total_matching_rows.append(row_copy)

    return total_matching_rows

def handle_quickest_season_rows(seasons, player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = {}
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for season in seasons:
        for row in all_rows:
            year = row["Shared"]["Year"]
            if year == season:
                matching_rows.append(row)
        season_combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                the_over_stat = stat_obj["over_stat"]
                over_stat = the_over_stat
                stat = stat_obj["stat"]
                if not the_over_stat:
                    for sub_over_stat in season_combined_row:
                        over_row_lower = {key.lower(): value for key, value in season_combined_row[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in season_combined_row:
                        over_row_lower = {key.lower(): value for key, value in season_combined_row[over_stat].items()}
                        if stat in over_row_lower:
                            if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                all_passed = False
                                break
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in season_combined_row["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        elif over_stat == "rushing" and "passing" in season_combined_row:
                            over_row_lower = {key.lower(): value for key, value in season_combined_row["passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        else:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break

            if all_passed:
                any_passed = True
                break
        if any_passed:
            return matching_rows

    return None

def handle_quickest_career_rows(player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = {}
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for row in all_rows:
        matching_rows.append(row)
        comb_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                the_over_stat = stat_obj["over_stat"]
                over_stat = the_over_stat
                stat = stat_obj["stat"]
                if not the_over_stat:
                    for sub_over_stat in comb_row:
                        over_row_lower = {key.lower(): value for key, value in comb_row[sub_over_stat].items()}
                        if stat in over_row_lower:
                            over_stat = sub_over_stat
                            break

                if over_stat:
                    if over_stat == "total":
                        over_stat = "era adjusted passing"
                    elif over_stat == "scrimmage":
                        over_stat = "scrimmage/all purpose"

                    if over_stat in comb_row:
                        over_row_lower = {key.lower(): value for key, value in comb_row[over_stat].items()}
                        if stat in over_row_lower:
                            if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                all_passed = False
                                break
                        elif over_stat == "passing":
                            over_row_lower = {key.lower(): value for key, value in comb_row["era adjusted passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        elif over_stat == "rushing" and "passing" in comb_row:
                            over_row_lower = {key.lower(): value for key, value in comb_row["passing"].items()}
                            if stat in over_row_lower:
                                if over_row_lower[stat] < stat_obj["start_val"] or over_row_lower[stat] > stat_obj["end_val"]:
                                    all_passed = False
                                    break
                            else:
                                all_passed = False
                                break
                        else:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break

            if all_passed:
                any_passed = True
                break
        if any_passed:
            return matching_rows

    return None

def handle_team_rows(team, row_stat, player_data, player_type, stat, the_over_stat, all_rows):
    stat_value = 0
    matching_rows = []
    over_stat = the_over_stat
    for row in all_rows:
        row_team = row["Shared"][row_stat]
        if team == row_team:
            matching_rows.append(row)

    stats = {}
    find_sub_sub_stat_match(over_stat, stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

    if not the_over_stat:
        for sub_over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[sub_over_stat].items()}
            if stat in over_row_lower:
                over_stat = sub_over_stat
                break

    if over_stat:
        if over_stat == "total":
            over_stat = "era adjusted passing"
        elif over_stat == "scrimmage":
            over_stat = "scrimmage/all purpose"

        if over_stat in combined_row:
            over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
            if stat not in over_row_lower:
                if over_stat == "passing":
                    over_row_lower = {key.lower(): value for key, value in combined_row["era adjusted passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "era adjusted passing"
                elif over_stat == "rushing" and "passing" in combined_row:
                    over_row_lower = {key.lower(): value for key, value in combined_row["passing"].items()}
                    if stat in over_row_lower:
                        over_stat = "passing"

    if over_stat in combined_row:
        over_row_lower = {key.lower(): value for key, value in combined_row[over_stat].items()}
        if stat in over_row_lower:
            stat_value = over_row_lower[stat]
        else:
            matching_rows = []
    else:
        matching_rows = []

    return stat_value, matching_rows

def fill_row(row, player_data, player_type, lower=True, stats=None):
    for header in get_constant_data.stat_groups["Shared"]:
        if header != "Player" and header not in row["Shared"]:
            if not header in get_constant_data.formulas["Shared"]:
                row["Shared"][header] = 0.0

    for over_header in headers[player_type["da_type"]]:
        if over_header != "Fantasy":
            if not over_header in row:
                row[over_header] = {}
            for header in get_constant_data.stat_groups[over_header]:
                if header not in row[over_header]:
                    if not header in get_constant_data.formulas[over_header] and not header in advanced_stats:
                        row[over_header][header] = 0.0

    if "Scrimmage/All Purpose" in headers[player_type["da_type"]] and (stats == None or "Scrimmage/All Purpose" in stats):
        touches = 0.0
        yds = 0.0
        tds = 0
        apyds = 0
        aptd = 0

        if "Rushing" in headers[player_type["da_type"]]:
            touches += row["Rushing"]["Att"]
            yds += row["Rushing"]["Yds"]
            tds += row["Rushing"]["TD"]
            apyds += row["Rushing"]["Yds"]
            aptd += row["Rushing"]["TD"]
        if "Receiving" in headers[player_type["da_type"]]:
            touches += row["Receiving"]["Rec"]
            yds += row["Receiving"]["Yds"]
            tds += row["Receiving"]["TD"]
            apyds += row["Receiving"]["Yds"]
            aptd += row["Receiving"]["TD"]
        if "Kick Returns" in headers[player_type["da_type"]]:
            apyds += row["Kick Returns"]["Yds"]
            aptd += row["Kick Returns"]["TD"]
        if "Punt Returns" in headers[player_type["da_type"]]:
            apyds += row["Punt Returns"]["Yds"]
            aptd += row["Punt Returns"]["TD"]
        if "Defense" in headers[player_type["da_type"]]:
            apyds += row["Defense"]["FR Yds"]
            apyds += row["Defense"]["Int Yds"]
            aptd += row["Defense"]["FR TD"]
            aptd += row["Defense"]["Int TD"]

        row["Scrimmage/All Purpose"]["Touch"] = touches
        row["Scrimmage/All Purpose"]["Yds"] = yds
        row["Scrimmage/All Purpose"]["TD"] = tds
        row["Scrimmage/All Purpose"]["APYds"] = apyds
        row["Scrimmage/All Purpose"]["APTD"] = aptd
    
    if stats == None or "Shared" in stats:
        if stats == None or set(stats["Shared"]).intersection(get_constant_data.formulas["Shared"].keys()):
            for stat in stats["Shared"]:
                if stat in get_constant_data.formulas["Shared"]:
                    calculate_recursive_formula("Shared", stat, player_data, player_type, row, None)
    for over_header in headers[player_type["da_type"]]:
        if stats == None or over_header in stats:
            if stats == None or set(stats[over_header]).intersection(get_constant_data.formulas[over_header].keys()):
                for stat in stats[over_header]:
                    if stat in get_constant_data.formulas[over_header]:
                        calculate_recursive_formula(over_header, stat, player_data, player_type, row, None)

    if "Fantasy" in row and "STD/G" not in row["Fantasy"]:
        for fantasy_stat in list(row["Fantasy"]):
            if not fantasy_stat.endswith("G"):
                per_game_val = 0
                try:
                    per_game_val = row["Fantasy"][fantasy_stat] / row["Shared"]["G"]
                except ZeroDivisionError:
                    pass

                row["Fantasy"][fantasy_stat + "/G"] = per_game_val
                row["Fantasy"][fantasy_stat + "/17G"] = per_game_val * 17
    
    if stats == None or ("Era Adjusted Passing" in stats and set(stats["Era Adjusted Passing"]).intersection(advanced_stats)):
        missing_advanced = False
        if "Era Adjusted Passing" in row:
            for advanced_stat in advanced_stats:
                if not advanced_stat in row["Era Adjusted Passing"]:
                    missing_advanced = True
                    break

        if missing_advanced:
            calculate_advanced_stats(row, [row], player_data, player_type)

    row["Shared"]["DateStart"] = [row["Shared"]["Date"]]
    row["Shared"]["YearStart"] = [row["Shared"]["Year"]]

    prev_is_playofs = row["Shared"]["is_playoffs"]
    if row["Shared"]["is_playoffs"]:
        row["Shared"]["is_playoffs"] = "Only"
    else:
        row["Shared"]["is_playoffs"] = None

    headers_to_remove = {}
    for over_header in row:
        for header in row[over_header]:
            if header in get_constant_data.stat_groups[over_header]:
                if get_constant_data.is_invalid_stat(over_header, header, row, False):
                    if over_header not in headers_to_remove:
                        headers_to_remove[over_header] = set()
                    headers_to_remove[over_header].add(header)
    
    for over_header in headers_to_remove:
        for key in headers_to_remove[over_header]:
            del row[over_header][key]

    row["Shared"]["is_playoffs"] = prev_is_playofs

    if lower:
        return {key.lower(): value for key, value in row.items()}
    else:
        return row

def get_valid_years(player_page):
    total_valid_years = set()
    reg_valid_years = set()
    game_valid_years = set()
    valid_teams_key = {}
    valid_teams_raw_key = {}
    valid_year_teams = {}

    table_names = ["passing", "receiving_and_rushing", "rushing_and_receiving", "scoring", "defense", "kicking", "returns", "snap_counts", "games_played", "passing_playoffs", "receiving_and_rushing_playoffs", "rushing_and_receiving_playoffs", "scoring_playoffs", "defense_playoffs", "kicking_playoffs", "returns_playoffs", "snap_counts_playoffs", "games_played_playoffs"]
    comments = None
    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find("tbody").find_all("tr")
            for row in standard_table_rows:
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                    if not match and row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                        match = True
                if match:
                    row_team = row.find("td", {"data-stat" : "team"}).find("a")
                    if row_team:
                        year_row = row.find("th")
                        year_str = year_row.find(text=True)
                        if year_str:
                            season_year = re.sub("[^0-9]", "", str(year_str).split("-")[0])
                            if season_year:
                                season_year = int(season_year)
                            else:
                                season_year_str = year_row.get("csk", None)
                                if season_year_str:
                                    season_year = int(season_year_str.split(".")[0])
                                else:
                                    season_year = int(year_row.find("a").get("href").split("/")[2])
                        else:
                            season_year_str = year_row.get("csk", None)
                            if season_year_str:
                                season_year = int(season_year_str.split(".")[0])
                            else:
                                season_year = int(year_row.find("a").get("href").split("/")[2])
                        
                        total_valid_years.add(season_year)
                        if not table_name.endswith("_playoffs"):
                            reg_valid_years.add(season_year)

                        row_abbr = str(row_team.find(text=True)).upper()
                        if row_abbr not in valid_teams_key:
                            valid_teams_key[row_abbr] = set()
                        valid_teams_key[row_abbr].add(season_year)

                        if row.find("td", {"data-stat" : "g"}) and row.find("td", {"data-stat" : "g"}).find(text=True) and int(row.find("td", {"data-stat" : "g"}).find(text=True)):
                            raw_row_abbr = row_team["href"].split("/")[2].upper()
                            if raw_row_abbr not in valid_teams_raw_key:
                                valid_teams_raw_key[raw_row_abbr] = set()
                            valid_teams_raw_key[raw_row_abbr].add(season_year)

                        if not season_year in valid_year_teams:
                            valid_year_teams[season_year] = []
                        if not row_abbr in valid_year_teams[season_year]:
                            valid_year_teams[season_year].append(row_abbr)

    bottom_nav_container = player_page.find("div", id="bottom_nav_container")
    if bottom_nav_container:
        element_name = "Game Logs"
        bottom_nav_element = bottom_nav_container.find("p", text=element_name)
        if bottom_nav_element:
            bottom_nav_sibling = bottom_nav_element.find_next_sibling()
            if bottom_nav_sibling:
                year_elements = bottom_nav_element.find_next_sibling().find_all("a")
                for year_element in year_elements:
                    row_year = str(year_element.find(text=True))
                    if row_year != "Career" and row_year != "Postseason" and row_year != "Player Game Finder":
                        row_year = int(row_year)
                        game_valid_years.add(row_year)

    total_valid_years = list(total_valid_years)
    reg_valid_years = list(reg_valid_years)
    game_valid_years = list(game_valid_years)

    total_valid_years.sort()
    reg_valid_years.sort()
    game_valid_years.sort()

    return total_valid_years, reg_valid_years, game_valid_years, valid_teams_key, valid_teams_raw_key, valid_year_teams

def add_valid_playoff_years(valid_years, playoff_data, time_frame):
    if time_frame["playoffs"] == "Only":
        valid_years = []
        
    for data in playoff_data:
        year = data["Shared"]["Year"]
        if not year in valid_years:
            valid_years.append(year)
    
    return sorted(valid_years)

def determine_rookie_years(player_page, rookie_quals):
    rookie_years_tot = []

    table_names = ["passing", "receiving_and_rushing", "rushing_and_receiving", "scoring", "defense", "kicking", "returns", "snap_counts", "games_played"]

    comments = None
    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            rookie_years = []
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True
                if match:
                    year_row = row.find("th")
                    year_str = year_row.find(text=True)
                    if year_str:
                        year = re.sub("[^0-9]", "", str(year_str).split("-")[0])
                        if year:
                            year = int(year)
                        else:
                            season_year_str = year_row.get("csk", None)
                            if season_year_str:
                                year = int(season_year_str.split(".")[0])
                            else:
                                year = int(year_row.find("a").get("href").split("/")[2])
                    else:
                        season_year_str = year_row.get("csk", None)
                        if season_year_str:
                            year = int(season_year_str.split(".")[0])
                        else:
                            year = int(year_row.find("a").get("href").split("/")[2])

                    row_games = row.find("td", {"data-stat" : "g"})
                    if row_games and row_games.find(text=True) and int(str(row_games.find(text=True))) > 0:
                        if not rookie_years:
                            rookie_years.append(year)
                    else:    
                        if year not in rookie_years:
                            rookie_years.append(year)
            rookie_years_tot = list(set().union(rookie_years_tot, rookie_years))

    for qual_obj in rookie_quals:
        if rookie_years_tot:
            qual_obj["values"] = [min(rookie_years_tot)]
        else:
            qual_obj["values"] = []

def calculate_advanced_stats(data, all_rows, player_data, player_type):
    if "Era Adjusted Passing" in data:
        adv_weights = {}

        for adj_stat in get_constant_data.stat_groups["Era Adjusted Passing"]:
            for row_data in all_rows:
                if "Passing" in row_data and "Att" in row_data["Passing"] and row_data["Passing"]["Att"] > 0:
                    if not get_constant_data.is_invalid_year_stat("Era Adjusted Passing", adj_stat, row_data, False, row_data["Shared"]["Date"], row_data["Shared"]["Year"]):
                        year = row_data["Shared"]["Year"]
                        if year < 1936:
                            continue
                        year = str(year)

                        if not adj_stat in adv_weights:
                            adv_weights[adj_stat] = {
                                "Att" : 0,
                                "Sk" : 0
                            }

                        adv_weights[adj_stat]["Att"] += row_data["Passing"].get("Att", 0)
                        adv_weights[adj_stat]["Sk"] += row_data["Passing"].get("Sk", 0)
        
        player_passing_totals_by_year = {}

        for adj_stat in get_constant_data.stat_groups["Era Adjusted Passing"]:
            for row_data in all_rows:
                if "Passing" in row_data and "Att" in row_data["Passing"] and row_data["Passing"]["Att"] > 0:
                    if not get_constant_data.is_invalid_year_stat("Era Adjusted Passing", adj_stat, row_data, False, row_data["Shared"]["Date"], row_data["Shared"]["Year"]):
                        year = row_data["Shared"]["Year"]
                        if year < 1936:
                            continue
                        year = str(year)

                        if not year in player_passing_totals_by_year:
                            player_passing_totals_by_year[year] = {}
                        if not adj_stat in player_passing_totals_by_year[year]:
                            player_passing_totals_by_year[year][adj_stat] = {
                                "Passing" : {
                                    "G" : 0,
                                    "Att" : 0,
                                    "Cmp" : 0,
                                    "Yds" : 0,
                                    "TD" : 0,
                                    "Int" : 0,
                                    "Sk" : 0,
                                    "SkYds" : 0
                                }
                            }

                        player_passing_totals_by_year[year][adj_stat]["Passing"]["G"] += row_data["Shared"]["G"]
                        player_passing_totals_by_year[year][adj_stat]["Passing"]["Att"] += row_data["Passing"]["Att"]
                        player_passing_totals_by_year[year][adj_stat]["Passing"]["Cmp"] += row_data["Passing"].get("Cmp", 0)
                        player_passing_totals_by_year[year][adj_stat]["Passing"]["Yds"] += row_data["Passing"].get("Yds", 0)
                        player_passing_totals_by_year[year][adj_stat]["Passing"]["TD"] += row_data["Passing"].get("TD", 0)
                        player_passing_totals_by_year[year][adj_stat]["Passing"]["Int"] += row_data["Passing"].get("Int", 0)
                        player_passing_totals_by_year[year][adj_stat]["Passing"]["Sk"] += row_data["Passing"].get("Sk", 0)
                        player_passing_totals_by_year[year][adj_stat]["Passing"]["SkYds"] += row_data["Passing"].get("SkYds", 0)

        for year in player_passing_totals_by_year:
            for adj_stat in player_passing_totals_by_year[year]:
                if adj_stat.endswith("+"):
                    player_passing_totals = player_passing_totals_by_year[year][adj_stat]
                    
                    stat = adj_stat[:-1]
                    total_plus_value = 0.0

                    total_plus_weight = None
                    ind_plus_weight = None
                    if stat == "NY/A" or stat == "ANY/A" or stat == "Sk%":
                        total_plus_weight = adv_weights[adj_stat]["Att"] + adv_weights[adj_stat]["Sk"]
                        ind_plus_weight = player_passing_totals["Passing"]["Att"] + player_passing_totals["Passing"]["Sk"]
                    else:
                        total_plus_weight = adv_weights[adj_stat]["Att"]
                        ind_plus_weight = player_passing_totals["Passing"]["Att"]
    
                    try:
                        player_val = get_constant_data.calculate_formula(stat, get_constant_data.formulas["Passing"][stat], player_passing_totals, "Passing", headers, player_data, player_type, None)

                        if get_constant_data.stat_groups["Passing"][stat]["positive"]:
                            diff = player_val - totals[year][stat]
                        else:
                            diff = totals[year][stat] - player_val

                        std_dev_away = diff / totals[year]["std_" + stat]
                        plus_value = (std_dev_away * 15) + 100

                        total_plus_value += plus_value * (ind_plus_weight / total_plus_weight)
                    except ZeroDivisionError:
                        pass

                    if not adj_stat in data["Era Adjusted Passing"]:
                        data["Era Adjusted Passing"][adj_stat] = 0.0
                    data["Era Adjusted Passing"][adj_stat] += total_plus_value

def get_player_type(player_page):
    player_info = player_page.find("div", {"id" : "meta"})
    player_type_el = player_info.find("strong", text="Position").parent
    player_types = re.split('-|,', player_type_el.contents[2].strip()[1:].strip()) 
    player_type = player_types[0].strip().upper()
    if not player_type in headers:
        return "PEN"
    return player_type

def get_player_position(player_page):
    player_info = player_page.find("div", {"id" : "meta"})
    player_type_el = player_info.find("strong", text="Position").parent
    player_types =  re.split('-|,', player_type_el.contents[2].strip()[1:].strip()) 
    return player_types[0].strip().upper()

def get_player_name(player_page):
    player_info = player_page.find("div", {"id" : "meta"})
    player_name_el = player_info.find("h1")
    return str(player_name_el.text).strip()

def get_college_draft_info(player_page):
    player_info = player_page.find("div", {"id" : "meta"})
    college_el = player_info.find("strong", text="Draft:")
    if college_el:
        match = re.search(r"(\d+).+ round, (\d+).+ overall of the (\d{4}) NFL draft", college_el.parent.text)
        return {
            "round" : int(match.group(1)),
            "pick" : int(match.group(2)),
            "year" : int(match.group(3))
        }

    return None

def get_pro_draft_info(player_page):
    player_info = player_page.find("div", {"id" : "meta"})
    college_el = player_info.find("strong", text="Draft")
    if college_el:
        match = re.search(r"in the (\d+).+ round \((\d+).+ overall\) of the (\d{4}) NFL Draft\.", college_el.parent.text)
        return {
            "round" : int(match.group(1)),
            "pick" : int(match.group(2)),
            "year" : int(match.group(3))
        }

    return None

def get_last_updated(player_page):
    social_info = player_page.find("div", {"id" : "social"})
    site_last_updated_el = social_info.find("strong", text="Site Last Updated:")
    date = dateutil.parser.parse(site_last_updated_el.parent.contents[1])
    localtz = timezone("US/Eastern")
    return localtz.localize(date)

def get_player_birthday(player_page):
    birthday_span = player_page.find("span", {"id" : "necro-birth"})
    if birthday_span:
        return dateutil.parser.parse(birthday_span["data-birth"]).date()
    else:
        return None

def get_player_deathday(player_page):
    birthday_span = player_page.find("span", {"id" : "necro-death"})
    if birthday_span:
        return dateutil.parser.parse(birthday_span["data-death"]).date()
    else:
        return None

def get_player_image(player_page):
    image_info = player_page.find("div", {"id" : "meta"}).find("div", {"class" : "media-item"})
    if image_info:
        return image_info.find("img")["src"]
    else:
        return None

def get_player_current_team_number(player_page, needs_numbers):
    team = None
    team_link = None
    number = None
    numbers_map = []
    numbers_team_map = {}
    comments = None
    team_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Team")
    number_info = player_page.find("div", {"class" : "uni_holder"})
    if team_info:
        team = str(team_info.find_next_sibling().find(text=True))
        team_link = team_info.find_next_sibling().find("a")["href"].split("/")[2].upper()
    else:
        table_names = ["passing", "receiving_and_rushing", "rushing_and_receiving", "scoring", "defense", "kicking", "returns", "snap_counts", "games_played", "passing_playoffs", "receiving_and_rushing_playoffs", "rushing_and_receiving_playoffs", "scoring_playoffs", "defense_playoffs", "kicking_playoffs", "returns_playoffs", "snap_counts_playoffs", "games_played_playoffs"]
        valid_teams = {}
        for table_name in table_names:
            table = player_page.find("table", id=table_name)
            if not table:
                if not comments:
                    comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("table", id=table_name)
                    if temp_table:
                        table = temp_table
                        break

            if table:
                standard_table_rows = table.find_all("tr")
                for row in standard_table_rows:
                    row_id = row.get("id")
                    match = False
                    if row_id:
                        match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                        if not match and row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                            match = True
                    if match:
                        row_team = row.find("td", {"data-stat" : "team"}).find("a")
                        if row_team:
                            row_team_str = row_team["title"]
                            year_row = row.find("th")
                            year_str = year_row.find(text=True)
                            if year_str:
                                season_year = re.sub("[^0-9]", "", str(year_str).split("-")[0])
                                if season_year:
                                    season_year = int(season_year)
                                else:
                                    season_year_str = year_row.get("csk", None)
                                    if season_year_str:
                                        season_year = int(season_year_str.split(".")[0])
                                    else:
                                        season_year = int(year_row.find("a").get("href").split("/")[2])
                            else:
                                season_year_str = year_row.get("csk", None)
                                if season_year_str:
                                    season_year = int(season_year_str.split(".")[0])
                                else:
                                    season_year = int(year_row.find("a").get("href").split("/")[2])
                            if row_team_str not in valid_teams:
                                valid_teams[row_team_str] = {"years" : set(), "order" : len(valid_teams)}
                            valid_teams[row_team_str]["years"].add(season_year)
                            numbers_team_map[row_team_str] = str(row_team.find(text=True))
        
        if valid_teams:
            valid_teams = sorted(valid_teams, key=lambda team: (len(valid_teams[team]["years"]), valid_teams[team]["order"]), reverse=True)
            team = valid_teams[0]

    if number_info:
        pot_numbers = list(reversed(number_info.find_all("a")))
        if pot_numbers:
            if team_info:
                number = re.sub("[^0-9]", "", str(pot_numbers[0].text))
            else:
                current_max_years = -1
                for pot_number in pot_numbers:
                    pot_number_text = pot_number["data-tip"]
                    if team:
                        pot_numbers_split = pot_number_text.split("/")
                        has_match = False
                        for pot_number_val in pot_numbers_split:
                            if pot_number_val.startswith(team):
                                has_match = True
                        if not has_match:
                            continue
                    m = re.search(r"\d{4}", pot_number_text)
                    pot_number_text = pot_number_text[m.start():]
                    pot_number_text_split = pot_number_text.split("-", 1)
                    year_count = 1
                    if len(pot_number_text_split) == 2:
                        year_count = int(pot_number_text_split[1]) - int(pot_number_text_split[0])
                    if year_count >= current_max_years:
                        number = re.sub("[^0-9]", "", str(pot_number.text))
                        current_max_years = year_count
            
            if needs_numbers:
                for pot_number in pot_numbers:
                    pot_number_text = pot_number["data-tip"]
                    teams = " ".join(pot_number_text.split(" ")[:-1])
                    parsed_teams = []
                    if teams in numbers_team_map:
                        parsed_teams.append(numbers_team_map[teams])
                    else:
                        teams = teams.split("/")
                        for sub_team in teams:
                            if sub_team in numbers_team_map:
                                parsed_teams.append(numbers_team_map[sub_team])
                    m = re.search(r"\d{4}", pot_number_text)
                    pot_number_text = pot_number_text[m.start():]
                    pot_number_text_split = pot_number_text.split("-", 1)
                    start_year =  int(pot_number_text_split[0])
                    if len(pot_number_text_split) == 2:
                        end_year = int(pot_number_text_split[1])
                    else:
                        end_year = start_year
                    if pot_number.text and str(pot_number.text).strip():
                        sub_number = int(re.sub("[^0-9\/]", "", str(pot_number.text)).strip())
                        numbers_map.append({
                            "start_year" : start_year,
                            "end_year" : end_year,
                            "number" : sub_number,
                            "teams" : parsed_teams
                        })

    return team, team_link, number, numbers_map

def get_player_hof(player_page):
    hof_info = player_page.find("ul", id="bling")
    if hof_info and hof_info.find("a", text="Hall of Fame"):
        return True
    else:
        return False

def parse_table(player_page, player_data, time_frame, year, player_type, ind_player_type, gwd_data, pick_six_data, penalty_data):
    is_playoffs = not time_frame

    table_names = None

    if is_playoffs:
        table_names = ["stats_playoffs"]
    elif not year:
        table_names = ["passing", "receiving_and_rushing", "rushing_and_receiving", "scoring", "defense", "kicking", "returns", "snap_counts", "games_played"]
    else:
        table_names = ["stats"]

    hide_first_downs = False
    if not (year or is_playoffs):
        for qualifier in time_frame["qualifiers"]:
            if qualifier == "Team" or qualifier == "Team Franchise" or qualifier == "Team League" or qualifier == "Team Conference" or qualifier == "Team Division":
                hide_first_downs = True
            elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
                for qual_object in time_frame["qualifiers"][qualifier]:
                    for stat_obj in qual_object["values"]:
                        if stat_obj["time_frame"] and stat_obj["time_frame"]["qual_type"] == "Teams":
                            hide_first_downs = True
    hide_first_downs = False
    
    comments = None

    previous_headers = set()
    game_counter = 0
    prev_year = None
    game_map = {}

    all_rows = []
    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            over_header_values = []
            over_header_columns = []
            if (table_name != "passing" and table_name != "scoring" and table_name != "games_played") or (year or is_playoffs):
                over_header_columns = table.find("thead").find("tr", {"class" : "over_header"})
                for over_header_column in over_header_columns.find_all("th"):
                    colspan = over_header_column.get("colspan")
                    if colspan:
                        colspan = int(colspan)
                    else:
                        colspan = 1
                    contents = over_header_column.find(text=True)
                    for x in range(colspan):
                        if contents:
                            over_header_values.append(str(contents))
                        else:
                            over_header_values.append(None)

            header_columns = None
            if over_header_columns: 
                header_columns = over_header_columns.find_next_sibling().find_all("th")
            else:
                header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))
                else:
                    header_values.append(None)
            
            if (table_name == "passing" or table_name == "scoring" or table_name == "games_played") and not (year or is_playoffs):
                for x in range(len(header_values)):
                    if table_name == "passing":
                        over_header_values.append("Passing")
                    else:
                        over_header_values.append("Rushing")

            standard_table_rows = table.find_all("tr")

            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                    if not match and (not (year or is_playoffs) and row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class")):
                        match = True

                if match:
                    row_data = parse_row(row, table_name, time_frame, year, is_playoffs, player_type, ind_player_type, header_values, over_header_values, previous_headers, game_map, gwd_data, pick_six_data, penalty_data)

                    if not row_data:
                        continue

                    if "Fantasy" in headers[player_type["da_type"]]:
                        for over_header in list(row_data):
                            if over_header in get_constant_data.formulas["Fantasy"]:
                                for stat in get_constant_data.formulas["Fantasy"][over_header]:
                                    formula = get_constant_data.formulas["Fantasy"][over_header][stat]
                                    value = calculate_fantasy_formula(stat, formula, row_data, over_header)

                                    if not "Fantasy" in row_data:
                                        row_data["Fantasy"] = {}
                                    if not over_header in row_data["Fantasy"]:
                                            row_data["Fantasy"][over_header] = {}
                                    row_data["Fantasy"][over_header][stat] = value

                        if "Fantasy" in row_data:
                            for over_header in list(row_data["Fantasy"]):
                                for stat in row_data["Fantasy"][over_header]:
                                    if not stat in row_data["Fantasy"]:
                                        row_data["Fantasy"][stat] = 0.0

                                    row_data["Fantasy"][stat] += row_data["Fantasy"][over_header][stat]
                                row_data["Fantasy"].pop(over_header, None)

                    if hide_first_downs:
                        row_data["Shared"]["hide_first_downs"] = True

                    if "Tm" in row_data["Shared"] and row_data["Shared"]["Tm"] != "TOT":
                        all_rows.append(row_data)

                        if not (year or is_playoffs):
                            player_games = row_data["Shared"]["G"] if "G" in row_data["Shared"] else 0
                            player_starts = row_data["Shared"]["GS"] if "GS" in row_data["Shared"] else 0
                            
                            if not row_data["Shared"]["Date"] in game_map:
                                game_map[row_data["Shared"]["Date"]] = {}
                            if not row_data["Shared"]["Tm"] in game_map[row_data["Shared"]["Date"]]:
                                game_map[row_data["Shared"]["Date"]][row_data["Shared"]["Tm"]] = {
                                    "G" : player_games,
                                    "GS" : player_starts
                                }
                            if player_games > game_map[row_data["Shared"]["Date"]][row_data["Shared"]["Tm"]]["G"]:
                                game_map[row_data["Shared"]["Date"]][row_data["Shared"]["Tm"]]["G"] = player_games
                            if player_starts > game_map[row_data["Shared"]["Date"]][row_data["Shared"]["Tm"]]["GS"]:
                                game_map[row_data["Shared"]["Date"]][row_data["Shared"]["Tm"]]["GS"] = player_starts
                            
                            if "G" in row_data["Shared"]:
                                del row_data["Shared"]["G"]
                            if "GS" in row_data["Shared"]:
                                del row_data["Shared"]["GS"]
            
            previous_headers.update(header_values)

    if not (year or is_playoffs):
        for date in game_map:
            for team in game_map[date]:
                matching_date = [row for row in all_rows if row["Shared"]["Date"] == date and row["Shared"]["Tm"] == team]
                if matching_date:
                    matching_date[0]["Shared"]["G"] = game_map[date][team]["G"]
                    matching_date[0]["Shared"]["GS"] = game_map[date][team]["GS"]

    return all_rows

def parse_row(row, table_name, time_frame, year, is_playoffs, player_type, ind_player_type, header_values, over_header_values, previous_headers, game_map, gwd_data, pick_six_data, penalty_data):
    advanced_over_header = None
    for pot_header in headers[player_type["da_type"]]:
        if pot_header.startswith("Advanced/"):
            advanced_over_header = pot_header
            break
    awards_over_header = None
    for pot_header in headers[player_type["da_type"]]:
        if pot_header.startswith("Awards/Honors/"):
            awards_over_header = pot_header
            break

    the_snap_header = "Penalties/Snaps" if "Penalties/Snaps" in headers[player_type["da_type"]] else ("Snaps" if "Snaps" in headers[player_type["da_type"]] else None)

    date = None
    if (year or is_playoffs):
        season_year = int(str(row.find("td").find(text=True)).split("-")[0])
    else:
        year_row = row.find("th")
        year_str = year_row.find(text=True)
        if year_str:
            season_year = re.sub("[^0-9]", "", str(year_str).split("-")[0])
            if season_year:
                season_year = int(season_year)
            else:
                season_year_str = year_row.get("csk", None)
                if season_year_str:
                    season_year = int(season_year_str.split(".")[0])
                else:
                    season_year = int(year_row.find("a").get("href").split("/")[2])
        else:
            season_year_str = year_row.get("csk", None)
            if season_year_str:
                season_year = int(season_year_str.split(".")[0])
            else:
                season_year = int(year_row.find("a").get("href").split("/")[2])

    if not is_playoffs and (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int))):
        if not time_frame["time_start"] and not time_frame["time_end"]:
            included_table = True
        else:
            included_table = season_year >= time_frame["time_start"] and season_year <= time_frame["time_end"]
        
        if (year or is_playoffs):
            date_row = row.find("td", {"data-stat" : "game_date"})
            date = dateutil.parser.parse(str(date_row.find(text=True))).date()
        else:
            date = season_year
    else:
        date_row = row.find("td", {"data-stat" : "game_date"})
        date = dateutil.parser.parse(str(date_row.find(text=True))).date()
        if is_playoffs:
            included_table = True
        else:
            if isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int):
                included_table = season_year >= time_frame["time_start"] and season_year <= time_frame["time_end"]
            else:
                included_table = date >= time_frame["time_start"] and date <= time_frame["time_end"]

    if included_table:
        columns = row.find_all("td", recursive=False)
        row_data = {}
        is_start = False
        for index, column in enumerate(columns):
            real_index = index + 1
            over_header_value = over_header_values[real_index]
            header_value = header_values[real_index]
            if hasattr(column, "data-stat"):
                if column["data-stat"] == "game_location":
                    location = "Home"
                    text = column.find(text=True)
                    if text:
                        text = str(text).strip().upper()
                    if not text or text == "@" or text == "N":
                        if text == "@":
                            location = "Away"
                        elif text == "N":
                            location = "Neutral"
                        if not "Shared" in row_data:
                            row_data["Shared"] = {}
                    row_data["Shared"].update({"Location" : location})
                    continue
                elif column["data-stat"] == "opp":
                    opponent = str(column.find("a").find(text=True)).lower()
                    if not "Shared" in row_data:
                        row_data["Shared"] = {}
                    row_data["Shared"].update({"Opponent" : opponent})
                    row_data["Shared"].update({"RawOpponent" : column.find("a")["href"].split("/")[2].upper()})
                    continue
                elif column["data-stat"] == "gs":
                    start_txt = column.find(text=True)
                    if start_txt:
                        if (year or is_playoffs):
                            is_start = str(start_txt) == "*"
                        else:
                            if not "Shared" in row_data:
                                row_data["Shared"] = {}
                            row_data["Shared"].update({"GS" : int(str(start_txt))})
                    continue
                elif column["data-stat"] == "game_result":
                    row_data["Shared"].update({"GameLink" : column.find("a").get("href")})
                    result_split = column.find(text=True)
                    if result_split:
                        result_split = str(result_split).strip().upper().split(None, 1)
                        result = result_split[0].strip()
                        if result.startswith("W"):
                            row_data["Shared"].update({"Result" : "W"})
                        elif result.startswith("L"):
                            row_data["Shared"].update({"Result" : "L"})
                        elif result.startswith("T"):
                            row_data["Shared"].update({"Result" : "T"})
                        else:
                            row_data["Shared"].update({"Result" : None})
                        if len(result_split) == 2:
                            scores = result_split[1].strip().split("-")
                            row_data["Shared"].update({"Team Score" : int(scores[0])})
                            row_data["Shared"].update({"Opponent Score" : int(scores[1])})
                        else:
                            row_data["Shared"].update({"Team Score" : None})
                            row_data["Shared"].update({"Opponent Score" : None})
                    else:
                        row_data["Shared"].update({"Result" : None})
                        row_data["Shared"].update({"Team Score" : None})
                        row_data["Shared"].update({"Opponent Score" : None})
                    continue
                elif column["data-stat"] == "week_num":
                    result = int(str(column.find(text=True)))
                    if not "Shared" in row_data:
                        row_data["Shared"] = {}
                    row_data["Shared"].update({"Week" : result})
                    continue
                elif column["data-stat"] == "offense":
                    result = column.find(text=True)
                    if result:
                        result = str(result)
                        if the_snap_header:
                            if not the_snap_header in row_data:
                                row_data[the_snap_header] = {}
                            if not "OffSnp" in row_data[the_snap_header]:
                                row_data[the_snap_header]["OffSnp"] = 0
                            row_data[the_snap_header]["OffSnp"] += int(result)
                    continue
                elif column["data-stat"] == "off_pct":
                    result = column.find(text=True)
                    if result:
                        result = str(result)
                        if result.endswith("%"):
                            result = result[:-1]
                        if the_snap_header:
                            if not the_snap_header in row_data:
                                row_data[the_snap_header] = {}
                            if not "OffSnp%" in row_data[the_snap_header]:
                                row_data[the_snap_header]["OffSnp%"] = 0
                            row_data[the_snap_header]["OffSnp%"] += int(result) / 100
                    continue
                elif column["data-stat"] == "defense":
                    result = column.find(text=True)
                    if result:
                        result = str(result)
                        if "Defense" in headers[player_type["da_type"]]:
                            if not "Defense" in row_data:
                                row_data["Defense"] = {}
                            row_data["Defense"].update({"DefSnp" : int(result)})
                        if the_snap_header:
                            if not the_snap_header in row_data:
                                row_data[the_snap_header] = {}
                            if not "DefSnp" in row_data[the_snap_header]:
                                row_data[the_snap_header]["DefSnp"] = 0
                            row_data[the_snap_header]["DefSnp"] += int(result)
                        if "Advanced/Defense" in headers[player_type["da_type"]]:
                            if not "Advanced/Defense" in row_data:
                                row_data["Advanced/Defense"] = {}
                            row_data["Advanced/Defense"].update({"DefSnp" : int(result)})
                    continue
                elif column["data-stat"] == "def_pct":
                    result = column.find(text=True)
                    if result:
                        result = str(result)
                        if result.endswith("%"):
                            result = result[:-1]
                        if "Defense" in headers[player_type["da_type"]]:
                            if not "Defense" in row_data:
                                row_data["Defense"] = {}
                            row_data["Defense"].update({"DefSnp%" : int(result) / 100})
                        if the_snap_header:
                            if not the_snap_header in row_data:
                                row_data[the_snap_header] = {}
                            if not "DefSnp%" in row_data[the_snap_header]:
                                row_data[the_snap_header]["DefSnp%"] = 0
                            row_data[the_snap_header]["DefSnp%"] += int(result) / 100
                        if "Advanced/Defense" in headers[player_type["da_type"]]:
                            if not "Advanced/Defense" in row_data:
                                row_data["Advanced/Defense"] = {}
                            row_data["Advanced/Defense"].update({"DefSnp%" : int(result) / 100})
                    continue
                elif column["data-stat"] == "special_teams":
                    result = column.find(text=True)
                    if result:
                        result = str(result)
                        if the_snap_header:
                            if not the_snap_header in row_data:
                                row_data[the_snap_header] = {}
                            if not "STSnp" in row_data[the_snap_header]:
                                row_data[the_snap_header]["STSnp"] = 0
                            row_data[the_snap_header]["STSnp"] += int(result)
                    continue
                elif column["data-stat"] == "st_pct":
                    result = column.find(text=True)
                    if result:
                        result = str(result)
                        if result.endswith("%"):
                            result = result[:-1]
                        if the_snap_header:
                            if not the_snap_header in row_data:
                                row_data[the_snap_header] = {}
                            if not "STSnp%" in row_data[the_snap_header]:
                                row_data[the_snap_header]["STSnp%"] = 0
                            row_data[the_snap_header]["STSnp%"] += int(result) / 100
                    continue
                elif column["data-stat"] == "qb_rec":
                    if "Era Adjusted Passing" in headers[player_type["da_type"]] and "Era Adjusted Passing" in headers[ind_player_type]:
                        result = column.find(text=True)
                        if result:
                            result = str(result)
                            result = result.strip().split("-")
                            if not "Era Adjusted Passing" in row_data:
                                row_data["Era Adjusted Passing"] = {}
                            row_data["Era Adjusted Passing"].update({"QBW" : int(result[0])})
                            row_data["Era Adjusted Passing"].update({"QBL" : int(result[1])})
                            if len(result) == 3:
                                row_data["Era Adjusted Passing"].update({"QBT" : int(result[2])})
                    continue
                
            if over_header_value == "Rushing":
                if header_value == "Rush":
                    if not table_name.startswith("detailed_") and not table_name.startswith("advanced_"):
                        header_value = "Att"
                elif header_value == "Lng":
                    header_value = "LngRush"
                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue
                elif header_value == "Att":
                    if table_name.startswith("advanced_"):
                        header_value = "Rush"

            elif not table_name.startswith("detailed_") and not table_name.startswith("advanced_") and (over_header_value == "Def Interceptions" or over_header_value == "Fumbles" or over_header_value == "Def. Snaps" or over_header_value == "Tackles"):
                if header_value == "TD":
                    if over_header_value == "Fumbles":
                        header_value = "FR TD"
                    else:
                        header_value = "Int TD"
                    over_header_value = "Defense"
                elif header_value == "Yds":
                    if over_header_value == "Fumbles":
                        header_value = "FR Yds"
                    else:
                        header_value = "Int Yds"
                    over_header_value = "Defense"
                elif over_header_value == "Fumbles":
                    if (header_value != "Fmb" and header_value != "FL" and (year or is_playoffs)) or table_name == "defense":
                        over_header_value = "Defense"
                    else:
                        if header_value == "FL":
                            header_value = "FmbLst"
                        over_header_value = "Rushing"
                else:
                    over_header_value = "Defense"
            elif over_header_value == "Punt Returns":
                if header_value == "Ret":
                    header_value = "Rt"
                elif header_value == "Lng":
                    header_value = "PuntLng"
                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue
            elif over_header_value == "Kick Returns":
                if header_value == "Lng":
                    header_value = "KickLng"
                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue
            elif over_header_value == "Passing":
                if header_value == "4QC" or header_value == "GWD":
                    over_header_value = "Era Adjusted Passing"
                elif header_value == "Lng":
                    header_value = "LngPass"
                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue
            elif over_header_value == "Receiving":
                if header_value == "Lng":
                    header_value = "LngRec"
                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue
            elif over_header_value == "0-19" or over_header_value == "20-29" or over_header_value == "30-39" or over_header_value == "40-49" or over_header_value == "50+":
                header_value = header_value + ":" + over_header_value
                over_header_value = "Advanced/Kicking"
            elif over_header_value == "Kickoffs":
                over_header_value = "Advanced/Kicking"
            elif not over_header_value and table_name == "kicking" and header_value == "Lng":
                over_header_value = "Advanced/Kicking"
            elif over_header_value == "Punting" and header_value == "Lng":
                over_header_value = "Advanced/Punting"
            elif table_name.startswith("detailed_") or table_name.startswith("advanced_") and (over_header_value == "Pass Coverage" or over_header_value == "Pass Rush" or over_header_value == "Tackles" or header_value == "Sk" or header_value == "Prss"):
                over_header_value = "Advanced/Defense"
                if header_value == "Tgt":
                    header_value = "Tgt"
                elif header_value == "Hrry":
                    header_value = "QBHrry"
                elif header_value == "QBKD":
                    header_value = "QBKD"
                elif header_value == "Prss":
                    header_value = "QBPress"
                elif header_value == "TD":
                    header_value = "TD"
                elif header_value == "Cmp":
                    header_value = "Cmp"
                elif header_value == "Yds":
                    header_value = "Yds"
                elif header_value == "MTkl":
                    header_value = "MissTckl"

            if header_value in get_constant_data.stat_groups["Shared"]:
                over_header_value = "Shared"
            elif "Scrimmage/All Purpose" in headers[player_type["da_type"]] and (over_header_value == "Scoring" or table_name == "scoring") and header_value == "2PM":
                over_header_value = "Scrimmage/All Purpose"
            elif (table_name == "rushing_and_receiving" or table_name == "receiving_and_rushing") and (header_value == "Fmb" or header_value == "FmbLst"):
                over_header_value = "Rushing"
            elif "Defense" in headers[player_type["da_type"]] and not over_header_value:
                over_header_value = "Defense"
            elif header_value == "Sfty" and table_name == "defense":
                over_header_value = "Defense"

            if over_header_value != "Shared":
                if header_value == "1D":
                    if table_name.startswith("detailed_"):
                        continue
                    if over_header_value == "Passing":
                        header_value = "Pass1D"
                    elif over_header_value == "Rushing":
                        header_value = "Rush1D"
                    else:
                        header_value = "Rec1D"
                    if over_header_value:
                        over_header_value = advanced_over_header
                    else:
                        continue
                elif header_value == "Yds":
                    if column.get("data-stat") == "rec_yds" and (table_name.startswith("advanced_") or table_name.startswith("detailed_")):
                        header_value = "RecYds"
                        if advanced_over_header:
                            over_header_value = advanced_over_header
                        else:
                            continue
                elif header_value == "BrkTkl":
                    if over_header_value == "Rushing":
                        header_value = "RushBrkTkl"
                    else:
                        header_value = "RecBrkTkl"
                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue
                elif (table_name == "advanced_air_yards" or table_name == "advanced_accuracy" or table_name == "advanced_pressure") or table_name.startswith("advanced_passing"):
                    if header_value == "CAY" or header_value == "IAY" or header_value == "YAC":
                        header_value += "RAW"
                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue
                elif table_name.startswith("detailed_") or (table_name.startswith("advanced_") and not table_name.startswith("advanced_passing")):
                    if over_header_value == "Rushing":
                        if header_value == "YBC":
                            header_value = "YBContact"
                        elif header_value == "YAC":
                            header_value = "YAContact"
                    elif over_header_value == "Receiving":
                        if header_value == "YBC":
                            header_value = "YBCatch"
                        elif header_value == "YAC":
                            header_value = "YACatch"

                    if advanced_over_header:
                        over_header_value = advanced_over_header
                    else:
                        continue

            if header_value == "AV":
                if awards_over_header:
                    over_header_value = awards_over_header
                else:
                    continue
            
            if header_value == "Week" and is_playoffs:
                continue
            
            if over_header_value in headers[player_type["da_type"]] or over_header_value == "Shared":
                if header_value in get_constant_data.stat_groups[over_header_value] and ((not header_value in get_constant_data.formulas[over_header_value] and not header_value in advanced_stats) or get_constant_data.formulas[over_header_value][header_value] == "MAX") and (over_header_value != "Shared" or not header_value in previous_headers or header_value == "Tm" or header_value == "G" or header_value == "GS"):
                    if header_value == "Yds":
                        if over_header_value == "Passing":
                            if column.get("data-stat") == "pass_sacked_yds":
                                header_value = "SkYds"
                            elif column.get("data-stat") != "pass_yds":
                                continue
                        elif over_header_value == "Rushing":
                            if column.get("data-stat") != "rush_yds":
                                continue
                        elif over_header_value == "Receiving":
                            if column.get("data-stat") != "rec_yds":
                                continue
                        elif over_header_value == "Punting":
                            if column.get("data-stat") != "punt_yds":
                                continue
                        elif over_header_value == "Kick Returns":
                            if column.get("data-stat") != "kick_ret_yds":
                                continue
                        elif over_header_value == "Punt Returns":
                            if column.get("data-stat") != "punt_ret_yds":
                                continue

                    column_value = column.find(text=True)
                    if column_value and str(column_value).strip():
                        column_value = str(column_value)
                        if not over_header_value in row_data:
                            row_data[over_header_value] = {}

                        if header_value != "Tm":
                            column_value = float(column_value)
                        elif not column.find("a"):
                            column_value = "TOT"
                        else:
                            row_data[over_header_value]["RawTm"] = column.find("a")["href"].split("/")[2].upper()

                        if ((table_name == "detailed_rushing_and_receiving" or table_name == "detailed_receiving_and_rushing" or table_name.startswith("advanced_rushing_and_receiving")) and over_header_value != "Shared") or (header_value == "Pass1D" or header_value == "Rush1D" or header_value == "Rec1D"):
                            if not header_value in row_data[over_header_value]:
                                row_data[over_header_value][header_value] = 0.0
                            row_data[over_header_value][header_value] += column_value
                        else:
                            row_data[over_header_value].update({header_value : column_value})

                        if (header_value == "Fmb" or header_value == "FmbLst") and "Scrimmage/All Purpose" in headers[player_type["da_type"]]:
                            if not "Scrimmage/All Purpose" in row_data:
                                row_data["Scrimmage/All Purpose"] = {}
                            row_data["Scrimmage/All Purpose"].update({header_value : column_value})

        if not "Shared" in row_data:
            row_data["Shared"] = {}

        row_data["Shared"]["Start"] = is_start                        
        row_data["Shared"]["Date"] = date
        row_data["Shared"]["Year"] = season_year
        row_data["Shared"]["Month"] = None if isinstance(date, int) else date.month
        row_data["Shared"]["Day"] = None if isinstance(date, int) else date.day
        row_data["Shared"]["YearDay"] = None if isinstance(date, int) else date.timetuple().tm_yday
        if not isinstance(date, int):
            next_date = date - dateutil.relativedelta.relativedelta(weeks=1)
            weekday_in_month = 1
            while next_date.month == date.month:
                weekday_in_month += 1
                next_date -= dateutil.relativedelta.relativedelta(weeks=1)
            row_data["Shared"]["WeekDayInMonth"] = weekday_in_month
        row_data["Shared"]["CalendarYear"] = None if isinstance(date, int) else date.year

        row_data["Shared"]["is_playoffs"] = is_playoffs

        if not row_data["Shared"]["Date"] in game_map:            
            if "Era Adjusted Passing" in headers[player_type["da_type"]]:
                if not "Era Adjusted Passing" in row_data:
                    row_data["Era Adjusted Passing"] = {}
                
                if (year or is_playoffs):
                    row_data["Era Adjusted Passing"]["GWD"] = 0
                    row_data["Era Adjusted Passing"]["4QC"] = 0
                row_data["Era Adjusted Passing"]["Pick6"] = 0
                
                if gwd_data:
                    if season_year in gwd_data:
                        if (year or is_playoffs):
                            if row_data["Shared"]["Tm"] in gwd_data[season_year] and date in gwd_data[season_year][row_data["Shared"]["Tm"]]:
                                if gwd_data[season_year][row_data["Shared"]["Tm"]][date]["GWD"]:
                                    row_data["Era Adjusted Passing"]["GWD"] = 1
                                if gwd_data[season_year][row_data["Shared"]["Tm"]][date]["4QC"]:
                                    row_data["Era Adjusted Passing"]["4QC"] = 1
                
                if pick_six_data:
                    if (year or is_playoffs):
                        date_type = "Playoffs" if is_playoffs else "Regular Season"
                        if date_type in pick_six_data:
                            if season_year in pick_six_data[date_type]:
                                if row_data["Shared"]["Tm"] in pick_six_data[date_type][season_year] and date in pick_six_data[date_type][season_year][row_data["Shared"]["Tm"]]:
                                    row_data["Era Adjusted Passing"]["Pick6"] += pick_six_data[date_type][season_year][row_data["Shared"]["Tm"]][date]
                    else:
                        date_type = "Regular Season"
                        if date_type in pick_six_data:
                            if season_year in pick_six_data[date_type] and row_data["Shared"]["Tm"] in pick_six_data[date_type][season_year]:
                                for date in pick_six_data[date_type][season_year][row_data["Shared"]["Tm"]]:
                                    row_data["Era Adjusted Passing"]["Pick6"] += pick_six_data[date_type][season_year][row_data["Shared"]["Tm"]][date]

            if "Penalties/Snaps" in headers[player_type["da_type"]]:
                if not "Penalties/Snaps" in row_data:
                    row_data["Penalties/Snaps"] = {}

                row_data["Penalties/Snaps"]["Pen"] = 0
                row_data["Penalties/Snaps"]["AcptPen"] = 0
                row_data["Penalties/Snaps"]["PenYds"] = 0

                if penalty_data:
                    if (year or is_playoffs):
                        data_type = "Neither"
                        if data_type in penalty_data:
                            if season_year in penalty_data[data_type]:
                                if row_data["Shared"]["Tm"] in penalty_data[data_type][season_year] and date in penalty_data[data_type][season_year][row_data["Shared"]["Tm"]]:
                                    row_data["Penalties/Snaps"]["Pen"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["Pen"]
                                    row_data["Penalties/Snaps"]["AcptPen"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["AcptPen"]
                                    row_data["Penalties/Snaps"]["PenYds"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["PenYds"]
                        if is_playoffs:
                            data_type = "Playoffs"
                            if data_type in penalty_data:
                                if season_year in penalty_data[data_type]:
                                    if row_data["Shared"]["Tm"] in penalty_data[data_type][season_year] and date in penalty_data[data_type][season_year][row_data["Shared"]["Tm"]]:
                                        row_data["Penalties/Snaps"]["Pen"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["Pen"]
                                        row_data["Penalties/Snaps"]["AcptPen"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["AcptPen"]
                                        row_data["Penalties/Snaps"]["PenYds"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["PenYds"]
                    else:
                        data_type = "Regular Season"
                        if data_type in penalty_data:
                            if season_year in penalty_data[data_type]:
                                if row_data["Shared"]["Tm"] in penalty_data[data_type][season_year]:
                                    for date in penalty_data[data_type][season_year][row_data["Shared"]["Tm"]]:
                                        row_data["Penalties/Snaps"]["Pen"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["Pen"]
                                        row_data["Penalties/Snaps"]["AcptPen"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["AcptPen"]
                                        row_data["Penalties/Snaps"]["PenYds"] += penalty_data[data_type][season_year][row_data["Shared"]["Tm"]][date]["PenYds"]

            if (year or is_playoffs):
                row_data["Shared"].update({"G" : 1})

                if is_start:
                    row_data["Shared"].update({"GS" : 1})
                else:
                    row_data["Shared"].update({"GS" : 0})

        return row_data

def handle_gwd(player_data):
    player_url = gwd_url_format.format(player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return
        else:
            raise

    tables = player_page.find_all("table", id="comebacks")

    gwd_data = {}

    for table in tables:
        standard_table_rows = table.find_all("tr")
        if standard_table_rows:
            standard_table_rows.pop(0)
            for row in standard_table_rows:
                match = not row.has_attr("class") or "thead" not in row.get("class")
                if match:
                    season_year = int(str(row.find(attrs={"data-stat" : "year_id"}).find(text=True)))
                    date = dateutil.parser.parse(str(row.find("td", {"data-stat" : "game_date"}).find(text=True))).date()
                    team = str(row.find("td", {"data-stat" : "team"}).find(text=True))

                    comback_row = str(row.find("td", {"data-stat" : "comeback_notes"}).find(text=True))

                    if not season_year in gwd_data:
                        gwd_data[season_year] = {}
                    if not team in gwd_data[season_year]:
                        gwd_data[season_year][team] = {}

                    gwd_data[season_year][team][date] = {
                        "GWD" : False,
                        "4QC" : False
                    }

                    if "GWD" in comback_row.upper():
                        gwd_data[season_year][team][date]["GWD"] = True
                    if "4QC" in comback_row.upper():
                        gwd_data[season_year][team][date]["4QC"] = True
    
    return gwd_data

def handle_penalties(player_data, player_type, ind_player_type, is_game_page):
    reg_season_dates = []
    playoff_dates = []
    if not is_game_page:
        player_url = game_splits_url_format.format(player_data["id"][0].upper(), player_data["id"])
        request = urllib.request.Request(player_url, headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return
            else:
                raise

        reg_season_vals = parse_table(player_page, player_data, {"time_start" : datetime.date.min.year, "time_end" : float("inf"), "type" : "date", "qualifiers" : {}}, True, player_type, ind_player_type, None, None, None)
        for val in reg_season_vals:
            reg_season_dates.append(val["Shared"]["Date"])

        playoff_vals = parse_table(player_page, player_data, None, True, player_type, ind_player_type, None, None, None)
        for val in playoff_vals:
            playoff_dates.append(val["Shared"]["Date"])

    player_url = penalties_url.format(player_data["id"][0].upper(), player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return
        else:
            raise

    table = player_page.find("table", id="penalties")

    penalty_data = {}

    if table:
        standard_table_rows = table.find_all("tr")
        if standard_table_rows:
            standard_table_rows.pop(0)
            for row in standard_table_rows:
                match = not row.has_attr("class") or "thead" not in row.get("class")
                if match:
                    season_year_row = row.find(attrs={"data-stat" : "year_id"}).find(text=True)
                    if season_year_row:
                        season_year = int(str(season_year_row))
                        date = dateutil.parser.parse(str(row.find("td", {"data-stat" : "game_date"}).find(text=True))).date()
                        team = str(row.find("td", {"data-stat" : "team"}).find(text=True))
                        
                        acpt_pen = False
                        pen_yds = 0
                        declined_row = row.find("td", {"data-stat" : "penalty_dec_or_offs"}).find(text=True)
                        if not declined_row:
                            acpt_pen = True
                            yds_row = row.find("td", {"data-stat" : "penalty_yds"}).find(text=True)
                            if yds_row:
                                pen_yds = int(str(yds_row))

                        date_type = "Neither"
                        if date in reg_season_dates:
                            date_type = "Regular Season"
                        elif date in playoff_dates:
                            date_type = "Playoffs"

                        if not date_type in penalty_data:
                            penalty_data[date_type] = {}
                        if not season_year in penalty_data[date_type]:
                            penalty_data[date_type][season_year] = {}
                        if not team in penalty_data[date_type][season_year]:
                            penalty_data[date_type][season_year][team] = {}
                        if not date in penalty_data[date_type][season_year][team]:
                            penalty_data[date_type][season_year][team][date] = {}
                        if not "Pen" in penalty_data[date_type][season_year][team][date]:
                            penalty_data[date_type][season_year][team][date]["Pen"] = 0
                        if not "AcptPen" in penalty_data[date_type][season_year][team][date]:
                            penalty_data[date_type][season_year][team][date]["AcptPen"] = 0
                        if not "PenYds" in penalty_data[date_type][season_year][team][date]:
                            penalty_data[date_type][season_year][team][date]["PenYds"] = 0

                        penalty_data[date_type][season_year][team][date]["Pen"] += 1
                        if acpt_pen:
                            penalty_data[date_type][season_year][team][date]["AcptPen"] += 1
                            penalty_data[date_type][season_year][team][date]["PenYds"] += pen_yds
                            
    return penalty_data

def handle_pick_sixes(player_data):
    player_url = pick6_url.format(player_data["id"][0].upper(), player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return
        else:
            raise

    table_names = ["scores", "scores_playoffs"]

    pick_six_data = {}

    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if table:
            standard_table_rows = table.find_all("tr")
            if standard_table_rows:
                standard_table_rows.pop(0)
                for row in standard_table_rows:
                    match = not row.has_attr("class") or "thead" not in row.get("class")
                    if match:
                        season_year = int(str(row.find(attrs={"data-stat" : "year_id"}).find(text=True)))
                        date = dateutil.parser.parse(str(row.find("td", {"data-stat" : "game_date"}).find(text=True))).date()
                        team = str(row.find("td", {"data-stat" : "opp"}).find(text=True))

                        date_type = "Regular Season" if table_name == "scores" else "Playoffs"

                        if not date_type in pick_six_data:
                            pick_six_data[date_type] = {}
                        if not season_year in pick_six_data[date_type]:
                            pick_six_data[date_type][season_year] = {}
                        if not team in pick_six_data[date_type][season_year]:
                            pick_six_data[date_type][season_year][team] = {}
                        if not date in pick_six_data[date_type][season_year][team]:
                            pick_six_data[date_type][season_year][team][date] = 0
                        pick_six_data[date_type][season_year][team][date] += 1

    return pick_six_data

def handle_playoffs_data(all_rows, player_data, player_type, ind_player_type, playoff_data, time_frame, is_fantasy):
    data_to_include = []

    is_qual_match = False
    for qualifier in time_frame["qualifiers"]:
        if qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team League" and qualifier != "Team Conference" and qualifier != "Team Division" and qualifier != "Rookie" and qualifier != "Max Stat" and qualifier != "Min Stat" and qualifier != "Max Streak" and qualifier != "Max Stretch" and qualifier != "Count Streak" and qualifier != "Quickest"  and qualifier != "Slowest" and qualifier != "Season Stat" and qualifier != "Season Age" and qualifier != "Season" and qualifier != "Season Reversed" and qualifier != "Season Index" and qualifier != "Season Index Reversed" and qualifier != "Previous Season Stat"  and qualifier != "Upcoming Season Stat" and qualifier != "Season Sub Query" and qualifier != "Or Season Sub Query" and qualifier != "Season Before Sub Query" and qualifier != "Season After Sub Query" and qualifier != "Winning Team" and qualifier != "Losing Team" and qualifier != "Tied Team" and qualifier !=  "Winning Or Tied Team" and qualifier !=  "Losing Or Tied Team" and qualifier != "Playoff Team" and qualifier != "Champ Winner Team" and qualifier != "Conference Winner Team" and qualifier != "Division Winner Team" and qualifier != "Team Win Percentage" and qualifier != "Team Games Over 500" and qualifier != "Team Wins" and qualifier != "Team Losses" and qualifier != "Team Ties" and qualifier != "Team Points Rank" and qualifier != "Team Points Allowed Rank" and qualifier != "Team Yards Rank" and qualifier != "Team Yards Allowed Rank" and qualifier != "Team Pass TD Rank" and qualifier != "Team Pass TD Allowed Rank" and qualifier != "Team Pass Yards Rank" and qualifier != "Team Pass Yards Allowed Rank" and qualifier != "Team ANY/A Rank" and qualifier != "Team ANY/A Allowed Rank" and qualifier != "Team Passer Rating Rank" and qualifier != "Team Passer Rating Allowed Rank" and qualifier != "Team Rush TD Rank" and qualifier != "Team Rush TD Allowed Rank" and qualifier != "Team Rush Yards Rank" and qualifier != "Team Rush Yards Allowed Rank" and qualifier != "Team Fantasy Position Rank" and qualifier != "Season Formula" and qualifier != "Team Had Bye" and qualifier != "Number" and qualifier != "Even Year" and qualifier != "Odd Year" and qualifier != "Year" and qualifier != "Team City" and qualifier != "Team Exact City" and qualifier != "Team State" and qualifier != "Team Exact State" and qualifier != "Team Country" and qualifier != "Team Exact Country" and qualifier != "Team Time Zone" and qualifier != "Team Exact Time Zone":
            is_qual_match = True
        elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
            for qual_object in time_frame["qualifiers"][qualifier]:
                for stat_obj in qual_object["values"]:
                    if not stat_obj["time_frame"] or not (stat_obj["time_frame"]["qual_type"] == "Seasons" or stat_obj["time_frame"]["qual_type"] == "Teams"):
                        is_qual_match = True

    for data in playoff_data:
        data = copy.deepcopy(data)

        if time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)):
            year = data["Shared"]["Year"]
            if not is_fantasy and not is_qual_match:
                data["Shared"]["SpecificDate"] = data["Shared"]["Date"]
                data["Shared"]["Date"] = year

            if not time_frame["time_start"] and not time_frame["time_end"]:
                data_to_include.append(data)
            else:
                if year >= time_frame["time_start"] and year <= time_frame["time_end"]:
                    data_to_include.append(data)
        else:
            date = data["Shared"]["Date"]
            if date >= time_frame["time_start"] and date <= time_frame["time_end"]:
                data_to_include.append(data)

    return all_rows + data_to_include

def handle_schedule_stats(all_rows, qualifiers, is_playoffs):
    all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
    seasons = []
    for row_data in all_rows:
        if not {row_data["Shared"]["Year"], row_data["Shared"]["RawTm"]} in [{season["Year"], season["Tm"]} for season in seasons]:
            seasons.append({
                "Year" : row_data["Shared"]["Year"],
                "Tm" : row_data["Shared"]["RawTm"]
            })

    team_schedule = get_team_schedule(seasons)

    for da_year in team_schedule:
        all_rows_order = []
        for season_obj in team_schedule[da_year]:
            da_games = []
            if is_playoffs != "Only":
                da_games += season_obj["regular_season"]
            if is_playoffs:
                da_games += season_obj["playoffs"]
            for data in da_games:
                all_rows_order.append(data)
    
        all_rows_order = sorted(all_rows_order, key=lambda row: row["NHLGameLink"])
        for index, row_data in enumerate(all_rows_order):
            if index == 0:
                row_data["Previous Team Result"] = None
            else:
                row_data["Previous Team Result"] = all_rows_order[index - 1]["Result"]
            
            if index == len(all_rows_order) - 1:
                row_data["Upcoming Team Result"] = None
            else:
                row_data["Upcoming Team Result"] = all_rows_order[index + 1]["Result"]

    for da_year in team_schedule:
        for season_obj in team_schedule[da_year]:
            team = season_obj["team"]
            league = season_obj["league"]
            conference = season_obj["conference"]
            division = season_obj["division"]

            if is_playoffs:
                if is_playoffs == "Only":
                    max_team_games = max(data["TmGm"] for data in season_obj["regular_season"])
                else:
                    max_team_games = max(data["TmGm"] for data in season_obj["regular_season"] + season_obj["playoffs"])
            else:
                max_team_games = max(data["TmGm"] for data in season_obj["regular_season"])

            for row_data in all_rows:
                if row_data["Shared"]["Year"] == da_year and row_data["Shared"]["RawTm"] == team:
                    for data in season_obj["regular_season"]:
                        if row_data["Shared"]["Date"] == data["Date"]:
                            if "StartTime" in data:
                                row_data["Shared"]["StartTime"] = data["StartTime"]
                            row_data["Shared"]["TmGm"] = data["TmGm"]
                            row_data["Shared"]["Previous Team Result"] = data["Previous Team Result"]
                            row_data["Shared"]["Upcoming Team Result"] = data["Upcoming Team Result"]
                            row_data["Shared"]["TmGmRev"] = max_team_games - data["TmGm"] + 1
                            row_data["Shared"]["IsOT"] = data["IsOT"]
                            if "BeforeBye" in data:
                                row_data["Shared"]["TmBeforeBye"] = data["BeforeBye"]
                                row_data["Shared"]["TmAfterBye"] = data["AfterBye"]
                                row_data["Shared"]["TmGameBeforeBye"] = data["GameBeforeBye"]
                                row_data["Shared"]["TmGameAfterBye"] = data["GameAfterBye"]
                            if "BeforePlayoffsBye" in data:
                                row_data["Shared"]["TmBeforePlayoffsBye"] = data["BeforePlayoffsBye"]
                                row_data["Shared"]["TmAfterPlayoffsBye"] = data["AfterPlayoffsBye"]

                            row_data["Shared"]["TmHadBye"] = data["HadBye"]

                            if not isinstance(row_data["Shared"]["Date"], int):
                                if "Games Rest" in qualifiers or "Starts Rest" in qualifiers or "Games In A Row" in qualifiers or "Starts In A Row" in qualifiers:
                                    games_rest = 0
                                    starts_rest = 0
                                    games_in_a_row = 1
                                    starts_in_a_row = 1 if row_data["Shared"]["Start"] else 0
                                    count_games_rest = True
                                    count_starts_rest = True
                                    count_games_rest_2 = True
                                    count_starts_rest_2 = True
                                    not_first_game = False
                                    for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["Date"], reverse=True):
                                        if sub_data["Date"] < row_data["Shared"]["Date"]:
                                            not_first_game = True
                                            if sub_data["Date"] in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]]]:
                                                count_games_rest = False
                                            if count_games_rest:
                                                games_rest += 1
                                            if sub_data["Date"] in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]] if row_subbest_data["Shared"]["Start"]]:
                                                count_starts_rest = False
                                            if count_starts_rest:
                                                starts_rest += 1

                                            if sub_data["Date"] not in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]]]:
                                                count_games_rest_2 = False
                                            if count_games_rest_2:
                                                games_in_a_row += 1
                                            if row_data["Shared"]["Start"]:
                                                if sub_data["Date"] not in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]] if row_subbest_data["Shared"]["Start"]]:
                                                    count_starts_rest_2 = False
                                                if count_starts_rest_2:
                                                    starts_in_a_row += 1

                                            if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                                break
                                    if not_first_game:
                                        row_data["Shared"]["GamesRest"] = games_rest
                                        row_data["Shared"]["StartsRest"] = starts_rest
                                    else:
                                        row_data["Shared"]["GamesRest"] = float("inf")
                                        row_data["Shared"]["StartsRest"] = float("inf")
                                    row_data["Shared"]["GamesInARow"] = games_in_a_row
                                    row_data["Shared"]["StartsInARow"] = starts_in_a_row
     
                    for data in season_obj["playoffs"]:
                        if not row_data["Shared"]["is_playoffs"]:
                            continue

                        if row_data["Shared"]["SpecificDate" if "SpecificDate" in row_data["Shared"] else "Date"] == data["Date"]:
                            row_data["Shared"]["Round"] = data["Round"]
                            if "StartTime" in data:
                                row_data["Shared"]["StartTime"] = data["StartTime"]
                            row_data["Shared"]["TmGm"] = data["TmGm"]
                            row_data["Shared"]["Previous Team Result"] = data["Previous Team Result"]
                            row_data["Shared"]["Upcoming Team Result"] = data["Upcoming Team Result"]
                            row_data["Shared"]["TmGmRev"] = max_team_games - data["TmGm"] + 1
                            row_data["Shared"]["IsOT"] = data["IsOT"]
                            if "BeforeBye" in data:
                                row_data["Shared"]["TmBeforeBye"] = data["BeforeBye"]
                                row_data["Shared"]["TmAfterBye"] = data["AfterBye"]
                                row_data["Shared"]["TmGameBeforeBye"] = data["GameBeforeBye"]
                                row_data["Shared"]["TmGameAfterBye"] = data["GameAfterBye"]
                            if "BeforePlayoffsBye" in data:
                                row_data["Shared"]["TmBeforePlayoffsBye"] = data["BeforePlayoffsBye"]
                                row_data["Shared"]["TmAfterPlayoffsBye"] = data["AfterPlayoffsBye"]
                            row_data["Shared"]["TmHadBye"] = data["HadBye"]

                            if not isinstance(row_data["Shared"]["Date"], int):
                                if "Games Rest" in qualifiers or "Starts Rest" in qualifiers or "Games In A Row" in qualifiers or "Starts In A Row" in qualifiers:
                                    games_rest = 0
                                    starts_rest = 0
                                    games_in_a_row = 1
                                    starts_in_a_row = 1 if row_data["Shared"]["Start"] else 0
                                    count_games_rest = True
                                    count_starts_rest = True
                                    count_games_rest_2 = True
                                    count_starts_rest_2 = True
                                    not_first_game = False
                                    for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["Date"], reverse=True):
                                        if sub_data["Date"] < row_data["Shared"]["Date"]:
                                            not_first_game = True
                                            if sub_data["Date"] in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]]]:
                                                count_games_rest = False
                                            if count_games_rest:
                                                games_rest += 1
                                            if sub_data["Date"] in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]] if row_subbest_data["Shared"]["Start"]]:
                                                count_starts_rest = False
                                            if count_starts_rest:
                                                starts_rest += 1

                                            if sub_data["Date"] not in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]]]:
                                                count_games_rest_2 = False
                                            if count_games_rest_2:
                                                games_in_a_row += 1
                                            if row_data["Shared"]["Start"]:
                                                if sub_data["Date"] not in [row_subbest_data["Shared"]["Date"] for row_subbest_data in player_data["all_games"][row_data["Shared"]["Year"]] if row_subbest_data["Shared"]["Start"]]:
                                                    count_starts_rest_2 = False
                                                if count_starts_rest_2:
                                                    starts_in_a_row += 1

                                            if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                                break
                                    if not_first_game:
                                        row_data["Shared"]["GamesRest"] = games_rest
                                        row_data["Shared"]["StartsRest"] = starts_rest
                                    else:
                                        row_data["Shared"]["GamesRest"] = float("inf")
                                        row_data["Shared"]["StartsRest"] = float("inf")
                                    row_data["Shared"]["GamesInARow"] = games_in_a_row
                                    row_data["Shared"]["StartsInARow"] = starts_in_a_row
                            
                    row_data["Shared"]["League"] = league
                    row_data["Shared"]["Conference"] = conference
                    row_data["Shared"]["Division"] = division
    
    new_rows = []
    for row in all_rows:
        if perform_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def perform_schedule_qualifiers(row, qualifiers):
    if "Round" in qualifiers:
        if not row["Shared"]["is_playoffs"]:
            return False
        for qual_object in qualifiers["Round"]:
            playoff_rounds = []
            for playoff_round in qual_object["values"]:
                if playoff_round == "ch":
                    if row["Shared"]["Year"] >= 1966:
                        playoff_rounds.append("sb")
                    else:
                        playoff_rounds.append("lc")
                else:
                    playoff_rounds.append(playoff_round)

            if qual_object["negate"]:
                if row["Shared"]["Round"] in playoff_rounds:
                    return False
            else:
                if not row["Shared"]["Round"] in playoff_rounds:
                    return False
    
    if "Start Time" in qualifiers:
        if not "StartTime" in row["Shared"]:
            return False

        for qual_object in qualifiers["Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            event_time = row["Shared"]["StartTime"].astimezone(pytz.timezone(qual_object["values"]["time_zone"])).time().replace(microsecond=0).replace(second=0)
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Team Start Time" in qualifiers:
        if not "StartTime" in row["Shared"]:
            return False
        
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]
        event_time = row["Shared"]["StartTime"].astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0).replace(second=0)

        for qual_object in qualifiers["Team Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Opponent Start Time" in qualifiers:
        if not "StartTime" in row["Shared"]:
            return False
        
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]
        event_time = row["Shared"]["StartTime"].astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0).replace(second=0)

        for qual_object in qualifiers["Opponent Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "National Game" in qualifiers:
        if not "StartTime" in row["Shared"]:
            return False

        is_national = row["Shared"]["is_playoffs"] or row["Shared"]["Date"].weekday() != 6 or row["Shared"]["StartTime"] < datetime.time(12, 0, 0) or not row["Shared"]["StartTime"] >= datetime.time(19, 0, 0)
        for qual_object in qualifiers["National Game"]:
            if qual_object["negate"]:
                if is_national:
                    return False
            else:
                if not is_national:
                    return False
    
    if "Overtime Result" in qualifiers:
        if not "IsOT" in row["Shared"]:
            return False

        for qual_object in qualifiers["Overtime Result"]:
            if qual_object["negate"]:
                if row["Shared"]["IsOT"]:
                    return False
            else:
                if not row["Shared"]["IsOT"]:
                    return False

    if "Team League" in qualifiers:
        for qual_object in qualifiers["Team League"]:
            if qual_object["negate"]:
                if row["Shared"]["League"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["League"].lower() in qual_object["values"]:
                    return False
    
    if "Team Conference" in qualifiers:
        for qual_object in qualifiers["Team Conference"]:
            if qual_object["negate"]:
                if row["Shared"]["Conference"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Conference"].lower() in qual_object["values"]:
                    return False
    
    if "Team Division" in qualifiers:
        for qual_object in qualifiers["Team Division"]:
            if not row["Shared"]["Division"]:
                return False

            if qual_object["negate"]:
                if row["Shared"]["Division"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Division"].lower() in qual_object["values"]:
                    return False
    
    if "Team Game" in qualifiers:
        for qual_object in qualifiers["Team Game"]:
            if qual_object["negate"]:
                if row["Shared"]["TmGm"] >= qual_object["values"]["start_val"] and row["Shared"]["TmGm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["TmGm"] >= qual_object["values"]["start_val"] and row["Shared"]["TmGm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Game Reversed" in qualifiers:    
        for qual_object in qualifiers["Team Game Reversed"]:
            if qual_object["negate"]:
                if row["Shared"]["TmGmRev"] >= qual_object["values"]["start_val"] and row["Shared"]["TmGmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["TmGmRev"] >= qual_object["values"]["start_val"] and row["Shared"]["TmGmRev"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "First Half" in qualifiers:
        for qual_object in qualifiers["First Half"]:
            weeks_per_season = None
            for weeks_obj in year_weeks_played:
                weeks_start_year = weeks_obj["start_year"]
                weeks_end_year = weeks_obj["end_year"]
                if (not weeks_start_year or row["Shared"]["Year"] >= weeks_start_year) and (not weeks_end_year or row["Shared"]["Year"] <= weeks_end_year):
                    weeks_per_season = weeks_obj["weeks"]
                
            if not weeks_per_season:
                raise get_constant_data.CustomMessageException("Unknown number of weeks in season " + row["Shared"]["Year"])

            is_first_half = row["Shared"]["TmGm"] / weeks_per_season <= 0.5
            if qual_object["negate"]:
                if is_first_half:
                    return False
            else:
                if not is_first_half:
                    return False

    if "Second Half" in qualifiers:
        for qual_object in qualifiers["Second Half"]:
            weeks_per_season = None
            for weeks_obj in year_weeks_played:
                weeks_start_year = weeks_obj["start_year"]
                weeks_end_year = weeks_obj["end_year"]
                if (not weeks_start_year or row["Shared"]["Year"] >= weeks_start_year) and (not weeks_end_year or row["Shared"]["Year"] <= weeks_end_year):
                    weeks_per_season = weeks_obj["weeks"]
                
            if not weeks_per_season:
                raise get_constant_data.CustomMessageException("Unknown number of weeks in season " + row["Shared"]["Year"])

            is_second_half = row["Shared"]["TmGm"] / weeks_per_season > 0.5
            if qual_object["negate"]:
                if is_second_half:
                    return False
            else:
                if not is_second_half:
                    return False

    if "Games Rest" in qualifiers:
        for qual_object in qualifiers["Games Rest"]:
            if qual_object["negate"]:
                if row["Shared"]["GamesRest"] >= qual_object["values"]["start_val"] and row["Shared"]["GamesRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["GamesRest"] >= qual_object["values"]["start_val"] and row["Shared"]["GamesRest"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts Rest" in qualifiers:
        for qual_object in qualifiers["Starts Rest"]:
            if qual_object["negate"]:
                if row["Shared"]["StartsRest"] >= qual_object["values"]["start_val"] and row["Shared"]["StartsRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["StartsRest"] >= qual_object["values"]["start_val"] and row["Shared"]["StartsRest"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Games In A Row" in qualifiers:
        for qual_object in qualifiers["Games In A Row"]:
            if qual_object["negate"]:
                if row["Shared"]["GamesInARow"] >= qual_object["values"]["start_val"] and row["Shared"]["GamesInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["GamesInARow"] >= qual_object["values"]["start_val"] and row["Shared"]["GamesInARow"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts In A Row" in qualifiers:
        for qual_object in qualifiers["Starts In A Row"]:
            if qual_object["negate"]:
                if row["Shared"]["StartsInARow"] >= qual_object["values"]["start_val"] and row["Shared"]["StartsInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["StartsInARow"] >= qual_object["values"]["start_val"] and row["Shared"]["StartsInARow"] <= qual_object["values"]["end_val"]):
                    return False

    if "Team Before Bye" in qualifiers:
        if not "TmBeforeBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Team Before Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["TmBeforeBye"]:
                    return False
            else:
                if not row["Shared"]["TmBeforeBye"]:
                    return False

    if "Team After Bye" in qualifiers:
        if not "TmAfterBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Team After Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["TmAfterBye"]:
                    return False
            else:
                if not row["Shared"]["TmAfterBye"]:
                    return False
    
    if "Team Before Playoffs Bye" in qualifiers:
        if not "TmBeforePlayoffsBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Team Before Playoffs Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["TmBeforePlayoffsBye"]:
                    return False
            else:
                if not row["Shared"]["TmBeforePlayoffsBye"]:
                    return False

    if "Team After Playoffs Bye" in qualifiers:
        if not "TmAfterPlayoffsBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Team After Playoffs Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["TmAfterPlayoffsBye"]:
                    return False
            else:
                if not row["Shared"]["TmAfterPlayoffsBye"]:
                    return False
    
    if "Team Game Before Bye" in qualifiers:
        if not "TmGameBeforeBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Team Game Before Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["TmGameBeforeBye"]:
                    return False
            else:
                if not row["Shared"]["TmGameBeforeBye"]:
                    return False

    if "Team Game After Bye" in qualifiers:
        if not "TmGameAfterBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Team Game After Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["TmGameAfterBye"]:
                    return False
            else:
                if not row["Shared"]["TmGameAfterBye"]:
                    return False
    
    if "Team Had Bye" in qualifiers:
        if not "TmHadBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Team Had Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["TmHadBye"]:
                    return False
            else:
                if not row["Shared"]["TmHadBye"]:
                    return False

    if "Previous Team Result" in qualifiers:
        if not row["Shared"]["Previous Team Result"]:
            return False
        for qual_object in qualifiers["Previous Team Result"]:
            if qual_object["negate"]:
                if row["Shared"]["Previous Team Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Previous Team Result"] in qual_object["values"]:
                    return False

    if "Upcoming Team Result" in qualifiers:
        if not row["Shared"]["Upcoming Team Result"]:
            return False
        for qual_object in qualifiers["Upcoming Team Result"]:
            if qual_object["negate"]:
                if row["Shared"]["Upcoming Team Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["Upcoming Team Result"] in qual_object["values"]:
                    return False
    
    return True

def handle_injury_stats(player_data, all_rows, qualifiers):
    all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
    seasons = []
    for row_data in all_rows:
        if row_data["Shared"]["Year"] >= 2009:
            if not {row_data["Shared"]["Year"], row_data["Shared"]["RawTm"]} in [{season["Year"], season["Tm"]} for season in seasons]:
                seasons.append({
                    "Year" : row_data["Shared"]["Year"],
                    "Tm" : row_data["Shared"]["RawTm"]
                })
    
    team_schedule = get_injury_schedule(player_data, seasons)
    for da_year in team_schedule:
        for season_obj in team_schedule[da_year]:
            team = season_obj["team"]
            for row_data in all_rows:
                if row_data["Shared"]["Year"] == da_year and row_data["Shared"]["RawTm"] == team:
                    has_match = False
                    for data in season_obj["games"]:
                        if row_data["Shared"]["Date"] == data["Date"]:
                            row_data["Shared"]["Status"] = data["Status"]
                            row_data["Shared"]["Injury"] = data["Injury"]
                            has_match = True
                            break
                    
                    if not has_match:
                        row_data["Shared"]["Status"] = None
                        row_data["Shared"]["Injury"] = None
    
    new_rows = []
    for row in all_rows:
        if perform_injury_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def perform_injury_qualifiers(row, qualifiers):
    if "Probable" in qualifiers:
        if not "Status" in row["Shared"]:
            return False

        for qual_object in qualifiers["Probable"]:
            if qual_object["negate"]:
                if row["Shared"]["Status"] == "P":
                    return False
            else:
                if not row["Shared"]["Status"] == "P":
                    return False
    
    if "Questionable" in qualifiers:
        if not "Status" in row["Shared"]:
            return False

        for qual_object in qualifiers["Questionable"]:
            if qual_object["negate"]:
                if row["Shared"]["Status"] == "Q":
                    return False
            else:
                if not row["Shared"]["Status"] == "Q":
                    return False
    
    if "Doubtful" in qualifiers:
        if not "Status" in row["Shared"]:
            return False

        for qual_object in qualifiers["Doubtful"]:
            if qual_object["negate"]:
                if row["Shared"]["Status"] == "D":
                    return False
            else:
                if not row["Shared"]["Status"] == "D":
                    return False
    
    if "Injured" in qualifiers:
        if not "Status" in row["Shared"]:
            return False

        for qual_object in qualifiers["Injured"]:
            if qual_object["negate"]:
                if row["Shared"]["Status"]:
                    return False
            else:
                if not row["Shared"]["Status"]:
                    return False
    
    if "Injury" in qualifiers:
        if not "Injury" in row["Shared"]:
            return False
            
        for qual_object in qualifiers["Injury"]:
            has_match = False
            for value in qual_object["values"]:
                if row["Shared"]["Injury"] and value in row["Shared"]["Injury"].lower():
                    has_match = True
                break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    return True

def handle_spread_stats(player_data, all_rows, qualifiers):
    all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
    seasons = []
    for row_data in all_rows:
        if row_data["Shared"]["Year"] >= 1978:
            if not {row_data["Shared"]["Year"], row_data["Shared"]["RawTm"]} in [{season["Year"], season["Tm"]} for season in seasons]:
                seasons.append({
                    "Year" : row_data["Shared"]["Year"],
                    "Tm" : row_data["Shared"]["RawTm"]
                })
    
    team_schedule = get_spread_schedule(player_data, seasons)
    for da_year in team_schedule:
        for season_obj in team_schedule[da_year]:
            team = season_obj["team"]
            for row_data in all_rows:
                if row_data["Shared"]["Year"] == da_year and row_data["Shared"]["RawTm"] == team:
                    has_match = False
                    for data in season_obj["games"]:
                        if row_data["Shared"]["Date"] == data["Date"]:
                            row_data["Shared"]["Spread"] = data["Spread"]
                            if row_data["Shared"]["Year"] >= 1979:
                                row_data["Shared"]["OverUnder"] = data["OverUnder"]
                            
                            score_margin = (row_data["Shared"]["Team Score"] - row_data["Shared"]["Opponent Score"]) + data["Spread"]
                            row_data["Shared"]["SpreadMargin"] = score_margin
                            if score_margin > 0:
                                row_data["Shared"]["ATSTeamW"] = 1
                            elif score_margin < 0:
                                row_data["Shared"]["ATSTeamL"] = 1
                            else:
                                row_data["Shared"]["ATSTeamT"] = 1
                            
                            over_under_margin = (row_data["Shared"]["Team Score"] + row_data["Shared"]["Opponent Score"]) - data["OverUnder"]
                            row_data["Shared"]["OverUnderMargin"] = over_under_margin
                            if over_under_margin > 0:
                                row_data["Shared"]["OUTeamW"] = 1
                            elif over_under_margin < 0:
                                row_data["Shared"]["OUTeamL"] = 1
                            else:
                                row_data["Shared"]["OUTeamT"] = 1

                            has_match = True
                            break
                    
                    if not has_match:
                        row_data["Shared"]["Spread"] = None
                        row_data["Shared"]["SpreadMargin"] = None
                        if row_data["Shared"]["Year"] >= 1979:
                            row_data["Shared"]["OverUnder"] = None
                            row_data["Shared"]["OverUnderMargin"] = None
                    
                    row_data["Shared"]["RawSpread"] = row_data["Shared"]["Spread"]
    
    new_rows = []
    for row in all_rows:
        if perform_spread_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def perform_spread_qualifiers(row, qualifiers):
    if "Spread" in qualifiers:
        if "Spread" not in row["Shared"] or row["Shared"]["Spread"] == None:
            return False

        for qual_object in qualifiers["Spread"]:
            if qual_object["negate"]:
                if row["Shared"]["Spread"] >= qual_object["values"]["start_val"] and row["Shared"]["Spread"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["Spread"] >= qual_object["values"]["start_val"] and row["Shared"]["Spread"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Over/Under" in qualifiers:
        if "OverUnder" not in row["Shared"] or row["Shared"]["OverUnder"] == None:
            return False

        for qual_object in qualifiers["Over/Under"]:
            if qual_object["negate"]:
                if row["Shared"]["OverUnder"] >= qual_object["values"]["start_val"] and row["Shared"]["OverUnder"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["OverUnder"] >= qual_object["values"]["start_val"] and row["Shared"]["OverUnder"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Spread Margin" in qualifiers:
        if "SpreadMargin" not in row["Shared"] or row["Shared"]["SpreadMargin"] == None:
            return False

        for qual_object in qualifiers["Spread Margin"]:
            if qual_object["negate"]:
                if row["Shared"]["SpreadMargin"] >= qual_object["values"]["start_val"] and row["Shared"]["SpreadMargin"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["SpreadMargin"] >= qual_object["values"]["start_val"] and row["Shared"]["SpreadMargin"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Over/Under Margin" in qualifiers:
        if "OverUnderMargin" not in row["Shared"] or row["Shared"]["OverUnderMargin"] == None:
            return False

        for qual_object in qualifiers["Over/Under Margin"]:
            if qual_object["negate"]:
                if row["Shared"]["OverUnderMargin"] >= qual_object["values"]["start_val"] and row["Shared"]["OverUnderMargin"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["OverUnderMargin"] >= qual_object["values"]["start_val"] and row["Shared"]["OverUnderMargin"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Underdog" in qualifiers:
        if "Spread" not in row["Shared"] or row["Shared"]["Spread"] == None:
            return False

        for qual_object in qualifiers["Underdog"]:
            if qual_object["negate"]:
                if row["Shared"]["Spread"] > 0:
                    return False
            else:
                if not row["Shared"]["Spread"] > 0:
                    return False
    
    if "Favorite" in qualifiers:
        if "Spread" not in row["Shared"] or row["Shared"]["Spread"] == None:
            return False

        for qual_object in qualifiers["Favorite"]:
            if qual_object["negate"]:
                if row["Shared"]["Spread"] < 0:
                    return False
            else:
                if not row["Shared"]["Spread"] < 0:
                    return False

    return True

def handle_opponent_schedule_stats(all_rows, qualifiers):
    all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
    seasons = []
    for row_data in all_rows:
        if not row_data["Shared"]["Year"] in [season["Year"] for season in seasons]:
            seasons.append({
                "Year" : row_data["Shared"]["Year"]
            })

    has_offensive_stats = "Winning Opponent" in qualifiers or "Losing Opponent" in qualifiers or "Tied Opponent" in qualifiers or "Winning Or Tied Opponent" in qualifiers or "Losing Or Tied Opponent" in qualifiers or "Playoff Opponent" in qualifiers or "Champ Winner Opponent" in qualifiers or "Conference Winner Opponent" in qualifiers or "Division Winner Opponent" in qualifiers or "Opponent Points Rank" in qualifiers or "Opponent Yards Rank" in qualifiers or "Opponent Pass TD Rank" in qualifiers or "Opponent Pass Yards Rank" in qualifiers or "Opponent Rush TD Rank" in qualifiers or "Opponent Rush Yards Rank" in qualifiers or "Opponent ANY/A Rank" in qualifiers or "Opponent Passer Rating Rank" in qualifiers or "Opponent Win Percentage" in qualifiers or "Winning Team" in qualifiers or "Losing Team" in qualifiers or "Tied Team" in qualifiers or "Winning Or Tied Team" in qualifiers or "Losing Or Tied Team" in qualifiers or "Playoff Team" in qualifiers or "Champ Winner Team" in qualifiers or "Conference Winner Team" in qualifiers or "Division Winner Team" in qualifiers or "Team Points Rank" in qualifiers or "Team Yards Rank" in qualifiers or "Team Pass TD Rank" in qualifiers or "Team Pass Yards Rank" in qualifiers or "Team Rush TD Rank" in qualifiers or "Team Rush Yards Rank" in qualifiers or "Team ANY/A Rank" in qualifiers or "Team Passer Rating Rank" in qualifiers or "Team Win Percentage" in qualifiers or "Opponent League" in qualifiers or "Opponent Conference" in qualifiers or "Opponent Division" in qualifiers or "Intraleague" in qualifiers or "Interleague" in qualifiers or "Intraconference" in qualifiers  or "Interconference" in qualifiers or "Intradivision" in qualifiers or "Interdivision" in qualifiers or "Team Wins" in qualifiers or "Team Losses" in qualifiers or "Team Ties" in qualifiers or "Opponent Wins" in qualifiers or "Opponent Losses" in qualifiers or "Opponent Ties" in qualifiers
    has_defensive_stats = "Opponent Points Allowed Rank" in qualifiers or "Opponent Yards Allowed Rank" in qualifiers or "Opponent Pass TD Allowed Rank" in qualifiers or "Opponent Pass Yards Allowed Rank" in qualifiers or "Opponent Rush TD Allowed Rank" in qualifiers or "Opponent Rush Yards Allowed Rank" in qualifiers or "Opponent ANY/A Allowed Rank" in qualifiers or "Opponent Passer Rating Allowed Rank" in qualifiers or "Team Points Allowed Rank" in qualifiers or "Team Yards Allowed Rank" in qualifiers or "Team Pass TD Allowed Rank" in qualifiers or "Team Pass Yards Allowed Rank" in qualifiers or "Team Rush TD Allowed Rank" in qualifiers or "Team Rush Yards Allowed Rank" in qualifiers or "Team ANY/A Allowed Rank" in qualifiers or "Team Passer Rating Allowed Rank" in qualifiers 
    fantasy_stats = set()
    if "Team Fantasy Position Rank" in qualifiers:
        for qual_object in qualifiers["Team Fantasy Position Rank"]:
            fantasy_stats.add(qual_object["values"]["position"])
    if "Opponent Fantasy Position Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Fantasy Position Rank"]:
            fantasy_stats.add(qual_object["values"]["position"])
            
    opponent_schedule = get_opponent_schedule(seasons, has_offensive_stats, has_defensive_stats, fantasy_stats)
    for row_data in all_rows:
        if row_data["Shared"]["Year"] in opponent_schedule:
            opponents_data = opponent_schedule[row_data["Shared"]["Year"]]
            if "RawOpponent" in row_data["Shared"] and row_data["Shared"]["RawOpponent"].upper() in opponents_data:
                opponent_data = opponents_data[row_data["Shared"]["RawOpponent"].upper()]

                if has_offensive_stats:
                    row_data["Shared"]["OppChampWinner"] = opponent_data["WSWinner"]
                    row_data["Shared"]["OppConfWinner"] = opponent_data["ConfWinner"]
                    row_data["Shared"]["OppDivisionWinner"] = opponent_data["DivisionWinner"]
                    row_data["Shared"]["OppWildCard"] = opponent_data["WildCard"]
                    row_data["Shared"]["OppWins"] = opponent_data["Wins"]
                    row_data["Shared"]["OppLosses"] = opponent_data["Losses"]
                    row_data["Shared"]["OppTies"] = opponent_data["Ties"]
                    row_data["Shared"]["OppPoints"] = opponent_data["Points"]
                    row_data["Shared"]["OppPointsDiff"] = opponent_data["PointsDiff"]
                    row_data["Shared"]["OppYards"] = opponent_data["Yards"]
                    row_data["Shared"]["OppPassTD"] = opponent_data["PassTD"]
                    row_data["Shared"]["OppPassYards"] = opponent_data["PassYards"]
                    row_data["Shared"]["OppRushTD"] = opponent_data["RushTD"]
                    row_data["Shared"]["OppRushYards"] = opponent_data["RushYards"]
                    row_data["Shared"]["OppANY/A"] = opponent_data["ANY/A"]
                    row_data["Shared"]["OppPasserRating"] = opponent_data["PasserRating"]
                    row_data["Shared"]["OppPointsRank"] = opponent_data["PointsRank"]
                    row_data["Shared"]["OppPointsDiffRank"] = opponent_data["PointsDiffRank"]
                    row_data["Shared"]["OppYardsRank"] = opponent_data["YardsRank"]
                    row_data["Shared"]["OppPassTDRank"] = opponent_data["PassTDRank"]
                    row_data["Shared"]["OppPassYardsRank"] = opponent_data["PassYardsRank"]
                    row_data["Shared"]["OppRushTDRank"] = opponent_data["RushTDRank"]
                    row_data["Shared"]["OppRushYardsRank"] = opponent_data["RushYardsRank"]
                    row_data["Shared"]["OppANY/ARank"] = opponent_data["ANY/ARank"]
                    row_data["Shared"]["OppPasserRatingRank"] = opponent_data["PasserRatingRank"]
                    row_data["Shared"]["OppReversePointsRank"] = opponent_data["ReversePointsRank"]
                    row_data["Shared"]["OppReversePointsDiffRank"] = opponent_data["ReversePointsDiffRank"]
                    row_data["Shared"]["OppReverseYardsRank"] = opponent_data["ReverseYardsRank"]
                    row_data["Shared"]["OppReversePassTDRank"] = opponent_data["ReversePassTDRank"]
                    row_data["Shared"]["OppReversePassYardsRank"] = opponent_data["ReversePassYardsRank"]
                    row_data["Shared"]["OppReverseRushTDRank"] = opponent_data["ReverseRushTDRank"]
                    row_data["Shared"]["OppReverseRushYardsRank"] = opponent_data["ReverseRushYardsRank"]
                    row_data["Shared"]["OppReverseANY/ARank"] = opponent_data["ReverseANY/ARank"]
                    row_data["Shared"]["OppReversePasserRatingRank"] = opponent_data["ReversePasserRatingRank"]

                    row_data["Shared"]["OppPointsRankRate"] = opponent_data["PointsRankRate"]
                    row_data["Shared"]["OppYardsRankRate"] = opponent_data["YardsRankRate"]
                    row_data["Shared"]["OppPassTDRankRate"] = opponent_data["PassTDRankRate"]
                    row_data["Shared"]["OppPassYardsRankRate"] = opponent_data["PassYardsRankRate"]
                    row_data["Shared"]["OppRushTDRankRate"] = opponent_data["RushTDRankRate"]
                    row_data["Shared"]["OppRushYardsRankRate"] = opponent_data["RushYardsRankRate"]
                    row_data["Shared"]["OppReversePointsRankRate"] = opponent_data["ReversePointsRankRate"]
                    row_data["Shared"]["OppReverseYardsRankRate"] = opponent_data["ReverseYardsRankRate"]
                    row_data["Shared"]["OppReversePassTDRankRate"] = opponent_data["ReversePassTDRankRate"]
                    row_data["Shared"]["OppReversePassYardsRankRate"] = opponent_data["ReversePassYardsRankRate"]
                    row_data["Shared"]["OppReverseRushTDRankRate"] = opponent_data["ReverseRushTDRankRate"]
                    row_data["Shared"]["OppReverseRushYardsRankRate"] = opponent_data["ReverseRushYardsRankRate"]
                    
                    row_data["Shared"]["OppLeague"] = opponent_data["League"]
                    row_data["Shared"]["OppConference"] = opponent_data["Conference"]
                    row_data["Shared"]["OppDivision"] = opponent_data["Division"]

                if has_defensive_stats:
                    row_data["Shared"]["OppPointsAllowed"] = opponent_data["PointsAllowed"]
                    row_data["Shared"]["OppYardsAllowed"] = opponent_data["YardsAllowed"]
                    row_data["Shared"]["OppPassTDAllowed"] = opponent_data["PassTDAllowed"]
                    row_data["Shared"]["OppPassYardsAllowed"] = opponent_data["PassYardsAllowed"]
                    row_data["Shared"]["OppRushTDAllowed"] = opponent_data["RushTDAllowed"]
                    row_data["Shared"]["OppRushYardsAllowed"] = opponent_data["RushYardsAllowed"]
                    row_data["Shared"]["OppANY/AAllowed"] = opponent_data["ANY/AAllowed"]
                    row_data["Shared"]["OppPasserRatingAllowed"] = opponent_data["PasserRatingAllowed"]
                    row_data["Shared"]["OppPointsAllowedRank"] = opponent_data["PointsAllowedRank"]
                    row_data["Shared"]["OppYardsAllowedRank"] = opponent_data["YardsAllowedRank"]
                    row_data["Shared"]["OppPassTDAllowedRank"] = opponent_data["PassTDAllowedRank"]
                    row_data["Shared"]["OppPassYardsAllowedRank"] = opponent_data["PassYardsAllowedRank"]
                    row_data["Shared"]["OppRushTDAllowedRank"] = opponent_data["RushTDAllowedRank"]
                    row_data["Shared"]["OppRushYardsAllowedRank"] = opponent_data["RushYardsAllowedRank"]
                    row_data["Shared"]["OppANY/AAllowedRank"] = opponent_data["ANY/AAllowedRank"]
                    row_data["Shared"]["OppPasserRatingAllowedRank"] = opponent_data["PasserRatingAllowedRank"]
                    row_data["Shared"]["OppReversePointsAllowedRank"] = opponent_data["ReversePointsAllowedRank"]
                    row_data["Shared"]["OppReverseYardsAllowedRank"] = opponent_data["ReverseYardsAllowedRank"]
                    row_data["Shared"]["OppReversePassTDAllowedRank"] = opponent_data["ReversePassTDAllowedRank"]
                    row_data["Shared"]["OppReversePassYardsAllowedRank"] = opponent_data["ReversePassYardsAllowedRank"]
                    row_data["Shared"]["OppReverseRushTDAllowedRank"] = opponent_data["ReverseRushTDAllowedRank"]
                    row_data["Shared"]["OppReverseRushYardsAllowedRank"] = opponent_data["ReverseRushYardsAllowedRank"]
                    row_data["Shared"]["OppReverseANY/AAllowedRank"] = opponent_data["ReverseANY/AAllowedRank"]
                    row_data["Shared"]["OppReversePasserRatingAllowedRank"] = opponent_data["ReversePasserRatingAllowedRank"]

                    row_data["Shared"]["OppPointsAllowedRankRate"] = opponent_data["PointsAllowedRankRate"]
                    row_data["Shared"]["OppYardsAllowedRankRate"] = opponent_data["YardsAllowedRankRate"]
                    row_data["Shared"]["OppPassTDAllowedRankRate"] = opponent_data["PassTDAllowedRankRate"]
                    row_data["Shared"]["OppPassYardsAllowedRankRate"] = opponent_data["PassYardsAllowedRankRate"]
                    row_data["Shared"]["OppRushTDAllowedRankRate"] = opponent_data["RushTDAllowedRankRate"]
                    row_data["Shared"]["OppRushYardsAllowedRankRate"] = opponent_data["RushYardsAllowedRankRate"]
                    row_data["Shared"]["OppReversePointsAllowedRankRate"] = opponent_data["ReversePointsAllowedRankRate"]
                    row_data["Shared"]["OppReverseYardsAllowedRankRate"] = opponent_data["ReverseYardsAllowedRankRate"]
                    row_data["Shared"]["OppReversePassTDAllowedRankRate"] = opponent_data["ReversePassTDAllowedRankRate"]
                    row_data["Shared"]["OppReversePassYardsAllowedRankRate"] = opponent_data["ReversePassYardsAllowedRankRate"]
                    row_data["Shared"]["OppReverseRushTDAllowedRankRate"] = opponent_data["ReverseRushTDAllowedRankRate"]
                    row_data["Shared"]["OppReverseRushYardsAllowedRankRate"] = opponent_data["ReverseRushYardsAllowedRankRate"]

                if fantasy_stats:
                    for position in fantasy_stats:
                        row_data["Shared"]["OppFantasyPositionPoints" + position] = opponent_data["FantasyPositionPoints" + position]
                        row_data["Shared"]["OppFantasyPositionPointsRate" + position] = opponent_data["FantasyPositionPoints" + position]

                        row_data["Shared"]["OppFantasyPositionRank" + position] = opponent_data["FantasyPositionRank" + position]
                        row_data["Shared"]["OppReverseFantasyPositionRank" + position] = opponent_data["ReverseFantasyPositionRank" + position]
                        row_data["Shared"]["OppFantasyPositionRankRate" + position] = opponent_data["FantasyPositionRank" + position]
                        row_data["Shared"]["OppReverseFantasyPositionRankRate" + position] = opponent_data["ReverseFantasyPositionRank" + position]
                
            if row_data["Shared"]["RawTm"].upper() in opponents_data:
                team_data = opponents_data[row_data["Shared"]["RawTm"].upper()]

                if has_offensive_stats:
                    row_data["Shared"]["TmChampWinner"] = team_data["WSWinner"]
                    row_data["Shared"]["TmConfWinner"] = team_data["ConfWinner"]
                    row_data["Shared"]["TmDivisionWinner"] = team_data["DivisionWinner"]
                    row_data["Shared"]["TmWildCard"] = team_data["WildCard"]
                    row_data["Shared"]["TmWins"] = team_data["Wins"]
                    row_data["Shared"]["TmLosses"] = team_data["Losses"]
                    row_data["Shared"]["TmTies"] = team_data["Ties"]
                    row_data["Shared"]["TmPoints"] = team_data["Points"]
                    row_data["Shared"]["TmPointsDiff"] = team_data["PointsDiff"]
                    row_data["Shared"]["TmYards"] = team_data["Yards"]
                    row_data["Shared"]["TmPassTD"] = team_data["PassTD"]
                    row_data["Shared"]["TmPassYards"] = team_data["PassYards"]
                    row_data["Shared"]["TmRushTD"] = team_data["RushTD"]
                    row_data["Shared"]["TmRushYards"] = team_data["RushYards"]
                    row_data["Shared"]["TmANY/A"] = team_data["ANY/A"]
                    row_data["Shared"]["TmPasserRating"] = team_data["PasserRating"]
                    row_data["Shared"]["TmPointsRank"] = team_data["PointsRank"]
                    row_data["Shared"]["TmPointsDiffRank"] = team_data["PointsDiffRank"]
                    row_data["Shared"]["TmYardsRank"] = team_data["YardsRank"]
                    row_data["Shared"]["TmPassTDRank"] = team_data["PassTDRank"]
                    row_data["Shared"]["TmPassYardsRank"] = team_data["PassYardsRank"]
                    row_data["Shared"]["TmRushTDRank"] = team_data["RushTDRank"]
                    row_data["Shared"]["TmRushYardsRank"] = team_data["RushYardsRank"]
                    row_data["Shared"]["TmANY/ARank"] = team_data["ANY/ARank"]
                    row_data["Shared"]["TmPasserRatingRank"] = team_data["PasserRatingRank"]
                    row_data["Shared"]["TmReversePointsRank"] = team_data["ReversePointsRank"]
                    row_data["Shared"]["TmReversePointsDiffRank"] = team_data["ReversePointsDiffRank"]
                    row_data["Shared"]["TmReverseYardsRank"] = team_data["ReverseYardsRank"]
                    row_data["Shared"]["TmReversePassTDRank"] = team_data["ReversePassTDRank"]
                    row_data["Shared"]["TmReversePassYardsRank"] = team_data["ReversePassYardsRank"]
                    row_data["Shared"]["TmReverseRushTDRank"] = team_data["ReverseRushTDRank"]
                    row_data["Shared"]["TmReverseRushYardsRank"] = team_data["ReverseRushYardsRank"]
                    row_data["Shared"]["TmReverseANY/ARank"] = team_data["ReverseANY/ARank"]
                    row_data["Shared"]["TmReversePasserRatingRank"] = team_data["ReversePasserRatingRank"]

                    row_data["Shared"]["TmPointsRankRate"] = team_data["PointsRankRate"]
                    row_data["Shared"]["TmYardsRankRate"] = team_data["YardsRankRate"]
                    row_data["Shared"]["TmPassTDRankRate"] = team_data["PassTDRankRate"]
                    row_data["Shared"]["TmPassYardsRankRate"] = team_data["PassYardsRankRate"]
                    row_data["Shared"]["TmRushTDRankRate"] = team_data["RushTDRankRate"]
                    row_data["Shared"]["TmRushYardsRankRate"] = team_data["RushYardsRankRate"]
                    row_data["Shared"]["TmReversePointsRankRate"] = team_data["ReversePointsRankRate"]
                    row_data["Shared"]["TmReverseYardsRankRate"] = team_data["ReverseYardsRankRate"]
                    row_data["Shared"]["TmReversePassTDRankRate"] = team_data["ReversePassTDRankRate"]
                    row_data["Shared"]["TmReversePassYardsRankRate"] = team_data["ReversePassYardsRankRate"]
                    row_data["Shared"]["TmReverseRushTDRankRate"] = team_data["ReverseRushTDRankRate"]
                    row_data["Shared"]["TmReverseRushYardsRankRate"] = team_data["ReverseRushYardsRankRate"]
                    
                    row_data["Shared"]["TmLeague"] = team_data["League"]
                    row_data["Shared"]["TmConference"] = team_data["Conference"]
                    row_data["Shared"]["TmDivision"] = team_data["Division"]

                if has_defensive_stats:
                    row_data["Shared"]["TmPointsAllowed"] = team_data["PointsAllowed"]
                    row_data["Shared"]["TmYardsAllowed"] = team_data["YardsAllowed"]
                    row_data["Shared"]["TmPassTDAllowed"] = team_data["PassTDAllowed"]
                    row_data["Shared"]["TmPassYardsAllowed"] = team_data["PassYardsAllowed"]
                    row_data["Shared"]["TmRushTDAllowed"] = team_data["RushTDAllowed"]
                    row_data["Shared"]["TmRushYardsAllowed"] = team_data["RushYardsAllowed"]
                    row_data["Shared"]["TmANY/AAllowed"] = team_data["ANY/AAllowed"]
                    row_data["Shared"]["TmPasserRatingAllowed"] = team_data["PasserRatingAllowed"]
                    row_data["Shared"]["TmPointsAllowedRank"] = team_data["PointsAllowedRank"]
                    row_data["Shared"]["TmYardsAllowedRank"] = team_data["YardsAllowedRank"]
                    row_data["Shared"]["TmPassTDAllowedRank"] = team_data["PassTDAllowedRank"]
                    row_data["Shared"]["TmPassYardsAllowedRank"] = team_data["PassYardsAllowedRank"]
                    row_data["Shared"]["TmRushTDAllowedRank"] = team_data["RushTDAllowedRank"]
                    row_data["Shared"]["TmRushYardsAllowedRank"] = team_data["RushYardsAllowedRank"]
                    row_data["Shared"]["TmANY/AAllowedRank"] = team_data["ANY/AAllowedRank"]
                    row_data["Shared"]["TmPasserRatingAllowedRank"] = team_data["PasserRatingAllowedRank"]
                    row_data["Shared"]["TmReversePointsAllowedRank"] = team_data["ReversePointsAllowedRank"]
                    row_data["Shared"]["TmReverseYardsAllowedRank"] = team_data["ReverseYardsAllowedRank"]
                    row_data["Shared"]["TmReversePassTDAllowedRank"] = team_data["ReversePassTDAllowedRank"]
                    row_data["Shared"]["TmReversePassYardsAllowedRank"] = team_data["ReversePassYardsAllowedRank"]
                    row_data["Shared"]["TmReverseRushTDAllowedRank"] = team_data["ReverseRushTDAllowedRank"]
                    row_data["Shared"]["TmReverseRushYardsAllowedRank"] = team_data["ReverseRushYardsAllowedRank"]
                    row_data["Shared"]["TmReverseANY/AAllowedRank"] = team_data["ReverseANY/AAllowedRank"]
                    row_data["Shared"]["TmReversePasserRatingAllowedRank"] = team_data["ReversePasserRatingAllowedRank"]

                    row_data["Shared"]["TmPointsAllowedRankRate"] = team_data["PointsAllowedRankRate"]
                    row_data["Shared"]["TmYardsAllowedRankRate"] = team_data["YardsAllowedRankRate"]
                    row_data["Shared"]["TmPassTDAllowedRankRate"] = team_data["PassTDAllowedRankRate"]
                    row_data["Shared"]["TmPassYardsAllowedRankRate"] = team_data["PassYardsAllowedRankRate"]
                    row_data["Shared"]["TmRushTDAllowedRankRate"] = team_data["RushTDAllowedRankRate"]
                    row_data["Shared"]["TmRushYardsAllowedRankRate"] = team_data["RushYardsAllowedRankRate"]
                    row_data["Shared"]["TmReversePointsAllowedRankRate"] = team_data["ReversePointsAllowedRankRate"]
                    row_data["Shared"]["TmReverseYardsAllowedRankRate"] = team_data["ReverseYardsAllowedRankRate"]
                    row_data["Shared"]["TmReversePassTDAllowedRankRate"] = team_data["ReversePassTDAllowedRankRate"]
                    row_data["Shared"]["TmReversePassYardsAllowedRankRate"] = team_data["ReversePassYardsAllowedRankRate"]
                    row_data["Shared"]["TmReverseRushTDAllowedRankRate"] = team_data["ReverseRushTDAllowedRankRate"]
                    row_data["Shared"]["TmReverseRushYardsAllowedRankRate"] = team_data["ReverseRushYardsAllowedRankRate"]

                if fantasy_stats:
                    for position in fantasy_stats:
                        row_data["Shared"]["TmFantasyPositionPoints" + position] = team_data["FantasyPositionPoints" + position]
                        row_data["Shared"]["TmFantasyPositionPointsRate" + position] = team_data["FantasyPositionPoints" + position]

                        row_data["Shared"]["TmFantasyPositionRank" + position] = team_data["FantasyPositionRank" + position]
                        row_data["Shared"]["TmReverseFantasyPositionRank" + position] = team_data["ReverseFantasyPositionRank" + position]
                        row_data["Shared"]["TmFantasyPositionRankRate" + position] = team_data["FantasyPositionRank" + position]
                        row_data["Shared"]["TmReverseFantasyPositionRankRate" + position] = team_data["ReverseFantasyPositionRank" + position]

    new_rows = []
    for row in all_rows:
        if perform_opponent_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def perform_opponent_schedule_qualifiers(row, qualifiers):
    if "Winning Opponent" in qualifiers:
        opponent_match = row["Shared"]["OppWins"] > row["Shared"]["OppLosses"]
        for qual_object in qualifiers["Winning Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Losing Opponent" in qualifiers:
        opponent_match = row["Shared"]["OppWins"] < row["Shared"]["OppLosses"]
        for qual_object in qualifiers["Losing Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Tied Opponent" in qualifiers:   
        opponent_match = row["Shared"]["OppWins"] == row["Shared"]["OppLosses"]
        for qual_object in qualifiers["Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Winning Or Tied Opponent" in qualifiers:
        opponent_match = row["Shared"]["OppWins"] >= row["Shared"]["OppLosses"]
        for qual_object in qualifiers["Winning Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    
    if "Losing Or Tied Opponent" in qualifiers:
        opponent_match = row["Shared"]["OppWins"] <= row["Shared"]["OppLosses"]
        for qual_object in qualifiers["Losing Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Playoff Opponent" in qualifiers:
        if row["Shared"]["OppWildCard"] == None and row["Shared"]["OppDivisionWinner"]:
            return False

        opponent_playoffs = row["Shared"]["OppWildCard"] or row["Shared"]["OppDivisionWinner"] 
        for qual_object in qualifiers["Playoff Opponent"]:
            if qual_object["negate"]:
                if opponent_playoffs:
                    return False
            else:
                if not opponent_playoffs:
                    return False
    
    if "Champ Winner Opponent" in qualifiers:
        if row["Shared"]["OppChampWinner"] == None:
            return False

        for qual_object in qualifiers["Champ Winner Opponent"]:
            if qual_object["negate"]:
                if row["Shared"]["OppChampWinner"]:
                    return False
            else:
                if not row["Shared"]["OppChampWinner"]:
                    return False
    
    if "Conference Winner Opponent" in qualifiers:
        if row["Shared"]["OppConfWinner"] == None:
            return False

        for qual_object in qualifiers["Conference Winner Opponent"]:
            if qual_object["negate"]:
                if row["Shared"]["OppConfWinner"]:
                    return False
            else:
                if not row["Shared"]["OppConfWinner"]:
                    return False
    
    if "Division Winner Opponent" in qualifiers:
        if row["Shared"]["OppDivisionWinner"] == None:
            return False

        for qual_object in qualifiers["Division Winner Opponent"]:
            if qual_object["negate"]:
                if row["Shared"]["OppDivisionWinner"]:
                    return False
            else:
                if not row["Shared"]["OppDivisionWinner"]:
                    return False
    
    if "Opponent Points Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Points Rank"]:
            rank_str = "OppReversePointsRank" if qual_object["values"]["reverse"] else "OppPointsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Points Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Points Allowed Rank"]:
            rank_str = "OppReversePointsAllowedRank" if qual_object["values"]["reverse"] else "OppPointsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Yards Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Yards Rank"]:
            rank_str = "OppReverseYardsRank" if qual_object["values"]["reverse"] else "OppYardsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Yards Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Yards Allowed Rank"]:
            rank_str = "OppReverseYardsAllowedRank" if qual_object["values"]["reverse"] else "OppYardsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Pass TD Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Pass TD Rank"]:
            rank_str = "OppReversePassTDRank" if qual_object["values"]["reverse"] else "OppPassTDRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Pass TD Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Pass TD Allowed Rank"]:
            rank_str = "OppReversePassTDAllowedRank" if qual_object["values"]["reverse"] else "OppPassTDAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Pass Yards Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Pass Yards Rank"]:
            rank_str = "OppReverseYardsRank" if qual_object["values"]["reverse"] else "OppPassYardsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Pass Yards Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Pass Yards Allowed Rank"]:
            rank_str = "OppReversePassYardsAllowedRank" if qual_object["values"]["reverse"] else "OppPassYardsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Rush TD Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Rush TD Rank"]:
            rank_str = "OppReverseRushTDRank" if qual_object["values"]["reverse"] else "OppRushTDRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Rush TD Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Rush TD Allowed Rank"]:
            rank_str = "OppReverseRushTDAllowedRank" if qual_object["values"]["reverse"] else "OppRushTDAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Rush Yards Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Rush Yards Rank"]:
            rank_str = "OppReverseRushYardsRank" if qual_object["values"]["reverse"] else "OppRushYardsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Rush Yards Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Rush Yards Allowed Rank"]:
            rank_str = "OppReverseRushYardsAllowedRank" if qual_object["values"]["reverse"] else "OppRushYardsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent ANY/A Rank" in qualifiers:
        for qual_object in qualifiers["Opponent ANY/A Rank"]:
            rank_str = "OppReverseANY/ARank" if qual_object["values"]["reverse"] else "OppANY/ARank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent ANY/A Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent ANY/A Allowed Rank"]:
            rank_str = "OppReverseANY/AAllowedRank" if qual_object["values"]["reverse"] else "OppANY/AAllowedRank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Passer Rating Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Passer Rating Rank"]:
            rank_str = "OppReversePasserRatingRank" if qual_object["values"]["reverse"] else "OppPasserRatingRank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Passer Rating Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Passer Rating Allowed Rank"]:
            rank_str = "OppReversePasserRatingAllowedRank" if qual_object["values"]["reverse"] else "OppPasserRatingAllowedRank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Fantasy Position Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Fantasy Position Rank"]:
            rank_str = "OppsFantasyPositionRankRate" if qual_object["values"]["rate"] else "OppFantasyPositionRank"
            rank_str = "Reverse" + rank_str + qual_object["values"]["position"] if qual_object["values"]["reverse"] else rank_str + qual_object["values"]["position"]
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Win Percentage" in qualifiers:
        for qual_object in qualifiers["Opponent Win Percentage"]:
            try:
                win_percentage = row["Shared"]["OppWins"] / (row["Shared"]["OppWins"] + row["Shared"]["OppLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Games Over 500" in qualifiers:
        for qual_object in qualifiers["Opponent Games Over 500"]:
            games_over_500 = row["Shared"]["OppWins"] - row["Shared"]["OppLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Winning Team" in qualifiers:
        team_match = row["Shared"]["TmWins"] > row["Shared"]["TmLosses"]
        for qual_object in qualifiers["Winning Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Losing Team" in qualifiers:
        team_match = row["Shared"]["TmWins"] < row["Shared"]["TmLosses"]
        for qual_object in qualifiers["Losing Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Tied Team" in qualifiers:   
        team_match = row["Shared"]["TmWins"] == row["Shared"]["TmLosses"]
        for qual_object in qualifiers["Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Winning Or Tied Team" in qualifiers:
        team_match = row["Shared"]["TmWins"] >= row["Shared"]["TmLosses"]
        for qual_object in qualifiers["Winning Or Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Losing Or Tied Team" in qualifiers:
        team_match = row["Shared"]["TmWins"] <= row["Shared"]["TmLosses"]
        for qual_object in qualifiers["Losing Or Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Playoff Team" in qualifiers:
        if row["Shared"]["TmWildCard"] == None and row["Shared"]["TmDivisionWinner"]:
            return False

        team_playoffs = row["Shared"]["TmWildCard"] or row["Shared"]["TmDivisionWinner"]
        for qual_object in qualifiers["Playoff Team"]:
            if qual_object["negate"]:
                if team_playoffs:
                    return False
            else:
                if not team_playoffs:
                    return False
    
    if "Champ Winner Team" in qualifiers:
        if row["Shared"]["TmChampWinner"] == None:
            return False

        for qual_object in qualifiers["Champ Winner Team"]:
            if qual_object["negate"]:
                if row["Shared"]["TmChampWinner"]:
                    return False
            else:
                if not row["Shared"]["TmChampWinner"]:
                    return False
    
    if "Conference Winner Team" in qualifiers:
        if row["Shared"]["TmConfWinner"] == None:
            return False

        for qual_object in qualifiers["Conference Winner Team"]:
            if qual_object["negate"]:
                if row["Shared"]["TmConfWinner"]:
                    return False
            else:
                if not row["Shared"]["TmConfWinner"]:
                    return False
    
    if "Division Winner Team" in qualifiers:
        if row["Shared"]["TmDivisionWinner"] == None:
            return False

        for qual_object in qualifiers["Division Winner Team"]:
            if qual_object["negate"]:
                if row["Shared"]["TmDivisionWinner"]:
                    return False
            else:
                if not row["Shared"]["TmDivisionWinner"]:
                    return False
    
    if "Team Points Rank" in qualifiers:
        for qual_object in qualifiers["Team Points Rank"]:
            rank_str = "TmReversePointsRank" if qual_object["values"]["reverse"] else "TmPointsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Points Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Points Allowed Rank"]:
            rank_str = "TmReversePointsAllowedRank" if qual_object["values"]["reverse"] else "TmPointsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Team Yards Rank" in qualifiers:
        for qual_object in qualifiers["Team Yards Rank"]:
            rank_str = "TmReverseYardsRank" if qual_object["values"]["reverse"] else "TmYardsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Yards Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Yards Allowed Rank"]:
            rank_str = "TmReverseYardsAllowedRank" if qual_object["values"]["reverse"] else "TmYardsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Pass TD Rank" in qualifiers:
        for qual_object in qualifiers["Team Pass TD Rank"]:
            rank_str = "TmReversePassTDRank" if qual_object["values"]["reverse"] else "TmPassTDRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Pass TD Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Pass TD Allowed Rank"]:
            rank_str = "TmReversePassTDAllowedRank" if qual_object["values"]["reverse"] else "TmPassTDAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Team Pass Yards Rank" in qualifiers:
        for qual_object in qualifiers["Team Pass Yards Rank"]:
            rank_str = "TmReverseYardsRank" if qual_object["values"]["reverse"] else "TmPassYardsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Pass Yards Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Pass Yards Allowed Rank"]:
            rank_str = "TmReversePassYardsAllowedRank" if qual_object["values"]["reverse"] else "TmPassYardsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Rush TD Rank" in qualifiers:
        for qual_object in qualifiers["Team Rush TD Rank"]:
            rank_str = "TmReverseRushTDRank" if qual_object["values"]["reverse"] else "TmRushTDRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Rush TD Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Rush TD Allowed Rank"]:
            rank_str = "TmReverseRushTDAllowedRank" if qual_object["values"]["reverse"] else "TmRushTDAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Team Rush Yards Rank" in qualifiers:
        for qual_object in qualifiers["Team Rush Yards Rank"]:
            rank_str = "TmReverseRushYardsRank" if qual_object["values"]["reverse"] else "TmRushYardsRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Rush Yards Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Rush Yards Allowed Rank"]:
            rank_str = "TmReverseRushYardsAllowedRank" if qual_object["values"]["reverse"] else "TmRushYardsAllowedRank"
            if qual_object["values"]["rate"]:
                rank_str += "Rate"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team ANY/A Rank" in qualifiers:
        for qual_object in qualifiers["Team ANY/A Rank"]:
            rank_str = "TmReverseANY/ARank" if qual_object["values"]["reverse"] else "TmANY/ARank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team ANY/A Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team ANY/A Allowed Rank"]:
            rank_str = "TmReverseANY/AAllowedRank" if qual_object["values"]["reverse"] else "TmANY/AAllowedRank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Passer Rating Rank" in qualifiers:
        for qual_object in qualifiers["Team Passer Rating Rank"]:
            rank_str = "TmReversePasserRatingRank" if qual_object["values"]["reverse"] else "TmPasserRatingRank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Passer Rating Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Passer Rating Allowed Rank"]:
            rank_str = "TmReversePasserRatingAllowedRank" if qual_object["values"]["reverse"] else "TmPasserRatingAllowedRank"
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Fantasy Position Rank" in qualifiers:
        for qual_object in qualifiers["Team Fantasy Position Rank"]:
            rank_str = "TmFantasyPositionRankRate" if qual_object["values"]["rate"] else "TmFantasyPositionRank"
            rank_str = "Reverse" + rank_str + qual_object["values"]["position"] if qual_object["values"]["reverse"] else rank_str + qual_object["values"]["position"]
            if qual_object["negate"]:
                if row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"][rank_str] >= qual_object["values"]["start_val"] and row["Shared"][rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Win Percentage" in qualifiers:
        for qual_object in qualifiers["Team Win Percentage"]:
            try:
                win_percentage = row["Shared"]["TmWins"] / (row["Shared"]["TmWins"] + row["Shared"]["TmLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Games Over 500" in qualifiers:
        for qual_object in qualifiers["Team Games Over 500"]:
            games_over_500 = row["Shared"]["TmWins"] - row["Shared"]["TmLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Wins" in qualifiers:
        for qual_object in qualifiers["Team Wins"]:
            if qual_object["negate"]:
                if row["Shared"]["TmWins"] >= qual_object["values"]["start_val"] and row["Shared"]["TmWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["TmWins"] >= qual_object["values"]["start_val"] and row["Shared"]["TmWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Losses" in qualifiers:
        for qual_object in qualifiers["Team Losses"]:
            if qual_object["negate"]:
                if row["Shared"]["TmLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["TmLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["TmLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["TmLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Ties" in qualifiers:
        for qual_object in qualifiers["Team Ties"]:
            if qual_object["negate"]:
                if row["Shared"]["TmTies"] >= qual_object["values"]["start_val"] and row["Shared"]["TmTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["TmTies"] >= qual_object["values"]["start_val"] and row["Shared"]["TmTies"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Wins" in qualifiers:
        for qual_object in qualifiers["Opponent Wins"]:
            if qual_object["negate"]:
                if row["Shared"]["OppWins"] >= qual_object["values"]["start_val"] and row["Shared"]["OppWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["OppWins"] >= qual_object["values"]["start_val"] and row["Shared"]["OppWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Losses" in qualifiers:
        for qual_object in qualifiers["Opponent Losses"]:
            if qual_object["negate"]:
                if row["Shared"]["OppLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["OppLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["OppLosses"] >= qual_object["values"]["start_val"] and row["Shared"]["OppLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Ties" in qualifiers:
        for qual_object in qualifiers["Opponent Ties"]:
            if qual_object["negate"]:
                if row["Shared"]["OppTies"] >= qual_object["values"]["start_val"] and row["Shared"]["OppTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Shared"]["OppTies"] >= qual_object["values"]["start_val"] and row["Shared"]["OppTies"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent League" in qualifiers:
        for qual_object in qualifiers["Opponent League"]:
            if qual_object["negate"]:
                if row["Shared"]["OppLeague"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["OppLeague"].lower() in qual_object["values"]:
                    return False
    
    if "Opponent Conference" in qualifiers:
        for qual_object in qualifiers["Opponent Conference"]:
            if qual_object["negate"]:
                if row["Shared"]["OppConference"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["OppConference"].lower() in qual_object["values"]:
                    return False
    
    if "Opponent Division" in qualifiers:
        for qual_object in qualifiers["Opponent Division"]:
            if not row["Shared"]["OppDivision"]:
                return False

            if qual_object["negate"]:
                if row["Shared"]["OppDivision"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Shared"]["OppDivision"].lower() in qual_object["values"]:
                    return False

    return True

def perform_team_opponent_schedule_qualifiers(row, qualifiers):
    if "Interleague" in qualifiers:
        for qual_object in qualifiers["Interleague"]:
            if qual_object["negate"]:
                if row["Shared"]["League"] != row["Shared"]["OppLeague"]:
                    return False
            else:
                if not row["Shared"]["League"] != row["Shared"]["OppLeague"]:
                    return False
    
    if "Intraleague" in qualifiers:
        for qual_object in qualifiers["Intraleague"]:
            if qual_object["negate"]:
                if row["Shared"]["League"] == row["Shared"]["OppLeague"]:
                    return False
            else:
                if not row["Shared"]["League"] == row["Shared"]["OppLeague"]:
                    return False
                    
    if "Interconference" in qualifiers:
        for qual_object in qualifiers["Interconference"]:
            if qual_object["negate"]:
                if row["Shared"]["Conference"] != row["Shared"]["OppConference"]:
                    return False
            else:
                if not row["Shared"]["Conference"] != row["Shared"]["OppConference"]:
                    return False
    
    if "Intraconference" in qualifiers:
        for qual_object in qualifiers["Intraconference"]:
            if qual_object["negate"]:
                if row["Shared"]["Conference"] == row["Shared"]["OppConference"]:
                    return False
            else:
                if not row["Shared"]["Conference"] == row["Shared"]["OppConference"]:
                    return False

    if "Interdivision" in qualifiers:
        if not row["Shared"]["Division"] or not row["Shared"]["OppDivision"]:
            return False

        for qual_object in qualifiers["Interdivision"]:
            if qual_object["negate"]:
                if row["Shared"]["Division"] != row["Shared"]["OppDivision"]:
                    return False
            else:
                if not row["Shared"]["Division"] != row["Shared"]["OppDivision"]:
                    return False
    
    if "Intradivision" in qualifiers:
        if not row["Shared"]["Division"] or not row["Shared"]["OppDivision"]:
            return False

        for qual_object in qualifiers["Intradivision"]:
            if qual_object["negate"]:
                if row["Shared"]["Division"] == row["Shared"]["OppDivision"]:
                    return False
            else:
                if not row["Shared"]["Division"] == row["Shared"]["OppDivision"]:
                    return False
    
    return True

def handle_indv_opponent_schedule_stats(all_rows, qualifiers):
    all_rows = sorted(all_rows, key=lambda row: row["Shared"]["Date"])
    opp_seasons = {}
    for row_data in all_rows:
        if not row_data["Shared"]["RawOpponent"].upper() in opp_seasons:
            opp_seasons[row_data["Shared"]["RawOpponent"].upper()] = []
        if not {row_data["Shared"]["Year"], row_data["Shared"]["RawOpponent"].upper()} in [{season["Year"], season["Tm"]} for season in opp_seasons[row_data["Shared"]["RawOpponent"].upper()]]:
            opp_seasons[row_data["Shared"]["RawOpponent"].upper()].append({
                "Year" : row_data["Shared"]["Year"],
                "Tm" : row_data["Shared"]["RawOpponent"].upper()
            })
        
    for opp_team in opp_seasons:
        seasons = opp_seasons[opp_team]
        team_schedule = get_team_schedule(seasons)

        for da_year in team_schedule:
            for season_obj in team_schedule[da_year]:
                team = season_obj["team"]

                for row_data in all_rows:
                    if row_data["Shared"]["Year"] == da_year and row_data["Shared"]["RawOpponent"].upper() == team:
                        for data in season_obj["regular_season"]:
                            if row_data["Shared"]["Date"] == data["Date"]:
                                if "BeforeBye" in data:
                                    row_data["Shared"]["OppBeforeBye"] = data["BeforeBye"]
                                    row_data["Shared"]["OppAfterBye"] = data["AfterBye"]
                                    row_data["Shared"]["OppGameBeforeBye"] = data["GameBeforeBye"]
                                    row_data["Shared"]["OppGameAfterBye"] = data["GameAfterBye"]
                                if "BeforePlayoffsBye" in data:
                                    row_data["Shared"]["OppBeforePlayoffsBye"] = data["BeforePlayoffsBye"]
                                    row_data["Shared"]["OppAfterPlayoffsBye"] = data["AfterPlayoffsBye"]

                                row_data["Shared"]["OppHadBye"] = data["HadBye"]
        
                        for data in season_obj["playoffs"]:
                            if not row_data["Shared"]["is_playoffs"]:
                                continue

                            if row_data["Shared"]["SpecificDate" if "SpecificDate" in row_data["Shared"] else "Date"] == data["Date"]:
                                if "BeforeBye" in data:
                                    row_data["Shared"]["OppBeforeBye"] = data["BeforeBye"]
                                    row_data["Shared"]["OppAfterBye"] = data["AfterBye"]
                                    row_data["Shared"]["OppGameBeforeBye"] = data["GameBeforeBye"]
                                    row_data["Shared"]["OppGameAfterBye"] = data["GameAfterBye"]
                                if "BeforePlayoffsBye" in data:
                                    row_data["Shared"]["OppBeforePlayoffsBye"] = data["BeforePlayoffsBye"]
                                    row_data["Shared"]["OppAfterPlayoffsBye"] = data["AfterPlayoffsBye"]
                                row_data["Shared"]["OppHadBye"] = data["HadBye"]

    new_rows = []
    for row in all_rows:
        if perform_indv_opponent_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def perform_indv_opponent_schedule_qualifiers(row, qualifiers):
    if "Opponent Before Bye" in qualifiers:
        if not "OppBeforeBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Opponent Before Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["OppBeforeBye"]:
                    return False
            else:
                if not row["Shared"]["OppBeforeBye"]:
                    return False

    if "Opponent After Bye" in qualifiers:
        if not "OppAfterBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Opponent After Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["OppAfterBye"]:
                    return False
            else:
                if not row["Shared"]["OppAfterBye"]:
                    return False
    
    if "Opponent Before Playoffs Bye" in qualifiers:
        if not "OppBeforePlayoffsBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Opponent Before Playoffs Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["OppBeforePlayoffsBye"]:
                    return False
            else:
                if not row["Shared"]["OppBeforePlayoffsBye"]:
                    return False

    if "Opponent After Playoffs Bye" in qualifiers:
        if not "OppAfterPlayoffsBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Opponent After Playoffs Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["OppAfterPlayoffsBye"]:
                    return False
            else:
                if not row["Shared"]["OppAfterPlayoffsBye"]:
                    return False
    
    if "Opponent Game Before Bye" in qualifiers:
        if not "OppGameBeforeBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Opponent Game Before Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["OppGameBeforeBye"]:
                    return False
            else:
                if not row["Shared"]["OppGameBeforeBye"]:
                    return False

    if "Opponent Game After Bye" in qualifiers:
        if not "OppGameAfterBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Opponent Game After Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["OppGameAfterBye"]:
                    return False
            else:
                if not row["Shared"]["OppGameAfterBye"]:
                    return False
    
    if "Opponent Had Bye" in qualifiers:
        if not "OppHadBye" in row["Shared"]:
            return False

        for qual_object in qualifiers["Opponent Had Bye"]:
            if qual_object["negate"]:
                if row["Shared"]["OppHadBye"]:
                    return False
            else:
                if not row["Shared"]["OppHadBye"]:
                    return False
    
    return True

def get_team_schedule(seasons):
    season_objs = {}
    for season_obj in seasons:
        request = urllib.request.Request(team_schedule_url_format.format(season_obj["Tm"].lower(), season_obj["Year"]), headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                continue
            else:
                raise
            
        table_names = ["games"]
        new_season_obj = {
            "team" : season_obj["Tm"],
            "league" : None,
            "conference" : None,
            "division" : None,
            "regular_season" : [],
            "playoffs" : []
        }

        team_info = player_page.find("div", {"id" : "meta"})
        if team_info:
            postseason_item = team_info.find("strong", text="Record:")
            if postseason_item:
                postseason_parent = postseason_item.parent
                if postseason_parent:
                    division_link = postseason_parent.find("a")
                    if division_link:
                        division_text = str(division_link.find(text=True)).split(" Division")[0].strip()
                        division_split = division_text.split()
                        conference = division_split[0].strip()
                        division = division_split[1].strip()
                        if conference == "NFL" or conference == "AFL":
                            league = conference
                            conference = None
                        else:
                            league = "NFL"
                            division = conference + "-" + division
                        new_season_obj["league"] = league
                        new_season_obj["conference"] = conference
                        new_season_obj["division"] = division

        for table_name in table_names:
            table = player_page.find("table", id=table_name)

            if table:
                standard_table_rows = table.find("tbody").find_all("tr")
                is_playoffs = False
                game_counter = 1
                bye_week = None
                first_round = None
                for row in standard_table_rows:
                    classes = row.get("class")
                    if (not classes or not "thead" in classes) and hasattr(row, "data-row"):
                        row_opponent = str(row.find("td", {"data-stat" : "opp"}).find(text=True))
                        if row_opponent == "Bye Week":
                            bye_week = int(str(row.find("th", {"data-stat" : "week_num"}).find(text=True)))
                            continue

                        row_date = row.find("td", {"data-stat" : "game_date"})
                        row_date_str = row_date.find(text=True)
                        if not row_date_str:
                            continue
                        row_date_str = str(row_date_str).strip().lower()
                        if row_date_str == "playoffs":
                            is_playoffs = True
                            continue
                        if row.find("td", {"data-stat" : "game_outcome"}) and row.find("td", {"data-stat" : "game_outcome"}).find(text=True):
                            row_data = {}
                            row_data["Year"] = season_obj["Year"]
                            row_data["Tm"] = season_obj["Tm"]
                            row_data["Opponent"] = row.find("td", {"data-stat" : "opp"}).find("a")["href"].split("/")[2].upper()
                            row_data["Date"] = dateutil.parser.parse(row_date.get("csk")).date()
                            row_data["TmGm"] = game_counter
                            if row.find("td", {"data-stat" : "game_outcome"}):
                                result_str = row.find("td", {"data-stat" : "game_outcome"}).find(text=True)
                                if result_str:
                                    result_str = str(result_str[0].upper())
                                    if result_str in ("W", "L", "T"):
                                        row_data["Result"] = result_str
                            game_counter += 1

                            row_data["IsOT"] = bool(row.find("td", {"data-stat" : "overtime"}).find(text=True))

                            game_time_el = row.find("td", {"data-stat" : "game_time"})
                            if game_time_el and game_time_el.has_attr("csk"):
                                game_time = dateutil.parser.parse(game_time_el.get("csk").replace(".", ":")).time()
                                game_datetime = dateutil.parser.parse(row_date.get("csk"))
                                game_datetime = game_datetime.replace(hour=game_time.hour).replace(minute=game_time.minute).replace(second=0).replace(microsecond=0)
                                game_datetime = timezone("US/Eastern").localize(game_datetime)
                                
                                row_data["StartTime"] = game_datetime

                            week_num = str(row.find("th", {"data-stat" : "week_num"}).find(text=True))
                            if is_playoffs:
                                round_text = week_num.lower().strip()
                                if "wild card" in round_text:
                                    playoff_round = "wc"
                                elif "division" in round_text:
                                    playoff_round = "dr"
                                elif "conf. champ." in round_text:
                                    playoff_round = "cc"
                                elif "superbowl" in round_text:
                                    playoff_round = "sb"
                                elif "championship" in round_text:
                                    playoff_round = "lc"
                                row_data["Round"] = playoff_round

                                if not first_round:
                                    first_round = playoff_round
                            else:
                                row_data["WeekNum"] = int(week_num)

                            new_season_obj["playoffs" if is_playoffs else "regular_season"].append(row_data)

                for row_data in new_season_obj["regular_season"]:
                    if bye_week:
                        if row_data["WeekNum"] < bye_week:
                            row_data["BeforeBye"] = True
                            row_data["AfterBye"] = False
                        else:
                            row_data["AfterBye"] = True
                            row_data["BeforeBye"] = False

                        if bye_week + 1 == row_data["WeekNum"]:
                            row_data["GameAfterBye"] = True
                            row_data["GameBeforeBye"] = False
                        elif bye_week - 1 == row_data["WeekNum"]:
                            row_data["GameBeforeBye"] = True
                            row_data["GameAfterBye"] = False
                        else:
                            row_data["GameBeforeBye"] = False
                            row_data["GameAfterBye"] = False
                        row_data["HadBye"] = True
                    else:
                        row_data["HadBye"] = False
                
                for row_data in new_season_obj["playoffs"]:
                    if bye_week:
                        row_data["AfterBye"] = True
                        row_data["BeforeBye"] = False

                    if row_data["Year"] >= 1990:
                        row_data["AfterPlayoffsBye"] = False
                        row_data["BeforePlayoffsBye"] = False
                        row_data["GameBeforeBye"] = False
                        row_data["GameAfterBye"] = False
                        if first_round == "dr":
                            row_data["AfterBye"] = True
                            if row_data["Round"] == "dr":
                                row_data["GameAfterBye"] = True
                            row_data["HadBye"] = True
                        else:
                            row_data["HadBye"] = False
                    else:
                        row_data["HadBye"] = False
        
        if not season_obj["Year"] in season_objs:
            season_objs[season_obj["Year"]] = []

        season_objs[season_obj["Year"]].append(new_season_obj)
        
    return season_objs

def get_injury_schedule(player_data, seasons):
    season_objs = {}
    for season_obj in seasons:
        request = urllib.request.Request(team_injury_url_format.format(season_obj["Tm"].lower(), season_obj["Year"]), headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                continue
            else:
                raise
            
        table_name = "team_injuries"
        new_season_obj = {
            "team" : season_obj["Tm"],
            "games" : []
        }

        table = player_page.find("table", id=table_name)

        if table:
            games_by_index_map = {}
            header_cols = table.find("thead").find("tr").find_all("th")
            for index, header_col in enumerate(header_cols):
                if index:
                    date_text = header_col.find("a")["href"].split("/")[2][0:8]
                    date = dateutil.parser.parse(date_text).date()
                    games_by_index_map[index - 1] = date
                
            standard_table_rows = table.find("tbody").find_all("tr")
            for row in standard_table_rows:
                classes = row.get("class")
                if (not classes or not "thead" in classes) and hasattr(row, "data-row"):
                    player_id = row.find("th", {"data-stat" : "player"}).find("a")["href"].split("/")[3].split(".htm")[0]
                    if player_id == player_data["id"]:
                        columns = row.find_all("td")
                        for index, column in enumerate(columns):
                            row_data = {}
                            row_data["Year"] = season_obj["Year"]
                            row_data["Tm"] = season_obj["Tm"]
                            row_data["Date"] = games_by_index_map[index]

                            row_data["Status"] = str(column.find(text=True))
                            row_data["Injury"] = None
                            if row_data["Status"] and column.has_attr("data-tip"):
                                row_data["Injury"] = column["data-tip"].split(":")[1].strip().lower()

                            new_season_obj["games"].append(row_data)
                        break
        
        if not season_obj["Year"] in season_objs:
            season_objs[season_obj["Year"]] = []

        season_objs[season_obj["Year"]].append(new_season_obj)
    
    return season_objs

def get_spread_schedule(player_data, seasons):
    season_objs = {}
    for season_obj in seasons:
        request = urllib.request.Request(team_spread_url_format.format(season_obj["Tm"].lower(), season_obj["Year"]), headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                continue
            else:
                raise
            
        table_name = "vegas_lines"
        new_season_obj = {
            "team" : season_obj["Tm"],
            "games" : []
        }

        table = player_page.find("table", id=table_name)

        if table:
            standard_table_rows = table.find("tbody").find_all("tr")
            for row in standard_table_rows:
                classes = row.get("class")
                if (not classes or not "thead" in classes) and hasattr(row, "data-row"):
                    row_data = {}
                    row_data["Year"] = season_obj["Year"]
                    row_data["Tm"] = season_obj["Tm"]
                    row_data["Date"] = dateutil.parser.parse(row.find("td", {"data-stat" : "game_result"}).find("a").get("href").split("/")[2][0:8]).date()

                    row_data["Spread"] = float(str(row.find("td", {"data-stat" : "vegas_line"}).find(text=True)))
                    row_data["OverUnder"] = float(str(row.find("td", {"data-stat" : "over_under"}).find(text=True)))

                    new_season_obj["games"].append(row_data)
        
        if not season_obj["Year"] in season_objs:
            season_objs[season_obj["Year"]] = []

        season_objs[season_obj["Year"]].append(new_season_obj)
    
    return season_objs

def get_opponent_schedule(seasons, has_offensive_stats, has_defensive_stats, fantasy_stats):
    team_obj = {}

    for season_obj in seasons:
        if has_offensive_stats:
            request = urllib.request.Request(opponent_schedule_url_format.format(season_obj["Year"]), headers=request_headers)
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    continue
                else:
                    raise

            team_info = player_page.find("div", {"id" : "meta"})
            ws_winner = None
            if team_info:
                postseason_item = team_info.find("strong", text="Super Bowl Champion")
                if not postseason_item:
                    postseason_item = team_info.find("strong", text="League Champion")
                if postseason_item:
                    postseason_parent = postseason_item.parent
                    if postseason_parent:
                        ws_winner_el = postseason_parent.find("a")
                        if ws_winner_el:
                            ws_winner = ws_winner_el["href"].split("/")[2].strip().upper()

            conf_winners = set()
            table = player_page.find("table", id="playoff_results")
            if not table:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("table", id="playoff_results")
                    if temp_table:
                        table = temp_table
                        break

            if table:
                standard_table_rows = table.find("tbody").find_all("tr")
                for row in standard_table_rows:
                    round_name = str(row.find("th", {"data-stat" : "week_num"}).find(text=True))
                    if round_name == "ConfChamp":
                        ws_winner_el = row.find("td", {"data-stat" : "winner"})
                        if ws_winner_el and ws_winner_el.find("a"):
                            conf_winners.add(ws_winner_el.find("a")["href"].split("/")[2].strip().upper())
            
            table_names = ["AFC", "NFC", "team_stats", "passing"]
            team_obj[season_obj["Year"]] = {}

            all_points = []
            all_points_diff = []

            all_yds = []
            all_pass_yds = []
            all_rush_yds = []

            all_pass_td = []
            all_rush_td = []

            all_anya = []
            all_passer_rating = []

            all_points_rate = []

            all_yds_rate = []
            all_pass_yds_rate = []
            all_rush_yds_rate = []

            all_pass_td_rate = []
            all_rush_td_rate = []

            comments = None
            has_wild_card = False
            has_division_winner = False
            for table_name in table_names:
                table = player_page.find("table", id=table_name)

                if not table:
                    if not comments:
                        comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                    for c in comments:
                        temp_soup = BeautifulSoup(c, "lxml")
                        temp_table = temp_soup.find("table", id=table_name)
                        if temp_table:
                            table = temp_table
                            break

                standard_table_rows = table.find("tbody").find_all("tr")
                current_division = None
                for row in standard_table_rows:
                    classes = row.get("class")
                    if (not classes or not "thead" in classes) and hasattr(row, "data-row"):
                        if table_name == "team_stats":
                            team = row.find("td", {"data-stat" : "team"}).find("a")["href"].split("/")[2].upper()
                            row_data = team_obj[season_obj["Year"]][team]

                            row_data["Points"] = float(str(row.find("td", {"data-stat" : "points"}).find(text=True)))

                            row_data["Yards"] = int(str(row.find("td", {"data-stat" : "total_yards"}).find(text=True)))
                            row_data["PassTD"] = int(str(row.find("td", {"data-stat" : "pass_td"}).find(text=True)))
                            row_data["PassYards"] = int(str(row.find("td", {"data-stat" : "pass_yds"}).find(text=True)))
                            row_data["RushTD"] = int(str(row.find("td", {"data-stat" : "rush_td"}).find(text=True)))
                            row_data["RushYards"] = int(str(row.find("td", {"data-stat" : "rush_yds"}).find(text=True)))

                            row_data["Plays"] = int(str(row.find("td", {"data-stat" : "plays_offense"}).find(text=True)))
                            row_data["PassAtt"] = int(str(row.find("td", {"data-stat" : "pass_att"}).find(text=True)))
                            row_data["PassCmp"] = int(str(row.find("td", {"data-stat" : "pass_cmp"}).find(text=True)))
                            row_data["RushAtt"] = int(str(row.find("td", {"data-stat" : "rush_att"}).find(text=True)))

                            row_data["PointsRate"] = row_data["Points"]/row_data["Plays"]

                            row_data["YardsRate"] = row_data["Yards"] / row_data["Plays"]
                            row_data["PassTDRate"] = row_data["PassTD"] / row_data["PassAtt"]
                            row_data["PassYardsRate"] = row_data["PassYards"] / row_data["PassAtt"]
                            row_data["RushTDRate"] = row_data["RushTD"] / row_data["RushAtt"]
                            row_data["RushYardsRate"] = row_data["RushYards"] / row_data["RushAtt"]

                            all_points.append(row_data["Points"])

                            all_yds.append(row_data["Yards"])
                            all_pass_yds.append(row_data["PassYards"])
                            all_rush_yds.append(row_data["RushYards"])

                            all_pass_td.append(row_data["PassTD"])
                            all_rush_td.append(row_data["RushTD"])

                            all_points_rate.append(row_data["PointsRate"])

                            all_yds_rate.append(row_data["YardsRate"])
                            all_pass_yds_rate.append(row_data["PassYardsRate"])
                            all_rush_yds_rate.append(row_data["RushYardsRate"])

                            all_pass_td_rate.append(row_data["PassTDRate"])
                            all_rush_td_rate.append(row_data["RushTDRate"])
                        elif table_name == "passing":
                            team = row.find("td", {"data-stat" : "team"}).find("a")["href"].split("/")[2].upper()
                            row_data = team_obj[season_obj["Year"]][team]

                            row_data["PassInt"] = int(str(row.find("td", {"data-stat" : "pass_int"}).find(text=True)))
                            row_data["PassSk"] = int(str(row.find("td", {"data-stat" : "pass_sacked"}).find(text=True)))
                            row_data["PassSkYds"] = int(str(row.find("td", {"data-stat" : "pass_sacked_yds"}).find(text=True)))

                            row_data["ANY/A"] = (row_data["PassYards"] - row_data["PassSkYds"] + 20*(row_data["PassTD"]) - 45*(row_data["PassInt"])) / (row_data["PassAtt"] + row_data["PassSk"])

                            row_data["PasserRating"] = get_constant_data.calculate_passer_rating({
                                "Cmp" : row_data["PassCmp"],
                                "Att" : row_data["PassAtt"],
                                "Yds" : row_data["PassYards"],
                                "TD" : row_data["PassTD"],
                                "Int" : row_data["PassInt"]
                            })

                            all_anya.append(row_data["ANY/A"])
                            all_passer_rating.append(row_data["PasserRating"])
                        else:
                            row_data = {}
                            row_data["Year"] = season_obj["Year"]
                            tm_text = str(row.find("th", {"data-stat" : "team"}).text).strip().upper()

                            if tm_text.endswith("*"):
                                has_division_winner = True
                                row_data["DivisionWinner"] = True
                                row_data["WildCard"] = False
                                tm_text = tm_text[:-1]
                            elif tm_text.endswith("+"):
                                has_wild_card = True
                                row_data["WildCard"] = True
                                row_data["DivisionWinner"] = False
                                tm_text = tm_text[:-1]
                            else:
                                row_data["DivisionWinner"] = False
                                row_data["WildCard"] = False

                            row_data["Tm"] = row.find("th", {"data-stat" : "team"}).find("a")["href"].split("/")[2].upper()
                            row_data["Wins"] = int(str(row.find("td", {"data-stat" : "wins"}).find(text=True)))
                            row_data["Losses"] = int(str(row.find("td", {"data-stat" : "losses"}).find(text=True)))
                            ties_el = row.find("td", {"data-stat" : "ties"})
                            if ties_el:
                                row_data["Ties"] = int(str(ties_el.find(text=True)))
                            else:
                                row_data["Ties"] = 0
                            row_data["PointsDiff"] = float(str(row.find("td", {"data-stat" : "points_diff"}).find(text=True)))

                            row_data["League"] = "NFL"
                            row_data["Conference"] = table_name
                            row_data["Division"] = current_division

                            if ws_winner:
                                if row_data["Tm"] == ws_winner:
                                    row_data["WSWinner"] = True
                                else:
                                    row_data["WSWinner"] = False
                            else:
                                row_data["WSWinner"] = None
                            
                            if conf_winners:
                                if row_data["Tm"] in conf_winners:
                                    row_data["ConfWinner"] = True
                                else:
                                    row_data["ConfWinner"] = False
                            else:
                                row_data["ConfWinner"] = None

                            all_points_diff.append(row_data["PointsDiff"])

                            team_obj[season_obj["Year"]][row_data["Tm"]] = row_data
                    elif table_name != "team_stats":
                        current_division = str(row.find(text=True)).strip().replace(" ", "-")

            
            all_points = sorted(all_points, reverse=True)
            all_points_diff = sorted(all_points_diff, reverse=True)

            all_yds = sorted(all_yds, reverse=True)
            all_pass_yds = sorted(all_pass_yds, reverse=True)
            all_rush_yds = sorted(all_rush_yds, reverse=True)

            all_pass_td = sorted(all_pass_td, reverse=True)
            all_rush_td = sorted(all_rush_td, reverse=True)

            all_anya = sorted(all_anya, reverse=True)

            all_passer_rating = sorted(all_passer_rating, reverse=True)

            all_points_rate = sorted(all_points_rate, reverse=True)

            all_yds_rate = sorted(all_yds_rate, reverse=True)
            all_pass_yds_rate = sorted(all_pass_yds_rate, reverse=True)
            all_rush_yds_rate = sorted(all_rush_yds_rate, reverse=True)

            all_pass_td_rate = sorted(all_pass_td_rate, reverse=True)
            all_rush_td_rate = sorted(all_rush_td_rate, reverse=True)
            
            for team in team_obj[season_obj["Year"]]:
                if not has_division_winner:
                    team_obj[season_obj["Year"]][team]["DivisionWinner"] = None
                if not has_wild_card:
                    team_obj[season_obj["Year"]][team]["WildCard"] = None

                team_obj[season_obj["Year"]][team]["PointsRank"] = all_points.index(team_obj[season_obj["Year"]][team]["Points"]) + 1
                team_obj[season_obj["Year"]][team]["PointsDiffRank"] = all_points_diff.index(team_obj[season_obj["Year"]][team]["PointsDiff"]) + 1

                team_obj[season_obj["Year"]][team]["YardsRank"] = all_yds.index(team_obj[season_obj["Year"]][team]["Yards"]) + 1
                team_obj[season_obj["Year"]][team]["PassYardsRank"] = all_pass_yds.index(team_obj[season_obj["Year"]][team]["PassYards"]) + 1
                team_obj[season_obj["Year"]][team]["RushYardsRank"] = all_rush_yds.index(team_obj[season_obj["Year"]][team]["RushYards"]) + 1

                team_obj[season_obj["Year"]][team]["PassTDRank"] = all_pass_td.index(team_obj[season_obj["Year"]][team]["PassTD"]) + 1
                team_obj[season_obj["Year"]][team]["RushTDRank"] = all_rush_td.index(team_obj[season_obj["Year"]][team]["RushTD"]) + 1

                team_obj[season_obj["Year"]][team]["ANY/ARank"] = all_anya.index(team_obj[season_obj["Year"]][team]["ANY/A"]) + 1

                team_obj[season_obj["Year"]][team]["PasserRatingRank"] = all_passer_rating.index(team_obj[season_obj["Year"]][team]["PasserRating"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePointsRank"] = all_points[::-1].index(team_obj[season_obj["Year"]][team]["Points"]) + 1
                team_obj[season_obj["Year"]][team]["ReversePointsDiffRank"] = all_points_diff[::-1].index(team_obj[season_obj["Year"]][team]["PointsDiff"]) + 1

                team_obj[season_obj["Year"]][team]["ReverseYardsRank"] = all_yds[::-1].index(team_obj[season_obj["Year"]][team]["Yards"]) + 1
                team_obj[season_obj["Year"]][team]["ReversePassYardsRank"] = all_pass_yds[::-1].index(team_obj[season_obj["Year"]][team]["PassYards"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushYardsRank"] = all_rush_yds[::-1].index(team_obj[season_obj["Year"]][team]["RushYards"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePassTDRank"] = all_pass_td[::-1].index(team_obj[season_obj["Year"]][team]["PassTD"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushTDRank"] = all_rush_td[::-1].index(team_obj[season_obj["Year"]][team]["RushTD"]) + 1

                team_obj[season_obj["Year"]][team]["ReverseANY/ARank"] = all_anya[::-1].index(team_obj[season_obj["Year"]][team]["ANY/A"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePasserRatingRank"] = all_passer_rating[::-1].index(team_obj[season_obj["Year"]][team]["PasserRating"]) + 1

                team_obj[season_obj["Year"]][team]["PointsRankRate"] = all_points_rate.index(team_obj[season_obj["Year"]][team]["PointsRate"]) + 1

                team_obj[season_obj["Year"]][team]["YardsRankRate"] = all_yds_rate.index(team_obj[season_obj["Year"]][team]["YardsRate"]) + 1
                team_obj[season_obj["Year"]][team]["PassYardsRankRate"] = all_pass_yds_rate.index(team_obj[season_obj["Year"]][team]["PassYardsRate"]) + 1
                team_obj[season_obj["Year"]][team]["RushYardsRankRate"] = all_rush_yds_rate.index(team_obj[season_obj["Year"]][team]["RushYardsRate"]) + 1

                team_obj[season_obj["Year"]][team]["PassTDRankRate"] = all_pass_td_rate.index(team_obj[season_obj["Year"]][team]["PassTDRate"]) + 1
                team_obj[season_obj["Year"]][team]["RushTDRankRate"] = all_rush_td_rate.index(team_obj[season_obj["Year"]][team]["RushTDRate"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePointsRankRate"] = all_points_rate[::-1].index(team_obj[season_obj["Year"]][team]["PointsRate"]) + 1

                team_obj[season_obj["Year"]][team]["ReverseYardsRankRate"] = all_yds_rate[::-1].index(team_obj[season_obj["Year"]][team]["YardsRate"]) + 1
                team_obj[season_obj["Year"]][team]["ReversePassYardsRankRate"] = all_pass_yds_rate[::-1].index(team_obj[season_obj["Year"]][team]["PassYardsRate"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushYardsRankRate"] = all_rush_yds_rate[::-1].index(team_obj[season_obj["Year"]][team]["RushYardsRate"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePassTDRankRate"] = all_pass_td_rate[::-1].index(team_obj[season_obj["Year"]][team]["PassTDRate"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushTDRankRate"] = all_rush_td_rate[::-1].index(team_obj[season_obj["Year"]][team]["RushTDRate"]) + 1
        
        if has_defensive_stats:
            request = urllib.request.Request(opponent_defense_schedule_url_format.format(season_obj["Year"]), headers=request_headers)
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    continue
                else:
                    raise

            table_names = ["team_stats", "passing"]

            if not has_offensive_stats:
                team_obj[season_obj["Year"]] = {}

            all_points_allowed = []

            all_yards_allowed = []
            all_pass_yards_allowed = []
            all_rush_yards_allowed = []

            all_pass_td_allowed = []
            all_rush_td_allowed = []

            all_anya_allowed = []

            all_passer_rating_allowed = []

            all_points_allowed_rate = []

            all_yards_allowed_rate = []
            all_pass_yards_allowed_rate = []
            all_rush_yards_allowed_rate = []

            all_pass_td_allowed_rate = []
            all_rush_td_allowed_rate = []

            comments = None
            for table_name in table_names:
                table = player_page.find("table", id=table_name)

                if not table:
                    if not comments:
                        comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                    for c in comments:
                        temp_soup = BeautifulSoup(c, "lxml")
                        temp_table = temp_soup.find("table", id=table_name)
                        if temp_table:
                            table = temp_table
                            break

                standard_table_rows = table.find("tbody").find_all("tr")
                for row in standard_table_rows:
                    classes = row.get("class")
                    if (not classes or not "thead" in classes) and hasattr(row, "data-row"):
                        if table_name == "passing":
                            team = row.find("td", {"data-stat" : "team"}).find("a")["href"].split("/")[2].upper()
                            row_data = team_obj[season_obj["Year"]][team]

                            row_data["PassIntAllowed"] = int(str(row.find("td", {"data-stat" : "pass_int"}).find(text=True)))
                            row_data["PassSkAllowed"] = int(str(row.find("td", {"data-stat" : "pass_sacked"}).find(text=True)))
                            row_data["PassSkYdsAllowed"] = int(str(row.find("td", {"data-stat" : "pass_sacked_yds"}).find(text=True)))

                            row_data["ANY/AAllowed"] = (row_data["PassYardsAllowed"] - row_data["PassSkYdsAllowed"] + 20*(row_data["PassTDAllowed"]) - 45*(row_data["PassIntAllowed"])) / (row_data["PassAttAllowed"] + row_data["PassSkAllowed"])

                            row_data["PasserRatingAllowed"] = get_constant_data.calculate_passer_rating({
                                "Cmp" : row_data["PassCmpAllowed"],
                                "Att" : row_data["PassAttAllowed"],
                                "Yds" : row_data["PassYardsAllowed"],
                                "TD" : row_data["PassTDAllowed"],
                                "Int" : row_data["PassIntAllowed"]
                            })

                            all_anya_allowed.append(row_data["ANY/AAllowed"])
                            all_passer_rating_allowed.append(row_data["PasserRatingAllowed"])
                        else:
                            team = row.find("td", {"data-stat" : "team"}).find("a")["href"].split("/")[2].upper()
                            if not has_offensive_stats:
                                row_data = {}
                            else:
                                row_data = team_obj[season_obj["Year"]][team]

                            row_data["Year"] = season_obj["Year"]
                            row_data["Tm"] = team

                            row_data["PointsAllowed"] = int(str(row.find("td", {"data-stat" : "points"}).find(text=True)))

                            row_data["YardsAllowed"] = int(str(row.find("td", {"data-stat" : "total_yards"}).find(text=True)))

                            row_data["RushYardsAllowed"] = int(str(row.find("td", {"data-stat" : "rush_yds"}).find(text=True)))
                            row_data["PassYardsAllowed"] = int(str(row.find("td", {"data-stat" : "pass_yds"}).find(text=True)))
                            row_data["RushTDAllowed"] = int(str(row.find("td", {"data-stat" : "rush_td"}).find(text=True)))
                            row_data["PassTDAllowed"] = int(str(row.find("td", {"data-stat" : "pass_td"}).find(text=True)))

                            row_data["Plays"] = int(str(row.find("td", {"data-stat" : "plays_offense"}).find(text=True)))
                            row_data["PassAttAllowed"] = int(str(row.find("td", {"data-stat" : "pass_att"}).find(text=True)))
                            row_data["PassCmpAllowed"] = int(str(row.find("td", {"data-stat" : "pass_cmp"}).find(text=True)))
                            row_data["RushAttAllowed"] = int(str(row.find("td", {"data-stat" : "rush_att"}).find(text=True)))

                            row_data["PointsAllowedRate"] = row_data["PointsAllowed"] / row_data["Plays"]

                            row_data["YardsAllowedRate"] = row_data["YardsAllowed"] / row_data["Plays"]

                            row_data["RushYardsAllowedRate"] = row_data["RushYardsAllowed"] / row_data["RushAttAllowed"]
                            row_data["PassYardsAllowedRate"] = row_data["PassYardsAllowed"] / row_data["PassAttAllowed"]
                            row_data["RushTDAllowedRate"] = row_data["RushTDAllowed"] / row_data["RushAttAllowed"]
                            row_data["PassTDAllowedRate"] = row_data["PassTDAllowed"] / row_data["PassAttAllowed"]

                            if not has_offensive_stats:
                                team_obj[season_obj["Year"]][row_data["Tm"]] = row_data
                            
                            all_points_allowed.append(row_data["PointsAllowed"])

                            all_yards_allowed.append(row_data["YardsAllowed"])
                            all_pass_yards_allowed.append(row_data["PassYardsAllowed"])
                            all_rush_yards_allowed.append(row_data["RushYardsAllowed"])

                            all_pass_td_allowed.append(row_data["PassTDAllowed"])
                            all_rush_td_allowed.append(row_data["RushTDAllowed"])

                            all_points_allowed_rate.append(row_data["PointsAllowedRate"])

                            all_yards_allowed_rate.append(row_data["YardsAllowedRate"])
                            all_pass_yards_allowed_rate.append(row_data["PassYardsAllowedRate"])
                            all_rush_yards_allowed_rate.append(row_data["RushYardsAllowedRate"])

                            all_pass_td_allowed_rate.append(row_data["PassTDAllowedRate"])
                            all_rush_td_allowed_rate.append(row_data["RushTDAllowedRate"])
            
            all_points_allowed = sorted(all_points_allowed)
            
            all_yards_allowed = sorted(all_yards_allowed)
            all_pass_yards_allowed = sorted(all_pass_yards_allowed)
            all_rush_yards_allowed = sorted(all_rush_yards_allowed)

            all_pass_td_allowed = sorted(all_pass_td_allowed)
            all_rush_td_allowed = sorted(all_rush_td_allowed)

            all_anya_allowed = sorted(all_anya_allowed)

            all_passer_rating_allowed = sorted(all_passer_rating_allowed)
            
            all_points_allowed_rate = sorted(all_points_allowed_rate)
            
            all_yards_allowed_rate = sorted(all_yards_allowed_rate)
            all_pass_yards_allowed_rate = sorted(all_pass_yards_allowed_rate)
            all_rush_yards_allowed_rate = sorted(all_rush_yards_allowed_rate)

            all_pass_td_allowed_rate = sorted(all_pass_td_allowed_rate)
            all_rush_td_allowed_rate = sorted(all_rush_td_allowed_rate)

            for team in team_obj[season_obj["Year"]]:
                team_obj[season_obj["Year"]][team]["PointsAllowedRank"] = all_points_allowed.index(team_obj[season_obj["Year"]][team]["PointsAllowed"]) + 1
                
                team_obj[season_obj["Year"]][team]["YardsAllowedRank"] = all_yards_allowed.index(team_obj[season_obj["Year"]][team]["YardsAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["PassYardsAllowedRank"] = all_pass_yards_allowed.index(team_obj[season_obj["Year"]][team]["PassYardsAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["RushYardsAllowedRank"] = all_rush_yards_allowed.index(team_obj[season_obj["Year"]][team]["RushYardsAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["PassTDAllowedRank"] = all_pass_td_allowed.index(team_obj[season_obj["Year"]][team]["PassTDAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["RushTDAllowedRank"] = all_rush_td_allowed.index(team_obj[season_obj["Year"]][team]["RushTDAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["ANY/AAllowedRank"] = all_anya_allowed.index(team_obj[season_obj["Year"]][team]["ANY/AAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["PasserRatingAllowedRank"] = all_passer_rating_allowed.index(team_obj[season_obj["Year"]][team]["PasserRatingAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePointsAllowedRank"] = all_points_allowed[::-1].index(team_obj[season_obj["Year"]][team]["PointsAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["ReverseYardsAllowedRank"] = all_yards_allowed[::-1].index(team_obj[season_obj["Year"]][team]["YardsAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["ReversePassYardsAllowedRank"] = all_pass_yards_allowed[::-1].index(team_obj[season_obj["Year"]][team]["PassYardsAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushYardsAllowedRank"] = all_rush_yards_allowed[::-1].index(team_obj[season_obj["Year"]][team]["RushYardsAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePassTDAllowedRank"] = all_pass_td_allowed[::-1].index(team_obj[season_obj["Year"]][team]["PassTDAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushTDAllowedRank"] = all_rush_td_allowed[::-1].index(team_obj[season_obj["Year"]][team]["RushTDAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["ReverseANY/AAllowedRank"] = all_anya_allowed[::-1].index(team_obj[season_obj["Year"]][team]["ANY/AAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePasserRatingAllowedRank"] = all_passer_rating_allowed[::-1].index(team_obj[season_obj["Year"]][team]["PasserRatingAllowed"]) + 1

                team_obj[season_obj["Year"]][team]["PointsAllowedRankRate"] = all_points_allowed_rate.index(team_obj[season_obj["Year"]][team]["PointsAllowedRate"]) + 1
                
                team_obj[season_obj["Year"]][team]["YardsAllowedRankRate"] = all_yards_allowed_rate.index(team_obj[season_obj["Year"]][team]["YardsAllowedRate"]) + 1
                team_obj[season_obj["Year"]][team]["PassYardsAllowedRankRate"] = all_pass_yards_allowed_rate.index(team_obj[season_obj["Year"]][team]["PassYardsAllowedRate"]) + 1
                team_obj[season_obj["Year"]][team]["RushYardsAllowedRankRate"] = all_rush_yards_allowed_rate.index(team_obj[season_obj["Year"]][team]["RushYardsAllowedRate"]) + 1

                team_obj[season_obj["Year"]][team]["PassTDAllowedRankRate"] = all_pass_td_allowed_rate.index(team_obj[season_obj["Year"]][team]["PassTDAllowedRate"]) + 1
                team_obj[season_obj["Year"]][team]["RushTDAllowedRankRate"] = all_rush_td_allowed_rate.index(team_obj[season_obj["Year"]][team]["RushTDAllowedRate"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePointsAllowedRankRate"] = all_points_allowed_rate[::-1].index(team_obj[season_obj["Year"]][team]["PointsAllowedRate"]) + 1

                team_obj[season_obj["Year"]][team]["ReverseYardsAllowedRankRate"] = all_yards_allowed_rate[::-1].index(team_obj[season_obj["Year"]][team]["YardsAllowedRate"]) + 1
                team_obj[season_obj["Year"]][team]["ReversePassYardsAllowedRankRate"] = all_pass_yards_allowed_rate[::-1].index(team_obj[season_obj["Year"]][team]["PassYardsAllowedRate"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushYardsAllowedRankRate"] = all_rush_yards_allowed_rate[::-1].index(team_obj[season_obj["Year"]][team]["RushYardsAllowedRate"]) + 1

                team_obj[season_obj["Year"]][team]["ReversePassTDAllowedRankRate"] = all_pass_td_allowed_rate[::-1].index(team_obj[season_obj["Year"]][team]["PassTDAllowedRate"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRushTDAllowedRankRate"] = all_rush_td_allowed_rate[::-1].index(team_obj[season_obj["Year"]][team]["RushTDAllowedRate"]) + 1
        
        if fantasy_stats:
            for position in fantasy_stats:
                request = urllib.request.Request(opponent_fantasy_rank_url_format.format(season_obj["Year"], position), headers=request_headers)
                try:
                    response, player_page = url_request(request)
                except urllib.error.HTTPError as err:
                    if err.status == 404:
                        continue
                    else:
                        raise

                table_name = "fantasy_def"

                if not has_offensive_stats and not has_defensive_stats:
                    team_obj[season_obj["Year"]] = {}

                comments = None
                table = player_page.find("table", id=table_name)

                if not table:
                    if not comments:
                        comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                    for c in comments:
                        temp_soup = BeautifulSoup(c, "lxml")
                        temp_table = temp_soup.find("table", id=table_name)
                        if temp_table:
                            table = temp_table
                            break
                
                all_fantasy_points = []
                all_fantasy_points_rate = []

                standard_table_rows = table.find("tbody").find_all("tr")
                for row in standard_table_rows:
                    classes = row.get("class")
                    if (not classes or not "thead" in classes) and hasattr(row, "data-row"):
                        team = row.find("th", {"data-stat" : "team"}).find("a")["href"].split("/")[2].upper()
                        if not has_offensive_stats and not has_defensive_stats:
                            row_data = {}
                        else:
                            row_data = team_obj[season_obj["Year"]][team]
                        
                        row_data["Year"] = season_obj["Year"]
                        row_data["Tm"] = team

                        row_data["FantasyPositionPoints" + position] = float(str(row.find("td", {"data-stat" : "fantasy_points"}).find(text=True)))
                        rate_denom = 0
                        if position == "QB":
                            rate_denom += int(str(row.find("td", {"data-stat" : "pass_att"}).find(text=True)))
                        if position == "QB" or position == "RB":
                            rate_denom += int(str(row.find("td", {"data-stat" : "rush_att"}).find(text=True)))
                        if position == "RB" or position == "WR" or position == "TE":
                            rate_denom += int(str(row.find("td", {"data-stat" : "targets"}).find(text=True)))
                        row_data["FantasyPositionPointsRate" + position] = row_data["FantasyPositionPoints" + position] / rate_denom

                        all_fantasy_points.append(row_data["FantasyPositionPoints" + position])
                        all_fantasy_points_rate.append(row_data["FantasyPositionPointsRate" + position])

                        if not has_offensive_stats and not has_defensive_stats:
                            team_obj[season_obj["Year"]][row_data["Tm"]] = row_data
                
                all_fantasy_points = sorted(all_fantasy_points)

                for team in team_obj[season_obj["Year"]]:
                    team_obj[season_obj["Year"]][team]["FantasyPositionRank" + position] = all_fantasy_points.index(team_obj[season_obj["Year"]][team]["FantasyPositionPoints" + position]) + 1
                    team_obj[season_obj["Year"]][team]["ReverseFantasyPositionRank" + position] = all_fantasy_points[::-1].index(team_obj[season_obj["Year"]][team]["FantasyPositionPoints" + position]) + 1

                    team_obj[season_obj["Year"]][team]["FantasyPositionRankRate" + position] = all_fantasy_points_rate.index(team_obj[season_obj["Year"]][team]["FantasyPositionPointsRate" + position]) + 1
                    team_obj[season_obj["Year"]][team]["ReverseFantasyPositionRankRate" + position] = all_fantasy_points_rate[::-1].index(team_obj[season_obj["Year"]][team]["FantasyPositionPointsRate" + position]) + 1

    return team_obj

def calculate_fantasy_formula(stat, formula, data, header):
    for sub_stat in get_constant_data.stat_groups[header]:
        formula = replace_fantasy_formula(data, header, sub_stat, formula)
    if stat != "STD":
        formula = replace_fantasy_formula(data["Fantasy"], header, "STD", formula)

    try:
        return eval(formula)
    except ZeroDivisionError:
        return 0.0

def replace_fantasy_formula(data, header, stat, formula):
    value = 0.0
    if stat in data[header]:
        value = data[header][stat]

    return re.sub(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(stat) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", str(value), formula)

def print_player_data(player_datas, player_type, highest_vals, lowest_vals, has_non_playoffs, is_fantasy, debug_mode, extra_stats, has_one_player_games):
    html_info = {
        "player_image_url" : [],
        "tables" : []
    }
    all_unique_quals = True
    quals = None
    player_index = 0
    for index, player_data in enumerate(player_datas):
        if not player_data["stat_values"]["Shared"]["Raw Quals"] or player_data["stat_values"]["Shared"]["Raw Quals"] == "Query: ":
            continue
        player_index = index
        if not quals:
            quals = player_data["stat_values"]["Shared"]["Raw Quals"]
        if quals != player_data["stat_values"]["Shared"]["Raw Quals"]:
            all_unique_quals = False
            break

    ranges_str = ""
    for index, player_data in enumerate(player_datas):
        html_info["player_image_url"].append({"urls" : player_data["player_image_url"], "positions" : player_data["player_position"], "teams" : player_data["player_current_team"], "numbers" : player_data["player_current_number"], "hofs" : player_data["player_hof"], "names" : player_data["stat_values"]["Shared"]["Player"], "ids" : player_data["ids"]})
        if "all_rows" in player_data["stat_values"]["Shared"] and len(player_data["stat_values"]["Shared"]["all_rows"]):
            player_str = player_data["stat_values"]["Shared"]["Raw Player"]
        else:
            player_str = ""
            for index, player in enumerate(player_data["stat_values"]["Shared"]["Player"]):
                player_str += create_player_url_string(player, player_data["ids"][index], extra_stats)
                if index != len(player_data["stat_values"]["Shared"]["Player"]) - 1:
                    if player_data["add_type"] == "minus":
                        player_str += " DIFF "
                    else:
                        player_str += " + "
        
        has_one_player_missing = False
        missing_all_players = True
        for player in player_data["stat_values"]["Shared"]["Player"]:
            if player == "No Player Match!":
                has_one_player_missing = True
            else:
                missing_all_players = False

        player_search_str = ""
        if has_one_player_missing:
            player_search_str = " Searched Term: \"" + "+".join(player_data["stat_values"]["Shared"]["Search Term"]) + "\""

        ranges_str += player_str + player_search_str
        if missing_all_players:
            ranges_str += "\n"
        else:
            ranges_str += ": "  + player_data["stat_values"]["Shared"]["Raw Range"] + " " + player_data["stat_values"]["Shared"]["Raw Time"] + "\n"

        if not all_unique_quals:
            ranges_str += player_data["stat_values"]["Shared"]["Raw Quals"]
            if index != len(player_datas) - 1:
                ranges_str += "\n----------------------------------------\n"
    
    if all_unique_quals and player_datas[player_index]["stat_values"]["Shared"]["Raw Quals"] != "Query: ":
         ranges_str += "----------------------------------------\n" + player_datas[player_index]["stat_values"]["Shared"]["Raw Quals"]

    if debug_mode:
        logger.info("#" + str(threading.get_ident()) + "#   " + ranges_str)

    has_season_stats = True
    for player_data in player_datas:
        if not player_data["has_season_stats"]:
            has_season_stats = False
            break
    has_award_stats = True
    for player_data in player_datas:
        if not player_data["has_award_stats"]:
            has_award_stats = False
            break
    if has_award_stats:
        has_playoffs = False
        has_reg_season = False
        for player_data in player_datas:
            if player_data["stat_values"]["Shared"]["is_playoffs"]:
                if player_data["stat_values"]["Shared"]["is_playoffs"] == "Only":
                    has_playoffs = True
                else:
                    has_reg_season = True
            else:
                has_reg_season = True
        if has_playoffs and has_reg_season:
            has_award_stats = False
    error_getting_pen = False
    for player_data in player_datas:
        if player_data["error_getting_pen"]:
            error_getting_pen = True
            break
    error_getting_fmb_lst = False
    for player_data in player_datas:
        if player_data["error_getting_fmb_lst"]:
            error_getting_fmb_lst = True
            break
    error_getting_adv = False
    for player_data in player_datas:
        if player_data["error_getting_adv"]:
            error_getting_adv = True
            break
    error_getting_adj = False
    for player_data in player_datas:
        if player_data["error_getting_adj"]:
            error_getting_adj = True
            break
    error_getting_pick = False
    for player_data in player_datas:
        if player_data["error_getting_pick"]:
            error_getting_pick = True
            break
    error_getting_gwd = False
    for player_data in player_datas:
        if player_data["error_getting_gwd"]:
            error_getting_gwd = True
            break

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1
    
    tables_to_skip = set()
    headers_to_skip = {}
    for header_index, over_header in enumerate((list(headers[player_type["da_type"]]) + ["Shared"])):
        has_table_match = False
        if over_header == "Shared":
            header_index = 0
        if over_header == "Shared" or headers[player_type["da_type"]][over_header]:
            for header in get_constant_data.stat_groups[over_header]:
                has_header_match = False
                for index, player_data in enumerate(player_datas):
                    value = handle_table_data(player_data, player_type, header, over_header, highest_vals, lowest_vals, index, has_non_playoffs, True, is_fantasy, header_index, error_getting_adj, extra_stats)
                    if value != "N/A" and value != None:
                        has_header_match = True
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "Seasons":
                            if (not over_header.startswith("Awards/Honors") or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                has_table_match = True
                                break
                        else:
                            if ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                                if (not over_header.startswith("Awards/Honors") or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                    has_table_match = True
                                    break
                if not has_header_match:
                    if not over_header in headers_to_skip:
                        headers_to_skip[over_header] = set()
                    headers_to_skip[over_header].add(header)
        if not has_table_match:
            tables_to_skip.add(over_header)
    
    for header_index, over_header in enumerate(headers[player_type["da_type"]]):
        if over_header != "Shared":
            for extra_stat in extra_stats:
                if extra_stat.startswith("show-only-table-"):
                    if "show-only-table-" + over_header.lower() not in extra_stats and "show-only-table-" + str(header_index) not in extra_stats:
                        continue
        if "hide-table-" + over_header.lower() in extra_stats or ("hide-table-" + str(header_index) in extra_stats and over_header != "Shared"):
            continue
        if over_header.startswith("Advanced") and "hide-table-advanced" in extra_stats:
            continue
        if over_header.startswith("Awards/Honors") and "hide-table-awards/honors" in extra_stats:
            continue
        if over_header in tables_to_skip:
            if header_index != 0 or "Shared" in tables_to_skip:
                continue
        if not headers[player_type["da_type"]][over_header] or (over_header == "Fantasy" and not is_fantasy) or (over_header.startswith("Awards/Honors/") and is_fantasy):
            continue
        if over_header.startswith("Advanced/") and not has_season_stats:
            continue
        if over_header.startswith("Awards/Honors/") and not has_award_stats:
            continue
        if over_header.startswith("Advanced/"):
            if error_getting_adv:
                continue

        table = PrettyTable()
        field_names = []

        if over_header == "Era Adjusted Passing":
            table_str = "Era Adjusted Passing (+)/Misc" if not error_getting_adj else "Misc"
        elif over_header == "Penalties/Snaps":
            if error_getting_pen:
                table_str = "Snaps"
            else:
                table_str = over_header
        elif over_header.startswith("Advanced/") and over_header != "Advanced/Kicking" and over_header != "Advanced/Punting" and over_header != "Advanced/KickReturns" and over_header != "Advanced/PuntReturns":
            if over_header == "Advanced/Defense":
                table_str = over_header.split("/")[0] + " (Avail since 2018)"
            else:
                table_str = over_header.split("/")[0] + " (Most stats avail since 2018)"
        elif over_header.startswith("Advanced/"):
            table_str = over_header.split("/")[0]
        elif over_header.startswith("Awards/Honors/"):
            table_str = over_header.split("/")[0] + "/" + over_header.split("/")[1]
        else:
            table_str = over_header
        
        for header in get_constant_data.stat_groups["Shared"]:
            if "Shared" in headers_to_skip and header in headers_to_skip["Shared"]:
                continue

            if over_header == "Advanced/Defense":
                if header == "G" or header == "GS":
                    continue
            else:
                if header == "G_Adv" or header == "GS_Adv":
                    continue

            if over_header.startswith("Awards/Honors/") and header != "Player":
                continue
             
            if player_data["add_type"] == "minus":
                if (over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec":
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        continue
            
            if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header + ">" + header.lower() in extra_stats:
                continue
            for extra_stat in extra_stats:
                if extra_stat.startswith("show-only-stat-"):
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "Seasons":
                            continue
            if over_header == "Era Adjusted Passing" and header.endswith("+") and not seasons_leading and error_getting_adj:
                continue
            override_show = False
            if header_index == 0:
                if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats:
                    override_show = True
                if seasons_leading and over_header in div_id_to_stat and header in div_id_to_stat[over_header].values():
                    override_show = True
                if header in ("TmRec", "TmW/L%") and "record" in extra_stats:
                    override_show = True
                elif header in ("ATS TmRec", "ATS TmW/L%", "Spread/G", "SpreadMargin/G", "TmRec", "TmW/L%") and "ats-record" in extra_stats:
                    override_show = True
                elif header in ("O/U TmRec", "O/U TmW/L%", "OverUnder/G", "OUMargin/G", "TmRec", "TmW/L%") and "ou-record" in extra_stats:
                    override_show = True
                elif header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G") and "score" in extra_stats:
                    override_show = True

            if override_show or ("display" not in get_constant_data.stat_groups["Shared"][header] or get_constant_data.stat_groups["Shared"][header]["display"]):
                if "valid_for" not in get_constant_data.stat_groups["Shared"][header] or set(get_constant_data.stat_groups["Shared"][header]["valid_for"]) & set(headers[player_type["da_type"]]):
                    if header == "G_Adv" or header == "GS_Adv":
                        header = header[:-4]
                    field_names.append(header)
                    
        for header in get_constant_data.stat_groups[over_header + "/Back" if over_header == "Advanced/Defense" and "Awards/Honors/Int" in headers[player_type["da_type"]] else over_header]:
            if over_header in headers_to_skip and header in headers_to_skip[over_header]:
                continue

            if over_header == "Era Adjusted Passing":
                if header.startswith("Pick6"):
                    if error_getting_pick:
                        continue
                elif header.startswith("GWD") or header.startswith("4QC"):
                    if error_getting_gwd:
                        continue
            elif over_header == "Penalties/Snaps":
                if "Pen" in header:
                    if error_getting_pen:
                        continue
            elif "FmbLst" in header or "Tnv" in header:
                if error_getting_fmb_lst:
                    continue

            if player_data["add_type"] == "minus":
                if (over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec":
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        continue

            if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header + ">" + header.lower() in extra_stats:
                continue
            for extra_stat in extra_stats:
                if extra_stat.startswith("show-only-stat-"):
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "Seasons":
                            continue
            if over_header == "Era Adjusted Passing" and header.endswith("+") and not seasons_leading and error_getting_adj:
                continue
            override_show = False
            if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats:
                override_show = True
            if seasons_leading and over_header in div_id_to_stat and header in div_id_to_stat[over_header].values():
                override_show = True

            if override_show or ("display" not in get_constant_data.stat_groups[over_header][header] or get_constant_data.stat_groups[over_header][header]["display"]):
                if "valid_for" not in get_constant_data.stat_groups[over_header][header] or set(get_constant_data.stat_groups[over_header][header]["valid_for"]) & set(headers[player_type["da_type"]]):
                    if "Fmb" not in header or over_header != "Rushing" or "Scrimmage/All Purpose" not in headers[player_type["da_type"]] or not headers[player_type["da_type"]]["Scrimmage/All Purpose"]:
                        if over_header != "Fantasy" or ("Receiving" in headers[player_type["da_type"]] and headers[player_type["da_type"]]["Receiving"]) or "PPR" not in header:
                            if not (over_header.startswith("Awards/Honors") and not has_non_playoffs and not (header.startswith("Champ") or header.startswith("SB") or header.startswith("Seasons") or header.startswith("Player") or header.startswith("G"))):
                                field_names.append(header)

        table.field_names = field_names

        rows = []
        for index, player_data in enumerate(player_datas):
            if "all_rows" in player_data["stat_values"]["Shared"] and len(player_data["stat_values"]["Shared"]["all_rows"]):
                values = []
                for header in get_constant_data.stat_groups["Shared"]:
                    if "Shared" in headers_to_skip and header in headers_to_skip["Shared"]:
                        continue

                    if over_header == "Advanced/Defense":
                        if header == "G" or header == "GS":
                            continue
                    else:
                        if header == "G_Adv" or header == "GS_Adv":
                            continue

                    if over_header.startswith("Awards/Honors/") and header != "Player":
                        continue
                    value = handle_table_data(player_data, player_type, header, "Shared", highest_vals, lowest_vals, index, has_non_playoffs, False, is_fantasy, header_index, error_getting_adj, extra_stats)
                    if value:
                        values.append(value)
                for header in get_constant_data.stat_groups[over_header + "/Back" if over_header == "Advanced/Defense" and "Awards/Honors/Int" in headers[player_type["da_type"]] else over_header]:
                    if over_header in headers_to_skip and header in headers_to_skip[over_header]:
                        continue

                    if over_header == "Era Adjusted Passing":
                        if header.startswith("Pick6"):
                            if error_getting_pick:
                                continue
                        elif header.startswith("GWD") or header.startswith("4QC"):
                            if error_getting_gwd:
                                continue
                    elif over_header == "Penalties/Snaps":
                        if "Pen" in header:
                            if error_getting_pen:
                                continue
                    elif "FmbLst" in header or "Tnv" in header:
                        if error_getting_fmb_lst:
                            continue
                    value = handle_table_data(player_data, player_type, header, over_header, highest_vals, lowest_vals, index, has_non_playoffs, False, is_fantasy, header_index, error_getting_adj, extra_stats)
                    if value:
                        values.append(value)

                table.add_row(values)
                rows.append(values)

        if debug_mode:
            logger.info("#" + str(threading.get_ident()) + "#   " + table_str + "\n\n" + str(table))

        html_info["tables"].append({
            "title" : table_str,
            "headers" : field_names,
            "rows" : rows
        })

    return html_info

def get_reddit_player_table(player_datas, player_type, is_fantasy, debug_mode, original_comment, last_updated, comment_id, hide_table, extra_stats, has_one_player, has_one_player_games):
    has_non_playoffs = False
    for player_data in player_datas:
        if player_data["stat_values"]["Shared"]["is_playoffs"] != "Only":
            has_non_playoffs = True

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1
    
    error_getting_adj = False
    for player_data in player_datas:
        if player_data["error_getting_adj"]:
            error_getting_adj = True
            break

    highest_vals, lowest_vals = calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, is_fantasy, seasons_leading, error_getting_adj, extra_stats)
    
    all_unique_quals = True
    quals = None
    player_index = 0
    for index, player_data in enumerate(player_datas):
        if not player_data["stat_values"]["Shared"]["Raw Quals"] or player_data["stat_values"]["Shared"]["Raw Quals"] == "Query: ":
            continue
        player_index = index
        if not quals:
            quals = player_data["stat_values"]["Shared"]["Raw Quals"]
        if quals != player_data["stat_values"]["Shared"]["Raw Quals"]:
            all_unique_quals = False
            break

    ranges_str = ""
    for index, player_data in enumerate(player_datas):
        if "all_rows" in player_data["stat_values"]["Shared"] and len(player_data["stat_values"]["Shared"]["all_rows"]):
            player_str = player_data["stat_values"]["Shared"]["Raw Player"]
        else:
            player_str = ""
            for index, player in enumerate(player_data["stat_values"]["Shared"]["Player"]):
                player_str += create_player_url_string(player, player_data["ids"][index], extra_stats)
                if index != len(player_data["stat_values"]["Shared"]["Player"]) - 1:
                    if player_data["add_type"] == "minus":
                        player_str += " DIFF "
                    else:
                        player_str += " + "
        
        has_one_player_missing = False
        missing_all_players = True
        for player in player_data["stat_values"]["Shared"]["Player"]:
            if player == "No Player Match!":
                has_one_player_missing = True
            else:
                missing_all_players = False

        player_search_str = ""
        if has_one_player_missing:
            player_search_str = " Searched Term: \"" + "+".join(player_data["stat_values"]["Shared"]["Search Term"]) + "\""

        ranges_str += player_str + player_search_str
        if missing_all_players:
            ranges_str += "\n\n"
        else:
            ranges_str += ": "  + player_data["stat_values"]["Shared"]["Raw Range"] + " " + player_data["stat_values"]["Shared"]["Raw Time"] + "\n\n"

        if not all_unique_quals:
            ranges_str += player_data["stat_values"]["Shared"]["Raw Quals"]
            if index != len(player_datas) - 1:
                ranges_str += "\n\n\\----------------------------------------\n\n"
    
    if all_unique_quals and player_datas[player_index]["stat_values"]["Shared"]["Raw Quals"] != "Query: ":
         ranges_str += "\\----------------------------------------\n\n" + player_datas[player_index]["stat_values"]["Shared"]["Raw Quals"]
                
    table_str = ranges_str + "\n\n---\n"

    has_season_stats = True
    for player_data in player_datas:
        if not player_data["has_season_stats"]:
            has_season_stats = False
            break
    has_award_stats = True
    for player_data in player_datas:
        if not player_data["has_award_stats"]:
            has_award_stats = False
            break
    if has_award_stats:
        has_playoffs = False
        has_reg_season = False
        for player_data in player_datas:
            if player_data["stat_values"]["Shared"]["is_playoffs"]:
                if player_data["stat_values"]["Shared"]["is_playoffs"] == "Only":
                    has_playoffs = True
                else:
                    has_reg_season = True
            else:
                has_reg_season = True
        if has_playoffs and has_reg_season:
            has_award_stats = False
    error_getting_pen = False
    for player_data in player_datas:
        if player_data["error_getting_pen"]:
            error_getting_pen = True
            break
    error_getting_fmb_lst = False
    for player_data in player_datas:
        if player_data["error_getting_fmb_lst"]:
            error_getting_fmb_lst = True
            break
    error_getting_adv = False
    for player_data in player_datas:
        if player_data["error_getting_adv"]:
            error_getting_adv = True
            break
    error_getting_pick = False
    for player_data in player_datas:
        if player_data["error_getting_pick"]:
            error_getting_pick = True
            break
    error_getting_gwd = False
    for player_data in player_datas:
        if player_data["error_getting_gwd"]:
            error_getting_gwd = True
            break
    
    tables_to_skip = set()
    headers_to_skip = {}
    for header_index, over_header in enumerate((list(headers[player_type["da_type"]]) + ["Shared"])):
        has_table_match = False
        if over_header == "Shared":
            header_index = 0
        if over_header == "Shared" or headers[player_type["da_type"]][over_header]:
            for header in get_constant_data.stat_groups[over_header]:
                has_header_match = False
                for index, player_data in enumerate(player_datas):
                    value = handle_table_data(player_data, player_type, header, over_header, highest_vals, lowest_vals, index, has_non_playoffs, True, is_fantasy, header_index, error_getting_adj, extra_stats)
                    if value != "N/A" and value != None:
                        has_header_match = True
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "Seasons":
                            if (not over_header.startswith("Awards/Honors") or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                has_table_match = True
                                break
                        else:
                            if ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                                if (not over_header.startswith("Awards/Honors") or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                    has_table_match = True
                                    break
                if not has_header_match:
                    if not over_header in headers_to_skip:
                        headers_to_skip[over_header] = set()
                    headers_to_skip[over_header].add(header)
        if not has_table_match:
            tables_to_skip.add(over_header)

    for header_index, over_header in enumerate(headers[player_type["da_type"]]):
        if over_header != "Shared":
            for extra_stat in extra_stats:
                if extra_stat.startswith("show-only-table-"):
                    if "show-only-table-" + over_header.lower() not in extra_stats and "show-only-table-" + str(header_index) not in extra_stats:
                        continue
        if "hide-table-" + over_header.lower() in extra_stats or ("hide-table-" + str(header_index) in extra_stats and over_header != "Shared"):
            continue
        if over_header.startswith("Advanced") and "hide-table-advanced" in extra_stats:
            continue
        if over_header.startswith("Awards/Honors") and "hide-table-awards/honors" in extra_stats:
            continue
        if over_header in tables_to_skip:
            if header_index != 0 or "Shared" in tables_to_skip:
                continue
        if not headers[player_type["da_type"]][over_header] or (over_header == "Fantasy" and not is_fantasy) or (over_header.startswith("Awards/Honors/") and is_fantasy):
            continue
        if over_header.startswith("Advanced/") and not has_season_stats:
            continue
        if over_header.startswith("Awards/Honors/") and not has_award_stats:
            continue
        if over_header.startswith("Advanced/"):
            if error_getting_adv:
                continue

        field_names = []

        if over_header == "Era Adjusted Passing":
            table_str += "**[Era Adjusted (+) Passing](https://www.pro-football-reference.com/about/glossary.htm#yscm)/Misc**\n\n" if not error_getting_adj else "**Misc**\n\n"
        elif over_header == "Penalties/Snaps":
            if error_getting_pen:
                table_str += "**Snaps**\n\n"
            else:
                table_str += "**" + over_header + "**\n\n"
        elif over_header.startswith("Advanced/") and over_header != "Advanced/Kicking" and over_header != "Advanced/Punting" and over_header != "Advanced/KickReturns" and over_header != "Advanced/PuntReturns":
            if over_header == "Advanced/Defense":
                table_str += "**" + over_header.split("/")[0] + " (Avail since 2018)**\n\n"
            else:
                table_str += "**" + over_header.split("/")[0] + " (Most stats avail since 2018)**\n\n"
        elif over_header.startswith("Advanced/"):
            table_str += "**" + over_header.split("/")[0] + "**\n\n"
        elif over_header.startswith("Awards/Honors/"):
            table_str += "**" + over_header.split("/")[0] + "/" + over_header.split("/")[1] + "**\n\n"
        else:
            table_str += "**" + over_header + "**\n\n"

        for header in get_constant_data.stat_groups["Shared"]:
            if "Shared" in headers_to_skip and header in headers_to_skip["Shared"]:
                continue

            if over_header == "Advanced/Defense":
                if header == "G" or header == "GS":
                    continue
            else:
                if header == "G_Adv" or header == "GS_Adv":
                    continue

            if over_header.startswith("Awards/Honors/") and header != "Player":
                continue

            if player_data["add_type"] == "minus":
                if (over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec":
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        continue

            if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header + ">" + header.lower() in extra_stats:
                continue
            for extra_stat in extra_stats:
                if extra_stat.startswith("show-only-stat-"):
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "Seasons":
                            continue
            if over_header == "Era Adjusted Passing" and header.endswith("+") and not seasons_leading and error_getting_adj:
                continue
            override_show = False
            if header_index == 0:
                if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats:
                    override_show = True
                if seasons_leading and over_header in div_id_to_stat and header in div_id_to_stat[over_header].values():
                    override_show = True
                if header in ("TmRec", "TmW/L%") and "record" in extra_stats:
                    override_show = True
                elif header in ("ATS TmRec", "ATS TmW/L%", "Spread/G", "SpreadMargin/G", "TmRec", "TmW/L%") and "ats-record" in extra_stats:
                    override_show = True
                elif header in ("O/U TmRec", "O/U TmW/L%", "OverUnder/G", "OUMargin/G", "TmRec", "TmW/L%") and "ou-record" in extra_stats:
                    override_show = True
                elif header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G") and "score" in extra_stats:
                    override_show = True

            if override_show or ("display" not in get_constant_data.stat_groups["Shared"][header] or get_constant_data.stat_groups["Shared"][header]["display"]):
                if "valid_for" not in get_constant_data.stat_groups["Shared"][header] or set(get_constant_data.stat_groups["Shared"][header]["valid_for"]) & set(headers[player_type["da_type"]]):
                    if header == "G_Adv" or header == "GS_Adv":
                        header = header[:-4]
                    field_names.append(header)

        for header in get_constant_data.stat_groups[over_header + "/Back" if over_header == "Advanced/Defense" and "Awards/Honors/Int" in headers[player_type["da_type"]] else over_header]:
            if over_header in headers_to_skip and header in headers_to_skip[over_header]:
                continue
            
            if over_header == "Era Adjusted Passing":
                if header.startswith("Pick6"):
                    if error_getting_pick:
                        continue
                elif header.startswith("GWD") or header.startswith("4QC"):
                    if error_getting_gwd:
                        continue
            elif over_header == "Penalties/Snaps":
                if "Pen" in header:
                    if error_getting_pen:
                        continue
            elif "FmbLst" in header or "Tnv" in header:
                if error_getting_fmb_lst:
                    continue

            if player_data["add_type"] == "minus":
                if (over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec":
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        continue

            if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header + ">" + header.lower() in extra_stats:
                continue
            for extra_stat in extra_stats:
                if extra_stat.startswith("show-only-stat-"):
                    if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "Seasons":
                            continue
            if over_header == "Era Adjusted Passing" and header.endswith("+") and not seasons_leading and error_getting_adj:
                continue
            override_show = False
            if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats:
                override_show = True
            if seasons_leading and over_header in div_id_to_stat and header in div_id_to_stat[over_header].values():
                override_show = True

            if override_show or ("display" not in get_constant_data.stat_groups[over_header][header] or get_constant_data.stat_groups[over_header][header]["display"]):
                if "valid_for" not in get_constant_data.stat_groups[over_header][header] or set(get_constant_data.stat_groups[over_header][header]["valid_for"]) & set(headers[player_type["da_type"]]):
                    if "Fmb" not in header or over_header != "Rushing" or "Scrimmage/All Purpose" not in headers[player_type["da_type"]] or not headers[player_type["da_type"]]["Scrimmage/All Purpose"]:
                        if over_header != "Fantasy" or ("Receiving" in headers[player_type["da_type"]] and headers[player_type["da_type"]]["Receiving"]) or "PPR" not in header:
                            if not (over_header.startswith("Awards/Honors") and not has_non_playoffs and not (header.startswith("Champ") or header.startswith("SB") or header.startswith("Seasons") or header.startswith("Player") or header.startswith("G"))):
                                if header == "AV":
                                    header = "[AV](https://www.pro-football-reference.com/blog/index37a8.html)"
                                field_names.append(header)
        
        table_str += "|".join(field_names) + "\n"
        for index in range(len(field_names)):
            table_str += ":-:|"
        table_str = table_str[:-1] + "\n"

        for index, player_data in enumerate(player_datas):
            if "all_rows" in player_data["stat_values"]["Shared"] and len(player_data["stat_values"]["Shared"]["all_rows"]):
                values = []
                for header in get_constant_data.stat_groups["Shared"]:
                    if "Shared" in headers_to_skip and header in headers_to_skip["Shared"]:
                        continue

                    if over_header == "Advanced/Defense":
                        if header == "G" or header == "GS":
                            continue
                    else:
                        if header == "G_Adv" or header == "GS_Adv":
                            continue

                    if over_header.startswith("Awards/Honors/") and header != "Player":
                        continue
                    value = handle_table_data(player_data, player_type, header, "Shared", highest_vals, lowest_vals, index, has_non_playoffs, True, is_fantasy, header_index, error_getting_adj, extra_stats)
                    if value:
                        values.append(value)
                for header in get_constant_data.stat_groups[over_header + "/Back" if over_header == "Advanced/Defense" and "Awards/Honors/Int" in headers[player_type["da_type"]] else over_header]:
                    if over_header in headers_to_skip and header in headers_to_skip[over_header]:
                        continue

                    if over_header == "Era Adjusted Passing":
                        if header.startswith("Pick6"):
                            if error_getting_pick:
                                continue
                        elif header.startswith("GWD") or header.startswith("4QC"):
                            if error_getting_gwd:
                                continue
                    elif over_header == "Penalties/Snaps":
                        if "Pen" in header:
                            if error_getting_pen:
                                continue
                    elif "FmbLst" in header or "Tnv" in header:
                        if error_getting_fmb_lst:
                            continue
                    value = handle_table_data(player_data, player_type, header, over_header, highest_vals, lowest_vals, index, has_non_playoffs, True, is_fantasy, header_index, error_getting_adj, extra_stats)
                    if value:
                        values.append(value)

                table_str += "|".join(values) + "\n"
        table_str += "\n"

    html_info = print_player_data(player_datas, player_type, highest_vals, lowest_vals, has_non_playoffs, is_fantasy, debug_mode, extra_stats, has_one_player_games)

    imgur_link = None
    if has_one_player:
        failed_counter = 0
        while(True):
            try:
                logger.info("#" + str(threading.get_ident()) + "#   " + "Starting image generation")
                imgur_link = create_table_html(html_info, player_datas, original_comment, last_updated, comment_id, extra_stats)
                logger.info("#" + str(threading.get_ident()) + "#   " + "Done with image generation")
                break
            except Exception:
                failed_counter += 1
                if failed_counter > max_request_retries:
                    if hide_table:
                        raise
                    else:
                        logger.exception("#" + str(threading.get_ident()) + "#   " + "Error generating image")
                        break

            delay_step = 10
            logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow image generation to chill")
            time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
            for i in range(retry_failure_delay, 0, -time_to_wait):
                logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                time.sleep(time_to_wait)
            logger.info("#" + str(threading.get_ident()) + "#   " + "0")

    return table_str, imgur_link

def calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, is_fantasy, seasons_leading, error_getting_adj, extra_stats):
    highest_vals = {}
    lowest_vals = {}

    for index, player_data in enumerate(player_datas):
         if "all_rows" in player_data["stat_values"]["Shared"] and player_data["stat_values"]["Shared"]["all_rows"]:
            for header_index, over_header in enumerate((list(headers[player_type["da_type"]]) + ["Shared"])):
                if not seasons_leading:
                    if over_header.startswith("Awards/Honors"):
                        if not ("Seasons" in player_data["stat_values"][over_header] and player_data["stat_values"][over_header]["Seasons"]):
                            continue
                    else:
                        if not ("G" in player_data["stat_values"]["Shared"] and player_data["stat_values"]["Shared"]["G"]):
                            continue
                else:
                    the_over_header = None
                    for pot_header in headers[player_type["da_type"]]:
                        if pot_header.startswith("Awards/Honors/"):
                            the_over_header = pot_header
                            break

                    if not the_over_header:
                        continue
                    
                    if not ("Seasons" in player_data["stat_values"][the_over_header] and player_data["stat_values"][the_over_header]["Seasons"]):
                        continue
                    
                if not over_header in highest_vals:
                    highest_vals[over_header] = {}
                for header in get_constant_data.stat_groups[over_header]:
                    set_value = False
                    add_value = False
                    if over_header in player_data["stat_values"] and header in player_data["stat_values"][over_header] and handle_table_data(player_data, player_type, header, over_header, highest_vals, lowest_vals, index, has_non_playoffs, True, is_fantasy, header_index, error_getting_adj, extra_stats) != "N/A":
                        value = player_data["stat_values"][over_header][header]
                        original_value = value

                        if ((over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec") and not seasons_leading:
                            rec_split = value.split(":")
                            try:
                                value = float(rec_split[0]) / (float(rec_split[0]) + float(rec_split[1]))
                            except ZeroDivisionError:
                                value = 0

                        if (not "compare" in get_constant_data.stat_groups[over_header][header] or get_constant_data.stat_groups[over_header][header]["compare"]) and isinstance(value, numbers.Number):
                            if header in highest_vals[over_header]:
                                if "skipzero" in get_constant_data.stat_groups[over_header][header]:
                                    if not value:
                                        if not highest_vals[over_header][header]["value"]:
                                            add_value = True
                                        else:
                                            continue
                                    elif not highest_vals[over_header][header]["value"]:
                                        set_value = True

                                positive_to_use = get_constant_data.stat_groups[over_header][header]["positive"]
                                if seasons_leading and header in ["Int%", "Sk%"]:
                                    positive_to_use = True

                                if not set_value:
                                    if value > highest_vals[over_header][header]["value"]:
                                        set_value = positive_to_use
                                    elif value < highest_vals[over_header][header]["value"]:
                                        set_value = not positive_to_use
                                    else:
                                        add_value = True
                            else:
                                set_value = True
                            if set_value:
                                highest_vals[over_header][header] = {
                                    "players" : [index],
                                    "original_value" : original_value,
                                    "value" : value
                                }
                            elif add_value:
                                highest_vals[over_header][header]["players"].append(index)
        
            for header_index, over_header in enumerate((list(headers[player_type["da_type"]]) + ["Shared"])):
                if not seasons_leading:
                    if over_header.startswith("Awards/Honors"):
                        if not ("Seasons" in player_data["stat_values"][over_header] and player_data["stat_values"][over_header]["Seasons"]):
                            continue
                    else:
                        if not ("G" in player_data["stat_values"]["Shared"] and player_data["stat_values"]["Shared"]["G"]):
                            continue
                else:
                    the_over_header = None
                    for pot_header in headers[player_type["da_type"]]:
                        if pot_header.startswith("Awards/Honors/"):
                            the_over_header = pot_header
                            break

                    if not the_over_header:
                        continue
                    
                    if not ("Seasons" in player_data["stat_values"][the_over_header] and player_data["stat_values"][the_over_header]["Seasons"]):
                        continue
                    
                if not over_header in lowest_vals:
                    lowest_vals[over_header] = {}
                for header in get_constant_data.stat_groups[over_header]:
                    set_value = False
                    add_value = False
                    if over_header in player_data["stat_values"] and header in player_data["stat_values"][over_header] and handle_table_data(player_data, player_type, header, over_header, highest_vals, lowest_vals, index, has_non_playoffs, True, is_fantasy, header_index, error_getting_adj, extra_stats) != "N/A":
                        value = player_data["stat_values"][over_header][header]
                        original_value = value

                        if ((over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec") and not seasons_leading:
                            rec_split = value.split(":")
                            try:
                                value = float(rec_split[0]) / (float(rec_split[0]) + float(rec_split[1]))
                            except ZeroDivisionError:
                                value = 0

                        if (not "compare" in get_constant_data.stat_groups[over_header][header] or get_constant_data.stat_groups[over_header][header]["compare"]) and isinstance(value, numbers.Number):
                            if header in lowest_vals[over_header]:
                                if "skipzero" in get_constant_data.stat_groups[over_header][header]:
                                    if not value:
                                        if not lowest_vals[over_header][header]["value"]:
                                            add_value = True
                                        else:
                                            set_value = True
                                    elif not lowest_vals[over_header][header]["value"]:
                                        continue

                                positive_to_use = get_constant_data.stat_groups[over_header][header]["positive"]
                                if seasons_leading and header in ["Int%", "Sk%"]:
                                    positive_to_use = True

                                if not set_value:
                                    if value < lowest_vals[over_header][header]["value"]:
                                        set_value = positive_to_use
                                    elif value > lowest_vals[over_header][header]["value"]:
                                        set_value = not positive_to_use
                                    else:
                                        add_value = True
                            else:
                                set_value = True
                            if set_value:
                                lowest_vals[over_header][header] = {
                                    "players" : [index],
                                    "original_value" : original_value,
                                    "value" : value
                                }
                            elif add_value:
                                lowest_vals[over_header][header]["players"].append(index)
    
    return highest_vals, lowest_vals

def create_table_html(html_info, player_datas, original_comment, last_updated, comment_id, extra_stats):
    dirpath = tempfile.mkdtemp()

    try:
        soup = BeautifulSoup("", "lxml")
        html_tag = soup.new_tag("html")
        head_tag = soup.new_tag("head")
        head_tag.append(BeautifulSoup("<meta charset=\"UTF-8\" />", "lxml"))
        style_tag = soup.new_tag("style")
        body_tag = soup.new_tag("body")
        body_tag["style"] = "text-rendering: geometricPrecision;"
        body_div = soup.new_tag("div")

        style_tag.append(css_string)
        head_tag.append(style_tag)

        # courtesy_div = soup.new_tag("div")
        # courtesy_div.string = "Data courtesy of Pro Football Reference"
        # courtesy_div["style"] = "font-size: 12px; text-align: right;"
        # body_div.append(courtesy_div)

        total_image_div = soup.new_tag("div")
        if "hide-name" in extra_stats:
            total_image_div["style"] = "height: 170px; padding-bottom: 10px; display: inline-block;"
        else:
            total_image_div["style"] = "height: 170px; border: dashed; border-width: 0px 1px 1px 0px; padding-bottom: 10px; display: inline-block;"
        title_div_tag = soup.new_tag("div")
        title_div_tag["style"] = "text-align: center;"
        images_div_tag = soup.new_tag("div")

        # league_div = soup.new_tag("div")
        # league_div["style"] = "overflow: hidden;"
        # league_total_div = soup.new_tag("div")
        # league_div["style"] = "float: right; max-width: 5%;"
        # league_div_tag = soup.new_tag("div")
        # league_tag = soup.new_tag("img")
        # league_tag["src"] = "file:///" + os.path.abspath("../team_logos/leagues/nfl.png")
        # league_tag["style"] = "width: 50px;"
        # league_div_tag.append(league_tag)
        # league_total_div.append(league_div_tag)
        # league_div.append(league_total_div)
        # body_div.append(league_div)

        # images_div_tag["style"] = "overflow: hidden; position: relative;"
        tables_div_tag = soup.new_tag("div")
        parsed_ids = set()
        max_comb_players = 0
        if not "hide-name" in extra_stats:
            for big_index, player_image_urls in enumerate(html_info["player_image_url"]):
                if len(player_image_urls["urls"]) > max_comb_players:
                    max_comb_players = len(player_image_urls["urls"])
                for index, player_image_url in enumerate(player_image_urls["urls"]):
                    if player_image_urls["names"][index] != "No Player Match!" and len(parsed_ids) < 10:
                        url = player_image_url if player_image_url else "file:///" + os.path.abspath("../team_logos/leagues/missing.png")
                        id = player_image_urls["ids"][index]
                        name = player_image_urls["names"][index]
                        parsed_name = create_human_name(name)
                        position = player_image_urls["positions"][index]
                        team = player_image_urls["teams"][index]
                        number = player_image_urls["numbers"][index]
                        hof = player_image_urls["hofs"][index]
                        team_link = None
                        if not id in parsed_ids:
                            total_div = soup.new_tag("div")
                            total_div["style"] = "display: table-cell; width: 85px; padding-right: 10px;"
                            #player_name_div_tag = soup.new_tag("div")
                            #player_name_div_tag["stule"] = "max-width: 100px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                            #player_name_div_tag.string = name

                            team_color = "black"
                            secondary_color = "white"
                            if hof:
                                team_color = "gold"
                                secondary_color = "black"
                                team_link = "file:///" + os.path.abspath("../team_logos/leagues/nfl_hof.png")
                            else:
                                if team:
                                    team = re.sub(r"[^A-Za-z0-9 ]+", "", team)
                                    team = re.sub(r"\s+", " ", team).strip().lower()
                                    if team in team_renames:
                                        team = team_renames[team]
                                    for team_obj in team_colors:
                                        if team_obj["league"] == "nfl":
                                            pot_team = team_obj["name"]
                                            pot_team = re.sub(r"[^A-Za-z0-9 ]+", "", pot_team)
                                            pot_team = re.sub(r"\s+", " ", pot_team).strip().lower()

                                            if team == pot_team:
                                                if "hex" in team_obj["colors"] and team_obj["colors"]["hex"]:
                                                    team_color = "#" + team_obj["colors"]["hex"][0]
                                                    if len(team_obj["colors"]["hex"]) > 1:
                                                        secondary_color = "#" + team_obj["colors"]["hex"][1]
                                                elif "rgb" in team_obj["colors"] and team_obj["colors"]["rgb"]:
                                                    team_color = "rgb(" + team_obj["colors"]["rgb"][0].replace(" ", ",") + ")"
                                                    if len(team_obj["colors"]["rgb"]) > 1:
                                                        secondary_color = "rgb(" + team_obj["colors"]["rgb"][1].replace(" ", ",") + ")"
                                                if os.path.isfile(os.path.abspath("../team_logos/nfl/" + pot_team.replace(" ", "-") + ".svg")):
                                                    team_link = "file:///" + os.path.abspath("../team_logos/nfl/" + pot_team.replace(" ", "-") + ".svg")
                                                elif os.path.isfile(os.path.abspath("../team_logos/nfl/" + pot_team.replace(" ", "-") + ".png")):
                                                    team_link = "file:///" + os.path.abspath("../team_logos/nfl/" + pot_team.replace(" ", "-") + ".png")
                                                break

                            url_div_tag = soup.new_tag("div")
                            images_tag = soup.new_tag("img")
                            images_tag["src"] = url
                            if player_image_url:
                                images_tag["style"] = "height: 165px; width: 110px; border-color: " + team_color + "; border-width:2px 2px 3px 2px; border-style: solid;"
                            else:
                                images_tag["style"] = "height: 165px; width: 110px; border-color: " + team_color + "; border-width:2px 2px 3px 2px; border-style: solid;"
                            url_div_tag.append(images_tag)
                            if team_link:
                                images_tag = soup.new_tag("img")
                                images_tag["src"] = team_link
                                if hof:
                                    images_tag["style"] = "width: 28px; height: 28px; position: relative; bottom: 51px; left: 3px;"
                                else:
                                    images_tag["style"] = "width: 30px; height: 30px; position: relative; bottom: 48px; right: 0px;"
                                url_div_tag.append(images_tag)
                            if number:
                                number_tag = soup.new_tag("p")
                                if team_link:
                                    if hof:
                                        number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 218px; left: 88px; font-size: 20px;"
                                    else:
                                        number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 220px; left: 88px; font-size: 20px;"
                                else:
                                    number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 190px; left: 88px; font-size: 20px;"
                                number_tag["style"] += "-webkit-text-stroke-width: 3px; -webkit-text-stroke-color: " + secondary_color + "; display: flex;"

                                number_str = str(number)
                                if len(number_str) == 1:
                                    number_span = soup.new_tag("span")
                                    number_span.string = "0"
                                    number_span["style"] = "visibility:hidden;"
                                    number_tag.append(number_span)
                                for digit in number_str:
                                    number_span = soup.new_tag("span")
                                    number_span.string = digit
                                    number_tag.append(number_span)

                                url_div_tag.append(number_tag)
                            if position:
                                position_tag = soup.new_tag("p")
                                position_tag.string = position
                                if team_link:
                                    if hof:
                                        if number:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 265px; left: 4px; font-size: 20px;"
                                        else:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 218px; left: 4px; font-size: 20px;"
                                    else:
                                        if number:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 267px; left: 4px; font-size: 20px;"
                                        else:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 220px; left: 4px; font-size: 20px;"
                                else:
                                    if number:
                                        position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 237px; left: 4px; font-size: 20px;"
                                    else:
                                        position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 190px; left: 4px; font-size: 20px;"
                                position_tag["style"] += "-webkit-text-stroke-width: 3px; -webkit-text-stroke-color: " + secondary_color + ";"
                                url_div_tag.append(position_tag)
                            player_name_tag = soup.new_tag("p")
                            player_name_tag.string = parsed_name.first[0] + ". " + parsed_name.last
                            if team_link:
                                if hof:
                                    if number:
                                        player_name_tag["style"] = "position: relative; bottom: 164px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        if position:
                                            player_name_tag["style"] = "position: relative; bottom: 117px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                        else:
                                            player_name_tag["style"] = "position: relative; bottom: 65px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                else:
                                    if number:
                                        player_name_tag["style"] = "position: relative; bottom: 166px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        if position:
                                            player_name_tag["style"] = "position: relative; bottom: 119px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                        else:
                                            player_name_tag["style"] = "position: relative; bottom: 67px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                            else:
                                if number:
                                    player_name_tag["style"] = "position: relative; bottom: 136px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                else:
                                    if position:
                                        player_name_tag["style"] = "position: relative; bottom: 89px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        player_name_tag["style"] = "position: relative; bottom: 37px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                            url_div_tag.append(player_name_tag)

                            parsed_ids.add(id)
                        
                            total_div.append(url_div_tag)
                            #total_div.append(player_name_div_tag)
                            images_div_tag.append(total_div)
        
        total_image_div.append(images_div_tag)
        body_div.append(total_image_div)

        all_unique_quals = True
        quals = None
        player_index = 0
        for index, player_data in enumerate(player_datas):
            if not player_data["stat_values"]["Shared"]["Raw Quals"] or player_data["stat_values"]["Shared"]["Raw Quals"] == "Query: ":
                continue
            player_index = index
            if not quals:
                quals = player_data["stat_values"]["Shared"]["Raw Quals"]
            if quals != player_data["stat_values"]["Shared"]["Raw Quals"]:
                all_unique_quals = False
                break

        for index, player_data in enumerate(player_datas):
            current_div = soup.new_tag("div")
            if True:
                current_div["style"] = "display: inline-block; vertical-align: top;"
            else:
                current_div["style"] = "display: inline-block; border: dashed; border-width: 0px 0px 0px 1px; vertical-align: top;"
            
            has_one_player_missing = False
            missing_all_players = True
            for player in player_data["stat_values"]["Shared"]["Player"]:
                if player == "No Player Match!":
                    has_one_player_missing = True
                else:
                    missing_all_players = False
            
            h2 = soup.new_tag("h2")
            h2.string = player_data["stat_values"]["Shared"]["Raw Player"]
            h2["style"] = "float: left; padding-left:10px; padding-right:10px;"
            raw_range = player_data["stat_values"]["Shared"]["Raw Range"]
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_range)
            while match:
                raw_range = raw_range.replace(match.group(0), match.group(1), 1)
                match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_range)

            if has_one_player_missing:
                h2_div = soup.new_tag("div")
                h2_div.string = "Searched Term: \"" + "+".join(player_data["stat_values"]["Shared"]["Search Term"]) + "\""
                h2_div["style"] = "font-size: medium;"
                h2.append(h2_div)

            if not missing_all_players:
                h2_div = soup.new_tag("div")
                h2_div.string = raw_range
                h2_div["style"] = "font-size: medium;"
                h2.append(h2_div)

            if player_data["stat_values"]["Shared"]["Raw Time"] and not missing_all_players:
                h2_div = soup.new_tag("div")
                h2_div.string = player_data["stat_values"]["Shared"]["Raw Time"]
                h2_div["style"] = "font-size: small;"
                h2.append(h2_div)
                
            if not all_unique_quals and not missing_all_players:
                raw_quals = player_data["stat_values"]["Shared"]["Raw Quals"]
                if raw_quals and raw_quals != "Query: ":
                    match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
                    while match:
                        raw_quals = raw_quals.replace(match.group(0), match.group(1), 1)
                        match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
                        
                    h2_div = soup.new_tag("div")
                    h2_div.string = raw_quals
                    h2_div["style"] = "font-size: x-small;"
                    h2.append(h2_div)
            current_div.append(h2)
            title_div_tag.append(current_div)

        if all_unique_quals and player_datas[player_index]["stat_values"]["Shared"]["Raw Quals"] != "Query: ":
            h2 = soup.new_tag("h2")
            raw_quals = player_datas[player_index]["stat_values"]["Shared"]["Raw Quals"]
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
            while match:
                raw_quals = raw_quals.replace(match.group(0), match.group(1), 1)
                match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
            border_div = soup.new_tag("div")
            border_div["style"] = "border: dashed; border-width: 1px 0px 0px 0px; width: 160px; margin: auto; margin-top: 2px;"
            h2.append(border_div)
            h2_div = soup.new_tag("div")
            h2_div.string = raw_quals
            h2_div["style"] = "font-size: large;"
            h2.append(h2_div)
            title_div_tag.append(h2)

        body_div.append(title_div_tag)

        for table in html_info["tables"]:
            div_tag = soup.new_tag("div")
            table_tag = soup.new_tag("table")
            caption_tag = soup.new_tag("caption")
            t_head_tag = soup.new_tag("thead")
            t_body_tag = soup.new_tag("tbody")

            caption_tag.string = table["title"]

            header_row = soup.new_tag("tr")
            for header in table["headers"]:
                th_tag = soup.new_tag("th")
                th_tag.string = header
                header_row.append(th_tag)
            t_head_tag.append(header_row)

            for index, row in enumerate(table["rows"]):
                column_row = soup.new_tag("tr")
                for column in row:
                    column_tag = soup.new_tag("td")
                    column, highest = re.subn(r"(?<!\\)\*{2}", "", column)
                    column = column.replace("\\*", "*")
                    if highest:
                        bold_tag = soup.new_tag("b")
                        bold_tag.string = column
                        column_tag.append(bold_tag)
                        column_tag["style"] = "color : green;"
                    else:
                        column_tag.string = column
                        column_tag["style"] = ""

                    if index % 2 == 0:
                        column_tag["style"] += " background-color: #EEEEEE;"
                    else:
                        column_tag["style"] += " background-color: #FFFFFF;"

                    column_row.append(column_tag)
                t_body_tag.append(column_row)

            table_tag.append(caption_tag)
            table_tag.append(t_head_tag)
            table_tag.append(t_body_tag)
            div_tag.append(table_tag)
            tables_div_tag.append(div_tag)

        body_div.append(tables_div_tag)

        info_div = soup.new_tag("div")
        stats_last_updated_div = soup.new_tag("div")
        comment_div = soup.new_tag("div")

        tz = pytz.timezone("US/Eastern")
        current_date = datetime.datetime.now(tz)

        stats_updated_div_1 = soup.new_tag("div")
        stats_updated_div_2 = soup.new_tag("div")
        stats_updated_div_1.string = "Generated: " + current_date.strftime("%b %d %Y, %I:%M%p %Z")
        if last_updated:
            stats_updated_div_2.string = "Stats last updated: " + last_updated.strftime("%b %d %Y, %I:%M%p %Z")
            stats_last_updated_div.append(stats_updated_div_1)
            stats_last_updated_div.append(stats_updated_div_2)
        else:
            stats_updated_div_2.string = "h"
            stats_updated_div_2["style"] = "color: white;"
            stats_last_updated_div.append(stats_updated_div_2)
            stats_last_updated_div.append(stats_updated_div_1)
        stats_last_updated_div["style"] = "float: left; width: 30%;"
        info_div.append(stats_last_updated_div)
        comment_div_1 = soup.new_tag("div")
        comment_div_2 = soup.new_tag("div")
        comment_div_1.string = "N/A indicates stat was not tracked at all during the time frame, * indicates stat was not tracked consistently throughout the entire time frame"
        if not "hide-name" in extra_stats:
            comment_div_2.string = "Generated from command: " + original_comment
        comment_div.append(comment_div_1)
        comment_div.append(comment_div_2)
        comment_div["style"] = "float: right; width: 70%; text-align: right;"
        info_div.append(comment_div)
        info_div["style"] = "padding-top: 20px; font-size: 12px;"
        body_div.append(info_div)

        body_tag.append(body_div)

        soup.append(html_tag)
        html_tag.append(head_tag)
        html_tag.append(body_tag)

        #with open(dirpath + "/out.html", "w", encoding="utf-8") as file:
            #file.write(str(soup))

        if max_comb_players > 10:
            options = {
                "quiet" : "",
                "page-width": "417",
                "page-height": "420"
            }
        else:
            options = {
                "quiet" : "",
                "page-size": "A3"
            }

        img = pdfkit.from_string(str(soup), False, options)
        img_file = io.BytesIO(img)

        the_uuid = str(uuid.uuid1())

        pdf_file_name = os.path.abspath(dirpath + "/" + the_uuid + ".pdf")
        image_file_name = os.path.abspath(dirpath + "/" + the_uuid + ".png")

        with open(pdf_file_name, "wb") as temp_pdf:
            temp_pdf.write(img_file.getbuffer())

        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting mupdf conversion")

        subprocess.check_output("/opt/mupdf/bin/mutool convert -O resolution=600 -o " + image_file_name + " " + temp_pdf.name, stderr=subprocess.STDOUT, shell=True)

        image_file_name_split = os.path.splitext(image_file_name)
        comb_image_file_name = image_file_name_split[0] + "*" + image_file_name_split[1]
        
        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting imagemagick conversion")

        subprocess.check_output("convert -trim -append -bordercolor White -border 30x30 " + comb_image_file_name + " " + image_file_name, stderr=subprocess.STDOUT, shell=True)

        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting imgur upload")

        with open(image_file_name, "rb") as image_file:
            data = {
                "image" : base64.standard_b64encode(image_file.read()),
                "title" : comment_id
            }
            request = urllib.request.Request(url=imgur_upload_url, data=urllib.parse.urlencode(data).encode("utf-8"), headers=imgur_headers)
            return url_request_json_urlib(request, timeout=30)["data"]["link"]
    finally:
        #logger.info("#" + str(threading.get_ident()) + "# " + dirpath)
        shutil.rmtree(dirpath)

def handle_table_data(player_data, player_type, header, over_header, highest_vals, lowest_vals, index, has_non_playoffs, for_reddit, is_fantasy, header_index, error_getting_adj, extra_stats):
    if over_header != "Shared":
        for extra_stat in extra_stats:
            if extra_stat.startswith("show-only-table-"):
                if "show-only-table-" + over_header.lower() not in extra_stats and "show-only-table-" + str(header_index) not in extra_stats:
                    return None
    if "hide-table-" + over_header.lower() in extra_stats or ("hide-table-" + str(header_index) in extra_stats and over_header != "Shared"):
        return None
    if over_header.startswith("Advanced") and "hide-table-advanced" in extra_stats:
        return None
    if over_header.startswith("Awards/Honors") and "hide-table-awards/honors" in extra_stats:
        return None
    if player_data["add_type"] == "minus":
        if (over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec":
            if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                return None
    if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header + ">" + header.lower() in extra_stats:
        return None
    for extra_stat in extra_stats:
        if extra_stat.startswith("show-only-stat-"):
            if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats):
                if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "Seasons":
                    return None
    
    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1
    
    if over_header == "Era Adjusted Passing" and header.endswith("+") and not seasons_leading and error_getting_adj:
        return None
    
    override_show = False
    if header_index == 0 or over_header != "Shared":
        if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats:
            override_show = True
        if seasons_leading and over_header in div_id_to_stat and header in div_id_to_stat[over_header].values():
            override_show = True
        if header in ("TmRec", "TmW/L%") and "record" in extra_stats:
            override_show = True
        elif header in ("ATS TmRec", "ATS TmW/L%", "Spread/G", "SpreadMargin/G", "TmRec", "TmW/L%") and "ats-record" in extra_stats:
            override_show = True
        elif header in ("O/U TmRec", "O/U TmW/L%", "OverUnder/G", "OUMargin/G", "TmRec", "TmW/L%") and "ou-record" in extra_stats:
            override_show = True
        elif header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G") and "score" in extra_stats:
            override_show = True
    
    missing_first_downs = False
    has_one_first_down = False
    if "all_rows" in player_data["stat_values"]["Shared"]:
        for row in player_data["stat_values"]["Shared"]["all_rows"]:
            if "is_missing_first_downs" in row["Shared"] and row["Shared"]["is_missing_first_downs"]:
                missing_first_downs = True
            else:
                has_one_first_down = True
            if missing_first_downs and has_one_first_down:
                break

    if override_show or ("display" not in get_constant_data.stat_groups[over_header][header] or get_constant_data.stat_groups[over_header][header]["display"]):
        if "valid_for" not in get_constant_data.stat_groups[over_header][header] or set(get_constant_data.stat_groups[over_header][header]["valid_for"]) & set(headers[player_type["da_type"]]):
            if "Fmb" not in header or over_header != "Rushing" or "Scrimmage/All Purpose" not in headers[player_type["da_type"]] or not headers[player_type["da_type"]]["Scrimmage/All Purpose"]:
                if over_header != "Fantasy" or ("Receiving" in headers[player_type["da_type"]] and headers[player_type["da_type"]]["Receiving"]) or "PPR" not in header:
                    if over_header == "Era Adjusted Passing" and (header == "Rec" or header == "Rec/17G" or header == "W/L%") and not any(True for true_player_type in player_data["stat_values"]["Shared"]["Types"] if true_player_type and "Passing" in headers[true_player_type] and headers[true_player_type]["Passing"]):
                        return "N/A"
                    elif over_header.startswith("Awards/Honors") and player_data["stat_values"]["Shared"]["is_playoffs"] == "Only" and not (header.startswith("Champ") or header.startswith("SB") or header.startswith("Seasons") or header.startswith("Player") or header.startswith("G")):
                        if has_non_playoffs:
                            return "N/A"
                        else:
                            return None
                    elif over_header.startswith("Advanced/") and "1D" in header and not has_one_first_down:
                        return "N/A"
                    elif seasons_leading and (over_header not in div_id_to_stat or header not in div_id_to_stat[over_header].values()) and not header.startswith("Player") and header != "Seasons":
                        return "N/A"
                    elif is_against_header(header, over_header, extra_stats):
                        return "N/A"
                    else:
                        value = player_data["stat_values"][over_header][header] if over_header in player_data["stat_values"] and header in player_data["stat_values"][over_header] else 0.0
                        if header == "Player":
                            players = value
                            value = ""
                            first = True
                            for index, player in enumerate(players):
                                if not first:
                                    value += "/"
                                else:
                                    first = False

                                if len(players) > 1:
                                    if player != "No Player Match!":
                                        parsed_name = create_human_name(player)
                                        player = parsed_name.last

                                if for_reddit and player_data["ids"]:
                                    value += create_player_url_string(player, player_data["ids"][index], extra_stats)
                                else:
                                    value += player
                        else:
                            has_valid_stat = False
                            if "all_rows" in player_data["stat_values"]["Shared"]:
                                for row in player_data["stat_values"]["Shared"]["all_rows"]:
                                    row["Shared"]["YearStart"] = [row["Shared"]["Year"]]
                                    row["Shared"]["DateStart"] = [row["Shared"]["Date"]]
                                    if row["Shared"]["is_playoffs"]:
                                        row["Shared"]["is_playoffs"] = "Only"
                                    else:
                                        row["Shared"]["is_playoffs"] = None

                                    if not get_constant_data.is_invalid_stat(over_header, header, row, False):
                                        has_valid_stat = True
                                        break
                            if not has_valid_stat:
                                return "N/A"

                            if isinstance(value, numbers.Number):
                                if player_data["add_type"] == "minus":
                                    value = ("{:.2f}").format(get_constant_data.round_value(100 * value, 2)) + "%"
                                elif "round" in get_constant_data.stat_groups[over_header][header] and not seasons_leading:
                                    round_val = get_constant_data.stat_groups[over_header][header]["round"]
                                    if round_val == "percent":
                                        value = ("{:.2f}").format(get_constant_data.round_value(100 * value, 2)) + "%"
                                    else:
                                        value = get_constant_data.round_value(value, round_val)
                                        value = ("{:." + str(round_val) + "f}").format(value)
                                else:
                                    value = get_constant_data.round_value(value)
                            elif (over_header == "Era Adjusted Passing" and header.startswith("Rec")) or header == "TmRec" or header == "ATS TmRec" or header == "O/U TmRec":
                                rec_split = value.split(":")
                                value = str(get_constant_data.round_value(float(rec_split[0]))) + ":" + str(get_constant_data.round_value(float(rec_split[1]))) + ":" + str(get_constant_data.round_value(float(rec_split[2])))
                            value = str(value) 
                        
                            if over_header == "Shared" and header == "G":
                                if player_data["stat_values"]["Shared"]["any_missing_games"]:
                                    value += "*"
                            elif get_constant_data.is_invalid_stat(over_header, header, player_data["stat_values"], True, player_data):
                                value += "*"
                            elif over_header.startswith("Advanced/") and "1D" in header and missing_first_downs:
                                value += "*"

                            if over_header in highest_vals and header in highest_vals[over_header] and index in highest_vals[over_header][header]["players"] and not (over_header in lowest_vals and header in lowest_vals[over_header] and index in lowest_vals[over_header][header]["players"]):
                                value = "**" + value + "**"
                                
                        return value

def ordinal_to_number(ordinal):
    if ordinal:
        is_exclusive = ordinal.endswith("excl")
        if is_exclusive:
            ordinal = ordinal[:-4]
            is_start_val = True
        else:
            is_exclusive = ordinal.startswith("excl")
            if is_exclusive:
                ordinal = ordinal[4:]
                is_start_val = False
        
        is_inclusive = ordinal.endswith("incl")
        if is_inclusive:
            ordinal = ordinal[:-4]
            is_start_val = True
        else:
            is_inclusive = ordinal.startswith("incl")
            if is_inclusive:
                ordinal = ordinal[4:]
                is_start_val = False

        is_percent = "%" in ordinal
        if is_percent:
            ordinal = ordinal.replace('%', '')
        ordinal = ordinal.replace('*', '')
        
        try:
            ordinal = float(numeral.roman2int(ordinal))
        except Exception:
            try:
                ordinal = float(ordinal)
            except ValueError:
                if ordinal == "min":
                    ordinal = -float('inf')
                elif ordinal == "max" or ordinal == "today" or ordinal == "present" or ordinal == "now":
                    ordinal = float('inf')
                else:
                    if ordinal.endswith("no"):
                        ordinal = ordinal.replace("no", "zero")
                    elif ordinal.endswith("first"):
                        ordinal = ordinal.replace("first", "one")
                    elif ordinal.endswith("second"):
                        ordinal = ordinal.replace("second", "two")
                    elif ordinal.endswith("third"):
                        ordinal = ordinal.replace("third", "three")
                    elif ordinal.endswith("fifth"):
                        ordinal = ordinal.replace("fifth", "five")
                    elif ordinal.endswith("eighth"):
                        ordinal = ordinal.replace("eighth", "eight")
                    elif ordinal.endswith("ninth"):
                        ordinal = ordinal.replace("ninth", "nine")
                    elif ordinal.endswith("th"):
                        ordinal = ordinal.replace("th", "")
                    elif ordinal.endswith("st"):
                        ordinal = ordinal.replace("st", "")
                    elif ordinal.endswith("nd"):
                        ordinal = ordinal.replace("nd", "")
                    elif ordinal.endswith("rd"):
                        ordinal = ordinal.replace("rd", "")

                    try:
                        ordinal = float(w2n.word_to_num(ordinal))
                    except Exception:
                        raise Exception("Invalid ordinal: " + str(ordinal))

        if is_percent:
            ordinal = ordinal / 100
        
        if is_exclusive:
            if is_start_val:
                ordinal = numpy.nextafter(ordinal, ordinal + 1)
            else:
                ordinal = numpy.nextafter(ordinal, ordinal - 1)
        elif is_inclusive:
            if is_start_val:
                ordinal = numpy.nextafter(ordinal, ordinal - 1)
            else:
                ordinal = numpy.nextafter(ordinal, ordinal + 1)
        
        if ordinal.is_integer():
            ordinal = int(ordinal)

        return ordinal
    else:
        raise Exception("Invalid ordinal: " + str(ordinal))

def has_against_quals(extra_stats):
    return "current-stats" in extra_stats or "thrown-to" in extra_stats

def is_against_header(header, over_header, extra_stats):
    if not has_against_quals(extra_stats):
        return False

    if header.startswith("Player") or header == "G":
        return False

    if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header + ">" + header.lower() in extra_stats:
        return False

    if over_header == "Passing" or over_header == "Rushing" or over_header == "Receiving":
        if "FmbLst" in header:
            return True
        else:
            if "thrown-to" not in extra_stats:
                return False
    elif over_header.startswith("Advanced/"):
        if "1D" in header:
            if "thrown-to" not in extra_stats:
                return False
    elif over_header == "Era Adjusted Passing":
        if "Tnv" in header or "Rec" in header or "W/L%" in header or "4QC" in header or "GWD" in header:
            return True
        else:
            if "thrown-to" not in extra_stats:
                return False
    elif over_header == "Scrimmage/All Purpose":
        if "FmbLst" in header:
            return True
        elif not "AP" in header:
            if "thrown-to" not in extra_stats:
                return False
    
    if "thrown-to" in extra_stats:
        if over_header not in ("Passing", "Era Adjusted Passing", "Advanced/Passing"):
            return True
        if over_header == "Passing":
            if "Sk" in header or header == "ANY/A" or header == "NY/A":
                return True
            return False
        if over_header == "Era Adjusted Passing":
            if "Sk" in header or header == "ANY/A+" or header == "NY/A+" or "TtlYds" in header or "TtlTD" in header:
                return True
            return False
        if over_header.startswith("Advanced/"):
            if "Rush1D" in header or "Rec1D" in header:
                return True
            if "1D" in header:
                return False
            return True
    
    return True


def unescape_string(escaped_string):
    if escaped_string:
        return escaped_string.replace("\\", "")
    else:
        return escaped_string

def create_human_name(human_name):
    parsed_name = HumanName(human_name)
    if not parsed_name.first and parsed_name.title:
        parsed_name.first = parsed_name.title
        parsed_name.title = ""
    if not parsed_name.last and parsed_name.suffix:
        parsed_name.last = parsed_name.suffix
        parsed_name.suffix = ""
    return parsed_name

def handle_string_year(string_year, is_first, replace_first_year):
    if len(re.findall(r"(?<!\\)-", string_year)) == 1:
        raise ValueError
    
    string_year = string_year.replace("'", "")
    if string_year.isdigit():
        if len(string_year) == 2:
            pot_string_year = int("20" + string_year)
            if pot_string_year > current_season:
                string_year = int("19" + string_year)
            else:
                string_year = pot_string_year
        if int(string_year) > current_season:
            return current_season
        return int(string_year)
    else:
        if string_year == "min":
            return datetime.date.min.year
        elif string_year == "max" or string_year == "now" or string_year == "present":
            return current_season
        elif string_year == "today":
            return datetime.date.today()
        elif string_year == "yesterday":
            return datetime.date.today() - datetime.timedelta(days=1)
        else:
            date = dateutil.parser.parse(string_year).date()
            if is_first or replace_first_year["replace"]:
                today = datetime.date.today()
                if date > today:
                    date = date.replace(year=today.year)
                    if date > today:
                        date = date.replace(year=date.year - 1)
                    replace_first_year["replace"] = True
            return date

def last_replace(s, old, new):
    return (s[::-1].replace(old[::-1],new[::-1], 1))[::-1]

def create_player_url_string(player, player_id, extra_stats):
    if player == "No Player Match!":
        return player

    if "hide-name" in extra_stats:
        return player
        
    player_url = main_page_url_format.format(player_id[0].upper(), player_id)
    return "[" + player + "](" + player_url + ")"

def format_alert_message(comment_obj, do_update=True):
    now_time = datetime.datetime.now(timezone("US/Eastern"))
    if do_update:
        comment_obj["player_count"] += 1

    percent_complete = str(round((comment_obj["player_count"] / comment_obj["total_players"]) * 100))
    if isinstance(comment_obj["comment"], Message):
        est_message = alert_message_no_update
    else:
        if not comment_obj["is_approved"]:
            return alert_message_no_approved
        else:
            est_message = alert_message + "\n\nPlayers Complete: " + str(comment_obj["player_count"]) + "/" + str(comment_obj["total_players"]) + " (" + percent_complete + "%)"
            if do_update:
                if percent_complete == "100":
                    est_message += "\n\nGenerating tables/images and making comment"
                else:
                    elapsed_time = now_time - comment_obj["start_time"]
                    player_rate = (elapsed_time) / comment_obj["player_count"]
                    est_completion_time = now_time + (player_rate * (comment_obj["total_players"] - comment_obj["player_count"]))
                    est_message += "\n\nElapsed Time: " + str(elapsed_time).split(".")[0]
                    #est_message += "\n\nEstimated Completion: " + est_completion_time.strftime("%I:%M:%S%p %Z")

                est_message += "\n\nLast Update: " + now_time.strftime("%I:%M:%S%p %Z")
    
    return est_message

def get_time_str(value, ordinal, percent=False, time=False, quarter=False):
    if value == float("inf"):
        if time:
            return "11PM"
        else:
            return "MAX"
    elif value == -float("inf"):
        if time:
            return "12AM"
        else:
            return "MIN"
    else:
        if percent:
            return ("{:.2f}").format(get_constant_data.round_value(100 * value, 2)) + "%"
        else:
            if isinstance(value, float) and value.is_integer():
                value = int(value)

            if time and isinstance(value, int):
                if value == 0:
                    return "12AM"
                elif value < 12:
                    return str(value) + "AM"
                elif value == 12:
                    return str(value) + "PM"
                else:
                    return str(value - 12) + "PM"
            elif quarter and isinstance(value, int):
                return format_seconds_to_mmss(value)
            else:
                if ordinal and isinstance(value, int):
                    return inflect_engine.ordinal(value)
                else:
                    return str(value)

def format_seconds_to_mmss(seconds):
    minutes = seconds / 60
    seconds %= 60
    return "%02i:%02i" % (minutes, seconds)

def chop_microseconds(delta):
    return delta - datetime.timedelta(microseconds=delta.microseconds)

class FakeComment(object):
    def __init__(self, body, id, author, subreddit):
        self.body = body
        self.id = id
        self.author = FakeAuthor(author)
        self.subreddit = FakeSubreddit(subreddit)

class FakeAuthor(object):
    def __init__(self, name):
        self.name = name

class FakeSubreddit(object):
    def __init__(self, subreddit):
        self.display_name = subreddit

if __name__ == "__main__":
    main()
    
