import praw
from praw.models import Message
import re
import math
import time
import sqlite3
import traceback
import urllib.request
import urllib.parse
from bs4 import BeautifulSoup, Comment, Tag
from urllib.parse import urlparse
import dateutil.parser
import dateutil.relativedelta
import dateutil.rrule
import datetime
from prettytable import PrettyTable
from concurrent.futures import ThreadPoolExecutor
import time
import logging
from logging.handlers import TimedRotatingFileHandler
import sys
import threading
import concurrent
import getopt
import socket
import json
import copy
from pytz import timezone
import unidecode
from html import unescape
from word2number import w2n
from nameparser import HumanName
import calendar
from num2words import num2words
import statistics
import numbers
import inflect
inflect_engine = inflect.engine()
import pdfkit
import locale
locale.setlocale(locale.LC_ALL, "")
import io
import uuid
import subprocess
import os
import tempfile
import shutil
import base64
import pytz
try:
    from cairosvg import svg2png
except OSError:
    pass
import tinycss
from convertdate import holidays
import inspect
import decimal
import numexpr
all_holidays = inspect.getmembers(holidays, inspect.isfunction)
import custom_holidays
all_custom_holidays = inspect.getmembers(custom_holidays, inspect.isfunction)
import numeral
import numpy
import lxml
import lxml.html
from lxml import etree
import cchardet
import multiprocessing
import functools
import ephem
import ssl

subreddits_to_crawl = [
    "sportscomparebots",
    "hockey",
    "fantasyhockey",
    "canucks",
    "detroitredwings",
    "stlouisblues",
    "calgaryflames",
    "wildhockey",
    "leafs",
    "devils",
    "predators",
    "edmontonoilers",
    "hawks",
    "habs"
]

approved_subreddits = [
    "sportscomparebots",
    "hockey"
]

blocked_users = ["mlbcomparebot", "nflcomparebot", "nhlcomparebot", "nbacomparebot"]

request_headers = {
    "User-Agent" : "NHLCompareRedditBot"
}

max_request_retries = 3
retry_failure_delay = 3
max_reddit_retries = 3

player_season_age_date = datetime.datetime(1, 1, 31)

imgur_upload_url = "https://api.imgur.com/3/upload.json"
imgur_headers = {
    "Authorization" : "Client-ID a79699457a20a4d"
}

use_threads_for_game = False
display_progress_as_edit = True
ignore_approved = True

current_season = 2021
show_title_current_season = False

alert_message_no_approved = "Comparison received! The comment reply will be made with the comparison is finished\n\nComparisons may be slow due to recent Reddit API changes\n\n---"
alert_message = "Comparison received! Updates will be provided as players finish\n\n---"
alert_message_no_update = "Comparison received! A new message will be sent when the comparison is finished\n\n---"

all_months = [month.lower() for month in calendar.month_name[1:len(calendar.month_name)] + calendar.month_abbr[1:len(calendar.month_abbr)]]
all_months_re = r"(?:" + "|".join([month + "-?" for month in all_months]) + r")+"

all_days = [day.lower() for day in calendar.day_name[0:len(calendar.day_name)] + calendar.day_abbr[0:len(calendar.day_abbr)]]
all_days_re = r"(?:" + "|".join([day + "-?" for day in all_days]) + r")+"

string_stats = ["Tm"]

headers = {
    "Skater" : {
        "Player" : {
            "positive" : True
        },
        "Player/GP" : {
            "positive" : True,
            "type" : "Per Game/60 Minutes"
        },
        "Player_Score" : {
            "positive" : True,
            "type" : "Advanced"
        },
        "Player_5v5" : {
            "positive" : True,
            "type" : "5v5"
        },
        "Player_Awards" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "Player_Penalty" : {
            "positive" : True,
            "type" : "Penalty"
        },
        "DateStart" : {
            "positive" : True,
            "display" : False
        },
        "DateEnd" : {
            "positive" : True,
            "display" : False
        },
        "YearStart" : {
            "positive" : True,
            "display" : False
        },
        "YearEnd" : {
            "positive" : True,
            "display" : False
        },
        "Tm" : {
            "positive" : True,
            "display" : False
        },
        "Seasons" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "RegularSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "SkaterRegularSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "DefenseRegularSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "UniqueSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "NonFakeSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "Result" : {
            "positive" : True,
            "display" : False
        },
        "Team Score" : {
            "positive" : True,
            "display" : False
        },
        "Opponent Score" : {
            "positive" : True,
            "display" : False
        },
        "Team Goals" : {
            "positive" : True,
            "display" : False
        },
        "Opponent Goals" : {
            "positive" : True,
            "display" : False
        },
        "SeriesTeamWins" : {
            "positive" : True,
            "display" : False
        },
        "SeriesOpponentWins" : {
            "positive" : False,
            "display" : False
        },
        "SeriesScore" : {
            "positive" : False,
            "display" : False
        },
        "Elimination" : {
            "positive" : False,
            "display" : False
        },
        "Clinching" : {
            "positive" : True,
            "display" : False
        },
        "Gm" : {
            "positive" : True,
            "display" : False
        },
        "GmRev" : {
            "positive" : True,
            "display" : False
        },
        "TmGm" : {
            "positive" : True,
            "display" : False
        },
        "TmGmRev" : {
            "positive" : True,
            "display" : False
        },
        "CrGm" : {
            "positive" : True,
            "display" : False
        },
        "CrGmRev" : {
            "positive" : True,
            "display" : False
        },
        "DyRst" : {
            "positive" : True,
            "display" : False
        },
        "GP": {
            "positive" : True
        },
        "Per": {
            "positive" : True,
            "display" : False
        },
        "GP_TOI": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "GP/GP": {
            "positive" : True,
            "type" : "Per Game/60 Minutes"
        },
        "GP_Score": {
            "positive" : True,
            "type" : "Advanced"
        },
        "GP_5v5": {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GP_TOI_5v5": {
            "positive" : True,
            "display": False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GP_Penalty": {
            "positive" : True,
            "type" : "Penalty"
        },
        "FirstStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "SecondStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "ThirdStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "TotalStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "FirstStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "SecondStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "ThirdStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "TotalStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "TmW" :{
            "positive" : True,
            "display" : False
        },
        "TmL" :{
            "positive" : False,
            "display" : False
        },
        "TmTtlL" :{
            "positive" : False,
            "display-value" : "TmL",
            "display" : False
        },
        "TmT" :{
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 2003,
                "game" : 2003
            }
        },
        "TmOTL" :{
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1999,
                "game" : 1999
            }
        },
        "TmRec" : {
            "positive" : True,
            "display" : False
        },
        "TmPTS":{
            "positive" : True,
            "display" : False
        },
        "TmPTS%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False
        },
        "TmW/L%" :{
            "positive" : True,
            "round" : "percent",
            "display" : False
        },
        "TmROW" :{
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "TmROL" :{
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "TmROW/L%" :{
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "TmScore" :{
            "positive" : True,
            "display" : False
        },
        "OppScore" :{
            "positive" : False,
            "display" : False
        },
        "TtlScore" :{
            "positive" : True,
            "display" : False
        },
        "ScoreDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmG" :{
            "positive" : True,
            "display" : False
        },
        "OppG" :{
            "positive" : False,
            "display" : False
        },
        "TtlG" :{
            "positive" : True,
            "display" : False
        },
        "GDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmScore/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "OppScore/GP" :{
            "positive" : False,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "TtlScore/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "ScoreDiff/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "TmG/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "OppG/GP" :{
            "positive" : False,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "TtlG/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "GDiff/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "TOI" : {
            "positive" : True,
            "round" : "time",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "Shft" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TOI/GP" : {
            "positive" : True,
            "round" : "time",
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "Shft/GP" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "round" : 2,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TOI/Shft" : {
            "positive" : True,
            "round" : "time",
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVTOI" : {
            "positive" : True,
            "display" : False,
            "round" : "time",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "xEVTOI" : {
            "positive" : True,
            "round" : "time",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2007,
                "game" : 2007
            }
        },
        "EVTOI/GP" : {
            "positive" : True,
            "round" : "time",
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPTOI" : {
            "positive" : True,
            "display" : False,
            "round" : "time",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPTOI/GP" : {
            "positive" : True,
            "round" : "time",
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHTOI" : {
            "positive" : True,
            "display" : False,
            "round" : "time",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHTOI/GP" : {
            "positive" : True,
            "round" : "time",
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "G": {
            "positive" : True
        },
        "G/GP" : {
            "positive" : True,
            "round" : 2,
             "type" : "Per Game/60 Minutes"
        },
        "A" : {
            "positive" : True
        },
        "A/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "P" : {
            "positive" : True
        },
        "P/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "A1" : {
            "positive" : True
        },
        "A2" : {
            "positive" : True,
            "display" : False
        },
        "A1/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "A2/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "P1" : {
            "positive" : True,
            "display" : False
        },
        "A1%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent"
        },
        "P1/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "P1%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent"
        },
        "GC" : {
            "positive" : True,
            "display" : False
        },
        "G1" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced"
        },
        "SG1" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced"
        },
        "IGP" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "IPP" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVIGP" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVIPP" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPIGP" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPIPP" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHIGP" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHIPP" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GF" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GD" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GF/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GA/60M" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GD/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GF%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVGF" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVGD" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVGF/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVGA/60M" : {
            "positive" : False,
            "round" : 2,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVGD/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVGF%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "xGF" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "EVxGF",
            "display" : False
        },
        "xGFM" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False
        },
        "xGA" : {
            "positive" : False,
            "type" : "Advanced",
            "display-value" : "EVxGA",
            "display" : False
        },
        "EVxGD" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced"
        },
        "EVxGF/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Advanced"
        },
        "EVxGA/60M" : {
            "positive" : False,
            "round" : 2,
            "type" : "Advanced"
        },
        "EVxGD/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Advanced"
        },
        "EVxGF%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced"
        },
        "PPGF" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPGD" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPGF/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Advanced",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPGA/60M" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPGD/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PPGF%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHGF" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHGD" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHGF/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Advanced",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHGA/60M" : {
            "positive" : False,
            "round" : 2,
            "type" : "Advanced",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHGD/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SHGF%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "EVExpectedPlusMinus" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "display-value" : "EVx +/-",
            "type" : "Advanced"
        },
        "oiSPer" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Advanced",
            "display-value" : "oiS%",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "oiSVPer" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "display-value" : "oiSV%",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PDO" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
         "CF" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "oiTmS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "oiOppS" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FF" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CF/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CA/60M" : {
            "positive" : False,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "C/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FF/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FA/60M" : {
            "positive" : False,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "F/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SF/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SA/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SS/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "S/60M",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CFPer" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "CF%",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FFPer" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "display-value" : "FF%",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SFPer" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "display-value" : "SF%",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offIFF" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offICA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offIFA" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offICF" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offIF/60M" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offIC/60M" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offICFPer" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CRel/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FRel/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CFRelPer" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "display-value" : "CFRel%",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "offIFFPer" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FFRelPer" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "display-value" : "FFRel%",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "OZ" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "NZ": {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "DZ": {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "OZ%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "OZFOW" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "OZFOL": {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "OZFO": {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "OZFO%": {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced",
            "display-value" : "OZ FO%",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "NZFOW" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "NZFOL": {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "NZFO": {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "NZFO%": {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced",
            "display" : False,
            "display-value" : "NZ FO%",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "DZFOW" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "DZFOL": {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "DZFO": {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "DZFO%": {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced",
            "display-value" : "DZ FO%",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GC/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "EVG" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVG/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVA" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVA/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVP" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVP/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVA1" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVA2" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVP1" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVA1%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVP1%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVA1/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVA2/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "EVP1/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPG" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPG/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPA" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPA/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPP" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPP/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPA1" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPA2" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPP1" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPA1%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPP1%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPA1/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPA2/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "PPP1/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHG" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHG/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHA" : {
            "positive" : True,
            "valid_since" : {
                "inconsistent" : 1933,
                "inconsistent-game" : 1933
            }
        },
        "SHA/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHP" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHA1" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHA2" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHP1" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHP/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHA1%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHP1%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHA1/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHA2/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "SHP1/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933
            }
        },
        "ENG" : {
            "positive" : True
        },
        "ENA" : {
            "positive" : True,
            "display" : False
        },
        "ENP" : {
            "positive" : True,
            "display" : False
        },
        "OTG" : {
            "positive" : True
        },
        "GWG" : {
            "positive" : True
        },
        "1stG" : {
            "positive" : True
        },
        "PenDrawn" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "PENDrwn",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PEN" : {
            "positive" : False,
            "type" : "Advanced",
            "display-value" : "PEN"
        },
        "NetPEN" : {
            "positive" : True,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "Minor" : {
            "positive" : True,
            "type" : "Penalty"
        },
        "Major" : {
            "positive" : True,
            "type" : "Penalty"
        },
        "Misconduct" : {
            "positive" : True,
            "type" : "Penalty"
        },
        "GameMisconduct" : {
            "positive" : True,
            "type" : "Penalty"
        },
        "Match" : {
            "positive" : True,
            "type" : "Penalty"
        },
        "Fight" : {
            "positive" : True,
            "type" : "Penalty"
        },
        "Minor/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty"
        },
        "Major/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty"
        },
        "Misconduct/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty"
        },
        "GameMisconduct/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty"
        },
        "Match/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty"
        },
        "Fight/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty"
        },
        "Minor/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "Major/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "Misconduct/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "GameMisconduct/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "Match/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "Fight/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Penalty",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PenDrawn/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Advanced",
            "display-value" : "PDrwn/60M",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PEN/60M" : {
            "positive" : False,
            "round" : 2,
            "type" : "Advanced",
            "display-value" : "PEN/60M",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "NetPEN/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Advanced",
            "display-value" : "NPEN/60M",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "Post/Bar" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "Post/Bar",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "Post/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "WristS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "WristG" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "WristS%" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "S% Wrist",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "WristG%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SnapS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SnapG" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SnapS%" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "S% Snap",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SnapG%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SlapS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SlapG" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SlapG%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SlapS%" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "S% Slap",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "BackS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "BackG" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "BackS%" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "S% Back",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "BackG%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TipS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TipG" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TipS%" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "S% Tip",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TipG%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "DeflectS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "DeflectG" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "DeflectS%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "display-value" : "S% Deflect",
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "DeflectG%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "WrapS" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "WrapG" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "WrapS%" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "S% Wrap",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "WrapG%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "HAT" : {
            "positive" : True
        },
        "AdjG" : {
            "positive" : True
        },
        "AdjA" : {
            "positive" : True
        },
        "AdjP" : {
            "positive" : True
        },
        "AdjGC" : {
            "positive" : True,
            "display" : False
        },
        "AdjGNoSeas" : {
            "positive" : True,
            "display" : False
        },
        "AdjANoSeas" : {
            "positive" : True,
            "display" : False
        },
        "AdjPNoSeas" : {
            "positive" : True,
            "display" : False
        },
        "AdjGCNoSeas" : {
            "positive" : True,
            "display" : False
        },
        "AdjG/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False
        },
        "AdjA/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False
        },
        "AdjP/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False
        },
        "AdjGC/GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False
        },
        "S" : {
            "positive" : True,
            "display-value" : "Att",
            "valid_since" : {
                "season" : 1959,
                "game" : 1959
            }
        },
        "TSA" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSM" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSB" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "S/GP" : {
            "positive" : True,
            "round" : 2,
            "display-value" : "Att/GP",
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1959,
                "game" : 1959
            }
        },
        "TSA/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSB/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSM/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "S%" : {
            "positive" : True,
            "display-value" : "Att%",
            "round" : "percent",
            "valid_since" : {
                "season" : 1959,
                "game" : 1959
            }
        },
        "TS%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SThr%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FOW" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "FOL": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "FO": {
            "positive" : True,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "FOW/GP" : {
            "positive" : True,
            "round" : 2,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            },
            "type" : "Per Game/60 Minutes"
        },
        "FO/GP" : {
            "positive" : True,
            "round" : 2,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            },
            "type" : "Per Game/60 Minutes"
        },
        "FO%": {
            "positive" : True,
            "round" : "percent",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TK" : {
            "positive" : True,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "GV" : {
            "positive" : False,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "TK/GV" : {
            "positive" : True,
            "round" : 2,
            "isinf" : "TK",
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "HIT": {
            "positive" : True,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "HIT/GP": {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "BLK": {
            "positive" : True,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "BLK/GP": {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PlusMinus" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1959,
                "game" : 1959
            },
            "display-value" : "+/-"
        },
        "PEN/GP" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "NetPEN/GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "PIM" : {
            "positive" : False
        },
        "CurrentCap$" : {
            "positive" : False,
            "round" : "dollar",
            "display-value" : "CurCap",
            "skipzero" : True
        },
        "PIM/GP" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "Post/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "OPS" : {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "DPS" : {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "PS" : {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "G/82GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "A/82GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "P/82GP" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "AdjG/82GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "AdjA/82GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "AdjP/82GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "GWG/82GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "HAT/82GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "S/82GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1959,
                "game" : 1959
            }
        },
        "FO/82GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "PlusMinus/82GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1959,
                "game" : 1959
            },
            "display-value" : "+/-/82GP"
        },
        "OPS/82GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "DPS/82GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "PS/82GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes"
        },
        "G/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "A/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "P/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "AdjG/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "AdjA/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "AdjP/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "A1/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "A2/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "P1/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "GC/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVG/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVA/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVP/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVA1/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVA2/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVP1/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPG/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPA/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPP/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPA1/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPA2/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "display" : False,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPP1/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHG/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHA/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHP/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHA1/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHA2/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHP1/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "S/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TSA/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSB/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSM/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FOW/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "FO/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TK/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "GV/60M" : {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "HIT/60M": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "BLK/60M": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PIM/60M" : {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "OPS/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "DPS/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PS/60M" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "TOI_5v5" : {
            "positive" : True,
            "round" : "time",
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TOI/GP_5v5" : {
            "positive" : True,
            "round" : "time",
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "G_5v5": {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "P_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A1_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A2_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "P1_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A1%_5v5" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "P1%_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "round" : "percent",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "S_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSA_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSM_5v5" : {
            "positive" : True,
            "display" : False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSB_5v5" : {
            "positive" : True,
            "display" : False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "S%_5v5" : {
            "positive" : True,
            "round" : "percent",
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TS%_5v5" : {
            "positive" : True,
            "round" : "percent",
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "SThr%_5v5" : {
            "positive" : True,
            "round" : "percent",
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CF_5v5" : {
            "positive" : True,
            "display" : False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CA_5v5" : {
            "positive" : False,
            "display" : False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FF_5v5" : {
            "positive" : True,
            "display" : False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FA_5v5" : {
            "positive" : False,
            "display" : False,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "G/GP_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A/GP_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "P/GP_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A1/GP_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "P1/GP_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "S/GP_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "display" : False,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "G/60M_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A/60M_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "P/60M_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "A1/60M_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "P1/60M_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "S/60M_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSA/60M_5v5" : {
            "positive" : True,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSB/60M_5v5" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "TSM/60M_5v5" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CF/60M_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CA/60M_5v5" : {
            "positive" : False,
            "type" : "5v5",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "C/60M_5v5" : {
            "positive" : True,
            "display" : False,
            "type" : "5v5",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FF/60M_5v5" : {
            "positive" : True,
            "type" : "5v5",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FA/60M_5v5" : {
            "positive" : False,
            "type" : "5v5",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "F/60M_5v5" : {
            "positive" : True,
            "display" : False,
            "type" : "5v5",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "CFPer_5v5" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "CF%_5v5",
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "FFPer_5v5" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "FF%_5v5",
            "type" : "5v5",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            }
        },
        "GP/Yr" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors"
        },
        "AllStar:1st" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:2nd" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display" : False,
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:Tot" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:Unique" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display" : False,
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStarShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "display" : False,
            "valid_since" : {
                "season" : 1930,
                "inconsistent" : 1982
            }
        },
        "Hart" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1923
            }
        },
        "HartShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "valid_since" : {
                "season" : 1924,
                "inconsistent" : 1996
            }
        },
        "HartShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1924,
                "inconsistent" : 1996
            }
        },
        "Lindsay" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1970
            }
        },
        "Norris" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1953
            }
        },
        "NorrisShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "valid_since" : {
                "season" : 1953,
                "inconsistent" : 1996
            }
        },
        "NorrisShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1953,
                "inconsistent" : 1996
            }
        },
        "Selke" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1977
            }
        },
        "SelkeShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "valid_since" : {
                "season" : 1977,
                "inconsistent" : 1996
            }
        },
        "SelkeShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1977,
                "inconsistent" : 1996
            }
        },
        "GLeader" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display-value" : "G Leader"
        },
        "ALeader" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display-value" : "A Leader"
        },
        "PLeader" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display-value" : "P Leader"
        },
        "Calder" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1936
            }
        },
        "Smythe" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1964
            }
        },
        "Cup" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "AllStar:1st%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:2nd%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:Tot%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStarShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "display" : False,
            "valid_since" : {
                "season" : 1930,
                "inconsistent" : 1982
            }
        },
        "Hart%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1923
            }
        },
        "Lindsay%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1970
            }
        },
        "Norris%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1953
            }
        },
        "Selke%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1977
            }
        },
        "GLeader%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "display-value" : "G Leader%"
        },
        "ALeader%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "display-value" : "A Leader%"
        },
        "PLeader%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "display-value" : "P Leader%"
        },
        "Cup%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors"
        }
    }, "Goalie" : {
        "Player" : {
            "positive" : True
        },
        "Player_Sit" : {
            "positive" : True,
            "type" : "Advanced"
        },
        "Player_Awards" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "DateStart" : {
            "positive" : True,
            "display" : False
        },
        "DateEnd" : {
            "positive" : True,
            "display" : False
        },
        "YearStart" : {
            "positive" : True,
            "display" : False
        },
        "YearEnd" : {
            "positive" : True,
            "display" : False
        },
        "Tm" : {
            "positive" : True,
            "display" : False
        },
        "Seasons" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "RegularSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "UniqueSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "NonFakeSeasons" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "Result" : {
            "positive" : True,
            "display" : False
        },
        "Team Score" : {
            "positive" : True,
            "display" : False
        },
        "Opponent Score" : {
            "positive" : True,
            "display" : False
        },
        "Team Goals" : {
            "positive" : True,
            "display" : False
        },
        "Opponent Goals" : {
            "positive" : True,
            "display" : False
        },
        "SeriesTeamWins" : {
            "positive" : True,
            "display" : False
        },
        "SeriesOpponentWins" : {
            "positive" : False,
            "display" : False
        },
        "SeriesScore" : {
            "positive" : False,
            "display" : False
        },
        "Elimination" : {
            "positive" : False,
            "display" : False
        },
        "Clinching" : {
            "positive" : True,
            "display" : False
        },
        "Gm" : {
            "positive" : True,
            "display" : False
        },
        "GmRev" : {
            "positive" : True,
            "display" : False
        },
        "TmGm" : {
            "positive" : True,
            "display" : False
        },
        "TmGmRev" : {
            "positive" : True,
            "display" : False
        },
        "CrGm" : {
            "positive" : True,
            "display" : False
        },
        "CrGmRev" : {
            "positive" : True,
            "display" : False
        },
        "DyRst" : {
            "positive" : True,
            "display" : False
        },
        "GP": {
            "positive" : True
        },
        "Per": {
            "positive" : True,
            "display" : False
        },
        "GP_TOI": {
            "positive" : True,
            "display" : False
        },
        "GS": {
            "positive" : True
        },
        "GP_Sit" : {
            "positive" : True,
            "type" : "Advanced"
        },
        "GS_Sit" : {
            "positive" : True,
            "type" : "Advanced"
        },
        "FirstStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "SecondStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "ThirdStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "TotalStar" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "FirstStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "SecondStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "ThirdStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "TotalStar%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 1936,
                "game" : 1936
            }
        },
        "TmW" :{
            "positive" : True,
            "display" : False
        },
        "TmL" :{
            "positive" : False,
            "display" : False
        },
        "TmTtlL" :{
            "positive" : False,
            "display-value" : "TmL",
            "display" : False
        },
        "TmT" : {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 2003,
                "game" : 2003
            }
        },
        "TmOTL" :{
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1999,
                "game" : 1999
            }
        },
        "TmRec" : {
            "positive" : True,
            "display" : False
        },
        "TmPTS":{
            "positive" : True,
            "display" : False
        },
        "TmPTS%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False
        },
        "TmW/L%" :{
            "positive" : True,
            "round" : "percent",
            "display" : False
        },
        "TmROW" :{
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "TmROL" :{
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "TmROW/L%" :{
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "valid_since" : {
                "season" : 2005,
                "game" : 2005
            }
        },
        "TmScore" :{
            "positive" : True,
            "display" : False
        },
        "OppScore" :{
            "positive" : False,
            "display" : False
        },
        "TtlScore" :{
            "positive" : True,
            "display" : False
        },
        "ScoreDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmG" :{
            "positive" : True,
            "display" : False
        },
        "OppG" :{
            "positive" : False,
            "display" : False
        },
        "TtlG" :{
            "positive" : True,
            "display" : False
        },
        "GDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmScore/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False
        },
        "OppScore/GP" :{
            "positive" : False,
            "round" : 2,
            "display" : False
        },
        "TtlScore/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "ScoreDiff/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False
        },
        "TmG/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "OppG/GP" :{
            "positive" : False,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "TtlG/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "GDiff/GP" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/60 Minutes"
        },
        "TOI" : {
            "positive" : True,
            "round" : "time"
        },
        "TOI/GP" : {
            "positive" : True,
            "round" : "time",
            "display" : False
        },
        "W": {
            "positive" : True
        },
        "L": {
            "positive" : False
        },
        "TtlL": {
            "positive" : False,
            "display-value" : "L"
        },
        "T": {
            "positive" : False,
            "valid_since" : {
                "season" : 2003,
                "game" : 2003
            }
        },
        "OTL": {
            "positive" : False,
            "valid_since" : {
                "season" : 2004,
                "game" : 2004
            }
        },
        "T/OTL": {
            "positive" : False,
            "display" : False,
        },
        "ND": {
            "positive" : False,
            "display" : False
        },
        "PTS": {
            "positive" : True,
            "display" : False
        },
        "W/L%": {
            "positive" : True,
            "round" : "percent"
        },
        "PTS%": {
            "positive" : True,
            "display-value" : "W/L%",
            "round" : "percent"
        },
        "ROW": {
            "positive" : True
        },
        "ROL": {
            "positive" : False
        },
        "ROW/L%": {
            "positive" : True,
            "round" : "percent"
        },
        "SO": {
            "positive" : True
        },
        "SO%": {
            "positive" : True,
            "round" : "percent"
        },
        "QS" :  {
            "positive" : True,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "QS%" :  {
            "positive" : True,
            "type" : "Advanced",
            "round" : "percent",
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "RBS" :  {
            "positive" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "RBS%" :  {
            "positive" : False,
            "type" : "Advanced",
            "round" : "percent",
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "CG": {
            "positive" : True,
            "type" : "Advanced"
        },
        "IG": {
            "positive" : False,
            "display" : False,
            "type" : "Advanced"
        },
        "CG%": {
            "positive" : True,
            "round" : "percent",
            "type" : "Advanced"
        },
        "GF": {
            "positive" : True,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            },
        },
        "GFA": {
            "positive" : True,
            "type" : "Advanced",
            "round" : 2,
            "valid_since" : {
                "season" : 2009,
                "game" : 2009
            },
        },
        "SV": {
            "positive" : True,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "SA": {
            "positive" : True,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "GA": {
            "positive" : False
        },
        "SV%": {
            "positive" : True,
            "round" : 3,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "EVSH" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced"
        },
        "SVEvenStrength" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "EV SV%",
            "round" : 3,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "xEVSH" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "xEVGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "xSVEvenStrength" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "round" : 3,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "PPSH" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "PPGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced"
        },
        "SVPowerPlay" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "PP SV%",
            "round" : 3,
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHSH" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced"
        },
        "SVShorthanded" : {
            "positive" : True,
            "round" : 3,
            "type" : "Advanced",
            "display-value" : "SH SV%",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHEvenStrength" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "SH% EV",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHPowerPlay" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "SH% PP",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "SHShorthanded" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "SH% SH",
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 1997,
                "game" : 1997
            }
        },
        "EVGA/GP" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Advanced"
        },
        "PPGA/GP" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Advanced"
        },
        "SHGA/GP" : {
            "positive" : False,
            "display" : False,
            "round" : 2,
            "type" : "Advanced"
        },
        "GAA": {
            "positive" : False,
            "round" : 2
        },
        "GA%-" : {
            "positive" : False,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "AdjGAA" : {
            "positive" : False,
            "round" : 2
        },
        "GSAA" : {
            "positive" : True,
            "round" : 2,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "GPS" : {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "PS" : {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "W/82GP": {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "L/82GP": {
            "positive" : False,
            "display" : False,
            "round" : 2
        },
        "T/82GP": {
            "positive" : False,
            "display" : False,
            "round" : 2
        },
        "OTL/82GP": {
            "positive" : False,
            "display" : False,
            "round" : 2
        },
        "SO/82GP": {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "GSAA/82GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "GPS/82GP" : {
            "positive" : True,
            "display" : False,
            "round" : 2
        },
        "SA/GP": {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "SV/GP": {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "GA/GP": {
            "positive" : False,
            "display" : False,
            "round" : 2
        },
        "SA/60M": {
            "positive" : True,
            "display-value" : "SA/60",
            "round" : 2,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "SV/60M": {
            "positive" : True,
            "display-value" : "SV/60",
            "round" : 2,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "GA/60M": {
            "positive" : False,
            "display" : False,
            "display-value" : "GA/60",
            "round" : 2
        },
        "GSAA/60M" : {
            "positive" : True,
            "display-value" : "GSAA/60",
            "round" : 2,
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "GPS/60M" : {
            "positive" : True,
            "display-value" : "GPS/60",
            "display" : False,
            "round" : 2
        },
        "CurrentCap$" : {
            "positive" : False,
            "round" : "dollar",
            "display-value" : "CurCap",
            "skipzero" : True
        },
        "scSA" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "scGA" : {
            "positive" : False,
            "type" : "Advanced",
            "display" : False,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "scSV/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "sc SV/60",
            "round" : 2,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "scSA/GP" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "sc/GP",
            "round" : 2,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "scSA/60M" : {
            "positive" : True,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "sc SA/60",
            "round" : 2,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "scSV%" : {
            "positive" : True,
            "round" : 3,
            "type" : "Advanced",
            "display-value" : "sc SV%",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "HDscSA" : {
            "positive" : True,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "HDscGA" : {
            "positive" : False,
            "display" : False,
            "type" : "Advanced",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "HDscSV/60M" : {
            "positive" : True,
            "round" : 2,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "HDsc SV/60",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "HDscSA/GP" : {
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Advanced",
            "display-value" : "HDsc/GP",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "HDscSA/60M" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Advanced",
            "display-value" : "HDsc SA/60",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "HDscSV%" : {
            "positive" : True,
            "round" : 3,
            "type" : "Advanced",
            "display-value" : "HDsc SV%",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "xEVTOI" : {
            "positive" : True,
            "display" : None,
            "type" : "Advanced",
            "round" : "time",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "xGA" : {
            "positive" : True,
            "type" : "Advanced",
            "round" : 1,
            "display" : False,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "xGAPer60" : {
            "positive" : False,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "xGA/60",
            "round" : 2,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "GAPer60" : {
            "positive" : False,
            "type" : "Advanced",
            "display" : False,
            "display-value" : "GA/60",
            "round" : 2,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "EVGSAx" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "GSAx",
            "round" : 1,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "EVGSAx/GP" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "GSAx/GP",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "EVGSAx/60" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "GSAx/60",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "SVxEvenStrength" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "SV%x",
            "display" : False,
            "round" : 3,
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "SVAxEvenStrength" : {
            "positive" : True,
            "type" : "Advanced",
            "display-value" : "SV%Ax",
            "display" : False,
            "round" : "percent",
            "valid_since" : {
                "season" : 2016,
                "game" : 2016
            }
        },
        "GP/Yr" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors"
        },
        "GS/Yr" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors"
        },
        "TOI/Yr" : {
            "positive" : True,
            "round" : "time",
            "type" : "Awards/Honors"
        },
        "AllStar:1st" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:2nd" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:Tot" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:Unique" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display" : False,
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStarShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "display" : False,
            "valid_since" : {
                "season" : 1930,
                "inconsistent" : 1982
            }
        },
        "Hart" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1923
            }
        },
        "HartShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "valid_since" : {
                "season" : 1924,
                "inconsistent" : 1996
            }
        },
        "HartShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1924,
                "inconsistent" : 1996
            }
        },
        "Lindsay" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1970
            }
        },
        "Vezina" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1926
            }
        },
        "VezinaShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "valid_since" : {
                "season" : 1926,
                "inconsistent" : 1982
            }
        },
        "VezinaShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1926,
                "inconsistent" : 1982
            }
        },
        "Jennings" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1981
            }
        },
        "Calder" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1936
            }
        },
        "Smythe" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1964
            }
        },
        "Cup" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "AllStar:1st%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:2nd%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStar:Tot%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1930
            }
        },
        "AllStarShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "display" : False,
            "valid_since" : {
                "season" : 1930,
                "inconsistent" : 1982
            }
        },
        "Hart%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1923
            }
        },
        "Lindsay%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1970
            }
        },
        "Vezina%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1926
            }
        },
        "Jennings%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1981
            }
        },
        "Cup%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors"
        }
    }
}

formulas = {
    "Skater" : {
        "FirstStar%" : "FirstStar / GP",
        "SecondStar%" : "SecondStar / GP",
        "ThirdStar%" : "ThirdStar / GP",
        "TotalStar%" : "TotalStar / GP",
        "TmW" : "Special",
        "TmL" : "Special",
        "TmTtlL" : "Special",
        "TmT" : "Special",
        "TmOTL" : "Special",
        "TmRec" : "Special",
        "TmPTS" : "(TmW * 2) + (TmT * 1) + (TmOTL * 1)",
        "TmPTS%" : "TmPTS / ((TmW + TmL + TmT + TmOTL) * 2)",
        "TmW/L%" : "TmW / (TmW + TmL + TmOTL)",
        "TmROW" : "Special",
        "TmROL" : "Special",
        "TmROW/L%" : "TmROW / (TmROW + TmROL)",
        "TmScore" : "Special",
        "OppScore" : "Special",
        "TtlScore" : "TmScore + OppScore",
        "ScoreDiff" : "TmScore - OppScore",
        "TmG" : "Special",
        "OppG" : "Special",
        "TtlG" : "TmG + OppG",
        "GDiff" : "TmG - OppG",
        "TmScore/GP" : "TmScore / GP",
        "OppScore/GP" : "OppScore / GP",
        "TtlScore/GP" : "TtlScore / GP",
        "ScoreDiff/GP" : "ScoreDiff / GP",
        "TmG/GP" : "TmG / GP",
        "OppG/GP" : "OppG / GP",
        "TtlG/GP" : "TtlG / GP",
        "GDiff/GP" : "GDiff / GP",
        "G/GP" : "G / GP",
        "G/82GP" : "G / (GP / 82)",
        "AdjG/82GP" : "AdjGNoSeas / (GP / 82)",
        "G/60M" : "G / (TOI / 3600)",
        "AdjG/60M" : "AdjGNoSeas / (TOI / 3600)",
        "EVG/60M" : "EVG / (EVTOI / 3600)",
        "PPA/60M" : "PPA / (PPTOI / 3600)",
        "PPG/60M" : "PPG / (PPTOI / 3600)",
        "SHA/60M" : "SHA / (SHTOI / 3600)",
        "SHG/60M" : "SHG / (SHTOI / 3600)",
        "A/GP" : "A / GP",
        "A/82GP" : "A / (GP / 82)",
        "AdjA/82GP" : "AdjANoSeas / (GP / 82)",
        "A/60M" : "A / (TOI / 3600)",
        "AdjA/60M" : "AdjANoSeas / (TOI / 3600)",
        "EVA/60M" : "EVA / (EVTOI / 3600)",
        "P/GP" : "P / GP",
        "P/82GP" : "P / (GP / 82)",
        "AdjP/82GP" : "AdjPNoSeas / (GP / 82)",
        "GWG/82GP" : "GWG / (GP / 82)",
        "HAT/82GP" : "HAT / (GP / 82)",
        "P/60M" : "P / (TOI / 3600)",
        "AdjP/60M" : "AdjPNoSeas / (TOI / 3600)",
        "EVP/60M" : "EVP / (EVTOI / 3600)",
        "PPP/60M" : "PPP / (PPTOI / 3600)",
        "SHP/60M" : "SHP / (SHTOI / 3600)",
        "EVG/GP" : "EVG / GP",
        "EVA/GP" : "EVA / GP",
        "EVP/GP" : "EVP / GP",
        "PPG/GP" : "PPG / GP",
        "PPA/GP" : "PPA / GP",
        "PPP/GP" : "PPP / GP",
        "SHG/GP" : "SHG / GP",
        "SHA/GP" : "SHA / GP",
        "HIT/GP" : "HIT / GP",
        "BLK/GP" : "BLK / GP",
        "TOI/GP" : "TOI / GP_TOI",
        "TOI/Shft" : "TOI / Shft",
        "Shft/GP" : "Shft / GP",
        "EVTOI/GP" : "EVTOI / GP_TOI",
        "PPTOI/GP" : "PPTOI / GP_TOI",
        "SHTOI/GP" : "SHTOI / GP_TOI",
        "PEN/GP" : "PEN / GP",
        "Minor/GP" : "Minor / GP",
        "Major/GP" : "Major / GP",
        "Misconduct/GP" : "Misconduct / GP",
        "GameMisconduct/GP" : "GameMisconduct / GP",
        "Match/GP" : "Match / GP",
        "Fight/GP" : "Fight / GP",
        "PEN/60M" : "PEN / (TOI / 3600)",
        "Minor/60M" : "Minor / (TOI / 3600)",
        "Major/60M" : "Major / (TOI / 3600)",
        "Misconduct/60M" : "Misconduct / (TOI / 3600)",
        "GameMisconduct/60M" : "GameMisconduct / (TOI / 3600)",
        "Match/60M" : "Match / (TOI / 3600)",
        "Fight/60M" : "Fight / (TOI / 3600)",
        "PenDrawn/60M" : "PenDrawn / (TOI / 3600)",
        "NetPEN/60M" : "NetPEN / (TOI / 3600)",
        "NetPEN/GP" : "NetPEN / GP",
        "Post/GP" : "Post/Bar / GP",
        "Post/60M" : "Post/Bar / (TOI / 3600)",
        "S%" : "G / S",
        "TS%" : "G / TSA",
        "SThr%" : "S / TSA",
        "S/GP" : "S / GP",
        "AdjG/GP" : "AdjGNoSeas / GP",
        "AdjA/GP" : "AdjANoSeas / GP",
        "AdjP/GP" : "AdjPNoSeas / GP",
        "AdjGC/GP" : "AdjGCNoSeas / GP",
        "TSA/GP" : "TSA / GP",
        "TSB/GP" : "TSB / GP",
        "TSM/GP" : "TSM / GP",
        "S/82GP" : "S / (GP / 82)",
        "S/60M" : "S / (TOI / 3600)",
        "TSA/60M" : "TSA / (TOI / 3600)",
        "TSM/60M" : "TSM / (TOI / 3600)",
        "TSB/60M" : "TSB / (TOI / 3600)",
        "FO%" : "FOW / FO",
        "OZ%" : "OZ / (OZ + DZ)",
        "OZFO" : "OZFOW + OZFOL",
        "OZFO%" : "OZFOW / OZFO",
        "NZFO" : "NZFOW + NZFOL",
        "NZFO%" : "NZFOW / NZFO",
        "DZFO" : "DZFOW + DZFOL",
        "DZFO%" : "DZFOW / DZFO",
        "FOW/GP" : "FOW / GP",
        "FO/GP" : "FO / GP",
        "FO/82GP" : "FO / (GP / 82)",
        "FO/60M" : "FO / (TOI / 3600)",
        "FOW/60M" : "FOW / (TOI / 3600)",
        "HIT/60M" : "HIT / (TOI / 3600)",
        "BLK/60M" : "BLK / (TOI / 3600)",
        "PIM/60M" : "PIM / (TOI / 3600)",
        "PIM/GP" : "PIM / GP",
        "PlusMinus/82GP" : "PlusMinus / (GP / 82)",
        "A1%" : "A1 / A",
        "P1%" : "P1 / P",
        "EVA1%" : "EVA1 / EVA",
        "PPA1%" : "PPA1 / PPA",
        "SHA1%" : "SHA1 / SHA",
        "EVP1%" : "EVP1 / EVP",
        "PPP1%" : "PPP1 / PPP",
        "SHP1%" : "SHP1 / SHP",
        "A1/GP" : "A1 / GP",
        "A2/GP" : "A2 / GP",
        "P1/GP" : "P1 / GP",
        "EVA1/GP" : "EVA1 / GP",
        "EVA2/GP" : "EVA2 / GP",
        "EVP1/GP" : "EVP1 / GP",
        "PPA1/GP" : "PPA1 / GP",
        "PPA2/GP" : "PPA2 / GP",
        "PPP1/GP" : "PPP1 / GP",
        "SHP/GP" : "SHP / GP",
        "SHA1/GP" : "SHA1 / GP",
        "SHA2/GP" : "SHA2 / GP",
        "SHP1/GP" : "SHP1 / GP",
        "A1/60M" : "A1 / (TOI / 3600)",
        "A2/60M" : "A2 / (TOI / 3600)",
        "P1/60M" : "P1 / (TOI / 3600)",
        "EVA1/60M" : "EVA1 / (EVTOI / 3600)",
        "EVA2/60M" : "EVA2 / (EVTOI / 3600)",
        "EVP1/60M" : "EVP1 / (EVTOI / 3600)",
        "PPA1/60M" : "PPA1 / (PPTOI / 3600)",
        "PPA2/60M" : "PPA2 / (PPTOI / 3600)",
        "PPP1/60M" : "PPP1 / (PPTOI / 3600)",
        "SHA1/60M" : "SHA1 / (SHTOI / 3600)",
        "SHA2/60M" : "SHA2 / (SHTOI / 3600)",
        "SHP1/60M" : "SHP1 / (SHTOI / 3600)",
        "SlapG%" : "SlapG / SlapS",
        "WristG%" : "WristG / WristS",
        "SnapG%" : "SnapG / SnapS",
        "BackG%" : "BackG / BackS",
        "TipG%" : "TipG / TipS",
        "WrapG%" : "WrapG / WrapS",
        "DeflectG%" : "DeflectG / DeflectS",
        "SlapS%" : "SlapG / SlapS",
        "WristS%" : "WristG / WristS",
        "SnapS%" : "SnapG / SnapS",
        "BackS%" : "BackG / BackS",
        "TipS%" : "TipG / TipS",
        "WrapS%" : "WrapG / WrapS",
        "DeflectS%" : "DeflectG / DeflectS",
        "TOI/GP_5v5" : "TOI_5v5 / GP_TOI_5v5",
        "G/GP_5v5" : "G_5v5 / GP_5v5",
        "G/60M_5v5" : "G_5v5 / (TOI_5v5 / 3600)",
        "A/GP_5v5" : "A_5v5 / GP_5v5",
        "A1/GP_5v5" : "A1_5v5 / GP_5v5",
        "A/60M_5v5" : "A_5v5 / (TOI_5v5 / 3600)",
        "A1/60M_5v5" : "A1_5v5 / (TOI_5v5 / 3600)",
        "P/GP_5v5" : "P_5v5 / GP_5v5",
        "P/60M_5v5" : "P_5v5 / (TOI_5v5 / 3600)",
        "A1%_5v5" : "A1_5v5 / A_5v5",
        "P1%_5v5" : "P1_5v5 / P_5v5",
        "P1/GP_5v5" : "P1_5v5 / GP_5v5",
        "P1/60M_5v5" : "P1_5v5 / (TOI_5v5 / 3600)",
        "S/GP_5v5" : "S_5v5 / GP_5v5",
        "S/60M_5v5" : "S_5v5 / (TOI_5v5 / 3600)",
        "TSA/60M_5v5" : "TSA_5v5 / (TOI_5v5 / 3600)",
        "TSB/60M_5v5" : "TSB_5v5 / (TOI_5v5 / 3600)",
        "TSM/60M_5v5" : "TSM_5v5 / (TOI_5v5 / 3600)",
        "CFPer_5v5" : "CF_5v5 / (CF_5v5 + CA_5v5)",
        "FFPer_5v5" : "FF_5v5 / (FF_5v5 + FA_5v5)",
        "CF/60M_5v5" : "CF_5v5 / (TOI_5v5 / 3600)",
        "FF/60M_5v5" : "FF_5v5 / (TOI_5v5 / 3600)",
        "CA/60M_5v5" : "CA_5v5 / (TOI_5v5 / 3600)",
        "FA/60M_5v5" : "FA_5v5 / (TOI_5v5 / 3600)",
        "C/60M_5v5" : "(CF_5v5 - CA_5v5) / (TOI_5v5 / 3600)",
        "F/60M_5v5" : "(FF_5v5 - FA_5v5) / (TOI_5v5 / 3600)",
        "CFPer" : "CF / (CF + CA)",
        "FFPer" : "FF / (FF + FA)",
        "SFPer" : "oiTmS / (oiTmS + oiOppS)",
        "offICFPer" : "offICF / (offICF + offICA)",
        "offIFFPer" : "offIFF / (offIFF + offIFA)",
        "CFRelPer" : "CFPer - offICFPer",
        "FFRelPer" : "FFPer - offIFFPer",
        "oiSPer" : "GF / oiTmS",
        "oiSVPer" : "(oiOppS - GA) / (oiOppS)",
        "PDO" : "oiSPer + oiSVPer",
        "CF/60M" : "CF / (TOI / 3600)",
        "FF/60M" : "FF / (TOI / 3600)",
        "SF/60M" : "oiTmS / (TOI / 3600)",
        "CA/60M" : "CA / (TOI / 3600)",
        "FA/60M" : "FA / (TOI / 3600)",
        "SA/60M" : "oiOppS / (TOI / 3600)",
        "C/60M" : "(CF - CA) / (TOI / 3600)",
        "F/60M" : "(FF - FA) / (TOI / 3600)",
        "SS/60M" : "(oiTmS - oiOppS) / (TOI / 3600)",
        "offIC/60M" : "(offICF - offICA) / (TOI / 3600)",
        "offIF/60M" : "(offIFF - offIFA) / (TOI / 3600)",
        "CRel/60M" : "((CF - offICF) - (CA - offICA)) / (TOI / 3600)",
        "FRel/60M" : "F/60M - offIF/60M",
        "S%_5v5" : "G_5v5 / S_5v5",
        "TS%_5v5" : "G_5v5 / TSA_5v5",
        "SThr%_5v5" : "S_5v5 / TSA_5v5",
        "GF%" : "GF / (GF + GA)",
        "EVGF%" : "EVGF / (EVGF + EVGA)",
        "IGP" : "G / GF",
        "IPP" : "P / GF",
        "EVIGP" : "EVG / EVGF",
        "EVIPP" : "EVP / EVGF",
        "PPIGP" : "PPG / PPGF",
        "PPIPP" : "PPP / PPGF",
        "SHIGP" : "SHG / SHGF",
        "SHIPP" : "SHP / SHGF",
        "GF/60M" : "GF / (TOI / 3600)",
        "GA/60M" : "GA / (TOI / 3600)",
        "GD/60M" : "GD / (TOI / 3600)",
        "EVGF/60M" : "EVGF / (EVTOI / 3600)",
        "EVGA/60M" : "EVGA / (EVTOI / 3600)",
        "EVGD/60M" : "EVGD / (EVTOI / 3600)",
        "PPGF/60M" : "PPGF / (PPTOI / 3600)",
        "PPGA/60M" : "PPGA / (PPTOI / 3600)",
        "PPGD/60M" : "PPGD / (PPTOI / 3600)",
        "SHGF/60M" : "SHGF / (SHTOI / 3600)",
        "SHGA/60M" : "SHGA / (SHTOI / 3600)",
        "SHGD/60M" : "SHGD / (SHTOI / 3600)",
        "EVxGD" : "xGF - xGA",
        "EVxGF%" : "xGF / (xGF + xGA)",
        "EVxGF/60M" : "xGF / (xEVTOI / 3600)",
        "EVxGA/60M" : "xGA / (xEVTOI / 3600)",
        "EVxGD/60M" : "EVxGD / (xEVTOI / 3600)",
        "TK/GV" : "TK / GV",
        "TK/60M" : "TK / (TOI / 3600)",
        "GV/60M" : "GV / (TOI / 3600)",
        "GP/Yr" : "GP / NonFakeSeasons",
        "AllStar:1st%" : "AllStar:1st / RegularSeasons",
        "AllStar:2nd%" : "AllStar:2nd / RegularSeasons",
        "AllStar:Tot" : "AllStar:1st + AllStar:2nd",
        "AllStar:Tot%" : "AllStar:Unique / RegularSeasons",
        "AllStarShr%" : "AllStarShares / RegularSeasons",
        "Hart%" : "Hart / RegularSeasons",
        "HartShr%" : "HartShares / RegularSeasons",
        "Norris%" : "Norris / DefenseRegularSeasons",
        "NorrisShr%" : "NorrisShares / DefenseRegularSeasons",
        "Selke%" : "Selke / SkaterRegularSeasons",
        "SelkeShr%" : "SelkeShares / SkaterRegularSeasons",
        "Lindsay%" : "Lindsay / RegularSeasons",
        "GLeader%" : "GLeader / RegularSeasons",
        "ALeader%" : "ALeader / RegularSeasons",
        "PLeader%" : "PLeader / RegularSeasons",
        "Cup%" : "Cup / UniqueSeasons"
    },
    "Goalie" : {
        "FirstStar%" : "FirstStar / GP",
        "SecondStar%" : "SecondStar / GP",
        "ThirdStar%" : "ThirdStar / GP",
        "TotalStar%" : "TotalStar / GP",
        "TmW" : "Special",
        "TmL" : "Special",
        "TmTtlL" : "Special",
        "TmT" : "Special",
        "TmOTL" : "Special",
        "TmRec" : "Special",
        "TmPTS" : "(TmW * 2) + (TmT * 1) + (TmOTL * 1)",
        "TmPTS%" : "TmPTS / ((TmW + TmL + TmT + TmOTL) * 2)",
        "TmW/L%" : "TmW / (TmW + TmL + TmOTL)",
        "TmROW" : "Special",
        "TmROL" : "Special",
        "TmROW/L%" : "TmROW / (TmROW + TmROL)",
        "TmScore" : "Special",
        "OppScore" : "Special",
        "TtlScore" : "TmScore + OppScore",
        "ScoreDiff" : "TmScore - OppScore",
        "TmG" : "Special",
        "OppG" : "Special",
        "TtlG" : "TmG + OppG",
        "GDiff" : "TmG - OppG",
        "TmScore/GP" : "TmScore / GP",
        "OppScore/GP" : "OppScore / GP",
        "TtlScore/GP" : "TtlScore / GP",
        "ScoreDiff/GP" : "ScoreDiff / GP",
        "TmG/GP" : "TmG / GP",
        "OppG/GP" : "OppG / GP",
        "TtlG/GP" : "TtlG / GP",
        "GDiff/GP" : "GDiff / GP",
        "W/82GP" : "W / (GP / 82)",
        "L/82GP" : "L / (GP / 82)",
        "T/82GP" : "T / (GP / 82)",
        "OTL/82GP" : "OTL / (GP / 82)",
        "PTS" : "(W * 2) + (T * 1) + (OTL * 1)",
        "PTS%" : "PTS / ((W + L + T + OTL) * 2)",
        "W/L%" : "W / (W + L + OTL)",
        "ROW/L%" : "ROW / (ROW + ROL)",
        "SA/GP" : "SA / GP",
        "GA/60M" : "GA / (TOI / 3600)",
        "SA/60M" : "SA / (TOI / 3600)",
        "SV/60M" : "SV / (TOI / 3600)",
        "SV/GP" : "SV / GP",
        "GA/GP" : "GA / GP",
        "GAA" : "GA / (TOI / 3600)",
        "GFA" : "GF / (TOI / 3600)",
        "SV%" : "SV / SA",
        "SO/82GP" : "SO / (GP / 82)",
        "TOI/GP" : "TOI / GP_TOI",
        "EVGA/GP" : "EVGA / GP",
        "PPGA/GP" : "PPGA / GP",
        "SHGA/GP" : "SHGA / GP",
        "SVEvenStrength" : "(EVSH - EVGA) / EVSH",
        "xSVEvenStrength" : "(xEVSH - xEVGA) / xEVSH",
        "SVPowerPlay" : "(PPSH - PPGA) / PPSH",
        "SVShorthanded" : "(SHSH - SHGA) / SHSH",
        "SHEvenStrength" : "EVSH / (EVSH + PPSH + SHSH)",
        "SHPowerPlay" : "PPSH / (EVSH + PPSH + SHSH)",
        "SHShorthanded" : "SHSH / (EVSH + PPSH + SHSH)",
        "xGAPer60" : "xGA / (xEVTOI / 3600)",
        "GAPer60" : "xEVGA / (xEVTOI / 3600)",
        "EVGSAx" : "xGA - xEVGA",
        "EVGSAx/GP" : "EVGSAx / GP",
        "EVGSAx/60" : "EVGSAx / (xEVTOI / 3600)",
        "SVxEvenStrength" : "(xEVSH - xGA) / xEVSH",
        "SVAxEvenStrength" : "xSVEvenStrength - SVxEvenStrength",
        "scSA/GP" : "scSA / GP",
        "scSA/60M" : "scSA / (xEVTOI / 3600)",
        "scSV/60M" : "(scSA - scGA) / (xEVTOI / 3600)",
        "scSV%" : "(scSA - scGA) / scSA",
        "HDscSA/GP" : "HDscSA / GP",
        "HDscSA/60M" : "HDscSA / (xEVTOI / 3600)",
        "HDscSV/60M" : "(HDscSA - HDscGA) / (xEVTOI / 3600)",
        "HDscSV%" : "(HDscSA - HDscGA) / HDscSA",
        "IQ" : "GS - CG",
        "CG%" : "CG / GS",
        "QS%" : "QS / GS",
        "RBS%" : "RBS / GS",
        "SO%" : "SO / GS",
        "GP/Yr" : "GP / NonFakeSeasons",
        "GS/Yr" : "GS / NonFakeSeasons",
        "TOI/Yr" : "TOI / NonFakeSeasons",
        "AllStar:1st%" : "AllStar:1st / RegularSeasons",
        "AllStar:2nd%" : "AllStar:2nd / RegularSeasons",
        "AllStar:Tot" : "AllStar:1st + AllStar:2nd",
        "AllStar:Tot%" : "AllStar:Unique / RegularSeasons",
        "AllStarShr%" : "AllStarShares / RegularSeasons",
        "Hart%" : "Hart / RegularSeasons",
        "HartShr%" : "HartShares / RegularSeasons",
        "Vezina%" : "Vezina / RegularSeasons",
        "VezinaShr%" : "VezinaShares / RegularSeasons",
        "Jennings%" : "Jennings / RegularSeasons",
        "Lindsay%" : "Lindsay / RegularSeasons",
        "Cup%" : "Cup / UniqueSeasons"
    }
}

qualifier_map = {
    "Rookie" : {},
    "Facing Former Team" : {},
    "Facing Former Franchise" : {},
    "Decision" : {},
    "Age" : {},
    "Season Age" : {},
    "Round" : {
        "sc" : "Stanley Cup",
        "cf" : "Conference Finals",
        "cs" : "Conference Semifinals",
        "cq" : "Conference Quaterfinals",
        "qr" : "Qualifying",
        "pr" : "Play-In",
        "rr" : "Round Robin"
    },
    "Time" : {
        "m" : "Morning",
        "e" : "Early Afternoon",
        "a" : "Late Afternoon",
        "l" : "Night"
    },
    "Series Game" : {},
    "Location" : {
        "home" : "Home",
        "away" : "Away"
    },
    "With New Team" : {},
    "With New Franchise" : {},
    "Temperate Season" : {},
    "Team" : {},
    "Opponent" : {},
    "Team Franchise" : {},
    "Opponent Franchise" : {},
    "Start" : {
        True : "Only Starts",
        False : "No Starts"
    },
    "Complete Game" : {},
    "Month" : {},
    "Day" : {},
    "Date" : {},
    "Dates" : {},
    "Birthday" : {
        True : "Birthday",
        False : "Not Birthday"
    },
    "First Half" : {},
    "Second Half" : {},
    "Pre All-Star" : {},
    "Post All-Star" : {},
    "Sub Query" : {},
    "Day Of Sub Query" : {},
    "Day After Sub Query" : {},
    "Day Before Sub Query" : {},
    "Game After Sub Query" : {},
    "Game Before Sub Query" : {},
    "Season Sub Query" : {},
    "Season After Sub Query" : {},
    "Season Before Sub Query" : {},
    "Playing With" : {},
    "Playing Against" : {},
    "Previous Playing With" : {},
    "Previous Playing Against" : {},
    "Upcoming Playing With" : {},
    "Strength" : {},
    "Even Skaters" : {},
    "Team Players" : {},
    "Opponent Players" : {},
    "More Skaters" : {},
    "Less Skaters" : {},
    "Team Skaters" : {},
    "Opponent Skaters" : {},
    "Team Goalie Pulled" : {},
    "Opponent Goalie Pulled" : {},
    "Power Play" : {},
    "Short Handed" : {},
    "Even Strength" : {},
    "Shot On" : {},
    "Assisted On" : {},
    "Assisted With" : {},
    "Points With" : {},
    "Assisted By" : {},
    "Primary Assisted On" : {},
    "Primary Assisted With" : {},
    "Primary Points With" : {},
    "Primary Assisted By" : {},
    "Hit On" : {},
    "Block On" : {},
    "Penalty On" : {},
    "Faceoff Against" : {},
    "Fight Against" : {},
    "On Ice With" : {},
    "On Ice Against" : {},
    "Arena" : {},
    "Exact Arena" : {},
    "Penalty Type" : {},
    "Upcoming Playing Against" : {},
    "Playing Same Game" : {},
    "Playing Same Opponents" : {},
    "Playing Same Date" : {},
    "Result" : {},
    "Team Score" : {},
    "Opponent Score" : {},
    "Score Margin" : {},
    "Score Difference" : {},
    "Final Team Score" : {},
    "Final Opponent Score" : {},
    "Final Score Margin" : {},
    "Final Score Difference" : {},
    "Period" : {},
    "Coordinates" : {},
    "Exact Coordinates" : {},
    "Period Time" : {},
    "Period Time Remaining" : {},
    "National Game" : {},
    "Any National Game" : {},
    "US National Game" : {},
    "Any US National Game" : {},
    "CA National Game" : {},
    "Any CA National Game" : {},
    "TV Network" : {},
    "Raw TV Network" : {},
    "National TV Network" : {},
    "National Raw TV Network" : {},
    "Any National TV Network" : {},
    "Any National Raw TV Network" : {},
    "Penalty Shot" : {},
    "Shootout" : {},
    "Overtime" : {},
    "Game Winning" : {},
    "Offensive Zone" : {},
    "Defensive Zone" : {},
    "Neutral Zone" : {},
    "Unassisted" : {},
    "Series Team Wins" : {},
    "Series Opponent Wins" : {},
    "Series Score Margin" : {},
    "Series Score Difference" : {},
    "Elimination" : {},
    "Clinching" : {},
    "Elimination Or Clinching" : {},
    "Winner Take All" : {},
    "Behind In Series" : {},
    "Ahead In Series" : {},
    "Even In Series" : {},
    "Season" : {},
    "Season Reversed" : {},
    "Season Game" : {},
    "Career Minute" : {},
    "Career Minute Reversed" : {},
    "Game Minute" : {},
    "Game Minute Reversed" : {},
    "Career Shot" : {},
    "Career Shot Reversed" : {},
    "Game Shot" : {},
    "Game Shot Reversed" : {},
    "Career Game" : {},
    "Team Game" : {},
    "Career Game Reversed" : {},
    "Season Game Reversed" : {},
    "Team Game Reversed" : {},
    "Days Rest" : {},
    "Starts Days Rest" : {},
    "Upcoming Starts Days Rest" : {},
    "Upcoming Days Rest" : {},
    "Games Rest" : {},
    "Starts Rest" : {},
    "Days In A Row" : {},
    "Games In A Row" : {},
    "Starts In A Row" : {},
    "Season Number" : {},
    "Game Number" : {},
    "Year" : {},
    "Even Year" : {},
    "Odd Year" : {},
    "Winning Opponent" : {},
    "Losing Opponent" : {},
    "Tied Opponent" : {},
    "Winning Or Tied Opponent" : {},
    "Losing Or Tied Opponent" : {},
    "Current Winning Opponent" : {},
    "Current Losing Opponent" : {},
    "Current Tied Opponent" : {},
    "Current Winning Or Tied Opponent" : {},
    "Current Losing Or Tied Opponent" : {},
    "Playoff Opponent" : {},
    "Opponent Wins" : {},
    "Opponent Losses" : {},
    "Opponent Ties" : {},
    "Opponent Points" : {},
    "Opponent Games Over 500" : {},
    "Opponent Win Percentage" : {},
    "Opponent Points Percentage" : {},
    "Current Opponent Wins" : {},
    "Current Opponent Losses" : {},
    "Current Opponent Ties" : {},
    "Current Opponent Points" : {},
    "Current Opponent Games Over 500" : {},
    "Current Opponent Win Percentage" : {},
    "Current Opponent Points Percentage" : {},
    "Cup Winner Opponent" : {},
    "Conference Winner Opponent" : {},
    "Opponent Standings Rank" : {},
    "Opponent Goals Rank" : {},
    "Opponent Goals Allowed Rank" : {},
    "Winning Team" : {},
    "Losing Team" : {},
    "Tied Team" : {},
    "Winning Or Tied Team" : {},
    "Losing Or Tied Team" : {},
    "Current Winning Team" : {},
    "Current Losing Team" : {},
    "Current Tied Team" : {},
    "Current Winning Or Tied Team" : {},
    "Current Losing Or Tied Team" : {},
    "Playoff Team" : {},
    "Team Wins" : {},
    "Team Losses" : {},
    "Team Ties" : {},
    "Team Points" : {},
    "Team Games Over 500" : {},
    "Team Win Percentage" : {},
    "Team Points Percentage" : {},
    "Current Team Wins" : {},
    "Current Team Losses" : {},
    "Current Team Ties" : {},
    "Current Team Points" : {},
    "Current Team Games Over 500" : {},
    "Current Team Win Percentage" : {},
    "Current Team Points Percentage" : {},
    "Cup Winner Team" : {},
    "Conference Winner Team" : {},
    "Team Standings Rank" : {},
    "Team Goals Rank" : {},
    "Team Goals Allowed Rank" : {},
    "Previous Team" : {},
    "Upcoming Team" : {},
    "Previous Opponent" : {},
    "Upcoming Opponent" : {},
    "Previous Opponent" : {},
    "Upcoming Opponent" : {},
    "Previous Team Franchise" : {},
    "Upcoming Team Franchise" : {},
    "Previous Opponent Franchise" : {},
    "Upcoming Opponent Franchise" : {},
    "Previous Same Opponent" : {},
    "Upcoming Same Opponent" : {},
    "Team Conference" : {},
    "Opponent Conference" : {},
    "Interconference" : {},
    "Intraconference" : {},
    "Team Division" : {},
    "Opponent Division" : {},
    "Interdivsion" : {},
    "Intradivision" : {},
    "Previous Location" : {
        "home" : "Home",
        "away" : "Away"
    },
    "Upcoming Location" : {
        "home" : "Home",
        "away" : "Away"
    },
    "Previous Result" : {},
    "Upcoming Result" : {},
    "Previous Team Result" : {},
    "Upcoming Team Result" : {},
    "Stat" : {},
    "Period Stat" : {},
    "Previous Stat" : {},
    "Upcoming Stat" : {},
    "Season Stat" : {},
    "Previous Season Stat" : {},
    "Upcoming Season Stat" : {},
    "Formula" : {},
    "Season Formula" : {},
    "Event Formula" : {},
    "Event Time" : {},
    "Start Time" : {},
    "Max Streak Formula" : {},
    "Count Streak Formula" : {},
    "Total Games Stat" : {},
    "Min Stat" : {},
    "Max Stat" : {},
    "Max Streak" : {},
    "Max Stretch" : {},
    "Count Streak" : {}, 
    "Quickest" : {},
    "Slowest" : {},
    "Holiday" : {},
    "Force Dates" : False
}

missing_player_data = {
    "ids" : [],
    "nhl_ids" : [],
    "Player" : "No Player Match!",
    "id" : "No Player Match!",
    "nhl_id" : "No Player Match!",
    "Search Term" : None,
    "LastUpdated" : None,
    "player_image_url" : [],
    "player_current_team" : [],
    "player_position" : "",
    "player_cap" : 0,
    "player_flag" : [],
    "player_current_number" : [],
    "player_hof" : [],
    "has_season_stats" : True,
    "has_award_stats" : True,
    "is_only_sc" : True,
    "error_getting_adv" : False,
    "rows" : [],
    "seperate_rows" : [],
    "DateStart" : [],
    "DateEnd" : [],
    "YearStart" : [],
    "YearEnd" : [],
    "stat_values" : {
        "Player" : ["No Player Match!"],
        "Player/GP" : ["No Player Match!"],
        "Player_Score" : ["No Player Match!"],
        "Player_5v5" : ["No Player Match!"],
        "Player_Sit" : ["No Player Match!"],
        "Player_Awards" : ["No Player Match!"],
        "Player_Penalty" : ["No Player Match!"],
        "is_indv_shift_data" : False,
        "any_missing_games" : [],
        "any_missing_toi" : [],
        "is_playoffs" : False,
        "Raw Player" : "No Player Found!",
        "Raw Range" : "No Matching Games!",
        "Raw Time" : "",
        "Raw Quals" : ""
    }
}

advanced_stats = [
    "GC",
    "GC/GP",
    "OPS",
    "OPS/82GP",
    "OPS/60M",
    "DPS",
    "DPS/82GP",
    "DPS/60M",
    "PS",
    "PS/82GP",
    "PS/60M",
    "AdjG",
    "AdjA",
    "AdjP",
    "AdjGC",
    "GPS",
    "GPS/82GP",
    "GPS/60M",
    "GA%-",
    "AdjGAA",
    "GSAA",
    "GSAA/82GP",
    "GSAA/60M"
]

div_id_to_stat = {
    "Skater" : {
        "leaderboard_games_played" : "GP",
        "leaderboard_goals" : "G",
        "leaderboard_assists" : "A",
        "leaderboard_points" : "P",
        "leaderboard_goals_created" : "GC",
        "leaderboard_plus_minus" : "PlusMinus",
        "leaderboard_expected_plsmns" : "EVExpectedPlusMinus",
        "leaderboard_pen_min" : "PIM",
        "leaderboard_goals_ev" : "EVG",
        "leaderboard_goals_pp" : "PPG",
        "leaderboard_goals_sh" : "SHG",
        "leaderboard_goals_gw" : "GWG",
        "leaderboard_shots" : "S",
        "leaderboard_shot_pct" : "S%",
        "leaderboard_hat_trick" : "HAT",
        "leaderboard_goals_per_game" : "G/GP",
        "leaderboard_assists_per_game" : "A/GP",
        "leaderboard_points_per_game" : "P/GP",
        "leaderboard_goals_created_per_game" : "GC/GP",
        "leaderboard_total_goals_for" : "GF",
        "leaderboard_power_play_goals_for" : "PPGF",
        "leaderboard_total_goals_against" : "GA",
        "leaderboard_power_play_goals_against" : "PPGA",
        "leaderboard_goals_adjusted" : "AdjG",
        "leaderboard_assists_adjusted" : "AdjA",
        "leaderboard_points_adjusted" : "AdjP",
        "leaderboard_goals_created_adjusted" : "AdjGC",
        "leaderboard_ops" : "OPS",
        "leaderboard_dps" : "DPS",
        "leaderboard_ps" : "PS",
        "fake_leaderboard_hart" : "Hart",
        "fake_leaderboard_selke" : "Selke",
        "fake_leaderboard_norris" : "Norris"
    }, "Goalie" : {
        "leaderboard_games_goalie" : "GP",
        "leaderboard_wins_goalie" : "W",
        "leaderboard_losses_goalie" : "L",
        "leaderboard_ties_goalie" : "T/OTL",
        "leaderboard_goals_against" : "GA",
        "leaderboard_shots_against" : "SA",
        "leaderboard_saves" : "SV",
        "leaderboard_save_pct" : "SV%",
        "leaderboard_goals_against_avg" : "GAA",
        "leaderboard_min_goalie" : "TOI",
        "leaderboard_gs_above_avg" : "GSAA",
        "leaderboard_ga_pct_minus" : "GA%-",
        "leaderboard_goals_against_avg_adjusted" : "AdjGAA",
        "leaderboard_shutouts" : "SO",
        "leaderboard_gps" : "GPS",
        "leaderboard_ps" : "PS",
        "fake_leaderboard_hart" : "Hart",
        "fake_leaderboard_vezina" : "Vezina"
    }
}

team_renames = {
    "mighty ducks of anaheim" : "anaheim ducks",
    "phoenix coyotes" : "arizona coyotes"
}

playoff_format_history = [
    {
        "start" : None,
        "end" : 1918,
        "rounds" : [-1, -1]
    },
    {
        "start" : 1919,
        "end" : 1919,
        "rounds" : [-1]
    },
    {
        "start" : 1920,
        "end" : 1921,
        "rounds" : [-1, -1]
    },
    {
        "start" : 1922,
        "end" : 1923,
        "rounds" : [-1, -1, -1]
    },
    {
        "start" : 1924,
        "end" : 1924,
        "rounds" : [-1, -1]
    },
    {
        "start" : 1925,
        "end" : 1925,
        "rounds" : "Special"
    },
    {
        "start" : 1926,
        "end" : 1941,
        "rounds" : "Special"
    },
    {
        "start" : 1942,
        "end" : 1966,
        "rounds" : [4, 4]
    },
    {
        "start" : 1967,
        "end" : 1973,
        "rounds" : [4, 4, 4]
    },
    {
        "start" : 1974,
        "end" : 1978,
        "rounds" : "Special"
    },
    {
        "start" : 1979,
        "end" : 1985,
        "rounds" : [3, 4, 4, 4]
    },
    {
        "start" : 1986,
        "end" : 2018,
        "rounds" : [4, 4, 4, 4]
    },
    {
        "start" : 2019,
        "end" : 2019,
        "rounds" : "Special"
    },
    {
        "start" : 2020,
        "end" : None,
        "rounds" : [4, 4, 4, 4]
    }
]

bye_mapping = {
    1925: ["OTS"],
    1926: ["OTS", "NYR"],
    1927: ["BOS", "MTL"],
    1928: ["BOS", "MTL"],
    1929: ["BOS", "MTM"],
    1930: ["MTL", "BOS"],
    1931: ["NYR", "MTL"],
    1932: ["TOR", "BOS"],
    1933: ["DET", "TOR"],
    1934: ["TOR", "BOS"],
    1935: ["DET", "MTM"],
    2019: ["BOS", "TBL", "WSH", "PHI", "STL", "COL", "VEG", "DAL"]
}

manual_awards_map = {}
manual_players = {}

logname = "nhl.log"
logger = logging.getLogger("nhl")
logger.setLevel(logging.INFO)
formatter = logging.Formatter(fmt='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
handler = TimedRotatingFileHandler(logname, when="midnight", interval=1)
handler.suffix = "%Y%m%d"
handler.setFormatter(formatter)
logger.addHandler(handler)
streamhandler = logging.StreamHandler(sys.stdout)
streamhandler.setLevel(logging.DEBUG)
logger.addHandler(streamhandler)

main_page_url_format = "https://www.hockey-reference.com/players/{}/{}.html"
player_search_url_format = "https://www.hockey-reference.com/search/search.fcgi?search={}"
game_splits_url_format = "https://www.hockey-reference.com/players/{}/{}/gamelog/{}"
adv_url_format = "https://www.hockey-reference.com/players/{}/{}-advanced-{}.html"
opponent_schedule_url_format = "https://www.hockey-reference.com/leagues/NHL_{}.html"
team_roster_url_format = "https://statsapi.web.nhl.com/api/v1/teams/{}/roster?season={}&hydrate=person"
nhl_team_schedule_url_format = "https://statsapi.web.nhl.com/api/v1/schedule?teamId={}&season={}"
#nhl_team_schedule_url_format = "https://statsapi.web.nhl.com/api/v1/schedule?teamId={}&startDate={}&endDate={}"
nhl_shifts_report_format = "https://api.nhle.com/stats/rest/en/shiftcharts?cayenneExp=gameId={}"
nhl_html_shifts_report_format = "http://www.nhl.com/scores/htmlreports/{}/T{}{}.HTM"
nhl_html_plays_report_format = "http://www.nhl.com/scores/htmlreports/{}/PL{}.HTM"
nhl_html_summary_report_format = "http://www.nhl.com/scores/htmlreports/{}/GS{}.HTM"

totals = None
with open("yearly_totals.json", "r") as file:
    totals = json.load(file)

all_star_games = None
with open("all_star_games.json", "r") as file:
    file.seek(0)
    all_star_games = json.load(file)

css_string = None
with open ("nhl.css", "r") as file:
    css_string = file.read()

team_colors = None
with open ("../team_colors.json", "r") as file:
    team_colors = json.load(file)

award_results = None
with open ("award_results.json", "r") as file:
    award_results = json.load(file)

team_ids = None
with open ("team_ids.json", "r") as file:
    team_ids = json.load(file)

team_abbr = None
with open ("team_abr.json", "r") as file:
    team_abbr = json.load(file)

team_name_info = None
with open ("team_name_info.json", "r") as file:
    team_name_info = json.load(file)

team_main_abbr = None
with open ("team_main_abbr.json", "r") as file:
    team_main_abbr = json.load(file)

manual_id_maps = None
with open ("manual_id_maps.json", "r") as file:
    manual_id_maps = json.load(file)

manual_info = {
    1987030999 : {
        "Date" : dateutil.parser.parse("1988-05-24").date(),
        "StartTime" : dateutil.parser.parse("1988-05-24T16:00:00Z"),
        "Time" : "L",
        "Home Score" : 3,
        "Road Score" : 3,
        "Home Goals" : 3,
        "Road Goals" : 3,
        "Home Result" : "T",
        "Road Result" : "T",
        "Arena" : "Boston Garden",
        "ArenaID" : None,
        "Home TmGm" : 102,
        "Road TmGm" : 98
    },
    1990020681 : {
        "Date" : dateutil.parser.parse("1991-02-27").date(),
        "StartTime" : dateutil.parser.parse("1991-02-27T17:00:00Z"),
        "Time" : "L",
        "Home Score" : 4,
        "Road Score" : 3,
        "Home Goals" : 4,
        "Road Goals" : 3,
        "Home Result" : "W",
        "Road Result" : "L",
        "Arena" : "Pacific Coliseum",
        "ArenaID" : None,
        "Home TmGm" : 67,
        "Road TmGm" : 65
    },
}

ssl._create_default_https_context = ssl._create_unverified_context

def main():
    """The main function."""

    manual_comment_short = "c"
    manual_comment_long = "comment"
    debug_mode_short = "d"
    debug_mode_long = "debug"
    try:
        options = getopt.getopt(sys.argv[1:], manual_comment_short + ":" + debug_mode_short + ":", [manual_comment_long + "=", debug_mode_long + "="])[0]
    except getopt.GetoptError as err:
        logger.error("Encountered error \"" + str(err) + "\" parsing arguments")
        return

    reddit = praw.Reddit("nhlcomparebot")
 
    subreddit = reddit.subreddit("+".join(subreddits_to_crawl))
    #subreddit = reddit.subreddit("pythonforengineers")

    conn = sqlite3.connect("nhl.db")
    try:
        with conn:
            curr = conn.cursor()
            
            curr.execute("SELECT COUNT(*) FROM sqlite_master WHERE type=\"table\" AND name=\"nhl\";")
            
            numtables = int(curr.fetchone()[0])

            if not numtables:
                logger.info("nhl table missing. Creating...")
                curr.execute("CREATE TABLE nhl (reply_id TEXT PRIMARY KEY, reply_comment_id TEXT, reply_author TEXT NOT NULL, subreddit TEXT NOT NULL, original_comment TEXT, was_successful BOOLEAN NOT NULL CHECK (was_successful IN (0,1)), was_deleted BOOLEAN NOT NULL CHECK (was_deleted IN (0,1)), timestamp INTEGER NOT NULL);")
                curr.execute("SELECT COUNT(*) FROM sqlite_master WHERE type=\"table\" AND name=\"nhl\";")
                numtables = int(curr.fetchone()[0])
                if numtables:
                    logger.info("nhl table created!")
                else:
                    raise Exception("Error creating table!")
    finally:
        conn.close()

    for opt, arg in options:
        if opt in ("-" + manual_comment_short, "--" + manual_comment_long):
            comment = reddit.comment(id=arg.strip())
            if not comment.archived and comment.author and not comment.author.name.lower() in blocked_users:
                if re.search(r"!\bnhlcompare\b", comment.body, re.IGNORECASE):
                    logger.info("FOUND COMMENT " + str(comment.id))
                    parse_input(comment, False, comment.subreddit.display_name in approved_subreddits)
            return
        elif opt in ("-" + debug_mode_short, "--" + debug_mode_long):
            comment_str = arg.strip()
            comment = FakeComment(comment_str, "-1", "", "fantasyhockey")
            if re.search(r"!\bnhlcompare\b", comment.body, re.IGNORECASE):
                logger.info("FOUND COMMENT " + str(comment.id))
                parse_input(comment, True, False)
            return

    with ThreadPoolExecutor(max_workers=10) as executor:
        for comment in subreddit.stream.comments():
            if not comment.archived and comment.author and not comment.author.name.lower() in blocked_users:
                if re.search(r"!\bnhlcompare\b", comment.body, re.IGNORECASE):
                    logger.info("FOUND COMMENT " + str(comment.id))
                    executor.submit(parse_input, comment, False, comment.subreddit.display_name in approved_subreddits)

def parse_input(comment, debug_mode, is_approved, existing_cur=None, existing_comment=None):
    try:
        start_time = datetime.datetime.now()
        logger.info("#" + str(threading.get_ident()) + "#   " + "THREAD STARTED FOR " + str(comment.id))
        logger.info("#" + str(threading.get_ident()) + "#   " + "COMMENT: " + comment.body)

        if existing_comment and not isinstance(existing_comment, Message):
            try:
                existing_comment.delete()
            except praw.exceptions.APIException as e:
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
            existing_comment = None
        
        if ignore_approved:
            is_approved = True

        manager = multiprocessing.Manager()
        comment_obj = manager.dict()
        comment_obj["comment"] = comment
        comment_obj["reply"] = existing_comment if not isinstance(existing_comment, Message) else None
        comment_obj["total_players"] = 0
        comment_obj["player_count"] = 0
        comment_obj["start_time"] = datetime.datetime.now(timezone("US/Eastern"))
        comment_obj["debug_mode"] = debug_mode
        comment_obj["is_approved"] = is_approved

        if existing_cur:
            sub_parse_input(existing_cur, comment, debug_mode, comment_obj, True)
        else:
            conn = sqlite3.connect("nhl.db")
            try:
                with conn:
                    curr = conn.cursor()
                    sub_parse_input(curr, comment, debug_mode, comment_obj, False)
            finally:
                conn.close()
    except BaseException as e:
        logger.error(traceback.format_exc())
        raise e
    finally:
        end_time = datetime.datetime.now() - start_time
        time_str = str(end_time)
        logger.info("#" + str(threading.get_ident()) + "#   " + "RunTime : " + time_str)

def sub_parse_input(curr, comment, debug_mode, comment_obj, force_through):
    curr.execute("SELECT 1 FROM nhl WHERE reply_id = ?;", (comment.id, ))
    if not curr.fetchone() or force_through:
        reddit_message = None
        last_updated = None
        imgur_link = None
        hide_table = False
        main_comment = None
        was_successful = 0
        try:
            main_comment = parse_comment_str(comment.body).group(0)

            player_type = {
                "da_type" : None
            }
            player_datas, last_updated, original_comment, hide_table, extra_stats = handle_player_string(comment.body, player_type, last_updated, hide_table, comment_obj)

            has_one_player = False
            for player_data in player_datas:
                if player_data["stat_values"]["Player"] != ["No Player Match!"]:
                    has_one_player =  True
                    break
            #if not has_one_player:
            #    raise CustomMessageException("Zero player matches in search!")

            has_one_player_games = False
            for player_data in player_datas:
                if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
                    has_one_player_games = True
                    break
            #if not has_one_player_games:
                #raise CustomMessageException("Zero players have games in the provided query!")
                        
            reddit_message, imgur_link = get_reddit_player_table(player_datas, player_type, debug_mode, original_comment, last_updated, str(comment.id), hide_table, extra_stats, has_one_player, has_one_player_games)
            if hide_table:
                reddit_message = "### Comparison complete! Image is available [here](" + imgur_link + ")"
            if has_one_player_games:
                reddit_message += "\n\n^(N/A indicates stat was not tracked at all during the time frame, * indicates stat was not tracked consistently throughout the entire time frame)"
            else:
                reddit_message = reddit_message[:-5]
            was_successful = 1
        except CustomMessageException as e:
            reddit_message = "Oh no, I had a problem with your request: " + e.message
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        except (urllib.error.URLError, socket.timeout) as e:
            reddit_message = "Oh no, I had a problem with your request: Unable to connect to Hockey Reference or NHL.com! Please try again later"
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        except BaseException as e:
            reddit_message = "Oh no, I had a problem with your request. If you leave your comment I will try to fix this issue and re-run the comparison"
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        reddit_message += "\n\n---"
        if imgur_link and not hide_table:
            reddit_message = "Tables cutoff or tough to read? Click [here](" + imgur_link + ") to view this comparison as an image\n\n---\n" + reddit_message
        if last_updated:
            reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
        non_message_reddit_message = reddit_message
        if not isinstance(comment, Message):
            reddit_message += "\n\n^(Made a mistake? Edit your comment and send me this )[^message](https://www.reddit.com/message/compose?to=nhlcomparebot&subject=Re-Run&message=" + comment.id + ")^( to re-run the comparison)"
            reddit_message += "\n\n^(Or delete the comparison by sending me this )[^message](https://www.reddit.com/message/compose?to=nhlcomparebot&subject=Delete&message=" + comment.id + ")"
        reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
        if len(reddit_message) > 10000:
            reddit_message = "Oh no, I had a problem with your request: Comment would be over the reddit max of 10000 characters!"
            if imgur_link:
                reddit_message += "\n\nI can at least provide an image of this comparison [here](" + imgur_link + ")\n"
            else:
                reddit_message += "\n\nI was also unable to generate an image of this comparison. This may be resolved if you try again later\n"
            reddit_message += "\n\n---"
            if last_updated:
                reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
            if not isinstance(comment, Message):
                reddit_message += "\n\n^(Made a mistake? Edit your comment and send me this )[^message](https://www.reddit.com/message/compose?to=nhlcomparebot&subject=Re-Run&message=" + comment.id + ")^( to re-run the comparison)"
                reddit_message += "\n\n^(Or delete the comparison by sending me this )[^message](https://www.reddit.com/message/compose?to=nhlcomparebot&subject=Delete&message=" + comment.id + ")"
            reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
        failed_counter = 0
        try_counter = 0
        last_wait_time = None
        while True:
            curr.execute("SELECT COUNT(*) FROM nhl;")
            num_replies = curr.fetchone()[0] + 1
            logger.info("#" + str(threading.get_ident()) + "#   " + "REPLY: " + comment.id + "(" + str(num_replies) + ")")
            if imgur_link:
                logger.info("#" + str(threading.get_ident()) + "#   " + "IMGUR LINK: " + imgur_link)
            try:
                if not debug_mode:
                    if isinstance(comment_obj["reply"], Message) or not comment_obj["reply"]:
                        reply_comment = comment_obj["comment"].reply(reddit_message)
                    else:
                        reply_comment = comment_obj["comment"].reply(reddit_message)
                        comment_obj["reply"].delete()
                        comment_obj["reply"] = None
                    logger.info("#" + str(threading.get_ident()) + "#   " + "MESSAGE: " + reddit_message)
            except praw.exceptions.APIException as e:
                if (e.error_type == "RATELIMIT"):
                    if failed_counter == 0 and not isinstance(comment_obj["reply"], Message):
                        non_message_reddit_message = "Reddit is currently rate limiting this bot's comments! If this bot gets added to the approved users of r/" + comment.subreddit.display_name + " this should no longer occur. We will delay and try a few more times, but in the meantime here is your comparison as a message\n\n---\n" + non_message_reddit_message
                        non_message_reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
                        if len(non_message_reddit_message) > 10000:
                            non_message_reddit_message = "Reddit is currently rate limiting this bot's comments! If this bot gets added to the approved users of r/" + comment.subreddit.display_name + " this should no longer occur. We will delay and try a few more times, but in the meantime here is your comparison as a message\n\n---\n"
                            non_message_reddit_message += "Oh no, I had a problem with your request: Comment would be over the reddit max of 10000 characters!"
                            if imgur_link:
                                non_message_reddit_message += "\n\nI can at least provide an image of this comparison [here](" + imgur_link + ")\n"
                            else:
                                non_message_reddit_message += "\n\nI was also unable to generate an image of this comparison. This may be resolved if you try again later\n"
                            non_message_reddit_message += "\n\n---"
                            if last_updated:
                                reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
                            non_message_reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
                        try:
                            comment.author.message("NHLCompareBot Comparison " + comment.id, non_message_reddit_message)
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                        except Exception:
                            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                    failed_counter += 1
                    match = re.search(r"(\d+) (second|minute)s?", e.message.lower())
                    if match:
                        match = match.groups()
                        delay_time = int(match[0])
                        units = match[1]
                        if units == "minute":
                            delay_time = (delay_time * 60)
                        if last_wait_time == None or delay_time < last_wait_time or try_counter < max_reddit_retries:
                            last_wait_time = delay_time
                            if not (last_wait_time == None or delay_time < last_wait_time):
                                try_counter += 1
                            delay_step = 10
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(delay_time) + " seconds to allow us to chill")
                            time_to_wait = int(math.ceil(float(delay_time)/float(delay_step)))
                            for i in range(delay_time, 0, -time_to_wait):
                                logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                                time.sleep(time_to_wait)
                            logger.info("#" + str(threading.get_ident()) + "#   " + "0")
                            continue
                        elif not isinstance(comment_obj["reply"], Message):
                            try:
                                comment.author.message("NHLCompareBot Comparison " + comment.id, "We were unable to make the comment due to the rate limits :(. Please see the previous message for the comparison")
                                logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                            except Exception:
                                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                    elif not isinstance(comment_obj["reply"], Message):
                        try:
                            comment.author.message("NHLCompareBot Comparison " + comment.id, "We were unable to make the comment due to the rate limits :(. Please see the previous message for the comparison")
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                        except Exception:
                            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                
                if not (isinstance(comment_obj["reply"], Message) or not comment_obj["reply"]):
                    comment_obj["reply"].delete()
                    comment_obj["reply"] = None
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                break

            if not debug_mode:
                failed_counter = 0
                while(True):
                    try:
                        if reply_comment:
                            curr.execute("INSERT OR REPLACE INTO nhl VALUES (?,?,?,?,?,?,?,?);", (comment.id, reply_comment.id, comment.author.name, comment.subreddit.display_name if hasattr(comment, "subreddit") and comment.subreddit else "from_message", main_comment, was_successful, 0, round_value(time.time() * 1000)))
                        else:
                            curr.execute("INSERT OR REPLACE INTO nhl VALUES (?,?,?,?,?,?,?,?);", (comment.id, None, comment.author.name, comment.subreddit.display_name if hasattr(comment, "subreddit") and comment.subreddit else "from_message", main_comment, was_successful, 0, round_value(time.time() * 1000)))
                        break
                    except Exception:
                        failed_counter += 1
                        if failed_counter > max_request_retries:
                            raise

                    delay_step = 10
                    logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow db to chill")
                    time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
                    for i in range(retry_failure_delay, 0, -time_to_wait):
                        logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                        time.sleep(time_to_wait)
                    logger.info("#" + str(threading.get_ident()) + "#   " + "0")
            break
    else:
        logger.info("#" + str(threading.get_ident()) + "#   " + "SKIP: " +  comment.id)

def parse_comment_str(comment_str):
    input_str = re.sub(r"\s+", " ", comment_str).strip()
    input_str = unescape(input_str)
    input_str = input_str.replace("\\<", "<").replace("\\>", ">").replace("\\]", "]").replace("\\[", "[")
    input_str = re.sub(r"(?<!\\)(?:[*_^`]|[~]{2})", "", input_str)
    match = re.search(r"!\bnhlcompare\b\s*(?<!\\)<(.+?)(?<!\\)>(?:\s*(?<!\\)\[(.+?)(?<!\\)\](?!\s*\((http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\)))?", input_str, re.IGNORECASE)

    if not match:
        input_split = re.split(r"!\bnhlcompare\b", input_str, 1, re.IGNORECASE)
        input_str = "!nhlcompare <" + input_split[1].strip() + ">"
        match = re.search(r"!\bnhlcompare\b\s*(?<!\\)<(.+?)(?<!\\)>(?:\s*(?<!\\)\[(.+?)(?<!\\)\](?!\s*\((http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\)))?", input_str, re.IGNORECASE)
    if not match:
        raise CustomMessageException("No players in search!")

    return match

def handle_player_string(comment, player_type, last_updated, hide_table, comment_obj):
    match = parse_comment_str(comment)

    original_comment = match.group(0)

    names = re.split(r"(?<!\\)\,", match.group(1))

    remove_duplicates = False
    remove_duplicate_games = False
    extra_stats = set()

    try:
        sub_time_frames = match.group(2)
        parse_time_frames = []
        if sub_time_frames:
            sub_time_frames = re.split(r"(?<!\\)\,", unidecode.unidecode(sub_time_frames).lower().strip())
            for sub_time_frame in sub_time_frames:
                subb_time_frames = re.split(r"(?<!\\)\|", sub_time_frame.strip())
                sub_parsed_time_frames = []
                for sub_time_frame in subb_time_frames:
                    time_frames = re.split(r"(?<!\\)(?:\+|\bdiff\b)", sub_time_frame.strip())
                    add_type = "minus" if re.search(r"\bdiff\b", sub_time_frame.strip()) else "plus"
                    da_time_frames = []
                    for time_frame in time_frames:
                        time_start = None
                        time_end = None

                        og_time_str = time_frame
                        qualifiers = {}

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:sub-query|day-after-sub-query|day-before-sub-query|day-of-sub-query|game-after-sub-query|game-before-sub-query|season-sub-query|season-after-sub-query|season-before-sub-query|w|(?:playing|starting)-with|a|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|holidays?|dts|dates|arena|exact-arena|stadiun|exact-stadium|penalty-type|shot-on|on-ice-with|on-ice-against|assisted-on|assisted-with|points-with|assisted-by|primary-assisted-on|primary-assisted-with|primary-points-with|primary-assisted-by|hit-on|penalty-on|faceoff-against|fight-against|event-time|start-time):(?<!\\)\(.*?(?<!\\)\))", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("starting-"):
                                qualifier_str = qualifier_str.replace("starting-", "playing-", 1)
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })

                            if qualifier_str.startswith("w:"):
                                qual_str = "w:"
                                qual_type = "Playing With"
                            elif qualifier_str.startswith("playing-with:"):
                                qual_str = "playing-with:"
                                qual_type = "Playing With"
                            elif qualifier_str.startswith("a:"):
                                qual_str = "a:"
                                qual_type = "Playing Against"
                            elif qualifier_str.startswith("playing-against:"):
                                qual_str = "playing-against:"
                                qual_type = "Playing Against"
                            elif qualifier_str.startswith("prv-w:"):
                                qual_str = "prv-w:"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("previous-playing-with:"):
                                qual_str = "previous-playing-with:"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("prv-a:"):
                                qual_str = "playing-against:"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("previous-playing-against:"):
                                qual_str = "previous-playing-against:"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("upc-w:"):
                                qual_str = "playing-against:"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upcoming-playing-with:"):
                                qual_str = "upcoming-playing-with:"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upc-a:"):
                                qual_str = "upc-a:"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("upcoming-playing-against:"):
                                qual_str = "upcoming-playing-against:"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("playing-same-opponent:"):
                                qual_str = "playing-same-opponent:"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-opponents:"):
                                qual_str = "playing-same-opponents:"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-date:"):
                                qual_str = "playing-same-date:"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("playing-same-dates:"):
                                qual_str = "playing-same-dates:"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("arena:"):
                                qual_str = "arena:"
                                qual_type = "Arena"
                            elif qualifier_str.startswith("exact-arena:"):
                                qual_str = "exact-arena:"
                                qual_type = "Exact Arena"
                            elif qualifier_str.startswith("stadium:"):
                                qual_str = "stadium:"
                                qual_type = "Arena"
                            elif qualifier_str.startswith("exact-stadium:"):
                                qual_str = "exact-stadium:"
                                qual_type = "Exact Arena"
                            elif qualifier_str.startswith("penalty-type:"):
                                qual_str = "penalty-type:"
                                qual_type = "Penalty Type"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Penalty On")
                                extra_stats.add("penalties")
                            elif qualifier_str.startswith("shot-on:"):
                                qual_str = "shot-on:"
                                qual_type = "Shot On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Shot On")
                            elif qualifier_str.startswith("on-ice-with:"):
                                qual_str = "on-ice-with:"
                                qual_type = "On Ice With"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("on-ice-against:"):
                                qual_str = "on-ice-against:"
                                qual_type = "On Ice Against"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("assisted-on:"):
                                qual_str = "assisted-on:"
                                qual_type = "Assisted On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("assisted-with:"):
                                qual_str = "assisted-with:"
                                qual_type = "Assisted With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("points-with:"):
                                qual_str = "points-with:"
                                qual_type = "Points With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Points On")
                            elif qualifier_str.startswith("assisted-by:"):
                                qual_str = "assisted-by:"
                                qual_type = "Assisted By"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted By")
                            elif qualifier_str.startswith("primary-assisted-on:"):
                                qual_str = "primary-assisted-on:"
                                qual_type = "Primary Assisted On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("primary-assisted-with:"):
                                qual_str = "primary-assisted-with:"
                                qual_type = "Primary Assisted With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("primary-points-with:"):
                                qual_str = "primary-points-with:"
                                qual_type = "Primary Points With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Points On")
                            elif qualifier_str.startswith("primary-assisted-by:"):
                                qual_str = "primary-assisted-by:"
                                qual_type = "Primary Assisted By"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted By")
                            elif qualifier_str.startswith("hit-on:"):
                                qual_str = "hit-on:"
                                qual_type = "Hit On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Hit On")
                            elif qualifier_str.startswith("block-on:"):
                                qual_str = "block-on:"
                                qual_type = "Block On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("block On")
                            elif qualifier_str.startswith("penalty-on:"):
                                qual_str = "penalty-on:"
                                qual_type = "Penalty On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Penalty On")
                                extra_stats.add("penalties")
                            elif qualifier_str.startswith("faceoff-against:"):
                                qual_str = "faceoff-against:"
                                qual_type = "Faceoff Against"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Faceoff Against")
                            elif qualifier_str.startswith("fight-against:"):
                                qual_str = "fight-against:"
                                qual_type = "Fight Against"
                                extra_stats.add("Fight Against")
                                extra_stats.add("penalties")
                            elif qualifier_str.startswith("holiday:"):
                                qual_str = "holiday:"
                                qual_type = "Holiday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str.startswith("holidays:"):
                                qual_str = "holidays:"
                                qual_type = "Holiday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str.startswith("dts:"):
                                qual_str = "dts:"
                                qual_type = "Dates"
                            elif qualifier_str.startswith("dates:"):
                                qual_str = "dates:"
                                qual_type = "Dates"
                            elif qualifier_str.startswith("playing-same-game:"):
                                qual_str = "playing-same-game:"
                                qual_type = "Playing Same Game"
                            elif qualifier_str.startswith("sub-query:"):
                                qual_str = "sub-query:"
                                qual_type = "Sub Query"
                            elif qualifier_str.startswith("day-of-sub-query:"):
                                qual_str = "day-of-sub-query:"
                                qual_type = "Day Of Sub Query"
                            elif qualifier_str.startswith("day-after-sub-query:"):
                                qual_str = "day-after-sub-query:"
                                qual_type = "Day After Sub Query"
                            elif qualifier_str.startswith("day-before-sub-query:"):
                                qual_str = "day-before-sub-query:"
                                qual_type = "Day Before Sub Query"
                            elif qualifier_str.startswith("game-after-sub-query:"):
                                qual_str = "game-after-sub-query:"
                                qual_type = "Game After Sub Query"
                            elif qualifier_str.startswith("game-before-sub-query:"):
                                qual_str = "game-before-sub-query:"
                                qual_type = "Game Before Sub Query"
                            elif qualifier_str.startswith("season-sub-query:"):
                                qual_str = "season-sub-query:"
                                qual_type = "Season Sub Query"
                            elif qualifier_str.startswith("season-after-sub-query:"):
                                qual_str = "season-after-sub-query:"
                                qual_type = "Season After Sub Query"
                            elif qualifier_str.startswith("season-before-sub-query:"):
                                qual_str = "season-before-sub-query:"
                                qual_type = "Season Before Sub Query"
                            elif qualifier_str.startswith("event-time:") or qualifier_str.startswith("start-time:"):
                                if qualifier_str.startswith("event-time:"):
                                    qual_str = "event-time:"
                                    qual_type = "Event Time"
                                    extra_stats.add("current-stats-zone")
                                elif qualifier_str.startswith("start-time:"):
                                    qual_str = "start-time:"
                                    qual_type = "Start Time"

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1].strip("()"))

                                time_zones = {
                                    "CDT" : "US/Central",
                                    "CST" : "US/Central",
                                    "EST" : "US/Eastern",
                                    "EDT" : "US/Eastern",
                                    "MDT" : "US/Mountain",
                                    "MST" : "US/Mountain",
                                    "PDT" : "US/Pacific",
                                    "PST" : "US/Pacific",
                                    "ET" : "US/Eastern",
                                    "CT" : "US/Central",
                                    "MT" : "US/Mountain",
                                    "PT" : "US/Pacific"
                                }
                                time_zone = None
                                last_val = split_vals[len(split_vals) - 1]
                                for index, split_val in enumerate(split_vals):
                                    for key in time_zones:
                                        if split_val.upper().endswith(key):
                                            time_zone = time_zones[key]
                                            split_vals[index] = split_vals[index][:-(len(key))].strip()
                                            break
                                if not time_zone:
                                    time_zone = "US/Eastern"
                                
                                if len(split_vals) == 1:
                                    the_date = dateutil.parser.parse(split_vals[0]).time()
                                    the_date_2 = dateutil.parser.parse(split_vals[0]).time()
                                    if split_vals[0].count(":") == 0:
                                        the_date_2 = the_date_2.replace(minute=59).replace(second=59)
                                    elif split_vals[0].count(":") == 1:
                                        the_date_2 = the_date_2.replace(second=59)
                                    qualifier_obj["values"] = {
                                        "start_val" : the_date,
                                        "end_val" : the_date_2,
                                        "time_zone" : time_zone
                                    }
                                else:
                                    start_date = None
                                    end_date = None
                                    if split_vals[0] == "min" and split_vals[1] == "max":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = datetime.time(23, 59, 59)
                                    elif split_vals[0] == "min":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = dateutil.parser.parse(split_vals[1]).time()
                                    elif split_vals[1] == "max":
                                        start_date = dateutil.parser.parse(split_vals[0]).time()
                                        end_date = datetime.time(23, 59, 59)
                                    else:
                                        start_date = dateutil.parser.parse(split_vals[0]).time()
                                        end_date = dateutil.parser.parse(split_vals[1]).time()

                                    qualifier_obj["values"] = {
                                        "start_val" : start_date,
                                        "end_val" : end_date,
                                        "time_zone" : time_zone
                                    }
                                
                                qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"].replace(microsecond=0)
                                qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"].replace(microsecond=0)
                            
                            if not qual_type in ["Event Time", "Start Time"]:
                                qualifier_obj["values"] = re.split(r"(?<!\\)\~", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1].strip("()"))
                                qualifier_obj["values"] = [value.strip() for value in qualifier_obj["values"]]

                            if qual_type == "Dates":
                                new_values = []
                                for value in qualifier_obj["values"]:
                                    replace_first_year = {
                                        "replace" : False
                                    }

                                    if "to" in value:
                                        dates = re.split(r"(?<!\\)to", value)
                                        date1 = dateutil.parser.parse(dates[0].strip()).date()
                                        date2 = dateutil.parser.parse(dates[1].strip()).date()
                                        new_values = [date1 + datetime.timedelta(days=x) for x in range((date2-date1).days + 1)]
                                        date1 = handle_string_year(dates[0], playoffs, True, replace_first_year)
                                        date2 = handle_string_year(dates[1], playoffs, False, replace_first_year)
                                        new_values.append({
                                            "start_val" : date1,
                                            "end_val" : date2,
                                        })
                                    else:
                                        new_values.append(dateutil.parser.parse(value).date())
                                        date1 = handle_string_year(value, playoffs, True, replace_first_year)
                                        new_values.append({
                                            "start_val" : date1,
                                            "end_val" : date1,
                                        })
                                qualifier_obj["values"] = new_values

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(career(?: |-)?(year|season|game|team|franchise|number))s?\b", time_frame)
                        for m in last_match:
                            if m.group(1) == "career-season":
                                extra_stats.add("career-year")
                            else:
                                extra_stats.add(m.group(1))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(hide(?: |-)?table)\(.+?\)", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1].strip("()")):
                                extra_stats.add("hide-table-" + stat.strip())
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        time_frame = re.sub(r"\s+", " ", re.sub(r"(?:career|regular(?: | -)?season)(?!-)", "", time_frame)).strip()

                        time_frame = re.sub(r"tables?", "", time_frame).strip()
                        time_frame, is_image = re.subn(r"images?", "", time_frame)
                        if is_image:
                            time_frame = time_frame.strip()
                            hide_table = True
                        
                        last_match = re.search(r"\bremove[-\s]duplicate-games?\b", time_frame)
                        if last_match:
                            remove_duplicate_games = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_match = re.search(r"\bremove[-\s]duplicates?\b", time_frame)
                        if last_match:
                            remove_duplicates = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(seasons-leading)s?:(\S+)-(\S+)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1) + "-" + str(ordinal_to_number(m.group(2))) + "-" + str(str(ordinal_to_number(m.group(3)))))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(best-season|worst-season|seasons-leading)s?:(\S+)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1) + "-" + str(ordinal_to_number(m.group(2))))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\bshow(?: |-)?(record|score|goal|year|seasons-leading|season|date|game|adjusted|advanced|missing-game|missing-toi|best-season|worst-season|ng|team|franchise|number|fight|penaltie|penalty|award|toi|shot|star|play)s?\b", time_frame)
                        for m in last_match:
                            if "penalt" in m.group(1) or m.group(1) == "fight":
                                extra_stats.add("penalties")
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                            elif m.group(1) == "season":
                                extra_stats.add("year")
                            else:
                                extra_stats.add(m.group(1))
                                if m.group(1) == "play":
                                    extra_stats.add("current-stats")
                                elif m.group(1) == "advanced":
                                    extra_stats.add("current-stats")
                                elif m.group(1) == "goal":
                                    extra_stats.add("score")
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                                                
                        last_match = re.finditer(r"\bhide(?: |-)?(name|year|season|date|query|queries)s?\b", time_frame)
                        for m in last_match:
                            if m.group(1) == "date" or m.group(1) == "season":
                                extra_stats.add("hide-year")
                            elif m.group(1).startswith("quer"):
                                extra_stats.add("hide-query")
                            else:
                                extra_stats.add("hide-" + m.group(1))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(show(?: |-)?stat:)\(.+?\)", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1].strip("()")):
                                extra_stats.add("show-stat-" + stat.strip())
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(hide(?: |-)?stat:)\(.+?\)", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1].strip("()")):
                                extra_stats.add("hide-stat-" + stat.strip())
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        playoffs = None
                        last_match = re.search(r"\b(no(?:t|n)? ?)?-?(?:includes?|including|and|with)(?: |-)?(?:playoffs?|post-?seasons?)(?!-)\b", time_frame)
                        if last_match:
                            playoff_match_str = last_match.group(1)
                            if playoff_match_str:
                                playoffs = "No"
                            else:
                                playoffs = "Include"
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        else:
                            last_match = re.search(r"\b(no(?:t|n)? ?)?-?(?:playoffs?|post-?seasons?)(?!-)\b", time_frame)
                            if last_match:
                                playoff_match_str = last_match.group(1)
                                if playoff_match_str:
                                    playoffs = "No"
                                else:
                                    playoffs = "Only"
                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:(?:playing|starting)-with|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|shot-on|on-ice-with|on-ice-against|assisted-on|assisted-with|points-with|assisted-by|primary-assisted-on|primary-assisted-with|primary-points-with|primary-assisted-by|hit-on|block-on|penalty-on|faceoff-against|fight-against))\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("starting-"):
                                qualifier_str = qualifier_str.replace("starting-", "playing-", 1)
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })

                            if qualifier_str.startswith("playing-with"):
                                qual_str = "playing-with"
                                qual_type = "Playing With"
                            elif qualifier_str.startswith("playing-against"):
                                qual_str = "playing-against"
                                qual_type = "Playing Against"
                            elif qualifier_str.startswith("prv-w"):
                                qual_str = "prv-w"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("previous-playing-with"):
                                qual_str = "previous-playing-with"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("prv-a"):
                                qual_str = "playing-against"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("previous-playing-against"):
                                qual_str = "previous-playing-against"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("upc-w"):
                                qual_str = "playing-against"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upcoming-playing-with"):
                                qual_str = "upcoming-playing-with"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upc-a"):
                                qual_str = "upc-a"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("upcoming-playing-against"):
                                qual_str = "upcoming-playing-against"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("playing-same-opponent"):
                                qual_str = "playing-same-opponent"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-opponents"):
                                qual_str = "playing-same-opponents"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-date"):
                                qual_str = "playing-same-date"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("playing-same-dates"):
                                qual_str = "playing-same-dates"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("shot-on"):
                                qual_str = "shot-on"
                                qual_type = "Shot On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Shot On")
                            elif qualifier_str.startswith("on-ice-with"):
                                qual_str = "on-ice-with"
                                qual_type = "On Ice With"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("on-ice-against"):
                                qual_str = "on-ice-against"
                                qual_type = "On Ice Against"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("assisted-on"):
                                qual_str = "assisted-on"
                                qual_type = "Assisted On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("assisted-with"):
                                qual_str = "assisted-with"
                                qual_type = "Assisted With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("points-with"):
                                qual_str = "points-with"
                                qual_type = "Points With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Points On")
                            elif qualifier_str.startswith("assisted-by"):
                                qual_str = "assisted-by:"
                                qual_type = "Assisted By"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted By")
                            elif qualifier_str.startswith("primary-assisted-on"):
                                qual_str = "primary-assisted-on"
                                qual_type = "Primary Assisted On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("primary-assisted-with"):
                                qual_str = "primary-assisted-with"
                                qual_type = "Primary Assisted With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted On")
                            elif qualifier_str.startswith("primary-points-with"):
                                qual_str = "primary-points-with"
                                qual_type = "Primary Points With"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Points On")
                            elif qualifier_str.startswith("primary-assisted-by"):
                                qual_str = "primary-assisted-by"
                                qual_type = "Primary Assisted By"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Assisted By")
                            elif qualifier_str.startswith("hit-on"):
                                qual_str = "hit-on"
                                qual_type = "Hit On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Hit On")
                            elif qualifier_str.startswith("block-on"):
                                qual_str = "block-on"
                                qual_type = "Block On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Block On")
                            elif qualifier_str.startswith("penalty-on"):
                                qual_str = "penalty-on"
                                qual_type = "Penalty On"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Penalty On")
                                extra_stats.add("penalties")
                            elif qualifier_str.startswith("faceoff-against"):
                                qual_str = "faceoff-against"
                                qual_type = "Faceoff Against"
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                                extra_stats.add("Faceoff Against")
                            elif qualifier_str.startswith("fight-against"):
                                qual_str = "fight-against"
                                qual_type = "Fight Against"
                                extra_stats.add("Fight Against")
                                extra_stats.add("penalties")
                            elif qualifier_str.startswith("playing-same-game"):
                                qual_str = "playing-same-game:"
                                qual_type = "Playing Same Game"
                            
                            qualifier_obj["time_frame_str"] = re.sub(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:(?:playing|starting)-with|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|shot-on|on-ice-with|on-ice-against|assisted-on|assisted-with|points-with|assisted-by|primary-assisted-on|primary-assisted-with|primary-points-with|primary-assisted-by|hit-on|block-on|penalty-on|faceoff-against|fight-against|-?starts?|-?started|-?starting|-?ignore-starts?|-?ignore-started?|-?ignore-starting|start-if-goalie))\b", "", og_time_str)

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:formula|season-formula|event-formula|max-streak-formula|count-streak-formula):\{.+?\})", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("formula:"):
                                qual_str = "formula:"
                                qual_type = "Formula"
                            elif qualifier_str.startswith("season-formula:"):
                                qual_str = "season-formula:"
                                qual_type = "Season Formula"
                            elif qualifier_str.startswith("max-streak-formula:"):
                                qual_str = "max-streak-formula:"
                                qual_type = "Max Streak Formula"
                            elif qualifier_str.startswith("count-streak-formula:"):
                                qual_str = "count-streak-formula:"
                                qual_type = "Count Streak Formula"
                            elif qualifier_str.startswith("event-formula:"):
                                qual_str = "event-formula:"
                                qual_type = "Event Formula"

                            formula = unescape_string(re.split(r"(?<!\\)" + qual_str, qualifier_str)[1].strip("\{\}"))
                            if "Streak" in qual_type:
                                qualifier_obj["values"] = [{
                                    "start_level" : 1,
                                    "end_level" : 1,
                                    "stat_quals" : None,
                                    "time_frame" : None,
                                    "stats" : [{
                                        "stat" : formula,
                                        "start_val" : 1,
                                        "end_val" : 1,
                                    }]
                                }]
                            else:
                                qualifier_obj["values"] = [formula]

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?(\d+v\d+)\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            qual_type = "Strength"
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)

                            strength_split = qualifier_str.split('v')

                            qualifier_obj["values"] = {
                                "team_skaters" : int(strength_split[0]),
                                "opp_skaters" : int(strength_split[1])
                            }

                            extra_stats.add("current-stats")
                            
                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"(no(?:t|n)?(?: |-))?(?:only ?)?(before|after|exact)? *(?:season-)?age:? *(?:(\d+)(y|m|d)?)(?:(\d+)(y|m|d)?)?(?:(\d+)(y|m|d)?)?(?:-(?:(\d+)(y|m|d)?)(?:(\d+)(y|m|d)?)?(?:(\d+)(y|m|d)?)?)?", time_frame)
                        for m in last_match:
                            qualifier_obj = {}

                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            compare_type = m.group(2)

                            days = 0
                            years = 0
                            months = 0
                            days_2 = 0
                            years_2 = 0
                            months_2 = 0

                            date_1 = m.group(3)
                            unit_1 = m.group(4)
                            date_2 = m.group(5)
                            unit_2 = m.group(6)
                            date_3 = m.group(7)
                            unit_3 = m.group(8)
                            date_1_2 = m.group(9)
                            unit_1_2 = m.group(10)
                            date_2_2 = m.group(11)
                            unit_2_2 = m.group(12)
                            date_3_2 = m.group(13)
                            unit_3_2 = m.group(14)

                            if date_1:
                                if unit_1 == "d":
                                    days = int(date_1)
                                elif unit_1 == "m":
                                    months = int(date_1)
                                else:
                                    years = int(date_1)

                            if date_2:
                                if unit_2 == "d":
                                    days = int(date_2)
                                elif unit_2 == "m":
                                    months = int(date_2)
                                else:
                                    years = int(date_2)

                            if date_3:
                                if unit_3 == "d":
                                    days = int(date_3)
                                elif unit_3 == "m":
                                    months = int(date_3)
                                else:
                                    years = int(date_3)

                            second_match = False
                            if date_1_2 or date_2_2 or date_3_2:
                                second_match = True
                                if date_1_2:
                                    if unit_1_2 == "d":
                                        days_2 = int(date_1_2)
                                    elif unit_1_2 == "m":
                                        months_2 = int(date_1_2)
                                    else:
                                        years_2 = int(date_1_2)

                                if date_2_2:
                                    if unit_2_2 == "d":
                                        days_2 = int(date_2_2)
                                    elif unit_2 == "m":
                                        months_2 = int(date_2_2)
                                    else:
                                        years_2 = int(date_2_2)

                                if date_3_2:
                                    if unit_3_2 == "d":
                                        days_2 = int(date_3_2)
                                    elif unit_3 == "m":
                                        months_2 = int(date_3_2)
                                    else:
                                        years_2 = int(date_3_2)

                            
                            if not compare_type or not compare_type.strip():
                                if second_match:
                                    qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years_2, months=months_2, days=days_2)
                                else:
                                    qualifier_obj["time_unit_start"] = datetime.date.min
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                            elif compare_type.startswith("after"):
                                qualifier_obj["time_unit_end"] = datetime.date.max
                                qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                            elif compare_type.startswith("exact"):
                                qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                qualifier_obj["time_unit_start"] = qualifier_obj["time_unit_start"]
                            else:
                                qualifier_obj["time_unit_start"] = datetime.date.min
                                if "season-age" in m.group(0):
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years - 1, months=months, days=days)
                                else:
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days - 1)

                            compare_str = compare_type.title() + " " if compare_type else ""
                
                            if years:
                                compare_str += str(years) + "Y-"
                            if months:
                                compare_str += str(months) + "M-"
                            if days:
                                compare_str += str(days) + "D-"
                            qualifier_obj["compare_str"] = compare_str[:-1]

                            if not compare_type and second_match:
                                qualifier_obj["compare_str"] += " to "
                                if years_2:
                                    qualifier_obj["compare_str"] += str(years_2) + "Y-"
                                if months_2:
                                    qualifier_obj["compare_str"] += str(months_2) + "M-"
                                if days_2:
                                    qualifier_obj["compare_str"] += str(days_2) + "D-"
                                qualifier_obj["compare_str"] = qualifier_obj["compare_str"][:-1]
                                
                            qual_type = "Season Age" if "season-age" in m.group(0) else "Age"

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((\S+)-(period)s?)\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False
                            
                            qualifier_str = m.group(4)
                            if qualifier_str == "period":
                                qual_type = "Period"
                                extra_stats.add("current-stats")

                            value = ordinal_to_number(m.group(3))

                            if isinstance(value, int):
                                qualifier_obj["values"] = {
                                    "start_val" : value,
                                    "end_val" : value
                                }

                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?(current-season-age|first-minutes?|current-minutes?|first-shots?|current-shots?|first-games?|current-games?|first-seasons?|current-seasons?|last-minutes?|last-shots?|last-games?|last-seasons?|first-starts?|last-starts?|start-if-goalie|decision|current-age|rook|rookie|facing-former-franchise|facing-former-team|even-year|odd-year|interconference|intraconference|interdivision|intradivision|complete-games?|current-winning-opponents?|current-losing-opponents?|current-tied-opponents?|current-winning-or-tied-opponents?|current-losing-or-tied-opponents?|winning-opponents?|losing-opponents?|winning-or-tied-opponents?|losing-or-tied-opponents?|tied-opponents?|playoff-opponents?|cup-winner-opponent|conf-winner-opponent|current-winning-teams?|current-losing-teams?|current-tied-teams?|current-winning-or-tied-teams?|current-losing-or-tied-teams?|winning-teams?|losing-teams?|tied-teams?|winning-or-tied-teams?|losing-or-tied-teams?|playoff-teams?|cup-winner-team|conf-winner-team|penalty-shot|shootout|overtime|game-winning|offensive-zone|defensive-zone|neutral-zone|unassisted|even-skaters|team-goalie-pulled|opponent-goalie-pulled|more-skaters|less-skaters|power-play|short-handed|even-strength|elimination-or-clinching|clinching-or-elimination|elimination(?:-games?)?|eliminating(?:-games?)?|clinching(?:-games?)?|clinch(?:-games?)?|winner-take-all|behind-in-series|ahead-in-series|even-in-series|(?:nhl(?: |-))?(?:finals?|championship)|stanley(?: |-)cup|stanley|cup|sc|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?(?:league|conference)(?:(?: |-)finals?|(?: |-)championship)|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?cf|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?second(?: |-)round|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?sr|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?(?:league|conference) semi-?finals?|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?cs|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?first round|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?fr|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?(?:league|conference) quarter-?finals?|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?cq|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?qr|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?qualify(?:ing|er)?(?:(?: |-)round)?|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?pr|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?play(?:-| )?in(?:(?: |-)round)?|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?rr|(?:(?:(?:eastern|e|western|w|campbell|cb|wales|wl)(?:(?: |-)league)?)(?: |-)?)?(?:round )?robin|force-dates|first-half|second-half|pre-all-star|post-all-star|t:[\w-]+|o:[\w-]+|m:[\w-]+|d:[\w-]+|dt:[\w-]+|team-franchise:[\w-]+|opponent-franchise:[\w-]+|franchise:[\w-]+|tf:[\w-]+|of:[\w-]+|f:[\w-]+|team:[\w-]+|opponent:[\w-]+|tv-network:[\w-]+|raw-tv-network:[\w-]+|national-tv-network:[\w-]+|national-raw-tv-network:[\w-]+|any-national-tv-network:[\w-]+|any-national-raw-tv-network:[\w-]+|any-us-national-game|us-national-game|any-ca-national-game|ca-national-game|any-national-game|national-game|month:[\w-]+|day:[\w-]+|date:[\w-]+|series-game:[\w-]+|gm:[\w-]+|game:[\w-]+|season-gm:[\w-]+|season-game:[\w-]+|season:[\w-]+|season-reversed:[\w-]+|crgm:[\w-]+|career-game-reversed:[\w-]+|team-game-reversed:[\w-]+|season-game-reversed:[\w-]+|game-reversed:[\w-]+|career-game:[\w-]+|tmgm:[\w-]+|team-game:[\w-]+|game-number:[\w-]+|season-number:[\w-]+|number:[\w-]+|dr:[\w-]+|starts-days-rest:[\w-]+|days-rest:[\w-]+|prv-dr:[\w-]+|previous-days-rest:[\w-]+|upc-dr:[\w-]+|upcoming-starts-days-rest:[\w-]+|upcoming-days-rest:[\w-]+|gr:[\w-]+|games-rest:[\w-]+|starts-rest:[\w-]+|prv-gr:[\w-]+|-?starts?|-?started|-?starting|-?ignore-starts?|-?ignore-started?|-?ignore-starting|previous-games-rest:[\w-]+|upc-gr:[\w-]+|upcoming-games-rest:[\w-]+|days-in-a-row:[\w-]+|games-in-a-row:[\w-]+|starts-in-a-row:[\w-]+|prv-t:[\w-]+|prv-o:[\w-]+|upc-t:[\w-]+|upc-o:[\w-]+|upcoming-same-opponent|previous-same-opponent|previous-franchise:[\w-]+|previous-team-franchise:[\w-]+|previous-opponent-franchise:[\w-]+|upcoming-franchise:[\w-]+|upcoming-team-franchise:[\w-]+|upcoming-opponent-franchise:[\w-]+|previous-team:[\w-]+|previous-opponent:[\w-]+|upcoming-team:[\w-]+|upcoming-opponent:[\w-]+|score:[\S-]+|final-score:[\S-]+|previous-score:[\S-]+|upcoming-score:[\S-]+|final-team-score:[\w-]+|final-opponent-score:[\w-]+|final-score-margin:[\S-]+|final-score-difference:[\S-]+|team-score:[\w-]+|opponent-score:[\w-]+|score-margin:[\S-]+|score-difference:[\S-]+|period:[\w-]+|coordinates:[\S-]+|exact-coordinates:[\S-]+|team-skaters:[\w-]+|opponent-skaters:[\w-]+|team-players:[\w-]+|opponent-players:[\w-]+|period-time-remaining:[\S-]+|period-time:[\S-]+|season-st:[\S-]+|period-stat:[\S-]+|season-stat:[\S-]+|season-prv-st:[\S-]+|season-previous-stat:[\S-]+|season-upc-st:[\S-]+|season-upcoming-stat:[\S-]+|st:[\S-]+|stat:[\S-]+|prv-st:[\S-]+|previous-stat:[\S-]+|upc-st:[\S-]+|upcoming-stat:[\S-]+|min-st:[\S-]+|min-stat:[\S-]+|max-st:[\S-]+|max-stat:[\S-]+|totalgames-st:[\S-]+|totalgames-stat:[\S-]+|max-str:[\S-]+|max-streak:[\S-]+|max-stretch:[\S-]+|ctn-str:[\S-]+|count-streak:[\S-]+|q:[\S-]+|quickest:[\S-]+|s:[\S-]+|slowest:[\S-]+|with-new-team|with-new-franchise|summer|spring|winter|fall|autumn|away|home|road|previous-away|previous-home|previous-road|upcoming-away|upcoming-home|upcoming-road|win(?:s)?|loss(?:es)?|tie(?:es)?|w-ot|w-so|l-ot|l-so|so|ot|w|l|t|prv-w|prv-l|prv-t|prv-w-ot|prv-w-so|prv-l-ot|prv-l-so|prv-so|prv-ot|upc-w|upc-l|upc-t|upc-w-ot|upc-w-so|upc-l-ot|upc-l-so|upc-so|upc-ot|previous-win(?:s)?|previous-loss(?:es)?|previous-tie(?:es)|upcoming-win(?:s)?|upcoming-loss(?:es)?|upcoming-tie(?:es)|prv-t-w|prv-t-l|prv-t-t|prv-t-w-ot|prv-t-w-so|prv-t-l-ot|prv-t-l-so|prv-t-so|prv-t-ot|upc-t-w|upc-t-l|upc-t-t|upc-t-w-ot|upc-t-w-so|upc-t-l-ot|upc-t-l-so|upc-t-so|upc-t-ot|previous-team-win(?:s)?|previous-team-loss(?:es)?|previous-team-tie(?:es)|upcoming-team-win(?:s)?|upcoming-team-loss(?:es)?|upcoming-team-tie(?:es)|series-team-wins:[\w-]+|series-opponent-wins:[\w-]+|series-score-margin:[\S-]+|series-score-difference:[\S-]+|series-score:[\w-]+|current-team-wins:[\w-]+|current-team-losses:[\w-]+|current-team-ties:[\w-]+|current-team-points:[\w-]+|current-team-games-over-500:[\S-]+|current-opponent-wins:[\w-]+|current-opponent-losses:[\w-]+|current-opponent-ties:[\w-]+|current-opponent-points:[\w-]+|current-opponent-games-over-500:[\S-]+|team-wins:[\w-]+|team-losses:[\w-]+|team-ties:[\w-]+|team-points:[\w-]+|team-games-over-500:[\S-]+|opponent-wins:[\w-]+|opponent-losses:[\w-]+|opponent-ties:[\w-]+|opponent-points:[\w-]+|opponent-games-over-500:[\S-]+|opponent-goals?-rank:[\S-]+|opponent-standings-rank:[\S-]+|opponent-goals?-allowed-rank:[\S-]+|current-opponent-win(?:ning)?-percent:[\S-]+|opponent-win(?:ning)?-percent:[\S-]+|current-opponent-points-percent:[\S-]+|opponent-points-percent:[\S-]+|team-goals?-rank:[\S-]+|team-standings-rank:[\S-]+|team-goals?-allowed-rank:[\S-]+|years?:[\w-]+|current-team-win(?:ning)?-percent:[\S-]+|team-win(?:ning)?-percent:[\S-]+|current-team-points-percent:[\S-]+|team-points-percent:[\S-]+|early-?afternoon|late-?afternoon|morning|early|afternoon|day|night(?:time)?|late|team-conference:[\S-]+|opponent-conference:[\S-]+|team-division:[\S-]+|opponent-division:[\S-]+|birthda(?:y|te)|skat(?:(?:er)|(?:ing))|goalie|skater|" + all_months_re + r"|" + all_days_re + r")\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            og_qual_str = qualifier_str
                            league_qual_obj = None
                            if qualifier_str.startswith("campbell") or qualifier_str.startswith("cb") or qualifier_str.startswith("wales") or qualifier_str.startswith("wl") or qualifier_str.startswith("eastern") or qualifier_str.startswith("e") or qualifier_str.startswith("western") or qualifier_str.startswith("w"):
                                if qualifier_str.startswith("campbell") or qualifier_str.startswith("cb"):
                                    league_team_league = "clarence campbell"
                                elif qualifier_str.startswith("wales") or qualifier_str.startswith("wl"):
                                    league_team_league = "prince of wales"
                                elif qualifier_str.startswith("eastern") or qualifier_str.startswith("e"):
                                    league_team_league = "eastern"
                                elif qualifier_str.startswith("western") or qualifier_str.startswith("w"):
                                    league_team_league = "western"

                                league_qual_obj = {}
                                league_qual_obj["negate"] = qualifier_obj["negate"]
                                league_qual_obj["values"] = [league_team_league]

                                if qualifier_str.startswith("eastern") or qualifier_str.startswith("western") or qualifier_str.startswith("campbell"):
                                    qualifier_str = qualifier_str[8:].strip()
                                elif qualifier_str.startswith("wales"):
                                    qualifier_str = qualifier_str[5:].strip()
                                elif qualifier_str.startswith("cb") or qualifier_str.startswith("wl"):
                                    qualifier_str = qualifier_str[2:].strip()
                                else:
                                    qualifier_str = qualifier_str[1:].strip()

                                if qualifier_str.startswith("-"):
                                    qualifier_str = qualifier_str[1:]

                            qual_type = None
                            if not qualifier_str.endswith("-opponent") and not qualifier_str.endswith("-team"):
                                if ("stanley" in qualifier_str or "cup" in qualifier_str):
                                    qualifier_str = "sc"
                                elif "final" in qualifier_str or "championship" in qualifier_str:
                                    if "quarter" in qualifier_str:
                                        qualifier_str = "cq"
                                    elif "semi" in qualifier_str:
                                        qualifier_str = "cs"
                                    elif "league" in qualifier_str or "conference" in qualifier_str:
                                        qualifier_str = "cf"
                                    else:
                                        qualifier_str = "sc"
                                elif qualifier_str == "fr" or qualifier_str == "first round" or qualifier_str == "first-round":
                                    qualifier_str = "cq"
                                elif qualifier_str == "sr" or qualifier_str == "second round" or qualifier_str == "second-round":
                                    qualifier_str = "cs"
                                elif "qualify" in qualifier_str:
                                    qualifier_str = "qr"
                                elif "play-in" in qualifier_str or "play in" in qualifier_str or "playin" in qualifier_str:
                                    qualifier_str = "pr"
                                elif "robin" in qualifier_str:
                                    qualifier_str = "rr"
                            
                            if not (qualifier_str == "sc" or qualifier_str == "cf" or qualifier_str == "cs" or qualifier_str == "cq" or qualifier_str == "qr" or qualifier_str == "pr" or qualifier_str == "rr"):
                                qualifier_str = og_qual_str

                            if qualifier_str == "sc" or qualifier_str == "cf" or qualifier_str == "cs" or qualifier_str == "cq" or qualifier_str == "qr" or qualifier_str == "pr" or qualifier_str == "rr":
                                qual_type = "Round"
                                if not playoffs:
                                    playoffs = "Only"
                                qualifier_obj["values"] = [qualifier_str]

                                if league_qual_obj:
                                    if not "Team Conference" in qualifiers:
                                        qualifiers["Team Conference"] = []
                                    qualifiers["Team Conference"].append(league_qual_obj)
                            elif qualifier_str == "with-new-team":
                                qual_type = "With New Team"
                            elif qualifier_str == "with-new-franchise":
                                qual_type = "With New Franchise"
                            elif qualifier_str.startswith("previous-same-opponent"):
                                qual_str = "previous-same-opponent"
                                qual_type = "Previous Same Opponent"
                            elif qualifier_str.startswith("upcoming-same-opponent"):
                                qual_str = "upcoming-same-opponent"
                                qual_type = "Upcoming Same Opponent"
                            elif qualifier_str == "winter" or qualifier_str == "spring" or qualifier_str == "summer" or qualifier_str == "fall" or qualifier_str == "autumn":
                                qual_type = "Temperate Season"
                                if qualifier_str == "autumn":
                                    qualifier_obj["values"] = ["Fall"]
                                else:
                                    qualifier_obj["values"] = [qualifier_str.title()]
                            elif qualifier_str == "away" or qualifier_str == "road" or qualifier_str == "home" or qualifier_str == "a" or qualifier_str == "r" or qualifier_str == "h" or qualifier_str == "previous-away" or qualifier_str == "previous-road" or qualifier_str == "previous-home" or qualifier_str == "upcoming-away" or qualifier_str == "upcoming-road" or qualifier_str == "upcoming-home" or qualifier_str == "prv-a" or qualifier_str == "prv-r" or qualifier_str == "prv-h" or qualifier_str == "upc-a" or qualifier_str == "upc-r" or qualifier_str == "upc-h"  or qualifier_str.startswith("morning") or qualifier_str.startswith("early") or qualifier_str == "day" or qualifier_str.startswith("afternoon") or qualifier_str.startswith("night") or qualifier_str.startswith("late"):
                                if qualifier_str == "away":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "road":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "home":
                                    qual_val = "home"
                                    qual_type = "Location"
                                elif qualifier_str == "a":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "r":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier_str == "h":
                                    qual_val = "home"
                                    qual_type = "Location"
                                elif qualifier_str == "previous-away":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "previous-road":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "previous-home":
                                    qual_val = "home"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "upcoming-away":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upcoming-road":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upcoming-home":
                                    qual_val = "home"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "prv-a":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "prv-r":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "prv-h":
                                    qual_val = "home"
                                    qual_type = "Previous Location"
                                elif qualifier_str == "upc-a":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upc-r":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str == "upc-h":
                                    qual_val = "home"
                                    qual_type = "Upcoming Location"
                                elif qualifier_str.startswith("morning"):
                                    qual_val = "m"
                                    qual_type = "Time"
                                elif qualifier_str.startswith("early"):
                                    qual_val = "e"
                                    qual_type = "Time"
                                elif qualifier_str.startswith("late"):
                                    qual_val = "a"
                                    qual_type = "Time"
                                elif qualifier_str.startswith("afternoon"):
                                    qual_val = ["e", "a"]
                                    qual_type = "Time"
                                elif qualifier_str.startswith("night"):
                                    qual_val = "l"
                                    qual_type = "Time"
                                elif qualifier_str == "day":
                                    qual_val = ["e", "a", "l"]
                                    qual_type = "Time"
                                
                                qualifier_obj["values"] = qual_val if isinstance(qual_val, list) else [qual_val]
                            elif qualifier_str.startswith("rook"):
                                qual_type = "Rookie"
                            elif qualifier_str == "facing-former-team":
                                qual_type = "Facing Former Team"
                            elif qualifier_str == "facing-former-franchise":
                                qual_type = "Facing Former Franchise"
                            elif qualifier_str == "decision":
                                player_type["da_type"] = {
                                    "type" : "Goalie"
                                }
                                qual_type = "Decision"
                            elif qualifier_str.startswith("current-season-age"):
                                qual_type = "Current Season Age"
                            elif qualifier_str.startswith("first-game") or qualifier_str.startswith("current-game"):
                                qual_type = "First Games"
                            elif qualifier_str.startswith("first-minute") or qualifier_str.startswith("current-minute"):
                                qual_type = "First Minutes"
                                extra_stats.add("current-stats-no-game")
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("first-shot") or qualifier_str.startswith("current-shot"):
                                qual_type = "First Shots"
                                extra_stats.add("current-stats-no-game")
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("first-season") or qualifier_str.startswith("current-season"):
                                qual_type = "First Seasons"
                            elif qualifier_str.startswith("last-game"):
                                qual_type = "Last Games"
                            elif qualifier_str.startswith("last-minute"):
                                qual_type = "Last Minutes"
                                extra_stats.add("current-stats-no-game")
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("last-shot"):
                                qual_type = "Last Shots"
                                extra_stats.add("current-stats-no-game")
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("last-season"):
                                qual_type = "Last Seasons"
                            elif qualifier_str.startswith("first-start"):
                                qual_type = "First Games"
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })
                            elif qualifier_str.startswith("last-start"):
                                qual_type = "Last Games"
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })
                            elif qualifier_str.startswith("current-age"):
                                qual_type = "Current Age"
                            elif qualifier_str == "interconference":
                                qual_type = "Interconference"
                            elif qualifier_str == "intraconference":
                                qual_type = "Intraconference"
                            elif qualifier_str == "interdivision":
                                qual_type = "Interdivision"
                            elif qualifier_str == "intradivision":
                                qual_type = "Intradivision"
                            elif qualifier_str.startswith("first-half"):
                                qual_type = "First Half"
                            elif qualifier_str.startswith("second-half"):
                                qual_type = "Second Half"
                            elif qualifier_str.startswith("first-half"):
                                qual_type = "First Half"
                            elif qualifier_str.startswith("second-half"):
                                qual_type = "Second Half"
                            elif qualifier_str.startswith("current-winning-opponent"):
                                qual_type = "Current Winning Opponent"
                            elif qualifier_str.startswith("current-losing-opponent"):
                                qual_type = "Current Losing Opponent"
                            elif qualifier_str.startswith("current-tied-opponent"):
                                qual_type = "Current Tied Opponent"
                            elif qualifier_str.startswith("current-winning-or-tied-opponent"):
                                qual_type = "Current Winning Or Tied Opponent"
                            elif qualifier_str.startswith("current-losing-or-tied-opponent"):
                                qual_type = "Current Losing Or Tied Opponent"
                            elif qualifier_str.startswith("winning-opponent"):
                                qual_type = "Winning Opponent"
                            elif qualifier_str.startswith("complete-game"):
                                qual_type = "Complete Game"
                            elif qualifier_str.startswith("losing-opponent"):
                                qual_type = "Losing Opponent"
                            elif qualifier_str.startswith("tied-opponent"):
                                qual_type = "Tied Opponent"
                            elif qualifier_str.startswith("winning-or-tied-opponent"):
                                qual_type = "Winning Or Tied Opponent"
                            elif qualifier_str.startswith("losing-or-tied-opponent"):
                                qual_type = "Losing Or Tied Opponent"
                            elif qualifier_str.startswith("playoff-opponent"):
                                qual_type = "Playoff Opponent"
                            elif qualifier_str.startswith("cup-winner-opponent"):
                                qual_type = "Cup Winner Opponent"
                            elif qualifier_str.startswith("conf-winner-opponent"):
                                qual_type = "Conference Winner Opponent"
                            elif qualifier_str.startswith("current-winning-team"):
                                qual_type = "Current Winning Team"
                            elif qualifier_str.startswith("current-losing-team"):
                                qual_type = "Current Losing Team"
                            elif qualifier_str.startswith("current-tied-team"):
                                qual_type = "Current Tied Team"
                            elif qualifier_str.startswith("current-winning-or-tied-team"):
                                qual_type = "Current Winning Or Tied Team"
                            elif qualifier_str.startswith("current-losing-or-tied-team"):
                                qual_type = "Current Losing Or Tied Team"
                            elif qualifier_str.startswith("winning-team"):
                                qual_type = "Winning Team"
                            elif qualifier_str.startswith("losing-team"):
                                qual_type = "Losing Team"
                            elif qualifier_str.startswith("tied-team"):
                                qual_type = "Tied Team"
                            elif qualifier_str.startswith("winning-or-tied-team"):
                                qual_type = "Winning Or Tied Team"
                            elif qualifier_str.startswith("losing-or-tied-team"):
                                qual_type = "Losing Or Tied Team"
                            elif qualifier_str.startswith("playoff-team"):
                                qual_type = "Playoff Team"
                            elif qualifier_str.startswith("conf-winner-team"):
                                qual_type = "Conference Winner Team"
                            elif qualifier_str == "even-year":
                                qual_type = "Even Year"
                            elif qualifier_str == "odd-year":
                                qual_type = "Odd Year"
                            elif qualifier_str == "national-game":
                                qual_type = "National Game"
                            elif qualifier_str == "any-national-game":
                                qual_type = "Any National Game"
                            elif qualifier_str == "us-national-game":
                                qual_type = "US National Game"
                            elif qualifier_str == "any-us-national-game":
                                qual_type = "Any US National Game"
                            elif qualifier_str == "ca-national-game":
                                qual_type = "CA National Game"
                            elif qualifier_str == "any-ca-national-game":
                                qual_type = "Any CA National Game"
                            elif qualifier_str == "penalty-shot":
                                qual_type = "Penalty Shot"
                                extra_stats.add("penalty-shot")
                            elif qualifier_str == "shootout":
                                qual_type = "Shootout"
                                extra_stats.add("shootout")
                            elif qualifier_str == "overtime":
                                qual_type = "Overtime"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "game-winning":
                                qual_type = "Game Winning"
                                extra_stats.add("scoring-stats")
                            elif qualifier_str == "offensive-zone":
                                qual_type = "Offensive Zone"
                                extra_stats.add("current-stats-zone")
                            elif qualifier_str == "defensive-zone":
                                qual_type = "Defensive Zone"
                                extra_stats.add("current-stats-zone")
                            elif qualifier_str == "neutral-zone":
                                qual_type = "Neutral Zone"
                                extra_stats.add("current-stats-zone")
                            elif qualifier_str.endswith("period"):
                                qual_type = "Period"
                                if qualifier_str.startswith("first"):
                                    qualifier_obj["values"] = {
                                        "start_val" : 1,
                                        "end_val" : 1
                                    }
                                elif qualifier_str.startswith("second"):
                                    qualifier_obj["values"] = {
                                        "start_val" : 2,
                                        "end_val" : 2
                                    }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : 3,
                                        "end_val" : 3
                                    }
                                extra_stats.add("current-stats")
                            elif qualifier_str == "even-skaters":
                                qual_type = "Even Skaters"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "team-goalie-pulled":
                                qual_type = "Team Goalie Pulled"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "opponent-goalie-pulled":
                                qual_type = "Opponent Goalie Pulled"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "more-skaters":
                                qual_type = "More Skaters"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "less-skaters":
                                qual_type = "Less Skaters"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "power-play":
                                qual_type = "Power Play"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "short-handed":
                                qual_type = "Short Handed"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "even-strength":
                                qual_type = "Even Strength"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "unassisted":
                                qual_type = "Unassisted"
                                extra_stats.add("Assisted By")
                            elif qualifier_str == "elimination-or-clinching" or qualifier_str == "clinching-or-elimination":
                                qual_type = "Elimination Or Clinching"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("elimination") or qualifier_str.startswith("eliminating"):
                                qual_type = "Elimination"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("clinching") or qualifier_str.startswith("clinch"):
                                qual_type = "Clinching"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("winner-take-all"):
                                qual_type = "Winner Take All"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("ahead-in-series"):
                                qual_type = "Ahead In Series"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("behind-in-series"):
                                qual_type = "Behind In Series"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("even-in-series"):
                                qual_type = "Even In Series"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("force-dates"):
                                qual_type = "Force Dates"
                            elif qualifier_str.startswith("win") or qualifier_str.startswith("loss") or qualifier_str.startswith("tie") or qualifier_str == "w" or qualifier_str == "l" or qualifier_str == "t" or qualifier_str == "w-ot" or qualifier_str == "w-so" or qualifier_str == "l-ot" or qualifier_str == "l-so" or qualifier_str == "so" or qualifier_str == "ot" or qualifier_str.startswith("previous-win") or qualifier_str.startswith("previous-loss") or qualifier_str.startswith("previous-tie") or qualifier_str == "prv-w" or qualifier_str == "prv-l" or qualifier_str == "prv-t" or qualifier_str == "prv-w-ot" or qualifier_str == "prv-w-so" or qualifier_str == "prv-l-ot" or qualifier_str == "prv-l-so" or qualifier_str == "prv-so" or qualifier_str == "prv-ot" or qualifier_str.startswith("upcoming-win") or qualifier_str.startswith("upcoming-loss") or qualifier_str.startswith("upcoming-tie") or qualifier_str == "upc-w" or qualifier_str == "upc-l" or qualifier_str == "upc-t" or qualifier_str == "upc-l-ot" or qualifier_str == "upc-l-so" or qualifier_str == "upc-w-ot" or qualifier_str == "upc-w-so" or qualifier_str == "upc-so" or qualifier_str == "upc-ot" or qualifier_str.startswith("previous-team-win") or qualifier_str.startswith("previous-team-loss") or qualifier_str.startswith("previous-team-tie") or qualifier_str == "prv-t-w" or qualifier_str == "prv-t-l" or qualifier_str == "prv-t-t" or qualifier_str == "prv-t-w-ot" or qualifier_str == "prv-t-w-so" or qualifier_str == "prv-t-l-ot" or qualifier_str == "prv-t-l-so" or qualifier_str == "prv-t-so" or qualifier_str == "prv-t-ot" or qualifier_str.startswith("upcoming-team-win") or qualifier_str.startswith("upcoming-team-loss") or qualifier_str.startswith("upcoming-team-tie") or qualifier_str == "upc-t-w" or qualifier_str == "upc-t-l" or qualifier_str == "upc-t-t" or qualifier_str == "upc-t-l-ot" or qualifier_str == "upc-t-l-so" or qualifier_str == "upc-t-w-ot" or qualifier_str == "upc-t-w-so" or qualifier_str == "upc-t-so" or qualifier_str == "upc-t-ot":
                                if qualifier_str.startswith("win"):
                                    qual_val = "W"
                                    qual_type = "Result"
                                elif qualifier_str.startswith("loss"):
                                    qual_val = "L"
                                    qual_type = "Result"
                                elif qualifier_str.startswith("tie"):
                                    qual_val = "T"
                                    qual_type = "Result"
                                elif qualifier_str == "w":
                                    qual_val = "W"
                                    qual_type = "Result"
                                elif qualifier_str == "l":
                                    qual_val = "L"
                                    qual_type = "Result"
                                elif qualifier_str == "t":
                                    qual_val = "T"
                                    qual_type = "Result"
                                elif qualifier_str == "w-ot":
                                    qual_val = "W-OT"
                                    qual_type = "Result"
                                elif qualifier_str == "w-so":
                                    qual_val = "W-SO"
                                    qual_type = "Result"
                                elif qualifier_str == "l-ot":
                                    qual_val = "L-OT"
                                    qual_type = "Result"
                                elif qualifier_str == "l-so":
                                    qual_val = "L-SO"
                                    qual_type = "Result"
                                elif qualifier_str == "ot":
                                    qual_val = "OT"
                                    qual_type = "Result"
                                elif qualifier_str == "so":
                                    qual_val = "SO"
                                    qual_type = "Result"
                                elif qualifier_str.startswith("previous-win"):
                                    qual_val = "W"
                                    qual_type = "Previous Result"
                                elif qualifier_str.startswith("previous-loss"):
                                    qual_val = "L"
                                    qual_type = "Previous Result"
                                elif qualifier_str.startswith("previous-tie"):
                                    qual_val = "T"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-w":
                                    qual_val = "W"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-w-ot":
                                    qual_val = "W-OT"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-w-so":
                                    qual_val = "W-SO"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-l":
                                    qual_val = "L"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-t":
                                    qual_val = "T"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-l-ot":
                                    qual_val = "L-OT"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-l-so":
                                    qual_val = "L-SO"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-ot":
                                    qual_val = "OT"
                                    qual_type = "Previous Result"
                                elif qualifier_str == "prv-so":
                                    qual_val = "SO"
                                    qual_type = "Previous Result"
                                elif qualifier_str.startswith("upcoming-win"):
                                    qual_val = "W"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str.startswith("upcoming-loss"):
                                    qual_val = "L"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str.startswith("upcoming-tie"):
                                    qual_val = "T"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-w":
                                    qual_val = "W"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-l":
                                    qual_val = "L"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-t":
                                    qual_val = "T"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-w-ot":
                                    qual_val = "W-OT"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-w-so":
                                    qual_val = "W-SO"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-l-ot":
                                    qual_val = "L-OT"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-l-so":
                                    qual_val = "L-SO"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-so":
                                    qual_val = "SO"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str == "upc-ot":
                                    qual_val = "OT"
                                    qual_type = "Upcoming Result"
                                elif qualifier_str.startswith("previous-team-win"):
                                    qual_val = "W"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str.startswith("previous-team-loss"):
                                    qual_val = "L"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str.startswith("previous-team-tie"):
                                    qual_val = "T"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-w":
                                    qual_val = "W"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-w-ot":
                                    qual_val = "W-OT"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-w-so":
                                    qual_val = "W-SO"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-l":
                                    qual_val = "L"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-t":
                                    qual_val = "T"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-l-ot":
                                    qual_val = "L-OT"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-l-so":
                                    qual_val = "L-SO"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-ot":
                                    qual_val = "OT"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str == "prv-t-so":
                                    qual_val = "SO"
                                    qual_type = "Previous Team Result"
                                elif qualifier_str.startswith("upcoming-team-win"):
                                    qual_val = "W"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str.startswith("upcoming-team-loss"):
                                    qual_val = "L"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str.startswith("upcoming-team-tie"):
                                    qual_val = "T"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-w":
                                    qual_val = "W"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-l":
                                    qual_val = "L"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-t":
                                    qual_val = "T"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-w-ot":
                                    qual_val = "W-OT"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-w-so":
                                    qual_val = "W-SO"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-l-ot":
                                    qual_val = "L-OT"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-l-so":
                                    qual_val = "L-SO"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-so":
                                    qual_val = "SO"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier_str == "upc-t-ot":
                                    qual_val = "OT"
                                    qual_type = "Upcoming Team Result"
                                
                                qualifier_obj["values"] = [qual_val]
                            elif qualifier_str.startswith("series-team-wins:") or qualifier_str.startswith("series-opponent-wins:"):
                                if qualifier_str.startswith("series-team-wins:"):
                                    qual_str = "series-team-wins:"
                                    qual_type = "Series Team Wins"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("series-opponent-wins:"):
                                    qual_str = "series-opponent-wins:"
                                    qual_type = "Series Opponent Wins"
                                    if not playoffs:
                                        playoffs = "Only"

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                
                                if len(split_vals) == 1:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[0])
                                    }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1])
                                    }
                            elif qualifier_str.startswith("team-score:") or qualifier_str.startswith("opponent-score:") or qualifier_str.startswith("score-margin:") or qualifier_str.startswith("series-score-margin:") or qualifier_str.startswith("score-difference:") or qualifier_str.startswith("series-score-difference:") or qualifier_str.startswith("final-team-score:") or qualifier_str.startswith("final-opponent-score:") or qualifier_str.startswith("final-score-margin:") or qualifier_str.startswith("final-score-difference:") or qualifier_str.startswith("year") or qualifier_str.startswith("period:") or qualifier_str.startswith("team-skaters:") or qualifier_str.startswith("opponent-skaters:") or qualifier_str.startswith("team-players:") or qualifier_str.startswith("opponent-players:") or qualifier_str.startswith("period-time-remaining:") or qualifier_str.startswith("period-time:") or qualifier_str.startswith("team-games-over-500:") or qualifier_str.startswith("opponent-games-over-500:") or qualifier_str.startswith("current-team-games-over-500:") or qualifier_str.startswith("current-opponent-games-over-500:"):
                                if qualifier_str.startswith("team-score:"):
                                    qual_str = "team-score:"
                                    qual_type = "Team Score"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-score:"):
                                    qual_str = "opponent-score:"
                                    qual_type = "Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("years:"):
                                    qual_str = "years:"
                                    qual_type = "Year"
                                elif qualifier_str.startswith("year:"):
                                    qual_str = "year:"
                                    qual_type = "Year"
                                elif qualifier_str.startswith("score-margin:"):
                                    qual_str = "score-margin:"
                                    qual_type = "Score Margin"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("score-difference:"):
                                    qual_str = "score-difference:"
                                    qual_type = "Score Difference"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("final-team-score:"):
                                    qual_str = "final-team-score:"
                                    qual_type = "Final Team Score"
                                elif qualifier_str.startswith("final-opponent-score:"):
                                    qual_str = "final-opponent-score:"
                                    qual_type = "Final Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("final-score-margin:"):
                                    qual_str = "final-score-margin:"
                                    qual_type = "Final Score Margin"
                                elif qualifier_str.startswith("final-score-difference:"):
                                    qual_str = "final-score-difference:"
                                    qual_type = "Final Score Difference"
                                elif qualifier_str.startswith("period:"):
                                    qual_str = "period:"
                                    qual_type = "Period"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("team-skaters:"):
                                    qual_str = "team-skaters:"
                                    qual_type = "Team Skaters"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-skaters:"):
                                    qual_str = "opponent-skaters:"
                                    qual_type = "Opponent Skaters"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("team-players:"):
                                    qual_str = "team-players:"
                                    qual_type = "Team Players"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-players:"):
                                    qual_str = "opponent-players:"
                                    qual_type = "Opponent Players"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("period-time:"):
                                    qual_str = "period-time:"
                                    qual_type = "Period Time"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("period-time-remaining:"):
                                    qual_str = "period-time-remaining:"
                                    qual_type = "Period Time Remaining"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("series-score-margin:"):
                                    qual_str = "series-score-margin:"
                                    qual_type = "Series Score Margin"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("series-score-difference:"):
                                    qual_str = "series-score-difference:"
                                    qual_type = "Series Score Difference"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("team-games-over-500:"):
                                    qual_str = "team-games-over-500:"
                                    qual_type = "Team Games Over 500"
                                elif qualifier_str.startswith("opponent-games-over-500:"):
                                    qual_str = "opponent-games-over-500:"
                                    qual_type = "Opponent Games Over 500"
                                elif qualifier_str.startswith("current-team-games-over-500:"):
                                    qual_str = "current-team-games-over-500:"
                                    qual_type = "Current Team Games Over 500"
                                elif qualifier_str.startswith("current-opponent-games-over-500:"):
                                    qual_str = "current-opponent-games-over-500:"
                                    qual_type = "Current Opponent Games Over 500"

                                split_vals = re.split(r"(?<!\\)(?<!^)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)
                                if qual_type.startswith("Period Time"):
                                    new_split_vals = []
                                    for split_val in split_vals:
                                        period_time_spl = split_val.split(":")
                                        if len(period_time_spl) > 1:
                                            period_time = (int(ordinal_to_number(period_time_spl[0])) * 60) + int(ordinal_to_number(period_time_spl[1]))
                                        else:
                                            period_time = (int(ordinal_to_number(period_time_spl[0])) * 60)
                                        new_split_vals.append(period_time)
                                    split_vals = new_split_vals
                                
                                if len(split_vals) == 1:
                                    if qual_type.startswith("Period Time"):
                                        qualifier_obj["values"] = {
                                            "start_val" : 0,
                                            "end_val" : split_vals[0]
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                else:
                                    if qual_type.startswith("Period Time"):
                                        qualifier_obj["values"] = {
                                            "start_val" : split_vals[0],
                                            "end_val" : split_vals[1]
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[1])
                                        }
                                
                                #if qual_type == "Period":
                                    #if is_period_qual(qualifier_obj):
                                        #extra_stats.add("shootout")
                            elif qualifier_str.startswith("score:") or qualifier_str.startswith("final-score:") or qualifier_str.startswith("previous-score:") or qualifier_str.startswith("upcoming-score:") or qualifier_str.startswith("series-score:"):
                                if qualifier_str.startswith("score:"):
                                    qual_str = "score:"
                                    team_sub_qual = "Team Score"
                                    opp_sub_qual = "Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("final-score:"):
                                    qual_str = "final-score:"
                                    team_sub_qual = "Final Team Score"
                                    opp_sub_qual = "Final Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-score:"):
                                    qual_str = "previous-score:"
                                    team_sub_qual = "Previous Team Score"
                                    opp_sub_qual = "Previous Opponent Score"
                                elif qualifier_str.startswith("upcoming-score:"):
                                    qual_str = "upcoming-score:"
                                    team_sub_qual = "Upcoming Team Score"
                                    opp_sub_qual = "Upcoming Opponent Score"
                                elif qualifier_str.startswith("series-score:"):
                                    qual_str = "series-score:"
                                    team_sub_qual = "Series Team Wins"
                                    opp_sub_qual = "Series Opponent Wins"
                                    if not playoffs:
                                        playoffs = "Only"

                                split_vals = re.split(r"(?<!\\)(?<!^)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)

                                team_score = split_vals[0]
                                opp_score = split_vals[1]
                                if team_score == "all":
                                    team_score = "0~max"
                                if opp_score == "all":
                                    opp_score = "0~max"

                                qual_obj = {}
                                team_score_split =  re.split(r"(?<!\\)(?<!^)\~", team_score)
                                if len(team_score_split) == 1:
                                    qual_obj = {
                                        "values" : {
                                            "start_val" : ordinal_to_number(team_score_split[0]),
                                            "end_val" : ordinal_to_number(team_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }
                                else:
                                    qual_obj = {
                                        "values" : {
                                            "start_val" : ordinal_to_number(team_score_split[0]),
                                            "end_val" : ordinal_to_number(team_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }

                                qualifiers[team_sub_qual] = [qual_obj]

                                qual_obj = {}
                                opp_score_split =  re.split(r"(?<!\\)(?<!^)\~", opp_score)
                                if len(opp_score_split) == 1:
                                    qual_obj = {
                                       "values" : {
                                            "start_val" : ordinal_to_number(opp_score_split[0]),
                                            "end_val" : ordinal_to_number(opp_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }
                                else:
                                    qual_obj = {
                                        "values" : {
                                            "start_val" : ordinal_to_number(opp_score_split[0]),
                                            "end_val" : ordinal_to_number(opp_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }

                                qualifiers[opp_sub_qual] = [qual_obj]
                            elif qualifier_str.startswith("coordinates:"):
                                if qualifier_str.startswith("coordinates:"):
                                    qual_str = "coordinates:"
                                    qual_type = "Coordinates"
                                    extra_stats.add("current-stats-zone")
                                
                                qual_obj = {}
                                split_vals = re.split(r"(?<!\\)(?<!^)\,", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)

                                x_coords = split_vals[0]
                                y_coords = split_vals[1]
                                if x_coords == "all":
                                    x_coords = "0-100"
                                if y_coords == "all":
                                    y_coords = "-42.5-42.5"

                                x_coords_split =  re.split(r"(?<!\\)(?<!^)\-", x_coords)
                                if len(x_coords_split) == 1:
                                    qual_obj["x_coords"] = {
                                        "start_val" : ordinal_to_number(x_coords_split[0]),
                                        "end_val" : ordinal_to_number(x_coords_split[0])
                                    }
                                else:
                                    qual_obj["x_coords"] = {
                                        "start_val" : ordinal_to_number(x_coords_split[0]),
                                        "end_val" : ordinal_to_number(x_coords_split[1])
                                    }
                                y_coords_split =  re.split(r"(?<!\\)(?<!^)\-", y_coords)
                                if len(y_coords_split) == 1:
                                    qual_obj["y_coords"] = {
                                        "start_val" : ordinal_to_number(y_coords_split[0]),
                                        "end_val" : ordinal_to_number(y_coords_split[0])
                                    }
                                else:
                                    qual_obj["y_coords"] = {
                                        "start_val" : ordinal_to_number(y_coords_split[0]),
                                        "end_val" : ordinal_to_number(y_coords_split[1])
                                    }
                                qualifier_obj["values"] = qual_obj
                            elif "start-if-goalie" in qualifier_str:
                                qual_type = "Start If Goalie"
                            elif "start" in qualifier_str and not qualifier_str.startswith("starts-rest:") and not qualifier_str.startswith("starts-in-a-row:") and not qualifier_str.startswith("starts-days-rest:") and not qualifier_str.startswith("upcoming-starts-days-rest:") and not qualifier_str.startswith("start-time:"):
                                if "ignore" in qualifier_str:
                                    qual_type = "Ignore Start"
                                else:
                                    qual_type = "Start"
                            elif "birth" in qualifier_str:
                                qual_type = "Birthday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str == "skater":
                                player_type["da_type"] = {
                                    "type" : "Skater"
                                }
                            elif qualifier_str == "goalie":
                                player_type["da_type"] = {
                                    "type" : "Goalie"
                                }
                            elif qualifier_str.startswith("t:") or qualifier_str.startswith("o:") or qualifier_str.startswith("team:") or qualifier_str.startswith("opponent:") or qualifier_str.startswith("franchise:") or qualifier_str.startswith("tf:") or qualifier_str.startswith("of:") or qualifier_str.startswith("f:") or qualifier_str.startswith("team-franchise:") or qualifier_str.startswith("opponent-franchise:") or qualifier_str.startswith("previous-franchise:") or qualifier_str.startswith("previous-team-franchise:") or qualifier_str.startswith("previous-opponent-franchise:") or qualifier_str.startswith("upcoming-franchise:") or qualifier_str.startswith("upcoming-team-franchise:") or qualifier_str.startswith("upcoming-opponent-franchise:") or qualifier_str.startswith("tv-network:") or qualifier_str.startswith("raw-tv-network:") or qualifier_str.startswith("prv-t:") or qualifier_str.startswith("prv-o:") or qualifier_str.startswith("previous-team:") or qualifier_str.startswith("previous-opponent:") or qualifier_str.startswith("upc-t:") or qualifier_str.startswith("upc-o:") or qualifier_str.startswith("upcoming-team:") or qualifier_str.startswith("upcoming-opponent:") or qualifier_str.startswith("team-conference:") or qualifier_str.startswith("opponent-conference:") or qualifier_str.startswith("team-division:") or qualifier_str.startswith("opponent-division:") or qualifier_str.startswith("national-tv-network:") or qualifier_str.startswith("national-raw-tv-network:") or qualifier_str.startswith("any-national-tv-network:") or qualifier_str.startswith("any-national-raw-tv-network:"):
                                split_str = "-"
                                if qualifier_str.startswith("t:"):
                                    qual_str = "t:"
                                    qual_type = "Team"
                                elif qualifier_str.startswith("team:"):
                                    qual_str = "team:"
                                    qual_type = "Team"
                                elif qualifier_str.startswith("o:"):
                                    qual_str = "o:"
                                    qual_type = "Opponent"
                                elif qualifier_str.startswith("opponent:"):
                                    qual_str = "opponent:"
                                    qual_type = "Opponent"
                                elif qualifier_str.startswith("tf:"):
                                    qual_str = "tf:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("of:"):
                                    qual_str = "of:"
                                    qual_type = "Opponent Franchise"
                                elif qualifier_str.startswith("f:"):
                                    qual_str = "f:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("franchise:"):
                                    qual_str = "franchise:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("team-franchise:"):
                                    qual_str = "team-franchise:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("opponent-franchise:"):
                                    qual_str = "opponent-franchise:"
                                    qual_type = "Opponent Franchise"
                                elif qualifier_str.startswith("upcoming-franchise:"):
                                    qual_str = "upcoming-franchise:"
                                    qual_type = "Upcoming Team Franchise"
                                elif qualifier_str.startswith("upcoming-team-franchise:"):
                                    qual_str = "upcoming-team-franchise:"
                                    qual_type = "Upcoming Team Franchise"
                                elif qualifier_str.startswith("upcoming-opponent-franchise:"):
                                    qual_str = "upcoming-opponent-franchise:"
                                    qual_type = "Upcoming Opponent Franchise"
                                elif qualifier_str.startswith("previous-franchise:"):
                                    qual_str = "previous-franchise:"
                                    qual_type = "Previous Team Franchise"
                                elif qualifier_str.startswith("previous-team-franchise:"):
                                    qual_str = "previous-team-franchise:"
                                    qual_type = "Previous Team Franchise"
                                elif qualifier_str.startswith("previous-opponent-franchise:"):
                                    qual_str = "previous-opponent-franchise:"
                                    qual_type = "Previous Opponent Franchise"
                                elif qualifier_str.startswith("prv-t:"):
                                    qual_str = "prv-t:"
                                    qual_type = "Previous Team"
                                elif qualifier_str.startswith("previous-team:"):
                                    qual_str = "previous-team:"
                                    qual_type = "Previous Team"
                                elif qualifier_str.startswith("prv-o:"):
                                    qual_str = "prv-o:"
                                    qual_type = "Previous Opponent"
                                elif qualifier_str.startswith("previous-opponent:"):
                                    qual_str = "previous-opponent:"
                                    qual_type = "Previous Opponent"
                                elif qualifier_str.startswith("upc-t:"):
                                    qual_str = "upc-t:"
                                    qual_type = "Upcoming Team"
                                elif qualifier_str.startswith("upcoming-team:"):
                                    qual_str = "upcoming-team:"
                                    qual_type = "Upcoming Team"
                                elif qualifier_str.startswith("upc-o:"):
                                    qual_str = "upc-o:"
                                    qual_type = "Upcoming Opponent"
                                elif qualifier_str.startswith("upcoming-opponent:"):
                                    qual_str = "upcoming-opponent:"
                                    qual_type = "Upcoming Opponent"
                                elif qualifier_str.startswith("team-conference:"):
                                    qual_str = "team-conference:"
                                    qual_type = "Team Conference"
                                elif qualifier_str.startswith("opponent-conference:"):
                                    qual_str = "opponent-conference:"
                                    qual_type = "Opponent Conference"
                                elif qualifier_str.startswith("team-division:"):
                                    qual_str = "team-division:"
                                    qual_type = "Team Division"
                                elif qualifier_str.startswith("opponent-division:"):
                                    qual_str = "opponent-division:"
                                    qual_type = "Opponent Division"
                                elif qualifier_str.startswith("tv-network:"):
                                    qual_str = "tv-network:"
                                    qual_type = "TV Network"
                                elif qualifier_str.startswith("raw-tv-network:"):
                                    qual_str = "raw-tv-network:"
                                    qual_type = "Raw TV Network"
                                elif qualifier_str.startswith("national-tv-network:"):
                                    qual_str = "national-tv-network:"
                                    qual_type = "National TV Network"
                                elif qualifier_str.startswith("national-raw-tv-network:"):
                                    qual_str = "national-raw-tv-network:"
                                    qual_type = "National Raw TV Network"
                                elif qualifier_str.startswith("any-national-tv-network:"):
                                    qual_str = "any-national-tv-network:"
                                    qual_type = "Any National TV Network"
                                elif qualifier_str.startswith("any-national-raw-tv-network:"):
                                    qual_str = "any-national-raw-tv-network:"
                                    qual_type = "Any National Raw TV Network"
                                
                                qualifier_obj["values"] = re.split(r"(?<!\\)" + split_str, re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])

                                if qual_type == "Team Conference" or qual_type == "Opponent Conference":
                                    new_values = []
                                    for value in qualifier_obj["values"]:
                                        if value == "clarence" or value == "campbell":
                                            value = "clarence campbell"
                                        elif value == "price" or value == "wales":
                                            value = "prince of wales"
                                        elif value == "east":
                                            value = "eastern"
                                        elif value == "west":
                                            value = "western"
                                        new_values.append(value)
                                    qualifier_obj["values"] = new_values
                                elif qual_type == "Team Division" or qual_type == "Opponent Division":
                                    new_values = []
                                    for value in qualifier_obj["values"]:
                                        if value == "metro":
                                            value = "metropolitan"
                                        new_values.append(value)
                                    qualifier_obj["values"] = new_values
                            elif qualifier_str.startswith("m:") or qualifier_str.startswith("month:") or re.match(all_months_re, qualifier_str):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("m:"):
                                    qual_str = "m:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                elif qualifier_str.startswith("month:"):
                                    qual_str = "month:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                else:
                                    values = re.split(r"(?<!\\)\-", qualifier_str)

                                if len(values) == 2:
                                    start_month = dateutil.parser.parse(values[0]).date().month
                                    end_month =  dateutil.parser.parse(values[1]).date().month
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 13)) + list(range(1, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(dateutil.parser.parse(value).date().month)
                                qual_type = "Month"
                            elif qualifier_str.startswith("d:") or qualifier_str.startswith("day:") or re.match(all_days_re, qualifier_str):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("d:"):
                                    qual_str = "d:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                elif qualifier_str.startswith("day:"):
                                    qual_str = "day:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                else:
                                    values = re.split(r"(?<!\\)\-", qualifier_str)

                                if len(values) == 2:
                                    start_month = dateutil.parser.parse(values[0]).date().weekday()
                                    end_month =  dateutil.parser.parse(values[1]).date().weekday()
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 7)) + list(range(0, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(dateutil.parser.parse(value).date().weekday())
                                qual_type = "Day"
                            elif qualifier_str.startswith("dt:") or qualifier_str.startswith("date:"):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("dt:"):
                                    qual_str = "dt:"
                                elif qualifier_str.startswith("date:"):
                                    qual_str = "date:"

                                values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(values) == 2:
                                    start_month = ordinal_to_number(values[0])
                                    end_month =  ordinal_to_number(values[1])
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 32)) + list(range(1, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(ordinal_to_number(value))
                                qual_type = "Date"
                            elif qualifier_str.startswith("series-game:") or qualifier_str.startswith("gm:") or qualifier_str.startswith("game:") or qualifier_str.startswith("season-gm:") or qualifier_str.startswith("season-game:") or qualifier_str.startswith("season:") or qualifier_str.startswith("season-reversed:") or qualifier_str.startswith("tmgm:") or qualifier_str.startswith("team-game:") or qualifier_str.startswith("crgm:") or qualifier_str.startswith("career-game:") or qualifier_str.startswith("game-reversed:") or qualifier_str.startswith("career-game-reversed:") or qualifier_str.startswith("team-game-reversed:") or qualifier_str.startswith("season-game-reversed:") or qualifier_str.startswith("dr:") or qualifier_str.startswith("days-rest:") or qualifier_str.startswith("starts-days-rest:") or qualifier_str.startswith("prv-dr:") or qualifier_str.startswith("previous-days-rest:") or qualifier_str.startswith("upc-dr:") or qualifier_str.startswith("upcoming-days-rest:") or qualifier_str.startswith("upcoming-starts-days-rest:") or qualifier_str.startswith("gr:") or qualifier_str.startswith("games-rest:") or qualifier_str.startswith("starts-rest:") or qualifier_str.startswith("prv-gr:") or qualifier_str.startswith("previous-games-rest:") or qualifier_str.startswith("upc-gr:") or qualifier_str.startswith("upcoming-games-rest:") or qualifier_str.startswith("days-in-a-row:") or qualifier_str.startswith("games-in-a-row:") or qualifier_str.startswith("starts-in-a-row:") or qualifier_str.startswith("number:") or qualifier_str.startswith("game-number:") or qualifier_str.startswith("season-number:"):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("series-game:"):
                                    qual_str = "series-game:"
                                    qual_type = "Series Game"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("gm:"):
                                    qual_str = "gm:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("game:"):
                                    qual_str = "game:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("season-gm:"):
                                    qual_str = "season-gm:"
                                    qual_type = "Season Game"
                                elif qualifier_str.startswith("season-game:"):
                                    qual_str = "season-game:"
                                    qual_type = "Season Game"
                                elif qualifier_str.startswith("season:"):
                                    qual_str = "season:"
                                    qual_type = "Season"
                                elif qualifier_str.startswith("season-reversed:"):
                                    qual_str = "season-reversed:"
                                    qual_type = "Season Reversed"
                                elif qualifier_str.startswith("tmgm:"):
                                    qual_str = "tmgm:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("team-game:"):
                                    qual_str = "team-game:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("crgm:"):
                                    qual_str = "crgm:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-game:"):
                                    qual_str = "career-game:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-game-reversed:"):
                                    qual_str = "career-game-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("team-game-reversed:"):
                                    qual_str = "team-game-reversed:"
                                    qual_type = "Team Game Reversed"
                                elif qualifier_str.startswith("game-reversed:"):
                                    qual_str = "game-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("season-game-reversed:"):
                                    qual_str = "season-game-reversed:"
                                    qual_type = "Season Game Reversed"
                                elif qualifier_str.startswith("dr:"):
                                    qual_str = "dr:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("days-rest:"):
                                    qual_str = "days-rest:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("prv-dr:"):
                                    qual_str = "prv-dr:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("previous-days-rest:"):
                                    qual_str = "previous-days-rest:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("starts-days-rest:"):
                                    qual_str = "starts-days-rest:"
                                    qual_type = "Starts Days Rest"
                                elif qualifier_str.startswith("upc-dr:"):
                                    qual_str = "upc-dr:"
                                    qual_type = "Upcoming Days Rest"
                                elif qualifier_str.startswith("upcoming-days-rest:"):
                                    qual_str = "upcoming-days-rest:"
                                    qual_type = "Upcoming Days Rest"
                                elif qualifier_str.startswith("upcoming-starts-days-rest:"):
                                    qual_str = "upcoming-starts-days-rest:"
                                    qual_type = "Upcoming Starts Days Rest"
                                elif qualifier_str.startswith("gr:"):
                                    qual_str = "gr:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("games-rest:"):
                                    qual_str = "games-rest:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("prv-gr:"):
                                    qual_str = "prv-gr:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("previous-games-rest:"):
                                    qual_str = "previous-games-rest:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("starts-rest:"):
                                    qual_str = "starts-rest:"
                                    qual_type = "Starts Rest"
                                elif qualifier_str.startswith("days-in-a-row:"):
                                    qual_str = "days-in-a-row:"
                                    qual_type = "Days In A Row"
                                elif qualifier_str.startswith("games-in-a-row:"):
                                    qual_str = "games-in-a-row:"
                                    qual_type = "Games In A Row"
                                elif qualifier_str.startswith("starts-in-a-row:"):
                                    qual_str = "starts-in-a-row:"
                                    qual_type = "Starts In A Row"
                                elif qualifier_str.startswith("number:"):
                                    qual_str = "number:"
                                    qual_type = "Season Number"
                                elif qualifier_str.startswith("season-number:"):
                                    qual_str = "season-number:"
                                    qual_type = "Season Number"
                                elif qualifier_str.startswith("game-number:"):
                                    qual_str = "game-number:"
                                    qual_type = "Game Number"
                                
                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                
                                if len(split_vals) == 1:
                                    if qual_type == "Series Game" or qual_type == "Season Number" or qual_type == "Game Number" or "In A Row" in qual_type or "Rest" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1])
                                    }
                            elif qualifier_str.startswith("opponent-goals-rank:") or qualifier_str.startswith("opponent-standings-rank:") or qualifier_str.startswith("opponent-goals-allowed-rank:") or qualifier_str.startswith("opponent-goal-rank:") or qualifier_str.startswith("opponent-goal-allowed-rank:") or qualifier_str.startswith("opponent-win-percent:") or qualifier_str.startswith("opponent-winning-percent:") or qualifier_str.startswith("current-opponent-win-percent:") or qualifier_str.startswith("current-opponent-winning-percent:") or qualifier_str.startswith("opponent-points-percent:") or qualifier_str.startswith("current-opponent-points-percent:") or qualifier_str.startswith("opponent-wins:") or qualifier_str.startswith("opponent-losses:") or qualifier_str.startswith("opponent-ties:") or qualifier_str.startswith("opponent-points:") or qualifier_str.startswith("current-opponent-wins:") or qualifier_str.startswith("current-opponent-losses:") or qualifier_str.startswith("current-opponent-ties:") or qualifier_str.startswith("current-opponent-points:"):
                                if qualifier_str.startswith("opponent-goals-rank:"):
                                    qual_str = "opponent-goals-rank:"
                                    qual_type = "Opponent Goals Rank"
                                elif qualifier_str.startswith("opponent-standings-rank:"):
                                    qual_str = "opponent-standings-rank:"
                                    qual_type = "Opponent Standings Rank"
                                elif qualifier_str.startswith("opponent-goals-allowed-rank:"):
                                    qual_str = "opponent-goals-allowed-rank:"
                                    qual_type = "Opponent Goals Allowed Rank"
                                elif qualifier_str.startswith("opponent-goal-rank:"):
                                    qual_str = "opponent-goal-rank:"
                                    qual_type = "Opponent Goals Rank"
                                elif qualifier_str.startswith("opponent-goal-allowed-rank:"):
                                    qual_str = "opponent-goal-allowed-rank:"
                                    qual_type = "Opponent Goals Allowed Rank"
                                elif qualifier_str.startswith("opponent-win-percent:"):
                                    qual_str = "opponent-win-percent:"
                                    qual_type = "Opponent Win Percentage"
                                elif qualifier_str.startswith("opponent-winning-percent:"):
                                    qual_str = "opponent-winning-percent:"
                                    qual_type = "Opponent Win Percentage"
                                elif qualifier_str.startswith("opponent-points-percent:"):
                                    qual_str = "opponent-points-percent:"
                                    qual_type = "Opponent Points Percentage"
                                elif qualifier_str.startswith("opponent-wins:"):
                                    qual_str = "opponent-wins:"
                                    qual_type = "Opponent Wins"
                                elif qualifier_str.startswith("opponent-losses:"):
                                    qual_str = "opponent-losses:"
                                    qual_type = "Opponent Losses"
                                elif qualifier_str.startswith("opponent-ties:"):
                                    qual_str = "opponent-ties:"
                                    qual_type = "Opponent Ties"
                                elif qualifier_str.startswith("opponent-points:"):
                                    qual_str = "opponent-points:"
                                    qual_type = "Opponent Points"
                                elif qualifier_str.startswith("current-opponent-wins:"):
                                    qual_str = "current-opponent-wins:"
                                    qual_type = "Current Opponent Wins"
                                elif qualifier_str.startswith("current-opponent-losses:"):
                                    qual_str = "current-opponent-losses:"
                                    qual_type = "Current Opponent Losses"
                                elif qualifier_str.startswith("current-opponent-ties:"):
                                    qual_str = "current-opponent-ties:"
                                    qual_type = "Current Opponent Ties"
                                elif qualifier_str.startswith("current-opponent-points:"):
                                    qual_str = "current-opponent-points:"
                                    qual_type = "Current Opponent Points"
                                elif qualifier_str.startswith("current-opponent-win-percent:"):
                                    qual_str = "current-opponent-win-percent:"
                                    qual_type = "Current Opponent Win Percentage"
                                elif qualifier_str.startswith("current-opponent-winning-percent:"):
                                    qual_str = "current-opponent-winning-percent:"
                                    qual_type = "Current Opponent Win Percentage"
                                elif qualifier_str.startswith("current-opponent-points-percent:"):
                                    qual_str = "current-opponent-points-percent:"
                                    qual_type = "Current Opponent Points Percentage"

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                reverse = False
                                if len(split_vals) == 3:
                                    reverse = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    if qual_type == "Opponent Win Percentage" or qual_type == "Opponent Points Percentage" or qual_type == "Current Opponent Win Percentage" or qual_type == "Current Opponent Points Percentage":
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : 1,
                                            "reverse" : reverse
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0]),
                                            "reverse" : reverse
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1]),
                                        "reverse" : reverse
                                    }
                                
                                if qual_type == "Opponent Win Percentage" or qual_type == "Opponent Points Percentage" or qual_type == "Current Opponent Win Percentage" or qual_type == "Current Opponent Points Percentage":
                                    if qualifier_obj["values"]["start_val"] > 1:
                                        qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"] / 100
                                    if qualifier_obj["values"]["end_val"] > 1:
                                        qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"] / 100
                            elif qualifier_str.startswith("team-goals-rank:") or  qualifier_str.startswith("team-standings-rank:") or qualifier_str.startswith("team-goals-allowed-rank:") or qualifier_str.startswith("team-goal-rank:") or qualifier_str.startswith("team-goal-allowed-rank:") or qualifier_str.startswith("team-win-percent:") or qualifier_str.startswith("team-wins:") or qualifier_str.startswith("team-losses:") or qualifier_str.startswith("team-ties:") or qualifier_str.startswith("team-points:") or qualifier_str.startswith("current-team-wins:") or qualifier_str.startswith("current-team-losses:") or qualifier_str.startswith("current-team-ties:") or qualifier_str.startswith("current-team-points:") or qualifier_str.startswith("team-winning-percent:") or qualifier_str.startswith("current-team-winning-percent:") or qualifier_str.startswith("current-team-win-percent:") or qualifier_str.startswith("current-team-points-percent:") or qualifier_str.startswith("current-team-points-percent:"):
                                if qualifier_str.startswith("team-wins:"):
                                    qual_str = "team-wins:"
                                    qual_type = "Team Wins"
                                elif qualifier_str.startswith("team-losses:"):
                                    qual_str = "team-losses:"
                                    qual_type = "Team Losses"
                                elif qualifier_str.startswith("team-ties:"):
                                    qual_str = "team-ties:"
                                    qual_type = "Team Ties"
                                elif qualifier_str.startswith("team-points:"):
                                    qual_str = "team-points:"
                                    qual_type = "Team Points"
                                elif qualifier_str.startswith("current-team-wins:"):
                                    qual_str = "current-team-wins:"
                                    qual_type = "Current Team Wins"
                                elif qualifier_str.startswith("current-team-losses:"):
                                    qual_str = "current-team-losses:"
                                    qual_type = "Current Team Losses"
                                elif qualifier_str.startswith("current-team-ties:"):
                                    qual_str = "current-team-ties:"
                                    qual_type = "Current Team Ties"
                                elif qualifier_str.startswith("current-team-points:"):
                                    qual_str = "current-team-points:"
                                    qual_type = "Current Team Points"
                                elif qualifier_str.startswith("team-goals-rank:"):
                                    qual_str = "team-goals-rank:"
                                    qual_type = "Team Goals Rank"
                                elif qualifier_str.startswith("team-standings-rank:"):
                                    qual_str = "team-standings-rank:"
                                    qual_type = "Team Standings Rank"
                                elif qualifier_str.startswith("team-goals-allowed-rank:"):
                                    qual_str = "team-goals-allowed-rank:"
                                    qual_type = "Team Goals Allowed Rank"
                                elif qualifier_str.startswith("team-goal-rank:"):
                                    qual_str = "team-goal-rank:"
                                    qual_type = "Team Goals Rank"
                                elif qualifier_str.startswith("team-goal-allowed-rank:"):
                                    qual_str = "team-goal-allowed-rank:"
                                    qual_type = "Team Goals Allowed Rank"
                                elif qualifier_str.startswith("team-win-percent:"):
                                    qual_str = "team-win-percent:"
                                    qual_type = "Team Win Percentage"
                                elif qualifier_str.startswith("team-winning-percent:"):
                                    qual_str = "team-winning-percent:"
                                    qual_type = "Team Win Percentage"
                                elif qualifier_str.startswith("team-points-percent:"):
                                    qual_str = "team-points-percent:"
                                    qual_type = "Team Points Percentage"
                                elif qualifier_str.startswith("current-team-win-percent:"):
                                    qual_str = "current-team-win-percent:"
                                    qual_type = "Current Team Win Percentage"
                                elif qualifier_str.startswith("current-team-winning-percent:"):
                                    qual_str = "current-team-winning-percent:"
                                    qual_type = "Current Team Win Percentage"
                                elif qualifier_str.startswith("current-team-points-percent:"):
                                    qual_str = "current-team-points-percent:"
                                    qual_type = "Current Team Points Percentage"

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                reverse = False
                                if len(split_vals) == 3:
                                    reverse = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    if qual_type == "Team Win Percentage" or qual_type == "Team Points Percentage" or qual_type == "Current Team Win Percentage" or qual_type == "Current Team Points Percentage":
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : 1,
                                            "reverse" : reverse
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0]),
                                            "reverse" : reverse
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1]),
                                        "reverse" : reverse
                                    }
                                
                                if qual_type == "Team Win Percentage" or qual_type == "Team Points Percentage" or qual_type == "Current Team Win Percentage" or qual_type == "Current Team Points Percentage":
                                    if qualifier_obj["values"]["start_val"] > 1:
                                        qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"] / 100
                                    if qualifier_obj["values"]["end_val"] > 1:
                                        qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"] / 100
                            elif qualifier_str.startswith("st:") or qualifier_str.startswith("period-stat:") or qualifier_str.startswith("stat:") or qualifier_str.startswith("prv-st:") or qualifier_str.startswith("previous-stat:") or qualifier_str.startswith("upc-st:") or qualifier_str.startswith("upcoming-stat:") or qualifier_str.startswith("season-st:") or qualifier_str.startswith("season-stat:") or qualifier_str.startswith("season-prv-st:") or qualifier_str.startswith("season-previous-stat:") or qualifier_str.startswith("season-upc-st:") or qualifier_str.startswith("season-upcoming-stat:") or qualifier_str.startswith("totalgames-st:") or qualifier_str.startswith("totalgames-stat:"):
                                if qualifier_str.startswith("st:"):
                                    qual_str = "st:"
                                    qual_type = "Stat"
                                elif qualifier_str.startswith("period-stat:"):
                                    qual_str = "period-stat:"
                                    qual_type = "Period Stat"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("show-stat-per")
                                elif qualifier_str.startswith("stat:"):
                                    qual_str = "stat:"
                                    qual_type = "Stat"
                                elif qualifier_str.startswith("prv-st:"):
                                    qual_str = "prv-st:"
                                    qual_type = "Previous Stat"
                                elif qualifier_str.startswith("previous-stat:"):
                                    qual_str = "previous-stat:"
                                    qual_type = "Previous Stat"
                                elif qualifier_str.startswith("upc-st:"):
                                    qual_str = "upc-st:"
                                    qual_type = "Upcoming Stat"
                                elif qualifier_str.startswith("upcoming-stat:"):
                                    qual_str = "upcoming-stat:"
                                    qual_type = "Upcoming Stat"
                                elif qualifier_str.startswith("season-st:"):
                                    qual_str = "season-st:"
                                    qual_type = "Season Stat"
                                elif qualifier_str.startswith("season-stat:"):
                                    qual_str = "season-stat:"
                                    qual_type = "Season Stat"
                                elif qualifier_str.startswith("season-prv-st:"):
                                    qual_str = "season-prv-st:"
                                    qual_type = "Previous Season Stat"
                                elif qualifier_str.startswith("season-previous-stat:"):
                                    qual_str = "season-previous-stat:"
                                    qual_type = "Previous Season Stat"
                                elif qualifier_str.startswith("season-upc-st:"):
                                    qual_str = "season-upc-st:"
                                    qual_type = "Upcoming Season Stat"
                                elif qualifier_str.startswith("season-upcoming-stat:"):
                                    qual_str = "season-upcoming-stat:"
                                    qual_type = "Upcoming Season Stat"
                                elif qualifier_str.startswith("totalgames-st:"):
                                    qual_str = "totalgames-st:"
                                    qual_type = "Total Games Stat"
                                elif qualifier_str.startswith("totalgames-stat:"):
                                    qual_str = "totalgames-stat:"
                                    qual_type = "Total Games Stat"

                                qualifier_obj["values"] = []
                                
                                all_vals = re.split(r"(?<!\\)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])

                                for val in all_vals:
                                    split_vals = re.split(r"(?<!\\)\=", val)
                                    stat = unescape_string(split_vals[0])

                                    if len(split_vals) == 1:
                                        qualifier_obj["values"].append({
                                            "stat" : stat,
                                            "start_val" : 1,
                                            "end_val" : float("inf"),
                                            "end_exclusive" : False
                                        })
                                    else:
                                        split_vals = re.split(r"(?<!\\)\-", split_vals[1])
                                        if len(split_vals) == 1:
                                            end_exclusive = False
                                            if split_vals[0].endswith("exc"):
                                                end_exclusive = True
                                                split_vals[0] = split_vals[0].rsplit("exc", 1)[0]

                                            if qual_type == "Total Games Stat":
                                                the_val = ordinal_to_number(split_vals[0])
                                                if the_val > 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : 0,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                elif the_val < 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : 0,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                else:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                            else:
                                                the_val = ordinal_to_number(split_vals[0])
                                                if the_val > 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : float("inf"),
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                elif the_val < 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : -float("inf"),
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                else:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                        else:
                                            end_exclusive = False
                                            if split_vals[1].endswith("exc"):
                                                end_exclusive = True
                                                split_vals[1] = split_vals[1].rsplit("exc", 1)[0]

                                            qualifier_obj["values"].append({
                                                "stat" : stat,
                                                "start_val" : ordinal_to_number(split_vals[0]),
                                                "end_val" : ordinal_to_number(split_vals[1]),
                                                "end_exclusive" : end_exclusive
                                            })
                            elif qualifier_str.startswith("min-st:") or qualifier_str.startswith("min-stat:") or qualifier_str.startswith("max-st:") or qualifier_str.startswith("max-stat:") or qualifier_str.startswith("max-str:") or qualifier_str.startswith("max-streak:") or qualifier_str.startswith("max-stretch:") or qualifier_str.startswith("ctn-str:") or qualifier_str.startswith("count-streak:") or qualifier_str.startswith("q:") or qualifier_str.startswith("quickest:") or qualifier_str.startswith("s:") or qualifier_str.startswith("slowest:"):
                                if qualifier_str.startswith("min-st:"):
                                    qual_str = "min-st:"
                                    qual_type = "Min Stat"
                                elif qualifier_str.startswith("min-stat:"):
                                    qual_str = "min-stat:"
                                    qual_type = "Min Stat"
                                elif qualifier_str.startswith("max-st:"):
                                    qual_str = "max-st:"
                                    qual_type = "Max Stat"
                                elif qualifier_str.startswith("max-stat:"):
                                    qual_str = "max-stat:"
                                    qual_type = "Max Stat"
                                elif qualifier_str.startswith("max-str:"):
                                    qual_str = "max-str:"
                                    qual_type = "Max Streak"
                                elif qualifier_str.startswith("max-streak:"):
                                    qual_str = "max-streak:"
                                    qual_type = "Max Streak"
                                elif qualifier_str.startswith("max-stretch:"):
                                    qual_str = "max-stretch:"
                                    qual_type = "Max Stretch"
                                elif qualifier_str.startswith("ctn-str:"):
                                    qual_str = "cnt-str:"
                                    qual_type = "Count Streak"
                                elif qualifier_str.startswith("count-streak:"):
                                    qual_str = "count-streak:"
                                    qual_type = "Count Streak"
                                elif qualifier_str.startswith("quickest:"):
                                    qual_str = "quickest:"
                                    qual_type = "Quickest"
                                elif qualifier_str.startswith("q:"):
                                    qual_str = "q:"
                                    qual_type = "Quickest"
                                elif qualifier_str.startswith("slowest:"):
                                    qual_str = "slowest:"
                                    qual_type = "Slowest"
                                elif qualifier_str.startswith("s:"):
                                    qual_str = "s:"
                                    qual_type = "Slowest"

                                qualifier_obj["values"] = []
                                values = re.split(r"(?<!\\)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                for value in values:
                                    split_vals = re.split(r"(?<!\\)\:", value)
                                    stats = []
                                    for stat in re.split(r"(?<!\\)\~", split_vals[0]):
                                        start_val = 1
                                        end_val = float("inf")
                                        subbb_stat = re.split(r"(?<!\\)\=", stat)
                                        if len(subbb_stat) > 1:
                                            split_stats = re.split(r"(?<!\\)\-", subbb_stat[1])
                                            stat = subbb_stat[0]
                                            if qual_type == "Quickest" or qual_type == "Slowest":
                                                start_val = ordinal_to_number(split_stats[0])
                                                end_val = float("inf")
                                            else:
                                                if len(split_stats) == 1:
                                                    start_val = ordinal_to_number(split_stats[0])
                                                    if start_val == 0:
                                                        end_val = start_val
                                                    else:
                                                        end_val = float("inf")
                                                else:
                                                    start_val = ordinal_to_number(split_stats[0])
                                                    end_val = ordinal_to_number(split_stats[1])
                                        stats.append({
                                            "stat" : unescape_string(stat),
                                            "start_val" : start_val,
                                            "end_val" : end_val
                                        })
                                    if len(split_vals) == 1:
                                        start_level = 1
                                        end_level = 1
                                        time_frame_obj = None
                                        stat_quals = None
                                    elif len(split_vals) == 2:
                                        try:
                                            start_level = 1
                                            end_level = 1
                                            stat_quals = None
                                            time_frame_obj = handle_stat_time_frame(split_vals[1])
                                        except Exception:
                                            time_frame_obj = None
                                            levels = re.split(r"(?<!\\)\-", split_vals[1])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[1])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = unescape_string(sub_split_vals[0])
                                                    sub_split_vals = re.split(r"(?<!\\)\-", sub_split_vals[1])
                                                    
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                    elif len(split_vals) == 3:
                                        try:
                                            time_frame_obj = handle_stat_time_frame(split_vals[1])
                                            levels = re.split(r"(?<!\\)\-", split_vals[2])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                                stat_quals = None
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[2])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = unescape_string(sub_split_vals[0])
                                                    sub_split_vals = re.split(r"(?<!\\)\-", sub_split_vals[1])
                                                    
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                        except Exception:
                                            time_frame_obj = None
                                            stat_quals = None
                                            levels = re.split(r"(?<!\\)\-", split_vals[1])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                                stat_quals = None
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[1])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = unescape_string(sub_split_vals[0])
                                                    sub_split_vals = re.split(r"(?<!\\)\-", sub_split_vals[1])
                                                    
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                    else:
                                        time_frame_obj = handle_stat_time_frame(split_vals[1])
                                        levels = re.split(r"(?<!\\)\-", split_vals[3])
                                        if len(levels) == 1:
                                            start_level = 1
                                            end_level = ordinal_to_number(levels[0])
                                        else:
                                            start_level = ordinal_to_number(levels[0])
                                            end_level = ordinal_to_number(levels[1])
                                        values = re.split(r"(?<!\\)\~", split_vals[2])
                                        stat_quals = []
                                        for value in values:
                                            sub_split_vals = re.split(r"(?<!\\)\=", value)
                                            sub_stat = unescape_string(sub_split_vals[0])
                                            sub_split_vals = re.split(r"(?<!\\)-", sub_split_vals[1])
                                            
                                            if len(sub_split_vals) == 1:
                                                start_val = ordinal_to_number(sub_split_vals[0])
                                                if start_val > 0:
                                                    end_val = float("inf")
                                                elif start_val < 0:
                                                    end_val = start_val
                                                    start_val = -float("inf")
                                                else:
                                                    end_val = start_val
                                                stat_quals.append({
                                                    "stat" : sub_stat,
                                                    "start_val" : start_val,
                                                    "end_val" : end_val
                                                })
                                            else:
                                                stat_quals.append({
                                                    "stat" : sub_stat,
                                                    "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                    "end_val" : ordinal_to_number(sub_split_vals[1])
                                                })

                                    qualifier_obj["values"].append({
                                        "start_level" : start_level,
                                        "end_level" : end_level,
                                        "stat_quals" : stat_quals,
                                        "time_frame" : time_frame_obj,
                                        "stats" : stats
                                    })
                            
                            if qual_type:
                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                    
                        last_match = re.search(r"\b(no(?:t|n)?(?: |-))?(first|1st|last|this|past)?(?: ?(\S*) (game-minute|minute|min|game-shot|shot|s)s?)\b", time_frame)
                        if last_match:
                            compare_type = last_match.group(2)
                            time_unit = last_match.group(3)
                            if time_unit in ["first", "1st", "last", "this", "past"]:
                                compare_type = time_unit
                                time_unit = "1"

                            qual_type = last_match.group(4)
                            if not time_unit.strip():
                                time_start = 0
                                time_end = 1
                            else:
                                time_unit_spl = re.split(r"(?<!\\)-", time_unit)
                                if len(time_unit_spl) > 1:
                                    if "minute" in qual_type or "min" in qual_type:
                                        period_time_spl = time_unit_spl[0].split(":")
                                        if len(period_time_spl) > 1:
                                            time_start = (int(ordinal_to_number(period_time_spl[0])) * 60) + int(ordinal_to_number(period_time_spl[1]))
                                        else:
                                            time_start = (int(ordinal_to_number(period_time_spl[0])) * 60)
                                        period_time_spl = time_unit_spl[1].split(":")
                                        if len(period_time_spl) > 1:
                                            time_end = (int(ordinal_to_number(period_time_spl[0])) * 60) + int(ordinal_to_number(period_time_spl[1]))
                                        else:
                                            time_end = (int(ordinal_to_number(period_time_spl[0])) * 60)
                                    else:
                                        time_start = ordinal_to_number(time_unit_spl[0])
                                        time_end = ordinal_to_number(time_unit_spl[1])
                                else:
                                    time_start = 0
                                    if "minute" in qual_type or "min" in qual_type:
                                        period_time_spl = time_unit.split(":")
                                        if len(period_time_spl) > 1:
                                            time_end = (int(ordinal_to_number(period_time_spl[0])) * 60) + int(ordinal_to_number(period_time_spl[1]))
                                        else:
                                            time_end = (int(ordinal_to_number(period_time_spl[0])) * 60)
                                    else:
                                        time_end = ordinal_to_number(time_unit)

                            if qual_type == "game-minute":
                                qual_type = "Game Minute"
                            elif qual_type == "minute" or qual_type == "min":
                                qual_type = "Career Minute"
                                extra_stats.add("show-stat-toi")
                                extra_stats.add("show-stat-evtoi")
                                extra_stats.add("show-stat-pptoi")
                                extra_stats.add("show-stat-shtoi")
                                extra_stats.add("show-stat-toi_5v5")
                                extra_stats.add("current-stats-no-game")
                            elif qual_type == "game-shot":
                                qual_type = "Game Shot"
                            else:
                                qual_type = "Career Shot"
                                extra_stats.add("current-stats-no-game")

                            if compare_type and compare_type not in ("first", "1st"):
                                qual_type += " Reversed"

                            extra_stats.add("current-stats")

                            qualifier_obj = {}
                            qualifier_obj["negate"] = bool(last_match.group(1))
                            qualifier_obj["values"] = {
                                "start_val" : time_start,
                                "end_val" : time_end
                            }
                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_match = re.search(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?(?:season(?:[- ]))?(games?)", time_frame)
                        sub_last_match = re.search(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)( ([\w-]+)( reversed?)?)?", time_frame)
                        if not last_match and ("Start" in qualifiers or playoffs != "Only") and (not sub_last_match or sub_last_match.group(3).endswith("to") or sub_last_match.group(3).endswith("yester")):
                            last_match = re.search(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past) ?(\S*)", time_frame)
                        if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester") and (last_match.group(2) or not re.search(r"(no(?:t|n)?(?: |-))?(?:season(?:[- ]))?games? ([\w-]+)( reversed?)?", time_frame)):
                            compare_type = last_match.group(2)
                            skip_time = False
                            if not compare_type or not compare_type.strip():
                                if last_match.group(3) == "first" or last_match.group(3) == "1st" or last_match.group(3) == "this" or last_match.group(3) == "past" or last_match.group(3) == "last":
                                    compare_type = last_match.group(3)
                                    skip_time = True
                                else:
                                    compare_type = "special"

                            if compare_type == "1st":
                                compare_type = "first"

                            if not skip_time:
                                time_unit = last_match.group(3)
                                if time_unit and "season" not in time_unit:
                                    time_unit = ordinal_to_number(time_unit)
                                    if time_unit < 1:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                            else:
                                time_unit = 1
                            
                            if compare_type == "special":
                                qual_type = "Career Game"
                                qualifier_obj = {}
                                qualifier_obj["negate"] = bool(last_match.group(1))
                                qualifier_obj["values"] = {
                                    "start_val" : time_unit,
                                    "end_val" : time_unit
                                }
                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)
                            else:
                                qual_type = "Games"
                                if "season" in last_match.group(0):
                                    qual_type = "Season Games"
                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []

                                qualifiers[qual_type] = {
                                    "compare_type" : compare_type,
                                    "time_unit" : time_unit,
                                    "negate" : bool(last_match.group(1))
                                }

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_match = re.search(r"(no(?:t|n)?(?: |-))?(?:season(?:[- ]))?games? ([\w-]+)( reversed?)?", time_frame)
                        if last_match:
                            time_unit = re.split(r"(?<!\\)-", last_match.group(2))
                            if len(time_unit) == 1:
                                time_start = ordinal_to_number(time_unit[0])
                                time_end = ordinal_to_number(time_unit[0])
                            else:
                                time_start = ordinal_to_number(time_unit[0])
                                time_end = ordinal_to_number(time_unit[1])

                            qual_type = "Games"
                            if "season" in last_match.group(0):
                                qual_type = "Season Games"

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            
                            reverse = False
                            if last_match.group(3):
                                reverse = True

                            qualifiers[qual_type] = {
                                "start_val" : time_start,
                                "end_val" : time_end,
                                "reverse" : reverse,
                                "negate" : bool(last_match.group(1))
                            }

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        time_frame_type = "date"
                        if not time_frame:
                            time_start = 0
                            time_end = datetime.date.today().year
                        else:
                            unit = None
                            last_match = re.search(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)( ([\w-]+)( reversed?)?)?", time_frame)
                            if not last_match:
                                last_match = re.search(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past) ?(\S*)", time_frame)
                                unit = "season"
                                if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester") and playoffs == "Only":
                                    time_frame_type = "special-qual"
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester"):
                                compare_type = last_match.group(2)
                                if not compare_type or not compare_type.strip():
                                    if unit == "season" or (last_match.group(4) and (last_match.group(4).startswith("season") or last_match.group(3).startswith("year"))):
                                        compare_type = "special"
                                    else:
                                        compare_type = "last"

                                if compare_type == "1st":
                                    compare_type = "first"

                                time_unit = last_match.group(3)
                                if time_unit and not ("calendar" in time_unit or "date" in time_unit):
                                    time_unit = ordinal_to_number(time_unit)
                                    if time_unit < 1:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                if not unit:
                                    unit = last_match.group(4)
                                if ("calendar" in last_match.group(3) or "date" in last_match.group(3)):
                                    unit = last_match.group(3) + unit
                                if unit.startswith("season"):
                                    if len(last_match.groups()) > 3 and last_match.group(6):
                                        time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                        if len(time_unit) == 1:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[0])
                                        else:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[1])

                                        if time_frame_type != "special-qual":
                                            time_frame_type = "season-range"
                                            if last_match.group(7):
                                                time_frame_type = "season-range-reversed"
                                    else:
                                        if time_frame_type != "special-qual":
                                            time_frame_type = "season"
                                        if compare_type == "first":
                                            time_start = time_unit
                                        else:
                                            time_end = time_unit
                                else:
                                    days = 0
                                    weeks = 0
                                    months = 0
                                    years = 0

                                    is_seasons = False
                                    if "week" in unit:
                                        weeks = time_unit
                                    elif "month" in unit:
                                        months = time_unit
                                    elif "year" in unit:
                                        if "date" in unit or "calendar" in unit:
                                            years = time_unit
                                        else:
                                            if len(last_match.groups()) > 3 and last_match.group(6):
                                                time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                                time_start = -float("inf")
                                                time_end = float("inf")
                                                if len(time_unit) == 1:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[0])
                                                else:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[1])

                                                time_frame_type = "season-range"
                                                if last_match.group(7):
                                                    time_frame_type = "season-range-reversed"
                                            else:
                                                time_frame_type = "season"
                                                if compare_type == "first":
                                                    time_start = time_unit
                                                else:
                                                    time_end = time_unit
                                            is_seasons = True
                                    else:
                                        days = time_unit

                                    if not is_seasons:
                                        if compare_type == "first":
                                            time_start = datetime.date.min
                                            time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)

                                            if "week" in unit:
                                                time_end.seconds = 1
                                                time_end.minutes = weeks
                                            elif "month" in unit:
                                                time_end.seconds = 2
                                                time_end.minutes = months
                                            elif "year" in unit:
                                                time_end.seconds = 3
                                                time_end.minutes = years
                                            else:
                                                time_end.minutes = days

                                            if "calendar" in unit:
                                                time_end.microseconds = 1
                                        else:
                                            time_end = datetime.date.today()
                                            if "calendar" in unit:
                                                if "week" in unit:
                                                    time_end = time_end + datetime.timedelta(days=6 - time_end.weekday()) - dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                elif "month" in unit:
                                                    if time_end.day > 15:
                                                        time_end = datetime.datetime(time_end.year, time_end.month, calendar.monthrange(time_end.year, time_end.month)[1]).date()
                                                    else:
                                                        if time_end.month == 1:
                                                            time_end = datetime.datetime(time_end.year - 1, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                        else:
                                                            time_end = datetime.datetime(time_end.year, time_end.month - 1, calendar.monthrange(time_end.year, time_end.month - 1)[1]).date()
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    original_day = time_start.day
                                                    time_start = time_start.replace(day=1)
                                                    if original_day > 15:
                                                        if time_start.month == 12:
                                                            time_start = time_start.replace(month=1, year=time_start.year + 1)
                                                        else:
                                                            time_start = time_start.replace(month=(time_start.month + 1))
                                                elif "year" in unit:
                                                    time_end = datetime.datetime(time_end.year, 12, calendar.monthrange(time_end.year, 12)[1]).date() - dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                else:
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                            else:
                                                time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                
                                if compare_type == "special" and time_frame_type == "season":
                                    time_frame_type = "season-range"
                                
                                if last_match.group(1):
                                    qualifier_obj = {}
                                    qualifier_obj["negate"] = True
                                    qual_str = "Season" if unit.startswith("season") else "Dates"
                                    if qual_str == "Season":
                                        qualifier_obj["values"] = {
                                            "start_val" : time_start,
                                            "end_val" : time_end
                                        }
                                    else:
                                        qualifier_obj["values"] = [{
                                            "start_val" : time_start,
                                            "end_val" : time_end
                                        }]

                                    if not qual_str in qualifiers:
                                        qualifiers[qual_str] = []
                                    qualifiers[qual_str].append(qualifier_obj)

                                    time_start = 0
                                    time_end = datetime.date.today().year
                                    time_frame_type = "date"

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                            if time_frame:
                                replace_first_year = {
                                    "replace" : False
                                }

                                while True:
                                    m = re.search(r"no(?:t|n)?(?: |-)(.+)(?=no(?:t|n)?(?: |-)(?:.+))", time_frame)
                                    if not m:
                                        m = re.search(r"no(?:t|n)?(?: |-)(.+)", time_frame)
                                    if not m:
                                        break

                                    date_str = m.group(1)
                                    find_all_match = tuple(re.finditer(r"(?<!\\)-", date_str))
                                    if len(find_all_match) == 5:
                                        match_span = find_all_match[2].span()[0]
                                        time_frame_range = [date_str[:match_span], date_str[match_span + 1:]]
                                    else:
                                        time_frame_range = re.split(r"(?<!\\)\bto\b", date_str)
                                    try:
                                        sub_time_start = handle_string_year(time_frame_range[0].strip(), playoffs, True, replace_first_year)
                                    except ValueError:
                                        time_frame_range = re.split(r"(?<!\\)-", date_str)
                                        sub_time_start = handle_string_year(time_frame_range[0].strip(), playoffs, True, replace_first_year)

                                    if len(time_frame_range) == 2:
                                        sub_time_end = handle_string_year(time_frame_range[1].strip(), playoffs, False, replace_first_year)
                                    else:
                                        sub_time_end = sub_time_start
                                    
                                    if isinstance(sub_time_start, int) and not isinstance(sub_time_end, int):
                                        sub_time_end = sub_time_end.year
                                    elif isinstance(sub_time_end, int) and not isinstance(sub_time_start, int):
                                        sub_time_start = sub_time_start.year

                                    qualifier_obj = {}
                                    qualifier_obj["negate"] = True
                                    qual_str = "Year" if isinstance(sub_time_start, int) else "Dates"
                                    if qual_str == "Year":
                                        qualifier_obj["values"] = {
                                            "start_val" : sub_time_start,
                                            "end_val" : sub_time_end
                                        }
                                    else:
                                        qualifier_obj["values"] = [{
                                            "start_val" : sub_time_start,
                                            "end_val" : sub_time_end
                                        }]

                                    if not qual_str in qualifiers:
                                        qualifiers[qual_str] = []
                                    qualifiers[qual_str].append(qualifier_obj)

                                    time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                                
                                time_start = 0
                                time_end = datetime.date.today().year

                                if time_frame:
                                    find_all_match = tuple(re.finditer(r"(?<!\\)-", time_frame))
                                    if len(find_all_match) == 5:
                                        match_span = find_all_match[2].span()[0]
                                        time_frame_range = [time_frame[:match_span], time_frame[match_span + 1:]]
                                    else:
                                        time_frame_range = re.split(r"(?<!\\)\bto\b", time_frame)
                                    try:
                                        time_start = handle_string_year(time_frame_range[0].strip(), playoffs, True, replace_first_year)
                                    except ValueError:
                                        time_frame_range = re.split(r"(?<!\\)-", time_frame)
                                        time_start = handle_string_year(time_frame_range[0].strip(), playoffs, True, replace_first_year)

                                    if len(time_frame_range) == 2:
                                        time_end = handle_string_year(time_frame_range[1].strip(), playoffs, False, replace_first_year)
                                    else:
                                        time_end = time_start
                                        if not isinstance(time_start, int):
                                            if not playoffs:
                                                playoffs = "Include"

                                        if "Dates" in qualifiers:
                                            for dat_obj in qualifiers["Dates"]:
                                                for sub_dat_obj in dat_obj["values"]:
                                                    sub_dat_obj["start_val"] = sub_dat_obj["start_val"].replace(year = time_start)
                                                    sub_dat_obj["end_val"] = sub_dat_obj["end_val"].replace(year = time_start)
                                    
                                    if isinstance(time_start, int) and not isinstance(time_end, int):
                                        time_end = time_end.year
                                    elif isinstance(time_end, int) and not isinstance(time_start, int):
                                        time_start = time_start.year
                        
                        if time_frame_type == "special-qual":
                            qualifier_obj = {}
                            qualifier_obj["negate"] = False
                            qual_str = "Season Reversed" if time_start == None else "Season"
                            if not time_start or not time_end:
                                has_time_end = bool(time_end)
                                time_end = time_start if time_start else time_end
                                time_start = 1
                            qualifier_obj["values"] = {
                                "start_val" : time_start,
                                "end_val" : time_end
                            }
                            if not qual_str in qualifiers:
                                qualifiers[qual_str] = []
                            qualifiers[qual_str].append(qualifier_obj)

                            time_frame_type = "date"
                            time_start = 0
                            time_end = datetime.date.today().year
                                            
                        da_time_frames.append({
                            "time_start" : time_start,
                            "time_end" : time_end,
                            "type" : time_frame_type,
                            "add_type" : add_type, 
                            "playoffs" : playoffs if playoffs != "No" else None,
                            "qualifiers" : qualifiers
                        })
                    sub_parsed_time_frames.append(da_time_frames)
                parse_time_frames.append(sub_parsed_time_frames)
        else:
            parse_time_frames.append([[{
                "time_start" : 0,
                "time_end" : datetime.date.today().year,
                "type" : "date",
                "playoffs" : None,
                "add_type" : "plus",
                "qualifiers" : []
            }]])
    except BaseException:
        raise CustomMessageException("Invalid query format!")

    best_games_table = 0
    worst_games_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-game"):
            if "-" in extra_stat:
                best_games_table = int(extra_stat.split("-")[2])
            else:
                best_games_table = 1
        elif extra_stat.startswith("worst-game"):
            if "-" in extra_stat:
                worst_games_table = int(extra_stat.split("-")[2])
            else:
                worst_games_table = 1

    if remove_duplicates or remove_duplicate_games or "score" in extra_stats or "record" in extra_stats or "star" in extra_stats or "game" in extra_stats or "penalties" in extra_stats or "current-stats" in extra_stats or best_games_table or worst_games_table:
        for subb_frame in parse_time_frames:
            for subbb_frame in subb_frame:
                for time_frame in subbb_frame:
                    time_frame["qualifiers"]["Force Dates"] = [{
                        "negate" : False
                    }]

    while len(names) < len(parse_time_frames):
        names.append(names[len(names) - 1])

    while len(parse_time_frames) < len(names):
        parse_time_frames.append(copy.deepcopy(parse_time_frames[len(parse_time_frames) - 1]))

    for index, subb_name in enumerate(names):
        subb_frame = parse_time_frames[index]
        subb_names = re.split(r"(?<!\\)\+", subb_name.strip())
        while len(subb_names) < len(subb_frame):
            subb_names.append(subb_names[len(subb_names) - 1])

        while len(subb_frame) < len(subb_names):
            subb_frame.append(copy.deepcopy(subb_frame[len(subb_frame) - 1]))

    parsed_game_quals = set()

    name_count = sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
    player_str_set = set()
    for index, subb_date in enumerate(parse_time_frames):
        for subbbb_index, subbb_date in enumerate(subb_date):
            subb_names_with = []
            subb_names_against = []
            sub_matching_names = []
            for sub_index, sub_name in enumerate(names):
                sub_names_split = re.split(r"(?<!\\)\+", sub_name.strip())
                for subbbbbbb_index, subbb_name in enumerate(sub_names_split):
                    if len(sub_names_split) > 1:
                        if sub_index == index:
                            if subbbbbbb_index != subbbb_index:
                                subb_names_with.append(subbb_name)
                            else:
                                sub_matching_names.append(subbb_name)
                        else:
                            subb_names_against.append(subbb_name)
                    else:
                        if sub_index != index or subbbbbbb_index != subbbb_index:
                            subb_names_with.append(subbb_name)
                            subb_names_against.append(subbb_name)
                        else:
                            sub_matching_names.append(subbb_name)
            for subbbb_date in subbb_date:
                if "Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Day Of Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Day Of Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Day Of Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Day After Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Day After Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Day After Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Day Before Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Day Before Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Day Before Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Game After Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Game After Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Game After Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Game Before Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Game Before Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Game Before Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Season Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Season Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual, player_type,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Season Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Season After Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Season After Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual, player_type,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Season After Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Season Before Sub Query" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Season Before Sub Query"]:
                        for player_str in qual["values"]:
                            for match_name in sub_matching_names:
                                player_str = determine_player_str(qual, player_type,  "<" + match_name + "> [" + player_str + "]", subbbb_date, "Season Before Sub Query")
                                if player_str not in player_str_set:
                                    name_count += 1
                                    player_str_set.add(player_str)
                if "Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Playing Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Against"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Against")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Previous Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Previous Playing With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Previous Playing With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Previous Playing Against" in subbbb_date["qualifiers"]:
                   for qual in subbbb_date["qualifiers"]["Previous Playing Against"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Previous Playing Against")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Upcoming Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Upcoming Playing With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Upcoming Playing With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Upcoming Playing Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Upcoming Playing Against"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Upcoming Playing Against")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Game" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Game"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Same Game")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Opponents" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Opponents"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Same Opponents")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Date" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Date"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Playing Same Date")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Shot On" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Shot On"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Shot On")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "On Ice With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["On Ice With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "On Ice With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "On Ice Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["On Ice Against"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "On Ice Against")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Assisted On" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Assisted On"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Assisted On")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Assisted With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Assisted With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Assisted With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Points With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Points With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Points With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Assisted By" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Assisted By"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Assisted By")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Primary Assisted On" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Primary Assisted On"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Primary Assisted On")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Primary Assisted With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Primary Assisted With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Primary Assisted With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Primary Points With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Primary Points With"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Primary Points With")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Primary Assisted By" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Primary Assisted By"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Primary Assisted By")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Hit On" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Hit On"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Hit On")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Block On" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Block On"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Block On")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Penalty On" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Penalty On"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Penalty On")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Faceoff Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Faceoff Against"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Faceoff Against")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "Fight Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Fight Against"]:
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_str, subbbb_date, "Fight Against")
                            if player_str not in player_str_set:
                                name_count += 1
                                player_str_set.add(player_str)
                if "First Games" in subbbb_date["qualifiers"]:
                    if "First Games" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("First Games")
                if "First Seasons" in subbbb_date["qualifiers"]:
                    if "First Seasons" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("First Seasons")
                if "First Shots" in subbbb_date["qualifiers"]:
                    if "First Shots" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("First Shots")
                if "First Minutes" in subbbb_date["qualifiers"]:
                    if "First Minutes" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("First Minutes")
                if "Last Games" in subbbb_date["qualifiers"]:
                    if "Last Games" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("Last Games")
                if "Last Seasons" in subbbb_date["qualifiers"]:
                    if "Last Seasons" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("Last Seasons")
                if "Last Shots" in subbbb_date["qualifiers"]:
                    if "Last Shots" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("Last Shots")
                if "Last Minutes" in subbbb_date["qualifiers"]:
                    if "Last Minutes" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("Last Minutes")
                if "Current Age" in subbbb_date["qualifiers"]:
                    if "Current Age" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("Current Age")
                if "Current Season Age" in subbbb_date["qualifiers"]:
                    if "Current Season Age" not in parsed_game_quals:
                        name_count += sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
                        parsed_game_quals.add("Current Season Age")
                if "Facing Former Team" in subbbb_date["qualifiers"] or "Facing Former Franchise" in subbbb_date["qualifiers"] or "With New Team" in subbbb_date["qualifiers"] or "With New Franchise" in subbbb_date["qualifiers"] or "Game After Sub Query" in subbbb_date["qualifiers"] or "Game Before Sub Query" in subbbb_date["qualifiers"]:
                    name_count += 1
            name_count += len(subbb_date) - 1

    if name_count > 20:
        raise CustomMessageException("You can only compare a max of twenty players!")

    years_table = "year" in extra_stats
    years_table_career = "career-year" in extra_stats
    teams_table = "team" in extra_stats
    teams_table_career = "career-team" in extra_stats
    franchise_table = "franchise" in extra_stats
    franchise_table_career = "career-franchise" in extra_stats
    numbers_table = "number" in extra_stats
    numbers_table_career = "career-number" in extra_stats
    games_table = "game" in extra_stats
    games_table_career = "career-game" in extra_stats

    if comment_obj:
        comment_obj["total_players"] = name_count
        try:
            string_output = format_alert_message(comment_obj, False)
            if not comment_obj["debug_mode"]:
                if not comment_obj["reply"]:
                    if not comment_obj["is_approved"]:
                        comment_obj["comment"].author.message("NHLCompareBot Comparison " + comment_obj["comment"].id, string_output)
                    else:
                        comment_obj["reply"] = comment_obj["comment"].reply(string_output)
                logger.info("#" + str(threading.get_ident()) + "#   User alerted")
        except Exception:
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
    
    if not player_type["da_type"]:
        player_type["da_type"] = get_init_type(names, parse_time_frames)

    handle_against_qual(names, parse_time_frames, comment_obj, extra_stats)
    handle_same_games_qual(names, player_type, parse_time_frames, comment_obj, extra_stats)

    for subb_frames in parse_time_frames:
        for subbb_frames in subb_frames:
            for time_frame in subbb_frames:
                if "Career Shot" in time_frame["qualifiers"] or "Career Shot Reversed" in time_frame["qualifiers"] or "Game Shot" in time_frame["qualifiers"] or "Game Shot Reversed" in time_frame["qualifiers"]:
                    if player_type["da_type"]["type"] == "Skater":
                        extra_stats.add("Shot On")
                        if "current-stats" in extra_stats:
                            extra_stats.remove("current-stats")

    player_datas = []
    arguments = []
    for index, sub_name in enumerate(names):
        arguments.append([sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj])
    with multiprocessing.Pool(processes=multiprocessing.cpu_count()) as pool:
        sub_player_datas = pool.starmap(handle_name_threads, arguments)
        for sub_player_data in sub_player_datas:
            player_datas += sub_player_data
    # with ThreadPoolExecutor(max_workers=5) as sub_executor:
    #     futures = []
    #     for index, sub_name in enumerate(names):
    #         futures.append(sub_executor.submit(handle_name_threads, sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj))
    #     for future in concurrent.futures.as_completed(futures):
    #         player_datas += future.result()
    # for index, sub_name in enumerate(names):
    #     player_datas += handle_name_threads(sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)

    for player_data in player_datas:
        if player_data["stat_values"]["LastUpdated"] and (not last_updated or player_data["stat_values"]["LastUpdated"] < last_updated):
            last_updated = player_data["stat_values"]["LastUpdated"]

    if not player_type["da_type"]:
        player_type["da_type"] = {
            "type" : "Skater"
        }
    
    player_datas.sort(key=lambda player_data: player_data["sort_index"])

    if years_table or years_table_career or games_table or teams_table or teams_table_career or franchise_table or franchise_table_career or numbers_table or numbers_table_career:
        datas_by_index = {}
        for player_data in player_datas:
            if player_data["sort_index"] not in datas_by_index:
                datas_by_index[player_data["sort_index"]] = []
            datas_by_index[player_data["sort_index"]].append(player_data)
        max_value = max(len(datas_by_index[index]) for index in datas_by_index)
        player_datas = []
        for index in range(0, max_value + 1):
            for sub_index in datas_by_index:
                if len(datas_by_index[sub_index]) > index:
                    player_datas.append(datas_by_index[sub_index][index])

    return player_datas, last_updated, original_comment, hide_table, extra_stats

def get_init_type(names, time_frames):
    for index, sub_name in enumerate(names):
        sub_names = re.split(r"(?<!\\)\+", sub_name.strip())
        for sub_index, name in enumerate(sub_names):
            real_index = sub_index if len(time_frames[index]) > sub_index else len(time_frames[index]) - 1
            player_id, player_page = get_player(name, time_frames[index][real_index])
            if player_id and player_page:
                return get_player_type(player_page)

def handle_name_threads(sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj):
    try:
        player_datas = []

        years_table = "year" in extra_stats
        years_table_career = "career-year" in extra_stats
        games_table = "game" in extra_stats
        games_table_career = "career-game" in extra_stats
        teams_table = "team" in extra_stats
        teams_table_career = "career-team" in extra_stats
        franchise_table = "franchise" in extra_stats
        franchise_table_career = "career-franchise" in extra_stats
        numbers_table = "number" in extra_stats
        numbers_table_career = "career-number" in extra_stats
        best_table = 0
        worst_table = 0
        for extra_stat in extra_stats:
            if extra_stat.startswith("best-season"):
                if len(extra_stat.split("-")) == 3:
                    best_table = int(extra_stat.split("-")[2])
                else:
                    best_table = 1
            elif extra_stat.startswith("worst-season"):
                if len(extra_stat.split("-")) == 3:
                    worst_table = int(extra_stat.split("-")[2])
                else:
                    worst_table = 1
        best_games_table = 0
        worst_games_table = 0
        for extra_stat in extra_stats:
            if extra_stat.startswith("best-game"):
                if len(extra_stat.split("-")) == 3:
                    best_games_table = int(extra_stat.split("-")[2])
                else:
                    best_games_table = 1
            elif extra_stat.startswith("worst-game"):
                if len(extra_stat.split("-")) == 3:
                    worst_games_table = int(extra_stat.split("-")[2])
                else:
                    worst_games_table = 1
                
        sub_names = re.split(r"(?<!\\)\+", sub_name.strip())
        player_data, sub_player_datas = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)

        if (years_table or years_table_career) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            seasons = sorted(list(set([row["Year"] for row in player_data["stat_values"]["all_rows"]])))
            if len(seasons) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(seasons) * len(parse_time_frames[index]) * len(sub_names)
                    
                for season in seasons:
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["time_start"] = season
                            time_frame["time_end"] = season
                            time_frame["type"] = "date"
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                years_table = False
                years_table_career = False
        
        if (best_table or worst_table) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            import numbers
            if player_type["da_type"]:
                for header in headers[player_type["da_type"]["type"]].keys():
                    if not header.startswith("Player"):
                        if isinstance(player_data["stat_values"][header], numbers.Number):
                            player_data["stat_values"][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"][header] = ""

            seasons = calculate_chunks(sorted(list(set([row["Year"] for row in player_data["stat_values"]["all_rows"]]))), best_table if best_table else worst_table)
            if comment_obj:
                comment_obj["total_players"] += len(seasons) * len(parse_time_frames[index]) * len(sub_names)
                
            season_player_datas = []
            for season in seasons:
                clear_time_frames(parse_time_frames[index])
                for subbb_frames in parse_time_frames[index]:
                    for time_frame in subbb_frames:
                        time_frame["time_start"] = season[0]
                        time_frame["time_end"] = season[len(season) - 1]
                        time_frame["type"] = "date"
                sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                season_player_datas.append(sub_player_data)
            combined_datas = calculate_best(player_data, season_player_datas, player_type, extra_stats, best_table)
            if combined_datas["stat_values"]["GS"]:
                player_datas.append(combined_datas)
            else:
                best_table = False
                worst_table = False
        else:
            best_table = False
            worst_table = False
        
        if (teams_table or teams_table_career) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            franchises = {}
            for row in player_data["stat_values"]["all_rows"]:
                team = row["Tm"]
                year = str(row["Year"])
                franchises[team].add(year)
            if len(franchises) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(franchises) * len(parse_time_frames[index]) * len(sub_names)
                    
                for team in sorted(franchises.items(), key=lambda item: len(item[1]), reverse=True):
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Team"] = [{
                                "negate" : False,
                                "values" : [
                                    team[0].lower()
                                ]
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                teams_table = False
                teams_table_career = False
        
        if (franchise_table or franchise_table_career) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            franchises = {}
            for row in player_data["stat_values"]["all_rows"]:
                team = row["Tm"]
                year = str(row["Year"])
                team_franchise = team_main_abbr[year][team]
                if team_franchise not in franchises:
                    franchises[team_franchise] = set()
                franchises[team_franchise].add(year)
            if len(franchises) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(franchises) * len(parse_time_frames[index]) * len(sub_names)
                    
                for team in sorted(franchises.items(), key=lambda item: len(item[1]), reverse=True):
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Team Franchise"] = [{
                                "negate" : False,
                                "values" : [
                                    team[0].lower()
                                ]
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                franchise_table = False
                franchise_table_career = False
        
        if numbers_table or numbers_table_career:
            numbers = []
            for sub_player_data in sub_player_datas:
                player_numbers = sorted(sub_player_data["player_all_numbers"], key=lambda num: num["start_year"])
                numbers += [number["number"] for number in player_numbers]
            numbers =  list(dict.fromkeys(numbers))
            if len(numbers) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(numbers) * len(parse_time_frames[index]) * len(sub_names)
                    
                for number in numbers:
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Season Number"] = [{
                                "negate" : False,
                                "values" : {
                                    "start_val" : number,
                                    "end_val" : number
                                }
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                numbers_table = False
                numbers_table_career = False
            
        if (games_table or games_table_career):
            rows_count = 0
            for subb_player_data in sub_player_datas:
                for row in subb_player_data["rows"]:
                    rows_count += 1
            
            if rows_count > 20:
                raise CustomMessageException("Cannot show more than 20 games!")
            
            if rows_count > 1:
                for subb_player_data in sub_player_datas:
                    for row in subb_player_data["rows"]:
                        game_player_data = copy.copy(subb_player_data)
                        game_player_data["rows"] = [row]
                        game_player_data["DateStart"] = [row["Date"]]
                        game_player_data["DateEnd"] = [row["Date"]]
                        game_player_data["YearStart"] = [row["Year"]]
                        game_player_data["YearEnd"] = [row["Year"]]

                        sub_player_data = combine_player_datas([game_player_data], player_type, [], [], parse_time_frames[index], "add", remove_duplicates, remove_duplicate_games, extra_stats)
                        player_datas.append(sub_player_data)
            else:
                games_table = False
                games_table_career = False
        
        if (best_games_table or worst_games_table) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            import numbers
            if player_type["da_type"]:
                for header in headers[player_type["da_type"]["type"]].keys():
                    if not header.startswith("Player"):
                        if isinstance(player_data["stat_values"][header], numbers.Number):
                            player_data["stat_values"][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"][header] = ""

            game_player_datas = []
            for subb_player_data in sub_player_datas:
                rows = []
                for row in subb_player_data["rows"]:
                    rows.append(row)
                rows = calculate_chunks(rows, best_games_table if best_games_table else worst_games_table)
                for row in rows:
                    subbb_player_data = {
                        "ids" : [subb_player_data["id"]],
                        "nhl_ids" : [subb_player_data["nhl_id"]],
                        "player_position" : subb_player_data["player_position"],
                        "player_cap" : subb_player_data["player_cap"],
                        "has_season_stats" : subb_player_data["has_season_stats"],
                        "stat_values" : {
                            "YearStart" : subb_player_data["YearStart"],
                            "YearEnd" : subb_player_data["YearEnd"],
                            "DateStart" : subb_player_data["DateStart"],
                            "DateEnd" : subb_player_data["DateEnd"],
                            "is_playoffs" : subb_player_data["is_playoffs"],
                            "Player" : [subb_player_data["Player"]],
                            "Player_Score" : [subb_player_data["Player"]],
                            "Player_5v5"  : [subb_player_data["Player"]],
                            "Player_Sit" : [subb_player_data["Player"]],
                            "Player_Awards" : [subb_player_data["Player"]],
                            "Player_Penalty" : [subb_player_data["Player"]],
                            "is_shift_data" : False,
                            "is_leading_data" : False,
                            "is_shot_on_data" : False,
                            "is_strength_data" : False,
                            "is_on_ice_data" : False,
                            "is_indv_shift_data" : False,
                            "any_missing_games" : [],
                            "any_missing_toi" : [],
                            "all_rows" : row
                        }
                    }
                    calculated_values = calculate_values(row, player_type, subbb_player_data, extra_stats)
                    for stat in calculated_values["stat_values"]:
                        if stat not in subbb_player_data["stat_values"]:
                            subbb_player_data["stat_values"][stat] = calculated_values["stat_values"][stat]
                    game_player_datas.append(subbb_player_data)
            combined_datas = calculate_best(player_data, game_player_datas, player_type, extra_stats, best_games_table)
            if combined_datas["stat_values"]["GP"]:
                player_datas.append(combined_datas)
            else:
                best_games_table = False
                worst_games_table = False
        else:
            best_games_table = False
            worst_games_table = False

        clear_time_frames(parse_time_frames[index])

        if not games_table and not years_table and not teams_table and not franchise_table and not numbers_table and not best_table and not worst_table and not best_games_table and not worst_games_table:
            player_datas.append(player_data)
        
        for player_data in player_datas:
            player_data["sort_index"] = index
        
        return player_datas
    except Exception as err:
        logger.error(traceback.format_exc())
        raise err

def calculate_chunks(da_list, size):
    all_items = []
    for index, item in enumerate(da_list):
        sub_array = [item]
        if len(sub_array) == size:
            all_items.append(sub_array)
            continue
        for sub_index in range(index + 1, len(da_list)):
            sub_item = da_list[sub_index]
            sub_array.append(sub_item)
            if len(sub_array) == size:
                all_items.append(sub_array)
                break
    return all_items

def calculate_best(player_data, player_datas, player_type, extra_stats, is_best):
    has_non_playoffs = False
    has_playoffs = False
    has_season_stats = True
    for sub_player_datas in player_datas:
        if sub_player_datas["stat_values"]["is_playoffs"] != "Only":
            has_non_playoffs = True
        
        if sub_player_datas["stat_values"]["is_playoffs"] and sub_player_datas["stat_values"]["is_playoffs"] != "No":
            has_playoffs = True
        
        if not sub_player_datas["has_season_stats"]:
            has_season_stats = False

    has_toi_stats = True
    for index, sub_player_datas in enumerate(player_datas):
        if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
            value = handle_table_data(sub_player_datas, player_type, "Per Game/60 Minutes", "TOI/GP", {}, {}, index, has_season_stats, has_playoffs, has_non_playoffs, True, True, extra_stats)
            if value == "N/A" or value == None:
                has_toi_stats = False
                break

    highest_vals, lowest_vals = calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, has_playoffs, has_season_stats, has_toi_stats, 0, extra_stats)
    if is_best:
        for header in highest_vals:
            player_data["stat_values"][header] = highest_vals[header]["original_value"]
    else:
        for header in lowest_vals:
            player_data["stat_values"][header] = lowest_vals[header]["original_value"]
    
    return player_data

def clear_time_frames(subb_frames):
    for subbb_frames in subb_frames:
        for time_frame in subbb_frames:
            for qualifier in time_frame["qualifiers"]:
                if qualifier == "Min Stat" or qualifier == "Max Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Max Stretch Formula" or qualifier == "Count Streak Formula" or qualifier == "Quickest" or qualifier == "Slowest" or qualifier == "Season Stat" or qualifier == "Previous Season Stat" or qualifier == "Upcoming Season Stat" or qualifier == "Total Games Stat":
                    for qual_obj in time_frame["qualifiers"][qualifier]:
                        for sub_qualifier in qual_obj["values"]:
                            sub_qualifier.pop("explain_str", None)
                            
def handle_stat_time_frame(time_frame, hide_exceptions=False):
    match = re.match(r"\b(only-season-?(?:st-?)?(?:end-?)?)?(g-st(?:~[\S]+)?|games?-start(?:~[\S]+)?|tg(?:~[\S]+)?|totalgames?(?:~[\S]+)?|s-st(?:~[\S]+)?|g-end(?:~[\S]+)?|games?-end(?:~[\S]+)?|s-end(?:~[\S]+)?|seasons?-end(?:~[\S]+)?|d(?:~[\S]+)?|days?(?:~[\S]+)?|w(?:~[\S]+)?|weeks?(?:~[\S]+)?|m(?:~[\S]+)?|months?(?:~[\S]+)?|y(?:~[\S]+)?|years?(?:~[\S]+)?|calw(?:~[\S]+)?|calendarweeks?(?:~[\S]+)?|calm(?:~[\S]+)?|calendarmonths?(?:~[\S]+)?|caly(?:~[\S]+)?|calendaryears?(?:~[\S]+)?|g(?:~[\S]+)?|games?(?:~[\S]+)?|s(?:~[\S]+)?|seasons?(?:~[\S]+)?|t(?:~[\S]+)?|teams?(?:~[\S]+)?|o(?:~[\S]+)?|opponents?(?:~[\S]+)?)?\b", time_frame)
    
    qualifier = match.group(2)
    if not qualifier:
        if match.group(1):
            qualifier = "games"
        else:
            raise Exception("Invalid query: " + time_frame)
    
    if qualifier.startswith("d") or qualifier.startswith("day"):
        qual_type = "Days"
    elif qualifier.startswith("w") or qualifier.startswith("week"):
        qual_type = "Weeks"
    elif qualifier.startswith("m") or qualifier.startswith("month"):
        qual_type = "Months"
    elif qualifier.startswith("y") or qualifier.startswith("year"):
        qual_type = "Years"
    elif qualifier.startswith("calw") or qualifier.startswith("calendarweek"):
        qual_type = "Calendar-Weeks"
    elif qualifier.startswith("calm") or qualifier.startswith("calendarmonth"):
        qual_type = "Calendar-Months"
    elif qualifier.startswith("caly") or qualifier.startswith("calendaryear"):
        qual_type = "Calendar-Years"
    elif qualifier.startswith("g") or qualifier.startswith("game"):
        qual_type = "Games"
    elif qualifier.startswith("tg") or qualifier.startswith("totalgame"):
        qual_type = "Total Games"
    elif qualifier.startswith("s") or qualifier.startswith("season"):
        qual_type = "Seasons"
    elif qualifier.startswith("t") or qualifier.startswith("team"):
        qual_type = "Teams"
    elif qualifier.startswith("o") or qualifier.startswith("opponent"):
        qual_type = "Opponents"

    if match.group(1):
        qual_type = "Only-Season-" + qual_type
        if "st" in match.group(1):
            qual_type += "-Start"
        elif "end" in match.group(1):
            qual_type += "-End"

    if qualifier.endswith("-st"):
        qual_type += "-Start"
    elif qualifier.endswith("-end"):
         qual_type += "-End"

    qual_split = re.split(r"(?<!\\)\=", time_frame)
    if len(qual_split) > 1:
        raise Exception("Cant have = in query: " + time_frame)

    qual_split = re.split(r"(?<!\\)\~", qualifier)
    if len(qual_split) > 1:
        qual_nums = re.split(r"(?<!\\)\-", qual_split[1])
        if len(qual_nums) > 1:
            qual_num_start = ordinal_to_number(qual_nums[0])
            qual_num_end = ordinal_to_number(qual_nums[1])
        else:
            qual_num_start = ordinal_to_number(qual_nums[0])
            qual_num_end = ordinal_to_number(qual_nums[0])
    else:
        qual_num_start = 1
        qual_num_end = 1

    return {
        "qual_type" : qual_type,
        "qual_num_start" : qual_num_start,
        "qual_num_end" : qual_num_end
    }

def handle_against_qual(names, time_frames, comment_obj, extra_stats):
    players_map = {}
    for index, subb_frames in enumerate(time_frames):
        for subbbb_index, subbb_frames in enumerate(subb_frames):
            subb_names_with = []
            subb_names_against = []
            sub_matching_names = []
            for sub_index, sub_name in enumerate(names):
                sub_names_split = re.split(r"(?<!\\)\+", sub_name.strip())
                for subbbbbbb_index, subbb_name in enumerate(sub_names_split):
                    if len(sub_names_split) > 1:
                        if sub_index == index:
                            if subbbbbbb_index != subbbb_index:
                                subb_names_with.append(subbb_name)
                            else:
                                sub_matching_names.append(subbb_name)
                        else:
                            subb_names_against.append(subbb_name)
                    else:
                        if sub_index != index or subbbbbbb_index != subbbb_index:
                            subb_names_with.append(subbb_name)
                            subb_names_against.append(subbb_name)
                        else:
                            sub_matching_names.append(subbb_name)
            for time_frame in subbb_frames:
                if "Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Day Of Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Day Of Sub Query", sub_matching_names, time_frame, "Date", comment_obj, players_map, extra_stats)
                if "Day After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Day After Sub Query", sub_matching_names, time_frame, "DateAfter", comment_obj, players_map, extra_stats)
                if "Day Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Day Before Sub Query", sub_matching_names, time_frame, "DateBefore", comment_obj, players_map, extra_stats)
                if "Game After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Game After Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Game Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Game Before Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Season Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Season Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map, extra_stats)
                if "Season After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Season After Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map, extra_stats)
                if "Season Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Season Before Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map, extra_stats)
                if "Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Previous Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Previous Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Upcoming Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Upcoming Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Playing Same Game" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Same Game", subb_names_with, time_frame, "Either", comment_obj, players_map, extra_stats)
                if "Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Previous Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Previous Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Upcoming Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Upcoming Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Playing Same Opponents" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Same Opponents", subb_names_against, time_frame, "Same Opponent", comment_obj, players_map, extra_stats)
                if "Playing Same Date" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Playing Same Date", subb_names_against, time_frame, "Date", comment_obj, players_map, extra_stats)
                if "Shot On" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Shot On", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "On Ice With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "On Ice With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "On Ice Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "On Ice Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Assisted On" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Assisted On", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Assisted With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Assisted With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Points With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Points With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Assisted By" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Assisted By", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Primary Assisted On" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Primary Assisted On", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Primary Assisted With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Primary Assisted With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Primary Points With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Primary Points With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Primary Assisted By" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Primary Assisted By", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Hit On" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Hit On", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Block On" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Block On", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Penalty On" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Penalty On", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Faceoff Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Faceoff Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Fight Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], "Fight Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)

def handle_same_games_qual(names, player_type, time_frames, comment_obj, extra_stats):
    qual_map = {}
    for index, sub_name in enumerate(names):
        for subbb_frames in time_frames[index]:
            for time_frame in subbb_frames:
                if "First Games" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Games", subbb_frames, time_frame, player_type, "Games", True, comment_obj, qual_map, extra_stats)
                if "First Minutes" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Minutes", subbb_frames, time_frame, player_type, "Career Minute", True, comment_obj, qual_map, extra_stats)
                if "First Shots" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Shots", subbb_frames, time_frame, player_type, "Career Shot", True, comment_obj, qual_map, extra_stats)
                if "First Seasons" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Seasons", subbb_frames, time_frame, player_type, "Seasons", True, comment_obj, qual_map, extra_stats)
                if "Last Games" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Games", subbb_frames, time_frame, player_type, "Games", False, comment_obj, qual_map, extra_stats)
                if "Last Minutes" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Minutes", subbb_frames, time_frame, player_type, "Career Minute", False, comment_obj, qual_map, extra_stats)
                if "Last Shots" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Shots", subbb_frames, time_frame, player_type, "Career Shot", False, comment_obj, qual_map, extra_stats)
                if "Last Seasons" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Seasons", subbb_frames, time_frame, player_type, "Seasons", False, comment_obj, qual_map, extra_stats)
                if "Current Age" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Current Age", subbb_frames, time_frame, player_type, "Age", False, comment_obj, qual_map, extra_stats)
                if "Current Season Age" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Current Season Age", subbb_frames, time_frame, player_type, "Season Age", False, comment_obj, qual_map, extra_stats)
    
    for index, sub_name in enumerate(names):
        for subbb_frames in time_frames[index]:
            for time_frame in subbb_frames:
                for qual_str in qual_map:
                    min_value = qual_map[qual_str]["min_value"]
                    is_first =  qual_map[qual_str]["is_first"]
                    new_qual_type = qual_map[qual_str]["new_qual_type"]

                    if new_qual_type == "Games":
                        compare_type = "first" if is_first else "last" 
                        time_frame["qualifiers"][new_qual_type] = {
                            "compare_type" : compare_type,
                            "time_unit" : int(min_value)
                        }
                    elif new_qual_type == "Career Minute" or new_qual_type == "Career Shot":
                        if not is_first:
                            new_qual_type += " Reversed"
                        time_frame["qualifiers"][new_qual_type] = [{
                            "values" : {
                                "start_val" : 0,
                                "end_val" : int(min_value)
                            },
                            "negate" : False
                        }]
                    elif new_qual_type == "Seasons":
                        time_start = None
                        time_end = None
                        if is_first:
                            time_start = min_value
                        else:
                            time_end = min_value

                        time_frame["time_start"] = time_start
                        time_frame["time_end"] = time_end
                        time_frame["type"] = "seasons"
                    else:
                        if new_qual_type == "Age":
                            compare_str = ""
                            if min_value.years:
                                compare_str += str(min_value.years).replace("-", "") + "Y"
                            if min_value.months:
                                if min_value.years:
                                    compare_str += "-"
                                compare_str += str(min_value.months).replace("-", "") + "M"
                            if min_value.days:
                                if min_value.years or min_value.months:
                                    compare_str += "-"
                                compare_str += str(min_value.days).replace("-", "") + "D"
                        else:
                            compare_str = ""
                            if min_value.years:
                                compare_str += str(min_value.years).replace("-", "") + "Y"

                        time_frame["qualifiers"][new_qual_type] = [{
                            "negate" : False,
                            "time_unit_start" : datetime.date.min,
                            "time_unit_end" : dateutil.relativedelta.relativedelta(years=min_value.years, months=min_value.months, days=min_value.days),
                            "compare_str" : compare_str
                        }]

def handle_the_quals(qualifiers, qual_str, subb_names, time_frame, key, comment_obj, players_map, extra_stats):
    the_quals = qualifiers[qual_str]
    new_quals = []
    for qualifier in the_quals:
        players = []
        seperate_quals = not "values" in qualifier
        for player_str in (qualifier["values"] if not seperate_quals else subb_names):
            if "Sub Query" in qual_str:
                for match_name in subb_names:
                    sub_handle_the_quals(players, qualifier, qual_str, "<" + match_name + "> [" + player_str + "]", time_frame, key, comment_obj, players_map, extra_stats)
            else:
                sub_handle_the_quals(players, qualifier, qual_str, player_str, time_frame, key, comment_obj, players_map, extra_stats)

        if seperate_quals:
            for player in players:
                new_qual = copy.deepcopy(qualifier)
                new_qual["values"] = [player]
                new_quals.append(new_qual)
        else:
            qualifier["values"] = players
            new_quals.append(qualifier)
    
    qualifiers[qual_str] = new_quals

def sub_handle_the_quals(players, qualifier, qual_str, player_str, time_frame, key, comment_obj, players_map, extra_stats):
    new_search = False

    player_str = determine_player_str(qualifier, player_str, time_frame, qual_str)

    player_type = {
        "da_type" : None
    }

    if player_str in players_map:
        player_datas = players_map[player_str]
    else:
        player_datas = handle_player_string(player_str, player_type, None, False, None)[0]
        players_map[player_str] = player_datas
        new_search = True

    for player_data in player_datas:
        if player_data["stat_values"]["Player"] == ["No Player Match!"]:
            continue

        player_games = {}

        missing_games = player_data["stat_values"]["any_missing_games"]
        missing_toi = player_data["stat_values"]["any_missing_toi"]

        if "all_rows" in player_data["stat_values"]:
            for row in player_data["stat_values"]["all_rows"]:
                if key == "Same Opponent":
                    date = row["Year"]
                    opponent = row["Opponent"]
                    if not opponent in player_games:
                        player_games[opponent] = set()
                    player_games[opponent].add(date)
                elif key == "Game":
                    player_games[row["GameLink"]] = True
                elif key == "Season":
                    player_games[row["Year"]] = True
                elif key == "Date":
                    date = row["Date"]
                    opponent = row[key]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)
                elif key == "DateAfter":
                    date = row["Date"] + datetime.timedelta(days=1)
                    opponent = row["Tm"]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)
                elif key == "DateBefore":
                    date = row["Date"] - datetime.timedelta(days=1)
                    opponent = row["Tm"]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)
                elif key == "Either":
                    date = row["Date"]
                    if not row["Tm"].lower() in player_games:
                        player_games[row["Tm"].lower()] = []
                    player_games[row["Tm"].lower()].append(date)
                    if not row["Opponent"].lower() in player_games:
                        player_games[row["Opponent"].lower()] = []
                    player_games[row["Opponent"].lower()].append(date)
                else:
                    date = row["Date"]
                    opponent = row[key]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)

        for index, player_name in enumerate(player_data["stat_values"]["Player"]):
            players.append({
                "id" : player_data["ids"][index],
                "nhl_id" : player_data["nhl_ids"][index],
                "name" : player_name,
                "missing_games" : missing_games,
                "missing_toi" : missing_toi,
                "query" : player_data["stat_values"]["Raw Quals"],
                "games" : player_games
            })

    if comment_obj and new_search and comment_obj["is_approved"]:
        try:
            string_output = format_alert_message(comment_obj)
            if comment_obj["reply"]:
                if isinstance(comment_obj["reply"], Message):
                    #comment_obj["comment"].reply(string_output.split(alert_message + "\n\n", 1)[1])
                    pass
                else:
                    if display_progress_as_edit:
                        comment_obj["reply"].edit(string_output)
                    #else:
                    #    comment_obj["reply"].delete()
                    #    comment_obj["reply"] = None
                    #    comment_obj["reply"] = comment_obj["comment"].reply(string_output)
                logger.info("#" + str(threading.get_ident()) + "#   User alert edited")
        except Exception:
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())

def determine_player_str(qualifier, player_str, time_frame, qual_str):
    player_str = unescape_string(player_str)
            
    if not "<" in player_str:
        player_str = "<" + player_str + ">"
    player_str = "!nhlcompare " + player_str

    if "values" in qualifier:
        try:
            bracket_index = player_str.index("]")
        except ValueError:
            player_str += " []"

        if time_frame["playoffs"] and time_frame["playoffs"] != "No" and not re.search(r"\b(no(?:t|n)? ?)?-?(?:includes?|including|and|with)(?: |-)?(?:playoffs?|post-?seasons?)(?!-)\b", player_str) and not re.search(r"\b(no(?:t|n)? ?)?-?(?:playoffs?|post-?seasons?)(?!-)\b", player_str):
            bracket_index = player_str.index("]")
            playoffs_str = "playoffs" if time_frame["playoffs"] == "Only" else "including playoffs"
            player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
    else:
        player_str += " [" + qualifier["time_frame_str"] + "]"
    
    bracket_index = player_str.index("]")

    if not qual_str in ["Season Sub Query", "Season After Sub Query", "Season Before Sub Query"]:
        player_str = player_str[:bracket_index] + " force-dates" + player_str[bracket_index:]

    if qual_str in ["Assisted On", "Assisted With", "Points With", "Assisted By", "Primary Assisted On", "Primary Assisted With", "Primary Points With", "Primary Assisted By", "Hit On", "Block On", "Penalty On", "Faceoff Against", "Fight Against"]:
        player_str = player_str[:bracket_index] + " skater" + player_str[bracket_index:]
    elif qual_str in ["Shot On"]:
        player_str = player_str[:bracket_index] + " goalie" + player_str[bracket_index:]
    
    if "Ignore Start" not in time_frame["qualifiers"]:
        if "Start If Goalie" in time_frame["qualifiers"]:
            if time_frame["qualifiers"]["Start If Goalie"][0]["negate"]:
                bracket_index = player_str.index("]")
                playoffs_str = "not start-if-goalie"
                player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
            else:
                bracket_index = player_str.index("]")
                playoffs_str = "start-if-goalie"
                player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
        else:
            if "Start" in time_frame["qualifiers"]:
                if time_frame["qualifiers"]["Start"][0]["negate"]:
                    bracket_index = player_str.index("]")
                    playoffs_str = "not starts"
                    player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
                else:
                    bracket_index = player_str.index("]")
                    playoffs_str = "starts"
                    player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]

    return player_str

def handle_the_same_games_quals(sub_name, qual_str, subbb_frames, time_frame, player_type, new_qual_type, is_first, comment_obj, qual_map, extra_stats):
    del time_frame["qualifiers"][qual_str]

    names = re.split(r"(?<!\\)\+", sub_name.strip())

    for name in names:
        min_value = float("inf")
        player_id, player_page = get_player(name, subbb_frames)
        if player_id and player_page:
            player_data = handle_multi_player_data(player_id, subbb_frames, player_type, player_page, False, False, extra_stats, comment_obj)[0]
            
            player_data["stat_values"] = {}
            player_data["stat_values"]["DateStart"] = player_data["DateStart"]
            player_data["stat_values"]["DateEnd"] = player_data["DateEnd"]
            player_data["stat_values"]["YearStart"] = player_data["YearStart"]
            player_data["stat_values"]["YearEnd"] = player_data["YearEnd"]
            player_data["stat_values"]["is_playoffs"] = None
            if time_frame["playoffs"] == "Only":
                player_data["stat_values"]["is_playoffs"] = "Only"
            elif time_frame["playoffs"]:
                player_data["stat_values"]["is_playoffs"] = "Include"
            player_data["stat_values"]["all_rows"] = player_data["rows"]
            player_data["stat_values"]["seperate_rows"] = [player_data["rows"]]
            player_data["stat_values"]["is_shift_data"] = False
            player_data["stat_values"]["is_leading_data"] = False
            player_data["stat_values"]["is_shot_on_data"] = False
            player_data["stat_values"]["is_strength_data"] = False
            player_data["stat_values"]["is_on_ice_data"] = False
            player_data["stat_values"]["is_indv_shift_data"] = False

            calculated_values = calculate_values(player_data["stat_values"]["all_rows"], player_type, player_data)

            if new_qual_type == "Games":
                min_value = calculated_values["stat_values"]["GP"]
            elif new_qual_type == "Career Minute":
                min_value = calculated_values["stat_values"]["TOI"]
            elif new_qual_type == "Career Shot":
                if player_type["da_type"]["type"] == "Skater":
                    min_value = calculated_values["stat_values"]["S"]
                else:
                    min_value = calculated_values["stat_values"]["SA"]
            elif new_qual_type == "Seasons":
                min_value = len(set([row["Year"] for row in player_data["stat_values"]["all_rows"]]))
            elif new_qual_type == "Age":
                min_value = dateutil.relativedelta.relativedelta(datetime.datetime.now(), player_data["Birthday"])
            else:
                min_value = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=current_season + 1), player_data["Birthday"])

            if min_value != 0 and min_value != float("inf") or isinstance(min_value, dateutil.relativedelta.relativedelta):
                if qual_str not in qual_map or (isinstance(min_value, numbers.Number) and min_value < qual_map[qual_str]["min_value"]) or (isinstance(min_value, dateutil.relativedelta.relativedelta) and (min_value + datetime.datetime.now()) < (qual_map[qual_str]["min_value"] + datetime.datetime.now())):
                    qual_map[qual_str] = {
                        "min_value" : min_value,
                        "is_first" : is_first,
                        "new_qual_type" : new_qual_type
                    }

def url_request(request, timeout=10):
    failed_counter = 0
    while(True):
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
            text = response.read()
            try:
                text = text.decode(response.headers.get_content_charset())
            except UnicodeDecodeError:
                bs = BeautifulSoup(text, "html.parser")
                if not bs.contents:
                    raise urllib.error.URLError("Page is empty!")
                return response, bs

            bs = BeautifulSoup(text, "lxml")
            if not bs.contents:
                raise urllib.error.URLError("Page is empty!")
            return response, bs
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_lxml(request, timeout=10):
    failed_counter = 0
    while(True):
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
            bs = lxml.html.parse(response)
            if not bs.getroot():
                raise urllib.error.URLError("Page is empty!")
            return response, bs
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_bytes(request, timeout=10):
    failed_counter = 0
    while(True):
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
            return response.read()
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_json(request, timeout=30):
    failed_counter = 0
    while(True):
        try:
            return json.loads(urllib.request.urlopen(request, timeout=timeout).read())
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def handle_multi_name_data(names, time_frames, player_type, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj):
    player_datas = []
    any_missing_games = []
    any_missing_toi = []

    add_type = "plus"

    for index, name in enumerate(names):
        real_index = index if len(time_frames) > index else len(time_frames) - 1
        player_id, player_page = get_player(name, time_frames[real_index])
        if player_id and player_page:
            player_data, missing_games, missing_toi = handle_multi_player_data(player_id, time_frames[real_index], player_type, player_page, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj)
            player_data["Search Term"] = name
            for sub_frame in time_frames[real_index]:
                if sub_frame["add_type"] == "minus":
                    add_type = "minus"

            player_datas.append(player_data)
            
            any_missing_games += missing_games
            any_missing_toi += missing_toi
        else:
            player_data = copy.deepcopy(missing_player_data)
            player_data["Search Term"] = name
            player_datas.append(player_data)

    if len(player_datas) > 1:
        add_type = "plus"
    
    return combine_player_datas(player_datas, player_type, any_missing_games, any_missing_toi, time_frames, add_type, remove_duplicates, remove_duplicate_games, extra_stats), player_datas

def get_player(name, time_frames):
    name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", unidecode.unidecode(name))).strip()
    name_sub = re.sub(r"[^\w\s']", "", name).lower().strip()    
    if name_sub in manual_players:
        player_id = manual_players[name_sub]
        player_url = main_page_url_format.format(player_id[0], player_id)
        request = urllib.request.Request(player_url, headers=request_headers)
        try:
            response, player_page = url_request(request)
            return player_id, player_page
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return None, None
            else:
                raise

    search_url = player_search_url_format.format(urllib.parse.quote_plus(name.replace(".", "")))
    request = urllib.request.Request(search_url, headers=request_headers)
    response = None
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return None, None
        else:
            raise

    url = urlparse(response.geturl())
    path = url.path[1:].split("/")

    if path[0] == "players":
        player_id = path[2][:-5]
        return player_id, player_page
    elif path[0] == "search":
        player_div = player_page.find("div", {"id" : "players"})
        common_search_div = player_page.find("div", {"id" : "common_searches"})
        player_search_divs = []
        if player_div:
            player_search_divs += player_div.find_all("div", {"class" : "search-item"})
        if common_search_div:
            player_search_divs += common_search_div.find_all("div", {"class" : "search-item"})

        if player_search_divs:
            matching_players = []
            for player_search_div in player_search_divs:
                player_url_div = player_search_div.find("div", {"class" : "search-item-url"})
                path = str(player_url_div.find(text=True))
                path_split = path.split("/")
                if path_split[1] == "players":
                    player_id = path_split[3][:-5]
                    
                    player_pos_div = player_search_div.find("div", {"class" : "search-item-name"})

                    player_name_time = str(player_pos_div.find("a").find(text=True)).split("(")
                    player_name = player_name_time[0].strip().lower()
                    
                    parsed_name = create_human_name(player_name)
                    
                    last_name_match = False
                    is_exact = False
                    contains_name = False
                    if re.search(r"^" + name.lower() + "$", parsed_name.last) or re.search(r"^" + parsed_name.last + "$", name.lower()):
                        last_name_match = True
                        is_exact = True
                        contains_name = True
                    else:
                        if re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", re.sub(r"[^A-Za-z\s]", "", parsed_name.last)) or re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", parsed_name.last) + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())):
                            last_name_match = True
                            is_exact = True
                            contains_name = True
                        else:
                            if re.search(r"^" + player_name + "$", name.lower()) or re.search(r"^" + name.lower() + "$", player_name):
                                is_exact = True
                                contains_name = True
                            else:
                                if re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", player_name) + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())) or re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", re.sub(r"[^A-Za-z\s]", "", player_name)):
                                    is_exact = True
                                    contains_name = True
                                else:
                                    contains_name = name.lower() in player_name
                                    if not contains_name:
                                        contains_name = re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", player_name)
                                    if re.search(r"^" + name.lower() + "$", parsed_name.first) or re.search(r"^" + parsed_name.first + "$", name.lower()):
                                        is_exact = True
                                        contains_name = True
                                    elif re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", parsed_name.first) or re.search(r"^" + parsed_name.first + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())):
                                        is_exact = True
                                        contains_name = True
                                    elif name.lower() in parsed_name.first or name.lower() in parsed_name.last or parsed_name.first in name.lower() or parsed_name.last in name.lower():
                                        contains_name = True
                                    elif re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", parsed_name.first) or re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", parsed_name.last) or re.sub(r"[^A-Za-z\s]", "", parsed_name.first) in re.sub(r"[^A-Za-z\s]", "", name.lower()) or re.sub(r"[^A-Za-z\s]", "", parsed_name.last) in re.sub(r"[^A-Za-z\s]", "", name.lower()):
                                        contains_name = True
                    
                    has_first_name_match = False
                    name_split = name.split()
                    if len(name_split) >= 2:
                        if parsed_name.first.startswith(name_split[0].lower()):
                            has_first_name_match = True
                        
                    year_start = 0
                    year_end = 0
                    if len(player_name_time) == 2:
                        player_info = "(" + player_name_time[1].strip()
                        years = player_info[1:][:-1].split("-")
                        year_start = int(years[0])
                        year_end = year_start
                        if len(years) == 2:
                            year_end = int(years[1])
                    
                    has_year_match_count = 0
                    if year_start:
                        for time_frame in time_frames:
                            frame_start = time_frame["time_start"]
                            frame_end = time_frame["time_end"]
                            if frame_start and frame_end:
                                if not (isinstance(frame_start, int) or isinstance(frame_end, int)):
                                    frame_start = frame_start.year
                                    frame_end = frame_end.year
                                
                                player_range = range(year_start - 1, year_end + 1)
                                frame_range = range(frame_start - 1, frame_end + 1)

                                if set(player_range).intersection(frame_range):
                                    has_year_match_count += 1
                            
                    is_hof = bool(player_pos_div.find("span", {"class" : "search-hof"}))
                    is_allstar = bool(player_pos_div.find("span", {"class" : "search-allstar"}))
                    is_active = player_pos_div.find("a").parent.name == "strong"
                    
                    year_score = -1000
                    career_length = 0
                    if year_start and year_end:
                        current_year = datetime.datetime.now().year
                        if current_year < year_end:
                            year_end = current_year
                        year_score = math.log(1 / (current_year - year_end + 1), 1.2)
                        career_length = (year_end - year_start) + 1

                    score = 0
                    if last_name_match:
                        score += 5
                    if is_hof:
                        score += 20
                    elif is_allstar:
                        score += 2
                    if is_active:
                        score += 2
                    score += year_score
                    score += career_length * .2

                    matching_players.append({
                        "name" : player_name,
                        "id" : player_id,
                        "has_years" : bool(career_length),
                        "is_exact" : is_exact,
                        "has_year_match_count": has_year_match_count,
                        "contains_name" : contains_name,
                        "has_first_name_match" : has_first_name_match,
                        "score" : score
                    })
            if matching_players:
                matching_players.sort(key=lambda player: (-player["has_years"], -player["has_year_match_count"], -player["is_exact"], -player["contains_name"], -player["has_first_name_match"], -player["score"]))
                matching_player = matching_players[0]

                player_url = main_page_url_format.format(matching_player["id"][0], matching_player["id"])
                request = urllib.request.Request(player_url, headers=request_headers)
                response = None
                try:
                    response, player_page = url_request(request)
                except urllib.error.HTTPError as err:
                    if err.status == 404:
                        return None, None
                    else:
                        raise
                return matching_player["id"], player_page

    return None, None

def combine_player_datas(player_datas, player_type, any_missing_games, any_missing_toi, time_frames, add_type, remove_duplicates, remove_duplicate_games, extra_stats):
    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1
                
    player_data = {
        "ids": [],
        "nhl_ids" : [],
        "stat_values": {
            "is_shift_data" : has_against_quals_no_so(extra_stats),
            "is_leading_data" : bool(seasons_leading),
            "is_shot_on_data" : False,
            "is_strength_data" : False,
            "is_on_ice_data" : False
        }
    }


    for subb_frame in time_frames:
        for time_frame in subb_frame:
            if "Shot On" in time_frame["qualifiers"]:
                player_data["stat_values"]["is_shot_on_data"] = True
            if "Even Strength" in time_frame["qualifiers"] or "Power Play" in time_frame["qualifiers"] or "Short Handed" in time_frame["qualifiers"]:
                player_data["stat_values"]["is_strength_data"] = True
            if has_shift_quals(time_frame["qualifiers"]):
                player_data["stat_values"]["is_on_ice_data"] = True

    player_data["stat_values"]["DateStart"] = []
    player_data["stat_values"]["DateEnd"] = []
    player_data["stat_values"]["YearStart"] = []
    player_data["stat_values"]["YearEnd"] = []
    player_data["stat_values"]["Player"] = []
    player_data["stat_values"]["Search Term"] = []
    player_data["stat_values"]["Raw Player"] = ""
    player_data["stat_values"]["Raw Range"] = ""
    player_data["stat_values"]["Raw Time"] = ""
    player_data["stat_values"]["Raw Quals"] = "Query: "

    is_playoffs = None
    has_reg_season = False
    has_playoffs = False
    for subb_frame in time_frames:
        for time_frame in subb_frame:
            if "Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Day Of Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Of Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Day After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day After Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Day Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Before Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Game After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Game After Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Game Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Game Before Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Season Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Season After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season After Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Season Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season Before Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Previous Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Previous Playing With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Upcoming Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Upcoming Playing With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Previous Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Previous Playing Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Upcoming Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Upcoming Playing Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Playing Same Game" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Game"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Playing Same Opponents" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Opponents"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Playing Same Date" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Date"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Shot On" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Shot On"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "On Ice With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["On Ice With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "On Ice Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["On Ice Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Assisted On" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Assisted On"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Assisted With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Assisted With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Points With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Points With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Assisted By" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Assisted By"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Primary Assisted On" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Primary Assisted On"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Primary Assisted With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Primary Assisted With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Primary Points With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Primary Points With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Primary Assisted By" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Primary Assisted By"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Hit On" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Hit On"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Block On" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Block On"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Penalty On" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Penalty On"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Faceoff Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Faceoff Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]
            if "Fight Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Fight Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_toi += player["missing_toi"]

            if time_frame["playoffs"]:
                if time_frame["playoffs"] == "Only":
                    has_playoffs = True
                    if not is_playoffs or is_playoffs == "Only":
                        is_playoffs = "Only"
                    else:
                        is_playoffs = "Include"
                else:
                    has_reg_season = True
                    is_playoffs = "Include"
            else:
                has_reg_season = True
                if is_playoffs:
                    is_playoffs = "Include"

    player_data["stat_values"]["any_missing_games"] = any_missing_games
    player_data["stat_values"]["any_missing_toi"] = any_missing_toi
    player_data["stat_values"]["is_playoffs"] = is_playoffs

    all_rows = []
    sub_add_rows = []
    multiple_matches = False
    has_season_stats = True
    has_award_stats = True
    is_only_sc = True
    error_getting_adv = False
    player_images = []
    player_teams = []
    player_positions = []
    player_caps = []
    player_flags = []
    player_numbers = []
    player_hofs = []
    has_one_player = False
    is_indv_shift_data = True
    for sub_player_data in player_datas:
        sub_range = ""
        raw_sub_range = ""
        raw_sub_time = ""
        all_rows += sub_player_data["rows"]
        sub_add_rows.append(sub_player_data["rows"])

        if sub_player_data["Player"] != "No Player Match!":
            has_one_player = True

        if not sub_player_data["stat_values"]["is_indv_shift_data"]:
            is_indv_shift_data = False

        for index, date_start in enumerate(sub_player_data["DateStart"]):
            if len(player_data["stat_values"]["DateStart"]) - 1 < index:
                player_data["stat_values"]["DateStart"].append(date_start)
            elif date_start < player_data["stat_values"]["DateStart"][index]:
                player_data["stat_values"]["DateStart"][index] = date_start
        for index, date_end in enumerate(sub_player_data["DateEnd"]):
            if len(player_data["stat_values"]["DateEnd"]) - 1 < index:
                player_data["stat_values"]["DateEnd"].append(date_end)
            elif date_end > player_data["stat_values"]["DateEnd"][index]:
                player_data["stat_values"]["DateEnd"][index] = date_end
            
            date_start = sub_player_data["DateStart"][index]
            sub_is_playoffs = sub_player_data["is_playoffs"][index]
            
            if isinstance(date_start, int):
                original_start_year = date_start
                original_end_year = date_end
                display_start_year = original_start_year
                display_end_year = original_end_year
                if sub_is_playoffs == "Only":
                    display_start_year -= 1
                    display_end_year -= 1
                else:
                    date_start = str(date_start) + "-" + str(date_start + 1)
                    date_end = str(date_end) + "-" + str(date_end + 1)
                    original_start_year = date_start
                    original_end_year = date_end

                if display_start_year >= 1979:# in sub_player_data["game_valid_years"]:
                    date_start = "[" + str(date_start) + "](" + game_splits_url_format.format(sub_player_data["id"][0], sub_player_data["id"], str(display_start_year + 1)) + ")"
                if display_end_year >= 1979:# in sub_player_data["game_valid_years"]:
                    date_end = "[" + str(date_end) + "](" + game_splits_url_format.format(sub_player_data["id"][0], sub_player_data["id"], str(display_end_year + 1)) + ")"

                if "date" not in extra_stats or len(sorted(list(set([row["Date"] for row in sub_player_data["rows"]])))) > 20:
                    if date_start == date_end:
                        raw_sub_range += str(date_start)
                    else:
                        raw_sub_range += str(date_start) + " to " + str(date_end)
                    
                    if add_type == "minus":
                        raw_sub_range += " DIFF "
                    else:
                        raw_sub_range += " + "

                start_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(display_start_year) + 1)
                end_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(display_end_year) + 1)
                
                start_age = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=display_start_year + 1), sub_player_data["Birthday"])
                end_age = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=display_end_year + 1), sub_player_data["Birthday"])

                date_start = str(date_start) + " [" + start_season + " Season - Age: " + str(start_age.years) + "]"
                date_end = str(date_end) + " [" + end_season + " Season - Age: " + str(end_age.years) + "]"

                raw_date_start = str(original_start_year)
                raw_date_end = str(original_end_year)

                raw_time_start = "[" + start_season + " Season - Age: " + str(start_age.years) + "]"
                raw_time_end = "[" + end_season + " Season - Age: " + str(end_age.years) + "]"
            else:
                original_start_date = date_start
                original_end_date = date_end

                date_start_link = None
                date_end_link = None
                start_season = None
                end_season = None
                date_start_link = None
                date_end_link = None
                for row in sub_player_data["rows"]:
                    if row["Date"] == date_start:
                        if row["GameLink"] and row["Year"] >= 1979:
                            date_start_link = "https://www.hockey-reference.com" + row["GameLink"]
                        else:
                            date_start_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                        start_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(row["Year"]) + 1)
                    if row["Date"] == date_end:
                        if row["GameLink"] and row["Year"] >= 1979:
                            date_end_link = "https://www.hockey-reference.com" + row["GameLink"]
                        else:
                            date_end_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                        end_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(row["Year"]) + 1)
                        
                    if date_start_link and date_end_link:
                        break
                
                if date_start_link:
                    date_start = "[" + str(date_start) + "](" + date_start_link + ")"
                else:
                    date_start = str(date_start)
                
                if date_end_link:
                    date_end = "[" + str(date_end) + "](" + date_end_link + ")"
                else:
                    date_end = str(date_end)

                if "date" not in extra_stats or len(sorted(list(set([row["Date"] for row in sub_player_data["rows"]])))) > 20:
                    if date_start == date_end:
                        raw_sub_range += str(date_start)
                    else:
                        raw_sub_range += str(date_start) + " to " + str(date_end)
                    
                    if add_type == "minus":
                        raw_sub_range += " DIFF "
                    else:
                        raw_sub_range += " + "

                start_age = dateutil.relativedelta.relativedelta(original_start_date, sub_player_data["Birthday"])
                start_date_diff_str = ""
                if start_age.years:
                    start_date_diff_str += str(start_age.years).replace("-", "") + "Y"
                if start_age.months:
                    if start_age.years:
                        start_date_diff_str += "-"
                    start_date_diff_str += str(start_age.months).replace("-", "") + "M"
                if start_age.days:
                    if start_age.years or start_age.months:
                        start_date_diff_str += "-"
                    start_date_diff_str += str(start_age.days).replace("-", "") + "D"

                end_age = dateutil.relativedelta.relativedelta(original_end_date, sub_player_data["Birthday"])
                end_date_diff_str = ""
                if end_age.years:
                    end_date_diff_str += str(end_age.years).replace("-", "") + "Y"
                if end_age.months:
                    if end_age.years:
                        end_date_diff_str += "-"
                    end_date_diff_str += str(end_age.months).replace("-", "") + "M"
                if end_age.days:
                    if end_age.years or end_age.months:
                        end_date_diff_str += "-"
                    end_date_diff_str += str(end_age.days).replace("-", "") + "D"

                date_start += " [" + start_season + " Season - Age: " + start_date_diff_str + "]"
                date_end += " [" + end_season + " Season - Age: " + end_date_diff_str + "]"

                raw_date_start = str(original_start_date)
                raw_date_end = str(original_end_date)

                raw_time_start = "[" + start_season + " Season - Age: " + start_date_diff_str + "]"
                raw_time_end = "[" + end_season + " Season - Age: " + end_date_diff_str + "]"

            if "date" in extra_stats and len(sorted(list(set([row["Date"] for row in sub_player_data["rows"]])))) <= 20:
                dates = sorted(list(set([row["Date"] for row in sub_player_data["rows"]])))
                for date_start in dates:
                    if isinstance(date_start, int):
                        display_start_year = date_start
                        if sub_is_playoffs == "Only":
                            display_start_year -= 1
                        else:
                            date_start = str(date_start) + "-" + str(date_start + 1)
                        if display_start_year >= 1979:# in sub_player_data["game_valid_years"]:
                            date_start = "[" + str(date_start) + "](" + game_splits_url_format.format(sub_player_data["id"][0], sub_player_data["id"], str(display_start_year + 1)) + ")"
                        raw_sub_range += str(date_start) + " + "
                    else:
                        date_start_link = None
                        for row in sub_player_data["rows"]:
                            if row["Date"] == date_start:
                                if row["GameLink"] and row["Year"] >= 1979:
                                    date_start_link = "https://www.hockey-reference.com" + row["GameLink"]
                                else:
                                    date_start_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                                break
                        if date_start_link:
                            raw_sub_range += "[" + str(date_start) + "](" + date_start_link + ")" + " + "
                        else:
                            raw_sub_range += str(date_start)
            else:
                if date_start == date_end:
                    sub_range += str(date_start)
                else:
                    sub_range += str(date_start) + " to " + str(date_end)
                
                if add_type == "minus":
                    sub_range += " DIFF "
                else:
                    sub_range += " + "

                if raw_time_start == raw_time_end:
                    raw_sub_time += str(raw_time_start)
                else:
                    raw_sub_time += str(raw_time_start) + " to " + str(raw_time_end)
                
                if add_type == "minus":
                    raw_sub_time += " DIFF "
                else:
                    raw_sub_time += " + "
    
        for index, year_start in enumerate(sub_player_data["YearStart"]):
            if len(player_data["stat_values"]["YearStart"]) - 1 < index:
                player_data["stat_values"]["YearStart"].append(year_start)
            elif year_start < player_data["stat_values"]["YearStart"][index]:
                player_data["stat_values"]["YearStart"][index] = year_start
        for index, year_end in enumerate(sub_player_data["YearEnd"]):
            if len(player_data["stat_values"]["YearEnd"]) - 1 < index:
                player_data["stat_values"]["YearEnd"].append(year_end)
            elif year_end > player_data["stat_values"]["YearEnd"][index]:
                player_data["stat_values"]["YearEnd"][index] = year_end

        player_data["stat_values"]["Raw Player"] += "{" + (sub_player_data["Player"] if "hide-name" not in extra_stats else "?????") + "} + "
        if raw_sub_range[:(-6 if add_type == "minus" else -3)]:
            player_data["stat_values"]["Raw Range"] += "{" + raw_sub_range[:(-6 if add_type == "minus" else -3)] + "}"
        else:
            player_data["stat_values"]["Raw Range"] += "{No Matching Games!}"
        
        if add_type == "minus":
            player_data["stat_values"]["Raw Range"] += " DIFF "
        else:
            player_data["stat_values"]["Raw Range"] += " + "

        if raw_sub_time[:(-6 if add_type == "minus" else -3)]:
            player_data["stat_values"]["Raw Time"] += "{" + raw_sub_time[:(-6 if add_type == "minus" else -3)] + "}"

            if add_type == "minus":
                player_data["stat_values"]["Raw Time"] += " DIFF "
            else:
                player_data["stat_values"]["Raw Time"] += " + "

        if not multiple_matches and len(sub_player_data["DateEnd"]) > 1 and len(player_datas) > 1:
            multiple_matches = True

        player_data["ids"].append(sub_player_data["id"])
        player_data["nhl_ids"].append(sub_player_data["nhl_id"])
        player_data["stat_values"]["Player"].append((sub_player_data["Player"] if "hide-name" not in extra_stats else "?????"))
        player_data["stat_values"]["Search Term"].append(sub_player_data["Search Term"])
        player_data["stat_values"]["LastUpdated"] = sub_player_data["LastUpdated"]
        player_data["stat_values"]["is_indv_shift_data"] = is_indv_shift_data
    
        if not sub_player_data["has_season_stats"]:
            has_season_stats = False
        if not sub_player_data["has_award_stats"]:
            has_award_stats = False
        if not sub_player_data["is_only_sc"]:
            is_only_sc = False
        if sub_player_data["error_getting_adv"]:
            error_getting_adv = True
        player_images.append(sub_player_data["player_image_url"])
        player_teams.append(sub_player_data["player_current_team"])
        player_positions.append(sub_player_data["player_position"])
        player_caps.append(sub_player_data["player_cap"])
        player_numbers.append(sub_player_data["player_current_number"])
        player_flags.append(sub_player_data["player_flag"])
        player_hofs.append(sub_player_data["player_hof"])

    if has_reg_season and has_playoffs:
        has_award_stats = False

    player_data["has_season_stats"] = has_season_stats
    player_data["has_award_stats"] = has_award_stats
    player_data["is_only_sc"] = is_only_sc
    player_data["error_getting_adv"] = error_getting_adv
    player_data["player_image_url"] = player_images
    player_data["player_current_team"] = player_teams
    player_data["player_position"] = player_positions
    player_data["player_cap"] = player_caps
    player_data["player_flag"] = player_flags
    player_data["player_current_number"] = player_numbers
    player_data["player_hof"] = player_hofs
    
    player_data["stat_values"]["Raw Player"] = player_data["stat_values"]["Raw Player"][:-3]
    player_data["stat_values"]["Raw Range"] = player_data["stat_values"]["Raw Range"][:(-6 if add_type == "minus" else -3)]
    player_data["stat_values"]["Raw Time"] = player_data["stat_values"]["Raw Time"][:(-6 if add_type == "minus" else -3)]
    if not multiple_matches:
        player_data["stat_values"]["Raw Player"] = player_data["stat_values"]["Raw Player"].replace("{", "").replace("}", "")
        player_data["stat_values"]["Raw Range"] = player_data["stat_values"]["Raw Range"].replace("{", "").replace("}", "")
        player_data["stat_values"]["Raw Time"] = player_data["stat_values"]["Raw Time"].replace("{", "").replace("}", "")

    player_data["stat_values"]["Player/GP"] = player_data["stat_values"]["Player"]
    player_data["stat_values"]["Player_Score"] = player_data["stat_values"]["Player"]
    player_data["stat_values"]["Player_5v5"] = player_data["stat_values"]["Player"]
    player_data["stat_values"]["Player_Sit"] = player_data["stat_values"]["Player"]
    player_data["stat_values"]["Player_Awards"] = player_data["stat_values"]["Player"]
    player_data["stat_values"]["Player_Penalty"] = player_data["stat_values"]["Player"]

    if not has_one_player:
        return player_data

    player_data["stat_values"]["all_rows"] = all_rows
    player_data["stat_values"]["seperate_rows"] = sub_add_rows

    if add_type == "minus":
        parsed_stats = set()
        for sub_all_rows in player_datas[0]["seperate_rows"]:
            calculated_values = calculate_values(sub_all_rows, player_type, player_data, extra_stats)
            for stat in calculated_values["stat_values"]:
                if stat in parsed_stats:
                    if isinstance(player_data["stat_values"][stat], numbers.Number):
                        player_data["stat_values"][stat] -= calculated_values["stat_values"][stat]
                    elif stat == "TmRec":
                        old_rec_split = player_data["stat_values"][stat].split(":")
                        new_rec_split = calculated_values["stat_values"][stat].split(":")
                        player_data["stat_values"][stat] = str(round_value(float(old_rec_split[0]) - float(new_rec_split[0]))) + ":" + str(round_value(float(old_rec_split[1]) - float(new_rec_split[1]))) + ":" + str(round_value(float(old_rec_split[2]) - float(new_rec_split[2])))
                    elif stat in string_stats:
                        if not player_data["stat_values"][stat]:
                            player_data["stat_values"][stat] = ""
                        player_data["stat_values"][stat] += calculated_values["stat_values"][stat] + "-"
                else:
                    if stat not in player_data["stat_values"]:
                        player_data["stat_values"][stat] = calculated_values["stat_values"][stat]
                        parsed_stats.add(stat)
            
            for stat in player_data["stat_values"]:
                if stat in string_stats:
                    if player_data["stat_values"][stat]:
                        parsed_teams = set()
                        stat_vals = player_data["stat_values"][stat].split("-")
                        player_data["stat_values"][stat] = ""
                        for stat_val in stat_vals:
                            if stat_val and stat_val not in parsed_teams:
                                player_data["stat_values"][stat] += stat_val + "-"
                                parsed_teams.add(stat_val)
                        player_data["stat_values"][stat] = player_data["stat_values"][stat][:-1]
    else:
        calculated_values = calculate_values(all_rows, player_type, player_data, extra_stats)
        for stat in calculated_values["stat_values"]:
            if stat not in player_data["stat_values"]:
                player_data["stat_values"][stat] = calculated_values["stat_values"][stat]
    
    if player_type["da_type"]:
        for header in headers[player_type["da_type"]["type"]].keys():
            if header not in player_data["stat_values"]:
                if not header.startswith("Player"):
                    player_data["stat_values"][header] = 0.0

    best_table = 0
    worst_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-season"):
            if len(extra_stat.split("-")) == 3:
                best_table = int(extra_stat.split("-")[2])
            else:
                best_table = 1
        elif extra_stat.startswith("worst-season"):
            if len(extra_stat.split("-")) == 3:
                worst_table = int(extra_stat.split("-")[2])
            else:
                worst_table = 1
    best_games_table = 0
    worst_games_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-game"):
            if len(extra_stat.split("-")) == 3:
                best_games_table = int(extra_stat.split("-")[2])
            else:
                best_games_table = 1
        elif extra_stat.startswith("worst-game"):
            if len(extra_stat.split("-")) == 3:
                worst_games_table = int(extra_stat.split("-")[2])
            else:
                worst_games_table = 1
    seasons_leading_start = 0
    seasons_leading_end = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading_end = int(extra_stat.split("-")[2])
                if len(extra_stat.split("-")) >= 4:
                    seasons_leading_start = int(extra_stat.split("-")[2])
                else:
                    seasons_leading_start = 1
            else:
                seasons_leading_start = 1
                seasons_leading_end = 1
    
    all_unique_quals = True
    last_qual_str = None
    for subb_frame in time_frames:
        for subbb_frame in subb_frame:
            qual_str = determine_raw_str(subbb_frame)
            if not last_qual_str:
                last_qual_str = qual_str
            if last_qual_str != qual_str:
                all_unique_quals = False
                break
        if not all_unique_quals:
            break

    first_qual = True
    multiple_matches = len(time_frames) > 1
    for subb_index, subb_frame in enumerate(time_frames):
        if not multiple_matches and len(subb_frame) > 1:
            multiple_matches = True
        if all_unique_quals:
            multiple_matches = False
        for subbb_index, subbb_frame in enumerate(subb_frame):
            if all_unique_quals and (subb_index or subbb_index):
                continue

            qual_str = ""
            if multiple_matches:
                qual_str += "("
            
            qual_str += determine_raw_str(subbb_frame)
            
            if multiple_matches:
                qual_str += ")"
            if qual_str and qual_str != " ()":
                if not first_qual:
                    if add_type == "minus":
                        player_data["stat_values"]["Raw Quals"] += " DIFF "
                    else:
                        player_data["stat_values"]["Raw Quals"] += " + "
                else:
                    first_qual = False

                player_data["stat_values"]["Raw Quals"] += qual_str
        
        if remove_duplicates:
            if first_qual:
                first_qual = False
            
            player_data["stat_values"]["Raw Quals"] += " [Duplicates Removed]"
        
        if remove_duplicate_games:
            if first_qual:
                first_qual = False
            
            player_data["stat_values"]["Raw Quals"] += " [Duplicate Games Removed]"
        
        if best_table:
            if first_qual:
                first_qual = False
            
            if best_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Best Season]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Best " + str(best_table) + " Seasons]"
        
        if worst_table:
            if first_qual:
                first_qual = False
            
            if best_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Worst Season]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Worst " + str(worst_table) + " Seasons]"
        
        if best_games_table:
            if first_qual:
                first_qual = False
            
            if best_games_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Best Game]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Best " + str(best_games_table) + " Games]"
        
        if worst_games_table:
            if first_qual:
                first_qual = False
            
            if worst_games_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Worst Game]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Worst " + str(worst_games_table) + " Games]"
        
        if seasons_leading_start:
            if first_qual:
                first_qual = False
            
            if seasons_leading_start == seasons_leading_end:
                player_data["stat_values"]["Raw Quals"] += " [Seasons In " + get_time_str(seasons_leading_start, True) + "]"
            elif seasons_leading_end == 1:
                player_data["stat_values"]["Raw Quals"] += " [Seasons In Top " + str(seasons_leading_end) + "]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [Seasons In Top " + str(seasons_leading_start) + "-" + str(seasons_leading_end) + "]"
        
        if "missing-game" in extra_stats:
            if player_data["stat_values"]["any_missing_games"]:
                player_data["stat_values"]["Raw Quals"] +=  " [Missing Games: " + " + ".join(player_data["stat_values"]["any_missing_games"]) + "]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [No Missing Games!]"
    
        if "missing-toi" in extra_stats:
            if player_data["stat_values"]["any_missing_toi"]:
                player_data["stat_values"]["Raw Quals"] +=  " [Missing TOI Games: " + " + ".join(player_data["stat_values"]["any_missing_toi"]) + "]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [No Missing TOI Games!]"

    player_data["stat_values"]["Raw Quals"] = player_data["stat_values"]["Raw Quals"].strip()

    for row in player_data["stat_values"]["all_rows"]:
        keys_to_delete = set()
        for key in row:
            if key in ("Previous Row", "Upcoming Row"):
                keys_to_delete.add(key)
        for key in keys_to_delete:
            del row[key]

    if "hide-year" in extra_stats:
        player_data["stat_values"]["Raw Range"] = "Dates: ?????"
        player_data["stat_values"]["Raw Time"] = ""
    elif "hide-name" in extra_stats:
        match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", player_data["stat_values"]["Raw Range"])
        while match:
            player_data["stat_values"]["Raw Range"] = player_data["stat_values"]["Raw Range"].replace(match.group(0), match.group(1), 1)
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", player_data["stat_values"]["Raw Range"])
        player_data["stat_values"]["Raw Time"] = ""

    if "hide-query" in extra_stats:
        player_data["stat_values"]["Raw Quals"] = "Query: ?????"

    return player_data

def determine_raw_str(subbb_frame):
    qual_str = ""

    if subbb_frame["type"].startswith("season"):
        if subbb_frame["type"].startswith("season-range"):
            qual_str += "Seasons: "
            if not subbb_frame["time_start"]:
                qual_str += get_time_str(subbb_frame["time_end"], True)
            elif not subbb_frame["time_end"]:
                qual_str += get_time_str(subbb_frame["time_start"], True)
            elif subbb_frame["time_start"] == subbb_frame["time_end"]:
                qual_str += get_time_str(subbb_frame["time_start"], True)
            else:
                qual_str += (get_time_str(subbb_frame["time_start"], True)) + "-" + (get_time_str(subbb_frame["time_end"], True))
                if subbb_frame["type"] == "season-range-reversed":
                    qual_str += " [Reverse]"
        else:
            if subbb_frame["time_start"]:
                if subbb_frame["time_start"] == 1:
                    qual_str += "First Season"
                else:
                    qual_str += "First " + str(subbb_frame["time_start"]) + " Seasons"
            else:
                if subbb_frame["time_end"] == 1:
                    qual_str += "Last Season"
                else:
                    qual_str += "Last " + str(subbb_frame["time_end"]) + " Seasons"
    else:
        if subbb_frame["time_start"] == 0 and subbb_frame["time_end"] == datetime.date.today().year:
            qual_str += "Career"
        else:
            if isinstance(subbb_frame["time_end"], dateutil.relativedelta.relativedelta):
                qual_str += "First "
                if subbb_frame["time_end"].microseconds:
                    qual_str += "Calendar "
                if subbb_frame["time_end"].minutes > 1:
                    qual_str += str(subbb_frame["time_end"].minutes) + " "

                if subbb_frame["time_end"].seconds == 0:
                    qual_str += "Day"
                elif subbb_frame["time_end"].seconds == 1:
                    qual_str += "Week"
                elif subbb_frame["time_end"].seconds == 2:
                    qual_str += "Month"
                else:
                    qual_str += "Year"
                if subbb_frame["time_end"].minutes > 1:
                    qual_str += "s"
            else:
                time_start = subbb_frame["time_start"]
                if time_start == datetime.date.min or time_start == datetime.date.min.year:
                    time_start = "MIN"
                time_end = subbb_frame["time_end"]

                if subbb_frame["playoffs"] == "Only":
                    if isinstance(time_start, int):
                        time_start += 1
                    if isinstance(time_end, int):
                        time_end += 1
                else:
                    if isinstance(time_start, int):
                        time_start = str(time_start) + "-" + str(time_start + 1)
                    if isinstance(time_end, int):
                        time_end = str(time_end) + "-" + str(time_end + 1)

                if time_start == time_end:
                    qual_str += str(time_start)
                else:
                    qual_str += str(time_start) + " to " + str(time_end)
    
    if subbb_frame["playoffs"]:
        if subbb_frame["playoffs"] == "Only":
            qual_str += " - Playoffs"
        else:
            qual_str += " - Regular Season and Playoffs"
    else:
        qual_str += " - Regular Season"

    for qualifier in subbb_frame["qualifiers"]:
        if qualifier == "Force Dates" or qualifier == "Ignore Start":
            continue

        sub_sub_first = True
        if qual_str:
            qual_str += " - "
        
        if qualifier != "Start" and qualifier != "Birthday" and qualifier != "Games" and qualifier != "Season Games":
            qual_str += qualifier + ": "

        if qualifier == "Games" or qualifier == "Season Games":
            if not sub_sub_first:
                qual_str += " + "
            else:
                sub_sub_first = False
            if subbb_frame["qualifiers"][qualifier]["negate"]:
                qual_str += "Not "
            if "compare_type" in subbb_frame["qualifiers"][qualifier]:
                qual_str += subbb_frame["qualifiers"][qualifier]["compare_type"].capitalize()
                if subbb_frame["qualifiers"][qualifier]["time_unit"] == 1:
                    qual_str += " " + qualifier[:-1]
                else:
                    qual_str += " " + str(subbb_frame["qualifiers"][qualifier]["time_unit"]) + " " + qualifier
            else:
                qual_str += qualifier + ": "
                if subbb_frame["qualifiers"][qualifier]["start_val"] == subbb_frame["qualifiers"][qualifier]["end_val"]:
                    qual_str += get_time_str(subbb_frame["qualifiers"][qualifier]["start_val"], True)
                else:
                    qual_str += (get_time_str(subbb_frame["qualifiers"][qualifier]["start_val"], True)) + "-" + (get_time_str(subbb_frame["qualifiers"][qualifier]["end_val"], True))
                    if subbb_frame["qualifiers"][qualifier]["reverse"]:
                        qual_str += " [Reverse]"
        else:
            for qual_obj in subbb_frame["qualifiers"][qualifier]:
                if qualifier == "Start" or qualifier == "Birthday":
                    if not sub_sub_first:
                        qual_str += " + "
                    else:
                        sub_sub_first = False
                    qual_str += qualifier_map[qualifier][not qual_obj["negate"]]
                elif qualifier == "Rookie" or qualifier == "Facing Former Franchise" or qualifier == "Facing Former Team" or qualifier == "Previous Same Opponent" or qualifier == "Upcoming Same Opponent" or qualifier == "With New Team" or qualifier == "With New Franchise" or qualifier == "Even Year" or qualifier == "Odd Year" or qualifier == "Decision" or qualifier == "Interconference" or qualifier == "Intraconference" or qualifier == "Interdivision" or qualifier == "Intradivision" or qualifier == "First Half" or qualifier == "Second Half" or qualifier == "Post All-Star" or qualifier == "Pre All-Star" or qualifier == "Complete Game" or qualifier == "Penalty Shot" or qualifier == "Shootout" or qualifier == "Overtime" or qualifier == "Game Winning" or qualifier == "Offensive Zone" or qualifier == "Defensive Zone" or qualifier == "Neutral Zone" or qualifier == "Unassisted" or qualifier == "Even Skaters" or qualifier == "More Skaters" or qualifier == "Less Skaters" or qualifier == "Team Goalie Pulled" or qualifier == "Opponent Goalie Pulled" or qualifier == "Power Play" or qualifier == "Short Handed" or qualifier == "Even Strength" or qualifier == "Elimination" or qualifier == "Clinching" or qualifier == "Elimination Or Clinching" or qualifier == "Winner Take All" or qualifier == "Ahead In Series" or qualifier == "Behind In Series" or qualifier == "Even In Series" or qualifier == "Winning Opponent" or qualifier == "Losing Opponent" or qualifier == "Tied Opponent" or qualifier == "Winning Or Tied Opponent" or qualifier == "Losing Or Tied Opponent" or qualifier == "Current Winning Opponent" or qualifier == "Current Losing Opponent" or qualifier == "Current Tied Opponent" or qualifier == "Current Winning Or Tied Opponent" or qualifier == "Current Losing Or Tied Opponent" or qualifier == "Playoff Opponent"  or qualifier == "Cup Winner Opponent" or qualifier == "Conference Winner Opponent" or qualifier == "Winning Team" or qualifier == "Losing Team" or qualifier == "Tied Team" or qualifier == "Winning Or Tied Team" or qualifier == "Losing Or Tied Team" or qualifier == "Current Winning Team" or qualifier == "Current Losing Team" or qualifier == "Current Tied Team" or qualifier == "Current Winning Or Tied Team" or qualifier == "Current Losing Or Tied Team" or qualifier == "Playoff Team" or qualifier == "Cup Winner Team" or qualifier == "Conference Winner Team" or qualifier == "National Game" or qualifier == "Any National Game" or qualifier == "US National Game" or qualifier == "Any US National Game" or qualifier == "CA National Game" or qualifier == "Any CA National Game":
                    if not sub_sub_first:
                        qual_str += " + "
                    else:
                        sub_sub_first = False
                    qual_str += str(not qual_obj["negate"])
                elif qualifier == "Playing With" or qualifier == "Playing Against" or qualifier == "Playing Same Game" or qualifier == "Previous Playing With" or qualifier == "Previous Playing Against" or qualifier == "Upcoming Playing With" or qualifier == "Upcoming Playing Against" or qualifier == "Playing Same Opponents" or qualifier == "Playing Same Date" or qualifier == "Shot On" or qualifier == "On Ice With" or qualifier == "On Ice Against" or qualifier == "Assisted On" or qualifier == "Assisted With" or qualifier == "Points With" or qualifier == "Assisted By" or qualifier == "Primary Assisted On" or qualifier == "Primary Assisted With" or qualifier == "Primary Points With" or qualifier == "Primary Assisted By" or qualifier == "Hit On" or qualifier == "Block On" or qualifier == "Penalty On" or qualifier == "Faceoff Against" or qualifier == "Fight Against":
                    if not qual_obj["values"]:
                        qual_str += "No Player Match!"
                    for player in qual_obj["values"]:
                        if not sub_sub_first:
                            qual_str += " + "
                        else:
                            sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        qual_str += create_player_url_string(player["name"], player["id"], {}) + ((" (" + player["query"] + ")") if player["query"] != "Query: " else "")
                elif qualifier == "Sub Query" or qualifier == "Day Of Sub Query" or qualifier == "Day After Sub Query" or qualifier == "Day Before Sub Query" or qualifier == "Game After Sub Query" or qualifier == "Game Before Sub Query" or qualifier == "Season Sub Query" or qualifier == "Season After Sub Query" or qualifier == "Season Before Sub Query":
                    if not qual_obj["values"]:
                        qual_str += "No Player Match!"
                    for player in qual_obj["values"]:
                        if not sub_sub_first:
                            qual_str += " + "
                        else:
                            sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        qual_str += "(" + player["query"].replace("Query: ", "", 1) + ")"
                elif qualifier == "Days Rest" or qualifier == "Career Shot" or qualifier == "Career Shot Reversed" or qualifier == "Game Shot" or qualifier == "Game Shot Reversed" or qualifier == "Upcoming Days Rest" or qualifier == "Starts Days Rest" or qualifier == "Upcoming Starts Days Rest" or qualifier == "Days In A Row" or qualifier == "Games In A Row" or qualifier == "Starts In A Row" or qualifier == "Games Rest" or qualifier == "Starts Rest" or qualifier == "Team Score" or qualifier == "Opponent Score" or qualifier == "Series Team Wins" or qualifier == "Series Opponent Wins" or qualifier == "Series Score Margin" or qualifier == "Series Score Difference" or qualifier == "Game Number" or qualifier == "Season Number" or qualifier == "Final Team Score" or qualifier == "Final Opponent Score" or qualifier == "Team Skaters" or qualifier == "Opponent Skaters" or qualifier == "Team Players" or qualifier == "Opponent Players" or qualifier == "Team Wins" or qualifier == "Team Losses" or qualifier == "Team Ties" or qualifier == "Team Points" or qualifier == "Opponent Wins" or qualifier == "Opponent Losses" or qualifier == "Opponent Ties" or qualifier == "Opponent Points" or qualifier == "Current Team Wins" or qualifier == "Current Team Losses" or qualifier == "Current Team Ties" or qualifier == "Current Team Points" or qualifier == "Current Opponent Wins" or qualifier == "Current Opponent Losses" or qualifier == "Current Opponent Ties" or qualifier == "Current Opponent Points" or qualifier == "Team Games Over 500" or qualifier == "Opponent Games Over 500" or qualifier == "Current Team Games Over 500" or qualifier == "Current Opponent Games Over 500":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Year":
                    if not sub_sub_first:
                        qual_str += " + "
                    else:
                        sub_sub_first = False

                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Coordinates":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["x_coords"]["start_val"] == qual_obj["values"]["x_coords"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["x_coords"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["x_coords"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["x_coords"]["end_val"], False))

                    qual_str += ","
                    if qual_obj["values"]["y_coords"]["start_val"] == qual_obj["values"]["y_coords"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["y_coords"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["y_coords"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["y_coords"]["end_val"], False))
                elif qualifier == "Strength":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    qual_str += (get_time_str(qual_obj["values"]["team_skaters"], False)) + "v" + (get_time_str(qual_obj["values"]["opp_skaters"], False))
                elif qualifier == "Dates":
                    for date_obj in qual_obj["values"]:
                        if not sub_sub_first:
                            qual_str += " + "
                        else:
                            sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        
                        if date_obj["start_val"] == date_obj["end_val"]:
                            qual_str += get_time_str(date_obj["start_val"], False)
                        else:
                            qual_str += get_time_str(date_obj["start_val"], False) + " to " + get_time_str(date_obj["end_val"], False)
                elif qualifier == "Score Margin" or qualifier == "Final Score Margin" or qualifier == "Score Difference" or qualifier == "Final Score Difference":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Period Time" or qualifier == "Period Time Remaining" or qualifier == "Career Minute" or qualifier == "Career Minute Reversed" or qualifier == "Game Minute" or qualifier == "Game Minute Reversed":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False, period=True)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False, period=True)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False, period=True))
                elif qualifier == "Season" or qualifier == "Season Reversed" or qualifier == "Series Game" or qualifier == "Season Game" or qualifier == "Career Game" or qualifier == "Career Game Reversed" or qualifier == "Season Game Reversed" or qualifier == "Team Game Reversed" or qualifier == "Team Game" or qualifier == "Team Standings Rank" or qualifier == "Opponent Standings Rank" or qualifier == "Opponent Goals Rank" or qualifier == "Team Standings Rank" or qualifier == "Opponent Standings Rank" or qualifier == "Opponent Goals Allowed Rank" or qualifier == "Team Goals Rank" or qualifier == "Team Goals Allowed Rank" or qualifier == "Period":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], True)
                        if "reverse" in qual_obj["values"] and qual_obj["values"]["reverse"]:
                            qual_str += " [Reverse]"
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], True)) + "-" + (get_time_str(qual_obj["values"]["end_val"], True))
                        if "reverse" in qual_obj["values"] and qual_obj["values"]["reverse"]:
                            qual_str += " [Reverse]"
                elif qualifier == "Opponent Win Percentage" or qualifier == "Team Win Percentage" or qualifier == "Current Opponent Win Percentage" or qualifier == "Current Team Win Percentage" or qualifier == "Opponent Points Percentage" or qualifier == "Team Points Percentage" or qualifier == "Current Opponent Points Percentage" or qualifier == "Current Team Points Percentage":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], True, True)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], True, True)) + " to " + (get_time_str(qual_obj["values"]["end_val"], True, True))
                elif qualifier == "Event Time" or qualifier == "Start Time":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    start_time = datetime.datetime.now().replace(hour=qual_obj["values"]["start_val"].hour).replace(minute=qual_obj["values"]["start_val"].minute).replace(second=qual_obj["values"]["start_val"].second)
                    end_time = datetime.datetime.now().replace(hour=qual_obj["values"]["end_val"].hour).replace(minute=qual_obj["values"]["end_val"].minute).replace(second=qual_obj["values"]["end_val"].second)

                    if start_time == end_time:
                        qual_str += start_time.strftime("%I:%M:%S%p")
                    else:
                        qual_str += start_time.strftime("%I:%M:%S%p") + " to " + end_time.strftime("%I:%M:%S%p")
                    qual_str += " " + qual_obj["values"]["time_zone"]
                elif qualifier == "Age" or qualifier == "Season Age":
                    if not sub_sub_first:
                        qual_str += " + "
                    else:
                        sub_sub_first = False
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    qual_str += qual_obj["compare_str"]
                else:
                    for sub_qualifier in qual_obj["values"]:
                        if not sub_sub_first:
                            if qualifier == "Max Streak" or qualifier == "Count Streak" or qualifier == "Count Streak Formula" or qualifier == "Max Streak Formula" or qualifier == "Quickest" or qualifier == "Slowest":
                                break
                            qual_str += " + "
                        else:
                            sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        
                        if qualifier == "Stat" or qualifier == "Period Stat" or qualifier == "Previous Stat" or qualifier == "Upcoming Stat" or qualifier == "Season Stat" or qualifier == "Previous Season Stat" or qualifier == "Upcoming Season Stat" or qualifier == "Total Games Stat":
                            if "explain_str" in sub_qualifier and sub_qualifier["explain_str"]:
                                for explain_str in sub_qualifier["explain_str"]:
                                    qual_str += explain_str + " + "
                                qual_str = qual_str[:-3]
                            else:
                                qual_str += sub_qualifier["stat"].upper() + "="
                                if sub_qualifier["start_val"] == sub_qualifier["end_val"]:
                                    qual_str += get_time_str(sub_qualifier["start_val"], False)
                                else:
                                    qual_str += (get_time_str(sub_qualifier["start_val"], False)) + "-" + (get_time_str(sub_qualifier["end_val"], False))
                        elif qualifier == "Min Stat" or qualifier == "Max Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Max Streak Formula" or qualifier == "Count Streak Formula" or qualifier == "Quickest" or qualifier == "Slowest":
                            if "explain_str" in sub_qualifier and sub_qualifier["explain_str"]:
                                for explain_str in sub_qualifier["explain_str"]:
                                    qual_str += explain_str + " + "
                                qual_str = qual_str[:-3]
                            else:
                                for stat in sub_qualifier["stats"]:
                                    qual_str += stat["stat"].upper()
                                    if stat["start_val"] == stat["end_val"]:
                                        qual_str += "=" + (get_time_str(stat["start_val"], False))
                                    else:
                                        if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                                            qual_str += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
                                    qual_str += " + "
                                qual_str = qual_str[:-3]
                                if sub_qualifier["start_level"] == sub_qualifier["end_level"]:
                                    if sub_qualifier["start_level"] != 1:
                                        qual_str += "|" + (get_time_str(sub_qualifier["start_level"], True)) + " Result"
                                else:
                                    qual_str += "|" + (get_time_str(sub_qualifier["start_level"], True)) + " Result to " + (get_time_str(sub_qualifier["end_level"], True)) + " Result"
                        else:
                            if sub_qualifier in qualifier_map[qualifier]:
                                qual_str += qualifier_map[qualifier][sub_qualifier]
                            else:
                                if qualifier == "Team" or qualifier == "Opponent" or qualifier == "TV Network" or qualifier == "Raw TV Network" or qualifier == "National TV Network" or qualifier == "National Raw TV Network" or qualifier == "Any National TV Network" or qualifier == "Any National Raw TV Network" or qualifier == "Team Franchise" or qualifier == "Opponent Franchise" or qualifier == "Previous Team" or qualifier == "Previous Team Franchise" or qualifier == "Upcoming Team Franchise" or qualifier == "Previous Opponent Franchise" or qualifier == "Upcoming Opponent Franchise" or qualifier == "Upcoming Team" or qualifier == "Previous Opponent" or qualifier == "Upcoming Opponent" or qualifier == "Formula" or qualifier == "Season Formula" or qualifier == "Event Formula":
                                    sub_qualifier = sub_qualifier.upper()
                                elif qualifier == "Holiday" or qualifier == "Arena" or qualifier == "Exact Arena" or qualifier == "Penalty Type":
                                    sub_qualifier = sub_qualifier.title()
                                elif qualifier == "Team Conference" or qualifier == "Opponent Conference" or qualifier == "Team Division"  or qualifier == "Opponent Division":
                                    sub_qualifier = sub_qualifier.title()
                                elif qualifier == "Month":
                                    sub_qualifier = calendar.month_name[sub_qualifier]
                                elif qualifier == "Day":
                                    sub_qualifier = calendar.day_name[sub_qualifier]
                                elif qualifier == "Date":
                                    sub_qualifier = num2words(sub_qualifier, lang="en", to="ordinal_num")
                                qual_str += sub_qualifier
    
    return qual_str

def calculate_values(all_rows, player_type, og_player_data, extra_stats={}):
    player_data = {
        "stat_values" : {
            "YearStart" : og_player_data["stat_values"]["YearStart"],
            "YearEnd" : og_player_data["stat_values"]["YearEnd"],
            "DateStart" : og_player_data["stat_values"]["DateStart"],
            "DateEnd" : og_player_data["stat_values"]["DateEnd"],
            "is_playoffs" : og_player_data["stat_values"]["is_playoffs"],
            "is_shift_data" : og_player_data["stat_values"]["is_shift_data"],
            "is_leading_data" : og_player_data["stat_values"]["is_leading_data"],
            "is_shot_on_data" : og_player_data["stat_values"]["is_shot_on_data"],
            "is_strength_data" : og_player_data["stat_values"]["is_strength_data"],
            "is_on_ice_data" : og_player_data["stat_values"]["is_on_ice_data"],
            "is_indv_shift_data" : og_player_data["stat_values"]["is_indv_shift_data"]
        }
    }

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    if player_type["da_type"]:
        for header in headers[player_type["da_type"]["type"]].keys():
            if header not in player_data["stat_values"]:
                if not header.startswith("Player"):
                    player_data["stat_values"][header] = 0.0

    for row_data in all_rows:
        for stat in row_data:
            if stat != "is_playoffs" and stat in player_data["stat_values"] and isinstance(row_data[stat], numbers.Number) and isinstance(player_data["stat_values"][stat], numbers.Number) and (not stat in qualifier_map or stat == "Team Score" or stat == "Opponent Score") and (seasons_leading or (not stat in formulas[player_type["da_type"]["type"]] and not stat in advanced_stats and row_data[stat] != 0)):
                player_data["stat_values"][stat] += row_data[stat]
            elif stat in string_stats:
                if not player_data["stat_values"][stat]:
                    player_data["stat_values"][stat] = ""
                player_data["stat_values"][stat] += row_data[stat] + "-"

    for stat in player_data["stat_values"]:
        if stat in string_stats:
            if player_data["stat_values"][stat]:
                parsed_teams = set()
                stat_vals = player_data["stat_values"][stat].split("-")
                player_data["stat_values"][stat] = ""
                for stat_val in stat_vals:
                    if stat_val and stat_val not in parsed_teams:
                        player_data["stat_values"][stat] += stat_val + "-"
                        parsed_teams.add(stat_val)
                player_data["stat_values"][stat] = player_data["stat_values"][stat][:-1]

    if not seasons_leading:
        calculate_advanced_stats(player_data["stat_values"], all_rows, player_type["da_type"]["type"], player_type["da_type"]["position"], player_data)
    
    for stat in formulas[player_type["da_type"]["type"]]:
        if not seasons_leading or stat == "TmRec":
            formula = formulas[player_type["da_type"]["type"]][stat]
            value = calculate_formula(stat, player_type, formula, player_data["stat_values"], all_rows, og_player_data)
            player_data["stat_values"][stat] = value

    player_data["stat_values"]["GP/GP"] = player_data["stat_values"]["GP"]

    adv_year = 2009 if player_type["da_type"]["type"] == "Skater" else 1917
    if adv_year == 2009 and has_against_quals_no_so(extra_stats):
        adv_year = 2000

    total_games = 0
    all_total_games = 0
    for row in all_rows:
        if "GP" in row:
            if row["Year"] >= adv_year:
                total_games += row["GP"]
            all_total_games += row["GP"]
    player_data["stat_values"]["GP_5v5" if player_type["da_type"]["type"] == "Skater" else "GP_Sit"] = total_games
    player_data["stat_values"]["GP_Penalty"] = all_total_games
    player_data["stat_values"]["GP_TOI"] = all_total_games

    if player_type["da_type"]["type"] == "Skater":
        player_data["stat_values"]["GP_Score"] = all_total_games
        player_data["stat_values"]["GP_TOI_5v5"] = total_games

    if player_type["da_type"]["type"] != "Skater":
        total_games = 0
        for row in all_rows:
            if row["Year"] >= adv_year and "GS" in row:
                total_games += row["GS"]
        player_data["stat_values"]["GS_Sit"] = total_games

    if isinstance(og_player_data["player_cap"], numbers.Number):
        player_data["stat_values"]["CurrentCap$"] += og_player_data["player_cap"]
    else:
        for cap_hit in og_player_data["player_cap"]:
            player_data["stat_values"]["CurrentCap$"] += cap_hit

    return player_data

def handle_multi_player_data(player_id, time_frames, player_type, player_page, remove_duplicates, remove_duplicate_games, extra_stats, comment_obj):
    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    player_data = {
        "id": player_id,
        "rows" : [],
        "seperate_rows" : [],
        "stat_values" : {
            "is_shift_data" : has_against_quals_no_so(extra_stats),
            "is_leading_data" : bool(seasons_leading),
            "is_indv_shift_data" : False,
            "is_shot_on_data" : False,
            "is_strength_data" : False,
            "is_on_ice_data" : False
        }
    }

    for time_frame in time_frames:
        if "Shot On" in time_frame["qualifiers"]:
            player_data["stat_values"]["is_shot_on_data"] = True
        if "Even Strength" in time_frame["qualifiers"] or "Power Play" in time_frame["qualifiers"] or "Short Handed" in time_frame["qualifiers"]:
            player_data["stat_values"]["is_strength_data"] = True
        if has_shift_quals(time_frame["qualifiers"]):
            player_data["stat_values"]["is_on_ice_data"] = True
    
    ind_player_type = get_player_type(player_page)
    player_type["da_type"]["position"] = ind_player_type["position"]

    player_data["Player"] = get_player_name(player_page)
    #try:
    #    player_data["LastUpdated"] = get_last_updated(player_page)
    #except Exception:
    #    player_data["LastUpdated"] = None
    player_data["LastUpdated"] = None
    player_data["Birthday"] = get_player_birthday(player_id, player_page)
    #player_data["Player_Active"] = get_player_is_active(player_id, player_page)
    player_data["player_image_url"] = get_player_image(player_page)
    player_data["year_valid_years"], player_data["reg_year_valid_years"], player_data["game_valid_years"], valid_teams, valid_teams_raw_key, valid_year_teams = get_valid_years(player_page, player_type)
    player_data["valid_year_teams"] = valid_year_teams

    player_data["player_current_team"], player_data["player_current_number"], player_data["player_all_numbers"], player_data["player_team_map"], player_data["numbers_year_map"] = get_player_current_team_number(player_page)
    player_data["player_position"] = get_player_position(player_page)
    player_data["player_cap"] = get_current_cap(player_page)
    player_data["player_flag"] = get_player_country(player_page)
    player_data["player_hof"] = get_player_hof(player_page)
    player_data["has_season_stats"] = True
    player_data["has_award_stats"] = True
    player_data["is_only_sc"] = True
    player_data["error_getting_adv"] = False

    player_data["DateStart"] = []
    player_data["DateEnd"] = []
    player_data["YearStart"] = []
    player_data["YearEnd"] = []
    player_data["is_playoffs"] = []

    any_missing_games = []
    any_missing_toi = []

    for time_frame in time_frames:
        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting player " + player_id)
        if ("Facing Former Team" in time_frame["qualifiers"] or "Facing Former Franchise" in time_frame["qualifiers"] or "With New Team" in time_frame["qualifiers"] or "With New Franchise" in time_frame["qualifiers"]) and not "valid_teams_order" in player_data:
            get_team_map_info(player_page, player_data, player_type, valid_teams_raw_key, comment_obj)
        if ("Game After Sub Query" in time_frame["qualifiers"] or "Game Before Sub Query" in time_frame["qualifiers"]) and not "all_games" in player_data:
            get_all_games(player_page, player_data, time_frame, player_type, comment_obj)
        row, missing_games, missing_toi = handle_player_data(player_data, time_frame, player_type, player_page, valid_teams, valid_year_teams, extra_stats)

        if remove_duplicates:
            current_dates = set([row_data["Date"] for row_data in player_data["rows"]])
            new_rows = []
            for row_data in row:
                if row_data["Date"] not in current_dates:
                    new_rows.append(row_data)
            row = new_rows

        if remove_duplicate_games:
            current_dates = set([row_data["Date"] for row_data in player_data["rows"]])
            for row_data in row:
                if row_data["Date"] in current_dates:
                    row_data["GP"] = 0
                    row_data["GS"] = 0

        date_start = 0
        date_end = 0
        year_start = 0
        year_end = 0

        for row_data in row:
            for stat in row_data:
                if stat == "Date":
                    pontential_date = row_data[stat]
                    if row_data["is_playoffs"] and isinstance(pontential_date, int) and time_frame["playoffs"] == "Only":
                        pontential_date += 1

                    if date_start == 0 or pontential_date < date_start:
                        date_start = pontential_date
                    if date_end == 0 or pontential_date > date_end:
                        date_end = pontential_date
                elif stat == "Year":
                    if year_start == 0 or row_data[stat] < year_start:
                        year_start = row_data[stat]
                    if year_end == 0 or row_data[stat] > year_end:
                        year_end = row_data[stat]
            row_data["player_type"] = ind_player_type
        
        if date_start:
            player_data["DateStart"].append(date_start)
        if date_end:
            player_data["DateEnd"].append(date_end)
        if year_start:
            player_data["YearStart"].append(year_start)
        if year_end:
            player_data["YearEnd"].append(year_end)
        player_data["is_playoffs"].append(time_frame["playoffs"])

        player_data["rows"] += row
        player_data["seperate_rows"] += [row]

        any_missing_games += missing_games
        any_missing_toi += missing_toi

        if comment_obj and comment_obj["is_approved"]:
            try:
                string_output = format_alert_message(comment_obj)
                if comment_obj["reply"]:
                    if isinstance(comment_obj["reply"], Message):
                        #comment_obj["comment"].reply(string_output.split(alert_message + "\n\n", 1)[1])
                        pass
                    else:
                        if display_progress_as_edit:
                            comment_obj["reply"].edit(string_output)
                        #else:
                        #    comment_obj["reply"].delete()
                        #    comment_obj["reply"] = None
                        #    comment_obj["reply"] = comment_obj["comment"].reply(string_output)
                    logger.info("#" + str(threading.get_ident()) + "#   User alert edited")
            except Exception:
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        
        logger.info("#" + str(threading.get_ident()) + "#   " + "Done with player " + player_id)

    return player_data, any_missing_games, any_missing_toi

def handle_player_data(player_data, time_frame, player_type, player_page, valid_teams, valid_year_teams, extra_stats):
    time_frame = {
        "playoffs" : time_frame["playoffs"],
        "time_start" : time_frame["time_start"],
        "time_end" : time_frame["time_end"],
        "type" : time_frame["type"],
        "qualifiers" : time_frame["qualifiers"]
    }

    if "Start If Goalie" in time_frame["qualifiers"]:
        if player_type["da_type"]["type"] != "Skater":
            time_frame["qualifiers"]["Start"] = []
            for qualifier in time_frame["qualifiers"]["Start If Goalie"]:
                time_frame["qualifiers"]["Start"].append(qualifier)
        del time_frame["qualifiers"]["Start If Goalie"]
    
    if player_type["da_type"]["type"] == "Skater":
        if "Start" in time_frame["qualifiers"]:
            del time_frame["qualifiers"]["Start"]

    is_qual_match = False
    is_qual_match_excl_round = False
    for qualifier in time_frame["qualifiers"]:
        if qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team Conference" and qualifier != "Team Division" and qualifier != "Rookie" and qualifier != "Max Stat" and qualifier != "Min Stat" and qualifier != "Max Streak" and qualifier != "Max Stretch" and qualifier != "Count Streak" and qualifier != "Quickest"  and qualifier != "Slowest" and qualifier != "Season Stat" and qualifier != "Season Age" and qualifier != "Season" and qualifier != "Season Reversed" and qualifier != "Previous Season Stat"  and qualifier != "Upcoming Season Stat" and qualifier != "Season Sub Query" and qualifier != "Season Before Sub Query" and qualifier != "Season After Sub Query" and qualifier != "Winning Team" and  qualifier != "Losing Team" and qualifier !=  "Winning Or Tied Team" and qualifier !=  "Losing Or Tied Team" and  qualifier != "Tied Team" and  qualifier != "Playoff Team" and qualifier != "Team Win Percentage" and qualifier != "Team Points Percentage" and qualifier != "Team Games Over 500" and qualifier != "Team Wins" and qualifier != "Team Losses" and qualifier != "Team Ties" and qualifier != "Team Points" and  qualifier != "Cup Winner Team" and qualifier != "Conference Winner Team" and  qualifier != "Team Goals Rank" and  qualifier != "Team Goals Allowed Rank" and qualifier != "Season Formula" and qualifier != "Season Number" and qualifier != "Even Year" and qualifier != "Odd Year" and qualifier != "Year":
            is_qual_match = True
            if qualifier != "Round":
                is_qual_match_excl_round = True
        elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
            for qual_object in time_frame["qualifiers"][qualifier]:
                for stat_obj in qual_object["values"]:
                    if not stat_obj["time_frame"] or not (stat_obj["time_frame"]["qual_type"] == "Seasons" or stat_obj["time_frame"]["qual_type"] == "Teams"):
                        is_qual_match = True
                        is_qual_match_excl_round = True
    
    is_game = not (time_frame["type"].startswith("season") or (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)))) or is_qual_match
    is_game_page = is_game or time_frame["playoffs"]
    is_only_round = (time_frame["type"].startswith("season") or (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)))) and "Round" in time_frame["qualifiers"] and not is_qual_match_excl_round
    if is_only_round:
        is_only_round = False
        for qual_object in time_frame["qualifiers"]["Round"]:
            if not qual_object["negate"]:
                if "sc" in qual_object["values"]:
                    is_only_round = True
                    break

    player_info = get_nhl_player_link(player_data)
    if not player_info:
        logger.warn("Unable to get NHL player link for HRef ID : " + player_data["id"] + ". Will not get any stats")
        player_data["nhl_id"] = -1
        return [], [], []
    player_link, player_name, player_position, handiness = player_info
    if player_position == "D":
        if handiness == "L":
            player_position = "LHD"
        elif handiness == "R":
            player_position = "RHD"
    player_data["nhl_id"] = int(player_link.split('/')[-1])
    player_data["Player"] = player_name
    player_data["player_position"] = player_position
    add_updated_years(player_link, player_data, time_frame)
    live_game = add_live_years(player_link, player_data, player_type, time_frame)

    missing_games = []
    missing_toi = []
    valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]
    all_rows = []

    if "Rookie" in time_frame["qualifiers"]:
        determine_rookie_years(player_type, player_page, time_frame["qualifiers"]["Rookie"], player_data["Birthday"], player_data, player_link)

    if time_frame["type"].startswith("season"):
        if not valid_years:
            time_frame["time_start"] = -1
            time_frame["time_end"] = -1
        elif time_frame["type"].startswith("season-range"):
            if not time_frame["time_start"]:
                time_index_end = time_frame["time_end"] - 1
                time_index_start = time_index_end
            elif not time_frame["time_end"]:
                time_index_start = time_frame["time_start"] - 1
                time_index_end = time_index_start
            else:
                time_index_start = time_frame["time_start"] - 1
                time_index_end = time_frame["time_end"] - 1
            
            if time_frame["type"] == "season-range-reversed":
                temp_time_index_end = time_index_end
                time_index_end = len(valid_years) - time_index_start - 1
                time_index_start = len(valid_years) - temp_time_index_end - time_index_start

            if time_index_start < 0:
                time_index_start = 0
            if time_index_end < 0:
                time_index_end = 0
            if time_index_start > len(valid_years) - 1:
                time_frame["time_start"] = -1
                time_frame["time_end"] = -1
            else:
                if time_index_end > len(valid_years) - 1:
                    time_index_end = len(valid_years) - 1
                time_frame["time_start"] = valid_years[time_index_start]
                time_frame["time_end"] = valid_years[time_index_end]
        elif time_frame["time_start"]:
            time_index = time_frame["time_start"]
            time_frame["time_start"] = valid_years[0]
            time_index = len(valid_years) - 1 if time_index > len(valid_years) else time_index - 1
            time_frame["time_end"] = valid_years[time_index]
        else:
            time_index = len(valid_years) - time_frame["time_end"]
            time_frame["time_end"] = valid_years[len(valid_years) - 1]
            time_index = 0 if time_index < 0 else time_index
            time_frame["time_start"] = valid_years[time_index]
        time_frame["type"] = "date"
    elif time_frame["type"] == "date":
        if isinstance(time_frame["time_end"], dateutil.relativedelta.relativedelta):
            first_year =  player_data["valid_years"][0]
            temp_time_frame = {
                "time_start" : first_year,
                "time_end" : first_year,
                "playoffs" : time_frame["is_playoffs"]
            }
            temp_rows = handle_season_stats_game(player_type, player_data, player_link, temp_time_frame)
            if temp_rows:
                first_date = temp_rows[0]["Date"]

                if time_frame["time_end"].microseconds:
                    if time_frame["time_end"].seconds == 1:
                        first_date = first_date - datetime.timedelta(days=first_date.weekday()) + dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                        time_frame["time_end"] = first_date + time_frame["time_end"]
                    elif time_frame["time_end"].seconds == 2:
                        first_date = datetime.datetime(first_date.year, first_date.month, 1).date() + dateutil.relativedelta.relativedelta(years=0, months=1, weeks=0, days=0)
                        time_frame["time_end"] = first_date + time_frame["time_end"]
                        original_day = time_frame["time_end"].day
                        time_frame["time_end"] = time_frame["time_end"].replace(day=1)
                        if original_day <= 15:
                            time_frame["time_end"] = time_frame["time_end"].replace(month=(time_frame["time_end"].month - 1))
                        time_frame["time_end"] = time_frame["time_end"].replace(day=calendar.monthrange(time_frame["time_end"].year, time_frame["time_end"].month)[1])
                    elif time_frame["time_end"].seconds == 3:
                        first_date = datetime.datetime(first_date.year, 1, 1).date() + dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                        time_frame["time_end"] = first_date + time_frame["time_end"]
                else:
                    time_frame["time_end"] = first_date + time_frame["time_end"]

                time_frame["time_start"] = first_date
            else:
                time_frame["time_start"] = -1
                time_frame["time_end"] = -1
    
    #if not is_game and player_type["da_type"]["type"] == "Skater":
    #    handle_hat_tricks(player_page, all_rows)
    
    #if player_type["da_type"]["type"] == "Skater" and time_frame["playoffs"]:
    #    handle_playoff_ot_goals(player_page, all_rows, is_game)

    da_rows = handle_season_stats_game(player_type, player_data, player_link, time_frame)
    for da_row in da_rows:
        for stat in da_row:
            if not da_row[stat]:
                da_row[stat] = 0
        all_rows.append(da_row)

    if live_game:
        all_rows = handle_live_stats(player_type, player_data, player_link, time_frame, all_rows, live_game, missing_games, missing_toi)

    fix_playoffs_data(all_rows, time_frame)

    if not is_game_page:
        handle_missing_playoff_rows(player_page, player_data, valid_years, all_rows, player_type, time_frame, player_link)

    if is_game:
        handle_date_row_data(all_rows)

    pre_qual_years = set([row["Year"] for row in all_rows])
    pre_qual_teams_map = {}
    for year in pre_qual_years:
        pre_qual_teams_map[year] = set([row["Tm"] for row in all_rows if row["Year"] == year])
    
    has_result_stat_qual = False
    for qualifier in time_frame["qualifiers"]:
        if "Season" not in qualifier and ("Stat" in qualifier or "Streak" in qualifier or "Stretch" in qualifier or ("Formula" in qualifier and qualifier != "Event Formula") or "Quickest" in qualifier or "Slowest" in qualifier):
            for qual_object in time_frame["qualifiers"][qualifier]:
                for sub_qual_object in qual_object["values"]:
                    if "Formula" in qualifier:
                        stats = qual_object["values"]
                    else:
                        if "stats" in sub_qual_object:
                            stats = []
                            for stat in sub_qual_object["stats"]:
                                stats.append(stat["stat"])
                        else:
                            stats = [sub_qual_object["stat"]]
                stat = " ".join(stats)
                if "time" in stat or "arena" in stat or "score" in stat or "goal" in stat or "result" in stat or "round" in stat or "series" in stat or "tmgm" in stat or "gamesrest" in stat or "gamesinarow" in stat or "daysinarow" in stat or "elimination" in stat or "clinching" in stat or "tmg" in stat or "oppg" in stat or "ttlg" in stat or "gdiff" in stat:
                    has_result_stat_qual = True
                if "fight" in stat:
                    extra_stats.add("penalties")
    
    for extra_stat in extra_stats:
        if extra_stat.startswith("show-stat-"):
            stat = extra_stat.split("show-stat-", 1)[1]
            if stat == "time" or stat == "arena" or stat == "score" or stat == "goal" or stat == "result" or stat == "round" or stat == "series" or stat == "tmgm" or stat == "gamesrest" or stat == "gamesinarow" or stat == "daysinarow" or stat == "elimination" or stat == "clinching" or stat == "tmhg" or stat == "oppg" or stat == "ttlg" or stat == "gdiff":
                has_result_stat_qual = True
            if stat == "fight":
                extra_stats.add("penalties")

    needs_half = False
    if "First Half" in time_frame["qualifiers"] or "Second Half" in time_frame["qualifiers"]:
        for row in all_rows:
            year = row["Year"]
            if str(year) not in all_star_games:
                needs_half = True

    if has_result_stat_qual or "Time" in time_frame["qualifiers"] or "Arena" in time_frame["qualifiers"] or "Exact Arena" in time_frame["qualifiers"] or "Result" in time_frame["qualifiers"] or "Previous Result" in time_frame["qualifiers"] or "Upcoming Result" in time_frame["qualifiers"] or "Elimination" in time_frame["qualifiers"] or "Clinching" in time_frame["qualifiers"] or "Elimination Or Clinching" in time_frame["qualifiers"] or "Winner Take All" in time_frame["qualifiers"] or "Ahead In Series" in time_frame["qualifiers"] or "Behind In Series" in time_frame["qualifiers"] or "Even In Series" in time_frame["qualifiers"] or "Series Team Wins" in time_frame["qualifiers"] or "Series Opponent Wins" in time_frame["qualifiers"] or "Series Score Margin" in time_frame["qualifiers"] or "Series Score Difference" in time_frame["qualifiers"] or "Round" in time_frame["qualifiers"] or "Series Game" in time_frame["qualifiers"] or "Final Team Score" in time_frame["qualifiers"] or "Final Opponent Score" in time_frame["qualifiers"] or "Final Score Margin" in time_frame["qualifiers"] or "Final Score Difference" in time_frame["qualifiers"] or "Team Game" in time_frame["qualifiers"] or "Team Game Reversed" in time_frame["qualifiers"] or "Games Rest" in time_frame["qualifiers"] or "Starts Rest" in time_frame["qualifiers"] or "Days In A Row" in time_frame["qualifiers"] or "Games In A Row" in time_frame["qualifiers"] or "Starts In A Row" in time_frame["qualifiers"] or "Previous Team Result" in time_frame["qualifiers"] or "Upcoming Team Result" in time_frame["qualifiers"] or "National Game" in time_frame["qualifiers"] or "Any National Game" in time_frame["qualifiers"] or "US National Game" in time_frame["qualifiers"] or "Any US National Game" in time_frame["qualifiers"] or "CA National Game" in time_frame["qualifiers"] or "Any CA National Game" in time_frame["qualifiers"] or "TV Network" in time_frame["qualifiers"] or "Raw TV Network" in time_frame["qualifiers"] or "National TV Network" in time_frame["qualifiers"] or "National Raw TV Network" in time_frame["qualifiers"] or "Any National TV Network" in time_frame["qualifiers"] or "Any National Raw TV Network" in time_frame["qualifiers"] or "Start Time" in time_frame["qualifiers"] or "Current Winning Opponent" in time_frame["qualifiers"] or "Current Losing Opponent" in time_frame["qualifiers"] or "Current Tied Opponent" in time_frame["qualifiers"] or "Current Winning Or Tied Opponent" in time_frame["qualifiers"] or "Current Losing Or Tied Opponent" in time_frame["qualifiers"] or "Current Winning Team" in time_frame["qualifiers"] or "Current Losing Team" in time_frame["qualifiers"] or "Current Tied Team" in time_frame["qualifiers"] or "Current Winning Or Tied Team" in time_frame["qualifiers"] or "Current Losing Or Tied Team" in time_frame["qualifiers"] or "Current Team Win Percentage" in time_frame["qualifiers"] or "Current Opponent Win Percentage" in time_frame["qualifiers"] or "Current Team Points Percentage" in time_frame["qualifiers"] or "Current Opponent Points Percentage" in time_frame["qualifiers"] or "Current Team Wins" in time_frame["qualifiers"] or "Current Team Losses" in time_frame["qualifiers"] or "Current Team Ties" in time_frame["qualifiers"] or "Current Team Points" in time_frame["qualifiers"] or "Current Opponent Wins" in time_frame["qualifiers"] or "Current Opponent Losses" in time_frame["qualifiers"] or "Current Opponent Ties" in time_frame["qualifiers"] or "Current Opponent Points" in time_frame["qualifiers"] or "Current Team Games Over 500" in time_frame["qualifiers"] or "Current Opponent Games Over 500" in time_frame["qualifiers"] or needs_half or "score" in extra_stats or "record" in extra_stats:
        all_rows, missing_games = handle_schedule_stats(player_data, all_rows, time_frame["qualifiers"], time_frame["playoffs"], missing_games)
    
    if "Winning Opponent" in time_frame["qualifiers"] or "Losing Opponent" in time_frame["qualifiers"] or "Tied Opponent" in time_frame["qualifiers"] or "Winning Or Tied Opponent" in time_frame["qualifiers"] or "Losing Or Tied Opponent" in time_frame["qualifiers"] or "Playoff Opponent" in time_frame["qualifiers"] or "Cup Winner Opponent" in time_frame["qualifiers"] or "Conference Winner Opponent" in time_frame["qualifiers"] or "Opponent Goals Rank" in time_frame["qualifiers"] or "Opponent Goals Allowed Rank" in time_frame["qualifiers"] or "Opponent Win Percentage" in time_frame["qualifiers"] or "Opponent Points Percentage" in time_frame["qualifiers"] or "Winning Team" in time_frame["qualifiers"] or "Losing Team" in time_frame["qualifiers"] or "Tied Team" in time_frame["qualifiers"] or "Winning Or Tied Team" in time_frame["qualifiers"] or "Losing Or Tied Team" in time_frame["qualifiers"] or "Playoff Team" in time_frame["qualifiers"] or "Cup Winner Team" in time_frame["qualifiers"] or "Conference Winner Team" in time_frame["qualifiers"] or "Team Goals Rank" in time_frame["qualifiers"] or "Team Goals Allowed Rank" in time_frame["qualifiers"] or "Team Win Percentage" in time_frame["qualifiers"] or "Team Points Percentage" in time_frame["qualifiers"] or "Team Wins" in time_frame["qualifiers"] or "Team Losses" in time_frame["qualifiers"] or "Team Ties" in time_frame["qualifiers"] or "Team Points" in time_frame["qualifiers"] or "Opponent Wins" in time_frame["qualifiers"] or "Opponent Losses" in time_frame["qualifiers"] or "Opponent Ties" in time_frame["qualifiers"] or "Opponent Points" in time_frame["qualifiers"] or "Team Conference" in time_frame["qualifiers"] or "Team Division" in time_frame["qualifiers"] or "Opponent Conference" in time_frame["qualifiers"] or "Opponent Division" in time_frame["qualifiers"] or "Interconference" in time_frame["qualifiers"] or "Intraconference" in time_frame["qualifiers"] or "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"] or "Team Standings Rank" in time_frame["qualifiers"] or "Opponent Standings Rank" in time_frame["qualifiers"] or "Team Games Over 500" in time_frame["qualifiers"] or "Opponent Games Over 500" in time_frame["qualifiers"]:
        all_rows = handle_opponent_schedule_stats(all_rows, time_frame["qualifiers"])

    has_neg_qual = False
    if "Shootout" in time_frame["qualifiers"]:
        for qual_obj in time_frame["qualifiers"]["Shootout"]:
            if qual_obj["negate"]:
                has_neg_qual = True
                break
    if not has_neg_qual and "Penalty Shot" in time_frame["qualifiers"]:
        for qual_obj in time_frame["qualifiers"]["Penalty Shot"]:
            if qual_obj["negate"]:
                has_neg_qual = True
                break

    if "Intraleague" in time_frame["qualifiers"] or "Interleague" in time_frame["qualifiers"] or "Intraconference" in time_frame["qualifiers"]  or "Interconference" in time_frame["qualifiers"] or "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"]:
        new_rows = []
        for row in all_rows:
            if perform_team_opponent_schedule_qualifiers(row, time_frame["qualifiers"]):
                new_rows.append(row)
        all_rows = new_rows
    
    if time_frame["qualifiers"]:
        new_rows = []
        for row_data in all_rows:
            if perform_qualifier(player_data, player_type, row_data, time_frame, all_rows):
                new_rows.append(row_data)
        all_rows = new_rows
    
    if "Game Number" in time_frame["qualifiers"] or "Shot On" in time_frame["qualifiers"] or "Event Formula" in time_frame["qualifiers"] or "On Ice With" in time_frame["qualifiers"] or "On Ice Against" in time_frame["qualifiers"] or "Assisted On" in time_frame["qualifiers"] or "Assisted With" in time_frame["qualifiers"] or "Points With" in time_frame["qualifiers"] or "Assisted By" in time_frame["qualifiers"] or "Primary Assisted On" in time_frame["qualifiers"] or "Primary Assisted With" in time_frame["qualifiers"] or "Primary Points With" in time_frame["qualifiers"] or "Primary Assisted By" in time_frame["qualifiers"] or "Hit On" in time_frame["qualifiers"] or "Block On" in time_frame["qualifiers"] or "Penalty On" in time_frame["qualifiers"] or "Faceoff Against" in time_frame["qualifiers"] or "Fight Against" in time_frame["qualifiers"] or "Penalty Type" in time_frame["qualifiers"] or "Team Score" in time_frame["qualifiers"] or "Opponent Score" in time_frame["qualifiers"] or "Score Margin" in time_frame["qualifiers"] or "Score Difference" in time_frame["qualifiers"] or "Period" in time_frame["qualifiers"] or "Period Stat" in time_frame["qualifiers"] or "Coordinates" in time_frame["qualifiers"] or "Period Time" in time_frame["qualifiers"] or "Period Time Remaining" in time_frame["qualifiers"] or "Unassisted" in time_frame["qualifiers"] or "Career Minute" in time_frame["qualifiers"] or "Career Minute Reversed" in time_frame["qualifiers"] or "Game Minute" in time_frame["qualifiers"] or "Game Minute Reversed" in time_frame["qualifiers"] or "Career Shot" in time_frame["qualifiers"] or "Career Shot Reversed" in time_frame["qualifiers"] or "Game Shot" in time_frame["qualifiers"] or "Game Shot Reversed" in time_frame["qualifiers"] or "Strength" in time_frame["qualifiers"] or "Even Skaters" in time_frame["qualifiers"] or "Even Goalies" in time_frame["qualifiers"] or "More Skaters" in time_frame["qualifiers"] or "Less Skaters" in time_frame["qualifiers"] or "Team Goalie Pulled" in time_frame["qualifiers"] or "Opponent Goalie Pulled" in time_frame["qualifiers"] or "Power Play" in time_frame["qualifiers"] or "Short Handed" in time_frame["qualifiers"] or "Even Strength" in time_frame["qualifiers"] or "Team Skaters" in time_frame["qualifiers"] or "Opponent Skaters" in time_frame["qualifiers"] or "Team Players" in time_frame["qualifiers"] or "Opponent Players" in time_frame["qualifiers"] or "Overtime" in time_frame["qualifiers"] or "Game Winning" in time_frame["qualifiers"] or "Offensive Zone" in time_frame["qualifiers"] or "Defensive Zone" in time_frame["qualifiers"] or "Neutral Zone" in time_frame["qualifiers"] or "Event Time" in time_frame["qualifiers"] or "penalties" in extra_stats or "star" in extra_stats or "current-stats" in extra_stats:
        all_rows, missing_games, missing_toi = handle_nhl_game_stats(player_data, all_rows, time_frame, player_link, player_type, missing_games, missing_toi, extra_stats)
        player_data["stat_values"]["is_indv_shift_data"] = True

    if time_frame["qualifiers"]:
        new_rows = []
        for row_data in all_rows:
            if perform_post_qualifier(player_data, player_type, row_data, time_frame["qualifiers"], all_rows):
                new_rows.append(row_data)
        all_rows = new_rows
        
    years_full_team = set()
    post_qual_years = set([row["Year"] for row in all_rows])
    for year in post_qual_years:
        if pre_qual_teams_map[year] == set([row["Tm"] for row in all_rows if row["Year"] == year]):
            years_full_team.add(year)

    years_to_skip = set()
    years_to_skip_champ = {}
    if ("Team" in time_frame["qualifiers"] or "Team Franchise" in time_frame["qualifiers"] or "Team League" in time_frame["qualifiers"] or "Team Division" in time_frame["qualifiers"] or "Season Number" in time_frame["qualifiers"]):
        years_count = {}
        for team in valid_teams:
            for year in valid_teams[team]:
                if not year in years_count:
                    years_count[year] = 0
                years_count[year] += 1
        
        for year in years_count:
            if years_count[year] > 1:
                if not year in years_full_team:
                    years_to_skip.add(year)
                    years_to_skip_champ[year] = valid_year_teams[year][len(valid_year_teams[year]) - 1]
    
    has_season_stats = False
    has_award_stats = False
    is_only_sc = False
    if not all_rows:
        has_season_stats = True
        has_award_stats = True
        is_only_sc = True
    elif (not is_game or is_only_round):
        if not (is_game and is_only_round) and not time_frame["playoffs"]:
            has_season_stats = True
            if max([row["Year"] for row in all_rows]) >= 2016 or (player_type["da_type"]["type"] == "Skater" and max([row["Year"] for row in all_rows]) >= 2007):
                handle_season_only_stats(player_page, player_data, player_type, time_frame, all_rows, None)

        if not (is_game and is_only_round):
            regular_seasons = set()
            playoff_seasons = set()
            all_seasons = set()
            for row in all_rows:
                if row["Year"] not in years_to_skip:
                    if "fake_playoff_row" in row and row["fake_playoff_row"]:
                        row["PlayoffSeasons"] = 1
                        regular_seasons.add(row["Year"])
                    elif row["is_playoffs"]:
                        row["PlayoffSeasons"] = 1
                        playoff_seasons.add(row["Year"])
                    else:
                        row["RegularSeasons"] = 1
                        for player_pos in player_data["player_position"]:
                            player_pos_split = player_pos.split("/")
                            for sub_player_pos in player_pos_split:
                                if sub_player_pos != "G":
                                    if sub_player_pos == "D" or sub_player_pos == "LHD" or sub_player_pos == "RHD":
                                        row["DefenseRegularSeasons"] = 1
                                        break
                                    elif sub_player_pos != "G":
                                        row["SkaterRegularSeasons"] = 1
                                        break
                        regular_seasons.add(row["Year"])
                if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                    row["UniqueSeasons"] = 1
                
                row["Seasons"] = 1
                if not ("fake_playoff_row" in row and row["fake_playoff_row"]):
                    row["NonFakeSeasons"] = 1
                all_seasons.add(row["Year"])

            has_award_stats = True
            handle_awards(player_page, player_data, player_type, time_frame, years_to_skip, years_to_skip_champ, all_rows)
        if is_game and is_only_round:
            is_only_sc = True

    if "Season Stat" in time_frame["qualifiers"] or "Previous Season Stat" in time_frame["qualifiers"] or "Upcoming Season Stat" in time_frame["qualifiers"] or "Season Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_season_stats(all_rows, player_data, player_type, time_frame["qualifiers"])

    if "Total Games Stat" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_career_stats(all_rows, player_data, player_type, time_frame["qualifiers"])

    if "Max Streak" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], True, False)

    if "Count Streak" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], False, False)
    
    if "Max Streak Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], True, True)

    if "Count Streak Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], False, True)
    
    if "Max Stretch" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_max_stretch(all_rows, player_data, player_type, time_frame["qualifiers"])
    
    if "Quickest" in time_frame["qualifiers"] or "Slowest" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_quick_long(all_rows, player_data, player_type, time_frame["qualifiers"])
    
    if "Max Stat" in time_frame["qualifiers"] or "Min Stat" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["Date"])
        all_rows = handle_max_min_data(all_rows, player_data, player_type, time_frame["qualifiers"])
    
    if "Season" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        new_rows = []
        for row in all_rows:
            add_row = True
            for qual_object in time_frame["qualifiers"]["Season"]:
                season_index = seasons.index(row["Year"]) + 1
                if qual_object["negate"]:
                    if season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]:
                        add_row =  False
                        break
                else:
                    if not (season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]):
                        add_row =  False
                        break
                if add_row:
                    new_rows.append(row)
        all_rows = new_rows
    
    if "Season Reversed" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Year"] for row in all_rows])), reverse=True)
        new_rows = []
        for row in all_rows:
            add_row = True
            for qual_object in time_frame["qualifiers"]["Season Reversed"]:
                season_index = seasons.index(row["Year"]) + 1
                if qual_object["negate"]:
                    if season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]:
                        add_row =  False
                        break
                else:
                    if not (season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]):
                        add_row =  False
                        break
                if add_row:
                    new_rows.append(row)
        all_rows = new_rows

    if "Season Games" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        new_rows = []
        for season in seasons:
            yearly_rows = []
            for row in all_rows:
                if row["Year"] == season:
                    yearly_rows.append(row)
            
            if "compare_type" in time_frame["qualifiers"]["Season Games"]:
                yearly_rows = sorted(yearly_rows, key=lambda row: row["Date"])
                if time_frame["qualifiers"]["Season Games"]["negate"]:
                    if time_frame["qualifiers"]["Season Games"]["compare_type"] == "first":
                        yearly_rows = yearly_rows[time_frame["qualifiers"]["Season Games"]["time_unit"]:]
                    else:
                        yearly_rows = yearly_rows[:-time_frame["qualifiers"]["Season Games"]["time_unit"]]
                else:
                    if time_frame["qualifiers"]["Season Games"]["compare_type"] == "first":
                        yearly_rows = yearly_rows[:time_frame["qualifiers"]["Season Games"]["time_unit"]]
                    else:
                        yearly_rows = yearly_rows[-time_frame["qualifiers"]["Season Games"]["time_unit"]:]
            else:
                yearly_rows = sorted(yearly_rows, key=lambda row: row["Date"], reverse=time_frame["qualifiers"]["Season Games"]["reverse"])
                time_start = time_frame["qualifiers"]["Season Games"]["start_val"]
                if time_start == float("inf"):
                    time_start = len(yearly_rows) - 1
                elif time_start == -float("inf"):
                    time_start = 0
                else:
                    time_start -= 1
                time_end = time_frame["qualifiers"]["Season Games"]["end_val"]
                if time_end == float("inf"):
                    time_end = len(yearly_rows)
                elif time_end == -float("inf"):
                    time_end = 1
                if time_frame["qualifiers"]["Season Games"]["negate"]:
                    yearly_rows = yearly_rows[:time_start] + yearly_rows[time_end:]
                else:
                    yearly_rows = yearly_rows[time_start:time_end]
            
            new_rows.extend(yearly_rows)
        all_rows = new_rows

    if "Games" in time_frame["qualifiers"]:
        if "compare_type" in time_frame["qualifiers"]["Games"]:
            all_rows = sorted(all_rows, key=lambda row: row["Date"])
            if time_frame["qualifiers"]["Games"]["negate"]:
                if time_frame["qualifiers"]["Games"]["compare_type"] == "first":
                    all_rows = all_rows[time_frame["qualifiers"]["Games"]["time_unit"]:]
                else:
                    all_rows = all_rows[:-time_frame["qualifiers"]["Games"]["time_unit"]]
            else:
                if time_frame["qualifiers"]["Games"]["compare_type"] == "first":
                    all_rows = all_rows[:time_frame["qualifiers"]["Games"]["time_unit"]]
                else:
                    all_rows = all_rows[-time_frame["qualifiers"]["Games"]["time_unit"]:]
        else:
            all_rows = sorted(all_rows, key=lambda row: row["Date"], reverse=time_frame["qualifiers"]["Games"]["reverse"])
            time_start = time_frame["qualifiers"]["Games"]["start_val"]
            if time_start == float("inf"):
                time_start = len(all_rows) - 1
            elif time_start == -float("inf"):
                time_start = 0
            else:
                time_start -= 1
            time_end = time_frame["qualifiers"]["Games"]["end_val"]
            if time_end == float("inf"):
                time_end = len(all_rows)
            elif time_end == -float("inf"):
                time_end = 1
            if time_frame["qualifiers"]["Games"]["negate"]:
                all_rows = all_rows[:time_start] + all_rows[time_end:]
            else:
                all_rows = all_rows[time_start:time_end]

    if is_game and is_only_round:
        regular_seasons = set()
        playoff_seasons = set()
        all_seasons = set()
        for row in all_rows:
            if row["Year"] not in years_to_skip:
                if "fake_playoff_row" in row and row["fake_playoff_row"]:
                    row["PlayoffSeasons"] = 1
                    regular_seasons.add(row["Year"])
                elif row["is_playoffs"]:
                    row["PlayoffSeasons"] = 1
                    playoff_seasons.add(row["Year"])
                else:
                    row["RegularSeasons"] = 1
                    regular_seasons.add(row["Year"])
            if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                row["UniqueSeasons"] = 1
            
            row["Seasons"] = 1
            if not ("fake_playoff_row" in row and row["fake_playoff_row"]):
                row["NonFakeSeasons"] = 1
            all_seasons.add(row["Year"])

        has_award_stats = True
        handle_awards(player_page, player_data, player_type, time_frame, years_to_skip, years_to_skip_champ, all_rows)
    
    seasons_leading_start = 0
    seasons_leading_end = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading_end = int(extra_stat.split("-")[2])
                if len(extra_stat.split("-")) >= 4:
                    seasons_leading_start = int(extra_stat.split("-")[2])
                else:
                    seasons_leading_start = 1
            else:
                seasons_leading_start = 1
                seasons_leading_end = 1
    if not is_game_page and seasons_leading_start:
        handle_leading_seasons(player_page, player_data, player_type, time_frame, years_to_skip, all_rows, seasons_leading_start, seasons_leading_end)
    
    if not has_season_stats:
        player_data["has_season_stats"] = False
    if not has_award_stats:
        player_data["has_award_stats"] = False
    if not is_only_sc:
        player_data["is_only_sc"] = False

    if has_award_stats:
        fix_seasons(all_rows)

    return all_rows, missing_games, missing_toi

def get_team_map_info(player_page, player_data, player_type, valid_teams, comment_obj):
    subbb_frames = [{
        "time_start" : 0,
        "time_end" : datetime.date.today().year,
        "type" : "date",
        "add_type" : "add", 
        "playoffs" : "Include",
        "qualifiers" : {
            "Force Dates" : [{
                "negate" : False
            }]
        }
    }]
    sub_player_data = handle_multi_player_data(player_data["id"], subbb_frames, player_type, player_page, False, False, set(), comment_obj)[0]

    teams_map = {}
    franc_map = {}
    team_ranges = {}
    franc_ranges = {}
    last_team = None
    last_franchise = None
    for row_data in sorted(sub_player_data["rows"], key=lambda row: row["Date"]):
        if row_data["Tm"] not in teams_map:
            teams_map[row_data["Tm"]] = row_data["Date"]
        if row_data["Tm"] not in team_ranges:
            team_ranges[row_data["Tm"]] = {}
            last_team = None
        if row_data["Year"] not in team_ranges[row_data["Tm"]]:
            team_ranges[row_data["Tm"]][row_data["Year"]] = []
            last_team = None
        if last_team != row_data["Tm"]:
            team_ranges[row_data["Tm"]][row_data["Year"]].append({
                "start" : row_data["Date"]
            })
        team_ranges[row_data["Tm"]][row_data["Year"]][len(team_ranges[row_data["Tm"]][row_data["Year"]]) - 1]["end"] = row_data["Date"]
        last_team = row_data["Tm"]

        team_franchise = team_main_abbr[str(row_data["Year"])][row_data["Tm"]]
        if team_franchise not in franc_map:
            franc_map[team_franchise] = row_data["Date"]
        if team_franchise not in franc_ranges:
            franc_ranges[team_franchise] = {}
            last_franchise = None
        if row_data["Year"] not in franc_ranges[team_franchise]:
            franc_ranges[team_franchise][row_data["Year"]] = []
            last_franchise = None
        if last_franchise != team_franchise:
            franc_ranges[team_franchise][row_data["Year"]].append({
                "start" : row_data["Date"]
            })
        franc_ranges[team_franchise][row_data["Year"]][len(franc_ranges[team_franchise][row_data["Year"]]) - 1]["end"] = row_data["Date"]
        last_franchise = team_franchise

    last_team = None
    last_franchise = None
    for team in valid_teams:
        for year in sorted(valid_teams[team]):
            if year not in player_data["game_valid_years"]:
                if team not in teams_map:
                    teams_map[team] = year
                if team not in team_ranges:
                    team_ranges[team] = {}
                    last_team = None
                if year not in team_ranges[team]:
                    team_ranges[team][year] = []
                    last_team = None
                if last_team != team:
                    team_ranges[team][year].append({
                        "start" : year
                    })
                team_ranges[team][year][len(team_ranges[team][year]) - 1]["end"] = year
                last_team = team

                team_franchise = team_main_abbr[str(year)][team]
                if team_franchise not in franc_map:
                    franc_map[team_franchise] = year
                if team_franchise not in team_ranges:
                    team_ranges[team_franchise] = {}
                    last_franchise = None
                if year not in team_ranges[team_franchise]:
                    team_ranges[team_franchise][year] = []
                    last_franchise = None
                if last_franchise != team_franchise:
                    team_ranges[team_franchise][year].append({
                        "start" : year
                    })
                team_ranges[team_franchise][year][len(team_ranges[team_franchise][year]) - 1]["end"] = year
                last_franchise = team_franchise
    
    player_data["valid_teams_order"] = {
        "team" : teams_map,
        "franchise" : franc_map
    }

    player_data["valid_team_ranges"] = {
        "team" : team_ranges,
        "franchise" : franc_ranges
    }

def get_all_games(player_page, player_data, time_frame, player_type, comment_obj):
    subbb_frames = [{
        "time_start" : 0,
        "time_end" : datetime.date.today().year,
        "type" : "date",
        "add_type" : "add", 
        "playoffs" : time_frame["playoffs"],
        "qualifiers" : {
            "Force Dates" : [{
                "negate" : False
            }]
        }
    }]
    sub_player_data = handle_multi_player_data(player_data["id"], subbb_frames, player_type, player_page, False, False, set(), comment_obj)[0]

    player_data["all_games"] = {}
    for row in sorted(sub_player_data["rows"], key=lambda row: row["Date"]):
        if row["Year"] not in player_data["all_games"]:
            player_data["all_games"][row["Year"]] = []
        player_data["all_games"][row["Year"]].append(row["GameLink"])

def handle_date_row_data(all_rows):
    all_rows = sorted(all_rows, key=lambda row: row["Date"])

    game_counter = 0
    prev_year = None
    last_date = None
    year_count = None
    for index, row_data in enumerate(all_rows):
        if last_date == row_data["Date"]:
            row_data["Gm"] = all_rows[index - 1]["Gm"]
            row_data["GmRev"] = all_rows[index - 1]["GmRev"]
            row_data["CrGm"] = all_rows[index - 1]["CrGm"]
            row_data["CrGmRev"] = all_rows[index - 1]["CrGmRev"]
            row_data["Previous Row"] = all_rows[index - 1]["Previous Row"]
            row_data["Upcoming Row"] = all_rows[index - 1]["Upcoming Row"]
            continue
        
        last_date = row_data["Date"]
        if prev_year != row_data["Year"]:
            game_counter = 0
        prev_year = row_data["Year"]

        if not year_count:
            year_count = len(set([row["Date"] for row in all_rows if row["Year"] == row_data["Year"]]))

        game_counter += 1

        row_data["Gm"] = game_counter
        row_data["GmRev"] = year_count - game_counter + 1
        row_data["CrGm"] = index + 1
        row_data["CrGmRev"] = len(all_rows) - index

        if index == 0:
            row_data["Previous Row"] = None
        else:
            row_data["Previous Row"] = all_rows[index - 1]
            if row_data["Previous Row"]["Year"] != row_data["Year"]:
                row_data["Previous Row"] = None
        
        if index == len(all_rows) - 1:
            row_data["Upcoming Row"] = None
        else:
            row_data["Upcoming Row"] = all_rows[index + 1]
            if row_data["Upcoming Row"]["Year"] != row_data["Year"]:
                row_data["Upcoming Row"] = None

def handle_season_stats_game(player_type, player_data, player_link, time_frame):
    if isinstance(time_frame["time_start"], int):
        if time_frame["time_start"] == -1:
            return []

        start_date = str(time_frame["time_start"])
        start_date += str(time_frame["time_start"] + 1)
        end_date = str(time_frame["time_end"])
        end_date += str(time_frame["time_end"] + 1)
        end_year = time_frame["time_end"]
    else:
        start_date = str(time_frame["time_start"].year - 1)
        start_date += str(int(start_date) + 1)
        end_date = str(time_frame["time_end"].year + 1)
        end_date += str(int(end_date) + 1)
        end_year = time_frame["time_end"].year

    player_id = int(player_link.split('/')[-1])
    is_playoffs = time_frame["playoffs"]

    if player_type["da_type"]["type"] == "Skater":
        has_non_goalie = False
        if player_data["player_position"]:
            player_pos_split = player_data["player_position"].split("/")
            for sub_player_pos in player_pos_split:
                if sub_player_pos != "G":
                    has_non_goalie = True
        else:
            has_non_goalie = True
        player_key = "skater" if has_non_goalie else "goalie"

        if has_non_goalie:
            reports = ["summary", "scoringRates", "puckPossessions", "shottype", "penalties", "realtime", "scoringpergame", "powerplay", "penaltykill", "timeonice", "faceoffwins", "summaryshooting", "goalsForAgainst"]
            #reports = ["summary", "scoringRates", "puckPossessions", "shottype", "penalties", "scoringpergame", "powerplay", "penaltykill", "timeonice", "faceoffwins", "summaryshooting", "goalsForAgainst"]
            if end_year < 2009:
                reports.remove("scoringRates")
                reports.remove("puckPossessions")
                reports.remove("shottype")
                reports.remove("summaryshooting")
                if end_year < 1997:
                    reports.remove("timeonice")
                    reports.remove("faceoffwins")
        else:
            reports = ["summary", "advanced"]
    else:
        player_key = "goalie"
        reports = ["summary", "advanced", "savesByStrength"]
        if end_year < 1997:
            reports.remove("savesByStrength")
    
    if "Penalty Shot" in time_frame["qualifiers"]:
        reports.append("penaltyShots")
    if "Shootout" in time_frame["qualifiers"]:
        reports.append("shootout")

    all_rows = []
    for report in reports:
        playoff_games = []
        reg_games = []
        start = 0
        while True:
            game_id = 3 if is_playoffs else 2
            games_to_use = playoff_games if is_playoffs else reg_games
            if report == "penaltyShots" or report == "shootout":
                url_to_use = "https://api.nhle.com/stats/rest/en/" + player_key + "/" + report + "?isAggregate=false&isGame=true&start=" + str(start) +"&limit=100&cayenneExp=" + urllib.parse.quote_plus("seasonId<=\"" + str(end_date) + "\" and seasonId>=\"" + str(start_date) + "\" and gameTypeId=" + str(game_id) + " and playerId like \"" + str(player_id) + "\"")
            else:
                url_to_use = "https://api.nhle.com/stats/rest/en/" + player_key + "/" + report + "?isAggregate=false&isGame=true&start=" + str(start) +"&factCayenneExp=gamesPlayed>=1&sort=[{\"property\":\"gameDate\",\"direction\":\"ASC\"}]&limit=100&cayenneExp=" + urllib.parse.quote_plus("seasonId<=\"" + str(end_date) + "\" and seasonId>=\"" + str(start_date) + "\" and gameTypeId=" + str(game_id) + " and playerId like \"" + str(player_id) + "\"")
            request = urllib.request.Request(url_to_use, headers=request_headers)
            try:
                sub_data = url_request_json(request)
            except urllib.error.HTTPError:
                raise
            games_to_use += sub_data["data"]
            start += 100
            if len(games_to_use) >= sub_data["total"] or not sub_data["data"]:
                break
        
        if is_playoffs == "Include":
            sub_games = []
            start = 0
            while True:
                game_id = 2
                if report == "penaltyShots" or report == "shootout":
                    url_to_use = "https://api.nhle.com/stats/rest/en/" + player_key + "/" + report + "?isAggregate=false&isGame=true&start=" + str(start) +"&limit=100&cayenneExp=" + urllib.parse.quote_plus("seasonId<=\"" + str(end_date) + "\" and seasonId>=\"" + str(start_date) + "\" and gameTypeId=" + str(game_id) + " and playerId like \"" + str(player_id) + "\"")
                else:
                    url_to_use = "https://api.nhle.com/stats/rest/en/" + player_key + "/" + report + "?isAggregate=false&isGame=true&start=" + str(start) +"&factCayenneExp=gamesPlayed>=1&sort=[{\"property\":\"gameDate\",\"direction\":\"ASC\"}]&limit=100&cayenneExp=" + urllib.parse.quote_plus("seasonId<=\"" + str(end_date) + "\" and seasonId>=\"" + str(start_date) + "\" and gameTypeId=" + str(game_id) + " and playerId like \"" + str(player_id) + "\"")
                request = urllib.request.Request(url_to_use, headers=request_headers)
                try:
                    sub_data = url_request_json(request)
                except urllib.error.HTTPError:
                    raise
                sub_games += sub_data["data"]
                start += 100
                if len(sub_games) >= sub_data["total"] or not sub_data["data"]:
                    break
            reg_games += sub_games
        
        for index, game in enumerate(playoff_games + reg_games):
            if game["playerId"] != player_id:
                continue
            
            if game["gameId"] in manual_info:
                row_date = manual_info[game["gameId"]]["Date"]
            else:
                row_date = dateutil.parser.parse(game["gameDate"]).date()

            row_data = None
            for row in all_rows:
                if row["Date"] == row_date:
                    row_data = row
                    break

            if row_data == None:
                row_data = {}
                row_data["Year"] = int(str(game["gameId"])[:4])
                row_data["Date"] = row_date

                if isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int):
                    has_match = row_data["Year"] >= time_frame["time_start"] and row_data["Year"] <= time_frame["time_end"]
                else:
                    has_match = row_data["Date"] >= time_frame["time_start"] and row_data["Date"] <= time_frame["time_end"]
                if not has_match:
                    continue
                
                row_data["is_playoffs"] = True if index < len(playoff_games) else False
                row_data["GP"] = 1
                row_data["GP_TOI"] = 1
                                    
                row_data["Month"] = row_data["Date"].month
                row_data["Day"] = row_data["Date"].day
                row_data["YearDay"] = row_data["Date"].timetuple().tm_yday
                next_date = row_data["Date"] - dateutil.relativedelta.relativedelta(weeks=1)
                weekday_in_month = 1
                while next_date.month == row_data["Date"].month:
                    weekday_in_month += 1
                    next_date -= dateutil.relativedelta.relativedelta(weeks=1)
                row_data["WeekDayInMonth"] = weekday_in_month
                row_data["CalendarYear"] = row_data["Date"].year

                parsed_team_name = team_abbr[game["teamAbbrev"]]
                if parsed_team_name in team_name_info:
                    for abbr in team_name_info[parsed_team_name]:
                        if row_data["Year"] in team_name_info[parsed_team_name][abbr]:
                            row_data["Tm"] = abbr
                            break
                
                if "Tm" not in row_data:
                    if parsed_team_name in team_name_info:
                        for abbr in team_name_info[parsed_team_name]:
                            row_data["Tm"] = abbr
                
                parsed_opp_name = team_abbr[game["opponentTeamAbbrev"]]
                if parsed_opp_name in team_name_info:
                    for abbr in team_name_info[parsed_opp_name]:
                        if row_data["Year"] in team_name_info[parsed_opp_name][abbr]:
                            row_data["Opponent"] = abbr.lower()
                            break
                
                if "Opponent" not in row_data:
                    if parsed_opp_name in team_name_info:
                        for abbr in team_name_info[parsed_opp_name]:
                            row_data["Opponent"] = abbr.lower()

                if "Tm" not in row_data:
                    raise Exception("Unknown team " + parsed_team_name + " for year " + str(row_data["Year"]))
                if "Opponent" not in row_data:
                    raise Exception("Unknown team " + parsed_opp_name + " for year " + str(row_data["Year"]))

                row_data["Location"] = game["homeRoad"] == "H"

                home_team = row_data["Tm"] if row_data["Location"] else row_data["Opponent"]
                row_data["GameLink"] = "/boxscores/" + str(row_data["Date"].year) + str(row_data["Month"]).zfill(2) + str(row_data["Day"]).zfill(2) + "0" + home_team.upper() + ".html"

                row_data["NHLGameLink"] = game["gameId"]

                all_rows.append(row_data)

            if report == "summary":
                if player_type["da_type"]["type"] == "Skater":
                    row_data["G"] = game["goals"]
                    row_data["A"] = game["assists"]
                    row_data["P"] = game["points"]
                    row_data["PIM"] = game["penaltyMinutes"]
                    if has_non_goalie:
                        row_data["OTG"] = game["otGoals"]
                        row_data["GWG"] = game["gameWinningGoals"]

                        row_data["EVG"] = game["evGoals"]
                        row_data["EVP"] = game["evPoints"]
                        if row_data["EVP"]:
                            row_data["EVA"] = game["evPoints"] - game["evGoals"]
                        row_data["PPG"] = game["ppGoals"]
                        row_data["PPP"] = game["ppPoints"]
                        if row_data["PPP"]:
                            row_data["PPA"] = game["ppPoints"] - game["ppGoals"]
                        row_data["SHG"] = game["shGoals"]
                        row_data["SHP"] = game["shPoints"]
                        if row_data["SHP"]:
                            row_data["SHA"] = game["shPoints"] - game["shGoals"]

                        row_data["PlusMinus"] = game["plusMinus"]
                        row_data["S"] = game["shots"]
                    else:
                        row_data["TOI"] = game["timeOnIce"]

                    if row_data["G"] >= 3:
                        row_data["HAT"] = 1
                else:
                    row_data["TOI"] = game["timeOnIce"]
                    row_data["SO"] = game["shutouts"]
                    row_data["GA"] = game["goalsAgainst"]
                    row_data["SV"] = game["saves"]
                    row_data["SA"] = game["shotsAgainst"]

                    row_data["GS"] = game["gamesStarted"]
                    if row_data["GS"]:
                        if row_data["SA"]:
                            over_header = "Standard"
                            constants_year = str(row_data["Year"])
                            if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"]:
                                constants_year = str(int(current_season) - 1)

                            league_save_percentage = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SV"] / totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SA"]
                            save_percentage = row_data["SV"] / row_data["SA"]
                            row_data["RBS"] = int(save_percentage < 0.85)
                            if row_data["SA"] > 20:
                                row_data["QS"] = int(save_percentage > league_save_percentage)
                            else:
                                row_data["QS"] = int(save_percentage >= 0.885)
                    if game["wins"]:
                        row_data["W"] = 1
                    elif game["losses"]:
                        row_data["L"] = 1
                        row_data["TtlL"] = 1
                    elif game["ties"]:
                        row_data["T"] = 1
                    elif game["otLosses"]:
                        if row_data["is_playoffs"]:
                            row_data["L"] = 1
                        else:
                            row_data["OTL"] = 1
                        row_data["TtlL"] = 1
                    else:
                        row_data["ND"] = 1
            elif report == "scoringRates":
                row_data["G_5v5"] = game["goals5v5"]
                row_data["A_5v5"] = game["assists5v5"]
                row_data["P_5v5"] = game["points5v5"]
                row_data["A1_5v5"] = game["primaryAssists5v5"]
                row_data["A2_5v5"] = game["secondaryAssists5v5"]
                row_data["P1_5v5"] = (row_data.get("A1_5v5", 0) if row_data.get("A1_5v5", 0) else 0) + (row_data.get("G_5v5", 0) if row_data.get("G_5v5", 0) else 0)
                row_data["TOI_5v5"] = game["timeOnIcePerGame5v5"]
                row_data["GP_5v5"] = 1
                row_data["GP_TOI_5v5"] = 1
            elif report == "puckPossessions":
                if "individualShotsForPer60" in game and game["individualShotsForPer60"] and "TOI_5v5" in row_data:
                    row_data["S_5v5"] = round(game["individualShotsForPer60"] * row_data["TOI_5v5"] / 3600)
                else:
                    row_data["S_5v5"] = 0
                
                if "individualSatForPer60" in game and game["individualSatForPer60"] and "TOI_5v5" in row_data:
                    row_data["TSA_5v5"] = round(game["individualSatForPer60"] * row_data["TOI_5v5"] / 3600)
                else:
                    row_data["TSA_5v5"] = 0
            elif report == "shottype":
                row_data["WristG"] = game["goalsWrist"]
                row_data["DeflectG"] = game["goalsDeflected"]
                row_data["SlapG"] = game["goalsSlap"]
                row_data["SnapG"] = game["goalsSnap"]
                row_data["TipG"] = game["goalsTipIn"]
                row_data["BackG"] = game["goalsBackhand"]
                row_data["WrapG"] = game["goalsWrapAround"]

                row_data["WristS"] = game["shotsOnNetWrist"]
                row_data["DeflectS"] = game["shotsOnNetDeflected"]
                row_data["SlapS"] = game["shotsOnNetSlap"]
                row_data["SnapS"] = game["shotsOnNetSnap"]
                row_data["TipS"] = game["shotsOnNetTipIn"]
                row_data["BackS"] = game["shotsOnNetBackhand"]
                row_data["WrapS"] = game["shotsOnNetWrapAround"]
            elif report == "penalties":
                row_data["PEN"] = game["penalties"]
                row_data["PenDrawn"] = game["penaltiesDrawn"]
                row_data["NetPEN"] = game["netPenalties"]
                row_data["Minor"] = game["minorPenalties"]
                row_data["Major"] = game["majorPenalties"]
                row_data["Match"] = game["matchPenalties"]
                row_data["Misconduct"] = game["misconductPenalties"]
                row_data["GameMisconduct"] = game["gameMisconductPenalties"]
            elif report == "realtime":
                row_data["Post/Bar"] = (game["missedShotCrossbar"] if game["missedShotCrossbar"] else 0) + (game["missedShotGoalpost"] if game["missedShotGoalpost"] else 0)
                row_data["ENG"] = game["emptyNetGoals"]
                row_data["ENA"] = game["emptyNetAssists"]
                row_data["ENP"] = game["emptyNetPoints"]
                row_data["TK"] = game["takeaways"]
                row_data["GV"] = game["giveaways"]
                row_data["1stG"] = game["firstGoals"]
            elif report == "scoringpergame":
                row_data["A1"] = game["totalPrimaryAssists"]
                row_data["A2"] = game["totalSecondaryAssists"]
                row_data["P1"] = (row_data.get("A1") if row_data.get("A1") else 0) + (row_data.get("G") if row_data.get("G") else 0)
                row_data["HIT"] = game["hits"]
                row_data["BLK"] = game["blockedShots"]
            elif report == "powerplay":
                row_data["PPA1"] = game["ppPrimaryAssists"]
                row_data["PPA2"] = game["ppSecondaryAssists"]
                row_data["PPP1"] = (row_data.get("PPA1") if row_data.get("PPA1") else 0) + (row_data.get("PPG") if row_data.get("PPG") else 0)
            elif report == "penaltykill":
                row_data["SHA1"] = game["shPrimaryAssists"]
                row_data["SHA2"] = game["shSecondaryAssists"]
                row_data["SHP1"] = (row_data.get("SHA1") if row_data.get("SHA1") else 0) + (row_data.get("SHG") if row_data.get("SHG") else 0)
                if row_data["Year"] >= 1933:
                    row_data["EVA1"] = (row_data.get("A1") if row_data.get("A1") else 0) - (row_data.get("SHA1") if row_data.get("SHA1") else 0) - (row_data.get("PPA1") if row_data.get("PPA1") else 0)
                    row_data["EVA2"] = (row_data.get("A2") if row_data.get("A2") else 0) - (row_data.get("SHA2") if row_data.get("SHA2") else 0) - (row_data.get("PPA2") if row_data.get("PPA2") else 0)
                    row_data["EVP1"] = (row_data.get("EVA1") if row_data.get("EVA1") else 0) + (row_data.get("EVG") if row_data.get("EVG") else 0)
            elif report == "timeonice":
                row_data["TOI"] = game["timeOnIce"]
                row_data["Shft"] = game["shifts"]
                row_data["EVTOI"] = game["evTimeOnIce"]
                row_data["PPTOI"] = game["ppTimeOnIce"]
                row_data["SHTOI"] = game["shTimeOnIce"]
            elif report == "faceoffwins":
                row_data["FOW"] = game["totalFaceoffWins"]
                row_data["FOL"] = game["totalFaceoffLosses"]
                row_data["FO"] =  game["totalFaceoffs"]
                row_data["OZFOW"] = game["offensiveZoneFaceoffWins"]
                row_data["OZFOL"] = game["offensiveZoneFaceoffLosses"]
                row_data["OZFO"] =  game["offensiveZoneFaceoffs"]
                row_data["NZFOW"] = game["neutralZoneFaceoffWins"]
                row_data["NZFOL"] = game["neutralZoneFaceoffLosses"]
                row_data["NZFO"] =  game["neutralZoneFaceoffs"]
                row_data["DZFOW"] = game["defensiveZoneFaceoffWins"]
                row_data["DZFOL"] = game["defensiveZoneFaceoffLosses"]
                row_data["DZFO"] =  game["defensiveZoneFaceoffs"]
            elif report == "summaryshooting":
                row_data["CF_5v5"] = game["satFor"]
                row_data["CA_5v5"] = game["satAgainst"]
                row_data["FF_5v5"] = game["usatFor"]
                row_data["FA_5v5"] = game["usatAgainst"]
            elif report == "goalsForAgainst":
                row_data["GF"] = 0
                row_data["GA"] = 0

                row_data["EVGF"] = game["evenStrengthGoalsFor"]
                row_data["EVGA"] = game["evenStrengthGoalsAgainst"]
                if game["evenStrengthGoalsFor"] != None:
                    row_data["EVGD"] = game["evenStrengthGoalsFor"] - game["evenStrengthGoalsAgainst"]
                    row_data["GF"] += game["evenStrengthGoalsFor"]
                    row_data["GA"] += game["evenStrengthGoalsAgainst"]
                row_data["PPGF"] = game["powerPlayGoalFor"]
                row_data["PPGA"] = game["powerPlayGoalsAgainst"]
                if game["powerPlayGoalFor"] != None:
                    row_data["PPGD"] = game["powerPlayGoalFor"] - game["powerPlayGoalsAgainst"]
                    row_data["GF"] += game["powerPlayGoalFor"]
                    row_data["GA"] += game["powerPlayGoalsAgainst"]
                row_data["SHGF"] = game["shortHandedGoalsFor"]
                row_data["SHGA"] = game["shortHandedGoalsAgainst"]
                if game["shortHandedGoalsFor"] != None:
                    row_data["SHGD"] = game["shortHandedGoalsFor"] - game["shortHandedGoalsAgainst"]
                    row_data["GF"] += game["shortHandedGoalsFor"]
                    row_data["GA"] += game["shortHandedGoalsAgainst"]

                row_data["GD"] : row_data["GF"] - row_data["GA"]
            elif report == "savesByStrength":
                row_data["EVSH"] = game["evShotsAgainst"]
                if row_data["EVSH"]:
                    row_data["EVGA"] = row_data["EVSH"] - game["evSaves"]
                row_data["PPSH"] = game["ppShotsAgainst"]
                if row_data["PPSH"]:
                    row_data["PPGA"] = row_data["PPSH"] - game["ppSaves"]
                row_data["SHSH"] = game["shShotsAgainst"]
                if row_data["SHSH"]:
                    row_data["SHGA"] = row_data["SHSH"] - game["shSaves"]
            elif report == "advanced":
                if player_type["da_type"]["type"] == "Skater":
                    if row_data["Year"] >= 2009:
                        row_data["PlusMinus"] = (game["goalsFor"] if game["goalsFor"] else 0) - (game["goalsAgainst"] if game["goalsAgainst"] else 0)
                else:
                    row_data["CG"] = game["completeGames"]
                    row_data["GF"] = game["goalsFor"]
                    row_data["ROW"] = game["regulationWins"]
                    row_data["ROL"] = game["regulationLosses"]
            elif report == "penaltyShots":
                if player_type["da_type"]["type"] == "Skater":
                    row_data["G"] = game["penaltyShotsGoals"]
                    row_data["S"] = game["penaltyShotAttempts"]
                else:
                    row_data["SA"] = game["penaltyShotsAgainst"]
                    row_data["GA"] = game["penaltyShotsGoalsAgainst"]
                    row_data["SV"] = game["penaltyShotsSaves"]
                row_data["is_pen_shot"] = 1
            elif report == "shootout":
                if player_type["da_type"]["type"] == "Skater":
                    row_data["G"] = game["shootoutGoals"]
                    row_data["S"] = game["shootoutShots"]
                    row_data["GWG"] = game["shootoutGameDecidingGoals"]
                else:
                    row_data["SA"] = game["shootoutShotsAgainst"]
                    row_data["GA"] = game["shootoutGoalsAgainst"]
                    row_data["SV"] = game["shootoutSaves"]
                    row_data["L"] = row_data.get("OTL", 0)
                    row_data["OTL"] = 0
                row_data["is_shootout_shot"] = 1

    return all_rows

def handle_live_stats(player_type, player_data, player_link, time_frame, all_rows, live_game, missing_games, missing_toi):
    current_team, player, sub_data = live_game[0], live_game[1], live_game[2]
    
    player_id = int(player_link.split('/')[-1])
    game_type = int(str(sub_data["gameData"]["game"]["pk"])[4:6])
    is_home = sub_data["gameData"]["teams"]["home"]["id"] == current_team
    team_str = "home" if is_home else "away"
    opp_team_str = "away" if is_home else "home"
    if is_home:
        player_team_abbr = sub_data["gameData"]["teams"]["home"]["abbreviation"]
        player_opp_abbr = sub_data["gameData"]["teams"]["away"]["abbreviation"]
    else:
        player_team_abbr = sub_data["gameData"]["teams"]["away"]["abbreviation"]
        player_opp_abbr = sub_data["gameData"]["teams"]["home"]["abbreviation"]

    row_data = {}
    row_data["Year"] = int(sub_data["gameData"]["game"]["season"][:4])

    is_final = sub_data["gameData"]["status"]["abstractGameState"] == "Final"

    game_datetime = dateutil.parser.parse(sub_data["gameData"]["game"]["date"])
    row_data["Date"] = game_datetime.date()

    for sub_rows in all_rows:
        if sub_rows["Date"] == row_data["Date"]:
            return all_rows

    if isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int):
        has_match = row_data["Year"] >= time_frame["time_start"] and row_data["Year"] <= time_frame["time_end"]
    else:
        has_match = row_data["Date"] >= time_frame["time_start"] and row_data["Date"] <= time_frame["time_end"]

    if not has_match:
        return all_rows

    row_data["is_playoffs"] = game_type == 3
    row_data["GP"] = 1
    row_data["GP_TOI"] = 1
                        
    row_data["Month"] = row_data["Date"].month
    row_data["Day"] = row_data["Date"].day
    row_data["YearDay"] = row_data["Date"].timetuple().tm_yday
    next_date = row_data["Date"] - dateutil.relativedelta.relativedelta(weeks=1)
    weekday_in_month = 1
    while next_date.month == row_data["Date"].month:
        weekday_in_month += 1
        next_date -= dateutil.relativedelta.relativedelta(weeks=1)
    row_data["WeekDayInMonth"] = weekday_in_month
    row_data["CalendarYear"] = row_data["Date"].year

    parsed_team_name = team_abbr[player_team_abbr]
    if parsed_team_name in team_name_info:
        for abbr in team_name_info[parsed_team_name]:
            if row_data["Year"] in team_name_info[parsed_team_name][abbr]:
                row_data["Tm"] = abbr
                break
    
    if "Tm" not in row_data:
        if parsed_team_name in team_name_info:
            for abbr in team_name_info[parsed_team_name]:
                row_data["Tm"] = abbr
    
    parsed_opp_name = team_abbr[player_opp_abbr]
    if parsed_opp_name in team_name_info:
        for abbr in team_name_info[parsed_opp_name]:
            if row_data["Year"] in team_name_info[parsed_opp_name][abbr]:
                row_data["Opponent"] = abbr.lower()
                break
    
    if "Opponent" not in row_data:
        if parsed_opp_name in team_name_info:
            for abbr in team_name_info[parsed_opp_name]:
                row_data["Opponent"] = abbr.lower()

    if "Tm" not in row_data:
        raise Exception("Unknown team " + parsed_team_name + " for year " + str(row_data["Year"]))
    if "Opponent" not in row_data:
        raise Exception("Unknown team " + parsed_opp_name + " for year " + str(row_data["Year"]))

    row_data["Location"] = is_home
    row_data["GameLink"] = None
    row_data["NHLGameLink"] = sub_data["gamePk"]

    is_shootout = "hasShootout" in sub_data["liveData"]["linescore"] and sub_data["liveData"]["linescore"]["hasShootout"]

    if all_rows:
        last_row = all_rows[len(all_rows) - 1]
        row_data["CrGm"] = len(all_rows) + 1
        if last_row["Year"] == row_data["Year"]:
            row_data["Gm"] = len([row for row in all_rows if row["Year"] == row_data["Year"]]) + 1
        else:
            row_data["Gm"] = 1
    else:
        row_data["Gm"] = 1
        row_data["CrGm"] = 1

    temp_extra_stats = set()
    temp_extra_stats.add("current-stats")
    game_data, sub_row_data, sub_missing_games = get_game_data(0, player_data, row_data, player_id, player_type, {"qualifiers" : {}}, temp_extra_stats)
    if sub_missing_games:
        missing_games.append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
    shift_data = game_data["shift_data"]
    perform_sub_nhl_game_qualifiers(row_data, {}, game_data, player_type, player_link, [], -1, True)
    if game_data["missing_toi"]:
        missing_toi.append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")

    if player_type["da_type"]["type"] != "Skater":
        goalies = []
        for goalie in sub_data["liveData"]["boxscore"]["teams"][team_str]["goalies"]:
            for sub_player in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
                sub_player = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][sub_player]
                if sub_player["person"]["id"] == goalie:
                    if "goalieStats" not in sub_player["stats"]:
                        continue
                    if start_time_to_str(sub_player["stats"]["goalieStats"]["timeOnIce"]):
                        goalies.append(goalie)

        is_start = True
        if shift_data:
            is_start = is_player_on_ice(shift_data, None, None, 1, 1, player_id, True)
        else:
            for scoring_play in sub_data["liveData"]["plays"]["allPlays"]:
                found_match = False
                if "players" in scoring_play:
                    for score_player in scoring_play["players"]:
                        if score_player["player"]["id"] in goalies:
                            if score_player["player"]["id"] != player_id:
                                is_start = False
                            found_match = True
                            break
                if found_match:
                    break

        row_data["GS"] = 0
        if is_start:
            row_data["GS"] = 1
            if is_final:
                if row_data["SA"]:
                    over_header = "Standard"
                    constants_year = str(row_data["Year"])
                    if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"]:
                        constants_year = str(int(current_season) - 1)

                    league_save_percentage = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SV"] / totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SA"]
                    save_percentage = row_data["SV"] / row_data["SA"]
                    row_data["RBS"] = int(save_percentage < 0.85)
                    if row_data["SA"] > 20:
                        row_data["QS"] = int(save_percentage > league_save_percentage)
                    else:
                        row_data["QS"] = int(save_percentage >= 0.885)
                
                if len(goalies) == 1:
                    row_data["CG"] = 1

                    if not row_data["GA"]:
                        row_data["SO"] = 1

        if is_final:
            is_ot = False
            if not is_shootout and len(sub_data["liveData"]["linescore"]["periods"]) > 3:
                is_ot = True

            game = player["stats"][ "goalieStats"]
            if "decision" in game:
                decision = game["decision"]
                if decision == "W":
                    row_data["W"] = 1
                    if not is_shootout:
                        row_data["ROW"] = 1
                elif decision == "L":
                    if not row_data["is_playoffs"] and (is_ot or is_shootout):
                        row_data["OTL"] = 1
                    else:
                        row_data["L"] = 1
                    if not is_shootout:
                        row_data["ROW"] = 1
                    row_data["TtlL"] = 1
                else:
                    row_data["ND"] = 1
    
    
    row_data["Team Score"] = sub_data["liveData"]["linescore"]["teams"][team_str]["goals"]
    row_data["Opponent Score"] = sub_data["liveData"]["linescore"]["teams"][opp_team_str]["goals"]
    row_data["Team Goals"] = row_data["Team Score"]
    row_data["Opponent Goals"] = row_data["Opponent Score"]

    is_shootout = False
    if "hasShootout" in  sub_data["liveData"]["linescore"] and sub_data["liveData"]["linescore"]["hasShootout"]:
        is_shootout = True
        if sub_data["liveData"]["linescore"]["shootoutInfo"][team_str]["scores"] > sub_data["liveData"]["linescore"]["shootoutInfo"][opp_team_str]["scores"]:
            row_data["Team Goals"] -= 1
        else:
            row_data["Opponent Goals"] -= 1

    if is_final:
        if row_data["Team Score"] > row_data["Opponent Score"]:
            result_str = "W"
        elif row_data["Team Score"] < row_data["Opponent Score"]:
            result_str = "L"
        else:
            result_str = "T"

        if is_shootout:
            result_str += "-SO"
        elif len(sub_data["liveData"]["linescore"]["periods"]) > 3:
            result_str += "-OT"

        row_data["Result"] = result_str
    else:
        row_data["Result"] = None

    all_rows.append(row_data)
    all_rows = sorted(all_rows, key=lambda row: row["Date"])

    return all_rows

def add_live_years(player_link, player_data, player_type, time_frame):
    live_sub_data = get_live_game(player_link, player_data, player_type, time_frame)
    if not live_sub_data:
        return
    sub_data = live_sub_data[2]

    year = int(sub_data["gameData"]["game"]["season"][:4])
    is_playoffs = int(str(sub_data["gameData"]["game"]["pk"])[4:6]) == 3

    if year not in player_data["year_valid_years"]:
        player_data["year_valid_years"].append(year)

    if not is_playoffs and year not in player_data["reg_year_valid_years"]:
        player_data["reg_year_valid_years"].append(year)

    return live_sub_data

def add_updated_years(player_link, player_data, time_frame):
    games = []
    if time_frame["playoffs"] != "Only":
        request = urllib.request.Request("https://statsapi.web.nhl.com" + player_link  + "/stats?stats=gameLog", headers=request_headers)
        sub_data = url_request_json(request)
        games += sub_data["stats"][0]["splits"]
    if time_frame["playoffs"]:
        request = urllib.request.Request("https://statsapi.web.nhl.com" + player_link  + "/stats?stats=playoffGameLog", headers=request_headers)
        sub_data = url_request_json(request)
        games += sub_data["stats"][0]["splits"]
        
    if games:
        games.sort(key=lambda game: dateutil.parser.parse(game["date"]), reverse=True)
        game = games[0]
        year = int(game["season"][:4])
        is_playoffs = int(str(game["game"]["gamePk"])[4:6]) == 3

        if year not in player_data["year_valid_years"]:
            player_data["year_valid_years"].append(year)

        if not is_playoffs and year not in player_data["reg_year_valid_years"]:
            player_data["reg_year_valid_years"].append(year)

def get_live_game(player_link, player_data, player_type, time_frame):
    player_id = int(player_link.split('/')[-1])
    request = urllib.request.Request("https://statsapi.web.nhl.com" + player_link, headers=request_headers)
    sub_data = url_request_json(request)

    if "currentTeam" not in sub_data["people"][0] or not sub_data["people"][0]["active"]:
        return

    current_team = sub_data["people"][0]["currentTeam"]["id"]

    request = urllib.request.Request("https://statsapi.web.nhl.com/api/v1/schedule?teamId=" + str(current_team), headers=request_headers)
    sub_data = url_request_json(request)

    if sub_data["dates"] and sub_data["dates"][0]["games"]:
        latest_game = sub_data["dates"][0]["games"][0]
        game_type = int(str(latest_game["gamePk"])[4:6])
        if game_type != 2 and game_type != 3:
            return
        if game_type == 2 and time_frame["playoffs"] == "Only":
            return
        elif game_type == 3 and not time_frame["playoffs"]:
            return
        
        game_status = latest_game["status"]["abstractGameState"]
        if game_status != "Live" and game_status != "Final":
            return

        game_link = latest_game["link"]

        game_date = sub_data["dates"][0]["date"]

        request = urllib.request.Request("https://statsapi.web.nhl.com" + game_link, headers=request_headers)
        sub_data = url_request_json(request)

        is_home = sub_data["gameData"]["teams"]["home"]["id"] == current_team
        team_str = "home" if is_home else "away"

        #if player_id in sub_data["liveData"]["boxscore"]["teams"][team_str]["scratches"]:
            #return

        for player in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
            player = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][player]
            if player["person"]["id"] == player_id:
                if player_type["da_type"]["type"] == "Skater":
                    has_non_goalie = False
                    if player_data["player_position"]:
                        player_pos_split = player_data["player_position"].split("/")
                        for sub_player_pos in player_pos_split:
                            if sub_player_pos != "G":
                                has_non_goalie = True
                    else:
                        has_non_goalie = True
                    
                    stat_str = "skaterStats" if has_non_goalie else "goalieStats"
                    if stat_str not in player["stats"]:
                        return
                else:
                    stat_str = "goalieStats"
                    if stat_str not in player["stats"]:
                        return
                
                sub_data["gameData"]["game"]["date"] = game_date

                return current_team, player, sub_data, game_date

def fix_seasons(all_rows):
    stats_to_fix = ["Seasons", "UniqueSeasons", "NonFakeSeasons", "RegularSeasons", "PlayoffSeasons", "SkaterRegularSeasons", "DefenseRegularSeasons"]
    for stat_to_fix in stats_to_fix:
        years = set()
        for row in all_rows:
            if row["Year"] in years:
                row[stat_to_fix] = 0
            else:
                if stat_to_fix in row and row[stat_to_fix]:
                    years.add(row["Year"])

def handle_missing_playoff_rows(player_page, player_data, valid_years, all_rows, player_type, time_frame, player_link):
    temp_rows = handle_season_stats_game(player_type, player_data, player_link, time_frame)
    fix_playoffs_data(temp_rows, time_frame)
    for row_data in temp_rows:
        if row_data["Tm"] != "TOT":
            if not perform_qualifier(player_data, player_type, row_data, time_frame, all_rows):
                continue

            if not row_data["Year"] in valid_years:
                all_rows.append({"Year" : row_data["Year"], "Date" : row_data["Date"], "Tm" : row_data["Tm"], "is_playoffs" : False, "fake_playoff_row" : True})
                valid_years.append(row_data["Year"])

def handle_hat_tricks(player_page, all_rows):
    table_name = "hat_tricks"
    
    table = player_page.find("table", id=table_name)
    comments = None
    if not table:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_table = temp_soup.find("table", id=table_name)
            if temp_table:
                table = temp_table
                break

    if table:
        standard_table_rows = table.find("tbody").find_all("tr")
        for row in standard_table_rows:
            if not row.get("class") or "thead" not in row.get("class"):
                is_postseason = str(row.find("td", {"data-stat" : "postseason"}).find(text=True))
                if is_postseason != "*":
                    date_row = row.find("td", {"data-stat" : "date"})
                    team = str(row.find("td", {"data-stat" : "team_id"}).find(text=True))
                    date = dateutil.parser.parse(str(date_row.find(text=True))).date()
                    year = date.year
                    month = date.month
                    if month < 9:
                        year -= 1
                    for row_data in all_rows:
                        if row_data["Year"] == year and row_data["Tm"] == team and not row_data["is_playoffs"]:
                            if not "HAT" in row_data:
                                row_data["HAT"] = 0
                            row_data["HAT"] += 1
                            break

def handle_playoff_ot_goals(player_page, all_rows, is_game):
    table_name = "playoff_ot_goals"
    
    table = player_page.find("table", id=table_name)
    comments = None
    if not table:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_table = temp_soup.find("table", id=table_name)
            if temp_table:
                table = temp_table
                break

    if table:
        standard_table_rows = table.find("tbody").find_all("tr")
        for row in standard_table_rows:
            if not row.get("class") or "thead" not in row.get("class"):
                date_row = row.find("th", {"data-stat" : "date_game"})
                team = str(row.find("td", {"data-stat" : "team"}).find(text=True))
                date = dateutil.parser.parse(str(date_row.find(text=True))).date()
                year = date.year - 1
                for row_data in all_rows:
                    has_match = False
                    if is_game:
                        if row_data["Date"] == date and row_data["Tm"] == team:
                            has_match = True
                    else:
                        if row_data["Year"] == year and row_data["Tm"] == team:
                            has_match = True

                    if has_match:
                        if not "OTG" in row_data:
                            row_data["OTG"] = 0
                        row_data["OTG"] += 1
                        break

def handle_season_only_stats(player_page, player_data, player_type, time_frame, all_rows, adv_type):
    tables = []
    table_names_to_use = []
    if player_type["da_type"]["type"] == "Skater":
        table_names = ["stats_misc_plus_nhl", "skaters_advanced_ev"]
    else:
        table_names = ["stats_goalie_situational"]
    comments = None
    for table_index, table_name in enumerate(table_names):
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            tables.append(table)
            table_names_to_use.append(table_name)

    years_have_xgf = {}
    for table_index, table in enumerate(tables):
        header_columns = table.find("thead").find("tr", {"class" : "over_header"}).find_next_sibling().find_all("th")
        header_values = []
        for header in header_columns:
            contents = header.find(text=True)
            if contents:
                header_values.append(str(contents))
            else:
                header_values.append(None)

        standard_table_rows = table.find("tbody").find_all("tr")

        for i in range(len(standard_table_rows)):
            row = standard_table_rows[i]

            row_data = parse_row(row, time_frame, None, False, player_type, header_values, table_index, table_names_to_use[table_index])

            if not row_data:
                continue

            if row_data["Tm"] != "TOT":
                for pot_row in all_rows:
                    if pot_row["Year"] == row_data["Year"] and pot_row["Tm"] == row_data["Tm"]:
                        for stat in row_data:
                            og_stat = stat
                            if stat in headers[player_type["da_type"]["type"]] and "type" in headers[player_type["da_type"]["type"]][stat] and headers[player_type["da_type"]["type"]][stat]["type"] == "Advanced":
                                if stat in ("xEVTOI", "xEVSH", "xEVGA", "xGA", "xGF", "scSA", "scGA", "HDscSA", "HDscGA") and (row_data["Year"] >= 2016 or player_type["da_type"]["type"] == "Skater"):
                                    if stat == "xEVTOI" and not "xGA" in pot_row and player_type["da_type"]["type"] == "Skater":
                                        continue
                                    if not stat in pot_row:
                                        pot_row[stat] = 0.0
                                    pot_row[stat] += row_data[og_stat]

                                    if player_type["da_type"]["type"] == "Skater":
                                        if stat == "xGF":
                                            if row_data["Year"] not in years_have_xgf:
                                                years_have_xgf[row_data["Year"]] = set()
                                            years_have_xgf[row_data["Year"]].add(row_data["Tm"])
                        break
    
    if player_type["da_type"]["type"] == "Skater":
        for row_data in all_rows:
            if row_data["Year"] in years_have_xgf and row_data["Tm"] in years_have_xgf[row_data["Year"]]:
                row_data["xGFM"] = 1

def handle_opponent_schedule_stats(all_rows, qualifiers):
    all_rows = sorted(all_rows, key=lambda row: row["Date"])
    seasons = []
    for row_data in all_rows:
        if not row_data["Year"] in [season["Year"] for season in seasons]:
            seasons.append({
                "Year" : row_data["Year"]
            })

    opponent_schedule = get_opponent_schedule(seasons)
    for row_data in all_rows:
        if row_data["Year"] in opponent_schedule:
            opponents_data = opponent_schedule[row_data["Year"]]
            if "Opponent" in row_data and row_data["Opponent"].upper() in opponents_data:
                opponent_data = opponents_data[row_data["Opponent"].upper()]

                row_data["OppCupWinner"] = opponent_data["CupWinner"]
                row_data["OppConfWinner"] = opponent_data["ConfWinner"]
                row_data["OppPlayoff"] = opponent_data["Playoff"]
                row_data["OppStandingsRank"] = opponent_data["StandingsRank"]
                row_data["OppWins"] = opponent_data["Wins"]
                row_data["OppLosses"] = opponent_data["Losses"]
                row_data["OppTies"] = opponent_data["Ties"]
                row_data["OppOTLosses"] = opponent_data["OTLosses"]
                row_data["OppGoals"] = opponent_data["Goals"]
                row_data["OppGoalsAllowed"] = opponent_data["GoalsAllowed"]
                row_data["OppGoalDiff"] = opponent_data["GoalDiff"]
                row_data["OppGoalsRank"] = opponent_data["GoalsRank"]
                row_data["OppGoalsAllowedRank"] = opponent_data["GoalsAllowedRank"]
                row_data["OppGoalDiffRank"] = opponent_data["GoalDiffRank"]
                row_data["OppReverseGoalsRank"] = opponent_data["ReverseGoalsRank"]
                row_data["OppReverseGoalsAllowedRank"] = opponent_data["ReverseGoalsAllowedRank"]
                row_data["OppReverseGoalDiffRank"] = opponent_data["ReverseGoalDiffRank"]
                row_data["OppReverseStandingsRank"] = opponent_data["ReverseStandingsRank"]

                row_data["OppConference"] = opponent_data["Conference"]
                row_data["OppDivision"] = opponent_data["Division"]
            
            if row_data["Tm"].upper() in opponents_data:
                team_data = opponents_data[row_data["Tm"].upper()]

                row_data["TmCupWinner"] = team_data["CupWinner"]
                row_data["TmConfWinner"] = team_data["ConfWinner"]
                row_data["TmPTSlayoff"] = team_data["Playoff"]
                row_data["TmStandingsRank"] = team_data["StandingsRank"]
                row_data["TmWins"] = team_data["Wins"]
                row_data["TmLosses"] = team_data["Losses"]
                row_data["TmTies"] = team_data["Ties"]
                row_data["TmOTLosses"] = opponent_data["OTLosses"]
                row_data["TmGoals"] = team_data["Goals"]
                row_data["TmGoalsAllowed"] = team_data["GoalsAllowed"]
                row_data["TmGoalDiff"] = team_data["GoalDiff"]
                row_data["TmGoalsRank"] = team_data["GoalsRank"]
                row_data["TmGoalsAllowedRank"] = team_data["GoalsAllowedRank"]
                row_data["TmGoalDiffRank"] = team_data["GoalDiffRank"]
                row_data["TmReverseGoalsRank"] = team_data["ReverseGoalsRank"]
                row_data["TmReverseGoalsAllowedRank"] = team_data["ReverseGoalsAllowedRank"]
                row_data["TmReverseGoalDiffRank"] = team_data["ReverseGoalDiffRank"]
                row_data["TmReverseStandingsRank"] = team_data["ReverseStandingsRank"]

                row_data["TmConference"] = team_data["Conference"]
                row_data["TmDivision"] = team_data["Division"]

    new_rows = []
    for row in all_rows:
        if perform_opponent_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def perform_opponent_schedule_qualifiers(row, qualifiers):
    if "Winning Opponent" in qualifiers:
        opponent_match = row["OppWins"] > (row["OppLosses"] + row["OppOTLosses"])
        for qual_object in qualifiers["Winning Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Losing Opponent" in qualifiers:
        opponent_match = row["OppWins"] < (row["OppLosses"] + row["OppOTLosses"])
        for qual_object in qualifiers["Losing Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Tied Opponent" in qualifiers:   
        opponent_match = row["OppWins"] == (row["OppLosses"] + row["OppOTLosses"])
        for qual_object in qualifiers["Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Winning Or Tied Opponent" in qualifiers:
        opponent_match = row["OppWins"] >= (row["OppLosses"] + row["OppOTLosses"])
        for qual_object in qualifiers["Winning Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    
    if "Losing Or Tied Opponent" in qualifiers:
        opponent_match = row["OppWins"] <= (row["OppLosses"] + row["OppOTLosses"])
        for qual_object in qualifiers["Losing Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Playoff Opponent" in qualifiers:
        opponent_playoffs = row["OppPlayoff"]
        for qual_object in qualifiers["Playoff Opponent"]:
            if qual_object["negate"]:
                if opponent_playoffs:
                    return False
            else:
                if not opponent_playoffs:
                    return False
    
    if "Cup Winner Opponent" in qualifiers:
        if row["OppCupWinner"] == None:
            return False

        for qual_object in qualifiers["Cup Winner Opponent"]:
            if qual_object["negate"]:
                if row["OppCupWinner"]:
                    return False
            else:
                if not row["OppCupWinner"]:
                    return False
    
    if "Conference Winner Opponent" in qualifiers:
        if row["OppConfWinner"] == None:
            return False

        for qual_object in qualifiers["Conference Winner Opponent"]:
            if qual_object["negate"]:
                if row["OppConfWinner"]:
                    return False
            else:
                if not row["OppConfWinner"]:
                    return False
    
    if "Opponent Goals Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Goals Rank"]:
            rank_str = "OppReverseGoalsRank" if qual_object["values"]["reverse"] else "OppGoalsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Goals Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Goals Allowed Rank"]:
            rank_str = "OppReverseGoalsAllowedRank" if qual_object["values"]["reverse"] else "OppGoalsAllowedRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Win Percentage" in qualifiers:
        for qual_object in qualifiers["Opponent Win Percentage"]:
            try:
                win_percentage = row["OppWins"] / (row["OppWins"] + (row["OppLosses"] + row["OppOTLosses"]))
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Points Percentage" in qualifiers:
        for qual_object in qualifiers["Opponent Points Percentage"]:
            points = (row["OppWins"] * 2) + (row["OppTies"] * 1) + (row["OppOTLosses"] * 1)
            try:
                points_percentage = points / ((row["OppWins"] + row["OppLosses"] + row["OppTies"] + row["OppOTLosses"]) * 2)
            except ZeroDivisionError:
                points_percentage = 0
            if qual_object["negate"]:
                if points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Games Over 500" in qualifiers:
        for qual_object in qualifiers["Opponent Games Over 500"]:
            games_over_500 = row["OppWins"] - (row["OppLosses"] + row["OppOTLosses"])
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Standings Rank" in qualifiers:
        for qual_object in qualifiers["Team Standings Rank"]:
            rank_str = "TmReverseStandingsRank" if qual_object["values"]["reverse"] else "TmStandingsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Standings Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Standings Rank"]:
            rank_str = "OppReverseStandingsRank" if qual_object["values"]["reverse"] else "OppStandingsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Winning Team" in qualifiers:
        team_match = row["TmWins"] > (row["TmLosses"] + row["TmOTLosses"])
        for qual_object in qualifiers["Winning Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Losing Team" in qualifiers:
        team_match = row["TmWins"] < (row["TmLosses"] + row["TmOTLosses"])
        for qual_object in qualifiers["Losing Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Tied Team" in qualifiers:   
        team_match = row["TmWins"] == (row["TmLosses"] + row["TmOTLosses"])
        for qual_object in qualifiers["Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Winning Or Tied Team" in qualifiers:
        team_match = row["TmWins"] >= (row["TmLosses"] + row["TmOTLosses"])
        for qual_object in qualifiers["Winning Or Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Losing Or Tied Team" in qualifiers:
        team_match = row["TmWins"] <= (row["TmLosses"] + row["TmOTLosses"])
        for qual_object in qualifiers["Losing Or Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Playoff Team" in qualifiers:
        team_playoffs = row["TmPTSlayoff"]
        for qual_object in qualifiers["Playoff Team"]:
            if qual_object["negate"]:
                if team_playoffs:
                    return False
            else:
                if not team_playoffs:
                    return False
    
    if "Cup Winner Team" in qualifiers:
        if row["TmCupWinner"] == None:
            return False

        for qual_object in qualifiers["Cup Winner Team"]:
            if qual_object["negate"]:
                if row["TmCupWinner"]:
                    return False
            else:
                if not row["TmCupWinner"]:
                    return False
    
    if "Conference Winner Team" in qualifiers:
        if row["TmConfWinner"] == None:
            return False

        for qual_object in qualifiers["Conference Winner Team"]:
            if qual_object["negate"]:
                if row["TmConfWinner"]:
                    return False
            else:
                if not row["TmConfWinner"]:
                    return False
    
    if "Team Goals Rank" in qualifiers:
        for qual_object in qualifiers["Team Goals Rank"]:
            rank_str = "TmReverseGoalsRank" if qual_object["values"]["reverse"] else "TmGoalsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Goals Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Goals Allowed Rank"]:
            rank_str = "TmReverseGoalsAllowedRank" if qual_object["values"]["reverse"] else "TmGoalsAllowedRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Win Percentage" in qualifiers:
        for qual_object in qualifiers["Team Win Percentage"]:
            try:
                win_percentage = row["TmWins"] / (row["TmWins"] + (row["TmLosses"] + row["TmOTLosses"]))
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Team Points Percentage" in qualifiers:
        for qual_object in qualifiers["Team Points Percentage"]:
            points = (row["TmWins"] * 2) + (row["TmTies"] * 1) + (row["TmOTLosses"] * 1)
            try:
                points_percentage = points / ((row["TmWins"] + row["TmLosses"] + row["TmTies"] + row["TmOTLosses"]) * 2)
            except ZeroDivisionError:
                points_percentage = 0
            if qual_object["negate"]:
                if points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Games Over 500" in qualifiers:
        for qual_object in qualifiers["Team Games Over 500"]:
            games_over_500 = row["TmWins"] - (row["TmLosses"] + row["TmOTLosses"])
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Wins" in qualifiers:
        for qual_object in qualifiers["Team Wins"]:
            if qual_object["negate"]:
                if row["TmWins"] >= qual_object["values"]["start_val"] and row["TmWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmWins"] >= qual_object["values"]["start_val"] and row["TmWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Losses" in qualifiers:
        for qual_object in qualifiers["Team Losses"]:
            if qual_object["negate"]:
                if (row["TmLosses"] + row["TmOTLosses"]) >= qual_object["values"]["start_val"] and (row["TmLosses"] + row["TmOTLosses"]) <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not ((row["TmLosses"] + row["TmOTLosses"]) >= qual_object["values"]["start_val"] and (row["TmLosses"] + row["TmOTLosses"]) <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Ties" in qualifiers:
        for qual_object in qualifiers["Team Ties"]:
            if qual_object["negate"]:
                if row["TmTies"] >= qual_object["values"]["start_val"] and row["TmTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmTies"] >= qual_object["values"]["start_val"] and row["TmTies"] <= qual_object["values"]["end_val"]):
                    return False

    if "Team Points" in qualifiers:
        for qual_object in qualifiers["Team Points"]:
            points = (row["TmWins"] * 2) + (row["TmTies"] * 1) + (row["TmOTLosses"] * 1)
            if qual_object["negate"]:
                if points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Wins" in qualifiers:
        for qual_object in qualifiers["Opponent Wins"]:
            if qual_object["negate"]:
                if row["OppWins"] >= qual_object["values"]["start_val"] and row["OppWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["OppWins"] >= qual_object["values"]["start_val"] and row["OppWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Losses" in qualifiers:
        for qual_object in qualifiers["Opponent Losses"]:
            if qual_object["negate"]:
                if (row["OppLosses"] + row["OppOTLosses"]) >= qual_object["values"]["start_val"] and (row["OppLosses"] + row["OppOTLosses"]) <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not ((row["OppLosses"] + row["OppOTLosses"]) >= qual_object["values"]["start_val"] and (row["OppLosses"] + row["OppOTLosses"]) <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Ties" in qualifiers:
        for qual_object in qualifiers["Opponent Ties"]:
            if qual_object["negate"]:
                if row["OppTies"] >= qual_object["values"]["start_val"] and row["OppTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["OppTies"] >= qual_object["values"]["start_val"] and row["OppTies"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Points" in qualifiers:
        for qual_object in qualifiers["Opponent Points"]:
            points = (row["OppWins"] * 2) + (row["OppTies"] * 1) + (row["OppOTLosses"] * 1)
            if qual_object["negate"]:
                if points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Conference" in qualifiers:
        for qual_object in qualifiers["Team Conference"]:
            if qual_object["negate"]:
                if row["TmConference"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["TmConference"].lower() in qual_object["values"]:
                    return False
    
    if "Team Division" in qualifiers:
        for qual_object in qualifiers["Team Division"]:
            if not row["TmDivision"]:
                return False

            if qual_object["negate"]:
                if row["TmDivision"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["TmDivision"].lower() in qual_object["values"]:
                    return False
    
    if "Opponent Conference" in qualifiers:
        for qual_object in qualifiers["Opponent Conference"]:
            if qual_object["negate"]:
                if row["OppConference"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["OppConference"].lower() in qual_object["values"]:
                    return False
    
    if "Opponent Division" in qualifiers:
        for qual_object in qualifiers["Opponent Division"]:
            if not row["OppDivision"]:
                return False

            if qual_object["negate"]:
                if row["OppDivision"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["OppDivision"].lower() in qual_object["values"]:
                    return False

    return True

def get_opponent_schedule(seasons):
    team_obj = {}

    for season_obj in seasons:
        request = urllib.request.Request(opponent_schedule_url_format.format(season_obj["Year"] + 1), headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                continue
            else:
                raise

        team_info = player_page.find("div", {"id" : "meta"})
        ws_winner = None
        if team_info:
            postseason_item = team_info.find("strong", text="League Champion")
            if postseason_item:
                postseason_parent = postseason_item.parent
                if postseason_parent:
                    ws_winner_el = postseason_parent.find("a")
                    if ws_winner_el:
                        ws_winner = ws_winner_el["href"].split("/")[2].strip().upper()
        
        conf_winners = set()
        table = player_page.find("table", id="all_playoffs")
        if not table:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id="all_playoffs")
                if temp_table:
                    table = temp_table
                    break

        standard_table_rows = table.find("tbody").find_all("tr")
        for row in standard_table_rows:
            all_cols = row.find_all("td")
            round_name = str(all_cols[0].find(text=True))
            if "Conference Finals" in round_name:
                ws_winner_el = all_cols[2]
                if ws_winner_el and ws_winner_el.find("a") and " over " in str(ws_winner_el.text):
                    conf_winners.add(ws_winner_el.find("a")["href"].split("/")[2].strip().upper())
        
        table_names = ["stats", "standings", "standings_CAM", "standings_WAL", "standings_EAS", "standings_WES"]
        team_obj[season_obj["Year"]] = {}

        all_goals = []
        all_goals_allowed = []
        all_goals_diff = []
        all_rank = []

        comments = None
        for table_name in table_names:
            table = player_page.find("table", id=table_name)

            if not table:
                if not comments:
                    comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("table", id=table_name)
                    if temp_table:
                        table = temp_table
                        break
            
            if not table:
                continue

            standard_table_rows = table.find("tbody").find_all("tr", recursive=False)
            current_division = None
            for row in standard_table_rows:
                classes = row.get("class")
                if (not classes or not "thead" in classes) and hasattr(row, "data-row"):
                    if table_name == "stats":
                        row_data = {}
                        row_data["Year"] = season_obj["Year"]
                        row_data["Playoff"] = False
                        tm_text = str(row.find("td", {"data-stat" : "team_name"}).text).strip().upper()

                        if tm_text.endswith("*"):
                            row_data["Playoff"] = True
                            tm_text = tm_text[:-1]

                        row_data["Tm"] = row.find("td", {"data-stat" : "team_name"}).find("a")["href"].split("/")[2].upper()
                        row_data["Rk"] = int(str(row.find("th", {"data-stat" : "ranker"}).find(text=True)))
                        row_data["Wins"] = int(str(row.find("td", {"data-stat" : "wins"}).find(text=True)))
                        row_data["Losses"] = int(str(row.find("td", {"data-stat" : "losses"}).find(text=True)))
                        ties_el = row.find("td", {"data-stat" : "ties"})
                        ot_losses_el = row.find("td", {"data-stat" : "losses_ot"})
                        row_data["Ties"] = 0
                        if ties_el:
                            row_data["Ties"] += int(str(ties_el.find(text=True)))
                        row_data["OTLosses"] = 0
                        if ot_losses_el:
                            row_data["OTLosses"] += int(str(ot_losses_el.find(text=True)))
                        row_data["Goals"] = float(str(row.find("td", {"data-stat" : "goals"}).find(text=True)))
                        row_data["GoalsAllowed"] = float(str(row.find("td", {"data-stat" : "goals_against"}).find(text=True)))
                        row_data["GoalDiff"] = row_data["Goals"] - row_data["GoalsAllowed"]

                        if ws_winner:
                            if row_data["Tm"] == ws_winner:
                                row_data["CupWinner"] = True
                            else:
                                row_data["CupWinner"] = False
                        else:
                            row_data["CupWinner"] = None

                        if conf_winners:
                            if row_data["Tm"] in conf_winners:
                                row_data["ConfWinner"] = True
                            else:
                                row_data["ConfWinner"] = False
                        else:
                            row_data["ConfWinner"] = None

                        all_goals.append(row_data["Goals"])
                        all_goals_allowed.append(row_data["GoalsAllowed"])
                        all_goals_diff.append(row_data["GoalDiff"])
                        all_rank.append(row_data["Rk"])

                        team_obj[season_obj["Year"]][row_data["Tm"]] = row_data
                    else:
                        team = row.find("th", {"data-stat" : "team_name"}).find("a")["href"].split("/")[2].upper()
                        row_data = team_obj[season_obj["Year"]][team]

                        if table_name == "standings_CAM":
                            row_data["Conference"] = "Clarence Campbell"
                        elif table_name == "standings_WAL":
                            row_data["Conference"] = "Prince of Wales"
                        elif table_name == "standings_EAS":
                            row_data["Conference"] = "Eastern"
                        elif table_name == "standings_WES":
                            row_data["Conference"] = "Western"
                        else:
                            row_data["Conference"] = None

                        row_data["Division"] = current_division
                elif table_name != "stats":
                    current_division = str(row.find(text=True)).split(" Division")[0].strip()

        
        all_goals = sorted(all_goals, reverse=True)
        all_goals_allowed = sorted(all_goals_allowed)
        all_goals_diff = sorted(all_goals_diff, reverse=True)
        all_rank = sorted(all_rank, reverse=True)
        
        for team in team_obj[season_obj["Year"]]:
            team_obj[season_obj["Year"]][team]["GoalsRank"] = all_goals.index(team_obj[season_obj["Year"]][team]["Goals"]) + 1
            team_obj[season_obj["Year"]][team]["GoalsAllowedRank"] = all_goals_allowed.index(team_obj[season_obj["Year"]][team]["GoalsAllowed"]) + 1
            team_obj[season_obj["Year"]][team]["GoalDiffRank"] = all_goals_diff.index(team_obj[season_obj["Year"]][team]["GoalDiff"]) + 1
            team_obj[season_obj["Year"]][team]["StandingsRank"] = all_rank[::-1].index(team_obj[season_obj["Year"]][team]["Rk"]) + 1

            team_obj[season_obj["Year"]][team]["ReverseGoalsRank"] = all_goals[::-1].index(team_obj[season_obj["Year"]][team]["Goals"]) + 1
            team_obj[season_obj["Year"]][team]["ReverseGoalsAllowedRank"] = all_goals_allowed[::-1].index(team_obj[season_obj["Year"]][team]["GoalsAllowed"]) + 1
            team_obj[season_obj["Year"]][team]["ReverseGoalDiffRank"] = all_goals_diff[::-1].index(team_obj[season_obj["Year"]][team]["GoalDiff"]) + 1
            team_obj[season_obj["Year"]][team]["ReverseStandingsRank"] = all_rank.index(team_obj[season_obj["Year"]][team]["Rk"]) + 1
    
    return team_obj

def handle_nhl_game_stats(player_data, all_rows, time_frame, player_link, player_type, missing_games, missing_toi, extra_stats):
    if not all_rows:
        return [], missing_games, missing_toi

    saved_row_data = []
    if "Career Minute" in time_frame["qualifiers"] or "Career Minute Reversed" in time_frame["qualifiers"] or "Game Minute" in time_frame["qualifiers"] or "Game Minute Reversed" in time_frame["qualifiers"] or "Career Shot" in time_frame["qualifiers"] or "Career Shot Reversed" in time_frame["qualifiers"] or "Game Shot" in time_frame["qualifiers"] or "Game Shot Reversed" in time_frame["qualifiers"]:
        for sub_row_data in sorted(all_rows, key=lambda row: row["Date"]):
            saved_row_data.append({
                "TOI" : sub_row_data.get("TOI", 0)
            })

            if player_type["da_type"]["type"] == "Skater":
                saved_row_data[len(saved_row_data) - 1]["S"] = sub_row_data.get("S", 0)
            else:
                saved_row_data[len(saved_row_data) - 1]["S"] = sub_row_data.get("SA", 0)

    games_to_skip = set()
    if "Shot On" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Shot On"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "On Ice With" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["On Ice With"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "On Ice Against" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["On Ice Against"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Assisted On" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Assisted On"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Assisted With" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Assisted With"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Points With" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Points With"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Assisted By" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Assisted By"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Primary Assisted On" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Primary Assisted On"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Primary Assisted With" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Primary Assisted With"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Primary Points With" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Primary Points With"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Primary Assisted By" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Primary Assisted By"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Hit On" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Hit On"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Penalty On" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Penalty On"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Block On" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Block On"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Faceoff Against" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Faceoff Against"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])
    if "Fight Against" in time_frame["qualifiers"]:
        for row_data in all_rows:
            for qual_object in time_frame["qualifiers"]["Fight Against"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["Date"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["NHLGameLink"])

    if "Career Minute" in time_frame["qualifiers"]:
        for index, row_data in enumerate(sorted(all_rows, key=lambda row: row["Date"])):
            has_match = False
            total_minute_entering = 0
            for sub_row_data in saved_row_data[:index]:
                total_minute_entering += sub_row_data["TOI"]
            total_minute_exiting = total_minute_entering + saved_row_data[index]["TOI"]

            goal_event = {
                "career_minute" : total_minute_entering
            }
            if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Minute"], None, None):
                has_match = True
            else:
                goal_event = {
                    "career_minute" : total_minute_exiting
                }
                if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Minute"], None, None):
                    has_match = True

            if not has_match:
                games_to_skip.add(row_data["NHLGameLink"])
    
    if "Career Minute Reversed" in time_frame["qualifiers"]:
        for index, row_data in enumerate(sorted(all_rows, key=lambda row: row["Date"])):
            has_match = False
            total_minute_entering = 0
            for sub_row_data in reversed(saved_row_data[(index + 1):]):
                total_minute_entering += sub_row_data["TOI"]
            total_minute_exiting = total_minute_entering + saved_row_data[index]["TOI"]

            goal_event = {
                "career_minute" : total_minute_entering
            }
            if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Minute Reversed"], None, None):
                has_match = True
            else:
                goal_event = {
                    "career_minute" : total_minute_exiting
                }
                if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Minute Reversed"], None, None):
                    has_match = True

            if not has_match:
                games_to_skip.add(row_data["NHLGameLink"])
    
    if "Career Shot" in time_frame["qualifiers"]:
        for index, row_data in enumerate(sorted(all_rows, key=lambda row: row["Date"])):
            has_match = False
            total_minute_entering = 0
            for sub_row_data in saved_row_data[:index]:
                total_minute_entering += sub_row_data["S"]
            total_minute_exiting = total_minute_entering + saved_row_data[index]["S"]

            goal_event = {
                "career_minute" : total_minute_entering
            }
            if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Shot"], None, None):
                has_match = True
            else:
                goal_event = {
                    "career_minute" : total_minute_exiting
                }
                if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Shot"], None, None):
                    has_match = True

            if not has_match:
                games_to_skip.add(row_data["NHLGameLink"])
    
    if "Career Shot Reversed" in time_frame["qualifiers"]:
        for index, row_data in enumerate(sorted(all_rows, key=lambda row: row["Date"])):
            has_match = False
            total_minute_entering = 0
            for sub_row_data in reversed(saved_row_data[(index + 1):]):
                total_minute_entering += sub_row_data["S"]
            total_minute_exiting = total_minute_entering + saved_row_data[index]["S"]

            goal_event = {
                "career_minute" : total_minute_entering
            }
            if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Shot Reversed"], None, None):
                has_match = True
            else:
                goal_event = {
                    "career_minute" : total_minute_exiting
                }
                if perform_sub_metadata_qual(goal_event, "career_minute", time_frame["qualifiers"]["Career Shot Reversed"], None, None):
                    has_match = True

            if not has_match:
                games_to_skip.add(row_data["NHLGameLink"])

    all_rows = sorted(all_rows, key=lambda row: row["Date"])
    return get_nhl_game_schedule(player_data, all_rows, games_to_skip, player_link, player_type, time_frame, missing_games, missing_toi, saved_row_data, extra_stats)

def get_nhl_schedule(player_data, all_rows, qualifiers):
    season_objs = {}
    seasons = set(row_data["Year"] for row_data in all_rows)
    for season in seasons:
        teams = set([row_data["Tm"] for row_data in all_rows if row_data["Year"] == season])
        for team in teams:
            new_season_obj = {
                "team" :team,
                "regular_season" : [],
                "playoffs" : []
            }

            year_str = str(season)
            year_str += str(season + 1)
            if team not in player_data["player_team_map"]:
                raise Exception("Unknown NHL team " + team)
            team_name = player_data["player_team_map"][team]
            if team_name == "Winnipeg Jets":
                if season < 2011:
                    team_name = "Winnipeg Jets (1979)"
            elif team_name == "Ottawa Senators":
                if season < 1992:
                    team_name = "Ottawa Senators (1917)"
            elif team_name == "Mighty Ducks of Anaheim":
                team_name = "Anaheim Ducks"
            elif team_name == "Chicago Black Hawks":
                team_name = "Chicago Blackhawks"
            elif team_name == "Quebec Athletic Club/Bulldogs":
                team_name = "Quebec Bulldogs"
            if team_name not in team_ids:
                raise Exception("Unknown NHL team " + team_name)
            
            team_id = team_ids[team_name]
            da_dates = []

            scheudle_url = nhl_team_schedule_url_format.format(team_id, year_str) + "&hydrate=linescore(all),"
            if "National Game" in qualifiers or "Any National Game" in qualifiers or "US National Game" in qualifiers or "Any US National Game" in qualifiers or "CA National Game" in qualifiers or "Any CA National Game" in qualifiers or "TV Network" in qualifiers or "Raw TV Network" in qualifiers or "National TV Network" in qualifiers or "National Raw TV Network" in qualifiers or "Any National TV Network" in qualifiers or "Any National Raw TV Network" in qualifiers:
                scheudle_url += "broadcasts(all),"

            scheudle_url = scheudle_url[:-1]

            request = urllib.request.Request(scheudle_url, headers=request_headers)
            data = url_request_json(request)

            for game in data["dates"]:
                da_dates.append(game)

            # for month_int in range(1, 13):
            #     min_date = datetime.date(season, month_int, 1)
            #     max_date = datetime.date(season, month_int, calendar.monthrange(season, month_int)[1])

            #     scheudle_url = nhl_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date))) + "&hydrate=linescore(all),"
            #     if "National Game" in qualifiers or "Any National Game" in qualifiers or "US National Game" in qualifiers or "Any US National Game" in qualifiers or "CA National Game" in qualifiers or "Any CA National Game" in qualifiers or "TV Network" in qualifiers or "Raw TV Network" in qualifiers or "National TV Network" in qualifiers or "National Raw TV Network" in qualifiers or "Any National TV Network" in qualifiers or "Any National Raw TV Network" in qualifiers:
            #         scheudle_url += "broadcasts(all),"

            #     scheudle_url = scheudle_url[:-1]

            #     request = urllib.request.Request(scheudle_url, headers=request_headers)
            #     data = url_request_json(request)

            #     for game in data["dates"]:
            #         da_dates.append(game)
                
            #     min_date = datetime.date(season + 1, month_int, 1)
            #     max_date = datetime.date(season + 1, month_int, calendar.monthrange(season + 1, month_int)[1])

            #     scheudle_url = nhl_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date))) + "&hydrate=linescore(all),"
            #     if "National Game" in qualifiers or "Any National Game" in qualifiers or "US National Game" in qualifiers or "Any US National Game" in qualifiers or "CA National Game" in qualifiers or "Any CA National Game" in qualifiers or "TV Network" in qualifiers or "Raw TV Network" in qualifiers or "National TV Network" in qualifiers or "National Raw TV Network" in qualifiers or "Any National TV Network" in qualifiers or "Any National Raw TV Network" in qualifiers:
            #         scheudle_url += "broadcasts(all),"

            #     scheudle_url = scheudle_url[:-1]

            #     request = urllib.request.Request(scheudle_url, headers=request_headers)
            #     data = url_request_json(request)

            #     for game in data["dates"]:
            #         da_dates.append(game)

            game_number = 1
            da_dates = sorted(da_dates, key = lambda game: dateutil.parser.parse(game["games"][0]["gameDate"]))

            for game in da_dates:
                game_type = int(str(game["games"][0]["gamePk"])[4:6])
                if game_type != 2 and game_type != 3:
                    continue

                if game["games"][0]["season"] != year_str:
                    continue

                row_data = {}
                row_data["Date"] = dateutil.parser.parse(game["date"]).date()
                row_data["Arena"] = game["games"][0]["venue"]["name"]
                if "id" in game["games"][0]["venue"]:
                    row_data["ArenaID"] = game["games"][0]["venue"]["id"]
                else:
                    row_data["ArenaID"] = None
                game_datetime = dateutil.parser.parse(game["games"][0]["gameDate"])
                game_datetime = game_datetime.astimezone(timezone("US/Eastern"))
                
                game_time = game_datetime.time()
                if game_time.hour < 12:
                    row_data["Time"] = "M"
                elif game_time.hour < 15:
                    row_data["Time"] = "E"
                elif game_time.hour < 18:
                    row_data["Time"] = "A"
                else:
                    row_data["Time"] = "L"
                
                row_data["StartTime"] = dateutil.parser.parse(game["games"][0]["gameDate"])
                row_data["Year"] = season

                is_home = game["games"][0]["teams"]["home"]["team"]["id"] == team_id
                if is_home:
                    player_team_id = game["games"][0]["teams"]["home"]["team"]["id"]
                    player_opp_id = game["games"][0]["teams"]["away"]["team"]["id"]
                else:
                    player_team_id = game["games"][0]["teams"]["away"]["team"]["id"]
                    player_opp_id = game["games"][0]["teams"]["home"]["team"]["id"]

                parsed_team_name = {v: k for k, v in team_ids.items()}[player_team_id]
                parsed_opp_name = {v: k for k, v in team_ids.items()}[player_opp_id]

                if parsed_team_name in team_name_info:
                    for abbr in team_name_info[parsed_team_name]:
                        if row_data["Year"] in team_name_info[parsed_team_name][abbr]:
                            row_data["Tm"] = abbr
                            break
                
                if "Tm" not in row_data:
                    if parsed_team_name in team_name_info:
                        for abbr in team_name_info[parsed_team_name]:
                            row_data["Tm"] = abbr
                
                if parsed_opp_name in team_name_info:
                    for abbr in team_name_info[parsed_opp_name]:
                        if row_data["Year"] in team_name_info[parsed_opp_name][abbr]:
                            row_data["Opponent"] = abbr.lower()
                            break
                
                if "Opponent" not in row_data:
                    if parsed_opp_name in team_name_info:
                        for abbr in team_name_info[parsed_opp_name]:
                            row_data["Opponent"] = abbr.lower()
                
                if "Tm" not in row_data:
                    raise Exception("Unknown team " + parsed_team_name + " for year " + str(row_data["Year"]))
                if "Opponent" not in row_data:
                    raise Exception("Unknown team " + parsed_opp_name + " for year " + str(row_data["Year"]))

                row_data["TmGm"] = game_number
                game_number += 1

                national_networks_to_skip = ["NHLN", "NHLN-US", "NHLN-CA", "NHL.TV", "ESPN+"]

                is_national = False
                is_us_national = False
                is_ca_national = False
                is_any_national = False
                is_us_any_national = False
                is_ca_any_national = False
                tv_networks = []
                national_tv_networks = []
                any_national_tv_networks = []
                if "broadcasts" in game["games"][0] and game["games"][0]["broadcasts"]:
                    for broadcast in game["games"][0]["broadcasts"]:
                        call_sign = broadcast["name"].split(" ")[0]
                            
                        if broadcast["type"] == "national":
                            is_any_national = True
                            if broadcast["site"] == "nhlCA":
                                is_ca_any_national = True
                            else:
                                is_us_any_national = True
                            if call_sign not in national_networks_to_skip:
                                is_national = True
                                if broadcast["site"] == "nhlCA":
                                    is_ca_national = True
                                else:
                                    is_us_national = True
                                national_tv_networks.append(call_sign.lower())
                            any_national_tv_networks.append(call_sign.lower())
                        tv_networks.append(call_sign.lower())
                    
                    row_data["IsNational"] = is_national
                    row_data["AnyIsNational"] = is_any_national
                    row_data["IsUSNational"] = is_us_national
                    row_data["AnyIsUSNational"] = is_us_any_national
                    row_data["IsCANational"] = is_ca_national
                    row_data["AnyIsCANational"] = is_ca_any_national
                    row_data["TVNetworks"] = tv_networks
                    row_data["NationalTVNetworks"] = national_tv_networks
                    row_data["AnyNationalTVNetworks"] = any_national_tv_networks

                is_final = game["games"][0]["status"]["abstractGameState"] == "Final"
                is_home = game["games"][0]["teams"]["home"]["team"]["id"] == team_id
                team_str = "home" if is_home else "away"
                opp_team_str = "away" if is_home else "home"

                row_data["Team Score"] = game["games"][0]["linescore"]["teams"][team_str]["goals"]
                row_data["Opponent Score"] = game["games"][0]["linescore"]["teams"][opp_team_str]["goals"]
                row_data["Team Goals"] = row_data["Team Score"]
                row_data["Opponent Goals"] = row_data["Opponent Score"]

                is_shootout = False
                if "hasShootout" in game["games"][0]["linescore"] and game["games"][0]["linescore"]["hasShootout"]:
                    is_shootout = True
                    if game["games"][0]["linescore"]["shootoutInfo"][team_str]["scores"] > game["games"][0]["linescore"]["shootoutInfo"][opp_team_str]["scores"]:
                        row_data["Team Goals"] -= 1
                    else:
                        row_data["Opponent Goals"] -= 1
                is_ot = False
                if not is_shootout and len(game["games"][0]["linescore"]["periods"]) > 3:
                    is_ot = True

                if is_home:
                    row_data["CurrTmWins"] = game["games"][0]["teams"]["home"]["leagueRecord"]["wins"]
                    row_data["CurrTmLosses"] = game["games"][0]["teams"]["home"]["leagueRecord"]["losses"]
                    row_data["CurrTmTies"] = 0
                    row_data["CurrTmOTLosses"] = 0
                    if "ot" in game["games"][0]["teams"]["home"]["leagueRecord"]:
                        row_data["CurrTmOTLosses"] += game["games"][0]["teams"]["home"]["leagueRecord"]["ot"]
                    elif "ties" in game["games"][0]["teams"]["home"]["leagueRecord"]:
                        row_data["CurrTmTies"] = game["games"][0]["teams"]["home"]["leagueRecord"]["ties"]

                    row_data["CurrOppWins"] = game["games"][0]["teams"]["away"]["leagueRecord"]["wins"]
                    row_data["CurrOppLosses"] = game["games"][0]["teams"]["away"]["leagueRecord"]["losses"]
                    row_data["CurrOppTies"] = 0
                    row_data["CurrOppOTLosses"] = 0
                    if "ot" in game["games"][0]["teams"]["away"]["leagueRecord"]:
                        row_data["CurrOppOTLosses"] += game["games"][0]["teams"]["away"]["leagueRecord"]["ot"]
                    elif "ties" in game["games"][0]["teams"]["away"]["leagueRecord"]:
                        row_data["CurrOppTies"] = game["games"][0]["teams"]["away"]["leagueRecord"]["ties"]
                else:
                    row_data["CurrTmWins"] = game["games"][0]["teams"]["away"]["leagueRecord"]["wins"]
                    row_data["CurrTmLosses"] = game["games"][0]["teams"]["away"]["leagueRecord"]["losses"]
                    row_data["CurrTmTies"] = 0
                    row_data["CurrTmOTLosses"] = 0
                    if "ot" in game["games"][0]["teams"]["away"]["leagueRecord"]:
                        row_data["CurrTmOTLosses"] += game["games"][0]["teams"]["away"]["leagueRecord"]["ot"]
                    elif "ties" in game["games"][0]["teams"]["away"]["leagueRecord"]:
                        row_data["CurrTmTies"] = game["games"][0]["teams"]["away"]["leagueRecord"]["ties"]

                    row_data["CurrOppWins"] = game["games"][0]["teams"]["home"]["leagueRecord"]["wins"]
                    row_data["CurrOppLosses"] = game["games"][0]["teams"]["home"]["leagueRecord"]["losses"]
                    row_data["CurrOppTies"] = 0
                    row_data["CurrOppOTLosses"] = 0
                    if "ot" in game["games"][0]["teams"]["home"]["leagueRecord"]:
                        row_data["CurrOppOTLosses"] += game["games"][0]["teams"]["home"]["leagueRecord"]["ot"]
                    elif "ties" in game["games"][0]["teams"]["home"]["leagueRecord"]:
                        row_data["CurrOppTies"] = game["games"][0]["teams"]["home"]["leagueRecord"]["ties"]

                if is_final:
                    if row_data["Team Score"] > row_data["Opponent Score"]:
                        result_str = "W"
                        row_data["CurrTmWins"] -= 1
                        if is_ot or is_shootout:
                            row_data["CurrOppOTLosses"] -= 1
                        else:
                            row_data["CurrOppLosses"] -= 1
                    elif row_data["Team Score"] < row_data["Opponent Score"]:
                        result_str = "L"
                        row_data["CurrOppWins"] -= 1
                        if is_ot or is_shootout:
                            row_data["CurrTmOTLosses"] -= 1
                        else:
                            row_data["CurrTmLosses"] -= 1
                    else:
                        result_str = "T"
                        row_data["CurrTmTies"] -= 1
                        row_data["CurrOppTies"] -= 1

                    if is_shootout:
                        result_str += "-SO"
                    elif len(game["games"][0]["linescore"]["periods"]) > 3:
                        result_str += "-OT"

                    row_data["Result"] = result_str
                else:
                    row_data["Result"] = None
                
                new_season_obj["regular_season" if game_type == 2 else "playoffs"].append(row_data)
        
            if not season in season_objs:
                season_objs[season] = []

            season_objs[season].append(new_season_obj)
    
    return season_objs

def get_nhl_game_schedule(player_data, all_rows, games_to_skip, player_link, player_type, time_frame, missing_games, missing_toi, saved_row_data, extra_stats):
    player_id = int(player_link.split('/')[-1])

    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " starting game data")
    count_info = {
        "current_percent" : 10,
        "count" : 1,
        "total_count" : len(all_rows) - len(games_to_skip),
        "missing_games" : missing_games,
        "missing_toi" : missing_toi,
        "exception" : None
    }
    new_rows = []

    if not count_info["total_count"]:
        return new_rows, missing_games, missing_toi

    with ThreadPoolExecutor(max_workers=5) as sub_executor:
        for index, row_data in enumerate(all_rows):
            if row_data["NHLGameLink"]:
                if row_data["NHLGameLink"] not in games_to_skip:
                    future = sub_executor.submit(get_game_data, index, player_data, row_data, player_id, player_type, time_frame, extra_stats)
                    future.add_done_callback(functools.partial(result_call_back, saved_row_data, index, time_frame, count_info, new_rows, player_type, player_data, player_link, extra_stats))
            else:
                count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
    
    if count_info["exception"]:
        raise count_info["exception"]

    return sorted(new_rows, key=lambda row: row["Date"]), missing_games, missing_toi

def result_call_back(saved_row_data, index, time_frame, count_info, new_rows, player_type, player_data, player_link, extra_stats, result):
    try:
        if result.exception():
            if not count_info["exception"]:
                count_info["exception"] = result.exception()
            percent_complete = 100 * (count_info["count"] / count_info["total_count"])
            if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                count_info["current_percent"] += 10
            count_info["count"] += 1
            return

        game_data, row_data, sub_missing_games = result.result()
        set_row_data(game_data, row_data)

        if "Career Minute" in time_frame["qualifiers"] or "Career Minute Reversed" in time_frame["qualifiers"] or "Game Minute" in time_frame["qualifiers"] or "Game Minute Reversed" in time_frame["qualifiers"] or "Career Shot" in time_frame["qualifiers"] or "Career Shot Reversed" in time_frame["qualifiers"] or "Game Shot" in time_frame["qualifiers"] or "Game Shot Reversed" in time_frame["qualifiers"]:
            setup_career_stats(row_data, game_data, saved_row_data, index, player_data, time_frame["qualifiers"])

        if "Game Number" in time_frame["qualifiers"]:
            if sub_missing_games:
                if sub_missing_games:
                    count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
                if row_data["Year"] >= 2010 and not row_data.get("GP_TOI", None):
                    count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")

            if not perform_nhl_game_qualifiers(row_data, time_frame["qualifiers"]):
                percent_complete = 100 * (count_info["count"] / count_info["total_count"])
                if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                    count_info["current_percent"] += 10
                count_info["count"] += 1
                return

        if "Shot On" in time_frame["qualifiers"] or "Event Formula" in time_frame["qualifiers"] or "On Ice With" in time_frame["qualifiers"] or "On Ice Against" in time_frame["qualifiers"] or "Assisted On" in time_frame["qualifiers"] or "Assisted With" in time_frame["qualifiers"] or "Points With" in time_frame["qualifiers"] or "Assisted By" in time_frame["qualifiers"] or "Primary Assisted On" in time_frame["qualifiers"] or "Primary Assisted With" in time_frame["qualifiers"] or "Primary Points With" in time_frame["qualifiers"] or "Primary Assisted By" in time_frame["qualifiers"] or "Hit On" in time_frame["qualifiers"] or "Block On" in time_frame["qualifiers"] or "Penalty On" in time_frame["qualifiers"] or "Faceoff Against" in time_frame["qualifiers"] or "Fight Against" in time_frame["qualifiers"] or "Penalty Type" in time_frame["qualifiers"] or "Team Score" in time_frame["qualifiers"] or "Opponent Score" in time_frame["qualifiers"] or "Score Margin" in time_frame["qualifiers"] or "Score Difference" in time_frame["qualifiers"] or "Period" in time_frame["qualifiers"] or "Coordinates" in time_frame["qualifiers"] or "Period Time" in time_frame["qualifiers"] or "Period Time Remaining" in time_frame["qualifiers"] or "Unassisted" in time_frame["qualifiers"] or "Strength" in time_frame["qualifiers"] or "Career Minute" in time_frame["qualifiers"] or "Career Minute Reversed" in time_frame["qualifiers"] or "Game Minute" in time_frame["qualifiers"] or "Game Minute Reversed" in time_frame["qualifiers"] or "Career Shot" in time_frame["qualifiers"] or "Career Shot Reversed" in time_frame["qualifiers"] or "Game Shot" in time_frame["qualifiers"] or "Game Shot Reversed" in time_frame["qualifiers"] or "Even Skaters" in time_frame["qualifiers"] or "Even Goalies" in time_frame["qualifiers"] or "More Skaters" in time_frame["qualifiers"] or "Less Skaters" in time_frame["qualifiers"] or "Team Goalie Pulled" in time_frame["qualifiers"] or "Opponent Goalie Pulled" in time_frame["qualifiers"] or "Power Play" in time_frame["qualifiers"] or "Short Handed" in time_frame["qualifiers"] or "Even Strength" in time_frame["qualifiers"] or "Team Skaters" in time_frame["qualifiers"] or "Opponent Skaters" in time_frame["qualifiers"] or "Team Players" in time_frame["qualifiers"] or "Opponent Players" in time_frame["qualifiers"] or "Overtime" in time_frame["qualifiers"] or "Game Winning" in time_frame["qualifiers"] or "Offensive Zone" in time_frame["qualifiers"] or "Defensive Zone" in time_frame["qualifiers"] or "Neutral Zone" in time_frame["qualifiers"] or "Event Time" in time_frame["qualifiers"] or "current-stats" in extra_stats:
            if sub_missing_games:
                if sub_missing_games:
                    count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
                if row_data["Year"] >= 2010 and not row_data.get("GP_TOI", None):
                    count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
            
            if game_data["missing_toi"]:
                count_info["missing_toi"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")

            if not perform_sub_nhl_game_qualifiers(row_data, time_frame["qualifiers"], game_data, player_type, player_link, saved_row_data, index, True):
                percent_complete = 100 * (count_info["count"] / count_info["total_count"])
                if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                    count_info["current_percent"] += 10
                count_info["count"] += 1
                return
        
        if "Period Stat" in time_frame["qualifiers"]:
            if sub_missing_games:
                if sub_missing_games:
                    count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
                if row_data["Year"] >= 2010 and not row_data.get("GP_TOI", None):
                    count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
            
            if game_data["missing_toi"]:
                count_info["missing_toi"].append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")

            if not perform_sub_nhl_period_qualifiers(row_data, time_frame["qualifiers"], game_data, player_type, player_data, player_link, saved_row_data, index):
                percent_complete = 100 * (count_info["count"] / count_info["total_count"])
                if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                    count_info["current_percent"] += 10
                count_info["count"] += 1
                return

        new_rows.append(row_data)

        percent_complete = 100 * (count_info["count"] / count_info["total_count"])
        if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
            logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
            count_info["current_percent"] += 10
        count_info["count"] += 1
    except Exception as err:
        try:
            if not count_info["exception"]:
                count_info["exception"] = err
            percent_complete = 100 * (count_info["count"] / count_info["total_count"])
            if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                count_info["current_percent"] += 10
            count_info["count"] += 1
        except Exception as err:
            if not count_info["exception"]:
                count_info["exception"] = err
        return

def perform_sub_nhl_period_qualifiers(row, qualifiers, player_game_info, player_type, player_data, player_link, saved_row_data, index):
    if not player_game_info or player_game_info["missing_data"]:
        return False, row

    clear_row_attrs(row, player_type)

    events_by_period = {}

    events_to_skip = [
        "goal",
        "assist",
        "goal_against",
        "save_against",
        "shot",
        "missed_shot",
        "blocked_shot",
        "hit",
        "block",
        "penalty",
        "all_penalty",
        "faceoff",
        "all_faceoffs",
        "takeaway",
        "all_team_goals",
        "all_team_shots",
        "all_team_shots_og",
        "all_team_unblocked_shots",
        "all_opp_goals",
        "all_opp_shots",
        "all_opp_shots_og",
        "all_opp_unblocked_shots",
        "of_all_team_goals",
        "of_all_team_shots",
        "of_all_team_shots_og",
        "of_all_team_unblocked_shots",
        "of_all_opp_goals",
        "of_all_opp_shots",
        "of_all_opp_shots_og",
        "of_all_opp_unblocked_shots",
        "shift_data"
    ]

    periods = set()
    shift_data = player_game_info["shift_data"]
    for event_type in player_game_info:
        if event_type in events_to_skip:
            if event_type == "shift_data":
                for team_str in shift_data:
                    for player_id in shift_data[team_str]:
                        for period in shift_data[team_str][player_id]:
                            periods.add(period)
            else:
                for goal_event in player_game_info[event_type]:
                    periods.add(goal_event["period"])

    for period in periods:
        events_by_period[period] = {}
        for event_type in player_game_info:
            if event_type in events_to_skip:
                if event_type == "shift_data":
                    if player_game_info["shift_data"]:
                        events_by_period[period]["shift_data"] = {
                            "team" : {},
                            "opp" : {}
                        }
                else:
                    events_by_period[period][event_type] = []

    for event_type in player_game_info:
        if event_type in events_to_skip:
            if event_type == "shift_data":
                for team_str in shift_data:
                    for player_id in shift_data[team_str]:
                        for period in shift_data[team_str][player_id]:
                            for shift_event in shift_data[team_str][player_id][period]:
                                if player_id not in events_by_period[period]["shift_data"][team_str]:
                                    events_by_period[period]["shift_data"][team_str][player_id] = {}
                                if period not in events_by_period[period]["shift_data"][team_str][player_id]:
                                    events_by_period[period]["shift_data"][team_str][player_id][period] = []
                                events_by_period[period]["shift_data"][team_str][player_id][period].append(shift_event)
            else:
                for goal_event in player_game_info[event_type]:
                    events_by_period[goal_event["period"]][event_type].append(goal_event)
    
    overall_has_match = False
    for period in events_by_period:
        if period == 5 and player_game_info["is_shootout"]:
            continue

        period_events = events_by_period[period]
        new_plater_game_info = copy.copy(player_game_info)
        for event_name in period_events:
            new_plater_game_info[event_name] = period_events[event_name]
        
        row_copy = copy.copy(row)

        perform_sub_nhl_game_qualifiers(row_copy, qualifiers, new_plater_game_info, player_type, player_link, saved_row_data, index, True)

        has_all_match = True
        if "Period Stat" in qualifiers:
            stats = set()
            find_stat_match(qualifiers["Period Stat"], player_type, stats)
            row_lower = fill_row(row_copy, player_data, player_type, stats=stats)
            for qual_object in qualifiers["Period Stat"]:
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    stat = sub_qual_object["stat"]

                    if stat not in row_lower:
                        for header_stat in headers[player_type["da_type"]["type"]]:
                            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in row_lower:
                        has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        has_all_match = False
                else:
                    if not has_match:
                        has_all_match = False

        if has_all_match:
            row["Per"] += 1
            perform_sub_nhl_game_qualifiers(row, qualifiers, new_plater_game_info, player_type, player_link, saved_row_data, index, False)
            overall_has_match = True
    
    return overall_has_match

def setup_career_stats(row_data, player_game_info, saved_row_data, index, player_data, qualifiers):
    if not player_game_info or player_game_info["missing_data"]:
        return

    career_stats_info = {
        "minutes" : 0,
        "shots" : 0
    }
    for sub_row_data in saved_row_data[:index]:
        career_stats_info["minutes"] += sub_row_data["TOI"]
        career_stats_info["shots"] += sub_row_data["S"]
    sub_minutes = career_stats_info["minutes"]
    sub_shots = career_stats_info["shots"]

    career_stats_info = {
       "minutes" : 0,
       "shots" : 0
    }
    for sub_row_data in reversed(saved_row_data[(index + 1):]):
        career_stats_info["minutes"] += sub_row_data["TOI"]
        career_stats_info["shots"] += sub_row_data["S"]
    sub_minutes_reversed = career_stats_info["minutes"]
    sub_shots_reversed = career_stats_info["shots"]

    for event_name in player_game_info:
        if isinstance(player_game_info[event_name], list):
            for event in player_game_info[event_name]:
                if isinstance(event, dict) and "periodTime" in event:
                    if player_game_info["shift_data"]:
                        game_minutes, game_minutes_reversed = determine_toi(player_game_info["shift_data"], event["period"], event["periodTime"], player_data["nhl_id"], True, "faceoff" in event_name)
                        career_minutes = sub_minutes + game_minutes
                        career_minutes_reversed = sub_minutes_reversed + game_minutes_reversed

                        event["game_minute"] = game_minutes
                        event["career_minute"] = career_minutes
                        event["game_minute_reversed"] = game_minutes_reversed
                        event["career_minute_reversed"] = career_minutes_reversed

                    game_shots, game_shots_reversed = determine_shots(player_game_info, event["period"], event["periodTime"], qualifiers, "faceoff" in event_name)
                    career_shots = sub_shots + game_shots
                    career_shots_reversed = sub_shots_reversed + game_shots_reversed

                    event["game_shot"] = game_shots
                    event["career_shot"] = career_shots
                    event["game_shot_reversed"] = game_shots_reversed
                    event["career_shot_reversed"] = career_shots_reversed

def is_player_on_ice(shift_data, team_on_ice, opp_on_ice, period, period_time, player_id, is_team, is_faceoff=False):
    if is_team and team_on_ice:
        return player_id in team_on_ice
    elif not is_team and opp_on_ice:
        return player_id in opp_on_ice
        
    team_str = "team" if is_team else "opp"
    if not shift_data:
        return None
    if player_id not in shift_data[team_str] or period not in shift_data[team_str][player_id]:
        return False
    for shift_event in shift_data[team_str][player_id][period]:
        if is_faceoff:
            if period_time >= shift_event["time_start"] - 1 and period_time <= shift_event["time_end"] - 1:
                return True
        else:
            if period_time >= shift_event["time_start"] and period_time <= shift_event["time_end"]:
                return True
    return False

def determine_toi(shift_data, period, period_time, player_id, is_team, is_faceoff=False):        
    team_str = "team" if is_team else "opp"
    total_toi = 0
    total_toi_reversed = 0
    if not shift_data:
        return total_toi, total_toi_reversed

    for sub_period in shift_data[team_str][player_id]:
        for shift_event in shift_data[team_str][player_id][sub_period]:
            for second in range(shift_event["time_start"], shift_event["time_end"] + 1):
                if period > shift_event["period"]:
                    total_toi += 1
                elif period == shift_event["period"]:
                    if is_faceoff:
                        if second <= period_time - 1:
                            total_toi += 1
                        if second >= period_time - 1:
                            total_toi_reversed += 1
                    else:
                        if second <= period_time:
                            total_toi += 1
                        if second >= period_time:
                            total_toi_reversed += 1
                elif period < shift_event["period"]:
                    total_toi_reversed += 1

    return total_toi, total_toi_reversed

def determine_shots(player_game_data, period, period_time, qualifiers, is_faceoff=False):
    total_goals = 0
    total_goals_reversed = 0
    count_misses = False
    if not "Shot On" in qualifiers:
        if "Penalty Shot" in qualifiers or "Shootout" in qualifiers:
            count_misses = True
    all_goal_events = player_game_data["goal"] + player_game_data["shot"]
    if count_misses:
        all_goal_events += player_game_data["missed_shot"]

    for goal_event in all_goal_events:
        if period > goal_event["period"]:
            total_goals += 1
        elif period == goal_event["period"]:
            if is_faceoff:
                if goal_event["periodTime"] <= period_time - 1:
                    total_goals += 1
                if goal_event["periodTime"] >= period_time - 1:
                    total_goals_reversed += 1
            else:
                if goal_event["periodTime"] <= period_time:
                    total_goals += 1
                if goal_event["periodTime"] >= period_time:
                    total_goals_reversed += 1
        elif period < goal_event["period"]:
            total_goals_reversed += 1

    return total_goals, total_goals_reversed

def set_row_data(player_game_info, row_data):
    if not player_game_info:
        return
    row_data["Fight"] = player_game_info["Fight"]
    row_data["FirstStar"] = player_game_info["FirstStar"]
    row_data["SecondStar"] = player_game_info["SecondStar"]
    row_data["ThirdStar"] = player_game_info["ThirdStar"]
    row_data["TotalStar"] = player_game_info["FirstStar"] + player_game_info["SecondStar"] + player_game_info["ThirdStar"]
    row_data["Number"] = player_game_info["Number"]

def get_game_data(index, player_data, row_data, player_id, player_type, time_frame, extra_stats):    
    game_data, missing_games, sub_data = setup_game_data(player_data, row_data, player_id, player_type, time_frame)
    if game_data["missing_data"]:
        if row_data["Year"] < 2000 and "Game Number" not in time_frame["qualifiers"]:
            game_data, missing_games, sub_data = setup_href_game_data(player_data, row_data, player_id, player_type, time_frame)
        else:
            return game_data, row_data, missing_games

    if not ("Shot On" in time_frame["qualifiers"] or "Event Formula" in time_frame["qualifiers"] or "On Ice With" in time_frame["qualifiers"] or "On Ice Against" in time_frame["qualifiers"] or "Assisted On" in time_frame["qualifiers"] or "Assisted With" in time_frame["qualifiers"] or "Points With" in time_frame["qualifiers"] or "Assisted By" in time_frame["qualifiers"] or "Primary Assisted On" in time_frame["qualifiers"] or "Primary Assisted With" in time_frame["qualifiers"] or "Primary Points With" in time_frame["qualifiers"] or "Primary Assisted By" in time_frame["qualifiers"] or "Hit On" in time_frame["qualifiers"] or "Block On" in time_frame["qualifiers"] or "Penalty On" in time_frame["qualifiers"] or "Faceoff Against" in time_frame["qualifiers"] or "Fight Against" in time_frame["qualifiers"] or "Penalty Type" in time_frame["qualifiers"] or "Team Score" in time_frame["qualifiers"] or "Opponent Score" in time_frame["qualifiers"] or "Score Margin" in time_frame["qualifiers"] or "Score Difference" in time_frame["qualifiers"] or "Period" in time_frame["qualifiers"] or "Period Stat" in time_frame["qualifiers"] or "Coordinates" in time_frame["qualifiers"] or "Period Time" in time_frame["qualifiers"] or "Period Time Remaining" in time_frame["qualifiers"] or "Unassisted" in time_frame["qualifiers"] or "Career Minute" in time_frame["qualifiers"] or "Career Minute Reversed" in time_frame["qualifiers"] or "Game Minute" in time_frame["qualifiers"] or "Game Minute Reversed" in time_frame["qualifiers"] or "Career Shot" in time_frame["qualifiers"] or "Career Shot Reversed" in time_frame["qualifiers"] or "Game Shot" in time_frame["qualifiers"] or "Game Shot Reversed" in time_frame["qualifiers"] or "Strength" in time_frame["qualifiers"] or "Even Skaters" in time_frame["qualifiers"] or "Even Goalies" in time_frame["qualifiers"] or "More Skaters" in time_frame["qualifiers"] or "Less Skaters" in time_frame["qualifiers"] or "Team Goalie Pulled" in time_frame["qualifiers"] or "Opponent Goalie Pulled" in time_frame["qualifiers"] or "Power Play" in time_frame["qualifiers"] or "Short Handed" in time_frame["qualifiers"] or "Even Strength" in time_frame["qualifiers"] or "Team Skaters" in time_frame["qualifiers"] or "Opponent Skaters" in time_frame["qualifiers"] or "Team Players" in time_frame["qualifiers"] or "Opponent Players" in time_frame["qualifiers"] or "Overtime" in time_frame["qualifiers"] or "Game Winning" in time_frame["qualifiers"] or "Offensive Zone" in time_frame["qualifiers"] or "Defensive Zone" in time_frame["qualifiers"] or "Neutral Zone" in time_frame["qualifiers"] or "Event Time" in time_frame["qualifiers"] or "penalties" in extra_stats or "current-stats" in extra_stats):
        return game_data, row_data, missing_games

    scoring_plays = []
    if row_data["Year"] < 2000 and sub_data:
        scoring_plays = sub_data["liveData"]["plays"]["allPlays"]
    if ((not scoring_plays and row_data["Year"] >= 1979) or (row_data["Year"] >= 2000)):
        if row_data["Year"] >= 2007:
            get_html_play_data(scoring_plays, player_data, row_data["NHLGameLink"], row_data["Location"], game_data, sub_data["gameData"]["status"]["abstractGameState"] == "Final", row_data["Year"])
        elif row_data["Year"] >= 2003:
            get_old_html_play_data(scoring_plays, player_data, row_data["NHLGameLink"], row_data["Location"], game_data, True)
        elif row_data["Year"] >= 2000:
            get_older_html_play_data(scoring_plays, player_data, row_data["NHLGameLink"], row_data["Location"], game_data, True)
        else:
            if "Shot On" not in time_frame["qualifiers"]:
                get_href_html_play_data(scoring_plays, player_data, row_data["GameLink"], row_data["Location"], row_data["Tm"], row_data["Opponent"].upper(), game_data, True)
    if not scoring_plays and sub_data:
        scoring_plays = sub_data["liveData"]["plays"]["allPlays"]

    scoring_plays = sorted(scoring_plays, key = lambda scoring_play: (scoring_play["about"]["period"], start_time_to_str(scoring_play["about"]["periodTime"])))

    if not scoring_plays:
        if "Shot On" in time_frame["qualifiers"] or "Event Formula" in time_frame["qualifiers"] or "On Ice With" in time_frame["qualifiers"] or "On Ice Against" in time_frame["qualifiers"] or "Assisted On" in time_frame["qualifiers"] or "Assisted With" in time_frame["qualifiers"] or "Points With" in time_frame["qualifiers"] or "Assisted By" in time_frame["qualifiers"] or "Primary Assisted On" in time_frame["qualifiers"] or "Primary Assisted With" in time_frame["qualifiers"] or "Primary Points With" in time_frame["qualifiers"] or "Primary Assisted By" in time_frame["qualifiers"] or "Hit On" in time_frame["qualifiers"] or "Block On" in time_frame["qualifiers"] or "Penalty On" in time_frame["qualifiers"] or "Faceoff Against" in time_frame["qualifiers"] or "Fight Against" in time_frame["qualifiers"] or "Penalty Type" in time_frame["qualifiers"] or "Team Score" in time_frame["qualifiers"] or "Opponent Score" in time_frame["qualifiers"] or "Score Margin" in time_frame["qualifiers"] or "Score Difference" in time_frame["qualifiers"] or "Period" in time_frame["qualifiers"] or "Period Stat" in time_frame["qualifiers"] or "Coordinates" in time_frame["qualifiers"] or "Period Time" in time_frame["qualifiers"] or "Period Time Remaining" in time_frame["qualifiers"] or "Unassisted" in time_frame["qualifiers"] or "Strength" in time_frame["qualifiers"] or "Career Minute" in time_frame["qualifiers"] or "Career Minute Reversed" in time_frame["qualifiers"] or "Game Minute" in time_frame["qualifiers"] or "Game Minute Reversed" in time_frame["qualifiers"] or "Career Shot" in time_frame["qualifiers"] or "Career Shot Reversed" in time_frame["qualifiers"] or "Game Shot" in time_frame["qualifiers"] or "Game Shot Reversed" in time_frame["qualifiers"] or "Even Skaters" in time_frame["qualifiers"] or "More Skaters" in time_frame["qualifiers"] or "Less Skaters" in time_frame["qualifiers"] or "Team Skaters" in time_frame["qualifiers"] or "Opponent Skaters" in time_frame["qualifiers"] or "Team Players" in time_frame["qualifiers"] or "Opponent Players" in time_frame["qualifiers"] or "Team Goalie Pulled" in time_frame["qualifiers"] or "Opponent Goalie Pulled" in time_frame["qualifiers"] or "Power Play" in time_frame["qualifiers"] or "Short Handed" in time_frame["qualifiers"] or "Even Strength" in time_frame["qualifiers"] or "Shootout" in time_frame["qualifiers"] or "Overtime" in time_frame["qualifiers"] or "Game Winning" in time_frame["qualifiers"] or "Offensive Zone" in time_frame["qualifiers"] or "Defensive Zone" in time_frame["qualifiers"] or "Neutral Zone" in time_frame["qualifiers"] or "Event Time" in time_frame["qualifiers"] or "Penaltly Shot" in time_frame["qualifiers"] or "penalties" in extra_stats:
            missing_games = True
            game_data["missing_data"] = True

    scoring_play_data = []
    ot_goal_period = None
    ot_goal_time = None
    for scoring_play in scoring_plays:
        if scoring_play["result"]["event"] == "Goal":
            scoring_play_data.append({
                "period" : scoring_play["about"]["period"],
                "second" : start_time_to_str(scoring_play["about"]["periodTime"]),
                "is_team" : scoring_play["team"]["id"] == game_data["team_id"]
            })

            if scoring_play["about"]["period"] > 3:
                ot_goal_period = scoring_play["about"]["period"]
                ot_goal_time = start_time_to_str(scoring_play["about"]["periodTime"])

    for period in range(1,10):
        if period == ot_goal_period:
            game_data["period_length"][period] = ot_goal_time
        else:
            if row_data["is_playoffs"] or period <= 3:
                game_data["period_length"][period] = 1200
            elif row_data["Year"] <= 1942:
                game_data["period_length"][period] = 600
            else:
                game_data["period_length"][period] = 300
        
    shootout_game_winner = 0
    is_final = True if not sub_data else sub_data["gameData"]["status"]["abstractGameState"] == "Final"
    if is_final and game_data["is_shootout"]:
        home_score = sub_data["liveData"]["linescore"]["shootoutInfo"]["home"]["scores"]
        away_score = sub_data["liveData"]["linescore"]["shootoutInfo"]["away"]["scores"]
        if home_score > away_score:
            if row_data["Location"]:
                shootout_game_winner = away_score + 1
        else:
            if not row_data["Location"]:
                shootout_game_winner = home_score + 1

        
    game_data["scoring_play_data"] = scoring_play_data
    
    if row_data["Year"] >= 2010:
        game_data["shift_data"] = get_html_shift_data(row_data["NHLGameLink"], row_data["Location"], game_data, player_data)
        if not game_data["shift_data"]:
            game_data["shift_data"], missing_games = get_shift_data(row_data["NHLGameLink"], game_data["team_id"], missing_games)
        if not game_data["shift_data"]:
            game_data["missing_toi"] = True
            if has_shift_quals(time_frame["qualifiers"]):
                missing_games = True
                game_data["missing_data"] = True
                return game_data, row_data, missing_games

        if game_data["shift_data"]:
            if not is_final and sub_data["liveData"]["linescore"]["currentPeriod"] == 1:
                for player in sub_data["liveData"]["boxscore"]["teams"][game_data["team_str"]]["players"]:
                    player = sub_data["liveData"]["boxscore"]["teams"][game_data["team_str"]]["players"][player]
                    stat_str = "goalieStats" if player["position"]["code"] == "G" else "skaterStats"
                    if stat_str in player["stats"] and player["person"]["id"] not in game_data["shift_data"]["team"]:
                        time_end = start_time_to_str(player["stats"][stat_str]["timeOnIce"])
                        if time_end:
                            if "team" not in game_data["shift_data"]:
                                game_data["shift_data"]["team"] = {}
                            if player["person"]["id"] not in game_data["shift_data"]["team"]:
                                game_data["shift_data"]["team"][player["person"]["id"]] = {}
                            if 1 not in game_data["shift_data"]["team"][player["person"]["id"]]:
                                game_data["shift_data"]["team"][player["person"]["id"]][1] = []

                            game_data["shift_data"]["team"][player["person"]["id"]][1] = [{
                                "time_start" : 1,
                                "time_end" : time_end,
                                "period" : 1
                            }]
                
                for player in sub_data["liveData"]["boxscore"]["teams"][game_data["opp_str"]]["players"]:
                    player = sub_data["liveData"]["boxscore"]["teams"][game_data["opp_str"]]["players"][player]
                    stat_str = "goalieStats" if player["position"]["code"] == "G" else "skaterStats"
                    if stat_str in player["stats"] and player["person"]["id"] not in game_data["shift_data"]["opp"]:
                        time_end = start_time_to_str(player["stats"][stat_str]["timeOnIce"])
                        if time_end:
                            if "opp" not in game_data["shift_data"]:
                                game_data["shift_data"]["opp"] = {}
                            if player["person"]["id"] not in game_data["shift_data"]["opp"]:
                                game_data["shift_data"]["opp"][player["person"]["id"]] = {}
                            if 1 not in game_data["shift_data"]["opp"][player["person"]["id"]]:
                                game_data["shift_data"]["opp"][player["person"]["id"]][1] = []

                            game_data["shift_data"]["opp"][player["person"]["id"]][1] = [{
                                "time_start" : 1,
                                "time_end" : time_end,
                                "period" : 1
                            }]
                    

    next_shot_penalty_shot = False
    first_goal = True
    team_shootout_goal = 1
    # first_period_side = None
    # for period in sub_data["liveData"]["linescore"]["periods"]:
    #     if "rinkSide" in period[game_data["team_str"]]:
    #         rink_side = period[game_data["team_str"]]["rinkSide"]
    #         if rink_side == "left" or rink_side == "right":
    #             if period["num"] % 2 == 1:
    #                 first_period_side = rink_side
    #             else:
    #                 if rink_side == "left":
    #                     first_period_side = "right"
    #                 else:
    #                     first_period_side = "left"
    #             break

    for scoring_play in scoring_plays:
        if "players" not in scoring_play or not scoring_play["players"]:
            continue
        period_time = start_time_to_str(scoring_play["about"]["periodTime"])
        if row_data["is_playoffs"] or scoring_play["about"]["period"] <= 3:
            time_to_use = 1200
        elif row_data["Year"] <= 1942:
            time_to_use = 600
        else:
            time_to_use = 300

        team_on_ice = None
        opp_on_ice = None
        if "team_on_ice" in scoring_play:
            if scoring_play["team"]["id"] == game_data["team_id"]:
                team_on_ice = scoring_play["team_on_ice"]
                opp_on_ice = scoring_play["opp_on_ice"]
            else:
                team_on_ice = scoring_play["opp_on_ice"]
                opp_on_ice = scoring_play["team_on_ice"]

        period_time_rem = time_to_use - period_time
        zone = None
        strength = None
        x_coord = None
        y_coord = None
        if "coordinates" in scoring_play and scoring_play["coordinates"] and "x" in scoring_play["coordinates"] and "y" in scoring_play["coordinates"]:
            x_coord = scoring_play["coordinates"]["x"]
            y_coord = scoring_play["coordinates"]["y"]
            if first_period_side:
                if scoring_play["about"]["period"] % 2 == 1:
                    rink_side = first_period_side
                else:
                    if first_period_side == "left":
                        rink_side = "right"
                    else:
                        rink_side = "left"
                if x_coord >= -50 and x_coord <= 50:
                    zone = "NZ"
                elif x_coord > 50:
                    zone = "OZ" if rink_side == "left" else "DZ"
                else:
                    zone = "DZ" if rink_side == "left" else "OZ"
            
        event_time = None
        if "dateTime" in scoring_play["about"] and scoring_play["about"]["dateTime"]:
            event_time = dateutil.parser.parse(scoring_play["about"]["dateTime"])
        
        if not zone and "zone" in scoring_play and scoring_play["zone"]:
            zone = scoring_play["zone"]
            if scoring_play["team"]["id"] != game_data["team_id"]:
                if zone == "OZ":
                    zone = "DZ"
                elif zone == "DZ":
                    zone = "OZ"

        if "strength" in scoring_play["result"] and "code" in scoring_play["result"]["strength"] and scoring_play["result"]["strength"]["code"]:
            strength = scoring_play["result"]["strength"]["code"]
            if scoring_play["team"]["id"] != game_data["team_id"]:
                if strength == "PPG":
                    strength = "SHG"
                elif strength == "SHG":
                    strength = "PPG"
        
        if scoring_play["result"]["event"] == "Goal":
            player_scored = False
            player_assisted = False
            player_saved = False
            is_primary = False
            goalie = None
            scorer = None
            assists = []
            first_assist = True
            for score_player in scoring_play["players"]:
                if score_player["playerType"] == "Scorer":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_scored = True
                    else:
                        scorer = score_player["player"]["id"]
                elif score_player["playerType"] == "Assist":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_assisted = True
                        if first_assist:
                            is_primary = True
                    else:
                        assists.append(score_player["player"]["id"])
                    first_assist = False
                elif score_player["playerType"] == "Goalie":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_saved = True
                    else:
                        goalie = score_player["player"]["id"]
            
            game_winning_goal = "gameWinningGoal" in scoring_play["result"] and scoring_play["result"]["gameWinningGoal"]
            if scoring_play["about"]["period"] == 5 and game_data["is_shootout"]:
                game_winning_goal = False
                if scoring_play["team"]["id"] == game_data["team_id"]:
                    if team_shootout_goal == shootout_game_winner:
                        game_winning_goal = True
                    team_shootout_goal += 1

            if player_scored:
                game_data["goal"].append({
                    "goalie" : goalie,
                    "strength" : strength,
                    "gameWinningGoal" : game_winning_goal,
                    "emptyNet" : "emptyNet" in scoring_play["result"] and scoring_play["result"]["emptyNet"],
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "penaltyShot" : next_shot_penalty_shot,
                    "firstGoal" : first_goal,
                    "assists" : assists,
                    "secondaryType" : scoring_play["result"]["secondaryType"] if "secondaryType" in scoring_play["result"] else None,
                    "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
            elif player_assisted:
                game_data["assist"].append({
                    "scorer" : scorer,
                    "is_primary" : is_primary,
                    "strength" : strength,
                    "gameWinningGoal" : "gameWinningGoal" in scoring_play["result"] and scoring_play["result"]["gameWinningGoal"],
                    "emptyNet" : "emptyNet" in scoring_play["result"] and scoring_play["result"]["emptyNet"],
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "assists" : assists,
                    "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
            elif player_saved:
                game_data["goal_against"].append({
                    "scorer" : scorer,
                    "strength" : strength,
                    "gameWinningGoal" : "gameWinningGoal" in scoring_play["result"] and scoring_play["result"]["gameWinningGoal"],
                    "emptyNet" : "emptyNet" in scoring_play["result"] and scoring_play["result"]["emptyNet"],
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                })
            
            if is_player_on_ice(game_data["shift_data"], team_on_ice, opp_on_ice, scoring_play["about"]["period"], period_time, player_id, True):
                if scoring_play["team"]["id"] == game_data["team_id"]:
                    game_data["all_team_goals"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "strength" : strength,
                        "emptyNet" : "emptyNet" in scoring_play["result"] and scoring_play["result"]["emptyNet"],
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    if row_data["Year"] >= 2007:
                        game_data["all_team_shots"].append({
                            "period" : scoring_play["about"]["period"],
                            "x_coord" : x_coord,
                            "y_coord" : y_coord,
                            "periodTime" : period_time,
                            "periodTimeRemaining" : period_time_rem,
                            "zone" : zone,
                            "event_time": event_time,
                            "team_on_ice" : team_on_ice,
                            "opp_on_ice" : opp_on_ice,
                            "strength" : strength,
                            "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                            "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                            "firstGoal" : first_goal,
                            "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                        })
                        game_data["all_team_shots_og"].append({
                            "period" : scoring_play["about"]["period"],
                            "x_coord" : x_coord,
                            "y_coord" : y_coord,
                            "periodTime" : period_time,
                            "periodTimeRemaining" : period_time_rem,
                            "zone" : zone,
                            "event_time": event_time,
                            "team_on_ice" : team_on_ice,
                            "opp_on_ice" : opp_on_ice,
                            "strength" : strength,
                            "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                            "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                            "firstGoal" : first_goal,
                            "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                        })
                        game_data["all_team_unblocked_shots"].append({
                            "period" : scoring_play["about"]["period"],
                            "x_coord" : x_coord,
                            "y_coord" : y_coord,
                            "periodTime" : period_time,
                            "periodTimeRemaining" : period_time_rem,
                            "zone" : zone,
                            "event_time": event_time,
                            "team_on_ice" : team_on_ice,
                            "opp_on_ice" : opp_on_ice,
                            "strength" : strength,
                            "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                            "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                            "firstGoal" : first_goal,
                            "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                        })
                else:
                    game_data["all_opp_goals"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "strength" : scoring_play["result"]["strength"]["code"],
                        "emptyNet" : "emptyNet" in scoring_play["result"] and scoring_play["result"]["emptyNet"],
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                    })
                    if row_data["Year"] >= 2007:
                        game_data["all_opp_shots"].append({
                            "period" : scoring_play["about"]["period"],
                            "x_coord" : x_coord,
                            "y_coord" : y_coord,
                            "periodTime" : period_time,
                            "periodTimeRemaining" : period_time_rem,
                            "zone" : zone,
                            "event_time": event_time,
                            "team_on_ice" : team_on_ice,
                            "opp_on_ice" : opp_on_ice,
                            "strength" : strength,
                            "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                            "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                            "firstGoal" : first_goal,
                            "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                        })
                        game_data["all_opp_shots_og"].append({
                            "period" : scoring_play["about"]["period"],
                            "x_coord" : x_coord,
                            "y_coord" : y_coord,
                            "periodTime" : period_time,
                            "periodTimeRemaining" : period_time_rem,
                            "zone" : zone,
                            "event_time": event_time,
                            "team_on_ice" : team_on_ice,
                            "opp_on_ice" : opp_on_ice,
                            "strength" : strength,
                            "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                            "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                            "firstGoal" : first_goal,
                            "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                        })
                        game_data["all_opp_unblocked_shots"].append({
                            "period" : scoring_play["about"]["period"],
                            "x_coord" : x_coord,
                            "y_coord" : y_coord,
                            "periodTime" : period_time,
                            "periodTimeRemaining" : period_time_rem,
                            "zone" : zone,
                            "event_time": event_time,
                            "team_on_ice" : team_on_ice,
                            "opp_on_ice" : opp_on_ice,
                            "strength" : strength,
                            "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                            "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                            "firstGoal" : first_goal,
                            "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                        })
            if scoring_play["team"]["id"] == game_data["team_id"]:
                game_data["of_all_team_goals"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "strength" : scoring_play["result"]["strength"]["code"],
                    "emptyNet" : "emptyNet" in scoring_play["result"] and scoring_play["result"]["emptyNet"],
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
                if row_data["Year"] >= 2007:
                    game_data["of_all_team_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["of_all_team_shots_og"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["of_all_team_unblocked_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]] - 1,
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : (scoring_play["about"]["goals"][game_data["team_str"]] - 1) - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
            else:
                game_data["of_all_opp_goals"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "strength" : scoring_play["result"]["strength"]["code"],
                    "emptyNet" : "emptyNet" in scoring_play["result"] and scoring_play["result"]["emptyNet"],
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                })
                if row_data["Year"] >= 2007:
                    game_data["of_all_opp_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                    })
                    game_data["of_all_opp_shots_og"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                    })
                    game_data["of_all_opp_unblocked_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]] - 1,
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]] - 1)
                    })

            next_shot_penalty_shot = False
            first_goal = False
        elif scoring_play["result"]["event"] == "Shot":
            player_shot = False
            goalie = None
            player_saved = False
            scorer = None
            for score_player in scoring_play["players"]:
                if score_player["playerType"] == "Shooter":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_shot = True
                    else:
                        scorer = score_player["player"]["id"]
                elif score_player["playerType"] == "Goalie":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_saved = True
                    else:
                        goalie = score_player["player"]["id"]
            
            if player_shot:
                game_data["shot"].append({
                    "goalie" : goalie,
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "penaltyShot" : next_shot_penalty_shot,
                    "secondaryType" : scoring_play["result"]["secondaryType"] if "secondaryType" in scoring_play["result"] else None,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
            elif player_saved:
                game_data["save_against"].append({
                    "scorer" : scorer,
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "penaltyShot" : next_shot_penalty_shot,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })

            if is_player_on_ice(game_data["shift_data"], team_on_ice, opp_on_ice, scoring_play["about"]["period"], period_time, player_id, True):
                if scoring_play["team"]["id"] == game_data["team_id"]:
                    game_data["all_team_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["all_team_shots_og"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["all_team_unblocked_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                else:
                    game_data["all_opp_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["all_opp_shots_og"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["all_opp_unblocked_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
            if scoring_play["team"]["id"] == game_data["team_id"]:
                game_data["of_all_team_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
                game_data["of_all_team_shots_og"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
                game_data["of_all_team_unblocked_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
            else:
                game_data["of_all_opp_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
                game_data["of_all_opp_shots_og"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
                game_data["of_all_opp_unblocked_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })

            next_shot_penalty_shot = False
        elif scoring_play["result"]["event"] == "Missed Shot":
            player_shot = False
            for score_player in scoring_play["players"]:
                if score_player["playerType"] == "Shooter":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_shot = True
            
            if player_shot:
                game_data["missed_shot"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "penaltyShot" : next_shot_penalty_shot,
                    "description" : scoring_play["result"]["description"] if "description" in scoring_play["result"] else "",
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })

            if is_player_on_ice(game_data["shift_data"], team_on_ice, opp_on_ice, scoring_play["about"]["period"], period_time, player_id, True):
                if scoring_play["team"]["id"] == game_data["team_id"]:
                    game_data["all_team_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["all_team_unblocked_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                else:
                    game_data["all_opp_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                    game_data["all_opp_unblocked_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
            if scoring_play["team"]["id"] == game_data["team_id"]:
                game_data["of_all_team_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
                game_data["of_all_team_unblocked_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
            else:
                game_data["of_all_opp_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
                game_data["of_all_opp_unblocked_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })

            next_shot_penalty_shot = False
        elif scoring_play["result"]["event"] == "Penalty":
            pen_obj = {
                "penalty_minutes" : scoring_play["result"]["penaltyMinutes"],
                "penalty_minutes_to_use" : scoring_play["result"]["penaltyMinutes"],
                "period" : scoring_play["about"]["period"],
                "x_coord" : x_coord,
                "period" : scoring_play["about"]["period"],
                "periodToUse" : scoring_play["about"]["period"],
                "y_coord" : y_coord,
                "periodTime" : period_time,
                "periodTimeToUse" : period_time,
                "periodTimeRemaining" : period_time_rem,
                "zone" : zone,
                "event_time": event_time,
                "team_on_ice" : team_on_ice,
                "opp_on_ice" : opp_on_ice,
                "strength" : strength,
                "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                "team" : scoring_play["team"]["id"],
                "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
            }
            player_penalty = False
            player_penalty_drawn = False
            penalty_against = None
            penalty_for = None
            penalty_served = None
            for score_player in scoring_play["players"]:
                if score_player["playerType"] == "PenaltyOn":
                    penalty_against = score_player["player"]["id"]
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_penalty = True
                elif score_player["playerType"] == "DrewBy":
                    penalty_for = score_player["player"]["id"]
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_penalty_drawn = True
                elif score_player["playerType"] == "ServedBy":
                    penalty_served = score_player["player"]["id"]
            
            pen_obj["penalty_for"] = penalty_for
            pen_obj["penalty_against"] = penalty_against
            pen_obj["penalty_served"] = penalty_served

            if "penaltySeverity" in scoring_play["result"] and scoring_play["result"]["penaltySeverity"] == "Penalty Shot":
                next_shot_penalty_shot = True
            
            has_pen_sev = False
            if "penaltySeverity" in scoring_play["result"]:
                has_pen_sev = True
                if "penaltySeverity" in scoring_play["result"] and scoring_play["result"]["penaltySeverity"] != "Penalty Shot":
                    pen_obj["penalty_severity"] = scoring_play["result"]["penaltySeverity"] if scoring_play["result"]["penaltySeverity"] != "Game Misconduct" else "GameMisconduct"
                    if pen_obj["penalty_severity"] == "Bench Minor":
                        pen_obj["penalty_severity"] = "Minor"
            if "secondaryType" in scoring_play["result"]:
                pen_obj["secondary_type"] = scoring_play["result"]["secondaryType"]
                if not has_pen_sev:
                    pen_sev_string = scoring_play["result"]["secondaryType"] if scoring_play["result"]["secondaryType"] != "Game Misconduct" else "GameMisconduct"
                    if pen_sev_string == "Fighting":
                        pen_obj["secondary_type"] = "Fighting"
                        pen_sev_string = "Major"
                    elif pen_sev_string == "Bench Minor":
                        pen_sev_string = "Minor"
                    if pen_sev_string in headers[player_type["da_type"]["type"]]:
                        pen_obj["penalty_severity"] = pen_sev_string
                    else:
                        pen_obj["penalty_severity"] = "Minor"
                
                if player_penalty or player_penalty_drawn:
                    if not (len(scoring_play["players"]) == 1 and "description" in scoring_play["result"] and " served by " in scoring_play["result"]["description"]):
                        pen_obj["player_penalty"] = player_penalty
                        if "secondary_type" in pen_obj and pen_obj["secondary_type"] == "Fighting" and player_penalty:
                            game_data["Fight"] += 1
                        game_data["penalty"].append(pen_obj)
            if not ("penalty_severity" in pen_obj and (pen_obj["penalty_severity"] == "Misconduct" or pen_obj["penalty_severity"] == "GameMisconduct")) and not ("secondary_type" in pen_obj and pen_obj["secondary_type"] == "Fighting"):
                game_data["all_penalty"].append(pen_obj)
        elif scoring_play["result"]["event"] == "Hit":
            player_hit = False
            hit_against = None
            for score_player in scoring_play["players"]:
                if score_player["playerType"] == "Hitter":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_hit = True
                elif score_player["playerType"] == "Hittee":
                    hit_against = score_player["player"]["id"]
            
            if player_hit:
                game_data["hit"].append({
                    "hit_against" : hit_against,
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
        elif scoring_play["result"]["event"] == "Blocked Shot":
            player_block = False
            player_shot = False
            block_against = None
            for score_player in scoring_play["players"]:
                if score_player["playerType"] == "Blocker":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_block = True
                elif score_player["playerType"] == "Shooter":
                    block_against = score_player["player"]["id"]
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_shot = True
            
            if player_block:
                game_data["block"].append({
                    "block_against" : block_against,
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
            elif player_shot:
                game_data["blocked_shot"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "penaltyShot" : next_shot_penalty_shot,
                    "description" : scoring_play["result"]["description"] if "description" in scoring_play["result"] else "",
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })

            if is_player_on_ice(game_data["shift_data"], team_on_ice, opp_on_ice, scoring_play["about"]["period"], period_time, player_id, True):
                if scoring_play["team"]["id"] != game_data["team_id"]:
                    game_data["all_team_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
                else:
                    game_data["all_opp_shots"].append({
                        "period" : scoring_play["about"]["period"],
                        "x_coord" : x_coord,
                        "y_coord" : y_coord,
                        "periodTime" : period_time,
                        "periodTimeRemaining" : period_time_rem,
                        "zone" : zone,
                        "event_time": event_time,
                        "team_on_ice" : team_on_ice,
                        "opp_on_ice" : opp_on_ice,
                        "strength" : strength,
                        "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                        "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                        "firstGoal" : first_goal,
                        "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                    })
            if scoring_play["team"]["id"] != game_data["team_id"]:
                game_data["of_all_team_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
            else:
                game_data["of_all_opp_shots"].append({
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "firstGoal" : first_goal,
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - (scoring_play["about"]["goals"][game_data["opp_str"]])
                })
            next_shot_penalty_shot = False
        elif scoring_play["result"]["event"] == "Faceoff":
            player_faceoff_winner = False
            player_faceoff_loser = False
            faceoff_against = None
            for score_player in scoring_play["players"]:
                if score_player["playerType"] == "Winner":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_faceoff_winner = True
                    else:
                        faceoff_against = score_player["player"]["id"]
                elif score_player["playerType"] == "Loser":
                    if score_player["player"]["id"] == player_id or score_player["player"]["id"] == player_data["id"]:
                        player_faceoff_loser = True
                    else:
                        faceoff_against = score_player["player"]["id"]

            if player_faceoff_winner:
                game_data["faceoff"].append({
                    "winner" : True,
                    "faceoff_against" : faceoff_against,
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
            elif player_faceoff_loser:
                game_data["faceoff"].append({
                    "winner" : False,
                    "faceoff_against" : faceoff_against,
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
            
            if is_player_on_ice(game_data["shift_data"], team_on_ice, opp_on_ice, scoring_play["about"]["period"], period_time, player_id, True, is_faceoff=True):
                game_data["all_faceoffs"].append({
                    "winner" : True,
                    "faceoff_against" : faceoff_against,
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
        elif scoring_play["result"]["event"] == "Takeaway" or scoring_play["result"]["event"] == "Giveaway":
            if scoring_play["players"][0]["player"]["id"] == player_id:
                game_data["takeaway"].append({
                    "is_takeaway" : scoring_play["result"]["event"] == "Takeaway",
                    "period" : scoring_play["about"]["period"],
                    "x_coord" : x_coord,
                    "y_coord" : y_coord,
                    "periodTime" : period_time,
                    "periodTimeRemaining" : period_time_rem,
                    "zone" : zone,
                    "event_time": event_time,
                    "team_on_ice" : team_on_ice,
                    "opp_on_ice" : opp_on_ice,
                    "strength" : strength,
                    "teamGoals" : scoring_play["about"]["goals"][game_data["team_str"]],
                    "oppGoals" : scoring_play["about"]["goals"][game_data["opp_str"]],
                    "goalMargin" : scoring_play["about"]["goals"][game_data["team_str"]] - scoring_play["about"]["goals"][game_data["opp_str"]]
                })
    
    return game_data, row_data, missing_games
            
def setup_game_data(player_data, row_data, player_id, player_type, time_frame):
    game_data = {
        "Date" : row_data["Date"],
        "team_skaters" : set(),
        "team_goalies" : set(),
        "team_players" : set(),
        "opp_skaters" : set(),
        "opp_goalies" : set(),
        "opp_players" : set(),
        "team_numbers" : {},
        "opp_numbers" : {},
        "team_names" : {},
        "opp_names" : {},
        "goal" : [],
        "assist" : [],
        "goal_against" : [],
        "save_against" : [],
        "shot" : [],
        "missed_shot" : [],
        "blocked_shot" : [],
        "hit" : [],
        "block" : [],
        "penalty" : [],
        "all_penalty" : [],
        "faceoff" : [],
        "all_faceoffs" : [],
        "periods" : [],
        "takeaway" : [],
        "all_team_goals" : [],
        "all_team_shots" : [],
        "all_team_shots_og" : [],
        "all_team_unblocked_shots" : [],
        "all_opp_goals" : [],
        "all_opp_shots" : [],
        "all_opp_shots_og" : [],
        "all_opp_unblocked_shots" : [],
        "of_all_team_goals" : [],
        "of_all_team_shots" : [],
        "of_all_team_shots_og" : [],
        "of_all_team_unblocked_shots" : [],
        "of_all_opp_goals" : [],
        "of_all_opp_shots" : [],
        "of_all_opp_shots_og" : [],
        "of_all_opp_unblocked_shots" : [],
        "is_playoffs" : row_data["is_playoffs"],
        "Fight" : 0,
        "FirstStar" : 0,
        "SecondStar" : 0,
        "ThirdStar" : 0,
        "is_playoffs" : row_data["is_playoffs"],
        "missing_data" : False,
        "missing_toi" : False,
        "is_shootout" : False,
        "period_length" : {},
        "shift_data" : {}
    }

    missing_games = False
    if row_data["Year"] < 2000 and has_shift_quals(time_frame["qualifiers"]):
        game_data["missing_data"] = True
        return game_data, missing_games, None
    
    try:
        request = urllib.request.Request("https://statsapi.web.nhl.com/api/v1/game/" + str(row_data["NHLGameLink"]) + "/feed/live", headers=request_headers)
        sub_data = url_request_json(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            missing_games = True
            game_data["missing_data"] = True
            return game_data, missing_games, None
        else:
            raise

    team_str = "home" if row_data["Location"] else "away"
    opp_str = "away" if row_data["Location"] else "home"
    game_data["team_str"] = team_str
    game_data["opp_str"] = opp_str
    team_id = sub_data["gameData"]["teams"][game_data["team_str"]]["id"]
    opp_id = sub_data["gameData"]["teams"][game_data["opp_str"]]["id"]
    game_data["team_id"] = team_id
    game_data["opp_id"] = opp_id

    game_data["team_abbr"] = sub_data["gameData"]["teams"][game_data["team_str"]]["abbreviation"]
    game_data["opp_abbr"] = sub_data["gameData"]["teams"][game_data["opp_str"]]["abbreviation"]
    game_data["team_loc"] = sub_data["gameData"]["teams"][game_data["team_str"]]["locationName"]
    game_data["opp_loc"] = sub_data["gameData"]["teams"][game_data["opp_str"]]["locationName"]
    game_data["team_goals"] = sub_data["liveData"]["linescore"]["teams"][game_data["team_str"]]["goals"]
    game_data["opp_goals"] = sub_data["liveData"]["linescore"]["teams"][game_data["opp_str"]]["goals"]
    game_data["is_shootout"] = "hasShootout" in sub_data["liveData"]["linescore"] and sub_data["liveData"]["linescore"]["hasShootout"]

    for period in sub_data["liveData"]["linescore"]["periods"]:
        game_data["periods"].append(period["num"])

    for player in sub_data["liveData"]["boxscore"]["teams"][game_data["team_str"]]["players"]:
        player = sub_data["liveData"]["boxscore"]["teams"][game_data["team_str"]]["players"][player]
        if player["position"]["code"] == "G":
            game_data["team_goalies"].add(player["person"]["id"])
        else:
            game_data["team_skaters"].add(player["person"]["id"])
        
        game_data["team_players"].add(player["person"]["id"])
        if "jerseyNumber" in player and player["jerseyNumber"] and player["jerseyNumber"].isdigit():
            stat_str = "goalieStats" if player["position"]["code"] == "G" else "skaterStats"
            if stat_str in player["stats"] or not player["jerseyNumber"] in game_data["team_numbers"]:
                game_data["team_numbers"][player["jerseyNumber"]] = player["person"]["id"]

            if player_data["nhl_id"] == player["person"]["id"]:
                game_data["Number"] = int(player["jerseyNumber"])
    
    for player in sub_data["liveData"]["boxscore"]["teams"][game_data["opp_str"]]["players"]:
        player = sub_data["liveData"]["boxscore"]["teams"][game_data["opp_str"]]["players"][player]
        if player["position"]["code"] == "G":
            game_data["opp_goalies"].add(player["person"]["id"])
        else:
            game_data["opp_skaters"].add(player["person"]["id"])
        
        game_data["opp_players"].add(player["person"]["id"])
        if "jerseyNumber" in player and player["jerseyNumber"] and player["jerseyNumber"].isdigit():
            stat_str = "goalieStats" if player["position"]["code"] == "G" else "skaterStats"
            if stat_str in player["stats"] or not player["jerseyNumber"] in game_data["opp_numbers"]:
                game_data["opp_numbers"][player["jerseyNumber"]] = player["person"]["id"]
            
            if player_data["nhl_id"] == player["person"]["id"]:
                game_data["Number"] = int(player["jerseyNumber"])
    
    for player in sub_data["gameData"]["players"]:
        string_to_use = None
        is_team = None
        for sub_player in sub_data["liveData"]["boxscore"]["teams"][game_data["team_str"]]["players"]:
            if sub_player == player:
                string_to_use = team_str
                is_team = True
                break
        if not string_to_use:
            for sub_player in sub_data["liveData"]["boxscore"]["teams"][game_data["opp_str"]]["players"]:
                if sub_player == player:
                    string_to_use = opp_str
                    is_team = False
                    break
        sub_player = sub_data["gameData"]["players"][player]
        player = sub_data["liveData"]["boxscore"]["teams"][string_to_use]["players"][player]
        if player["position"]["code"] == "G":
            stat_str = "goalieStats"
            if stat_str not in player["stats"]:
                continue
        else:
            stat_str = "skaterStats"
            if stat_str not in player["stats"]:
                continue
        
        name_str = sub_player["firstName"][0].upper() + ". " + sub_player["lastName"].upper()
        if is_team:
            game_data["team_names"][name_str] = player["person"]["id"]
        else:
            game_data["opp_names"][name_str] = player["person"]["id"]
    
    game_data["team_numbers"][""] = None
    game_data["opp_numbers"][""] = None

    if "decisions" in sub_data["liveData"]:
        if "firstStar" in sub_data["liveData"]["decisions"]:
            if player_id == sub_data["liveData"]["decisions"]["firstStar"]["id"]:
                game_data["FirstStar"] = 1
        if "secondStar" in sub_data["liveData"]["decisions"]:
            if player_id == sub_data["liveData"]["decisions"]["secondStar"]["id"]:
                game_data["SecondStar"] = 1
        if "thirdStar" in sub_data["liveData"]["decisions"]:
            if player_id == sub_data["liveData"]["decisions"]["thirdStar"]["id"]:
                game_data["ThirdStar"] = 1

    return game_data, missing_games, sub_data

def setup_href_game_data(player_data, row_data, player_id, player_type, time_frame):
    game_data = {
        "Date" : row_data["Date"],
        "team_skaters" : set(),
        "team_goalies" : set(),
        "team_players" : set(),
        "opp_skaters" : set(),
        "opp_goalies" : set(),
        "opp_players" : set(),
        "team_numbers" : {},
        "opp_numbers" : {},
        "team_names" : {},
        "opp_names" : {},
        "goal" : [],
        "assist" : [],
        "goal_against" : [],
        "save_against" : [],
        "shot" : [],
        "missed_shot" : [],
        "blocked_shot" : [],
        "hit" : [],
        "block" : [],
        "penalty" : [],
        "all_penalty" : [],
        "faceoff" : [],
        "all_faceoffs" : [],
        "periods" : [],
        "takeaway" : [],
        "all_team_goals" : [],
        "all_team_shots" : [],
        "all_team_shots_og" : [],
        "all_team_unblocked_shots" : [],
        "all_opp_goals" : [],
        "all_opp_shots" : [],
        "all_opp_shots_og" : [],
        "all_opp_unblocked_shots" : [],
        "of_all_team_goals" : [],
        "of_all_team_shots" : [],
        "of_all_team_shots_og" : [],
        "of_all_team_unblocked_shots" : [],
        "of_all_opp_goals" : [],
        "of_all_opp_shots" : [],
        "of_all_opp_shots_og" : [],
        "of_all_opp_unblocked_shots" : [],
        "is_playoffs" : row_data["is_playoffs"],
        "Fight" : 0,
        "FirstStar" : 0,
        "SecondStar" : 0,
        "ThirdStar" : 0,
        "Number" : None,
        "is_playoffs" : row_data["is_playoffs"],
        "missing_data" : False,
        "missing_toi" : False,
        "is_shootout" : False,
        "period_length" : {},
        "shift_data" : {}
    }

    missing_games = False
    if row_data["Year"] < 2000 and has_shift_quals(time_frame["qualifiers"]):
        game_data["missing_data"] = True
        return game_data, missing_games, None
    
    try:
        request = urllib.request.Request("https://www.hockey-reference.com" + row_data["GameLink"], headers=request_headers)
        response, player_page_xml = url_request_lxml(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            game_data["missing_data"] = True
            return game_data, missing_games, None
        else:
            raise

    if not player_page_xml.getroot():
        return []

    game_data["team_str"] = "home" if row_data["Location"] else "away"
    game_data["opp_str"] = "away" if row_data["Location"] else "home"

    for parsed_team_name in team_name_info:
        for abbr in team_name_info[parsed_team_name]:
            if abbr == row_data["Tm"] and row_data["Year"] in team_name_info[parsed_team_name][abbr]:
                game_data["team_id"] = team_ids[parsed_team_name]
                break
                
    if "team_id" not in row_data:
        for parsed_team_name in team_name_info:
            for abbr in team_name_info[parsed_team_name]:
                if abbr == row_data["Tm"]:
                    game_data["team_id"] = team_ids[parsed_team_name]
                    break
    
    for parsed_team_name in team_name_info:
        for abbr in team_name_info[parsed_team_name]:
            if abbr == row_data["Opponent"].upper() and row_data["Year"] in team_name_info[parsed_team_name][abbr]:
                game_data["opp_id"] = team_ids[parsed_team_name]
                break
                
    if "opp_id" not in row_data:
        for parsed_team_name in team_name_info:
            for abbr in team_name_info[parsed_team_name]:
                if abbr == row_data["Opponent"].upper():
                    game_data["opp_id"] = team_ids[parsed_team_name]
                    break

    scorebox = player_page_xml.xpath("//div[@class = 'scorebox']")[0]
    scor_divs = scorebox.xpath("./div")
    home_team_div = scor_divs[0]
    away_team_div = scor_divs[1]

    home_team_divs = home_team_div.xpath("./div")
    away_team_divs = away_team_div.xpath("./div")

    home_team_score = int(str(home_team_divs[1].text_content()))
    away_team_score = int(str(away_team_divs[1].text_content()))

    if row_data["Location"]:
        game_data["team_goals"] = home_team_score
        game_data["opp_goals"] = away_team_score
    else:
        game_data["team_goals"] = away_team_score
        game_data["opp_goals"] = home_team_score

    game_data["is_shootout"] = False

    score_table = player_page_xml.xpath("//table[@id = 'scoring']")
    if score_table:
        score_table = score_table[0]
    else:
        score_table = None

    last_period = 3
    for index, row in enumerate(score_table.xpath(".//tr")):
        if row.get("class") and "thead" in row.get("class"):
            row_text = str(row.text_content()).strip()
            if row_text == "Shootout":
                period = 5
                game_data["is_shootout"] = True
            else:
                period = int(ordinal_to_number(row_text.split()[0]))
                if "OT" in row_text:
                    period += 3

            if period > last_period:
                last_period = period
    
    for period in range(1, last_period + 1):
        game_data["periods"].append(period)

    return game_data, missing_games, None

def is_player_on_ice(shift_data, team_on_ice, opp_on_ice, period, period_time, player_id, is_team, is_faceoff=False):
    if is_team and team_on_ice:
        return player_id in team_on_ice
    elif not is_team and opp_on_ice:
        return player_id in opp_on_ice
        
    team_str = "team" if is_team else "opp"
    if not shift_data:
        return None
    if player_id not in shift_data[team_str] or period not in shift_data[team_str][player_id]:
        return False
    for shift_event in shift_data[team_str][player_id][period]:
        if is_faceoff:
            if period_time >= shift_event["time_start"] - 1 and period_time <= shift_event["time_end"] - 1:
                return True
        else:
            if period_time >= shift_event["time_start"] and period_time <= shift_event["time_end"]:
                return True
    return False

def start_time_to_str(time_str):
    time_split = time_str.split(":")
    if len(time_split) > 1:
        minutes = int(time_split[0])
        seconds = int(time_split[1])
        return (minutes * 60) + seconds
    else:
        return int(time_split[0]) * 60

def get_shift_data(game_id, player_team_id, missing_games):
    request = urllib.request.Request(nhl_shifts_report_format.format(game_id), headers=request_headers)
    sub_data = url_request_json(request)
    if sub_data["total"] == 1000:
        missing_games = True
    shift_infos = sub_data["data"]
    shift_infos = sorted(shift_infos, key = lambda shift_info: (shift_info["period"], start_time_to_str(shift_info["startTime"])))
    shift_data = {}
    for shift_info in shift_infos:
        player_id = shift_info["playerId"]
        period = shift_info["period"]
        time_start_str = shift_info["startTime"]
        time_end_str = shift_info["endTime"]
        if not time_end_str or shift_info["eventDescription"]:
            continue
        team_id = shift_info["teamId"]

        time_start = start_time_to_str(time_start_str)
        time_end = start_time_to_str(time_end_str)

        if time_end - time_start == 0:
            continue
        time_start += 1

        team_str = "team" if team_id == player_team_id else "opp"
        
        if team_str not in shift_data:
            shift_data[team_str] = {}
        if player_id not in shift_data[team_str]:
            shift_data[team_str][player_id] = {}
        if period not in shift_data[team_str][player_id]:
            shift_data[team_str][player_id][period] = []

        has_existing_match = False
        for shift_event in shift_data[team_str][player_id][period]:
            if shift_event["time_start"] == time_start:
                has_existing_match = True
                break
        if has_existing_match:
            continue

        shift_data[team_str][player_id][period].append({
            "time_start" : time_start,
            "time_end" : time_end,
            "period" : period
        })

    return shift_data, missing_games

def get_html_shift_data(og_game_id, is_home, game_data, player_data):
    num_events = 0
    shift_data = {}
    for team_str in ("H", "V"):
        try:
            game_id = str(og_game_id)
            sub_year = int(game_id[:4])
            year_str = str(sub_year)
            year_str += str(sub_year + 1)
            game_id = game_id[4:]
            request = urllib.request.Request(nhl_html_shifts_report_format.format(year_str, team_str, game_id), headers=request_headers)
            response, player_page_xml = url_request_lxml(request)
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return {}
            else:
                raise
        
        if not player_page_xml.getroot():
            return {}

        period_length_obj = copy.deepcopy(game_data["period_length"])
            
        game_info_table = player_page_xml.xpath("body//table[@id = 'GameInfo']")
        in_progress_period = None
        if game_info_table:
            game_info_table = game_info_table[0]
            game_info_rows = game_info_table.xpath(".//tr")
            if game_info_rows:
                period_info_row = str(game_info_rows[len(game_info_rows) - 1].text_content()).strip()
                period_match = re.match(r"Period (\d) \((\S+) Remaining\)", period_info_row)
                if period_match:
                    period_length_obj[int(period_match.group(1))] -= start_time_to_str(period_match.group(2).strip())
                    in_progress_period = int(period_match.group(1))
                else:
                    period_match = re.match(r"End of Period (\d)", period_info_row)
                    if period_match:
                        in_progress_period = int(period_match.group(1))

        main_table = player_page_xml.xpath("body//table")
        sub_tables = main_table[0].xpath(".//table")
        is_team = (team_str == "H" and is_home) or (team_str == "V" and not is_home)
        current_player_id = None
        table = sub_tables[8]
        for row in table.xpath(".//tr"):
            columns = row.xpath(".//td")
            if len(columns) == 1:
                player_text = str(columns[0].text_content()).strip()
                if player_text:
                    player_number = player_text.split()[0].strip()
                    if is_team:
                        if player_number not in game_data["team_numbers"] and player_number in game_data["opp_numbers"]:
                            current_player_id = game_data["opp_numbers"].get(player_number, -1)
                            is_team = False
                        else:
                            current_player_id = game_data["team_numbers"].get(player_number, -1)
                    else:
                        if player_number not in game_data["opp_numbers"] and player_number in game_data["team_numbers"]:
                            current_player_id = game_data["team_numbers"].get(player_number, -1)
                            is_team = True
                        else:
                            current_player_id = game_data["opp_numbers"].get(player_number, -1)
            elif len(columns) == 6:
                if row.get("class") and ("evenColor" in row.get("class") or "oddColor" in row.get("class")) and current_player_id:
                    num_events += 1
                    period_str = str(columns[1].text).strip()
                    if period_str == "OT":
                        period = 4
                    elif period_str == "SO":
                        period = 5
                    else:
                        period = int(period_str)
                    time_start_str = str(columns[2].text_content()).strip()
                    time_end_str = str(columns[3].text_content()).strip()
                    duration = str(columns[4].text_content()).strip()
                    if not time_end_str:
                        if duration:
                            time_end_str == "0:00"
                        else:
                            continue
                
                    time_start = start_time_to_str(time_start_str.split("/")[0].strip())
                    time_end = start_time_to_str(time_end_str.split("/")[0].strip())
                    duration = start_time_to_str(duration)
                    if not time_end and duration:
                        if time_end - time_start == 0:
                            time_end = time_start + duration
                        else:
                            continue
                    if time_start > time_end:
                        if period_length_obj[period] - time_start <= 180 and duration >= 1800 and period + 1 in period_length_obj:
                            team_str = "team" if is_team else "opp"
                            if time_end:
                                crazy_period = period + 1
                                if team_str not in shift_data:
                                    shift_data[team_str] = {}
                                if current_player_id not in shift_data[team_str]:
                                    shift_data[team_str][current_player_id] = {}
                                if crazy_period not in shift_data[team_str][current_player_id]:
                                    shift_data[team_str][current_player_id][crazy_period] = []

                                shift_data[team_str][current_player_id][crazy_period].append({
                                    "time_start" : 1,
                                    "time_end" : time_end,
                                    "period" : crazy_period
                                })
                            time_end = period_length_obj[period]
                        else:
                            continue

                    if time_end - time_start == 0:
                        continue
                    time_start += 1

                    team_str = "team" if is_team else "opp"

                    if team_str not in shift_data:
                        shift_data[team_str] = {}
                    if current_player_id not in shift_data[team_str]:
                        shift_data[team_str][current_player_id] = {}
                    if period not in shift_data[team_str][current_player_id]:
                        shift_data[team_str][current_player_id][period] = []

                    has_existing_match = False
                    for shift_event in shift_data[team_str][current_player_id][period]:
                        if shift_event["time_start"] == time_start:
                            has_existing_match = True
                            break
                    if has_existing_match:
                        continue

                    shift_data[team_str][current_player_id][period].append({
                        "time_start" : time_start,
                        "time_end" : time_end,
                        "period" : period
                    })
            elif len(columns) == 7:
                if period_length_obj and row.get("class") and ("evenColor" in row.get("class") or "oddColor" in row.get("class")) and current_player_id:
                    period_str = str(columns[0].text).strip()
                    if period_str == "TOT":
                        period = 0
                    elif period_str == "OT":
                        period = 4
                    elif period_str == "SO":
                        period = 5
                    else:
                        period = int(period_str)
                    time_duration = str(columns[3].text_content()).strip()
                    if not time_duration:
                        continue
                    time_duration = start_time_to_str(time_duration)
                    team_str = "team" if is_team else "opp"
                    if period:
                        if time_duration == period_length_obj[period]:
                            if team_str not in shift_data:
                                shift_data[team_str] = {}
                            if current_player_id not in shift_data[team_str]:
                                shift_data[team_str][current_player_id] = {}

                            shift_data[team_str][current_player_id][period] = [{
                                "time_start" : 1,
                                "time_end" : period_length_obj[period],
                                "period" : period
                            }]
                        elif current_player_id in shift_data[team_str] and period in shift_data[team_str][current_player_id]:
                            if period == in_progress_period:
                                total_on_ice = sum(shift["time_end"] - shift["time_start"] + 1 for shift in shift_data[team_str][current_player_id][period])
                                if total_on_ice < time_duration:
                                    start_time = period_length_obj[period] - (time_duration - total_on_ice) + 1
                                    max_last_time = max(shift["time_end"] for shift in shift_data[team_str][current_player_id][period])
                                    if start_time > max_last_time:
                                        shift_data[team_str][current_player_id][period].append({
                                            "time_start" : start_time,
                                            "time_end" : period_length_obj[period],
                                            "period" : period
                                        })
                        else:
                            if period == in_progress_period:
                                if team_str not in shift_data:
                                    shift_data[team_str] = {}
                                if current_player_id not in shift_data[team_str]:
                                    shift_data[team_str][current_player_id] = {}

                                shift_data[team_str][current_player_id][period] = [{
                                    "time_start" : 1,
                                    "time_end" : time_duration,
                                    "period" : period
                                }]
                    else:
                        total_time_duration = sum(period_length_obj[period] for period in period_length_obj)
                        if time_duration == total_time_duration:
                            for period in period_length_obj:
                                if team_str not in shift_data:
                                    shift_data[team_str] = {}
                                if current_player_id not in shift_data[team_str]:
                                    shift_data[team_str][current_player_id] = {}
                                shift_data[team_str][current_player_id][period] = [{
                                    "time_start" : 1,
                                    "time_end" : period_length_obj[period],
                                    "period" : period
                                }]

    return shift_data

def get_html_play_data(scoring_plays, player_data, og_game_id, is_home, game_data, is_final, row_year):
    has_initial_plays =  bool(scoring_plays)
    try:
        game_id = str(og_game_id)
        sub_year = int(game_id[:4])
        year_str = str(sub_year)
        year_str += str(sub_year + 1)
        game_id = game_id[4:]
        request = urllib.request.Request(nhl_html_plays_report_format.format(year_str, game_id), headers=request_headers)
        response, player_page_xml = url_request_lxml(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return []
        else:
            raise

    if not player_page_xml.getroot():
        return []

    tables = player_page_xml.xpath("body/table")
    if not tables:
        tables = player_page_xml.xpath("body/xmlfile/table")
    if not tables:
        tables = player_page_xml.xpath("body/div/table")
    home_goals = 0
    away_goals = 0
    home_team_abbr = None
    away_team_abbr = None

    game_winner = None
    game_winning_team = None
    team_goal = 1
    if is_final:
        team_score = game_data["team_goals"]
        opp_score = game_data["opp_goals"]
        if team_score != opp_score:
            if team_score > opp_score:
                game_winning_team = game_data["team_id"]
                game_winner = opp_score + 1
            else:
                game_winning_team = game_data["opp_id"]
                game_winner = team_score + 1

    for table in tables:
        for index, row in enumerate(table.xpath("tr")):
            columns = row.xpath("td")
            if index == 2:
                away_team_abbr = str(columns[6].text_content()).replace("On Ice", "")
                home_team_abbr = str(columns[7].text_content()).replace("On Ice", "")
                
            if row.get("class") and ("evenColor" in row.get("class") or "oddColor" in row.get("class")):
                if len(columns) == 8:        
                    event_type = str(columns[4].text).strip()

                    real_event_type = None
                    if event_type == "GOAL":
                        real_event_type = "Goal"
                    if event_type == "SHOT":
                        real_event_type = "Shot"
                    elif event_type == "MISS":
                        real_event_type = "Missed Shot"
                    elif event_type == "BLOCK":
                        real_event_type = "Blocked Shot"
                    elif event_type == "PENL":
                        real_event_type = "Penalty"
                    elif event_type == "FAC":
                        real_event_type = "Faceoff"
                    elif event_type == "TAKE":
                        real_event_type = "Takeaway"
                    elif event_type == "GIVE":
                        real_event_type = "Giveaway"
                    elif event_type == "HIT":
                        real_event_type = "Hit"
                    
                    if real_event_type:
                        period = int(str(columns[1].text_content()).strip())
                        strength = str(columns[2].text_content()).strip()
                        time_start_str = str(columns[3].text).strip()    
                        description_string = str(columns[5].text_content()).strip()
                        description_string.replace(" on breakaway(0 min),", "(0 min),")

                        if strength == "EV":
                            strength = "EVEN"
                        elif strength == "PP":
                            strength = "PPG"
                        else:
                            strength = "SHG"

                        team_id = None
                        if len(description_string) >= 4:
                            if description_string[0] == home_team_abbr[0] and description_string[1] == home_team_abbr[1] and description_string[2] == home_team_abbr[2]:
                                if is_home:
                                    is_team = True
                                    is_home_team = True
                                    team_id = game_data["team_id"]
                                else:
                                    is_team = False
                                    team_id = game_data["opp_id"]
                                is_home_team = True
                            elif description_string[0] == away_team_abbr[0] and description_string[1] == away_team_abbr[1] and description_string[2] == away_team_abbr[2]:
                                if is_home:
                                    is_team = False
                                    team_id = game_data["opp_id"]
                                else:
                                    is_team = True
                                    team_id = game_data["team_id"]
                                is_home_team = False

                        zone = None
                        if "Neu. Zone" in description_string:
                            zone = "NZ"
                        elif "Off. Zone" in description_string:
                            zone = "OZ"
                        elif "Def. Zone" in description_string:
                            zone = "DZ"

                        player_numbers = get_player_numbers(description_string)

                        scoring_play = {
                            "players" : [],
                            "about" : {
                                "period" : period,
                                "periodTime" : time_start_str,
                                "goals" : {
                                    "home" : home_goals,
                                    "away" : away_goals
                                }
                            },
                            "result" : {
                                "event" : real_event_type,
                                "strength" : {
                                    "code" : strength
                                }
                            },
                            "team" : {
                                "id" : team_id
                            },
                            "zone" : zone
                        }

                        if real_event_type == "Goal":
                            if is_team:
                                if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                                    scorer = game_data["opp_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    scorer = game_data["team_numbers"].get(player_numbers[0], -1)
                            else:
                                if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                                    scorer = game_data["team_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    scorer = game_data["opp_numbers"].get(player_numbers[0], -1)

                            if is_home_team:
                                team_on_ice = get_on_ice(columns[7].xpath("table"), game_data["team_numbers"] if is_team else game_data["opp_numbers"], game_data["team_goalies"] if is_team else game_data["opp_goalies"])
                                opp_on_ice = get_on_ice(columns[6].xpath("table"), game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])
                                home_goals += 1
                            else:
                                team_on_ice = get_on_ice(columns[6].xpath("table"), game_data["team_numbers"] if is_team else game_data["opp_numbers"], game_data["team_goalies"] if is_team else game_data["opp_goalies"])
                                opp_on_ice = get_on_ice(columns[7].xpath("table"), game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])
                                away_goals += 1
                            
                            scoring_play["about"]["goals"]["home"] = home_goals
                            scoring_play["about"]["goals"]["away"] = away_goals

                            scoring_play["team_on_ice"] = []
                            for pos in team_on_ice:
                                for sub_player in team_on_ice[pos]:
                                    if is_team:
                                        sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                                    else:
                                        sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                                    scoring_play["team_on_ice"].append(sub_player_id)
                            scoring_play["opp_on_ice"] = []
                            for pos in opp_on_ice:
                                for sub_player in opp_on_ice[pos]:
                                    if is_team:
                                        sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                                    else:
                                        sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                                    scoring_play["opp_on_ice"].append(sub_player_id)

                            if " Wrist," in description_string:
                                scoring_play["result"]["secondaryType"] = "Wrist Shot"
                            elif " Deflected," in description_string:
                                scoring_play["result"]["secondaryType"] = "Deflected"
                            elif " Slap," in description_string:
                                scoring_play["result"]["secondaryType"] = "Slap Shot"
                            elif " Snap," in description_string:
                                scoring_play["result"]["secondaryType"] = "Snap Shot"
                            elif " Tip-In," in description_string:
                                scoring_play["result"]["secondaryType"] = "Tip-In"
                            elif " Backhand," in description_string:
                                scoring_play["result"]["secondaryType"] = "Backhand"
                            elif " Wrap-around," in description_string:
                                scoring_play["result"]["secondaryType"] = "Wrap-around"

                            assist_1 = None
                            assist_2 = None
                            goalie = None

                            if len(player_numbers) > 1:
                                if is_team:
                                    assist_1 = game_data["team_numbers"].get(player_numbers[1], -1)
                                else:
                                    assist_1 = game_data["opp_numbers"].get(player_numbers[1], -1)

                                if len(player_numbers) == 3:
                                    if is_team:
                                        assist_2 = game_data["team_numbers"].get(player_numbers[2], -1)
                                    else:
                                        assist_2 = game_data["opp_numbers"].get(player_numbers[2], -1)
                            
                            if opp_on_ice["G"]:
                                goalie_number = opp_on_ice["G"][0]
                                if is_team:
                                    goalie = game_data["opp_numbers"].get(goalie_number, -1)
                                else:
                                    goalie = game_data["team_numbers"].get(goalie_number, -1)
                            

                            if scorer:
                                scoring_play["players"].append({
                                    "playerType" :  "Scorer",
                                    "player" : {
                                        "id" : scorer
                                    }
                                })

                            if assist_1:
                                scoring_play["players"].append({
                                    "playerType" :  "Assist",
                                    "player" : {
                                        "id" : assist_1
                                    }
                                })
                            
                            if assist_2:
                                scoring_play["players"].append({
                                    "playerType" :  "Assist",
                                    "player" : {
                                        "id" : assist_2
                                    }
                                })
                            
                            if goalie:
                                scoring_play["players"].append({
                                    "playerType" :  "Goalie",
                                    "player" : {
                                        "id" : goalie
                                    }
                                })
                            else:
                                scoring_play["result"]["emptyNet"] = True

                            if game_winning_team == team_id:
                                if team_goal == game_winner:
                                    scoring_play["result"]["gameWinningGoal"] = True
                                team_goal += 1                                
                        elif real_event_type == "Shot":
                            if not player_numbers:
                                player_numbers.append(re.search(r"\d+", description_string).group(0))
                            if is_team:
                                if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                                    shooter = game_data["opp_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                            else:
                                if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                                    shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    shooter = game_data["opp_numbers"].get(player_numbers[0], -1)

                            if is_home_team:
                                opp_on_ice = get_on_ice(columns[6].xpath("table"), game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])
                            else:
                                opp_on_ice = get_on_ice(columns[7].xpath("table"), game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])

                            if opp_on_ice["G"]:
                                goalie_number = opp_on_ice["G"][0]
                                if is_team:
                                    goalie = game_data["opp_numbers"].get(goalie_number, -1)
                                else:
                                    goalie = game_data["team_numbers"].get(goalie_number, -1)

                            if shooter:
                                scoring_play["players"].append({
                                    "playerType" :  "Shooter",
                                    "player" : {
                                        "id" : shooter
                                    }
                                })
                            if goalie:
                                scoring_play["players"].append({
                                    "playerType" :  "Goalie",
                                    "player" : {
                                        "id" : goalie
                                    }
                                })
                        elif real_event_type == "Missed Shot":
                            if is_team:
                                if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                                    shooter = game_data["opp_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                            else:
                                if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                                    shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    shooter = game_data["opp_numbers"].get(player_numbers[0], -1)

                            if shooter:
                                scoring_play["players"].append({
                                    "playerType" :  "Shooter",
                                    "player" : {
                                        "id" : shooter
                                    }
                                })

                            if "Goalpost" in description_string or "Hit Crossbar" in description_string:
                                scoring_play["result"]["description"] = " Goalpost"
                        elif real_event_type == "Blocked Shot":
                            if is_team:
                                if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                                    shooter = game_data["opp_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                            else:
                                if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                                    shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    shooter = game_data["opp_numbers"].get(player_numbers[0], -1)
                            
                            if is_team:
                                blocker = game_data["opp_numbers"].get(player_numbers[1], -1)
                            else:
                                blocker = game_data["team_numbers"].get(player_numbers[1], -1)

                            if shooter:
                                scoring_play["players"].append({
                                    "playerType" :  "Shooter",
                                    "player" : {
                                        "id" : shooter
                                    }
                                })

                            if blocker:
                                scoring_play["players"].append({
                                    "playerType" :  "Blocker",
                                    "player" : {
                                        "id" : blocker
                                    }
                                })

                            if team_id == game_data["team_id"]:
                                scoring_play["team"]["id"] = game_data["opp_id"]
                            else:
                                scoring_play["team"]["id"] = game_data["team_id"]
                        elif real_event_type == "Hit":
                            if is_team:
                                if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                                    hitter = game_data["opp_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    hitter = game_data["team_numbers"].get(player_numbers[0], -1)
                            else:
                                if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                                    hitter = game_data["team_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    hitter = game_data["opp_numbers"].get(player_numbers[0], -1)
                            
                            if is_team:
                                hittee = game_data["opp_numbers"].get(player_numbers[1], -1)
                            else:
                                hittee = game_data["team_numbers"].get(player_numbers[1], -1)

                            if hitter:
                                scoring_play["players"].append({
                                    "playerType" :  "Hitter",
                                    "player" : {
                                        "id" : hitter
                                    }
                                })
                            if hittee:
                                scoring_play["players"].append({
                                    "playerType" :  "Hittee",
                                    "player" : {
                                        "id" : hittee
                                    }
                                })
                        elif real_event_type == "Takeaway" or real_event_type == "Giveaway":
                            if is_team:
                                if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                                    player = game_data["opp_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    player = game_data["team_numbers"].get(player_numbers[0], -1)
                            else:
                                if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                                    player = game_data["team_numbers"].get(player_numbers[0], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    player = game_data["opp_numbers"].get(player_numbers[0], -1)

                            if player:
                                scoring_play["players"].append({
                                    "playerType" :  "Player",
                                    "player" : {
                                        "id" : player
                                    }
                                })
                        elif real_event_type == "Faceoff":
                            if is_home:
                                if player_numbers[1] not in game_data["team_numbers"] and player_numbers[1] in game_data["opp_numbers"]:
                                    home_player = game_data["opp_numbers"].get(player_numbers[1], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    home_player = game_data["team_numbers"].get(player_numbers[1], -1)
                            else:
                                if player_numbers[1] not in game_data["opp_numbers"] and player_numbers[1] in game_data["team_numbers"]:
                                    home_player = game_data["team_numbers"].get(player_numbers[1], -1)
                                    is_team = not is_team
                                    is_home_team = not is_home_team
                                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                    scoring_play["team"]["id"] = team_id
                                else:
                                    home_player = game_data["opp_numbers"].get(player_numbers[1], -1)
                            
                            if not is_home:
                                away_player = game_data["team_numbers"].get(player_numbers[0], -1)
                            else:
                                away_player = game_data["opp_numbers"].get(player_numbers[0], -1)

                            winner = home_player if is_home_team else away_player
                            loser = away_player if is_home_team else home_player

                            if winner:
                                scoring_play["players"].append({
                                    "playerType" :  "Winner",
                                    "player" : {
                                        "id" : winner
                                    }
                                })
                            if loser:
                                scoring_play["players"].append({
                                    "playerType" :  "Loser",
                                    "player" : {
                                        "id" : loser
                                    }
                                })
                        elif real_event_type == "Penalty" and player_numbers and (len(player_numbers) > 1 or "Served By:" not in description_string) and re.search(r"(\S+)(?:\s+\((\S+)\))?\((\d+)\s+min\)", description_string):
                            penalty_player = None
                            if player_numbers:
                                if is_team:
                                    if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                                        penalty_player = game_data["opp_numbers"].get(player_numbers[0], -1)
                                        is_team = not is_team
                                        is_home_team = not is_home_team
                                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                        scoring_play["team"]["id"] = team_id
                                    else:
                                        penalty_player = game_data["team_numbers"].get(player_numbers[0], -1)
                                else:
                                    if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                                        penalty_player = game_data["team_numbers"].get(player_numbers[0], -1)
                                        is_team = not is_team
                                        is_home_team = not is_home_team
                                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                                        scoring_play["team"]["id"] = team_id
                                    else:
                                        penalty_player = game_data["opp_numbers"].get(player_numbers[0], -1)
                            drew_by = None
                            if len(player_numbers) > 1 and "Drawn By:" in description_string:
                                if is_team:
                                    if player_numbers[len(player_numbers) - 1] in game_data["opp_numbers"]:
                                        drew_by = game_data["opp_numbers"].get(player_numbers[len(player_numbers) - 1], -1)
                                else:
                                    if player_numbers[len(player_numbers) - 1] in game_data["team_numbers"]:
                                        drew_by = game_data["team_numbers"].get(player_numbers[len(player_numbers) - 1], -1)
                            
                            if penalty_player:
                                scoring_play["players"].append({
                                    "playerType" :  "PenaltyOn",
                                    "player" : {
                                        "id" : penalty_player
                                    }
                                })
                            
                            if drew_by:
                                scoring_play["players"].append({
                                    "playerType" :  "DrewBy",
                                    "player" : {
                                        "id" : drew_by
                                    }
                                })
                            
                            last_match = re.search(r"(\S+)(?:\s+\((\S+)\))?\((\d+)\s+min\)", description_string)
                            penalty_type = last_match.group(1)
                            pen_severity = last_match.group(2)
                            penalty_minutes = int(last_match.group(3))

                            if penalty_type.startswith("PS-"):
                                penalty_type.replace("PS-", "")
                                pen_severity = "Penalty Shot"
                            
                            if penalty_type:
                                penalty_type = re.sub(r"\(\d+ min\)", "", penalty_type).strip()

                            if penalty_type in ("Game Misconduct", "Bench Minor", "Minor", "Major", "Match", "Misconduct"):
                                pen_severity = penalty_type
                                penalty_type = None
                            
                            if pen_severity == "maj":
                                pen_severity = "Major"
                        
                            scoring_play["result"]["penaltyMinutes"] = penalty_minutes
                            if penalty_type:
                                scoring_play["result"]["secondaryType"] = penalty_type
                            if pen_severity:
                                scoring_play["result"]["penaltySeverity"] = pen_severity
                            else:
                                scoring_play["result"]["penaltySeverity"] = "Minor"

                        if is_home_team:
                            team_on_ice = get_on_ice(columns[7].xpath("table"), game_data["team_numbers"] if is_team else game_data["opp_numbers"], game_data["team_goalies"] if is_team else game_data["opp_goalies"])
                            opp_on_ice = get_on_ice(columns[6].xpath("table"), game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])
                        else:
                            team_on_ice = get_on_ice(columns[6].xpath("table"), game_data["team_numbers"] if is_team else game_data["opp_numbers"], game_data["team_goalies"] if is_team else game_data["opp_goalies"])
                            opp_on_ice = get_on_ice(columns[7].xpath("table"), game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])


                        scoring_play["team_on_ice"] = []
                        for pos in team_on_ice:
                            for sub_player in team_on_ice[pos]:
                                if is_team:
                                    sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                                else:
                                    sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                                scoring_play["team_on_ice"].append(sub_player_id)
                        scoring_play["opp_on_ice"] = []
                        for pos in opp_on_ice:
                            for sub_player in opp_on_ice[pos]:
                                if is_team:
                                    sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                                else:
                                    sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                                scoring_play["opp_on_ice"].append(sub_player_id)

                        if real_event_type == "Blocked Shot":
                            temp_array = scoring_play["opp_on_ice"]
                            scoring_play["opp_on_ice"] = scoring_play["team_on_ice"]
                            scoring_play["team_on_ice"] = temp_array

                        if len(scoring_play["team_on_ice"]) > 1 and len(scoring_play["opp_on_ice"]) > 1:
                            if len(scoring_play["team_on_ice"]) > len(scoring_play["opp_on_ice"]):
                                scoring_play["result"]["strength"]["code"] = "PPG"
                            elif len(scoring_play["team_on_ice"]) < len(scoring_play["opp_on_ice"]):
                                scoring_play["result"]["strength"]["code"] = "SHG"
                            else:
                                scoring_play["result"]["strength"]["code"] = "EVEN"

                        
                        if not has_initial_plays or (real_event_type not in ("Goal", "Penalty") and row_year < 2010):
                            scoring_plays.append(scoring_play)
                        else:
                            for sub_scoring_play in scoring_plays:
                                if sub_scoring_play["result"]["event"] == real_event_type and int(sub_scoring_play["about"]["period"]) == int(scoring_play["about"]["period"]) and start_time_to_str(sub_scoring_play["about"]["periodTime"]) == start_time_to_str(scoring_play["about"]["periodTime"]):
                                    sub_scoring_play["team_on_ice"] = scoring_play["team_on_ice"]
                                    sub_scoring_play["opp_on_ice"] = scoring_play["opp_on_ice"]
                                    sub_scoring_play["zone"] = scoring_play["zone"]
                                    if real_event_type != "Goal":
                                        sub_scoring_play["result"]["strength"] = scoring_play["result"]["strength"]
                                    break
                            
    return scoring_plays

def get_old_html_play_data(scoring_plays, player_data, og_game_id, is_home, game_data, is_final):
    has_initial_plays =  bool(scoring_plays)
    try:
        game_id = str(og_game_id)
        sub_year = int(game_id[:4])
        year_str = str(sub_year)
        year_str += str(sub_year + 1)
        game_id = game_id[4:]
        request = urllib.request.Request(nhl_html_plays_report_format.format(year_str, game_id), headers=request_headers)
        response, player_page_xml = url_request_lxml(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return []
        else:
            raise

    if not player_page_xml.getroot():
        return []

    table = player_page_xml.xpath("body//table")[1]
    table_text = str(table.text_content())
    home_goals = 0
    away_goals = 0
    home_team_abbr = game_data["team_abbr"] if is_home else game_data["opp_abbr"]
    away_team_abbr = game_data["opp_abbr"] if is_home else game_data["team_abbr"]
    home_team_loc = game_data["team_loc"].split() if is_home else game_data["opp_loc"].split()
    away_team_loc = game_data["opp_loc"].split() if is_home else game_data["team_loc"].split()

    game_winner = None
    game_winning_team = None
    team_goal = 1
    if is_final:
        team_score = game_data["team_goals"]
        opp_score = game_data["opp_goals"]
        if team_score != opp_score:
            if team_score > opp_score:
                game_winning_team = game_data["team_id"]
                game_winner = opp_score + 1
            else:
                game_winning_team = game_data["opp_id"]
                game_winner = team_score + 1

    events = []
    all_lines = table_text.split("\n")
    for index, line in enumerate(all_lines):
        if index >= 6:
            line_split = re.split(r"\s{2,}", line.strip(), 5)
            if len(line_split) == 6:
                new_line = []
                new_line.append(line_split[0].strip())
                new_line.append(line_split[1].strip())
                third_line = line_split[2].strip().split(None, 1)
                new_line.append(third_line[0].strip())
                new_line.append(third_line[1].strip())
                new_line.append(line_split[3].strip())
                new_line.append(line_split[4].strip())
                new_line.append(line_split[5].strip())

                if new_line[3] == "GOAL":
                    score_line_split = re.split(r"\s{2,}", all_lines[index + 1].strip(), 1)
                    new_line.append(score_line_split[0][:-1])
                    new_line.append(score_line_split[1])
                    scored_on_line_split = re.split(r"\s{2,}", all_lines[index + 2].strip(), 1)
                    new_line.append(scored_on_line_split[0][:-1])
                    if len(scored_on_line_split) > 1:
                        new_line.append(scored_on_line_split[1])
                    else:
                        new_line.append("")
                events.append(new_line)

    home_team_abbr_to_use = None
    away_team_abbr_to_use = None
    for event in events:
        team_str = event[4]
        if team_str and team_str != "N/A":
            if team_str == home_team_abbr:
                home_team_abbr_to_use = team_str
            elif team_str == away_team_abbr:
                away_team_abbr_to_use = team_str
            elif len(home_team_loc) == 2 and team_str == home_team_loc[0][0] + "." + home_team_loc[1][0]:
                home_team_abbr_to_use = team_str
            elif len(away_team_loc) == 2 and team_str == away_team_loc[0][0] + "." + away_team_loc[1][0]:
                away_team_abbr_to_use = team_str
        
        if away_team_abbr_to_use and home_team_abbr_to_use:
            break
    
    for event in events:
        event_type = event[3]

        if "(*)" in event_type:
            event_type = event_type.replace("(*)", "").strip()
        if "(!)" in event_type:
            event_type = event_type.replace("(!)", "").strip()

        real_event_type = None
        if event_type == "GOAL":
            real_event_type = "Goal"
        elif event_type == "SHOT":
            real_event_type = "Shot"
        elif event_type == "MISSED SHOT":
            real_event_type = "Missed Shot"
        elif event_type == "BLOCKED SHOT":
            real_event_type = "Blocked Shot"
        elif event_type == "PENALTY":
            real_event_type = "Penalty"
        elif event_type == "FACE-OFF":
            real_event_type = "Faceoff"
        elif event_type == "TAKEAWAY":
            real_event_type = "Takeaway"
        elif event_type == "GIVEAWAY":
            real_event_type = "Giveaway"
        elif event_type == "HIT":
            real_event_type = "Hit"
        
        if real_event_type:
            period = int(event[1])
            strength = event[5]
            time_start_str = event[2]  
            description_string = event[6]
            team_str = event[4]

            if strength == "EV":
                strength = "EVEN"
            elif strength == "PP":
                strength = "PPG"
            else:
                strength = "SHG"

            team_str_to_use = team_str if team_str and team_str != "N/A" else description_string

            team_id = None
            if team_str_to_use.startswith(home_team_abbr_to_use):
                if is_home:
                    is_team = True
                    is_home_team = True
                    team_id = game_data["team_id"]
                else:
                    is_team = False
                    team_id = game_data["opp_id"]
                is_home_team = True
            elif team_str_to_use.startswith(away_team_abbr_to_use):
                if is_home:
                    is_team = False
                    team_id = game_data["opp_id"]
                else:
                    is_team = True
                    team_id = game_data["team_id"]
                is_home_team = False

            zone = None
            if "neutral zone." in description_string:
                zone = "NZ"
            elif "offensive zone." in description_string:
                zone = "OZ"
            elif "defensive zone." in description_string:
                zone = "DZ"

            player_numbers = get_player_numbers_2(description_string, real_event_type)

            scoring_play = {
                "players" : [],
                "about" : {
                    "period" : period,
                    "periodTime" : time_start_str,
                    "goals" : {
                        "home" : home_goals,
                        "away" : away_goals
                    }
                },
                "result" : {
                    "event" : real_event_type,
                    "strength" : {
                        "code" : strength
                    }
                },
                "team" : {
                    "id" : team_id
                },
                "zone" : zone
            }

            if real_event_type == "Goal":
                if is_team:
                    if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                        scorer = game_data["opp_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        scorer = game_data["team_numbers"].get(player_numbers[0], -1)
                else:
                    if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                        scorer = game_data["team_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        scorer = game_data["opp_numbers"].get(player_numbers[0], -1)
                
                if is_home_team:
                    home_goals += 1
                else:
                    away_goals += 1

                scoring_play["about"]["goals"]["home"] = home_goals
                scoring_play["about"]["goals"]["away"] = away_goals

                assist_1 = None
                assist_2 = None
                goalie = None

                if len(player_numbers) > 1:
                    if is_team:
                        assist_1 = game_data["team_numbers"].get(player_numbers[1], -1)
                    else:
                        assist_1 = game_data["opp_numbers"].get(player_numbers[1], -1)

                    if len(player_numbers) == 3:
                        if is_team:
                            assist_2 = game_data["team_numbers"].get(player_numbers[2], -1)
                        else:
                            assist_2 = game_data["opp_numbers"].get(player_numbers[2], -1)
                
                team_on_ice = get_on_ice_2(event[8], game_data["team_numbers"] if is_team else game_data["opp_numbers"], game_data["team_goalies"] if is_team else game_data["opp_goalies"])
                opp_on_ice = get_on_ice_2(event[10], game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])

                scoring_play["team_on_ice"] = []
                for pos in team_on_ice:
                    for sub_player in team_on_ice[pos]:
                        if is_team:
                            sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                        else:
                            sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                        scoring_play["team_on_ice"].append(sub_player_id)
                scoring_play["opp_on_ice"] = []
                for pos in opp_on_ice:
                    for sub_player in opp_on_ice[pos]:
                        if is_team:
                            sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                        else:
                            sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                        scoring_play["opp_on_ice"].append(sub_player_id)
                
                if opp_on_ice["G"]:
                    goalie_number = opp_on_ice["G"][0]
                    if is_team:
                        goalie = game_data["opp_numbers"].get(goalie_number, -1)
                    else:
                        goalie = game_data["team_numbers"].get(goalie_number, -1)

                if len(scoring_play["team_on_ice"]) > 1 and len(scoring_play["opp_on_ice"]) > 1:
                    if len(scoring_play["team_on_ice"]) > len(scoring_play["opp_on_ice"]):
                        scoring_play["result"]["strength"]["code"] = "PPG"
                    elif len(scoring_play["team_on_ice"]) < len(scoring_play["opp_on_ice"]):
                        scoring_play["result"]["strength"]["code"] = "SHG"
                    else:
                        scoring_play["result"]["strength"]["code"] = "EVEN"

                if scorer:
                    scoring_play["players"].append({
                        "playerType" :  "Scorer",
                        "player" : {
                            "id" : scorer
                        }
                    })

                if assist_1:
                    scoring_play["players"].append({
                        "playerType" :  "Assist",
                        "player" : {
                            "id" : assist_1
                        }
                    })
                
                if assist_2:
                    scoring_play["players"].append({
                        "playerType" :  "Assist",
                        "player" : {
                            "id" : assist_2
                        }
                    })
                
                if goalie:
                    scoring_play["players"].append({
                        "playerType" :  "Goalie",
                        "player" : {
                            "id" : goalie
                        }
                    })
                else:
                    scoring_play["result"]["emptyNet"] = True

                if game_winning_team == team_id:
                    if team_goal == game_winner:
                        scoring_play["result"]["gameWinningGoal"] = True
                    team_goal += 1                  
            elif real_event_type == "Shot":
                if not player_numbers:
                    player_numbers.append(re.search(r"\d+", description_string).group(0))
                if is_team:
                    if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                        shooter = game_data["opp_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                else:
                    if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                        shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        shooter = game_data["opp_numbers"].get(player_numbers[0], -1)                    

                if shooter:
                    scoring_play["players"].append({
                        "playerType" :  "Shooter",
                        "player" : {
                            "id" : shooter
                        }
                    })
            elif real_event_type == "Missed Shot":
                if is_team:
                    if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                        shooter = game_data["opp_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                else:
                    if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                        shooter = game_data["team_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        shooter = game_data["opp_numbers"].get(player_numbers[0], -1)

                if shooter:
                    scoring_play["players"].append({
                        "playerType" :  "Shooter",
                        "player" : {
                            "id" : shooter
                        }
                    })

                if "Goalpost" in description_string or "Hit Crossbar" in description_string:
                    scoring_play["result"]["description"] = " Goalpost"
            elif real_event_type == "Blocked Shot":
                if is_team:
                    if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                        blocker = game_data["opp_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        blocker = game_data["team_numbers"].get(player_numbers[0], -1)
                else:
                    if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                        blocker = game_data["team_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        blocker = game_data["opp_numbers"].get(player_numbers[0], -1)

                if blocker:
                    scoring_play["players"].append({
                        "playerType" :  "Blocker",
                        "player" : {
                            "id" : blocker
                        }
                    })

                if team_id == game_data["team_id"]:
                    scoring_play["team"]["id"] = game_data["opp_id"]
                else:
                    scoring_play["team"]["id"] = game_data["team_id"]
            elif real_event_type == "Hit":
                if is_team:
                    if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                        hitter = game_data["opp_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        hitter = game_data["team_numbers"].get(player_numbers[0], -1)
                else:
                    if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                        hitter = game_data["team_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        hitter = game_data["opp_numbers"].get(player_numbers[0], -1)

                if hitter:
                    scoring_play["players"].append({
                        "playerType" :  "Hitter",
                        "player" : {
                            "id" : hitter
                        }
                    })
            elif real_event_type == "Takeaway" or real_event_type == "Giveaway":
                if is_team:
                    if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                        player = game_data["opp_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        player = game_data["team_numbers"].get(player_numbers[0], -1)
                else:
                    if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                        player = game_data["team_numbers"].get(player_numbers[0], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        player = game_data["opp_numbers"].get(player_numbers[0], -1)

                if player:
                    scoring_play["players"].append({
                        "playerType" :  "Player",
                        "player" : {
                            "id" : player
                        }
                    })
            elif real_event_type == "Faceoff":
                if is_home:
                    if player_numbers[1] not in game_data["team_numbers"] and player_numbers[1] in game_data["opp_numbers"]:
                        home_player = game_data["opp_numbers"].get(player_numbers[1], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        home_player = game_data["team_numbers"].get(player_numbers[1], -1)
                else:
                    if player_numbers[1] not in game_data["opp_numbers"] and player_numbers[1] in game_data["team_numbers"]:
                        home_player = game_data["team_numbers"].get(player_numbers[1], -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        home_player = game_data["opp_numbers"].get(player_numbers[1], -1)
                
                if not is_home:
                    away_player = game_data["team_numbers"].get(player_numbers[0], -1)
                else:
                    away_player = game_data["opp_numbers"].get(player_numbers[0], -1)

                winner = home_player if is_home_team else away_player
                loser = away_player if is_home_team else home_player

                if winner:
                    scoring_play["players"].append({
                        "playerType" :  "Winner",
                        "player" : {
                            "id" : winner
                        }
                    })
                if loser:
                    scoring_play["players"].append({
                        "playerType" :  "Loser",
                        "player" : {
                            "id" : loser
                        }
                    })
            elif real_event_type == "Penalty" and re.search(r",\s+(.*),\s+(\d+) min", description_string):
                penalty_player = None
                if player_numbers:
                    if is_team:
                        if player_numbers[0] not in game_data["team_numbers"] and player_numbers[0] in game_data["opp_numbers"]:
                            penalty_player = game_data["opp_numbers"].get(player_numbers[0], -1)
                            is_team = not is_team
                            is_home_team = not is_home_team
                            team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                            scoring_play["team"]["id"] = team_id
                        else:
                            penalty_player = game_data["team_numbers"].get(player_numbers[0], -1)
                    else:
                        if player_numbers[0] not in game_data["opp_numbers"] and player_numbers[0] in game_data["team_numbers"]:
                            penalty_player = game_data["team_numbers"].get(player_numbers[0], -1)
                            is_team = not is_team
                            is_home_team = not is_home_team
                            team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                            scoring_play["team"]["id"] = team_id
                        else:
                            penalty_player = game_data["opp_numbers"].get(player_numbers[0], -1)
                
                if penalty_player:
                    scoring_play["players"].append({
                        "playerType" :  "PenaltyOn",
                        "player" : {
                            "id" : penalty_player
                        }
                    })
                
                last_match = re.search(r",\s+(.*),\s+(\d+) min", description_string)
                penalty_minutes = int(last_match.group(2))

                pen_severity = None
                penalty_type = last_match.group(1)
                if "(maj)" in penalty_type:
                    pen_severity = "Major"
                    penalty_type = penalty_type.replace("(maj)", "").strip()
                
                if penalty_type:
                    penalty_type = re.sub(r"\(\d+ min\)", "", penalty_type).strip()

                if penalty_type in ("Game Misconduct", "Bench Minor", "Minor", "Major", "Match", "Misconduct"):
                    pen_severity = penalty_type
                    penalty_type = None
            
                scoring_play["result"]["penaltyMinutes"] = penalty_minutes
                if penalty_type:
                    scoring_play["result"]["secondaryType"] = penalty_type
                if pen_severity:
                    scoring_play["result"]["penaltySeverity"] = pen_severity
                else:
                    scoring_play["result"]["penaltySeverity"] = "Minor"
            
            if not has_initial_plays or real_event_type not in ("Goal", "Penalty"):
                scoring_plays.append(scoring_play)
            else:
                for sub_scoring_play in scoring_plays:
                    if sub_scoring_play["result"]["event"] == real_event_type and int(sub_scoring_play["about"]["period"]) == int(scoring_play["about"]["period"]) and start_time_to_str(sub_scoring_play["about"]["periodTime"]) == start_time_to_str(scoring_play["about"]["periodTime"]):
                        if real_event_type == "Goal":
                            sub_scoring_play["team_on_ice"] = scoring_play["team_on_ice"]
                            sub_scoring_play["opp_on_ice"] = scoring_play["opp_on_ice"]
                        sub_scoring_play["zone"] = scoring_play["zone"]
                        if real_event_type != "Goal":
                            sub_scoring_play["result"]["strength"] = scoring_play["result"]["strength"]
                        break
                            
    return scoring_plays

def get_older_html_play_data(scoring_plays, player_data, og_game_id, is_home, game_data, is_final):
    has_initial_plays =  bool(scoring_plays)
    try:
        game_id = str(og_game_id)
        sub_year = int(game_id[:4])
        year_str = str(sub_year)
        year_str += str(sub_year + 1)
        game_id = game_id[4:]
        request = urllib.request.Request(nhl_html_summary_report_format.format(year_str, game_id), headers=request_headers)
        response, player_page_xml = url_request_lxml(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return []
        else:
            raise

    if not player_page_xml.getroot():
        return []

    tables = player_page_xml.xpath("body//table")
    score_table = tables[1]
    pen_table = tables[2]
    home_goals = 0
    away_goals = 0

    game_winner = None
    game_winning_team = None
    team_goal = 1
    if is_final:
        team_score = game_data["team_goals"]
        opp_score = game_data["opp_goals"]
        if team_score != opp_score:
            if team_score > opp_score:
                game_winning_team = game_data["team_id"]
                game_winner = opp_score + 1
            else:
                game_winning_team = game_data["opp_id"]
                game_winner = team_score + 1

    home_team_abbr_to_use = None
    away_team_abbr_to_use = None
    team_row = score_table.xpath(".//tr")[1]
    columns = team_row.xpath(".//th")
    home_team_abbr_to_use = str(columns[8].text_content()).strip()
    away_team_abbr_to_use = str(columns[7].text_content()).strip()
    
    for index, row in enumerate(score_table.xpath(".//tr")):
        columns = row.xpath(".//td")
        if index > 1 and str(columns[0].text_content()).strip():
            period = int(str(columns[1].text_content()).strip())
            strength = str(columns[9].text_content()).strip()
            time_start_str = str(columns[2].text_content()).strip()
            team_str = str(columns[3].text_content()).strip()

            if strength == "EV":
                strength = "EVEN"
            elif strength == "PP":
                strength = "PPG"
            else:
                strength = "SHG"

            team_id = None
            if team_str.startswith(home_team_abbr_to_use):
                if is_home:
                    is_team = True
                    is_home_team = True
                    team_id = game_data["team_id"]
                else:
                    is_team = False
                    team_id = game_data["opp_id"]
                is_home_team = True
            elif team_str.startswith(away_team_abbr_to_use):
                if is_home:
                    is_team = False
                    team_id = game_data["opp_id"]
                else:
                    is_team = True
                    team_id = game_data["team_id"]
                is_home_team = False

            scoring_play = {
                "players" : [],
                "about" : {
                    "period" : period,
                    "periodTime" : time_start_str,
                    "goals" : {
                        "home" : home_goals,
                        "away" : away_goals
                    }
                },
                "result" : {
                    "event" : "Goal",
                    "strength" : {
                        "code" : strength
                    }
                },
                "team" : {
                    "id" : team_id
                }
            }

            scorer_name = re.sub(r"\(\d+\)", "", str(columns[4].text_content()).strip().upper()).strip()

            if is_team:
                if scorer_name not in game_data["team_names"] and scorer_name in game_data["opp_names"]:
                    scorer = game_data["opp_names"].get(scorer_name, -1)
                    is_team = not is_team
                    is_home_team = not is_home_team
                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                    scoring_play["team"]["id"] = team_id
                else:
                    scorer = game_data["team_names"].get(scorer_name, -1)
            else:
                if scorer_name not in game_data["opp_names"] and scorer_name in game_data["team_names"]:
                    scorer = game_data["team_names"].get(scorer_name, -1)
                    is_team = not is_team
                    is_home_team = not is_home_team
                    team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                    scoring_play["team"]["id"] = team_id
                else:
                    scorer = game_data["opp_names"].get(scorer_name, -1)
            
            team_on_ice = get_on_ice_3(str(columns[8].text_content()).strip() if is_home_team else str(columns[7].text_content()).strip(), game_data["team_numbers"] if is_team else game_data["opp_numbers"], game_data["team_goalies"] if is_team else game_data["opp_goalies"])
            opp_on_ice = get_on_ice_3(str(columns[7].text_content()).strip() if is_home_team else str(columns[8].text_content()).strip(), game_data["opp_numbers"] if is_team else game_data["team_numbers"], game_data["opp_goalies"] if is_team else game_data["team_goalies"])

            scoring_play["team_on_ice"] = []
            for pos in team_on_ice:
                for sub_player in team_on_ice[pos]:
                    if is_team:
                        sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                    else:
                        sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                    scoring_play["team_on_ice"].append(sub_player_id)
            scoring_play["opp_on_ice"] = []
            for pos in opp_on_ice:
                for sub_player in opp_on_ice[pos]:
                    if is_team:
                        sub_player_id = game_data["opp_numbers"].get(sub_player, -1)
                    else:
                        sub_player_id = game_data["team_numbers"].get(sub_player, -1)
                    scoring_play["opp_on_ice"].append(sub_player_id)
            
            if len(scoring_play["team_on_ice"]) > 1 and len(scoring_play["opp_on_ice"]) > 1:
                if len(scoring_play["team_on_ice"]) > len(scoring_play["opp_on_ice"]):
                    scoring_play["result"]["strength"]["code"] = "PPG"
                elif len(scoring_play["team_on_ice"]) < len(scoring_play["opp_on_ice"]):
                    scoring_play["result"]["strength"]["code"] = "SHG"
                else:
                    scoring_play["result"]["strength"]["code"] = "EVEN"
            
            if is_home_team:
                home_goals += 1
            else:
                away_goals += 1
            
            scoring_play["about"]["goals"]["home"] = home_goals
            scoring_play["about"]["goals"]["away"] = away_goals

            assist_1 = None
            assist_2 = None
            goalie = None

            assist_1_name = re.sub(r"\(\d+\)", "", str(columns[5].text_content()).strip().upper()).strip()
            assist_2_name = re.sub(r"\(\d+\)", "", str(columns[6].text_content()).strip().upper()).strip()

            if assist_1_name and assist_1_name != "UNASSISTED":
                if is_team:
                    assist_1 = game_data["team_names"].get(assist_1_name, -1)
                else:
                    assist_1 = game_data["opp_names"].get(assist_1_name, -1)

                if assist_2_name and assist_2_name != "UNASSISTED":
                    if is_team:
                        assist_2 = game_data["team_names"].get(assist_2_name, -1)
                    else:
                        assist_2 = game_data["opp_names"].get(assist_2_name, -1)
            
            if opp_on_ice["G"]:
                goalie_number = opp_on_ice["G"][0]
                if is_team:
                    goalie = game_data["opp_numbers"].get(goalie_number, -1)
                else:
                    goalie = game_data["team_numbers"].get(goalie_number, -1)
            

            if scorer:
                scoring_play["players"].append({
                    "playerType" :  "Scorer",
                    "player" : {
                        "id" : scorer
                    }
                })

            if assist_1:
                scoring_play["players"].append({
                    "playerType" :  "Assist",
                    "player" : {
                        "id" : assist_1
                    }
                })
            
            if assist_2:
                scoring_play["players"].append({
                    "playerType" :  "Assist",
                    "player" : {
                        "id" : assist_2
                    }
                })
            
            if goalie:
                scoring_play["players"].append({
                    "playerType" :  "Goalie",
                    "player" : {
                        "id" : goalie
                    }
                })
            else:
                scoring_play["result"]["emptyNet"] = True

            if game_winning_team == team_id:
                if team_goal == game_winner:
                    scoring_play["result"]["gameWinningGoal"] = True
                team_goal += 1
            
            if not has_initial_plays:
                scoring_plays.append(scoring_play)
            else:
                for sub_scoring_play in scoring_plays:
                    if sub_scoring_play["result"]["event"] == "Goal" and int(sub_scoring_play["about"]["period"]) == int(scoring_play["about"]["period"]) and start_time_to_str(sub_scoring_play["about"]["periodTime"]) == start_time_to_str(scoring_play["about"]["periodTime"]):
                        sub_scoring_play["team_on_ice"] = scoring_play["team_on_ice"]
                        sub_scoring_play["opp_on_ice"] = scoring_play["opp_on_ice"]
                        break
                                
    for index, row in enumerate(pen_table.xpath(".//tr")):
        if index > 1:
            columns = row.xpath(".//td")
            away_penalties = columns[:7]
            home_penalties = columns[7:]
            for index, penalty in enumerate([away_penalties] + [home_penalties]):
                if not str(penalty[3].text_content()).strip():
                    continue

                period = int(str(penalty[1].text_content()).strip())
                time_start_str = str(penalty[2].text_content()).strip()

                team_id = None
                if index == 1:
                    if is_home:
                        is_team = True
                        is_home_team = True
                        team_id = game_data["team_id"]
                    else:
                        is_team = False
                        team_id = game_data["opp_id"]
                    is_home_team = True
                else:
                    if is_home:
                        is_team = False
                        team_id = game_data["opp_id"]
                    else:
                        is_team = True
                        team_id = game_data["team_id"]
                    is_home_team = False

                scoring_play = {
                    "players" : [],
                    "about" : {
                        "period" : period,
                        "periodTime" : time_start_str,
                        "goals" : {
                            "home" : home_goals,
                            "away" : away_goals
                        }
                    },
                    "result" : {
                        "event" : "Penalty"
                    },
                    "team" : {
                        "id" : team_id
                    }
                }

                player_number = str(penalty[3].text_content()).strip()

                if is_team:
                    if player_number not in game_data["team_numbers"] and player_number in game_data["opp_numbers"]:
                        penalty_player = game_data["opp_numbers"].get(player_number, -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        penalty_player = game_data["team_numbers"].get(player_number, -1)
                else:
                    if player_number not in game_data["opp_numbers"] and player_number in game_data["team_numbers"]:
                        penalty_player = game_data["team_numbers"].get(player_number, -1)
                        is_team = not is_team
                        is_home_team = not is_home_team
                        team_id = game_data["team_id"] if team_id == game_data["opp_id"] else game_data["opp_id"]
                        scoring_play["team"]["id"] = team_id
                    else:
                        penalty_player = game_data["opp_numbers"].get(player_number, -1)
                
                if penalty_player:
                    scoring_play["players"].append({
                        "playerType" :  "PenaltyOn",
                        "player" : {
                            "id" : penalty_player
                        }
                    })
                
                penalty_minutes = 0
                if str(penalty[5].text_content()).strip():
                    penalty_minutes = int(str(penalty[5].text_content()).strip().split(":")[0])

                pen_severity = None
                penalty_type = str(penalty[6].text_content()).strip()
                if "(maj)" in penalty_type:
                    pen_severity = "Major"
                    penalty_type = penalty_type.replace("(maj)", "").strip()

                if penalty_type:
                    penalty_type = re.sub(r"\(\d+ min\)", "", penalty_type).strip()

                if penalty_type in ("Game Misconduct", "Bench Minor", "Minor", "Major", "Match", "Misconduct"):
                    pen_severity = penalty_type
                    penalty_type = None
                            
                scoring_play["result"]["penaltyMinutes"] = penalty_minutes
                if penalty_type:
                    scoring_play["result"]["secondaryType"] = penalty_type
                if pen_severity:
                    scoring_play["result"]["penaltySeverity"] = pen_severity
                else:
                    scoring_play["result"]["penaltySeverity"] = "Minor"
            
                if not has_initial_plays:
                    scoring_plays.append(scoring_play)
                            
    return scoring_plays

def get_href_html_play_data(scoring_plays, player_data, game_link, is_home, team_abbr, opp_abbr, game_data, is_final):
    has_initial_plays =  bool(scoring_plays)
    try:
        request = urllib.request.Request("https://www.hockey-reference.com" + game_link, headers=request_headers)
        response, player_page_xml = url_request_lxml(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return []
        else:
            raise

    if not player_page_xml.getroot():
        return []

    score_table = player_page_xml.xpath("//table[@id = 'scoring']")
    if score_table:
        score_table = score_table[0]
    else:
        score_table = None
    pen_table = player_page_xml.xpath("//table[@id = 'penalty']")
    if pen_table:
        pen_table = pen_table[0]
    else:
        pen_table = None
    home_goals = 0
    away_goals = 0

    game_winner = None
    game_winning_team = None
    team_goal = 1
    if is_final:
        team_score = game_data["team_goals"]
        opp_score = game_data["opp_goals"]
        if team_score != opp_score:
            if team_score > opp_score:
                game_winning_team = game_data["team_id"]
                game_winner = opp_score + 1
            else:
                game_winning_team = game_data["opp_id"]
                game_winner = team_score + 1

    home_team_abbr_to_use = team_abbr if is_home else opp_abbr
    away_team_abbr_to_use = opp_abbr if is_home else team_abbr
    
    if score_table != None:
        period = 0
        for index, row in enumerate(score_table.xpath(".//tr")):
            if row.get("class") and "thead" in row.get("class"):
                row_text = str(row.text_content()).strip()
                period = int(ordinal_to_number(row_text.split()[0]))
                if "OT" in row_text:
                    period += 3
                continue

            columns = row.xpath(".//td")
            strength = str(columns[2].text_content()).strip()
            time_start_str = str(columns[0].text_content()).strip()
            team_str = str(columns[1].text_content()).strip()

            is_emtpy = False
            if ", EN" in strength:
                is_emtpy = True
                strength = strength.replace(", EN", "").strip()

            if not strength:
                strength = "EVEN"
            elif strength == "PP":
                strength = "PPG"
            else:
                strength = "SHG"

            team_id = None
            if team_str == home_team_abbr_to_use:
                if is_home:
                    is_team = True
                    is_home_team = True
                    team_id = game_data["team_id"]
                else:
                    is_team = False
                    team_id = game_data["opp_id"]
                is_home_team = True
            elif team_str == away_team_abbr_to_use:
                if is_home:
                    is_team = False
                    team_id = game_data["opp_id"]
                else:
                    is_team = True
                    team_id = game_data["team_id"]
                is_home_team = False

            scoring_play = {
                "players" : [],
                "about" : {
                    "period" : period,
                    "periodTime" : time_start_str,
                    "goals" : {
                        "home" : home_goals,
                        "away" : away_goals
                    }
                },
                "result" : {
                    "event" : "Goal",
                    "strength" : {
                        "code" : strength
                    }
                },
                "team" : {
                    "id" : team_id
                }
            }

            scorer_link = columns[3].xpath(".//a")[0].get("href").split("/")
            scorer = scorer_link[len(scorer_link) - 1][:-5]
            
            if is_home_team:
                home_goals += 1
            else:
                away_goals += 1

            scoring_play["about"]["goals"]["home"] = home_goals
            scoring_play["about"]["goals"]["away"] = away_goals

            assist_1 = None
            assist_2 = None

            assist_links = columns[4].xpath(".//a")

            if assist_links:
                assist_1_link = assist_links[0].get("href").split("/")
                assist_1 = assist_1_link[len(assist_1_link) - 1][:-5]

                if len(assist_links) > 1:
                    assist_2_link = assist_links[1].get("href").split("/")
                    assist_2 = assist_2_link[len(assist_2_link) - 1][:-5]

            if scorer:
                scoring_play["players"].append({
                    "playerType" :  "Scorer",
                    "player" : {
                        "id" : scorer
                    }
                })

            if assist_1:
                scoring_play["players"].append({
                    "playerType" :  "Assist",
                    "player" : {
                        "id" : assist_1
                    }
                })
            
            if assist_2:
                scoring_play["players"].append({
                    "playerType" :  "Assist",
                    "player" : {
                        "id" : assist_2
                    }
                })

            if is_emtpy:
                scoring_play["result"]["emptyNet"] = True

            if game_winning_team == team_id:
                if team_goal == game_winner:
                    scoring_play["result"]["gameWinningGoal"] = True
                team_goal += 1
            
            if not has_initial_plays:
                scoring_plays.append(scoring_play)
                                
    if pen_table != None:
        period = 0
        for index, row in enumerate(pen_table.xpath(".//tr")):
            if row.get("class") and "thead" in row.get("class"):
                row_text = str(row.text_content()).strip()
                period = int(ordinal_to_number(row_text.split()[0]))
                if "OT" in row_text:
                    period += 3
                continue

            columns = row.xpath(".//td")
            time_start_str = str(columns[0].text_content()).strip()
            team_str = str(columns[1].text_content()).strip()

            team_id = None
            if team_str == home_team_abbr_to_use:
                if is_home:
                    is_team = True
                    is_home_team = True
                    team_id = game_data["team_id"]
                else:
                    is_team = False
                    team_id = game_data["opp_id"]
                is_home_team = True
            elif team_str == away_team_abbr_to_use:
                if is_home:
                    is_team = False
                    team_id = game_data["opp_id"]
                else:
                    is_team = True
                    team_id = game_data["team_id"]
                is_home_team = False

            scoring_play = {
                "players" : [],
                "about" : {
                    "period" : period,
                    "periodTime" : time_start_str,
                    "goals" : {
                        "home" : home_goals,
                        "away" : away_goals
                    }
                },
                "result" : {
                    "event" : "Penalty"
                },
                "team" : {
                    "id" : team_id
                }
            }

            pen_link = columns[2].xpath(".//a")
            penalty_player = None
            if pen_link:
                pen_link = pen_link[0].get("href").split("/")
                penalty_player = pen_link[len(pen_link) - 1][:-5]
            
            if penalty_player:
                scoring_play["players"].append({
                    "playerType" :  "PenaltyOn",
                    "player" : {
                        "id" : penalty_player
                    }
                })
            
            penalty_minutes = 0
            if str(columns[4].text_content()).strip():
                penalty_minutes = int(str(columns[4].text_content()).strip().split()[0])

            pen_severity = None
            penalty_type = str(columns[3].text_content()).strip()
            if "(maj)" in penalty_type:
                pen_severity = "Major"
                penalty_type = penalty_type.replace("(maj)", "").strip()

            if penalty_type:
                penalty_type = re.sub(r"\(\d+ min\)", "", penalty_type).strip()

            if penalty_type in ("Game Misconduct", "Bench Minor", "Minor", "Major", "Match", "Misconduct"):
                pen_severity = penalty_type
                penalty_type = None
                        
            scoring_play["result"]["penaltyMinutes"] = penalty_minutes
            if penalty_type:
                scoring_play["result"]["secondaryType"] = penalty_type
            if pen_severity:
                scoring_play["result"]["penaltySeverity"] = pen_severity
            else:
                scoring_play["result"]["penaltySeverity"] = "Minor"
        
            if not has_initial_plays:
                scoring_plays.append(scoring_play)
                            
    return scoring_plays

def get_player_numbers(desc_string):
    last_match = re.finditer(r"#\d*", desc_string)
    numbers = []
    for m in last_match:
        numbers.append(m.group(0)[1:])
    return numbers

def get_player_numbers_2(desc_string, real_event_type):
    numbers = []
    if real_event_type == "Penalty" and desc_string.startswith("Team Penalty"):
        return numbers
    if real_event_type != "Faceoff":
        match = re.search(r"^\d+ ", desc_string)
        numbers.append(match.group(0).strip())
        if real_event_type == "Goal":
            match = re.search(r"A:\s+(\d+)\s+\S+\s+(\d+)?", desc_string)
            if match:
                numbers.append(match.group(1))
                if match.group(2):
                    numbers.append(match.group(2))
    else:
        last_match = re.finditer(r" \d+ ", desc_string)
        for m in last_match:
            numbers.append(m.group(0).strip())
    return numbers

def get_on_ice(table, numbers, goalies):
    on_ice_map = {
        "G" : [],
        "S" : []
    }
    if not table:
        return on_ice_map
    table = table[0]
    row = table.xpath("tr")
    if row:
        row = row[0]
        columns = row.xpath("td")
        for column in columns:
            sub_table = column.xpath("table")
            if sub_table:
                sub_table = sub_table[0]
                sub_rows = sub_table.xpath("tr")
                number = str(sub_rows[0].text_content()).strip()
                position = str(sub_rows[1].text_content()).strip()
                player_id = numbers.get(number, -1)
                if player_id:
                    if player_id in goalies or position == "G":
                        on_ice_map["G"].append(number)
                    else:
                        on_ice_map["S"].append(number)
    return on_ice_map

def get_on_ice_2(on_ice_str, numbers, goalies):
    on_ice_map = {
        "G" : [],
        "S" : []
    }
    match = re.search(r"^\d+ ", on_ice_str)
    if match:
        number = match.group(0).strip()
        player_id = numbers.get(number, -1)
        if player_id:
            if player_id in goalies:
                on_ice_map["G"].append(number)
            else:
                on_ice_map["S"].append(number)

        match = re.finditer(r",\W+(\d+)", on_ice_str)
        for m in match:
            number = m.group(1).strip()
            player_id = numbers.get(number, -1)
            if player_id:
                if player_id in goalies:
                    on_ice_map["G"].append(number)
                else:
                    on_ice_map["S"].append(number)

    return on_ice_map

def get_on_ice_3(on_ice_str, numbers, goalies):
    on_ice_map = {
        "G" : [],
        "S" : []
    }

    match = re.finditer(r"(\d+)", on_ice_str)
    for m in match:
        number = m.group(1).strip()
        player_id = numbers.get(number, -1)
        if player_id:
            if player_id in goalies:
                on_ice_map["G"].append(number)
            else:
                on_ice_map["S"].append(number)

    return on_ice_map

def perform_nhl_game_qualifiers(row, qualifiers):
    if "Game Number" in qualifiers:
        if "Number" not in row or row["Number"] == None:
            return False

        for qual_object in qualifiers["Game Number"]:
            if qual_object["negate"]:
                if row["Number"] >= qual_object["values"]["start_val"] and row["Number"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Number"] >= qual_object["values"]["start_val"] and row["Number"] <= qual_object["values"]["end_val"]):
                    return False
    
    return True

def perform_sub_nhl_game_qualifiers(row, qualifiers, player_game_info, player_type, player_link, saved_row_data, index, clear_data):
    player_id = int(player_link.split('/')[-1])
    if not player_game_info or player_game_info["missing_data"]:
        return False
    
    if "Period" in qualifiers:
        has_row_match = True
        for qual_object in qualifiers["Period"]:
            has_match = False
            for period in player_game_info["periods"]:
                if period == 5 and player_game_info["is_shootout"]:
                    continue

                if qual_object["negate"]:
                    if not (period >= qual_object["values"]["start_val"] and period <= qual_object["values"]["end_val"]):
                        has_match = True
                else:
                    if period >= qual_object["values"]["start_val"] and period <= qual_object["values"]["end_val"]:
                        has_match = True

            if not has_match:
                has_row_match = False
        if not has_row_match:
            return False

    if "Shootout" in qualifiers:
        has_row_match = True
        for qual_object in qualifiers["Shootout"]:
            has_match = False
            for period in player_game_info["periods"]:
                if qual_object["negate"]:
                    if not (period == 5 and player_game_info["is_shootout"]):
                        has_match = True
                else:
                    if period == 5 and not player_game_info["is_shootout"]:
                        has_match = True

            if not has_match:
                has_row_match = False
        if not has_row_match:
            return False
    
    if "Overtime" in qualifiers:
        has_row_match = True
        for qual_object in qualifiers["Overtime"]:
            has_match = False
            for period in player_game_info["periods"]:
                if qual_object["negate"]:
                    if not (period == 4 or (not player_game_info["is_shootout"] and period > 4)):
                        has_match = True
                else:
                    if period == 4 or (not player_game_info["is_shootout"] and period > 4):
                        has_match = True

            if not has_match:
                has_row_match = False
        if not has_row_match:
            return False
    
    if "Career Shot" in qualifiers:
        count_misses = False
        if not "Shot On" in qualifiers:
            if "Penalty Shot" in qualifiers or "Shootout" in qualifiers:
                count_misses = True
        all_goal_events = player_game_info["goal"] + player_game_info["shot"]
        if count_misses:
            all_goal_events += player_game_info["missed_shot"]

        has_row_match = False
        for goal_event in all_goal_events:
            if perform_sub_metadata_qual(goal_event, "career_shot", qualifiers["Career Shot"], player_game_info, row["Year"]):
                has_row_match = True
                break
        if not has_row_match:
            return False
    
    if "Career Shot Reversed" in qualifiers:
        count_misses = False
        if not "Shot On" in qualifiers:
            if "Penalty Shot" in qualifiers or "Shootout" in qualifiers:
                count_misses = True
        all_goal_events = player_game_info["goal"] + player_game_info["shot"]
        if count_misses:
            all_goal_events += player_game_info["missed_shot"]

        has_row_match = False
        for goal_event in all_goal_events:
            if perform_sub_metadata_qual(goal_event, "career_shot_reversed", qualifiers["Career Shot Reversed"], player_game_info, row["Year"]):
                has_row_match = True
                break
        if not has_row_match:
            return False
    
    
    if "Game Shot" in qualifiers:
        count_misses = False
        if not "Shot On" in qualifiers:
            if "Penalty Shot" in qualifiers or "Shootout" in qualifiers:
                count_misses = True
        all_goal_events = player_game_info["goal"] + player_game_info["shot"]
        if count_misses:
            all_goal_events += player_game_info["missed_shot"]

        has_row_match = False
        for goal_event in all_goal_events:
            if perform_sub_metadata_qual(goal_event, "game_shot", qualifiers["Game Shot"], player_game_info, row["Year"]):
                has_row_match = True
                break
        if not has_row_match:
            return False
    
    
    if "Game Shot Reversed" in qualifiers:
        count_misses = False
        if not "Shot On" in qualifiers:
            if "Penalty Shot" in qualifiers or "Shootout" in qualifiers:
                count_misses = True
        all_goal_events = player_game_info["goal"] + player_game_info["shot"]
        if count_misses:
            all_goal_events += player_game_info["missed_shot"]

        has_row_match = False
        for goal_event in all_goal_events:
            if perform_sub_metadata_qual(goal_event, "game_shot_reversed", qualifiers["CGame Shot Reversed"], player_game_info, row["Year"]):
                has_row_match = True
                break
        if not has_row_match:
            return False
    

    perform_metadata_quals(qualifiers, player_type, row, player_game_info, player_id, clear_data)
    
    calculate_toi(row, qualifiers, player_game_info, player_id, saved_row_data, index)

    if "Career Minute" in qualifiers or "Career Minute Reversed" in qualifiers or "Game Minute" in qualifiers or "Game Minute Reversed" in qualifiers:
        if not row["TOI"]:
            return False

    return True

def perform_metadata_quals(qualifiers, player_type, row, player_game_info, nhl_player_id, clear_data):
    if clear_data:
        clear_row_attrs(row, player_type)
    count_misses = False
    if not "Shot On" in qualifiers:
        if "Penalty Shot" in qualifiers or "Shootout" in qualifiers:
            count_misses = True
    if player_type["da_type"]["type"] == "Skater":
        for goal_event in player_game_info["goal"]:
            if perform_metadata_qual("goal", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["G"] += 1
                if goal_event["strength"] == "EVEN":
                    row["EVG"] += 1
                elif goal_event["strength"] == "PPG":
                    row["PPG"] += 1
                else:
                    row["SHG"] += 1
                if goal_event["gameWinningGoal"]:
                    row["GWG"] += 1
                if goal_event["emptyNet"]:
                    row["ENG"] += 1
                if goal_event["period"] == 4 or (not player_game_info["is_shootout"] and goal_event["period"] > 4):
                    row["OTG"] += 1
                if goal_event["firstGoal"]:
                    row["1stG"] += 1
                if row["Year"] >= 2003:
                    if "Shot On" not in qualifiers or row["Year"] >= 2007:
                        row["S"] += 1
                        if goal_event["secondaryType"] == "Wrist Shot":
                            row["WristS"] += 1
                            row["WristG"] += 1
                        elif goal_event["secondaryType"] == "Deflected":
                            row["DeflectS"] += 1
                            row["DeflectG"] += 1
                        elif goal_event["secondaryType"] == "Slap Shot":
                            row["SlapS"] += 1
                            row["SlapG"] += 1
                        elif goal_event["secondaryType"] == "Snap Shot":
                            row["SnapS"] += 1
                            row["SnapG"] += 1
                        elif goal_event["secondaryType"] == "Tip-In":
                            row["TipS"] += 1
                            row["TipG"] += 1
                        elif goal_event["secondaryType"] == "Backhand":
                            row["BackS"] += 1
                            row["BackG"] += 1
                        elif goal_event["secondaryType"] == "Wrap-around":
                            row["WrapS"] += 1
                            row["WrapG"] += 1
                        if row["Year"] >= 2007:
                            row["TSA"] += 1
                if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                    row["G_5v5"] += 1
                    if row["Year"] >= 2003:
                        if "Shot On" not in qualifiers or row["Year"] >= 2007:
                            row["S_5v5"] += 1
                            if row["Year"] >= 2007:
                                row["TSA_5v5"] += 1
        for goal_event in player_game_info["shot"]:
            if perform_metadata_qual("shot", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["S"] += 1
                if goal_event["secondaryType"] == "Wrist Shot":
                    row["WristS"] += 1
                elif goal_event["secondaryType"] == "Deflected":
                    row["DeflectS"] += 1
                elif goal_event["secondaryType"] == "Slap Shot":
                    row["SlapS"] += 1
                elif goal_event["secondaryType"] == "Snap Shot":
                    row["SnapS"] += 1
                elif goal_event["secondaryType"] == "Tip-In":
                    row["TipS"] += 1
                elif goal_event["secondaryType"] == "Backhand":
                    row["BackS"] += 1
                elif goal_event["secondaryType"] == "Wrap-around":
                    row["WrapS"] += 1
                if row["Year"] >= 2007:
                    row["TSA"] += 1
                if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                    row["S_5v5"] += 1
                    if row["Year"] >= 2007:
                        row["TSA_5v5"] += 1
        for goal_event in player_game_info["missed_shot"]:
            if perform_metadata_qual("missed_shot", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                if goal_event["description"].endswith(" Goalpost") or goal_event["description"].endswith("Hit Crossbar"):
                    row["Post/Bar"] += 1
                if count_misses:
                    row["S"] += 1
                if row["Year"] >= 2007:
                    row["TSA"] += 1
                    row["TSM"] += 1
                    if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                        row["TSA_5v5"] += 1
                        row["TSM_5v5"] += 1
        for goal_event in player_game_info["blocked_shot"]:
            if perform_metadata_qual("blocked_shot", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                if row["Year"] >= 2007:
                    row["TSA"] += 1
                    row["TSB"] += 1
                    if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                        row["TSA_5v5"] += 1
                        row["TSB_5v5"] += 1
        for goal_event in player_game_info["assist"]:
            if perform_metadata_qual("assist", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["A"] += 1
                if goal_event["emptyNet"]:
                    row["ENA"] += 1
                if goal_event["strength"] == "EVEN":
                    row["EVA"] += 1
                elif goal_event["strength"] == "PPG":
                    row["PPA"] += 1
                else:
                    row["SHA"] += 1
                if goal_event["is_primary"]:
                    row["A1"] += 1
                    if goal_event["strength"] == "EVEN":
                        row["EVA1"] += 1
                    elif goal_event["strength"] == "PPG":
                        row["PPA1"] += 1
                    else:
                        row["SHA1"] += 1
                else:
                    row["A2"] += 1
                    if goal_event["strength"] == "EVEN":
                        row["EVA2"] += 1
                    elif goal_event["strength"] == "PPG":
                        row["PPA2"] += 1
                    else:
                        row["SHA2"] += 1
                if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                    row["A_5v5"] += 1
                    if goal_event["is_primary"]:
                        row["A1_5v5"] += 1
                    else:
                        row["A2_5v5"] += 1
        for goal_event in player_game_info["hit"]:
            if perform_metadata_qual("hit", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):   
                row["HIT"] += 1
        for goal_event in player_game_info["block"]:
            if perform_metadata_qual("block", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):   
                row["BLK"] += 1
        for goal_event in player_game_info["faceoff"]:
            if perform_metadata_qual("faceoff", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"], is_faceoff=True):
                row["FO"] += 1
                if goal_event["winner"]:
                    row["FOW"] += 1
                else:
                    row["FOL"] += 1
                if goal_event["zone"]:
                    row[goal_event["zone"] + "FO"] += 1
                    if goal_event["winner"]:
                        row[goal_event["zone"] + "FOW"] += 1
                    else:
                        row[goal_event["zone"] + "FOL"] += 1
        for goal_event in player_game_info["all_faceoffs"]:
            if goal_event["zone"]:
                if perform_metadata_qual("all_faceoffs", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"], is_faceoff=True):
                    row[goal_event["zone"]] += 1
        for goal_event in player_game_info["takeaway"]:
            if perform_metadata_qual("takeaway", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                if goal_event["is_takeaway"]:
                    row["TK"] += 1
                else:
                    row["GV"] += 1
        for goal_event in player_game_info["penalty"]:
            if perform_metadata_qual("penalty", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                if goal_event["player_penalty"]:
                    row["PEN"] += 1
                    row["PIM"] += goal_event["penalty_minutes"]
                    if "penalty_severity" in goal_event:
                        row[goal_event["penalty_severity"]] += 1
                else:
                    row["PenDrawn"] += 1
        for goal_event in player_game_info["penalty"]:
            if "secondary_type" in goal_event and goal_event["secondary_type"] == "Fighting":
                if perform_metadata_qual("penalty", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                    row["Fight"] += 1
        for goal_event in player_game_info["all_team_goals"]:
            if perform_metadata_qual("all_team_goals", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["GF"] += 1
                if goal_event["strength"] == "EVEN" or goal_event["strength"] != "PPG":
                    row["PlusMinus"] += 1
                    if goal_event["strength"] == "EVEN":
                        row["EVGF"] += 1
        for goal_event in player_game_info["all_opp_goals"]:
            if perform_metadata_qual("all_opp_goals", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["GA"] += 1
                if goal_event["strength"] == "EVEN" or goal_event["strength"] != "SHG":
                    row["PlusMinus"] -= 1
                    if goal_event["strength"] == "EVEN":
                        row["EVGA"] += 1
        for goal_event in player_game_info["all_team_shots_og"]:
            if perform_metadata_qual("all_team_shots_og", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["oiTmS"] += 1
        for goal_event in player_game_info["all_opp_shots_og"]:
            if perform_metadata_qual("all_opp_shots_og", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["oiOppS"] += 1
        for goal_event in player_game_info["all_team_shots"]:
            if perform_metadata_qual("all_team_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["CF"] += 1
                if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                    row["CF_5v5"] += 1
        for goal_event in player_game_info["all_opp_shots"]:
            if perform_metadata_qual("all_opp_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["CA"] += 1
                if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                    row["CA_5v5"] += 1
        for goal_event in player_game_info["all_team_unblocked_shots"]:
            if perform_metadata_qual("all_team_unblocked_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["FF"] += 1
                if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                    row["FF_5v5"] += 1
        for goal_event in player_game_info["all_opp_unblocked_shots"]:
            if perform_metadata_qual("all_opp_unblocked_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["FA"] += 1
                if is_five_toi(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"]):
                    row["FA_5v5"] += 1
        for goal_event in player_game_info["of_all_team_shots"]:
            if perform_metadata_qual("of_all_team_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["offICF"] += 1
        for goal_event in player_game_info["of_all_opp_shots"]:
            if perform_metadata_qual("of_all_opp_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["offICA"] += 1
        for goal_event in player_game_info["of_all_team_unblocked_shots"]:
            if perform_metadata_qual("of_all_team_unblocked_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["offIFF"] += 1
        for goal_event in player_game_info["of_all_opp_unblocked_shots"]:
            if perform_metadata_qual("of_all_opp_unblocked_shots", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["offIFA"] += 1
    else:
        for goal_event in player_game_info["goal_against"]:
            if perform_metadata_qual("goal_against", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["GA"] += 1
                if goal_event["strength"] == "EVEN":
                    row["EVGA"] += 1
                    row["EVSH"] += 1
                elif goal_event["strength"] == "PPG":
                    row["PPGA"] += 1
                    row["PPSH"] += 1
                else:
                    row["SHGA"] += 1
                    row["SHSH"] += 1
                if row["Year"] >= 2007:
                    row["SA"] += 1
        for goal_event in player_game_info["save_against"]:
            if perform_metadata_qual("save_against", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                strength = determine_strength(player_game_info, goal_event["period"], goal_event["periodTime"], goal_event)
                if strength:
                    row[strength + "SH"] += 1
                row["SV"] += 1
                row["SA"] += 1
        for goal_event in player_game_info["all_team_goals"]:
            if perform_metadata_qual("all_team_goals", goal_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"]):
                row["GF"] += 1
    calculate_row_attrs(row, player_type)

def calculate_toi(row, qualifiers, player_game_info, player_id, saved_row_data, index):
    shift_data = player_game_info["shift_data"]
    row["TOI"] = 0
    row["EVTOI"] = 0
    row["PPTOI"] = 0
    row["SHTOI"] = 0
    row["TOI_5v5"] = 0
    row["GP_TOI"] = 0
    row["GP_TOI_5v5"] = 0
    row["Shft"] = 0

    if not shift_data or player_id not in shift_data["team"]:
        return
    
    row["GP_TOI"] = 1
    row["GP_TOI_5v5"] = 1

    sub_minutes = None
    sub_minutes_reversed = None
    if "Career Minute" in qualifiers or "Career Minute Reversed" in qualifiers or "Game Minute" in qualifiers or "Game Minute Reversed" in qualifiers or "Career Shot" in qualifiers or "Career Shot Reversed" in qualifiers or "Game Shot" in qualifiers or "Game Shot Reversed" in qualifiers:
        career_stats_info = {
            "minutes" : 0,
            "shots" : 0
        }
        for sub_row_data in saved_row_data[:index]:
            career_stats_info["minutes"] += sub_row_data["TOI"]
            career_stats_info["shots"] += sub_row_data["S"]
        sub_minutes = career_stats_info["minutes"]
        sub_shots = career_stats_info["shots"]

        career_stats_info = {
        "minutes" : 0,
        "shots" : 0
        }
        for sub_row_data in reversed(saved_row_data[(index + 1):]):
            career_stats_info["minutes"] += sub_row_data["TOI"]
            career_stats_info["shots"] += sub_row_data["S"]
        sub_minutes_reversed = career_stats_info["minutes"]
        sub_shots_reversed = career_stats_info["shots"]

    for period in shift_data["team"][player_id]:
        for shift_event in shift_data["team"][player_id][period]:
            has_shift_match = False
            for second in range(shift_event["time_start"], shift_event["time_end"] + 1):
                if perform_on_ice_quals(qualifiers, shift_data, shift_event, row, period, second):
                    score_info = get_score_info(player_game_info["scoring_play_data"], period, second)
                    shift_event["teamGoals"] = score_info[0]
                    shift_event["oppGoals"] = score_info[1]
                    shift_event["goalMargin"] = score_info[0] - score_info[1]
                    shift_event["periodTime"] = second

                    if row["is_playoffs"] or shift_event["period"] <= 3:
                        time_to_use = 1200
                    elif row["Year"] <= 1942:
                        time_to_use = 600
                    else:
                        time_to_use = 300

                    shift_event["periodTimeRemaining"] = time_to_use - shift_event["periodTime"]

                    if "Career Minute" in qualifiers or "Career Minute Reversed" in qualifiers or "Game Minute" in qualifiers or "Game Minute Reversed" in qualifiers or "Career Shot" in qualifiers or "Career Shot Reversed" in qualifiers or "Game Shot" in qualifiers or "Game Shot Reversed" in qualifiers:
                        game_minutes, game_minutes_reversed = determine_toi(player_game_info["shift_data"], shift_event["period"], second, player_id, True)
                        career_minutes = sub_minutes + game_minutes
                        career_minutes_reversed = sub_minutes_reversed + game_minutes_reversed

                        shift_event["game_minute"] = game_minutes
                        shift_event["career_minute"] = career_minutes
                        shift_event["game_minute_reversed"] = game_minutes_reversed
                        shift_event["career_minute_reversed"] = career_minutes_reversed

                        game_shots, game_shots_reversed = determine_shots(player_game_info, shift_event["period"], second, qualifiers)
                        career_shots = sub_shots + game_shots
                        career_shots_reversed = sub_shots_reversed + game_shots_reversed

                        shift_event["game_shot"] = game_shots
                        shift_event["career_shot"] = career_shots
                        shift_event["game_shot_reversed"] = game_shots_reversed
                        shift_event["career_shot_reversed"] = career_shots_reversed

                    if perform_metadata_qual(None, shift_event, qualifiers, player_game_info, row, row["is_playoffs"], row["Year"], skip_on_ice=True):
                        row["TOI"] += 1
                        strength = determine_strength(player_game_info, period, second, shift_event)
                        if strength:
                            row[strength + "TOI"] += 1
                        has_shift_match = True
                        if is_five_toi(player_game_info, shift_event, period, second):
                            row["TOI_5v5"] += 1

def is_five_toi(player_game_info, goal_event, period, second):
    team_skaters, team_goalies, opp_skaters, opp_goalies, has_shift = get_on_ice_info(player_game_info, goal_event, period, second)
    return has_shift and team_skaters == 5 and team_goalies == 1 and opp_skaters == 5 and opp_goalies == 1

def determine_strength(player_game_info, period, second, goal_event):
    if "strength" in goal_event and goal_event["strength"]:
        if goal_event["strength"] == "EVEN":
            return "EV"
        elif goal_event["strength"] == "PPG":
            return "PP"
        else:
            return "SH"

    team_skaters, team_goalies, opp_skaters, opp_goalies, has_shift = get_on_ice_info(player_game_info, goal_event, period, second)
    if has_shift:
        if team_skaters + team_goalies  < opp_skaters + opp_goalies:
            return "SH"
        elif team_skaters + team_goalies  > opp_skaters + opp_goalies:
            return "PP"
        else:
            return "EV"
    return None

def get_on_ice_info(player_game_info, goal_event, period, second, is_faceoff=False):
    shift_data = player_game_info["shift_data"]
    team_skaters = 0
    team_goalies = 0
    opp_skaters = 0
    opp_goalies = 0
    team_on_ice = goal_event["team_on_ice"] if "team_on_ice" in goal_event else None
    opp_on_ice = goal_event["opp_on_ice"] if "opp_on_ice" in goal_event else None

    has_shift_data = bool(team_on_ice) or bool(opp_on_ice) or bool(shift_data)
    if has_shift_data:
        for player in player_game_info["team_players"]:
            if is_player_on_ice(shift_data, team_on_ice, opp_on_ice, period, second, player, True, is_faceoff):
                if player in player_game_info["team_goalies"]:
                    team_goalies += 1
                else:
                    team_skaters += 1
        for player in player_game_info["opp_players"]:
            if is_player_on_ice(shift_data, team_on_ice, opp_on_ice, period, second, player, False, is_faceoff):
                if player in player_game_info["opp_goalies"]:
                    opp_goalies += 1
                else:
                    opp_skaters += 1

    return team_skaters, team_goalies, opp_skaters, opp_goalies, has_shift_data

def get_score_info(scoring_play_data, period, second):
    current_team_score = 0
    current_opponent_score = 0
    for scoring_play in scoring_play_data:
        if scoring_play["period"] > period or (scoring_play["period"] == period and scoring_play["second"] >= second):
            return current_team_score, current_opponent_score
        if scoring_play["is_team"]:
            current_team_score += 1
        else:
            current_opponent_score += 1
    return current_team_score, current_opponent_score

def is_period_qual(qual_object):
    if qual_object["negate"]:
        if 5 >= qual_object["values"]["start_val"] and 5 <= qual_object["values"]["end_val"]:
            return False
    else:
        if not (5 >= qual_object["values"]["start_val"] and 5 <= qual_object["values"]["end_val"]):
            return False
    return True

def has_shift_quals(qualifiers):
    return "On Ice With" in qualifiers or "On Ice Against" in qualifiers or "Strength" in qualifiers or "Career Minute" in qualifiers or "Career Minute Reversed" in qualifiers or "Game Minute" in qualifiers or "Game Minute Reversed" in qualifiers or "Even Skaters" in qualifiers or "More Skaters" in qualifiers or "Less Skaters" in qualifiers or "Team Goalie Pulled" in qualifiers or "Opponent Goalie Pulled" in qualifiers or "Team Skaters" in qualifiers or "Opponent Skaters" in qualifiers or "Team Players" in qualifiers or "Opponent Players" in qualifiers

def perform_metadata_qual(event_name, goal_event, qualifiers, player_game_info, row, is_playoffs, year, is_faceoff=False, skip_on_ice=False):
    if not skip_on_ice:
        if "Shot On" in qualifiers:
            if event_name != "goal" and event_name != "shot":
                return False

            for qual_object in qualifiers["Shot On"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if goal_event["goalie"] == player["nhl_id"] or goal_event["goalie"] == player["id"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
        
        if "Assisted By" in qualifiers:
            if event_name != "goal":
                return False

            for qual_object in qualifiers["Assisted By"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if player["nhl_id"] in goal_event["assists"] or player["id"] in goal_event["assists"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

        if "Assisted On" in qualifiers:
            if event_name != "assist":
                return False

            for qual_object in qualifiers["Assisted On"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if goal_event["scorer"] == player["nhl_id"] or goal_event["scorer"] == player["id"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
        
        if "Assisted With" in qualifiers:
            if event_name != "assist":
                return False

            for qual_object in qualifiers["Assisted With"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if player["nhl_id"] in goal_event["assists"] or player["id"] in goal_event["assists"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
        
        if "Points With" in qualifiers:
            if event_name != "assist" and event_name != "goal":
                return False

            for qual_object in qualifiers["Points With"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if event_name == "assist":
                        if goal_event["scorer"] == player["nhl_id"] or goal_event["scorer"] == player["id"] or (player["nhl_id"] in goal_event["assists"] or player["id"] in goal_event["assists"]):
                            has_match = True
                    else:
                        if player["nhl_id"] in goal_event["assists"] or player["id"] in goal_event["assists"]:
                            has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
        
        if "Primary Assisted By" in qualifiers:
            if event_name != "goal":
                return False

            for qual_object in qualifiers["Primary Assisted By"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if (player["nhl_id"] in goal_event["assists"] and goal_event["assists"].index(player["nhl_id"]) == 0) or (player["id"] in goal_event["assists"] and goal_event["assists"].index(player["id"]) == 0):
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

        if "Primary Assisted On" in qualifiers:
            if event_name != "assist":
                return False

            for qual_object in qualifiers["Primary Assisted On"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if (goal_event["scorer"] == player["nhl_id"] or goal_event["scorer"] == player["id"]) and goal_event["is_primary"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
            
        if "Primary Assisted With" in qualifiers:
            if event_name != "assist":
                return False

            for qual_object in qualifiers["Primary Assisted With"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if (player["nhl_id"] in goal_event["assists"] and goal_event["assists"].index(player["nhl_id"]) == 0) or (player["id"] in goal_event["assists"] and goal_event["assists"].index(player["id"]) == 0):
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
        
        if "Primary Points With" in qualifiers:
            if event_name != "assist" and event_name != "goal":
                return False

            for qual_object in qualifiers["Primary Points With"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if event_name == "assist":
                        if ((goal_event["scorer"] == player["nhl_id"] or goal_event["scorer"] == player["id"]) and goal_event["is_primary"]) or ((player["nhl_id"] in goal_event["assists"] and goal_event["assists"].index(player["nhl_id"]) == 0) or (player["id"] in goal_event["assists"] and goal_event["assists"].index(player["id"]) == 0)):
                            has_match = True
                    else:
                        if (player["nhl_id"] in goal_event["assists"] and goal_event["assists"].index(player["nhl_id"]) == 0) or (player["id"] in goal_event["assists"] and goal_event["assists"].index(player["id"]) == 0):
                            has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

        if "Hit On" in qualifiers:
            if event_name != "hit":
                return False

            for qual_object in qualifiers["Hit On"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if goal_event["hit_against"] == player["nhl_id"] or goal_event["hit_against"] == player["id"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
        
        if "Block On" in qualifiers:
            if event_name != "block":
                return False

            for qual_object in qualifiers["Block On"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False
                        
                has_match = False
                for player in qual_object["values"]:
                    if goal_event["block_against"] == player["nhl_id"] or goal_event["block_against"] == player["id"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

        if "Penalty On" in qualifiers:
            if event_name != "penalty":
                return False

            for qual_object in qualifiers["Penalty On"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if goal_event["player_penalty"] and (goal_event["penalty_against"] == player["nhl_id"] or goal_event["penalty_against"] == player["id"]):
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

        if "Faceoff Against" in qualifiers:
            if event_name != "faceoff":
                return False

            for qual_object in qualifiers["Faceoff Against"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False

                has_match = False
                for player in qual_object["values"]:
                    if goal_event["faceoff_against"] == player["nhl_id"] or goal_event["faceoff_against"] == player["id"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

        if "Fight Against" in qualifiers:
            if event_name != "penalty" or "secondary_type" not in goal_event or goal_event["secondary_type"] != "Fighting":
                return False
            for qual_object in qualifiers["Fight Against"]:
                has_match = False
                for player in qual_object["values"]:
                    if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                        has_match = True

                if not qual_object["negate"]:
                    if not has_match:
                        return False
                        
                has_match = False
                for player in qual_object["values"]:
                    if goal_event["fight_against"] == player["nhl_id"] or goal_event["fight_against"] == player["id"]:
                        has_match = True
            
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

    if "On Ice With" in qualifiers:
        if not perform_sub_on_ice_qual(qualifiers["On Ice With"], player_game_info["shift_data"], goal_event, row, goal_event["period"], goal_event["periodTime"], True, is_faceoff, False):
            return False
    
    if "On Ice Against" in qualifiers:
        if not perform_sub_on_ice_qual(qualifiers["On Ice Against"], player_game_info["shift_data"], goal_event, row, goal_event["period"], goal_event["periodTime"], False, is_faceoff, False):
            return False

    if "Team Score" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "teamGoals", qualifiers["Team Score"], player_game_info, year):
            return False
    
    if "Opponent Score" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "oppGoals", qualifiers["Opponent Score"], player_game_info, year):
            return False
    
    if "Score Margin" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "goalMargin", qualifiers["Score Margin"], player_game_info, year):
            return False
    
    if "Score Difference" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "goalMargin", qualifiers["Score Difference"], player_game_info, year, absolute=True):
            return False
    
    if "Period" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "period", qualifiers["Period"], player_game_info, year):
            return False
    
    if not "Shootout" in qualifiers and player_game_info["is_shootout"] and event_name != "penalty":
        if not perform_sub_metadata_qual(goal_event, "period", [{"negate" : False, "values" : {"start_val" : 1, "end_val" : 4}}], player_game_info, year):
            return False
    
    if "Period Time" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "periodTime", qualifiers["Period Time"], player_game_info, year):
            return False
    
    if "Period Time Remaining" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "periodTimeRemaining", qualifiers["Period Time Remaining"], player_game_info, year):
            return False
    
    if "Career Minute" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "career_minute", qualifiers["Career Minute"], player_game_info, year):
            return False
    
    if "Career Minute Reversed" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "career_minute_reversed", qualifiers["Career Minute Reversed"], player_game_info, year):
            return False
    
    if "Game Minute" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "game_minute", qualifiers["Game Minute"], player_game_info, year):
            return False
    
    if "Game Minute Reversed" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "game_minute_reversed", qualifiers["Game Minute Reversed"], player_game_info, year):
            return False
    
    if "Career Shot" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "career_shot", qualifiers["Career Shot"], player_game_info, year):
            return False
    
    if "Career Shot Reversed" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "career_shot_reversed", qualifiers["Career Shot Reversed"], player_game_info, year):
            return False
    
    if "Game Shot" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "game_shot", qualifiers["Game Shot"], player_game_info, year):
            return False
    
    if "Game Shot Reversed" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "game_shot_reversed", qualifiers["Game Shot Reversed"], player_game_info, year):
            return False
    
    if "Penalty Shot" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "penaltyShot", qualifiers["Penalty Shot"], player_game_info, year):
            return False
    
    if "Shootout" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "shootout", qualifiers["Shootout"], player_game_info, year):
            return False
    
    if "Overtime" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "overtime", qualifiers["Overtime"], player_game_info, year):
            return False

    if "Game Winning" in qualifiers:
        if not perform_bool_qual(goal_event, "gameWinningGoal", qualifiers["Game Winning"]):
            return False
    
    if "Coordinates" in qualifiers:
        if not perform_coordinates_qual(goal_event, qualifiers["Coordinates"]):
            return False

    if "Offensive Zone" in qualifiers:
        if not perform_zone_qual(goal_event, "OZ", qualifiers["Offensive Zone"]):
            return False

    if "Defensive Zone" in qualifiers:
        if not perform_zone_qual(goal_event, "DZ", qualifiers["Defensive Zone"]):
            return False
            
    if "Neutral Zone" in qualifiers:
        if not perform_zone_qual(goal_event, "NZ", qualifiers["Neutral Zone"]):
            return False
    
    if "Event Time" in qualifiers:
        if "event_time" not in goal_event:
            return False

        event_time = goal_event["event_time"]
        if not event_time:
            return False
        event_time = event_time.time().replace(microsecond=0)

        for qual_object in qualifiers["Event Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            event_time = event_time.astimezone(pytz.timezone(qual_object["values"]["time_zone"])).time().replace(microsecond=0)
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Unassisted" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "unassisted", qualifiers["Unassisted"], player_game_info, year):
            return False
    
    if "Penalty Type" in qualifiers:
        if not perform_sub_metadata_qual(goal_event, "penaltType", qualifiers["Unassisted"], player_game_info, year):
            return False
    
    if "Strength" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Strength", qualifiers["Strength"], is_faceoff):
            return False
    
    if "Even Skaters" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Even Skaters", qualifiers["Even Skaters"], is_faceoff):
            return False

    if "More Skaters" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "More Skaters", qualifiers["More Skaters"], is_faceoff):
            return False
    
    if "Less Skaters" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Less Skaters", qualifiers["Less Skaters"], is_faceoff):
            return False
    
    if "Team Goalie Pulled" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Team Goalie Pulled", qualifiers["Team Goalie Pulled"], is_faceoff):
            return False
    
    if "Opponent Goalie Pulled" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Opponent Goalie Pulled", qualifiers["Opponent Goalie Pulled"], is_faceoff):
            return False
    
    if "Team Skaters" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Team Skaters", qualifiers["Team Skaters"], is_faceoff):
            return False
    
    if "Opponent Skaters" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Opponent Skaters", qualifiers["Opponent Skaters"], is_faceoff):
            return False
    
    if "Team Players" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Team Players", qualifiers["Team Players"], is_faceoff):
            return False
    
    if "Opponent Players" in qualifiers:
        if not perform_strength_qual(player_game_info, goal_event, "Opponent Players", qualifiers["Opponent Players"], is_faceoff):
            return False

    if "Power Play" in qualifiers:
        if not perform_penalty_strength_qual(player_game_info, goal_event, "PP", qualifiers["Power Play"]):
            return False

    if "Short Handed" in qualifiers:
        if not perform_penalty_strength_qual(player_game_info, goal_event, "SH", qualifiers["Short Handed"]):
            return False

    if "Even Strength" in qualifiers:
        if not perform_penalty_strength_qual(player_game_info, goal_event, "EV", qualifiers["Even Strength"]):
            return False
    
    if "Event Formula" in qualifiers:
        if not perform_formula_qual(goal_event, qualifiers["Event Formula"]):
            return False

    return True

def perform_formula_qual(goal_event, qualifiers):
    goal_event_copy = {}
    for copy_key in goal_event:
        goal_event_copy[copy_key.lower()] = goal_event[copy_key]
    for qual_object in qualifiers:
        formula = qual_object["values"][0]
        try:
            has_match = bool(calculate_formula("custom_formula", {"da_type" : {"type" : "Skater"}}, formula, goal_event_copy, [], None, safe_eval=True))
        except Exception:
            return False
        if qual_object["negate"]:
            if has_match:
                return False
        else:
            if not has_match:
                return False
    
    return True

def perform_on_ice_quals(qualifiers, shift_data, goal_event, row, period, second):
    teammate_on_ice_quals = qualifiers.get("Assisted By", []) + qualifiers.get("Assisted On", []) + qualifiers.get("Assisted With", []) + qualifiers.get("Points With", []) + qualifiers.get("Primary Assisted By", []) + qualifiers.get("Primary Assisted On", []) + qualifiers.get("Primary Assisted With", []) + qualifiers.get("Primary Points With", [])   
    if not perform_sub_on_ice_qual(teammate_on_ice_quals, shift_data, goal_event, row, period, second, True, False, True):
        return False

    teammate_off_ice_quals = qualifiers.get("Shot On", []) + qualifiers.get("Hit On", []) + qualifiers.get("Penalty On", []) + qualifiers.get("Faceoff Against", []) + qualifiers.get("Fight Against", [])
    if not perform_sub_on_ice_qual(teammate_off_ice_quals, shift_data, goal_event, row, period, second, False, False, True):
        return False

    return True

def perform_sub_on_ice_qual(qualifers, shift_data, goal_event, row, period, second, is_team, is_faceoff, skip_negative):
    has_row_match = True
    team_on_ice = goal_event["team_on_ice"] if "team_on_ice" in goal_event else None
    opp_on_ice = goal_event["opp_on_ice"] if "opp_on_ice" in goal_event else None
    for qual_object in qualifers:
        if qual_object["negate"] and skip_negative:
            continue

        has_match = False
        for player in qual_object["values"]:
            if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                has_match = True

        if not qual_object["negate"]:
            if not has_match:
                return False

        has_match = False
        for player in qual_object["values"]:
            if is_player_on_ice(shift_data, team_on_ice, opp_on_ice, period, second, player["nhl_id"], is_team, is_faceoff):
                has_match = True
        if qual_object["negate"]:
            if has_match:
                has_row_match = False
        else:
            if not has_match:
                has_row_match = False

    return has_row_match

def perform_strength_qual(player_game_info, goal_event, qual_type, qualifiers, is_faceoff=False):
    has_row_match = True
    team_skaters, team_goalies, opp_skaters, opp_goalies, has_shift = get_on_ice_info(player_game_info, goal_event, goal_event["period"], goal_event["periodTime"], is_faceoff)
    team_players = team_skaters + team_goalies
    opp_players = opp_skaters + opp_goalies
    if not has_shift:
        return False
    for qual_object in qualifiers:
        has_match = False
        if qual_type == "Strength":
            if qual_object["values"]["team_skaters"] > 5:
                has_match = team_skaters == qual_object["values"]["team_skaters"] and team_goalies == 0
            else:
                has_match = team_skaters == qual_object["values"]["team_skaters"] and team_goalies == 1
            if has_match:
                if qual_object["values"]["opp_skaters"] > 5:
                    has_match = opp_skaters == qual_object["values"]["opp_skaters"] and opp_goalies == 0
                else:
                    has_match = opp_skaters == qual_object["values"]["opp_skaters"] and opp_goalies == 1
        elif qual_type == "Even Skaters":
            has_match = team_skaters == opp_skaters
        elif qual_type == "More Skaters":
            has_match = team_skaters > opp_skaters
        elif qual_type == "Less Skaters":
            has_match = team_skaters < opp_skaters
            has_match = team_players < opp_players
        elif qual_type == "Team Goalie Pulled":
            has_match = team_goalies == 0
        elif qual_type == "Opponent Goalie Pulled":
            has_match = opp_goalies == 0
        elif qual_type == "Team Skaters":
            has_match = team_skaters >= qual_object["values"]["start_val"] and team_skaters <= qual_object["values"]["end_val"]
        elif qual_type == "Opponent Skaters":
            has_match = opp_skaters >= qual_object["values"]["start_val"] and opp_skaters <= qual_object["values"]["end_val"]
        elif qual_type == "Team Players":
            has_match = team_players >= qual_object["values"]["start_val"] and team_players <= qual_object["values"]["end_val"]
        elif qual_type == "Opponent Players":
            has_match = opp_players >= qual_object["values"]["start_val"] and opp_players <= qual_object["values"]["end_val"]
        if qual_object["negate"]:
            if has_match:
                has_row_match = False
        else:
            if not has_match:
                has_row_match = False
    return has_row_match

def perform_zone_qual(goal_event, zone, qualifiers):
    has_row_match = True
    if "zone" not in goal_event or goal_event["zone"] == None:
        return False
    for qual_object in qualifiers:
        has_match = goal_event["zone"] == zone
        if qual_object["negate"]:
            if has_match:
                has_row_match = False
        else:
            if not has_match:
                has_row_match = False
    return has_row_match

def perform_bool_qual(goal_event, str_attr, qualifiers):
    has_row_match = True
    if str_attr not in goal_event or goal_event[str_attr] == None:
        return False
    for qual_object in qualifiers:
        has_match = goal_event[str_attr]
        if qual_object["negate"]:
            if has_match:
                has_row_match = False
        else:
            if not has_match:
                has_row_match = False
    return has_row_match

def perform_penalty_strength_qual(player_game_info, goal_event, qual_strength, qualifiers):
    has_row_match = True
    strength = determine_strength(player_game_info, goal_event["period"], goal_event["periodTime"], goal_event)
    if not strength:
        return None

    for qual_object in qualifiers:
        has_match = strength == qual_strength
        if qual_object["negate"]:
            if has_match:
                has_row_match = False
        else:
            if not has_match:
                has_row_match = False
    return has_row_match

def perform_sub_metadata_qual(event, attr_str, qualifiers, player_game_info, year, absolute=False):
    if attr_str == "penaltyShot":
        if "penaltyShot" not in event:
            return False
            
        for qual_object in qualifiers:
            if qual_object["negate"]:
                if event["penaltyShot"]:
                    return False
            else:
                if not event["penaltyShot"]:
                    return False
    elif attr_str == "shootout":
        for qual_object in qualifiers:
            if qual_object["negate"]:
                if event["period"] == 5 and player_game_info["is_shootout"]:
                    return False
            else:
                if not (event["period"] == 5 and player_game_info["is_shootout"]):
                    return False
    elif attr_str == "overtime":
        for qual_object in qualifiers:
            if qual_object["negate"]:
                if event["period"] == 4 or (not player_game_info["is_shootout"] and event["period"] > 4):
                    return False
            else:
                if not (event["period"] == 4 or (not player_game_info["is_shootout"] and event["period"] > 4)):
                    return False
    elif attr_str == "unassisted":
        if "assists" not in event:
            return False
            
        for qual_object in qualifiers:
            if qual_object["negate"]:
                if not event["assists"]:
                    return False
            else:
                if event["assists"]:
                    return False
    elif attr_str == "penaltType":
        if "secondary_type" not in event:
            return False
            
        for qual_object in qualifiers:
            if qual_object["negate"]:
                if event["secondary_type"] in qual_object["values"]:
                    return False
            else:
                if not event["secondary_type"] in qual_object["values"]:
                    return False
    else:
        if attr_str not in event or event[attr_str] == None:
            return False

        num_val = event[attr_str]
        if absolute:
            num_val = abs(num_val)

        for qual_object in qualifiers:
            if qual_object["negate"]:
                if num_val >= qual_object["values"]["start_val"] and num_val <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (num_val >= qual_object["values"]["start_val"] and num_val <= qual_object["values"]["end_val"]):
                    return False
    return True

def perform_coordinates_qual(event, qualifiers):
    if "x_coords" not in event or event["x_coords"] == None or "y_coords" not in event or event["y_coords"] == None:
        return False
        
    has_row_match = True
    for qual_object in qualifiers:
        stat_val_x = qual_object["values"]["x_coords"]["start_val"]
        stat_val_y = qual_object["values"]["y_coords"]["start_val"]
        end_val_x = qual_object["values"]["x_coords"]["end_val"]
        end_val_y = qual_object["values"]["y_coords"]["end_val"]

        x_val = event["x_coords"]
        y_val = event["y_coords"]

        if qual_object["negate"]:
            if not ((x_val >= stat_val_x and x_val <= end_val_x) and (y_val >= stat_val_y and y_val <= end_val_y)):
                has_count_match = True
                break
        else:
            if (x_val >= stat_val_x and x_val <= end_val_x) and (y_val >= stat_val_y and y_val <= end_val_y):
                has_count_match = True
                break
        if not has_count_match:
            has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def clear_row_attrs(row, player_type):
    row["Per"] = 0
    if player_type["da_type"]["type"] == "Skater":
        row["G"] = 0
        row["A"] = 0
        row["P"] = 0
        row["A1"] = 0
        row["A2"] = 0
        row["P1"] = 0

        row["PlusMinus"] = 0

        row["EVG"] = 0
        row["EVA"] = 0
        row["EVP"] = 0
        row["EVA1"] = 0
        row["EVA2"] = 0
        row["EVP1"] = 0

        row["PPG"] = 0
        row["PPA"] = 0
        row["PPP"] = 0
        row["PPA1"] = 0
        row["PPA2"] = 0
        row["PPP1"] = 0

        row["SHG"] = 0
        row["SHA"] = 0
        row["SHP"] = 0
        row["SHA1"] = 0
        row["SHA2"] = 0
        row["SHP1"] = 0

        row["S"] = 0
        row["WristS"] = 0
        row["DeflectS"] = 0
        row["SlapS"] = 0
        row["SnapS"] = 0
        row["TipS"] = 0
        row["BackS"] = 0
        row["WrapS"] = 0
        row["WristG"] = 0
        row["DeflectG"] = 0
        row["SlapG"] = 0
        row["SnapG"] = 0
        row["TipG"] = 0
        row["BackG"] = 0
        row["WrapG"] = 0
        row["TSA"] = 0
        row["TSM"] = 0
        row["TSB"] = 0
        row["TK"] = 0
        row["GV"] = 0
        row["FO"] = 0
        row["FOW"] = 0
        row["FOL"] = 0
        row["OZFO"] = 0
        row["OZFOW"] = 0
        row["OZFOL"] = 0
        row["DZFO"] = 0
        row["DZFOW"] = 0
        row["DZFOL"] = 0
        row["NZFO"] = 0
        row["NZFOW"] = 0
        row["NZFOL"] = 0
        row["OZ"] = 0
        row["NZ"] = 0
        row["DZ"] = 0

        row["oiTmS"] = 0
        row["oiOppS"] = 0

        row["HAT"] = 0
        row["GWG"] = 0
        row["OTG"] = 0
        row["1stG"] = 0
        row["ENG"] = 0
        row["ENA"] = 0
        row["ENP"] = 0

        row["HIT"] = 0
        row["BLK"] = 0
        row["Post/Bar"] = 0

        row["PIM"] = 0
        row["PEN"] = 0
        row["PenDrawn"] = 0
        row["NetPEN"] = 0
        row["Minor"] = 0
        row["Major"] = 0
        row["Match"] = 0
        row["Misconduct"] = 0
        row["GameMisconduct"] = 0
        row["Fight"] = 0

        row["CF"] = 0
        row["CA"] = 0
        row["FF"] = 0
        row["FA"] = 0
        row["GF"] = 0
        row["EVGF"] = 0
        row["GA"] = 0
        row["EVGA"] = 0

        row["offICF"] = 0
        row["offIFF"] = 0
        row["offICA"] = 0
        row["offIFA"] = 0

        row["G_5v5"] = 0
        row["A_5v5"] = 0
        row["P_5v5"] = 0
        row["A1_5v5"] = 0
        row["A2_5v5"] = 0
        row["P1_5v5"] = 0
        row["S_5v5"] = 0
        row["TSA_5v5"] = 0
        row["TSM_5v5"] = 0
        row["TSB_5v5"] = 0
        row["CF_5v5"] = 0
        row["CA_5v5"] = 0
        row["FF_5v5"] = 0
        row["FA_5v5"] = 0
    else:
        row["GA"] = 0
        row["GF"] = 0
        row["SV"] = 0
        row["SA"] = 0
        row["SH"] = 0
        row["EVGA"] = 0
        row["PPGA"] = 0
        row["SHGA"] = 0
        row["EVSH"] = 0
        row["PPSH"] = 0
        row["SHSH"] = 0

def calculate_row_attrs(row, player_type):
    if player_type["da_type"]["type"] == "Skater":
        row["P"] = row["G"] + row["A"]
        row["P1"] = row["G"] + row["A1"]

        row["P_5v5"] = row["G_5v5"] + row["A_5v5"]
        row["P1_5v5"] = row["G_5v5"] + row["A1_5v5"]

        row["EVP"] = row["EVG"] + row["EVA"]
        row["EVP1"] = row["EVG"] + row["EVA1"]

        row["PPP"] = row["PPG"] + row["PPA"]
        row["PPP1"] = row["PPG"] + row["PPA1"]

        row["SHP"] = row["SHG"] + row["SHA"]
        row["SHP1"] = row["SHG"] + row["SHA1"]

        row["ENP"] = row["ENG"] + row["ENA"]

        row["HAT"] = int(row["G"] >= 3)

        row["NetPEN"] = row["PenDrawn"] - row["PEN"]

def handle_awards(player_page, player_data, player_type, time_frame, years_to_skip, years_to_skip_champ, all_rows):
    all_star_div = player_page.find("div", id="leaderboard_honors")
    comments = None
    if not all_star_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="leaderboard_honors")
            if temp_div:
                all_star_div = temp_div
                break
                
    if all_star_div:
        all_star_rows = all_star_div.find("table").find_all("td")
        unique_years = set()
        for all_star_row in all_star_rows:
            all_start_txt = str(all_star_row.text)
            if "NHL All-Star Team" in all_start_txt:
                year_str = all_start_txt.split()[0].split("-")[0]
                if year_str.isdigit():
                    year = int(year_str)
                    if int(year) not in years_to_skip:
                        level = "AllStar:1st" if "(1st)" in all_start_txt else "AllStar:2nd"
                        for row in all_rows:
                            if row["Year"] == year:
                                if not level in row:
                                    row[level] = 0
                                row[level] += 1
                                if year not in unique_years:
                                    if not "AllStar:Unique" in row:
                                        row["AllStar:Unique"] = 0
                                    row["AllStar:Unique"] += 1
                                    unique_years.add(year)
                                break

    awards_div = player_page.find("div", id="leaderboard_awards")
    if not awards_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="leaderboard_awards")
            if temp_div:
                awards_div = temp_div
                break
                
    if awards_div:
        awards_table_rows = awards_div.find("table").find_all("td")
        for awards_table_row in awards_table_rows:
            award_text = str(awards_table_row.text)
            if "NHL" in award_text:
                if award_text.endswith("Hart Memorial Trophy"):
                    year = int(award_text.split()[0].split("-")[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Year"] == year:
                                if not "Hart" in row:
                                    row["Hart"] = 0
                                row["Hart"] += 1
                                break    
                elif award_text.endswith("Ted Lindsay Award"):
                    year = int(award_text.split()[0].split("-")[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Year"] == year:
                                if not "Lindsay" in row:
                                    row["Lindsay"] = 0
                                row["Lindsay"] += 1
                                break
                elif award_text.endswith("James Norris Memorial Trophy"):
                    if player_type["da_type"]["type"] == "Skater":
                        year = int(award_text.split()[0].split("-")[0])
                        if int(year) not in years_to_skip:
                            for row in all_rows:
                                if row["Year"] == year:
                                    if not "Norris" in row:
                                        row["Norris"] = 0
                                    row["Norris"] += 1
                                    break
                elif award_text.endswith("Frank J. Selke Trophy"):
                    if player_type["da_type"]["type"] == "Skater":
                        year = int(award_text.split()[0].split("-")[0])
                        if int(year) not in years_to_skip:
                            for row in all_rows:
                                if row["Year"] == year:
                                    if not "Selke" in row:
                                        row["Selke"] = 0
                                    row["Selke"] += 1
                                    break
                elif award_text.endswith("Calder Memorial Trophy"):
                    year = int(award_text.split()[0].split("-")[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Year"] == year:
                                if not "Calder" in row:
                                    row["Calder"] = 0
                                row["Calder"] += 1
                                break
                elif award_text.endswith("Conn Smythe Trophy"):
                    year = int(award_text.split()[0].split("-")[0])
                    for row in all_rows:
                        if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                            if row["Year"] == year:
                                if not "Smythe" in row:
                                    row["Smythe"] = 0
                                row["Smythe"] += 1
                                break
                elif award_text.endswith("Vezina Trophy"):
                    if player_type["da_type"]["type"] != "Skater":
                        year = int(award_text.split()[0].split("-")[0])
                        if int(year) not in years_to_skip:
                            for row in all_rows:
                                if row["Year"] == year:
                                    if not "Vezina" in row:
                                        row["Vezina"] = 0
                                    row["Vezina"] += 1
                                    break
                elif award_text.endswith("William M. Jennings Trophy"):
                    if player_type["da_type"]["type"] != "Skater":
                        year = int(award_text.split()[0].split("-")[0])
                        if int(year) not in years_to_skip:
                            for row in all_rows:
                                if row["Year"] == year:
                                    if not "Jennings" in row:
                                        row["Jennings"] = 0
                                    row["Jennings"] += 1
                                    break
    
    champs_div = player_page.find("div", id="leaderboard_champs")
    if not champs_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="leaderboard_champs")
            if temp_div:
                champs_div = temp_div
                break
                
    if champs_div:
        champs_table_rows = champs_div.find("table").find_all("td")
        for champs_table_row in champs_table_rows:
            champs_text = str(champs_table_row.text)
            if champs_text.endswith("(NHL)"):
                year = int(champs_text.split()[0]) - 1
                for row in all_rows:
                    if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                        if row["Year"] == year:
                            if not "Cup" in row:
                                row["Cup"] = 0
                            row["Cup"] += 1
                            break
    
    if player_type["da_type"]["type"] == "Skater":
        table_names = ["stats_basic_plus_nhl", "stats_basic_nhl"]
        for table_name in table_names:
            per_game_table = player_page.find("table", id=table_name)
            if not awards_div:
                if not comments:
                    comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_div = temp_soup.find("table", id=table_name)
                    if temp_div:
                        per_game_table = temp_div
                        break
            
            if per_game_table:
                standard_table_rows = per_game_table.find_all("tr")
                for row in standard_table_rows:
                    row_id = row.get("id")
                    match = False
                    if row_id:
                        match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                    elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class") and not "blank_table" in row.get("class"):
                        match = True
                    if match:
                        year = int(str(row.find("th").find(text=True)).split("-")[0])
                        if int(year) not in years_to_skip:
                            if year < current_season or show_title_current_season:
                                goals_row = row.find("td", {"data-stat" : "goals"})
                                if goals_row and goals_row.find("strong"):
                                    for row_data in all_rows:
                                        if row_data["Year"] == year:
                                            if not "GLeader" in row_data:
                                                row_data["GLeader"] = 0
                                            row_data["GLeader"] += 1
                                            break
                                assists_row = row.find("td", {"data-stat" : "assists"})
                                if assists_row and assists_row.find("strong"):
                                    for row_data in all_rows:
                                        if row_data["Year"] == year:
                                            if not "ALeader" in row_data:
                                                row_data["ALeader"] = 0
                                            row_data["ALeader"] += 1
                                            break
                                pts_row = row.find("td", {"data-stat" : "points"})
                                if pts_row and pts_row.find("strong"):
                                    for row_data in all_rows:
                                        if row_data["Year"] == year:
                                            if not "PLeader" in row_data:
                                                row_data["PLeader"] = 0
                                            row_data["PLeader"] += 1
                                            break
    valid_years = {}
    for row in all_rows:
        year = str(row["Year"])
        if int(year) not in years_to_skip:
            if year in award_results:
                for award_name in award_results[year]:
                    if award_name in headers[player_type["da_type"]["type"]]:
                        if not award_name in valid_years:
                            valid_years[award_name] = set()
                        if year not in valid_years[award_name] and player_data["id"] in award_results[year][award_name]:
                            valid_years[award_name].add(year)
                            row_award_name = award_name + "Shares"
                            if not row_award_name in row:
                                row[row_award_name] = 0
                            row[row_award_name] += award_results[year][award_name][player_data["id"]] / award_results[year][award_name]["vote_denom"]
    
    if player_data["id"] in manual_awards_map:
        if player_type["da_type"]["type"] in manual_awards_map[player_data["id"]]:
            for row in all_rows:
                if row["Year"] not in years_to_skip:
                    if row["Year"] in manual_awards_map[player_data["id"]][player_type["da_type"]["type"]]:
                        for award_stat in manual_awards_map[player_data["id"]][player_type["da_type"]["type"]][row["Year"]]:
                            has_row_match = False
                            for sub_row in all_rows:
                                if sub_row["Year"] == row["Year"] and award_stat in sub_row and sub_row[award_stat] != 0:
                                    has_row_match = True

                            if not has_row_match:
                                if not award_stat in row:
                                    row[award_stat] = 0.0
                                row[award_stat] += manual_awards_map[player_data["id"]][player_type["da_type"]][row["Year"]][award_stat]

def handle_leading_seasons(player_page, player_data, player_type, time_frame, years_to_skip, all_rows, seasons_leading_start, seasons_leading_end):   
    if player_type["da_type"]["type"]:
        for header in div_id_to_stat[player_type["da_type"]["type"]].values():
            for row in all_rows:
                row[header] = 0.0

    comments = None
    count_div = player_page.find("div", id="div_leaderboard")
    if not count_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="div_leaderboard")
            if temp_div:
                count_div = temp_div
                break

    if not count_div:
        return
        
    for div_id in div_id_to_stat[player_type["da_type"]["type"]]:
        sub_count_div = count_div.find("div", id=div_id)
        if sub_count_div:
            stat = div_id_to_stat[player_type["da_type"]["type"]][div_id]
            count_table_rows = sub_count_div.find("table").find_all("tr")
            parsed_years = set()
            for count_table_row in count_table_rows:
                count_table_link = count_table_row.find("a")
                match = re.search(r".* \((\S+)\)", str(count_table_row.text))
                year_str = str(count_table_link.find(text=True)).split("-")[0].split()[0]
                if year_str.isdigit() and match:
                    year = int(year_str)
                    if year < current_season or True:
                        if not year in parsed_years:
                            lead_num = ordinal_to_number(match.group(1))
                            if int(year) not in years_to_skip:
                                for row in all_rows:
                                    if row["Year"] == year:
                                        if lead_num >= seasons_leading_start and lead_num <= seasons_leading_end:
                                            row[stat] = 1
                                        parsed_years.add(year)
                                        break
        
    
    table_names = ["stats_basic_plus_nhl", "stats_basic_nhl"]
    comments = None
    parsed_years = set()
    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                if row.find("td", {"data-stat" : "award_summary"}) and row.find("td", {"data-stat" : "award_summary"}).text:
                    award_row = str(row.find("td", {"data-stat" : "award_summary"}).text).split(",")
                    year = int(str(row.find("th", {"data-stat" : "season"}).find(text=True)).split("-")[0])
                    if year < current_season or True:
                        if not year in parsed_years:
                            if int(year) not in years_to_skip:
                                for row_data in all_rows:
                                    if row_data["Year"] == year:
                                        for award_text in award_row:
                                            award_text_split = award_text.split("-")
                                            award_name = award_text_split[0]
                                            lead_num = int(award_text_split[1])
                                            if lead_num >= seasons_leading_start and lead_num <= seasons_leading_end:
                                                row_data[award_name] = 1
                                        parsed_years.add(year)
                                        break

def perform_post_qualifier(player_data, player_type, row, qualifiers, all_rows):
    if "Stat" in qualifiers:
        stats = set()
        find_stat_match(qualifiers["Stat"], player_type, stats)
        row_lower = fill_row(row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                stat = sub_qual_object["stat"]

                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Formula" in qualifiers:
        stats = set()
        for qual_object in qualifiers["Formula"]:
            formula = qual_object["values"][0]
            for header in headers[player_type["da_type"]["type"]].keys():
                match = re.search(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(header.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", formula)
                if not match:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and header_stat.lower() == header.lower():
                            header = headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower()
                    match = re.search(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(header.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", formula)
                if match:
                    stats.add(header)
            
        row_normal = fill_row(row, player_data, player_type, lower=False, stats=stats)
        for qual_object in qualifiers["Formula"]:
            formula = qual_object["values"][0]
            try:
                has_match = bool(calculate_formula("custom_formula", player_type, formula, row_normal, all_rows, player_data, safe_eval=True))
            except Exception:
                return False

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Stat" in qualifiers:
        if not row["Previous Row"]:
            return False
        stats = set()
        find_stat_match(qualifiers["Previous Stat"], player_type, stats)
        prev_row = row["Previous Row"]
        row_lower = fill_row(prev_row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Previous Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                stat = sub_qual_object["stat"]

                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Stat" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        stats = set()
        find_stat_match(qualifiers["Upcoming Stat"], player_type, stats)
        upc_row = row["Upcoming Row"]
        row_lower = fill_row(upc_row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Upcoming Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                stat = sub_qual_object["stat"]

                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    return True

def perform_qualifier(player_data, player_type, row, time_frame, all_rows):
    qualifiers = time_frame["qualifiers"]

    if "fake_playoff_row" in row and row["fake_playoff_row"]:
        return True

    if "Rookie" in qualifiers:
        for qual_object in qualifiers["Rookie"]:
            if qual_object["negate"]:
                if row["Year"] in qual_object["values"]:
                    return False
            else:
                if not row["Year"] in qual_object["values"]:
                    return False
    
    if "Facing Former Team" in qualifiers:
        for qual_object in qualifiers["Facing Former Team"]:
            has_match =  row["Opponent"].upper() in player_data["valid_teams_order"]["team"]
            if has_match:
                if isinstance(player_data["valid_teams_order"]["team"][row["Opponent"].upper()], int):
                    has_match = row["Year"] > player_data["valid_teams_order"]["team"][row["Opponent"].upper()]
                else:
                    has_match = row["Date"] > player_data["valid_teams_order"]["team"][row["Opponent"].upper()]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Former Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Opponent"].upper()
        team_franchise = team_main_abbr[year][team]

        for qual_object in qualifiers["Facing Former Franchise"]:
            has_match =  team_franchise in player_data["valid_teams_order"]["franchise"]
            if has_match:
                if isinstance(player_data["valid_teams_order"]["franchise"][team_franchise], int):
                    has_match = row["Year"] > player_data["valid_teams_order"]["franchise"][team_franchise]
                else:
                    has_match = row["Date"] > player_data["valid_teams_order"]["franchise"][team_franchise]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "With New Team" in qualifiers:
        for qual_object in qualifiers["With New Team"]:
            has_match = row["Tm"] != list(player_data["valid_team_ranges"]["team"].keys())[0]
            if has_match:
                first_year = list(player_data["valid_team_ranges"]["team"][row["Tm"]].keys())[0]
                has_match = row["Year"] == first_year
                if has_match:
                    first_range = player_data["valid_team_ranges"]["team"][row["Tm"]][first_year][0]
                    has_match = row["Date"] >= first_range["start"] and row["Date"] <= first_range["end"]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "With New Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Opponent"].upper()
        sleague = get_team_league(team, year)
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["With New Franchise"]:
            has_match = team_franchise != list(player_data["valid_team_ranges"]["franchise"].keys())[0]
            if has_match:
                first_year = list(player_data["valid_team_ranges"]["franchise"][team_franchise].keys())[0]
                has_match = row["Year"] == first_year
                if has_match:
                    first_range = player_data["valid_team_ranges"]["franchise"][team_franchise][first_year][0]
                    has_match = row["Date"] >= first_range["start"] and row["Date"] <= first_range["end"]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Decision" in qualifiers:
        for qual_object in qualifiers["Decision"]:
            if qual_object["negate"]:
                if not row.get("ND", 0):
                    return False
            else:
                if row.get("ND", 0):
                    return False

    if "Season Age" in qualifiers:
        for qual_object in qualifiers["Season Age"]:
            player_age_date = player_season_age_date.replace(year=row["Year"] + 1)
            player_delt = dateutil.relativedelta.relativedelta(player_age_date, player_data["Birthday"])
            player_delt_start = qual_object["time_unit_start"].year if qual_object["time_unit_start"] == datetime.date.min else qual_object["time_unit_start"].years
            player_delt_end = qual_object["time_unit_end"].year if qual_object["time_unit_end"] == datetime.date.max else qual_object["time_unit_end"].years
            if qual_object["negate"]:
                if player_delt.years >= player_delt_start and player_delt.years <= player_delt_end:
                    return False
            else:
                if not (player_delt.years >= player_delt_start and player_delt.years <= player_delt_end):
                    return False

    if "Age" in qualifiers:
        for qual_object in qualifiers["Age"]:
            player_delt_start = datetime.date.min if qual_object["time_unit_start"] == datetime.date.min else player_data["Birthday"] + qual_object["time_unit_start"]
            player_delt_end = datetime.date.max if qual_object["time_unit_end"] == datetime.date.max else player_data["Birthday"] + qual_object["time_unit_end"]
            if qual_object["negate"]:
                if row["Date"] >= player_delt_start and row["Date"] <= player_delt_end:
                    return False
            else:
                if not (row["Date"] >= player_delt_start and row["Date"] <= player_delt_end):
                    return False

    if "First Half" in qualifiers:
        if row["TmGm"] == None:
            return False

        for qual_object in qualifiers["First Half"]:
            year = row["Year"]
            if str(year) in all_star_games:
                all_star_date = dateutil.parser.parse(all_star_games[str(year)])
                all_star_date = all_star_date.replace(year=year+1)
                if qual_object["negate"]:
                    if row["Date"] < all_star_date.date():
                        return False
                else:
                    if row["Date"] >= all_star_date.date():
                        return False
            else:
                is_first_half = row["TmGm"] / player_data["team_games_map"][row["Year"]][row["Tm"]] <= 0.5
                if qual_object["negate"]:
                    if is_first_half:
                        return False
                else:
                    if not is_first_half:
                        return False

    if "Second Half" in qualifiers:
        if row["TmGm"] == None:
            return False

        for qual_object in qualifiers["Second Half"]:
            year = row["Year"]
            if str(year) in all_star_games:
                all_star_date = dateutil.parser.parse(all_star_games[str(year)])
                all_star_date = all_star_date.replace(year=year+1)
                if qual_object["negate"]:
                    if row["Date"] >= all_star_date.date():
                        return False
                else:
                    if row["Date"] < all_star_date.date():
                        return False
            else:
                is_second_half = row["TmGm"] / player_data["team_games_map"][row["Year"]][row["Tm"]] > 0.5
                if qual_object["negate"]:
                    if is_second_half:
                        return False
                else:
                    if not is_second_half:
                        return False
    
    if "Pre All-Star" in qualifiers:
        year = row["Year"]
        if str(year) not in all_star_games:
            return False

        for qual_object in qualifiers["Pre All-Star"]:
            all_star_date = dateutil.parser.parse(all_star_games[str(year)])
            all_star_date = all_star_date.replace(year=year)
            if qual_object["negate"]:
                if row["Date"] < all_star_date.date():
                    return False
            else:
                if row["Date"] >= all_star_date.date():
                    return False
    
    if "Post All-Star" in qualifiers:
        year = row["Year"]
        if str(year) not in all_star_games:
            return False

        for qual_object in qualifiers["Post All-Star"]:
            all_star_date = dateutil.parser.parse(all_star_games[str(year)])
            all_star_date = all_star_date.replace(year=year)
            if qual_object["negate"]:
                if row["Date"] >= all_star_date.date():
                    return False
            else:
                if row["Date"] < all_star_date.date():
                    return False
    
    if "Complete Game" in qualifiers:
        is_complete = bool(row.get("CG", 0))
        for qual_object in qualifiers["Complete Game"]:
            if qual_object["negate"]:
                if is_complete:
                    return False
            else:
                if not is_complete:
                    return False

    if "Location" in qualifiers:
        for qual_object in qualifiers["Location"]:
            if row["Location"]:
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            else:
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False
    
    if "Temperate Season" in qualifiers:
        for qual_object in qualifiers["Temperate Season"]:
            winter_start = ephem.localtime(ephem.previous_winter_solstice(str(row["Year"]))).date()
            spring_start = ephem.localtime(ephem.next_spring_equinox(str(row["Year"]))).date()
            summer_start = ephem.localtime(ephem.next_summer_solstice(str(row["Year"]))).date()
            fall_start = ephem.localtime(ephem.next_fall_equinox(str(row["Year"]))).date()
            winter_2_start = ephem.localtime(ephem.next_winter_solstice(str(row["Year"]))).date()

            season = None
            if row["Date"] >= winter_start and row["Date"] < spring_start:
                season = "Winter"
            elif row["Date"] >= spring_start and row["Date"] < summer_start:
                season = "Spring"
            elif row["Date"] >= summer_start and row["Date"] < fall_start:
                season = "Summer"
            elif row["Date"] >= fall_start and row["Date"] < winter_2_start:
                season = "Fall"
            else:
                season = "Winter"

            if qual_object["negate"]:
                if season in qual_object["values"]:
                    return False
            else:
                if not season in qual_object["values"]:
                    return False

    if "Previous Location" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Location"]:
            if row["Previous Row"]["Location"]:
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            elif row["Previous Row"]["Location"] == False:
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False

    if "Upcoming Location" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Location"]:
            if row["Upcoming Row"]["Location"]:
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            elif row["Upcoming Row"]["Location"] == False:
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False

    if "Team" in qualifiers:
        for qual_object in qualifiers["Team"]:
            if qual_object["negate"]:
                if row["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Tm"].lower() in qual_object["values"]:
                    return False

    if "Opponent" in qualifiers:
        for qual_object in qualifiers["Opponent"]:
            if qual_object["negate"]:
                if row["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Opponent"] in qual_object["values"]:
                    return False
    
    if "Team Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Tm"].upper()
        team_franchise = team_main_abbr[year][team]

        for qual_object in qualifiers["Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Opponent Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Opponent"].upper()
        team_franchise = team_main_abbr[year][team]

        for qual_object in qualifiers["Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False

    if "Previous Team" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Team"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Previous Row"]["Tm"].lower() in qual_object["values"]:
                    return False

    if "Previous Opponent" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Opponent"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Previous Row"]["Opponent"] in qual_object["values"]:
                    return False
    
    if "Upcoming Team" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Team"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Upcoming Row"]["Tm"].lower() in qual_object["values"]:
                    return False

    if "Upcoming Opponent" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Opponent"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Upcoming Row"]["Opponent"] in qual_object["values"]:
                    return False
    
    if "Previous Team Franchise" in qualifiers:
        if not row["Previous Row"]:
            return False

        year = str(row["Previous Row"]["Year"])
        team = row["Previous Row"]["Tm"].upper()
        team_franchise = team_main_abbr[year][team]

        for qual_object in qualifiers["Previous Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Previous Opponent Franchise" in qualifiers:
        if not row["Previous Row"]:
            return False

        year = str(row["Previous Row"]["Year"])
        team = row["Previous Row"]["Opponent"].upper()
        team_franchise = team_main_abbr[year][team]

        for qual_object in qualifiers["Previous Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False

    if "Upcoming Team Franchise" in qualifiers:
        if not row["Upcoming Row"]:
            return False

        year = str(row["Upcoming Row"]["Year"])
        team = row["Upcoming Row"]["Tm"].upper()
        team_franchise = team_main_abbr[year][team]

        for qual_object in qualifiers["Upcoming Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Upcoming Opponent Franchise" in qualifiers:
        if not row["Upcoming Row"]:
            return False
            
        year = str(row["Upcoming Row"]["Year"])
        team = row["Upcoming Row"]["Opponent"].upper()
        team_franchise = team_main_abbr[year][team]

        for qual_object in qualifiers["Upcoming Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False

    if "Previous Same Opponent" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Same Opponent"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Opponent"] == row["Opponent"]:
                    return False
            else:
                if not row["Previous Row"]["Opponent"] == row["Opponent"]:
                    return False
    
    if "Upcoming Same Opponent" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Same Opponent"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Opponent"] == row["Opponent"]:
                    return False
            else:
                if not row["Upcoming Row"]["Opponent"] == row["Opponent"]:
                    return False
    
    if "Penalty Shot" in qualifiers:
        for qual_object in qualifiers["Penalty Shot"]:   
            if qual_object["negate"]:
                if ("is_pen_shot" in row and row["is_pen_shot"]):
                    return False
            else:
                if not ("is_pen_shot" in row and row["is_pen_shot"]):
                    return False
    
    if "Shootout" in qualifiers:
        for qual_object in qualifiers["Shootout"]:   
            if qual_object["negate"]:
                if ("is_shootout_shot" in row and row["is_shootout_shot"]):
                    return False
            else:
                if not ("is_shootout_shot" in row and row["is_shootout_shot"]):
                    return False
    
    if "Sub Query" in qualifiers:
        for qual_object in qualifiers["Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["GameLink"] in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day Of Sub Query" in qualifiers:
        for qual_object in qualifiers["Day Of Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day After Sub Query" in qualifiers:
        for qual_object in qualifiers["Day After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day Before Sub Query" in qualifiers:
        for qual_object in qualifiers["Day Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Game After Sub Query" in qualifiers:
        if row["Year"] not in player_data["all_games"]:
            return False
        all_games = player_data["all_games"][row["Year"]]

        game_index = all_games.index(row["GameLink"])
        if game_index == 0:
            return False
        previous_game = all_games[game_index - 1]

        for qual_object in qualifiers["Game After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if previous_game in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Game Before Sub Query" in qualifiers:
        if row["Year"] not in player_data["all_games"]:
            return False
        all_games = player_data["all_games"][row["Year"]]

        game_index = all_games.index(row["GameLink"])
        if game_index == len(all_games) - 1:
            return False
        next_game = all_games[game_index + 1]

        for qual_object in qualifiers["Game Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if next_game in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Season Sub Query" in qualifiers:
        for qual_object in qualifiers["Season Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Year"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Season After Sub Query" in qualifiers:
        valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]

        if row["Year"] not in valid_years:
            return False

        year_index = valid_years.index(row["Year"])
        if year_index == 0:
            return False
        previous_year = valid_years[year_index - 1]

        for qual_object in qualifiers["Season After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if previous_year in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Season Before Sub Query" in qualifiers:
        valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]

        if row["Year"] not in valid_years:
            return False

        year_index = valid_years.index(row["Year"])
        if year_index == len(valid_years) - 1:
            return False
        next_year = valid_years[year_index + 1]

        for qual_object in qualifiers["Season Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if next_year in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Playing With" in qualifiers:
        for qual_object in qualifiers["Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Playing Against" in qualifiers:
        for qual_object in qualifiers["Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Playing With" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Previous Row"]["Date"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Playing With" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Upcoming Row"]["Date"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Playing Against" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Previous Row"]["Date"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Playing Against" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Upcoming Row"]["Date"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Opponents" in qualifiers:
        for qual_object in qualifiers["Playing Same Opponents"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Opponent"] in player["games"] and row["Year"] in player["games"][row["Opponent"]]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Game" in qualifiers:
        for qual_object in qualifiers["Playing Same Game"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Date"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Playing Same Date" in qualifiers:
        for qual_object in qualifiers["Playing Same Date"]:
            has_match = False
            for player in qual_object["values"]:
                for team in player["games"]:
                    if row["Date"] in player["games"][team]:
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Year" in qualifiers:
        for qual_object in qualifiers["Year"]:
            if qual_object["negate"]:
                if row["Year"] >= qual_object["values"]["start_val"] and row["Year"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Year"] >= qual_object["values"]["start_val"] and row["Year"] <= qual_object["values"]["end_val"]):
                    return False

    if "Even Year" in qualifiers:
        is_even = row["Year"] % 2 == 0
        for qual_object in qualifiers["Even Year"]:
            if qual_object["negate"]:
                if is_even:
                    return False
            else:
                if not is_even:
                    return False
    
    
    if "Odd Year" in qualifiers:
        is_odd = row["Year"] % 2 == 1
        for qual_object in qualifiers["Odd Year"]:
            if qual_object["negate"]:
                if is_odd:
                    return False
            else:
                if not is_odd:
                    return False

    if "Birthday" in qualifiers:
        for qual_object in qualifiers["Birthday"]:
            is_birthday = row["Date"].month == player_data["Birthday"].month and row["Date"].day == player_data["Birthday"].day
            if is_birthday:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False

    if "Month" in qualifiers:
        for qual_object in qualifiers["Month"]:
            if qual_object["negate"]:
                if row["Date"].month in qual_object["values"]:
                    return False
            else:
                if not row["Date"].month in qual_object["values"]:
                    return False

    if "Day" in qualifiers:
        for qual_object in qualifiers["Day"]:
            if qual_object["negate"]:
                if row["Date"].weekday() in qual_object["values"]:
                    return False
            else:
                if not row["Date"].weekday() in qual_object["values"]:
                    return False

    if "Date" in qualifiers:
        for qual_object in qualifiers["Date"]:
            if qual_object["negate"]:
                if row["Date"].day in qual_object["values"]:
                    return False
            else:
                if not row["Date"].day in qual_object["values"]:
                    return False
    
    if "Dates" in qualifiers:
        for qual_object in qualifiers["Dates"]:
            has_one_match = False
            for date_obj in qual_object["values"]:
                if qual_object["negate"]:
                    if not (row["Date"] >= date_obj["start_val"] and row["Date"] <= date_obj["end_val"]):
                        has_one_match = True
                else:
                    if row["Date"] >= date_obj["start_val"] and row["Date"] <= date_obj["end_val"]:
                        has_one_match = True
            if not has_one_match:
                return False

    if "Season Game" in qualifiers:
        for qual_object in qualifiers["Season Game"]:
            if qual_object["negate"]:
                if row["Gm"] >= qual_object["values"]["start_val"] and row["Gm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Gm"] >= qual_object["values"]["start_val"] and row["Gm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Career Game" in qualifiers:
        for qual_object in qualifiers["Career Game"]:
            if qual_object["negate"]:
                if row["CrGm"] >= qual_object["values"]["start_val"] and row["CrGm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CrGm"] >= qual_object["values"]["start_val"] and row["CrGm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Career Game Reversed" in qualifiers:
        for qual_object in qualifiers["Career Game Reversed"]:
            if qual_object["negate"]:
                if row["CrGmRev"] >= qual_object["values"]["start_val"] and row["CrGmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CrGmRev"] >= qual_object["values"]["start_val"] and row["CrGmRev"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Season Game Reversed" in qualifiers:
        for qual_object in qualifiers["Season Game Reversed"]:
            if qual_object["negate"]:
                if row["GmRev"] >= qual_object["values"]["start_val"] and row["GmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GmRev"] >= qual_object["values"]["start_val"] and row["GmRev"] <= qual_object["values"]["end_val"]):
                    return False

    if "Days Rest" in qualifiers:
        for qual_object in qualifiers["Days Rest"]:
            if not row["Previous Row"]:
                days_rest = float("inf")
            else:
                days_rest = (row["Date"] - row["Previous Row"]["Date"]).days - 1

            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts Days Rest" in qualifiers:
        for qual_object in qualifiers["Starts Days Rest"]:
            days_rest = get_starts_days_rest(row, "Previous Row", row["Date"])

            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Starts Days Rest" in qualifiers:
        for qual_object in qualifiers["Upcoming Starts Days Rest"]:
            days_rest = get_starts_days_rest(row, "Upcoming Row", row["Date"])

            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False

    if "Upcoming Days Rest" in qualifiers:
        for qual_object in qualifiers["Upcoming Days Rest"]:
            if not row["Upcoming Row"]:
                days_rest = float("inf")
            else:
                days_rest = (row["Upcoming Row"]["Date"] - row["Date"]).days - 1

            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False
    
    if "Holiday" in qualifiers:
        game_date = row["Date"]
        for qual_object in qualifiers["Holiday"]:
            has_match = False
            for holiday in qual_object["values"]:
                country = "usa"
                eve = False
                observed = False
                church = "western"
                if "canadian" in holiday:
                    country = "canada"
                    holiday = re.sub(r"\s+", " ", holiday.replace("canadian", "")).strip()
                elif "canada" in holiday:
                    country = "canada"
                    holiday = re.sub(r"\s+", " ", holiday.replace("canada", "")).strip()
                elif "eve" in holiday:
                    eve = True
                    holiday = re.sub(r"\s+", " ", holiday.replace("eve", "")).strip()
                elif "observed" in holiday:
                    observed = True
                    holiday = re.sub(r"\s+", " ", holiday.replace("observed", "")).strip()
                elif "orthodox" in holiday:
                    church = "orthodox"
                    holiday = re.sub(r"\s+", " ", holiday.replace("orthodox", "")).strip()
                elif "eastern" in holiday:
                    church = "eastern"
                    holiday = re.sub(r"\s+", " ", holiday.replace("eastern", "")).strip()
                holiday = re.sub(r"\W+", "", re.sub(r"[\s-]+", "_", holiday))

                has_custom_match = False
                for holiday_func in all_custom_holidays:
                    if holiday_func[0] == holiday:
                        has_custom_match = True
                        if holiday_func[1](game_date, church, country, observed, eve):
                            has_match = True
                        break

                if not has_custom_match:
                    for holiday_func in all_holidays:
                        if holiday_func[0] == holiday:
                            arguments = inspect.signature(holiday_func[1]).parameters
                            if "church" in arguments:
                                holiday_date = holiday_func[1](game_date.year, church=church)
                            elif "country" in arguments:
                                holiday_date = holiday_func[1](game_date.year, country=country)
                            elif "observed" in arguments:
                                holiday_date = holiday_func[1](game_date.year, observed=observed)
                            else:
                                holiday_date = holiday_func[1](game_date.year)

                            if holiday_date:
                                holiday_date = datetime.datetime(holiday_date[0], holiday_date[1], holiday_date[2]).date()
                                if eve:
                                    holiday_date -= datetime.timedelta(days=1)
                                if game_date == holiday_date:
                                    has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Season Number" in qualifiers:
        if not player_data["player_all_numbers"]:
            return False
        for qual_object in qualifiers["Season Number"]:
            has_number_match = False

            for num_obj in player_data["player_all_numbers"]:
                if row["Tm"] in num_obj["teams"]:
                    if row["Year"] >= num_obj["start_year"] and row["Year"] <= num_obj["end_year"]:
                        if num_obj["number"] >= qual_object["values"]["start_val"] and num_obj["number"] <= qual_object["values"]["end_val"]:
                            has_number_match = True
                            break

            if qual_object["negate"]:
                if has_number_match:
                    return False
            else:
                if not has_number_match:
                    return False
    
    if "Start" in qualifiers:
        if "GS" not in row:
            return False
            
        for qual_object in qualifiers["Start"]:
            if row["GS"]:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False

    return True

def get_starts_days_rest(row, row_str, row_date):
    if not row[row_str]:
        return float("inf")
    else:
        if row[row_str]["Start"]:
            return (row_date - row[row_str]["Date"]).days - 1
        else:
            return get_starts_days_rest(row[row_str], row_str, row_date)

def handle_max_min_data(all_rows, player_data, player_type, qualifiers):
    new_rows = []
    stat_vals = []

    da_max_stats = set()
    if "Min Stat" in qualifiers:
        find_stat_sub_match(qualifiers["Min Stat"], player_type, da_max_stats)
        for qual_object in qualifiers["Min Stat"]:
            for stat_obj in qual_object["values"]:
                stat = stat_obj["stats"][0]["stat"]
                start_level = stat_obj["start_level"] - 1
                end_level = stat_obj["end_level"]
                time_frame = stat_obj["time_frame"]
                stat_quals = stat_obj["stat_quals"]

                min_stats = []
                if not time_frame:
                    for row in all_rows:
                        row_lower = fill_row(row, player_data, player_type, stats=da_max_stats)
                        if stat not in row_lower:
                            for header_stat in headers[player_type["da_type"]["type"]]:
                                if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                    stat = header_stat.lower()
                        if stat in row_lower:
                            single_index = 0
                            for single_stat in min_stats:
                                if single_stat["value"] == row_lower[stat]:
                                    single_index += 1
                            min_stats.append({
                                "index" : single_index,
                                "value" : row_lower[stat],
                                "counter" : 0
                            })
                else:
                    handle_min_max_calc(min_stats, stat_quals, player_data, player_type, stat, time_frame, all_rows)

                if start_level == float("inf"):
                    start_level = len(min_stats) - 1
                elif start_level < 0:
                    start_level = 0
                elif start_level >= len(min_stats):
                    start_level = len(min_stats) - 1
                
                if end_level == float("inf"):
                    end_level = len(min_stats)
                elif end_level < 0:
                    end_level = 0
                elif end_level >= len(min_stats):
                    end_level = len(min_stats)
                
                stat_vals.append({
                    "stat_obj" : stat_obj,
                    "values" : sorted(min_stats, key=lambda stat:(stat["value"], -stat["index"]))[start_level:end_level],
                    "negate" : qual_object["negate"]
                }) 

    da_min_stats = set()
    if "Max Stat" in qualifiers:
        find_stat_sub_match(qualifiers["Max Stat"], player_type, da_min_stats)
        for qual_object in qualifiers["Max Stat"]:
            for stat_obj in qual_object["values"]:
                stat = stat_obj["stats"][0]["stat"]
                start_level = stat_obj["start_level"] - 1
                end_level = stat_obj["end_level"]
                time_frame = stat_obj["time_frame"]
                stat_quals = stat_obj["stat_quals"]
                
                max_stats = []
                if not time_frame:
                    for row in all_rows:
                        row_lower = fill_row(row, player_data, player_type, stats=da_min_stats)
                        if stat not in row_lower:
                            for header_stat in headers[player_type["da_type"]["type"]]:
                                if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                    stat = header_stat.lower()
                        if stat in row_lower:
                            single_index = 0
                            for single_stat in max_stats:
                                if single_stat["value"] == row_lower[stat]:
                                    single_index += 1
                            max_stats.append({
                                "index" : single_index,
                                "value" : row_lower[stat],
                                "counter" : 0
                            })
                else:
                    handle_min_max_calc(max_stats, stat_quals, player_data, player_type, stat, time_frame, all_rows)

                if start_level == float("inf"):
                    start_level = len(max_stats) - 1
                elif start_level < 0:
                    start_level = 0
                elif start_level >= len(max_stats):
                    start_level = len(max_stats) - 1
                
                if end_level == float("inf"):
                    end_level = len(max_stats)
                elif end_level < 0:
                    end_level = 0
                elif end_level >= len(max_stats):
                    end_level = len(max_stats)

                stat_vals.append({
                    "stat_obj" : stat_obj,
                    "values" : sorted(max_stats, key=lambda stat:(-stat["value"], -stat["index"]))[start_level:end_level],
                    "negate" : qual_object["negate"]
                }) 
    
    stats = da_max_stats.union(da_min_stats)
    for stat_val in stat_vals:
        stat = stat_val["stat_obj"]["stats"][0]["stat"]
        time_frame = stat_val["stat_obj"]["time_frame"]

        transformed_vals = []
        for single_stat in stat_val["values"]:
            value = single_stat["value"]
            real_stat = None
            for header_stat in headers[player_type["da_type"]["type"]]:
                if header_stat.lower() == stat or ("display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat):
                    real_stat = header_stat
                    
            if isinstance(value, numbers.Number):
                if real_stat and "round" in headers[player_type["da_type"]["type"]][real_stat]:
                    round_val = headers[player_type["da_type"]["type"]][real_stat]["round"]
                    if round_val == "percent":
                        value = ("{:.2f}").format(round_value(100 * value, 2)) + "%"
                    elif round_val == "dollar":
                        value = round_value(value / 1000000, 2)
                        value = ("{:." + str(2) + "f}").format(value)
                        value = "$" + value + "m"
                    elif round_val == "time":
                        is_minus = False
                        if value < 0:
                            is_minus = True
                            value *= -1

                        minutes, seconds = divmod(round_value(value), 60)
                        value = ("{:02d}").format(minutes) + ":" + ("{:02d}").format(seconds)

                        if is_minus:
                            value = "-" + value
                    else:
                        value = round_value(value, round_val)
                        value = ("{:." + str(round_val) + "f}").format(value)
                else:
                    value = round_value(value)
            elif real_stat == "TmRec":
                rec_split = value.split(":")
                value = str(round_value(float(rec_split[0]))) + ":" + str(round_value(float(rec_split[1]))) + ":" + str(round_value(float(rec_split[2])))
            value = str(value)
            transformed_vals.append(value)

        if "explain_str" not in stat_val["stat_obj"]:
            stat_val["stat_obj"]["explain_str"] = []
        current_explain_strs = stat_val["stat_obj"]["explain_str"]
        stat_val["stat_obj"]["explain_str"] = ""

        if not time_frame:
            stat_val["stat_obj"]["explain_str"] += stat.upper() + ":" + ",".join(transformed_vals)
            for row in all_rows:
                row_lower = fill_row(row, player_data, player_type, stats=stats)

                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == row_lower[stat]:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match:
                        if not stat_val["negate"]:
                            new_rows.append(row)
                    elif stat_val["negate"]:
                        new_rows.append(row)
            stat_val["stat_obj"]["explain_str"] = current_explain_strs + [stat_val["stat_obj"]["explain_str"]]
        else:
            matching_rows = handle_min_max_final(stat_val, current_explain_strs, player_data, player_type, stat, qualifiers, all_rows, transformed_vals)
            if matching_rows:
                new_rows.extend(matching_rows)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_min_max_calc(the_stats, stat_quals, player_data, player_type, stat, time_frame, all_rows):
    if not all_rows:
        return

    qual_type = time_frame["qual_type"]
    qual_num_start = time_frame["qual_num_start"]
    qual_num_end = time_frame["qual_num_end"]

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")

    if qual_type == "Days" or qual_type == "Weeks" or qual_type == "Months" or qual_type == "Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        qual_num = qual_num_start
        while (True):
            if qual_type == "Days":
                date_diff = dateutil.relativedelta.relativedelta(days=qual_num)
            elif qual_type == "Weeks":
                start_date -= datetime.timedelta(days=7)
                end_date += datetime.timedelta(days=7)
                date_diff = dateutil.relativedelta.relativedelta(weeks=qual_num)
            elif qual_type == "Months":
                start_date -= datetime.timedelta(days=31)
                end_date += datetime.timedelta(days=31)
                date_diff = dateutil.relativedelta.relativedelta(months=qual_num)
            elif qual_type == "Years":
                start_date -= datetime.timedelta(days=365)
                end_date += datetime.timedelta(days=365)
                date_diff = dateutil.relativedelta.relativedelta(years=qual_num)
            
            for days in range((end_date - start_date).days + 1):
                current_start_date = start_date + datetime.timedelta(days)
                stat_value, matching_rows = handle_date_rows(player_data, player_type, stat, current_start_date, date_diff, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
            
            if qual_num >= qual_num_end:
                break
            if start_date + date_diff > end_date:
                break
            qual_num += 1
    elif qual_type == "Calendar-Weeks" or qual_type == "Calendar-Months" or qual_type == "Calendar-Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        if qual_type == "Calendar-Weeks":
            start_date = start_date - datetime.timedelta(days=start_date.weekday())
            tmp_end_date = end_date - datetime.timedelta(days=end_date.weekday())
            end_date = tmp_end_date + datetime.timedelta(days=6)
            for date in dateutil.rrule.rrule(dateutil.rrule.WEEKLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_week_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
        elif qual_type == "Calendar-Months":
            start_date = datetime.datetime(start_date.year, start_date.month, 1)
            end_date = datetime.datetime(end_date.year, end_date.month, calendar.monthrange(end_date.year, end_date.month)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.MONTHLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_month_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
        elif qual_type == "Calendar-Years":
            start_date = datetime.datetime(start_date.year, 1, 1)
            end_date = datetime.datetime(end_date.year, 12, calendar.monthrange(end_date.year, 12)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.YEARLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_year_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
    elif qual_type == "Games":
        qual_num = qual_num_start
        while (True):
            for i in range(len(all_rows)):
                stat_value, matching_rows = handle_game_rows(i, player_data, player_type, stat, qual_num, all_rows, only_seasons)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })

            if qual_num >= qual_num_end:
                break
            if qual_num > len(all_rows):
                break
            qual_num += 1
    elif qual_type == "Seasons":
        qual_num = qual_num_start
        while (True):
            seasons = sorted(list(set([row["Year"] for row in all_rows])))
            for i in range(len(seasons)):
                season = seasons[i]
                next_season_index = i + qual_num
                if next_season_index > len(seasons):
                    continue
                if next_season_index == len(seasons):
                    current_end_season = seasons[next_season_index - 1] + 1
                else:
                    current_end_season = seasons[next_season_index]
                stat_value, matching_rows, all_playoffs = handle_season_rows(season, current_end_season, player_data, player_type, stat, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                if all_playoffs:
                    season += 1
                    current_end_season += 1

            if qual_num >= qual_num_end:
                break
            if qual_num > len(seasons):
                break
            qual_num += 1
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        if only_seasons:
            seasons = sorted(list(set([row["Year"] for row in all_rows])))
            for season in seasons:
                season_rows = [row for row in all_rows if row["Year"] == season]
                teams = set([row[row_stat] for row in season_rows])
                for team in teams:
                    stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, season_rows)
                    if matching_rows:
                        if not stat_quals:
                            single_index = 0
                            for single_stat in the_stats:
                                if single_stat["value"] == stat_value:
                                    single_index += 1
                            the_stats.append({
                                "index" : single_index,
                                "value" : stat_value,
                                "counter" : 0
                            })
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            single_index = 0
                            for single_stat in the_stats:
                                if single_stat["value"] == stat_value:
                                    single_index += 1
                            the_stats.append({
                                "index" : single_index,
                                "value" : stat_value,
                                "counter" : 0
                            })
        else:
            teams = set([row[row_stat] for row in all_rows])
            for team in teams:
                stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })

def handle_min_max_final(stat_val, current_explain_strs, player_data, player_type, stat, qualifiers, all_rows, transformed_vals):
    if not all_rows:
        stat_val["stat_obj"]["explain_str"] = current_explain_strs
        return []

    qual_type = stat_val["stat_obj"]["time_frame"]["qual_type"]
    qual_num_start = stat_val["stat_obj"]["time_frame"]["qual_num_start"]
    qual_num_end = stat_val["stat_obj"]["time_frame"]["qual_num_end"]
    stat_quals = stat_val["stat_obj"]["stat_quals"]

    qual_num_str = ""
    if qual_num_start == qual_num_end:
        qual_num_str = str(qual_num_start)
    else:
        qual_num_str = str(qual_num_start) + "-" + str(qual_num_end)

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")

    match_all = False
    if not stat:
        stat = "datestart"
        match_all = True

    if not match_all:
        stat_val["stat_obj"]["explain_str"] += stat.upper() + ":" + ",".join(transformed_vals)

    range_str = ""

    match_count = 0
    total_matching_rows = []
    if qual_type == "Days" or qual_type == "Weeks" or qual_type == "Months" or qual_type == "Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        qual_num = qual_num_start
        while (True):
            if qual_type == "Days":
                date_diff = dateutil.relativedelta.relativedelta(days=qual_num)
            elif qual_type == "Weeks":
                start_date -= datetime.timedelta(days=7)
                end_date += datetime.timedelta(days=7)
                date_diff = dateutil.relativedelta.relativedelta(weeks=qual_num)
            elif qual_type == "Months":
                start_date -= datetime.timedelta(days=31)
                end_date += datetime.timedelta(days=31)
                date_diff = dateutil.relativedelta.relativedelta(months=qual_num)
            elif qual_type == "Years":
                start_date -= datetime.timedelta(days=365)
                end_date += datetime.timedelta(days=365)
                date_diff = dateutil.relativedelta.relativedelta(years=qual_num)
            
            for days in range((end_date - start_date).days + 1):
                current_start_date = start_date + datetime.timedelta(days)
                stat_value, matching_rows = handle_date_rows(player_data, player_type, stat, current_start_date, date_diff, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True

                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Date"] == old_row["Date"]:
                                found_match = True
                                break

                    if not found_match:                   
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if current_start_date ==  (current_start_date + date_diff - datetime.timedelta(days=1)):
                                    range_str += str(current_start_date)
                                else:
                                    range_str += "[" + str(current_start_date) + " - " +  str(current_start_date + date_diff - datetime.timedelta(days=1)) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            if current_start_date ==  (current_start_date + date_diff - datetime.timedelta(days=1)):
                                range_str += str(current_start_date)
                            else:
                                range_str += "[" + str(current_start_date) + " - " +  str(current_start_date + date_diff - datetime.timedelta(days=1)) + "]"

            if qual_num >= qual_num_end:
                break
            if start_date + end_date > date_diff:
                break
            qual_num += 1
    elif qual_type == "Calendar-Weeks" or qual_type == "Calendar-Months" or qual_type == "Calendar-Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        if qual_type == "Calendar-Weeks":
            start_date = start_date - datetime.timedelta(days=start_date.weekday())
            tmp_end_date = end_date - datetime.timedelta(days=end_date.weekday())
            end_date = tmp_end_date + datetime.timedelta(days=6)
            for date in dateutil.rrule.rrule(dateutil.rrule.WEEKLY, dtstart=start_date, until=end_date):
                tmp_real_end_date = date - datetime.timedelta(days=date.weekday())
                real_end_date = tmp_real_end_date + datetime.timedelta(days=6)

                stat_value, matching_rows = handle_week_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True

                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Date"] == old_row["Date"]:
                                found_match = True
                                break

                    if not found_match: 
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if date ==  real_end_date:
                                    range_str += str(date)
                                else:
                                    range_str += "[" + str(date.date()) + " - " + str(real_end_date.date()) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            if date ==  real_end_date:
                                range_str += str(date)
                            else:
                                range_str += "[" + str(date.date()) + " - " + str(real_end_date.date()) + "]"
        elif qual_type == "Calendar-Months":
            start_date = datetime.datetime(start_date.year, start_date.month, 1)
            end_date = datetime.datetime(end_date.year, end_date.month, calendar.monthrange(end_date.year, end_date.month)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.MONTHLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_month_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Date"] == old_row["Date"]:
                                found_match = True
                                break

                    if not found_match:
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += "[" + calendar.month_name[date.month] + " " + str(date.year)  + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += "[" + calendar.month_name[date.month] + " " + str(date.year)  + "]"
        elif qual_type == "Calendar-Years":
            start_date = datetime.datetime(start_date.year, 1, 1)
            end_date = datetime.datetime(end_date.year, 12, calendar.monthrange(end_date.year, 12)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.YEARLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_year_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Date"] == old_row["Date"]:
                                found_match = True
                                break

                    if not found_match:                    
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += str(date.year)
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += str(date.year)
    elif qual_type == "Games":
        qual_num = qual_num_start
        while (True):
            for i in range(len(all_rows)):
                stat_value, matching_rows = handle_game_rows(i, player_data, player_type, stat, qual_num, all_rows, only_seasons)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True

                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Date"] == old_row["Date"]:
                                found_match = True
                                break

                    if not found_match:                 
                        if has_match:
                            if not stat_val["negate"]:
                                dates = [matching_row["Date"] for matching_row in matching_rows]
                                start_date = min(dates)
                                end_date = max(dates)
                                if total_matching_rows:
                                    total_dates = [matching_row["Date"] for matching_row in total_matching_rows]
                                    total_start_date = min(total_dates)
                                    total_end_date = max(total_dates)
                                else:
                                    total_start_date = datetime.date.max
                                    total_end_date = datetime.date.min
                            if start_date < total_start_date or end_date > total_end_date:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)

                                date_start_link = None
                                date_end_link = None
                                for row in all_rows:
                                    if row["Date"] == start_date:
                                        if row["GameLink"] and row["Year"] >= 1979:
                                            date_start_link = "https://www.hockey-reference.com" + row["GameLink"]
                                        else:
                                            date_start_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                                    if row["Date"] == end_date:
                                        if row["GameLink"] and row["Year"] >= 1979:
                                            date_end_link = "https://www.hockey-reference.com" + row["GameLink"]
                                        else:
                                            date_end_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                                    
                                    if date_start_link and date_end_link:
                                        break
                                
                                if date_start_link:
                                    start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                                else:
                                    start_date = str(start_date)
                                
                                if date_end_link:
                                    end_date = "[" + str(end_date) + "](" + date_end_link + ")"
                                else:
                                    end_date = str(end_date)

                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if start_date == end_date:
                                    range_str += str(start_date)
                                else:
                                    range_str += "[" + str(start_date)  + " - " + str(end_date) + "]"
                        elif stat_val["negate"]:
                            dates = [matching_row["Date"] for matching_row in matching_rows]
                            start_date = min(dates)
                            end_date = max(dates)
                            if total_matching_rows:
                                total_dates = [matching_row["Date"] for matching_row in total_matching_rows]
                                total_start_date = min(total_dates)
                                total_end_date = max(total_dates)
                            else:
                                total_start_date = datetime.date.max
                                total_end_date = datetime.date.min
                            if start_date < total_start_date or end_date > total_end_date:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)

                                date_start_link = None
                                date_end_link = None
                                for row in all_rows:
                                    if row["Date"] == start_date:
                                        if row["GameLink"] and row["Year"] >= 1979:
                                            date_start_link = "https://www.hockey-reference.com" + row["GameLink"]
                                        else:
                                            date_start_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                                    if row["Date"] == end_date:
                                        if row["GameLink"] and row["Year"] >= 1979:
                                            date_end_link = "https://www.hockey-reference.com" + row["GameLink"]
                                        else:
                                            date_end_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                                    
                                    if date_start_link and date_end_link:
                                        break
                            
                                if date_start_link:
                                    start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                                else:
                                    start_date = str(start_date)
                                
                                if date_end_link:
                                    end_date = "[" + str(end_date) + "](" + date_end_link + ")"
                                else:
                                    end_date = str(end_date)

                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if start_date == end_date:
                                    range_str += str(start_date)
                                else:
                                    range_str += "[" + str(start_date)  + " - " + str(end_date) + "]"

            if qual_num >= qual_num_end:
                break
            if qual_num > len(all_rows):
                break
            qual_num += 1
    elif qual_type == "Seasons":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        qual_num = qual_num_start
        while (True):
            for i in range(len(seasons)):
                season = seasons[i]
                next_season_index = i + qual_num
                if next_season_index > len(seasons):
                    continue
                if next_season_index == len(seasons):
                    current_end_season = seasons[next_season_index - 1] + 1
                else:
                    current_end_season = seasons[next_season_index]
                stat_value, matching_rows, all_playoffs = handle_season_rows(season, current_end_season, player_data, player_type, stat, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    if all_playoffs:
                        season += 1
                        current_end_season += 1
                    current_end_season -= 1

                    season_int = season
                    current_end_season_int = current_end_season

                    if not all_playoffs:
                        season = str(season) + "-" + str(season + 1)
                        current_end_season = str(current_end_season) + "-" + str(current_end_season + 1)
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Date"] == old_row["Date"]:
                                found_match = True
                                break

                    if not found_match:             
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"

                                if season_int >= 1979:# in player_data["game_valid_years"]:
                                    if all_playoffs:
                                        start_date = "[" + str(season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(season_int)) + ")"
                                    else:
                                        start_date = "[" + str(season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(season_int + 1)) + ")"
                                else:
                                    start_date = season
                                if current_end_season_int >= 1979:# in player_data["game_valid_years"]:
                                    if all_playoffs:
                                        end_date = "[" + str(current_end_season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(current_end_season_int)) + ")"
                                    else:
                                        end_date = "[" + str(current_end_season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(current_end_season_int + 1)) + ")"
                                else:
                                    end_date = current_end_season

                                if start_date == end_date:
                                    range_str += str(start_date)
                                else:
                                    range_str += "[" + str(start_date) + " to " + str(end_date) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"

                            if season_int >= 1979:# in player_data["game_valid_years"]:
                                if all_playoffs:
                                    start_date = "[" + str(season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(season_int)) + ")"
                                else:
                                    start_date = "[" + str(season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(season_int + 1)) + ")"
                            else:
                                start_date = season
                            if current_end_season_int >= 1979:# in player_data["game_valid_years"]:
                                if all_playoffs:
                                    end_date = "[" + str(current_end_season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(current_end_season_int)) + ")"
                                else:
                                    end_date = "[" + str(current_end_season) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(current_end_season_int + 1)) + ")"
                            else:
                                end_date = current_end_season

                            if start_date == end_date:
                                range_str += str(start_date)
                            else:
                                range_str += "[" + str(start_date) + " to " + str(end_date) + "]"
                        
            if qual_num >= qual_num_end:
                break
            if qual_num > len(seasons):
                break
            qual_num += 1
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        if only_seasons:
            seasons = sorted(list(set([row["Year"] for row in all_rows])))
            for season in seasons:
                season_rows = [row for row in all_rows if row["Year"] == season]
                teams = set([row[row_stat] for row in season_rows])
                for team in teams:
                    stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, season_rows)
                    if matching_rows:
                        has_match = False
                        has_value_match = False
                        for single_stat in stat_val["values"]:
                            if single_stat["value"] == stat_value:
                                if single_stat["counter"] == single_stat["index"]:
                                    has_value_match = True
                                single_stat["counter"] += 1
                        if has_value_match or match_all:
                            if not stat_quals:
                                has_match = True
                            elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                                has_match = True
                        
                        found_match = False
                        for old_row in total_matching_rows:
                            for new_row in matching_rows:
                                if new_row["Date"] == old_row["Date"]:
                                    found_match = True
                                    break

                        if not found_match:
                            if has_match:
                                if not stat_val["negate"]:
                                    match_count += 1
                                    total_matching_rows.extend(matching_rows)
                                    if range_str:
                                        range_str += " + "
                                    else:
                                        range_str += qual_type + ":" + qual_num_str + "|"
                                    range_str += team.upper()
                            elif stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += team.upper()
        else:
            teams = set([row[row_stat] for row in all_rows])
            for team in teams:
                stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                            has_match = True
                    
                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["Date"] == old_row["Date"]:
                                found_match = True
                                break

                    if not found_match:
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += team.upper()
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += team.upper()
            
    if not range_str:
        stat_val["stat_obj"]["explain_str"] = stat.upper() + "|" + qual_type + ":" + qual_num_str
        if not match_all:
            if match_count != 1:
                stat_val["stat_obj"]["explain_str"] += "|" + str(match_count) + " Stretches"
        else:
            stat_val["stat_obj"]["explain_str"] += str(match_count) + " Stretches "
        if only_seasons:
            stat_val["stat_obj"]["explain_str"] += "|Only Seasons"
    else:
        if not match_all:
            if match_count != 1:
                stat_val["stat_obj"]["explain_str"] += "|" + str(match_count) + " Stretches"
        else:
            stat_val["stat_obj"]["explain_str"] += str(match_count) + " Stretches "
        if only_seasons:
            stat_val["stat_obj"]["explain_str"] += "|Only Seasons"
        stat_val["stat_obj"]["explain_str"] += "|" + range_str 
    if stat_quals:
        stat_val["stat_obj"]["explain_str"] += "|"
        for stat_qual in stat_quals:
            stat_val["stat_obj"]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_val["stat_obj"]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_val["stat_obj"]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_val["stat_obj"]["explain_str"] += ", "
        stat_val["stat_obj"]["explain_str"] = stat_val["stat_obj"]["explain_str"][:-2]

    stat_val["stat_obj"]["explain_str"] = current_explain_strs + [stat_val["stat_obj"]["explain_str"]]

    return total_matching_rows

def find_stat_sub_match(qual_objects, player_type, stats):
    for qual_object in qual_objects:
        find_sub_stat_sub_match(qual_object["values"], player_type, stats)

def find_sub_stat_sub_match(sub_qual_objects, player_type, stats):
    for sub_qual_object in sub_qual_objects:
        stat = sub_qual_object["stats"][0]["stat"]
        find_sub_sub_stat_match(stat, player_type, stats)

def find_stat_match(qual_objects, player_type, stats, stat_name="values"):
    for qual_object in qual_objects:
        find_sub_stat_match(qual_object[stat_name], player_type, stats)

def find_sub_stat_match(sub_qual_objects, player_type, stats):
    for sub_qual_object in sub_qual_objects:
        stat = sub_qual_object["stat"]
        find_sub_sub_stat_match(stat, player_type, stats)

def find_sub_sub_stat_match(stat, player_type, stats):
    for sub_stat in headers[player_type["da_type"]["type"]]:
        if sub_stat.lower() == stat or ("display-value" in headers[player_type["da_type"]["type"]][sub_stat] and headers[player_type["da_type"]["type"]][sub_stat]["display-value"].lower() == stat):
            stats.add(sub_stat)
            return

def handle_season_stats(all_rows, player_data, player_type, qualifiers):
    if not all_rows:
        return []

    stats = set()
    if "Season Stat" in qualifiers:
        find_stat_match(qualifiers["Season Stat"], player_type, stats)
    if "Previous Season Stat" in qualifiers:
        find_stat_match(qualifiers["Previous Season Stat"], player_type, stats)
    if "Upcoming Season Stat" in qualifiers:
        find_stat_match(qualifiers["Upcoming Season Stat"], player_type, stats)

    season_row_map = {}
    seasons = sorted(list(set([row["Year"] for row in all_rows])))
    for season in seasons:
        season_matching_rows = []
        for row in all_rows:
            year = row["Year"]
            if year == season:
                season_matching_rows.append(row)
        season_row_map[season] = {
            "ind_rows" : season_matching_rows
        }

        if "Season Stat" in qualifiers or "Previous Season Stat" in qualifiers or "Upcoming Season Stat" in qualifiers:
            season_row_map[season]["comb_row"] = comb_rows(season_matching_rows, player_data, player_type, stats=stats)
            season_row_map[season]["comb_row"]["Year"] = season
        if "Season Formula" in qualifiers:
            stats = set()
            for qual_object in qualifiers["Season Formula"]:
                formula = qual_object["values"][0]
                for header in headers[player_type["da_type"]["type"]].keys():
                    match = re.search(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(header.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", formula)
                    if not match:
                        for header_stat in headers[player_type["da_type"]["type"]]:
                            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and header_stat.lower() == header.lower():
                                header = headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower()
                        match = re.search(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(header.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", formula)
                    if match:
                        stats.add(header)

            season_row_map[season]["comb_row_upper"] = comb_rows(season_matching_rows, player_data, player_type, False, stats=stats)
            season_row_map[season]["comb_row_upper"]["Year"] = season

    explain_str_obj = None
    
    new_rows = []
    for season in seasons:
        if "Season Stat" in qualifiers or "Previous Season Stat" in qualifiers or "Upcoming Season Stat" in qualifiers:
            season_row = season_row_map[season]["comb_row"]
            previous_row = None
            if season - 1 in season_row_map:
                previous_row = season_row_map[season - 1]["comb_row"]
            upcoming_row = None
            if season + 1 in season_row_map:
                upcoming_row = season_row_map[season + 1]["comb_row"]

        add_row = True
        if "Season Stat" in qualifiers:
            for qual_object in qualifiers["Season Stat"]:    
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    stat = sub_qual_object["stat"]
                    if stat not in season_row:
                        for header_stat in headers[player_type["da_type"]["type"]]:
                            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in season_row:
                        has_match = season_row[stat] >= sub_qual_object["start_val"] and season_row[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break

        if add_row and "Previous Season Stat" in qualifiers:
            if not previous_row:
                add_row = False
                break
            for qual_object in qualifiers["Previous Season Stat"]:
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    stat = sub_qual_object["stat"]
                    if stat not in previous_row:
                        for header_stat in headers[player_type["da_type"]["type"]]:
                            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in previous_row:
                        has_match = previous_row[stat] >= sub_qual_object["start_val"] and previous_row[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break

        if add_row and "Upcoming Season Stat" in qualifiers:
            if not upcoming_row:
                add_row = False
                break
            for qual_object in qualifiers["Upcoming Season Stat"]:                    
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    stat = sub_qual_object["stat"]
                    if stat not in upcoming_row:
                        for header_stat in headers[player_type["da_type"]["type"]]:
                            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in upcoming_row:
                        has_match = upcoming_row[stat] >= sub_qual_object["start_val"] and upcoming_row[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break
        
        if add_row and "Season Formula" in qualifiers:
            for qual_object in qualifiers["Season Formula"]:
                formula = qual_object["values"][0]
                try:
                    has_match = bool(calculate_formula("custom_formula", player_type, formula, season_row_map[season]["comb_row_upper"], season_row_map[season]["ind_rows"], player_data, safe_eval=True))
                except Exception:
                    raise
                    has_match = False
                    add_row = False

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break
        
        if add_row:
            new_rows.extend(season_row_map[season]["ind_rows"])
    
    new_rows =  [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

    if explain_str_obj:
        if "explain_str" not in explain_str_obj:
            explain_str_obj["explain_str"] = []
        current_explain_strs = explain_str_obj["explain_str"]
        explain_str_obj["explain_str"] = ""

        seasons = sorted(list(set([str(row["Year"]) for row in new_rows])))
        explain_str_obj["explain_str"] = ""

        explain_str_obj["explain_str"] += explain_str_obj["stat"].upper() + "="
        if explain_str_obj["start_val"] == explain_str_obj["end_val"]:
             explain_str_obj["explain_str"] += get_time_str(explain_str_obj["start_val"], False)
        else:
             explain_str_obj["explain_str"] += (get_time_str(explain_str_obj["start_val"], False)) + "-" + (get_time_str(explain_str_obj["end_val"], False))

        explain_str_obj["explain_str"] = current_explain_strs + [explain_str_obj["explain_str"]]

    return new_rows

def handle_career_stats(all_rows, player_data, player_type, qualifiers):
    if not all_rows:
        return []

    new_rows = []
    matching_rows = []
    explain_str_obj = None

    found_first_end = False

    stats = set()
    find_stat_match(qualifiers["Total Games Stat"], player_type, stats)

    for row in all_rows:
        matching_rows.append(row)
        comb_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        add_row = True
        for qual_object in qualifiers["Total Games Stat"]:    
            has_match = False
            for sub_qual_object in qual_object["values"]:
                if not explain_str_obj:
                    explain_str_obj = sub_qual_object

                stat = sub_qual_object["stat"]
                if stat not in comb_row:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in comb_row:
                    has_match = comb_row[stat] >= sub_qual_object["start_val"] and comb_row[stat] <= sub_qual_object["end_val"]

                    if not sub_qual_object["end_exclusive"]:
                        if comb_row[stat] >= sub_qual_object["end_val"]:
                            if found_first_end:
                                has_match = False
                            else:
                                has_match = True

                            found_first_end = True
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    add_row = False
                    break
            else:
                if not has_match:
                    add_row = False
                    break
        
        if add_row:
            new_rows.append(row)
    
    new_rows =  [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

    date_diff = None
    if new_rows:
        dates = set([row["Date"] for row in new_rows])
        min_date = min(dates)
        max_date = max(dates)
        date_diff = dateutil.relativedelta.relativedelta(min_date, max_date)

    if explain_str_obj:
        if "explain_str" not in explain_str_obj:
            explain_str_obj["explain_str"] = []
        current_explain_strs = explain_str_obj["explain_str"]
        explain_str_obj["explain_str"] = ""

        explain_str_obj["explain_str"] += explain_str_obj["stat"].upper() + "="
        if explain_str_obj["start_val"] == explain_str_obj["end_val"]:
             explain_str_obj["explain_str"] += get_time_str(explain_str_obj["start_val"], False)
        else:
             explain_str_obj["explain_str"] += (get_time_str(explain_str_obj["start_val"], False)) + "-" + (get_time_str(explain_str_obj["end_val"], False))

        explain_str_obj["explain_str"] += "|" + str(len(new_rows)) + " Total Games"

        if date_diff:
            date_diff_str = "|Time: "
            if date_diff.years:
                date_diff_str += str(date_diff.years).replace("-", "") + "Y"
            if date_diff.months:
                if date_diff.years:
                    date_diff_str += "-"
                date_diff_str += str(date_diff.months).replace("-", "") + "M"
            if date_diff.days:
                if date_diff.years or date_diff.months:
                    date_diff_str += "-"
                date_diff_str += str(date_diff.days).replace("-", "") + "D"

            explain_str_obj["explain_str"] += date_diff_str

        explain_str_obj["explain_str"] = current_explain_strs + [explain_str_obj["explain_str"]]

    return new_rows

def handle_max_streak(all_rows, player_data, player_type, qualifiers, max_streak, is_formula):
    new_rows = []

    if "Max Streak" in qualifiers and max_streak and not is_formula:
        for qual_object in qualifiers["Max Streak"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
    
    if "Count Streak" in qualifiers and not max_streak and not is_formula:
        for qual_object in qualifiers["Count Streak"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
        
    if "Max Streak Formula" in qualifiers and max_streak and is_formula:
        for qual_object in qualifiers["Max Streak Formula"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
    
    if "Count Streak Formula" in qualifiers and not max_streak and is_formula:
        for qual_object in qualifiers["Count Streak Formula"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_max_stretch(all_rows, player_data, player_type, qualifiers):
    new_rows = []

    if "Max Stretch" in qualifiers:
        for qual_object in qualifiers["Max Stretch"]:
            handle_max_stretch_calc(new_rows, qual_object["values"], player_data, player_type, all_rows)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_max_streak_calc(new_rows, stat_objs, player_data, player_type, all_rows, max_streak, is_formula):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))

    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        prev_year = None
        break_next = False
        for i in range(len(all_rows)):
            row = all_rows[i]
            if prev_year != None and prev_year == row["Year"]:
                if break_next:
                    continue
            else:
                break_next = False
            prev_year = row["Year"]

            matching_rows = handle_streak_game_rows(i, player_data, player_type, stat_objs, all_rows, only_seasons, is_formula)
            if matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Date"] == old_row["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Date"] == old_row["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
            elif only_seasons and (is_start == True or is_start == False):
                break_next = True

            if not only_seasons and (is_start == True or is_start == False):
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        for i in range(len(seasons)):
            matching_rows = handle_streak_season_rows(i, seasons, player_data, player_type, stat_objs, all_rows)
            if matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
            if is_start == True or is_start == False:
                break
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        teams = sorted(list(set([row[row_stat] for row in all_rows])))
        for team in teams:
            team_rows = [row for row in all_rows if row[row_stat] == team]
            prev_year = None
            break_next = False
            for i in range(len(team_rows)):
                row = team_rows[i]
                if prev_year != None and prev_year == row["Year"]:
                    if break_next:
                        continue
                else:
                    break_next = False
                prev_year = row["Year"]

                matching_rows = handle_streak_game_rows(i, player_data, player_type, stat_objs, team_rows, only_seasons, False)
                if matching_rows:
                    if not stat_quals:
                        found_match = False
                        for key in all_streak_obj:
                            for old_rows in all_streak_obj[key]:
                                for old_row in old_rows:
                                    for new_row in matching_rows:
                                        if new_row["Date"] == old_row["Date"]:
                                            found_match = True
                                            break
                        if not found_match:
                            streak_length = len(matching_rows)
                            if not streak_length in all_streak_obj:
                                all_streak_obj[streak_length] = []
                            all_streak_obj[streak_length].append(matching_rows)
                    elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                        found_match = False
                        for key in all_streak_obj:
                            for old_rows in all_streak_obj[key]:
                                for old_row in old_rows:
                                    for new_row in matching_rows:
                                        if new_row["Date"] == old_row["Date"]:
                                            found_match = True
                                            break
                        if not found_match:
                            streak_length = len(matching_rows)
                            if not streak_length in all_streak_obj:
                                all_streak_obj[streak_length] = []
                            all_streak_obj[streak_length].append(matching_rows)
                elif only_seasons and (is_start == True or is_start == False):
                    break_next = True

                if not only_seasons and (is_start == True or is_start == False):
                    break

    all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if max_streak:
        if start_level == float("inf"):
            start_level = len(all_streak_counts) - 1
        elif start_level < 0:
            start_level = 0
        elif start_level >= len(all_streak_counts):
            start_level = len(all_streak_counts) - 1
        
        if end_level == float("inf"):
            end_level = len(all_streak_counts)
        elif end_level < 0:
            end_level = 0
        elif end_level >= len(all_streak_counts):
            end_level = len(all_streak_counts)
            
        our_keys = all_streak_counts[start_level:end_level]
    else:
        our_keys = all_streak_counts

    all_streaks = []
    match_count = 0
    for key in our_keys:
        for match in all_streak_obj[key]:
            team = None
            if "Games" in qual_type or qual_type == "Teams" or qual_type == "Opponents":
                dates = [row["Date"] for row in match]
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                date_start_link = None
                date_end_link = None
                for row in all_rows:
                    if row["Date"] == start_date:
                        if row["GameLink"] and row["Year"] >= 1979:
                            date_start_link = "https://www.hockey-reference.com" + row["GameLink"]
                        else:
                            date_start_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                    if row["Date"] == end_date:
                        if row["GameLink"] and row["Year"] >= 1979:
                            date_end_link = "https://www.hockey-reference.com" + row["GameLink"]
                        else:
                            date_end_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                    
                    if date_start_link and date_end_link:
                        break
                
                if date_start_link:
                    start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                else:
                    start_date = str(start_date)
                
                if date_end_link:
                    end_date = "[" + str(end_date) + "](" + date_end_link + ")"
                else:
                    end_date = str(end_date)

                if qual_type == "Teams":
                    team = match[0]["Tm"]
                elif qual_type == "Opponents":
                    team = match[0]["Opponent"]
            else:
                dates = set([row["Year"] for row in match])
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)
                is_playoffs = True
                for row in match:
                    if not row["is_playoffs"]:
                        is_playoffs = False
                        break
                if is_playoffs:
                    start_date += 1
                    end_date += 1
                
                start_date_int = start_date
                end_date_int = end_date
                
                if not is_playoffs:
                    start_date = str(start_date) + "-" + str(start_date + 1)
                    end_date = str(end_date) + "-" + str(end_date + 1)

                if start_date_int >= 1979:# in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(start_date_int + 1)) + ")"
                if end_date_int >= 1979:# in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(end_date_int + 1)) + ")"
                
            all_streaks.append({
                "start_date" : start_date,
                "end_date" : end_date,
                "games" : match_count,
                "match" : match,
                "team" : team
            })

    if not max_streak:
        qual_type = "Streaks"
        match_count = len(all_streaks)
    
    all_streaks = sorted(all_streaks, key=lambda streak: (-streak["games"], streak["start_date"]))

    if max_streak:
        all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    if qual_type == "Teams" or qual_type == "Opponents":
        stat_objs[0]["explain_str"] += qual_type + "|"
    else:
        stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count) + "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if not is_formula:
                if stat["start_val"] == stat["end_val"]:
                    stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
                else:
                    if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if only_seasons:
        stat_objs[0]["explain_str"] += "|Only Seasons"
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    if len(all_streaks) > 1 or qual_type == "Teams" or qual_type == "Opponents":
        for i in range(len(all_streaks)):
            streak = all_streaks[i]
            if i:
                stat_objs[0]["explain_str"] += " + "
            else:
                stat_objs[0]["explain_str"] += "|"
            if qual_type == "Teams" or qual_type == "Opponents":
                stat_objs[0]["explain_str"] += streak["team"].upper() + ": "
            if streak["start_date"] == streak["end_date"]:
                stat_objs[0]["explain_str"] += str(streak["start_date"])
            else:
                stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
                if not max_streak or qual_type == "Teams" or qual_type == "Opponents":
                    stat_objs[0]["explain_str"] += " (" + str(streak["games"]) + " Games)"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]

    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def handle_max_stretch_calc(new_rows, stat_objs, player_data, player_type, all_rows):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))

    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        prev_year = None
        break_next = False
        for i in range(len(all_rows)):
            row = all_rows[i]
            if prev_year != None and prev_year == row["Year"]:
                if break_next:
                    continue
            else:
                break_next = False
            prev_year = row["Year"]

            total_matching_rows = handle_stretch_game_rows(i, player_data, player_type, stat_objs, all_rows, only_seasons)
            for matching_rows in total_matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Date"] == old_row["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Date"] == old_row["Date"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
            
            if not total_matching_rows and only_seasons and (is_start == True or is_start == False):
                break_next = True

            if not only_seasons and (is_start == True or is_start == False):
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        for i in range(len(seasons)):
            total_matching_rows = handle_stretch_season_rows(i, seasons, player_data, player_type, stat_objs, all_rows)
            for matching_rows in total_matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    if matching_rows not in all_streak_obj[streak_length]:
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    if matching_rows not in all_streak_obj[streak_length]:
                        all_streak_obj[streak_length].append(matching_rows)
            if is_start == True or is_start == False:
                break

    all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if start_level == float("inf"):
        start_level = len(all_streak_counts) - 1
    elif start_level < 0:
        start_level = 0
    elif start_level >= len(all_streak_counts):
        start_level = len(all_streak_counts) - 1
    
    if end_level == float("inf"):
        end_level = len(all_streak_counts)
    elif end_level < 0:
        end_level = 0
    elif end_level >= len(all_streak_counts):
        end_level = len(all_streak_counts)
        
    our_keys = all_streak_counts[start_level:end_level]

    all_streaks = []
    match_count = 0
    for key in our_keys:
        for match in all_streak_obj[key]:
            if "Games" in qual_type:
                dates = [row["Date"] for row in match]
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                date_start_link = None
                date_end_link = None
                for row in all_rows:
                    if row["Date"] == start_date:
                        if row["GameLink"] and row["Year"] >= 1979:
                            date_start_link = "https://www.hockey-reference.com" + row["GameLink"]
                        else:
                            date_start_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                    if row["Date"] == end_date:
                        if row["GameLink"] and row["Year"] >= 1979:
                            date_end_link = "https://www.hockey-reference.com" + row["GameLink"]
                        else:
                            date_end_link = "https://www.nhl.com/gamecenter/" + str(row["NHLGameLink"])
                    
                    if date_start_link and date_end_link:
                        break
                
                if date_start_link:
                    start_date = "[" + str(start_date) + "](" + date_start_link + ")"
                else:
                    start_date = str(start_date)
                
                if date_end_link:
                    end_date = "[" + str(end_date) + "](" + date_end_link + ")"
                else:
                    end_date = str(end_date)
            else:
                dates = set([row["Year"] for row in match])
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)
                is_playoffs = True
                for row in match:
                    if not row["is_playoffs"]:
                        is_playoffs = False
                        break
                if is_playoffs:
                    start_date += 1
                    end_date += 1
                
                start_date_int = start_date
                end_date_int = end_date
                
                if not is_playoffs:
                    start_date = str(start_date) + "-" + str(start_date + 1)
                    end_date = str(end_date) + "-" + str(end_date + 1)

                if start_date_int >= 1979:# in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(start_date_int + 1)) + ")"
                if end_date_int >= 1979:# in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(end_date_int + 1)) + ")"
                
            all_streaks.append({
                "start_date" : start_date,
                "end_date" : end_date,
                "games" : match_count,
                "match" : match
            })
        
    all_streaks = sorted(all_streaks, key=lambda streak: (-streak["games"], streak["start_date"]))

    all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count) + "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if stat["start_val"] == stat["end_val"]:
                stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
            else:
                if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                    stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if only_seasons:
        stat_objs[0]["explain_str"] += "|Only Seasons"
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    if len(all_streaks) > 1:
        for i in range(len(all_streaks)):
            streak = all_streaks[i]
            if i:
                stat_objs[0]["explain_str"] += " + "
            else:
                stat_objs[0]["explain_str"] += "|"
            if streak["start_date"] == streak["end_date"]:
                stat_objs[0]["explain_str"] += str(streak["start_date"])
            else:
                stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
                stat_objs[0]["explain_str"] += " (" + str(streak["games"]) + " Games)"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]
    
    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def handle_quick_long(all_rows, player_data, player_type, qualifiers):
    new_rows = []

    if "Quickest" in qualifiers:
        for qual_object in qualifiers["Quickest"]:
            handle_quick_long_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, True)
    
    if "Slowest" in qualifiers:
        for qual_object in qualifiers["Slowest"]:
            handle_quick_long_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, False)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_quick_long_calc(new_rows, stat_objs, player_data, player_type, all_rows, is_quickest):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))

    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        for season in seasons:
            matching_rows = handle_quickest_game_rows(season, player_data, player_type, stat_objs, all_rows, is_quickest)
            if matching_rows:
                if not stat_quals:
                    streak_length = len(matching_rows)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                    streak_length = len(matching_rows)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)

            if is_start == True or is_start == False:
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        matching_rows = handle_quickest_season_rows(seasons, player_data, player_type, stat_objs, all_rows)
        if matching_rows:
            if not stat_quals:
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
            elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
    elif qual_type == "Total Games":
        matching_rows = handle_quickest_career_rows(player_data, player_type, stat_objs, all_rows)
        if matching_rows:
            if not stat_quals:
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
            elif valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)

    if is_quickest:
        all_streak_counts = sorted(list(all_streak_obj.keys()))
    else:
        all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if start_level == float("inf"):
        start_level = len(all_streak_counts) - 1
    elif start_level < 0:
        start_level = 0
    elif start_level >= len(all_streak_counts):
        start_level = len(all_streak_counts) - 1
    
    if end_level == float("inf"):
        end_level = len(all_streak_counts)
    elif end_level < 0:
        end_level = 0
    elif end_level >= len(all_streak_counts):
        end_level = len(all_streak_counts)
        
    our_keys = all_streak_counts[start_level:end_level]

    all_streaks = []
    match_count = 0
    age = None
    for key in our_keys:
        for match in all_streak_obj[key]:
            dates = [row["Date"] for row in match]
            match_count = len(dates)
            if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
                dates = set([row["Year"] for row in match])
                start_date = min(dates)
                end_date = max(dates)
                is_playoffs = True
                for row in match:
                    if not row["is_playoffs"]:
                        is_playoffs = False
                        break
                if is_playoffs:
                    start_date += 1
                    end_date += 1
                
                start_date_int = start_date
                end_date_int = end_date
                
                if not is_playoffs:
                    start_date = str(start_date) + "-" + str(start_date + 1)
                    end_date = str(end_date) + "-" + str(end_date + 1)

                if start_date_int >= 1979:# in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(start_date_int + 1)) + ")"
                if end_date_int >= 1979:#in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + game_splits_url_format.format(player_data["id"][0], player_data["id"], str(end_date_int + 1)) + ")"

                all_streaks.append({
                    "start_date" : start_date,
                    "end_date" : end_date,
                    "match" : match
                })
            elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
                new_rows.extend(match)
                dates = set([row["Year"] for row in match])
                match_count = len(dates)
            elif qual_type == "Total Games":
                new_rows.extend(match)
                dates = set([row["Date"] for row in match])
                end_date = max(dates)
                age = dateutil.relativedelta.relativedelta(player_data["Birthday"], end_date)
    
    all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count)
    # if age:
    #     age_str = "|Age: "
    #     if age.years:
    #         age_str += str(age.years).replace("-", "") + "Y"
    #     if age.months:
    #         if age.years:
    #             age_str += "-"
    #         age_str += str(age.months).replace("-", "") + "M"
    #     if age.days:
    #         if age.years or age.months:
    #             age_str += "-"
    #         age_str += str(age.days).replace("-", "") + "D"

    #     stat_objs[0]["explain_str"] += age_str
    stat_objs[0]["explain_str"] += "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if stat["start_val"] == stat["end_val"]:
                stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
            else:
                if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                    if stat["end_val"] == float("inf"):
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
                    else:
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    for i in range(len(all_streaks)):
        streak = all_streaks[i]
        if i:
            stat_obj["explain_str"] += " + "
        else:
            stat_obj["explain_str"] += "|"
        if streak["start_date"] == streak["end_date"]:
            stat_obj["explain_str"] += str(streak["start_date"])
        else:
            stat_obj["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_obj["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_obj["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_obj["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_obj["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_obj["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_obj["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_obj["explain_str"] += ", "
        stat_obj["explain_str"] = stat_obj["explain_str"][:-2]

    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def valid_matching_rows(matching_rows, stat_quals, player_data, player_type):
    stats = set()
    find_sub_stat_match(stat_quals, player_type, stats)
    row_lower = comb_rows(matching_rows, player_data, player_type, stats=stats)
    for qual_object in stat_quals:
        has_match = False
        stat = qual_object["stat"]
    
        if stat.startswith("season"):
            season_num = len(set([row["Year"] for row in matching_rows]))
            has_match = season_num >= qual_object["start_val"] and season_num <= qual_object["end_val"]
        else:
            if stat not in row_lower:
                for header_stat in headers[player_type["da_type"]["type"]]:
                    if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                        stat = header_stat.lower()
        
            if stat in row_lower:
                has_match = row_lower[stat] >= qual_object["start_val"] and row_lower[stat] <= qual_object["end_val"]

        if not has_match:
            return False
    
    return True

def comb_rows(matching_rows, player_data, player_type, lower=True, stats=None):
    comb_row = {}
    for header in headers[player_type["da_type"]["type"]].keys():
        if not header in formulas[player_type["da_type"]["type"]] and not header in advanced_stats:
            comb_row[header] = 0.0

    date_start = 0
    date_end = 0
    year_start = 0
    year_end = 0
    is_playoffs = None
    for row_data in matching_rows:
        for stat in row_data:
            if stat in comb_row and isinstance(row_data[stat], numbers.Number) and isinstance(comb_row[stat], numbers.Number) and (not stat in qualifier_map or stat == "Team Score" or stat == "Opponent Score") and not stat in formulas[player_type["da_type"]["type"]] and not stat in advanced_stats and row_data[stat] != 0:
                comb_row[stat] += row_data[stat]

            if stat == "Date":
                pontential_date = row_data[stat]
                if row_data["is_playoffs"] and isinstance(pontential_date, int) and time_frame["playoffs"] == "Only":
                    pontential_date += 1

                if date_start == 0 or pontential_date < date_start:
                    date_start = pontential_date
                if date_end == 0 or pontential_date > date_end:
                    date_end = pontential_date
            elif stat == "Year":
                if year_start == 0 or row_data[stat] < year_start:
                    year_start = row_data[stat]
                if year_end == 0 or row_data[stat] > year_end:
                    year_end = row_data[stat]
        
        if row_data["is_playoffs"]:
            if not is_playoffs or is_playoffs == "Only":
                is_playoffs = "Only"
            else:
                is_playoffs = "Include"
        else:
            if is_playoffs:
                is_playoffs = "Include"
    
    if date_start:
        comb_row["DateStart"] = [date_start]
    else:
        comb_row["DateStart"] = []
    if date_end:
        comb_row["DateEnd"] = [date_end]
    else:
        comb_row["DateEnd"] = []
    if year_start:
        comb_row["YearStart"] = [year_start]
    else:
        comb_row["YearStart"] = []
    if year_end:
        comb_row["YearEnd"] = [year_end]
    else:
        comb_row["YearEnd"] = []
    comb_row["is_playoffs"] = is_playoffs

    if stats == None or header in stats or set(stats).intersection(advanced_stats):
        calculate_advanced_stats(comb_row, matching_rows, player_type["da_type"]["type"], player_type["da_type"]["position"], player_data)
    
    if stats == None or header in stats or set(stats).intersection(formulas[player_type["da_type"]["type"]].keys()):
        for stat in formulas[player_type["da_type"]["type"]]:
            formula = formulas[player_type["da_type"]["type"]][stat]
            value = calculate_formula(stat, player_type, formula, comb_row, matching_rows, player_data)
            comb_row[stat] = value

    headers_to_remove = set()
    for header in comb_row:
        if is_invalid_stat(header, player_type, comb_row, False, player_data):
            headers_to_remove.add(header)

    for key in headers_to_remove:
        del comb_row[key]

    if lower:
        return {key.lower(): value for key, value in comb_row.items()}
    else:
        return comb_row

def handle_date_rows(player_data, player_type, stat, start_date, date_diff, all_rows):
    stat_value = 0
    matching_rows = []
    end_date = start_date + date_diff
    for row in all_rows:
        if row["Date"] >= start_date and row["Date"] < end_date:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_week_rows(player_data, player_type, stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        if row["Date"].year == date.year and row["Date"].isocalendar()[1] == date.isocalendar()[1]:
            matching_rows.append(row)
            
    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_month_rows(player_data, player_type, stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        if row["Date"].year == date.year and row["Date"].month == date.month:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_year_rows(player_data, player_type, stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        if row["Date"].year == date.year:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_game_rows(start_index, player_data, player_type, stat, num_games, all_rows, only_seasons):
    stat_value = 0
    matching_rows = []
    prev_year = None
    for i in range(start_index, start_index + num_games):
        if i >= len(all_rows):
            return 0, []
        
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Year"]:
            return 0, []
        prev_year = row["Year"]

        matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_streak_game_rows(start_index, player_data, player_type, over_stat_objs, all_rows, only_seasons, is_formula):
    matching_rows = []
    prev_year = None
    stats = set()
    if not is_formula:
        find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(all_rows)):
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Year"]:
            break
        prev_year = row["Year"]

        if is_formula:
            row_normal = fill_row(row, player_data, player_type, lower=False)
        else:
            row_lower = fill_row(row, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if is_formula:
                    try:
                        if not bool(calculate_formula("custom_formula", player_type, stat, row_normal, all_rows, player_data, safe_eval=True)):
                            all_passed = False
                            break
                    except Exception:
                        all_passed = False
                else:
                    if stat not in row_lower:
                        for header_stat in headers[player_type["da_type"]["type"]]:
                            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    if stat in row_lower:
                        if row_lower[stat] < stat_obj["start_val"] or row_lower[stat] > stat_obj["end_val"]:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break
            if all_passed:
                any_passed = True
                break
        if any_passed:
            matching_rows.append(row)
        else:
            break
    return matching_rows

def handle_stretch_game_rows(start_index, player_data, player_type, over_stat_objs, all_rows, only_seasons):
    total_matching_rows = []

    matching_rows = []
    prev_year = None
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(all_rows)):
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Year"]:
            break
        prev_year = row["Year"]
        
        matching_rows.append(row)
        combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in combined_row:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in combined_row:
                    if combined_row[stat] < stat_obj["start_val"] or combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break

        if any_passed:
            row_copy = []
            for row in matching_rows:
                row_copy.append(row)
            total_matching_rows.append(row_copy)

    return total_matching_rows

def handle_quickest_game_rows(season, player_data, player_type, over_stat_objs, all_rows, is_quickest):
    matching_rows = []

    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for row in all_rows:
        year = row["Year"]
        if year == season:
            matching_rows.append(row)
            combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
            any_passed = False
            for over_stat_obj in over_stat_objs:
                all_passed = True
                for stat_obj in over_stat_obj["stats"]:
                    stat = stat_obj["stat"]
                    if stat not in combined_row:
                        for header_stat in headers[player_type["da_type"]["type"]]:
                            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    if stat in combined_row:
                        if combined_row[stat] < stat_obj["start_val"] or combined_row[stat] > stat_obj["end_val"]:
                            all_passed = False
                    else:
                        all_passed = False
                if all_passed:
                    any_passed = True
                    break
            if any_passed:
                return matching_rows

    if is_quickest:
        return None
    else:
        return matching_rows

def handle_season_rows(start_season, end_season, player_data, player_type, stat, all_rows):
    stat_value = 0
    matching_rows = []
    all_playoffs = True
    for row in all_rows:
        if row["Year"] >= start_season and row["Year"] < end_season:
            if not row["is_playoffs"]:
                all_playoffs = False
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows, all_playoffs

def handle_streak_season_rows(start_index, seasons, player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(seasons)):
        season = seasons[i]
        season_matching_rows = []
        for row in all_rows:
            year = row["Year"]
            if year == season:
                season_matching_rows.append(row)
        season_combined_row = comb_rows(season_matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in season_combined_row:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in season_combined_row:
                    if season_combined_row[stat] < stat_obj["start_val"] or season_combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break
        if any_passed:
            matching_rows.extend(season_matching_rows)
        else:
            break
    return matching_rows

def handle_stretch_season_rows(start_index, seasons, player_data, player_type, over_stat_objs, all_rows):
    total_matching_rows = []

    matching_rows = []
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(seasons)):
        season = seasons[i]
        for row in all_rows:
            year = row["Year"]
            if year == season:
                matching_rows.append(row)
        combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in combined_row:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in combined_row:
                    if combined_row[stat] < stat_obj["start_val"] or combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break

        if any_passed:
            row_copy = []
            for row in matching_rows:
                row_copy.append(row)
            total_matching_rows.append(row_copy)

    return total_matching_rows

def handle_quickest_season_rows(seasons, player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for season in seasons:
        for row in all_rows:
            year = row["Year"]
            if year == season:
                matching_rows.append(row)
        season_combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in season_combined_row:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in season_combined_row:
                    if season_combined_row[stat] < stat_obj["start_val"] or season_combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                else:
                    all_passed = False
            if all_passed:
                any_passed = True
                break
        if any_passed:
            return matching_rows

    return None

def handle_quickest_career_rows(player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for row in all_rows:
        matching_rows.append(row)
        comb_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in comb_row:
                    for header_stat in headers[player_type["da_type"]["type"]]:
                        if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in comb_row:
                    if comb_row[stat] < stat_obj["start_val"] or comb_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break
        if any_passed:
            return matching_rows

    return None

def handle_team_rows(team, row_stat, player_data, player_type, stat, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        row_team = row[row_stat]
        if team == row_team:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def fill_row(row, player_data, player_type, lower=True, stats=None):
    for header in headers[player_type["da_type"]["type"]].keys():
        if header not in row:
            if not header in formulas[player_type["da_type"]["type"]]:
                row[header] = 0.0
    
    if stats == None or set(stats).intersection(advanced_stats):
        missing_advanced = False
        for advanced_stat in advanced_stats:
            if not advanced_stat in row:
                missing_advanced = True
                break

        if missing_advanced:
            calculate_advanced_stats(row, [row], player_type["da_type"]["type"], player_type["da_type"]["position"], player_data)
    
    if stats == None or set(stats).intersection(formulas[player_type["da_type"]["type"]].keys()):
        for form_stat in formulas[player_type["da_type"]["type"]]:
            if not form_stat == "TmRec":
                if not form_stat in row:
                    formula = formulas[player_type["da_type"]["type"]][form_stat]
                    value = calculate_formula(form_stat, player_type, formula, row, None, player_data)
                    row[form_stat] = value

    headers_to_remove = set()
    for header in row:
        row["DateStart"] = [row["Date"]]
        row["YearStart"] = [row["Year"]]
        row["YearEnd"] = [row["Year"]]
        row["DateEnd"] = [row["Date"]]
        prev_is_playofs = row["is_playoffs"]
        if row["is_playoffs"]:
            row["is_playoffs"] = "Only"
        else:
            row["is_playoffs"] = None
        if is_invalid_stat(header, player_type, row, False, player_data):
            headers_to_remove.add(header)
        row["is_playoffs"] = prev_is_playofs
    
    for key in headers_to_remove:
        del row[key]

    if lower:
        return {key.lower(): value for key, value in row.items()}
    else:
        return row

def calculate_advanced_stats(data, all_rows, overall_type, position, player_data):
    if data["GP"]:
        if overall_type == "Skater":
            total_adj_goals = 0.0
            total_adj_ast = 0.0
            total_adj_goals_no_seas = 0.0
            total_adj_ast_no_seas = 0.0

            yearly_stats = {}
            for row_data in all_rows:
                year = row_data["Year"]
                is_playoffs = row_data["is_playoffs"]
                team = row_data["Tm"]
                is_date_int = isinstance(row_data["Date"], int) and not row_data["is_playoffs"]
                if year not in yearly_stats:
                    yearly_stats[year] = {}
                if team not in yearly_stats[year]:
                    yearly_stats[year][team] = {}
                if is_date_int not in yearly_stats[year][team] :
                    yearly_stats[year][team][is_date_int] = {}
                if is_playoffs not in yearly_stats[year][team][is_date_int]:
                    yearly_stats[year][team][is_date_int][is_playoffs] = {
                        "G" : 0,
                        "A" : 0,
                        "is_playoffs" : is_playoffs,
                        "Date" : 1 if is_date_int else 1.0
                    }
                yearly_stats[year][team][is_date_int][is_playoffs]["G"] += row_data.get("G", 0)
                yearly_stats[year][team][is_date_int][is_playoffs]["A"] += row_data.get("A", 0)

            for year in yearly_stats:
                if year > current_season:
                    year = current_season
                for team in yearly_stats[year]:
                    for is_date_int in yearly_stats[year][team]:
                        for is_playoffs in yearly_stats[year][team][is_date_int]:
                            total_adj_goals += calculate_adjusted_goals(yearly_stats[year][team][is_date_int][is_playoffs], data, year, team, False)
                            total_adj_ast += calculate_adjusted_assists(yearly_stats[year][team][is_date_int][is_playoffs], data, year, team, False)
                            adj_goals_no_seas = calculate_adjusted_goals(yearly_stats[year][team][is_date_int][is_playoffs], data, year, team, True)
                            adj_ast_no_seas = calculate_adjusted_assists(yearly_stats[year][team][is_date_int][is_playoffs], data, year, team, True)
                            total_adj_goals_no_seas += adj_goals_no_seas
                            total_adj_ast_no_seas += adj_ast_no_seas

                            for row_data in all_rows:
                                row_year = row_data["Year"]
                                row_is_playoffs = row_data["is_playoffs"]
                                row_team = row_data["Tm"]

                                if row_year == year and row_is_playoffs == is_playoffs and row_team == team:
                                    row_data["AdjGNoSeas"] = adj_goals_no_seas
                                    row_data["AdjANoSeas"] = adj_ast_no_seas
                                    row_data["AdjPNoSeas"] = float(round_value(adj_goals_no_seas) + round_value(adj_ast_no_seas))
                                    break

            data["AdjG"] = total_adj_goals
            data["AdjA"] = total_adj_ast
            data["AdjP"] = float(round_value(total_adj_goals) + round_value(total_adj_ast))
            data["AdjGNoSeas"] = total_adj_goals_no_seas
            data["AdjANoSeas"] = total_adj_ast_no_seas
            data["AdjPNoSeas"] = float(round_value(total_adj_goals_no_seas) + round_value(total_adj_ast_no_seas))
        else:
            total_adj_goaa = 0.0
            total_gaa_minus = 0.0
            total_gsaa = 0.0

            yearly_stats = {}
            for row_data in all_rows:
                year = row_data["Year"]
                is_playoffs = row_data["is_playoffs"]
                team = row_data["Tm"]
                is_date_int = isinstance(row_data["Date"], int) and not row_data["is_playoffs"]
                if year not in yearly_stats:
                    yearly_stats[year] = {}
                if team not in yearly_stats[year]:
                    yearly_stats[year][team] = {}
                if is_date_int not in yearly_stats[year][team] :
                    yearly_stats[year][team][is_date_int] = {}
                if is_playoffs not in yearly_stats[year][team][is_date_int]:
                    yearly_stats[year][team][is_date_int][is_playoffs] = {
                        "TOI" : 0,
                        "GA" : 0,
                        "SA" : 0,
                        "SV" : 0,
                        "is_playoffs" : is_playoffs,
                        "Date" : 1 if is_date_int else 1.0
                    }
                yearly_stats[year][team][is_date_int][is_playoffs]["TOI"] += row_data.get("TOI", 0)
                yearly_stats[year][team][is_date_int][is_playoffs]["GA"] += row_data.get("GA", 0)
                yearly_stats[year][team][is_date_int][is_playoffs]["SA"] += row_data.get("SA", 0)
                yearly_stats[year][team][is_date_int][is_playoffs]["SV"] += row_data.get("SV", 0)
            
            for year in yearly_stats:
                if year > current_season:
                    year = current_season
                for team in yearly_stats[year]:
                    for is_date_int in yearly_stats[year][team]:
                        for is_playoffs in yearly_stats[year][team][is_date_int]:
                            if not "stat_values" in player_data or not player_data["stat_values"]["is_shift_data"] or year >= 2010:
                                total_adj_goaa += calculate_adjusted_gaa(yearly_stats[year][team][is_date_int][is_playoffs], data, year, team)

                                if year >= 1955:
                                    try:
                                        over_header = "Playoffs" if is_playoffs else "Standard"
                                        constants_year = str(year)
                                        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"]:
                                            constants_year = str(int(current_season) - 1)

                                        player_shots = yearly_stats[year][team][is_date_int][is_playoffs]["SA"]
                                        player_save_percentage = yearly_stats[year][team][is_date_int][is_playoffs]["SV"] / player_shots
                                        league_save_percentage = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SV"] / totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SA"]

                                        gaa_minus = 100 * (1-player_save_percentage)/(1-league_save_percentage)
                                        total_gaa_minus += gaa_minus * (player_shots / data["SA"])
                                    
                                        total_gsaa += yearly_stats[year][team][is_date_int][is_playoffs]["SV"] - (league_save_percentage * player_shots)
                                    except ZeroDivisionError:
                                        pass

            data["GA%-"] = total_gaa_minus
            data["AdjGAA"] = total_adj_goaa
            data["GSAA"] = total_gsaa
            data["GSAA/82GP"] = data["GSAA"] / (data["GP"] / 82)
            if data["TOI"]:
                data["GSAA/60M"] = data["GSAA"] / (data["TOI"] / 3600)

def calculate_goals_created(row_data, data, year, team):
    try:
        over_header = "Playoffs" if row_data["is_playoffs"] else "Standard"
        year = str(year)
        constants_year = year
        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"] or team not in totals[over_header]["TOT"][constants_year] or not totals[over_header]["TOT"][constants_year][team] or "T-GP" not in totals[over_header]["TOT"][constants_year][team]:
            constants_year = str(int(current_season) - 1)
        
        player_goals = row_data.get("G", 0)
        player_ast = row_data.get("A", 0)

        team_goals = totals[over_header]["TOT"][constants_year][team]["G"]
        team_ast = totals[over_header]["TOT"][constants_year][team]["A"]

        goals_created = (player_goals + (0.5 * player_ast)) * (team_goals / (team_goals + (0.5 * team_ast)))

        return goals_created 
    except ZeroDivisionError:
        return 0

def calculate_off_point_shares(row_data, data, year, team, pos):
    try:
        over_header = "Playoffs" if row_data["is_playoffs"] else "Standard"
        year = str(year)
        constants_year = year
        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"] or team not in totals[over_header]["TOT"][constants_year] or not totals[over_header]["TOT"][constants_year][team] or "T-GP" not in totals[over_header]["TOT"][constants_year][team]:
            constants_year = str(int(current_season) - 1)

        if pos != "G":
            pos = "D" if pos.endswith("D") else "F"
        
        player_goals = row_data.get("G", 0)
        player_ast = row_data.get("A", 0)
        if int(year) >= 1998:
            player_toi = row_data.get("TOI", 0)
        else:
            player_gp = row_data.get("GP", 0)

        team_goals = totals[over_header]["TOT"][constants_year][team]["G"]
        team_ast = totals[over_header]["TOT"][constants_year][team]["A"]

        if pos == "G":
            pos_goals = totals[over_header]["Goalie"][pos][constants_year]["NHL"]["G"]
            pos_ast = totals[over_header]["Goalie"][pos][constants_year]["NHL"]["A"]
            if int(year) >= 1998:
                pos_toi = totals[over_header]["Goalie"][pos][constants_year]["NHL"]["TOI"]
            else:
                pos_gp = totals[over_header]["Goalie"][pos][constants_year]["NHL"]["GP"]
        else:
            pos_goals = totals[over_header]["Skater"][pos][constants_year]["NHL"]["G"]
            pos_ast = totals[over_header]["Skater"][pos][constants_year]["NHL"]["A"]
            if int(year) >= 1998:
                pos_toi = totals[over_header]["Skater"][pos][constants_year]["NHL"]["TOI"]
            else:
                pos_gp = totals[over_header]["Skater"][pos][constants_year]["NHL"]["GP"]

        lg_goals = totals[over_header]["TOT"][constants_year]["NHL"]["G"]
        lg_goals_per = lg_goals
        lg_ast = totals[over_header]["TOT"][constants_year]["NHL"]["A"]
        if over_header == "Playoffs":
            lg_goals_per = totals["Standard"]["TOT"][constants_year]["NHL"]["G"]
            lg_pts = totals["Standard"]["TOT"][constants_year]["NHL"]["T-PTS"]
        else:
            lg_pts = totals[over_header]["TOT"][constants_year]["NHL"]["T-PTS"]

        goals_created = (player_goals + (0.5 * player_ast)) * (team_goals / (team_goals + (0.5 * team_ast)))
        pos_goals_created = (pos_goals + (0.5 * pos_ast)) * (lg_goals / (lg_goals + (0.5 * lg_ast)))
        
        if int(year) >= 1998:
            marg_goals = goals_created - ((7/12) * player_toi * (pos_goals_created / pos_toi))
        else:
            marg_goals = goals_created - ((7/12) * player_gp * (pos_goals_created / pos_gp))

        marg_goals_per_pnt = lg_goals_per / lg_pts

        off_point_shares = marg_goals / marg_goals_per_pnt

        return off_point_shares 
    except ZeroDivisionError:
        return 0

def calculate_def_point_shares(row_data, data, year, team, pos):
    try:
        over_header = "Playoffs" if row_data["is_playoffs"] else "Standard"
        year = str(year)
        constants_year = year
        missing_year = False
        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"] or team not in totals[over_header]["TOT"][constants_year] or not totals[over_header]["TOT"][constants_year][team] or "T-GP" not in totals[over_header]["TOT"][constants_year][team]:
            constants_year = str(int(current_season) - 1)
            missing_year = True

        if pos != "G":
            pos = "D" if pos.endswith("D") else "F"
        pos_adj = 10/7 if pos == "D" else 5/7
        
        player_toi = row_data.get("TOI", 0)
        player_gp = row_data.get("GP", 0)
        player_pm = row_data.get("PlusMinus", 0)

        if pos == "G":
            if int(year) >= 1998:
                pos_toi = totals[over_header]["Goalie"][pos][constants_year][team]["TOI"]
            else:
                pos_gp = totals[over_header]["Goalie"][pos][constants_year][team]["GP"]
        else:
            if int(year) >= 1998:
                pos_toi = totals[over_header]["Skater"][pos][constants_year][team]["TOI"]
            else:
                pos_gp = totals[over_header]["Skater"][pos][constants_year][team]["GP"]
            if int(year) >= 1967:
                pos_pm = totals[over_header]["Skater"][pos][constants_year][team]["+/-"]
            
        team_goals_against = totals[over_header]["TOT"][constants_year][team]["T-GA"]
        if int(year) >= 1983:
            team_sa = totals[over_header]["Goalie"]["G"][constants_year][team]["SA"]
            team_goal_toi = totals[over_header]["Goalie"]["G"][constants_year][team]["TOI"]
        if int(year) >= 1998:
            team_skate_toi = totals[over_header]["Skater"]["F"][constants_year][team]["TOI"] + totals[over_header]["Skater"]["D"][constants_year][team]["TOI"]
        else:
            team_forward_gp = totals[over_header]["Skater"]["F"][constants_year][team]["GP"]
            team_def_gp = totals[over_header]["Skater"]["D"][constants_year][team]["GP"]

        if missing_year:
            team_games = 1
        else:
            team_games = totals[over_header]["TOT"][constants_year][team]["T-GP"]

        lg_goals = totals[over_header]["TOT"][constants_year]["NHL"]["G"]
        lg_goals_per = lg_goals
        if int(year) >= 1983:
            lg_sa = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SA"]
            lg_goal_toi = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["TOI"]
        lg_gp = totals[over_header]["TOT"][constants_year]["NHL"]["T-GP"]
        if over_header == "Playoffs":
            lg_goals_per = totals["Standard"]["TOT"][constants_year]["NHL"]["G"]
            lg_pts = totals["Standard"]["TOT"][constants_year]["NHL"]["T-PTS"]
        else:
            lg_pts = totals[over_header]["TOT"][constants_year]["NHL"]["T-PTS"]

        if int(year) >= 1998:
            time_prop = player_toi / team_skate_toi
        else:
            if pos == "D":
                time_prop = (2 * player_gp) / (team_forward_gp + (2 * team_def_gp))
            else:
                time_prop = player_gp / (team_forward_gp + (2 * team_def_gp))

        if int(year) >= 1983:
            team_sa_per_minute = team_sa / (team_goal_toi / 60)
            lg_sa_per_minute = lg_sa / (lg_goal_toi / 60)
            marg_goal_prop = (7 - (2 * (team_sa_per_minute / lg_sa_per_minute))) / 7
        else:
            marg_goal_prop = 5/7

        team_marg_ga = ((1 + (7/12)) * team_games * (lg_goals / lg_gp)) - team_goals_against

        if pos == "G":
            plus_minus_ad = 0
        else:
            if int(year) >= 1998:
                plus_minus_ad = (1/7) * pos_adj * (player_pm - player_toi * (pos_pm / pos_toi))
            elif int(year) >= 1967:
                plus_minus_ad = (1/7) * pos_adj * (player_pm - player_gp * (pos_pm / pos_gp))
            else:
                plus_minus_ad = 0

        marg_goal_ag = (time_prop * marg_goal_prop * pos_adj * team_marg_ga) + plus_minus_ad

        marg_goals_per_pnt = lg_goals_per / lg_pts

        def_point_shares = marg_goal_ag / marg_goals_per_pnt

        return def_point_shares
    except ZeroDivisionError:
        return 0

def calculate_goalie_point_shares(row_data, data, year, team):
    try:
        over_header = "Playoffs" if row_data["is_playoffs"] else "Standard"
        year = str(year)
        constants_year = year
        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"] or team not in totals[over_header]["TOT"][constants_year] or not totals[over_header]["TOT"][constants_year][team] or "T-GP" not in totals[over_header]["TOT"][constants_year][team]:
            constants_year = str(int(current_season) - 1)

        player_ga = row_data.get("GA", 0)
        player_toi = row_data.get("TOI", 0)
        if int(year) >= 1983:
            player_sa = row_data.get("SA", 0)

        lg_goals = totals[over_header]["TOT"][constants_year]["NHL"]["G"]
        lg_goals_per = lg_goals
        lg_ga = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["GA"]
        lg_goal_toi = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["TOI"]
        if int(year) >= 1983:
            lg_sa = totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["SA"]
        if over_header == "Playoffs":
            lg_goals_per = totals["Standard"]["TOT"][constants_year]["NHL"]["G"]
            lg_pts = totals["Standard"]["TOT"][constants_year]["NHL"]["T-PTS"]
        else:
            lg_pts = totals[over_header]["TOT"][constants_year]["NHL"]["T-PTS"]
            
        if int(year) >= 1983:
            player_sa_per_minute = player_sa / (player_toi / 60)
            lg_sa_per_minute = lg_sa / (lg_goal_toi / 60)
            sa_adj = player_sa_per_minute / lg_sa_per_minute
        else:
            sa_adj = 1

        lg_ga_per_minute = lg_ga / (lg_goal_toi / 60)
        marg_ga_ag = ((1 + (7/12)) * sa_adj * (player_toi / 60) * lg_ga_per_minute) - player_ga

        marg_goals_per_pnt = lg_goals_per / lg_pts

        goalie_point_shares = (2/7) * (marg_ga_ag / marg_goals_per_pnt)

        return goalie_point_shares
    except ZeroDivisionError:
        return 0

def calculate_adjusted_goals(row_data, data, year, team, per_game):
    try:
        over_header = "Playoffs" if row_data["is_playoffs"] else "Standard"
        year = str(year)
        constants_year = year
        missing_year = False
        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"] or team not in totals[over_header]["TOT"][constants_year] or not totals[over_header]["TOT"][constants_year][team] or "T-GP" not in totals[over_header]["TOT"][constants_year][team]:
            constants_year = str(int(current_season) - 1)
            missing_year = True
        
        player_stat = row_data.get("G", 0)

        total_games = totals[over_header]["TOT"][constants_year]["NHL"]["T-GP"]
        if missing_year:
            team_games = 1
        else:
            team_games = totals[over_header]["TOT"][constants_year][team]["T-GP"]
        roster_per_year = totals[over_header]["TOT"][constants_year]["NHL"]["roster_size"]

        stat_total = totals[over_header]["TOT"][constants_year]["NHL"]["G"]
        average_stat = (stat_total - player_stat) / (total_games / 2)

        weight_games = 11 if row_data["is_playoffs"] else 82

        game_weight = weight_games / team_games
        if not isinstance(row_data["Date"], int) or row_data["is_playoffs"] or per_game:
            game_weight = 1
        
        adj_goals = player_stat * game_weight * (roster_per_year / 18) * (6 / average_stat)

        if isinstance(row_data["Date"], int) and not row_data["is_playoffs"]:
            adj_goals =  round_value(adj_goals)

        return adj_goals 
    except ZeroDivisionError:
        return 0

def calculate_adjusted_assists(row_data, data, year, team, per_game):
    try:
        over_header = "Playoffs" if row_data["is_playoffs"] else "Standard"
        year = str(year)
        constants_year = year
        missing_year = False
        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"] or team not in totals[over_header]["TOT"][constants_year] or not totals[over_header]["TOT"][constants_year][team] or "T-GP" not in totals[over_header]["TOT"][constants_year][team]:
            constants_year = str(int(current_season) - 1)
            missing_year = True
        
        player_stat = row_data.get("A", 0)

        total_games = totals[over_header]["TOT"][constants_year]["NHL"]["T-GP"]
        if missing_year:
            team_games = 1
        else:
            team_games = totals[over_header]["TOT"][constants_year][team]["T-GP"]
        roster_per_year = totals[over_header]["TOT"][constants_year]["NHL"]["roster_size"]

        stat_total = totals[over_header]["TOT"][constants_year]["NHL"]["A"]
        average_stat = (stat_total - player_stat) / (total_games / 2)

        weight_games = 11 if row_data["is_playoffs"] else 82

        game_weight = weight_games / team_games
        if not isinstance(row_data["Date"], int) or row_data["is_playoffs"] or per_game:
            game_weight = 1

        adj_ass = player_stat * game_weight * (roster_per_year / 18) * (10 / average_stat)

        if isinstance(row_data["Date"], int) and not row_data["is_playoffs"]:
            adj_ass =  round_value(adj_ass)

        return adj_ass
    except ZeroDivisionError:
        return 0

def calculate_adjusted_gaa(row_data, data, year, team):
    try:
        over_header = "Playoffs" if row_data["is_playoffs"] else "Standard"
        year = str(year)
        constants_year = year
        if constants_year not in totals[over_header]["TOT"] or not totals[over_header]["TOT"][constants_year] or not "T-GP" in totals[over_header]["TOT"][constants_year]["NHL"] or team not in totals[over_header]["TOT"][constants_year] or not totals[over_header]["TOT"][constants_year][team] or "T-GP" not in totals[over_header]["TOT"][constants_year][team]:
            constants_year = str(int(current_season) - 1)
            
        toi_str = "TOI"
        
        player_stat = row_data.get("GA", 0) / (row_data.get(toi_str, 0) / 3600)
        average_stat = (totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["GA"] - row_data.get("GA", 0)) / ((totals[over_header]["Goalie"]["G"][constants_year]["NHL"]["TOI"] - row_data.get(toi_str, 0)) / 3600)
        adjusted_gaa = (player_stat * (3 / average_stat))

        return adjusted_gaa * (row_data[toi_str] / data[toi_str])
    except ZeroDivisionError:
        return 0

def get_player_type(player_page):
    player_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"})
    player_info.find("strong").decompose()
    player_type_el = player_page.find("p").decode_contents().strip().split(" ")
    player_type = player_type_el[1].strip().lower()[0]
    if player_type != "g":
        return {
            "type" : "Skater",
            "position" : "D" if player_type == "d" else "F"
        }
    else:
        return {
            "type" : "Goalie",
            "position" : "G"
        }

def get_player_position(player_page):
    player_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"})
    player_info.find("strong").decompose()
    player_type_el = player_page.find("p").decode_contents().strip().split(" ")
    position = player_type_el[1].replace("•", "").strip().upper()
    handiness = player_type_el[len(player_type_el) - 1].strip().upper()
    if "D" in position:
        if handiness == "LEFT":
            position = position.replace("D", "LHD")
        elif handiness == "RIGHT":
            position = position.replace("D", "RHD")
    return position

def get_current_cap(player_page):
    player_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"})
    cap_hit_strong = player_info.find("strong", text="Current cap hit")
    if cap_hit_strong:
        cap_hit_parent = cap_hit_strong.parent
        player_info.find("strong").decompose()
        cap_hit = str(cap_hit_parent.text).split("Current cap hit:")[1].strip()
        return float(cap_hit[1:].replace(",", ""))
    return 0

def get_player_birthday(player_id, player_page):
    birthday_span = player_page.find("span", {"id" : "necro-birth"})
    if birthday_span:
        return dateutil.parser.parse(birthday_span["data-birth"]).date()
    else:
        return None

def get_player_name(player_page):
    player_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"})
    player_name_el = player_info.find("h1", {"itemprop" : "name"})
    return str(player_name_el.text).strip()

def get_last_updated(player_page):
    social_info = player_page.find("div", {"id" : "social"})
    site_last_updated_el = social_info.find("strong", text="Site Last Updated:")
    date = dateutil.parser.parse(site_last_updated_el.parent.contents[1])
    localtz = timezone("US/Eastern")
    return localtz.localize(date)

def get_valid_years(player_page, player_type):
    total_valid_years = set()
    reg_valid_years = set()
    game_valid_years = set()
    valid_teams_key = {}
    valid_teams_raw_key = {}
    valid_year_teams = {}

    table_names = ["stats_basic_plus_nhl", "stats_basic_nhl", "stats_basic_plus_nhl_po", "stats_basic_nhl_po"]
    comments = None
    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True
                if match:
                    if str(row.find("td", {"data-stat" : "lg_id"}).find(text=True)) == "NHL":
                        row_year = int(re.sub("[^0-9]", "", str(row.find("th").find(text=True)).split("-")[0]))
                        total_valid_years.add(row_year)
                        if not table_name.endswith("_po"):
                            reg_valid_years.add(row_year)
                        row_team = row.find("td", {"data-stat" : "team_id"}).find("a")
                        if row_team:
                            row_abbr = str(row_team.find(text=True)).upper()
                            if row_abbr not in valid_teams_key:
                                valid_teams_key[row_abbr] = set()
                            valid_teams_key[row_abbr].add(row_year)

                            if row.find("td", {"data-stat" : "games_played"}) and row.find("td", {"data-stat" : "games_played"}).find(text=True) and int(row.find("td", {"data-stat" : "games_played"}).find(text=True)):
                                if row_abbr not in valid_teams_raw_key:
                                    valid_teams_raw_key[row_abbr] = set()
                                valid_teams_raw_key[row_abbr].add(row_year)

                            if not row_year in valid_year_teams:
                                valid_year_teams[row_year] = []
                            if not row_abbr in valid_year_teams[row_year]:
                                valid_year_teams[row_year].append(row_abbr)

    bottom_nav_container = player_page.find("div", id="bottom_nav_container")
    if bottom_nav_container:
        element_name = "Game Logs"
        bottom_nav_element = bottom_nav_container.find("p", text=element_name)
        if bottom_nav_element:
            bottom_nav_sibling = bottom_nav_element.find_next_sibling()
            if bottom_nav_sibling:
                year_elements = bottom_nav_element.find_next_sibling().find_all("a")
                for year_element in year_elements:
                    row_year = str(year_element.find(text=True))
                    if row_year != "Career Playoffs":
                        row_year = int(row_year.split("-")[0])
                        game_valid_years.add(row_year)

    total_valid_years = list(total_valid_years)
    reg_valid_years = list(reg_valid_years)
    game_valid_years = list(game_valid_years)

    total_valid_years.sort()
    reg_valid_years.sort()
    game_valid_years.sort()

    return total_valid_years, reg_valid_years, game_valid_years, valid_teams_key, valid_teams_raw_key, valid_year_teams

def add_valid_playoff_years(valid_years, playoff_data, time_frame):
    if time_frame["playoffs"] == "Only":
        valid_years = []

    for data in playoff_data:
        year = data["Year"]
        if not year in valid_years:
            valid_years.append(year)
    
    return sorted(valid_years)

def determine_rookie_years(player_type, player_page, rookie_quals, birthday, player_data, player_link):
    temp_time_frame = {
        "time_start" : min(player_data["year_valid_years"]),
        "time_end" : max(player_data["year_valid_years"]),
        "playoffs" : "Include"
    }

    temp_rows = handle_season_stats_game(player_type, player_data, player_link, temp_time_frame)
    reg_seasons = set([row_data["Year"] for row_data in temp_rows if not row_data["is_playoffs"]])
    playoff_seasons = set([row_data["Year"] for row_data in temp_rows if row_data["is_playoffs"]])

    year_info = {}
    for season in reg_seasons:
        if season not in year_info:
            year_info[season] = {
                "reg_games" : 0,
                "playoff_games" : 0
            }
        
        year_info[season]["reg_games"] += len([1 for row_data in temp_rows if row_data["Year"] == season and not row_data["is_playoffs"]])
    
    for season in playoff_seasons:
        if season not in year_info:
            year_info[season] = {
                "reg_games" : 0,
                "playoff_games" : 0
            }
        
        year_info[season]["playoff_games"] += len([1 for row_data in temp_rows if row_data["Year"] == season and row_data["is_playoffs"]])
    
    years_desc = sorted(list(year_info.keys()))
    rookie_years = []
    for i in range(len(years_desc) - 1, -1, -1):
        year = years_desc[i]
        season_date = datetime.datetime(year, 9, 15)
        age = dateutil.relativedelta.relativedelta(birthday, season_date)
        if year < 1990 or age.years < 26:
            is_rookie_year = True
            six_gp_seasons = 0
            for k in range(i - 1, -1, -1):
                sub_year = years_desc[k]
                reg_games_played = year_info[sub_year]["reg_games"]
                playoff_games_played = year_info[sub_year]["playoff_games"]

                if year < 1942:
                    if reg_games_played >= 1 or playoff_games_played >= 1:
                        is_rookie_year = False
                        break
                elif year < 1944:
                    if reg_games_played >= 1:
                        is_rookie_year = False
                        break
                elif year < 1947:
                    if reg_games_played >= 3 or playoff_games_played >= 3:
                        is_rookie_year = False
                        break
                else:
                    if reg_games_played >= 6:
                        six_gp_seasons += 1
                        if six_gp_seasons >= 2:
                            is_rookie_year = False
                            break

                    if year < 1968:
                        if reg_games_played >= 20:
                            is_rookie_year = False
                            break
                    else:
                        if reg_games_played >= 25:
                            is_rookie_year = False
                            break

            if is_rookie_year:
                rookie_years.append(year)

    for qual_obj in rookie_quals:
        qual_obj["values"] = rookie_years

def get_player_is_active(player_id, player_page):       
    return bool(player_page.find("div", {"itemtype" : "https://schema.org/Person"}).find("strong", text="Team"))

def get_player_image(player_page):
    image_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"}).find_previous_sibling()
    if image_info:
        return image_info.find("img")["src"]
    else:
        return None

def get_player_country(player_page):
    player_country = player_page.find("span", {"itemprop" : "birthPlace"}).find_next_sibling("span")
    if player_country:
        classes = player_country.get("class")
        if classes and len(classes) == 2:
            flag_class = classes[1]
            if flag_class.startswith("f-"):
                stylesheet = player_page.find("link", {"rel" : "stylesheet"})
                if stylesheet:
                    link = stylesheet.get("href")
                    if link:
                        return {
                            "link" : link,
                            "flag_class" : flag_class 
                        }
    return None

def get_player_current_team_number(player_page):
    team = None
    number = None
    numbers_map = []
    pot_numbers = []
    numbers_team_map = {}
    numbers_year_map = {}
    
    team_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"}).find("strong", text="Team")
    number_info = player_page.find("div", {"class" : "uni_holder"})
    if team_info:
        team = str(team_info.find_next_sibling().find(text=True))
    else:
        if number_info:
            pot_numbers = number_info.find_all("a")
            if pot_numbers:
                valid_teams = {}
                for pot_number in pot_numbers:
                    pot_number_text = pot_number["data-tip"]
                    m = re.search(r"\d{4}", pot_number_text)
                    row_team = pot_number_text[:m.start() - 2].strip()
                    pot_number_text = pot_number_text[m.start():]
                    pot_number_text_split = pot_number_text.split("-", 1)
                    if len(pot_number_text_split) == 2:
                        years = set(range(int(pot_number_text_split[0]), int(pot_number_text_split[1])))
                    else:
                        years = set(int(pot_number_text_split[0]))
                    if row_team not in valid_teams:
                        valid_teams[row_team] = {"years" : set(), "order" : len(valid_teams)}
                    valid_teams[row_team]["years"].update(years)
                team = sorted(valid_teams, key=lambda team: (len(valid_teams[team]["years"]), valid_teams[team]["order"]), reverse=True)[0]

    if number_info:
        pot_numbers = list(reversed(number_info.find_all("a")))
        if pot_numbers:
            if team_info:
                number = re.sub("[^0-9]", "", str(pot_numbers[0].text))
            else:
                current_max_years = -1
                for pot_number in pot_numbers:
                    pot_number_text = pot_number["data-tip"]
                    if team:
                        pot_numbers_split = pot_number_text.split("/")
                        has_match = False
                        for pot_number_val in pot_numbers_split:
                            if pot_number_val.startswith(team):
                                has_match = True
                        if not has_match:
                            continue
                    m = re.search(r"\d{4}", pot_number_text)
                    pot_number_text = pot_number_text[m.start():]
                    pot_number_text_split = pot_number_text.split("-", 1)
                    year_count = 1
                    if len(pot_number_text_split) == 2:
                        year_count = int(pot_number_text_split[1]) - int(pot_number_text_split[0])
                    if year_count >= current_max_years:
                        number = re.sub("[^0-9]", "", str(pot_number.text))
                        current_max_years = year_count
            
    parsed_teams = set()
    table_names = ["stats_basic_plus_nhl", "stats_basic_nhl", "stats_basic_plus_nhl_po", "stats_basic_nhl_po"]
    comments = None
    for table_name in table_names:
        table = player_page.find("table", id=table_name)

        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class") and not "blank_table" in row.get("class"):
                    match = True
                if match:
                    if str(row.find("td", {"data-stat" : "lg_id"}).find(text=True)) == "NHL":
                        row_year = int(re.sub("[^0-9]", "", str(row.find("th").find(text=True)).split("-")[0]))
                        row_team = row.find("td", {"data-stat" : "team_id"}).find("a")
                        if row_year not in numbers_year_map:
                            numbers_year_map[row_year] = set()
                        if row_team:
                            row_team_str = str(row_team.find(text=True))
                            numbers_year_map[row_year].add(row_team_str)
                            if row_team_str not in parsed_teams:
                                team_url = "https://www.hockey-reference.com" + row_team.get("href")
                                request = urllib.request.Request(team_url, headers=request_headers)
                                try:
                                    response, team_page = url_request(request)
                                except urllib.error.HTTPError as err:
                                    if err.status == 404:
                                        return []
                                    else:
                                        raise
                                team_info = team_page.find("div", {"id" : "info"})
                                team_name_str = str(team_info.find("h1", {"itemprop" : "name"}).find_all("span")[1].find(text=True))
                                numbers_team_map[team_name_str] = row_team_str
                                parsed_teams.add(row_team_str)

    for pot_number in pot_numbers:
        pot_number_text = pot_number["data-tip"]
        teams = pot_number_text.split(",", 1)[0]
        parsed_teams = []
        if teams in numbers_team_map:
            parsed_teams.append(numbers_team_map[teams])
        else:
            teams = teams.split("/")
            for sub_team in teams:
                if sub_team in numbers_team_map:
                    parsed_teams.append(numbers_team_map[sub_team])
        m = re.search(r"\d{4}", pot_number_text)
        pot_number_text = pot_number_text[m.start():]
        pot_number_text_split = pot_number_text.split("-", 1)
        start_year =  int(pot_number_text_split[0])
        if len(pot_number_text_split) == 2:
            end_year = int(pot_number_text_split[1]) - 1
        else:
            end_year = start_year
        sub_number = int(re.sub("[^0-9]", "", str(pot_number.text)))
        numbers_map.append({
            "start_year" : start_year,
            "end_year" : end_year,
            "number" : sub_number,
            "teams" : parsed_teams
        })

    if not numbers_team_map or not numbers_year_map:            
        team_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"}).find("strong", text="Team")
        draft_info = player_page.find("div", {"itemtype" : "https://schema.org/Person"}).find("strong", text="Draft")
        team_els = []
        if team_info:
            team_els.append(team_info.find_next_sibling().find("a"))
            
        for team_el_to_use in  team_els:
            row_team_str = str(team_el_to_use.get("href").split("/")[2].upper())
            if current_season not in numbers_year_map:
                numbers_year_map[current_season] = set()
            numbers_year_map[current_season].add(row_team_str)
            team_url = "https://www.hockey-reference.com/teams/" + row_team_str
            request = urllib.request.Request(team_url, headers=request_headers)
            try:
                response, team_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    return []
                else:
                    raise
            team_info = team_page.find("div", {"id" : "info"})
            team_name_str = str(team_info.find("h1", {"itemprop" : "name"}).find_all("span")[1].find(text=True))
            numbers_team_map[team_name_str] = row_team_str
            if not numbers_map and not team:
                team = team_name_str

        if draft_info:
            for pot_link in reversed(draft_info.parent.find_all("a")):
                if pot_link.get("href").startswith("/teams"):
                    if not numbers_map and not team:
                        row_team_str = str(pot_link.get("href").split("/")[2].upper())
                        team_url = "https://www.hockey-reference.com/teams/" + row_team_str
                        request = urllib.request.Request(team_url, headers=request_headers)
                        try:
                            response, team_page = url_request(request)
                        except urllib.error.HTTPError as err:
                            if err.status == 404:
                                return []
                            else:
                                raise
                        team_info = team_page.find("div", {"id" : "info"})
                        team = str(team_info.find("h1", {"itemprop" : "name"}).find_all("span")[1].find(text=True))
        
    return team, number, numbers_map, {v: k for k, v in numbers_team_map.items()}, numbers_year_map

def get_player_hof(player_page):
    hof_info = player_page.find("ul", id="bling")
    if hof_info and hof_info.find("a", text="Hall of Fame"):
        return True
    else:
        return False

def get_nhl_player_link(player_data):
    if player_data["id"] in manual_id_maps:
        player_data["Birthday"] = dateutil.parser.parse(manual_id_maps[player_data["id"]]["birthday"]).date()
        return "/api/v1/people/" +  str(manual_id_maps[player_data["id"]]["id"]), manual_id_maps[player_data["id"]]["name"], manual_id_maps[player_data["id"]]["position"], manual_id_maps[player_data["id"]]["handiness"]
        
    for sub_year in player_data["numbers_year_map"]:
        year_str = str(sub_year)
        year_str += str(sub_year + 1)
        for team in player_data["numbers_year_map"][sub_year]:
            if team not in player_data["player_team_map"]:
                continue
            team_name = player_data["player_team_map"][team]
            if team_name == "Winnipeg Jets":
                if sub_year < 2011:
                    team_name = "Winnipeg Jets (1979)"
            elif team_name == "Ottawa Senators":
                if sub_year < 1992:
                    team_name = "Ottawa Senators (1917)"
            elif team_name == "Mighty Ducks of Anaheim":
                team_name = "Anaheim Ducks"
            elif team_name == "Chicago Black Hawks":
                team_name = "Chicago Blackhawks"
            elif team_name == "Quebec Athletic Club/Bulldogs":
                team_name = "Quebec Bulldogs"
            if team_name not in team_ids:
                continue

            team_id = team_ids[team_name]

            if sub_year == current_season:
                try:
                    da_dates = []
                    
                    scheudle_url = nhl_team_schedule_url_format.format(team_id, year_str)
                    request = urllib.request.Request(scheudle_url, headers=request_headers)
                    data = url_request_json(request)

                    for game in data["dates"]:
                        da_dates.append(game)
                
                    # for month_int in range(1, (datetime.datetime.now().month + 1)):
                    #     min_date = datetime.date(sub_year, month_int, 1)
                    #     max_date = datetime.date(sub_year, month_int, calendar.monthrange(sub_year, month_int)[1])

                    #     scheudle_url = nhl_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date)))
                    #     request = urllib.request.Request(scheudle_url, headers=request_headers)
                    #     data = url_request_json(request)

                    #     for game in data["dates"]:
                    #         da_dates.append(game)
                        
                    #     min_date = datetime.date(sub_year + 1, month_int, 1)
                    #     max_date = datetime.date(sub_year + 1, month_int, calendar.monthrange(sub_year + 1, month_int)[1])

                    #     scheudle_url = nhl_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date)))
                    #     request = urllib.request.Request(scheudle_url, headers=request_headers)
                    #     data = url_request_json(request)

                    #     for game in data["dates"]:
                    #         da_dates.append(game)

                    matching_players = []
                    parsed_people = set()
                    for game in da_dates:
                        game_type = int(str(game["games"][0]["gamePk"])[4:6])
                        if game_type != 2 and game_type != 3:
                            continue

                        if str(game["games"][0]["season"]) == year_str:
                            game_link = game["games"][0]["link"]
                            request = urllib.request.Request("https://statsapi.web.nhl.com" + game_link, headers=request_headers)
                            sub_data = url_request_json(request)

                            is_home = sub_data["gameData"]["teams"]["home"]["id"] == team_id
                            team_str = "home" if is_home else "away"

                            for person_str in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
                                person = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][person_str]
                                if person["person"]["id"] not in parsed_people:
                                    parsed_people.add(person["person"]["id"])
                                    if "birthDate" not in sub_data["gameData"]["players"][person_str]:
                                        continue
                                    if dateutil.parser.parse(sub_data["gameData"]["players"][person_str]["birthDate"]).date() == player_data["Birthday"]:
                                        matching_players.append(sub_data["gameData"]["players"][person_str])
                    
                    if len(matching_players) == 1:
                        logger.info("#" + str(threading.get_ident()) + "#   " + "Found NHL Player " + matching_players[0]["fullName"] + " (" + str(matching_players[0]["id"]) + ") by birthdate")
                        return matching_players[0]["link"], matching_players[0]["fullName"], matching_players[0]["primaryPosition"]["abbreviation"], matching_players[0]["shootsCatches"]
                except urllib.error.HTTPError:
                    continue
            else:
                request = urllib.request.Request(team_roster_url_format.format(team_id, year_str), headers=request_headers)
                try:
                    data = url_request_json(request)
                except urllib.error.HTTPError:
                    continue

                if "roster" not in data:
                    continue

                matching_players = []
                for index, person in enumerate(data["roster"]):
                    if "birthDate" not in person["person"]:
                        continue
                    if dateutil.parser.parse(person["person"]["birthDate"]).date() == player_data["Birthday"]:
                        matching_players.append(person)
                
                if len(matching_players) == 1:
                    logger.info("#" + str(threading.get_ident()) + "#   " + "Found NHL Player " + matching_players[0]["person"]["fullName"] + " (" + str(matching_players[0]["person"]["id"]) + ") by birthdate")
                    return matching_players[0]["person"]["link"], matching_players[0]["person"]["fullName"], matching_players[0]["person"]["primaryPosition"]["abbreviation"], matching_players[0]["person"]["shootsCatches"]
    
    for sub_year in player_data["numbers_year_map"]:
        year_str = str(sub_year)
        year_str += str(sub_year + 1)
        for team in player_data["numbers_year_map"][sub_year]:
            if team not in player_data["player_team_map"]:
                continue
            team_name = player_data["player_team_map"][team]
            if team_name == "Winnipeg Jets":
                if sub_year < 2011:
                    team_name = "Winnipeg Jets (1979)"
            elif team_name == "Ottawa Senators":
                if sub_year < 1992:
                    team_name = "Ottawa Senators (1917)"
            elif team_name == "Mighty Ducks of Anaheim":
                team_name = "Anaheim Ducks"
            elif team_name == "Chicago Black Hawks":
                team_name = "Chicago Blackhawks"
            elif team_name == "Quebec Athletic Club/Bulldogs":
                team_name = "Quebec Bulldogs"
            if team_name not in team_ids:
                continue

            team_id = team_ids[team_name]

            if sub_year == current_season:
                try:
                    da_dates = []
                    
                    scheudle_url = nhl_team_schedule_url_format.format(team_id, year_str)
                    request = urllib.request.Request(scheudle_url, headers=request_headers)
                    data = url_request_json(request)

                    for game in data["dates"]:
                        da_dates.append(game)

                    # for month_int in range(1, (datetime.datetime.now().month + 1)):
                    #     min_date = datetime.date(sub_year, month_int, 1)
                    #     max_date = datetime.date(sub_year, month_int, calendar.monthrange(sub_year, month_int)[1])

                    #     scheudle_url = nhl_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date)))
                    #     request = urllib.request.Request(scheudle_url, headers=request_headers)
                    #     data = url_request_json(request)

                    #     for game in data["dates"]:
                    #         da_dates.append(game)
                        
                    #     min_date = datetime.date(sub_year + 1, month_int, 1)
                    #     max_date = datetime.date(sub_year + 1, month_int, calendar.monthrange(sub_year + 1, month_int)[1])

                    #     scheudle_url = nhl_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date)))
                    #     request = urllib.request.Request(scheudle_url, headers=request_headers)
                    #     data = url_request_json(request)

                    #     for game in data["dates"]:
                    #         da_dates.append(game)

                    matching_players = []
                    parsed_people = set()
                    for game in da_dates:
                        game_type = int(str(game["games"][0]["gamePk"])[4:6])
                        if game_type != 2 and game_type != 3:
                            continue

                        if str(game["games"][0]["season"]) == year_str:
                            game_link = game["games"][0]["link"]
                            request = urllib.request.Request("https://statsapi.web.nhl.com" + game_link, headers=request_headers)
                            sub_data = url_request_json(request)

                            is_home = sub_data["gameData"]["teams"]["home"]["id"] == team_id
                            team_str = "home" if is_home else "away"

                            for person_str in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
                                person = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][person_str]
                                if person["person"]["id"] not in parsed_people:
                                    parsed_people.add(person["person"]["id"])
                                    if "birthDate" not in sub_data["gameData"]["players"][person_str]:
                                        continue
                                    if dateutil.parser.parse(sub_data["gameData"]["players"][person_str]["birthDate"]).date() == player_data["Birthday"]:
                                        person = sub_data["gameData"]["players"][person_str]
                                        is_position_match = person["primaryPosition"]["abbreviation"] == player_data["player_position"]
                                
                                        is_exact_match = False
                                        is_first_last_match = False
                                        is_last_match = False

                                        player_name = person["fullName"]
                                        if player_name == player_data["Player"]:
                                            is_exact_match = True
                                        else:
                                            is_exact_match = False
                                            parsed_name = create_human_name(player_name)
                                            real_human_name = create_human_name(player_data["Player"])

                                            if parsed_name.first == real_human_name.first and parsed_name.last == real_human_name.last:
                                                is_first_last_match = True
                                            if parsed_name.last == real_human_name.last:
                                                is_last_match = True
                                        
                                        matching_players.append({
                                            "is_exact_match" : is_exact_match,
                                            "is_first_last_match" : is_first_last_match,
                                            "is_last_match" : is_last_match,
                                            "is_position_match" : is_position_match,
                                            "person" : person
                                        })
                                    
                    if matching_players:
                        matching_players.sort(key=lambda player: (-player["is_exact_match"], -player["is_first_last_match"], -player["is_last_match"], -player["is_position_match"]))
                        player = matching_players[0]        
                        if player["is_exact_match"] or player["is_first_last_match"] or player["is_last_match"]:
                            if len(matching_players) > 1:
                                second_player = matching_players[1]
                                if second_player["is_exact_match"] == player["is_exact_match"] and second_player["is_first_last_match"] and second_player["is_last_match"] == player["is_first_last_match"] and second_player["is_position_match"] == player["is_position_match"]:
                                    continue

                            logger.info("#" + str(threading.get_ident()) + "#   " + "Found NHL Player " + player["person"]["fullName"] + " (" + str(player["person"]["id"]) + ") by name")
                            return player["person"]["link"], player["person"]["fullName"], player["person"]["primaryPosition"]["abbreviation"], player["person"]["shootsCatches"]
                except urllib.error.HTTPError:
                    continue
            else:
                request = urllib.request.Request(team_roster_url_format.format(team_id, year_str), headers=request_headers)
                try:
                    data = url_request_json(request)
                except urllib.error.HTTPError:
                    continue

                if "roster" not in data:
                    continue

                matching_players = []
                for index, person in enumerate(data["roster"]):
                    if "birthDate" not in person["person"]:
                        continue
                    if dateutil.parser.parse(person["person"]["birthDate"]).date() == player_data["Birthday"]:
                        is_position_match = person["position"]["code"] == player_data["player_position"]
                        
                        is_exact_match = False
                        is_first_last_match = False
                        is_last_match = False

                        player_name = person["person"]["fullName"]
                        if player_name == player_data["Player"]:
                            is_exact_match = True
                        else:
                            is_exact_match = False
                            parsed_name = create_human_name(player_name)
                            real_human_name = create_human_name(player_data["Player"])

                            if parsed_name.first == real_human_name.first and parsed_name.last == real_human_name.last:
                                is_first_last_match = True
                            if parsed_name.last == real_human_name.last:
                                is_last_match = True
                        
                        matching_players.append({
                            "is_exact_match" : is_exact_match,
                            "is_first_last_match" : is_first_last_match,
                            "is_last_match" : is_last_match,
                            "is_position_match" : is_position_match,
                            "index" : index
                        })
                        
                if matching_players:
                    matching_players.sort(key=lambda player: (-player["is_exact_match"], -player["is_first_last_match"], -player["is_last_match"], -player["is_position_match"]))
                    player = matching_players[0]        
                    if player["is_exact_match"] or player["is_first_last_match"] or player["is_last_match"]:
                        if len(matching_players) > 1:
                            second_player = matching_players[1]
                            if second_player["is_exact_match"] == player["is_exact_match"] and second_player["is_first_last_match"] and second_player["is_last_match"] == player["is_first_last_match"] and second_player["is_position_match"] == player["is_position_match"]:
                                continue

                        player = data["roster"][player["index"]]
                        logger.info("#" + str(threading.get_ident()) + "#   " + "Found NHL Player " + player["person"]["fullName"] + " (" + str(player["person"]["id"]) + ") by name")
                        return player["person"]["link"], player["person"]["fullName"], player["person"]["primaryPosition"]["abbreviation"], player["person"]["shootsCatches"]

def parse_row(row, time_frame, year, is_playoffs, player_type, header_values, table_index, table_name):
    season_year = None
    date = None
    if not (year or is_playoffs):
        row_year = int(str(row.find("th").find(text=True)).split("-")[0])
        season_year = row_year
        date = row_year
        if not time_frame["time_start"] and not time_frame["time_end"]:
            included_table = True
        else:
            included_table = row_year >= time_frame["time_start"] and row_year <= time_frame["time_end"]
    else:
        date_row = row.find("td", {"data-stat" : "date_game"})
        date = dateutil.parser.parse(str(date_row.find(text=True))).date()
        season_year = date.year - 1 if is_playoffs else year
        if is_playoffs:
            included_table = True
        else:
            if isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int):
                included_table = season_year >= time_frame["time_start"] and season_year <= time_frame["time_end"]
            else:
                included_table = date >= time_frame["time_start"] and date <= time_frame["time_end"]
    
    if included_table:
        columns = row.find_all("td", recursive=False)
        row_data = {}
        for index, column in enumerate(columns):
            real_index = index + 1
            header_value = header_values[real_index]

            if table_name.startswith("skaters_"):
                if table_name.startswith("skaters_play_by_play") or header_value != "GP":
                    header_value += "_5v5"

            if hasattr(column, "data-stat"):
                home = True
                if column["data-stat"] == "game_location":
                    home = True
                    text = column.find(text=True)
                    if text:
                        text = str(text).strip()
                    if not text or text == "@":
                        if text == "@":
                            home = False
                    row_data.update({"Location" : home})
                    continue
                elif column["data-stat"] == "opp_id":
                    opponent = str(column.find("a").find(text=True)).lower()
                    row_data.update({"Opponent" : opponent})
                    continue
                elif column["data-stat"] == "date_game":
                    result = column.find("a").get("href")
                    row_data.update({"GameLink" : result})
                    continue

            if header_value == "DEC":
                if (year or is_playoffs) and player_type["da_type"]["type"] != "Skater":
                    result = column.find(text=True)
                    if result:
                        result = str(result)
                        result = result.strip().split("(")[0].upper()
                        if result == "W":
                            row_data.update({"W" : 1})
                        elif result == "L":
                            row_data.update({"L" : 1})
                            row_data.update({"TtlL" : 1})
                        elif result == "T":
                            row_data.update({"T" : 1})
                        elif result == "O":
                           row_data.update({"OTL" : 1})
                           row_data.update({"TtlL" : 1})
                        else:
                            row_data.update({"ND" : 1})
                    else:
                        row_data.update({"ND" : 1})
                    continue
            elif header_value == "PP":
                if column["data-stat"] == "goals_pp":
                    header_value = "PPG"
                else:
                    header_value = "PPA"
            elif header_value == "SH":
                if column["data-stat"] == "goals_sh":
                    header_value = "SHG"
                else:
                    header_value = "SHA"
            elif header_value == "EV":
                if column["data-stat"] == "goals_ev":
                    header_value = "EVG"
                else:
                    header_value = "EVA"
            elif header_value == "GW":
                header_value = "GWG"
            elif header_value == "TOI":
                if not (year or is_playoffs):
                    continue
            elif header_value == "ATOI":
                header_value = "TOI"
            elif header_value == "MIN":
                if not (year or is_playoffs):
                    header_value = "TOI"
            elif header_value == "Lg":
                if str(column.find(text=True)) != "NHL":
                    return None
            elif header_value == "G":
                if (year or is_playoffs):
                    if column["data-stat"] == "game_season":
                        continue
            elif header_value == "+/-":
                header_value = "PlusMinus"
            elif header_value == "Team_5v5":
                header_value = "Tm"
            elif header_value == "Sh" or header_value == "Shots":
                if column["data-stat"] == "shots_against_ev":
                    header_value = "EVSH"
                elif column["data-stat"] == "shots_against_pp":
                    header_value = "PPSH"
                elif column["data-stat"] == "shots_against_sh":
                    header_value = "SHSH"
            elif header_value == "GA":
                if column["data-stat"] == "goals_against_ev":
                    header_value = "EVGA"
                elif column["data-stat"] == "goals_against_pp":
                    header_value = "PPGA"
                elif column["data-stat"] == "goals_against_sh":
                    header_value = "SHGA"
            elif header_value == "PTS":
                if player_type["da_type"]["type"] == "Skater":
                    header_value = "P"
            elif header_value == "PTS_5v5":
                if player_type["da_type"]["type"] == "Skater":
                    header_value = "P_5v5"
            
            if table_name == "skaters_advanced_ev":
                if header_value == "TOI_5v5":
                    header_value = "xEVTOI"
            elif table_name == "stats_goalie_situational":
                if header_value == "EVSH":
                    header_value = "xEVSH"
                elif header_value == "EVGA":
                    header_value = "xEVGA"
            
            if header_value in headers[player_type["da_type"]["type"]] and (not header_value in formulas[player_type["da_type"]["type"]] and not header_value in advanced_stats) and header_value != "GS" and header_value != "SO" and header_value != "QS" and header_value != "RBS":
                if header_value.startswith("TOI") and header_value != "TOI_5v5" and player_type["da_type"]["type"] == "Skater":
                    continue

                column_value = column.find(text=True)
                if column_value and column_value.strip():
                    column_value = str(column_value)
                    if header_value.startswith("TOI") or (table_name == "skaters_advanced_ev" and header_value == "xEVTOI"):
                        if column_value.isdigit():
                            column_value = int(column_value) * 60
                        elif "." in column_value:
                            column_value = float(column_value) * 60
                        else:
                            column_value = start_time_to_str(column_value)
                            if not (year or is_playoffs):
                                column_value *= row_data["GP"]
                    else:
                        if header_value != "Tm":
                            column_value = float(column_value)
                    row_data.update({header_value : column_value})

        row_data["Date"] = date
        row_data["Year"] = season_year
        row_data["Month"] = None if isinstance(date, int) else date.month
        row_data["Day"] = None if isinstance(date, int) else date.day
        row_data["YearDay"] = None if isinstance(date, int) else date.timetuple().tm_yday
        if not isinstance(date, int):
            next_date = date - dateutil.relativedelta.relativedelta(weeks=1)
            weekday_in_month = 1
            while next_date.month == date.month:
                weekday_in_month += 1
                next_date -= dateutil.relativedelta.relativedelta(weeks=1)
            row_data["WeekDayInMonth"] = weekday_in_month
        row_data["CalendarYear"] = None if isinstance(date, int) else date.year

        row_data["is_playoffs"] = is_playoffs

        if table_index == 0:
            if (year or is_playoffs):
                row_data.update({"GP" : 1})

        return row_data

    return None

def fix_playoffs_data(all_rows, time_frame):
    is_qual_match = False
    for qualifier in time_frame["qualifiers"]:
        if qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team Conference" and qualifier != "Team Division" and qualifier != "Rookie" and qualifier != "Max Stat" and qualifier != "Min Stat" and qualifier != "Max Streak" and qualifier != "Max Stretch" and qualifier != "Count Streak" and qualifier != "Quickest"  and qualifier != "Slowest" and qualifier != "Season Stat" and qualifier != "Season Age" and qualifier != "Season" and qualifier != "Season Reversed" and qualifier != "Previous Season Stat"  and qualifier != "Upcoming Season Stat" and qualifier != "Season Sub Query" and qualifier != "Season Before Sub Query" and qualifier != "Season After Sub Query" and qualifier != "Winning Team" and  qualifier != "Losing Team" and  qualifier != "Tied Team" and qualifier !=  "Winning Or Tied Team" and qualifier !=  "Losing Or Tied Team" and  qualifier != "Playoff Team" and qualifier != "Team Win Percentage" and qualifier != "Team Points Percentage" and qualifier != "Team Games Over 500" and qualifier != "Team Wins" and qualifier != "Team Losses" and qualifier != "Team Ties" and qualifier != "Team Points" and  qualifier != "Cup Winner Team" and qualifier != "Conference Winner Team" and  qualifier != "Team Goals Rank" and  qualifier != "Team Goals Allowed Rank" and qualifier != "Season Formula" and qualifier != "Season Number" and qualifier != "Even Year" and qualifier != "Odd Year" and qualifier != "Year":
            is_qual_match = True
        elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
            for qual_object in time_frame["qualifiers"][qualifier]:
                for stat_obj in qual_object["values"]:
                    if not stat_obj["time_frame"] or not (stat_obj["time_frame"]["qual_type"] == "Seasons" or stat_obj["time_frame"]["qual_type"] == "Teams"):
                        is_qual_match = True

    if time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)) and not is_qual_match:
        for row in all_rows:
            if not isinstance(row["Date"], int):
                row["SpecificDate"] = row["Date"]
                row["Date"] = row["Year"]

def handle_schedule_stats(player_data, all_rows, qualifiers, is_playoffs, missing_games):
    all_rows = sorted(all_rows, key=lambda row: row["Date"])
    team_schedule = get_nhl_schedule(player_data, all_rows, qualifiers)

    for row_data in all_rows:
        if row_data["NHLGameLink"] in manual_info:
            for da_year in team_schedule:
                if row_data["Year"] == da_year:
                    for season_obj in team_schedule[da_year]:
                        if row_data["Tm"] == season_obj["team"]:
                            manual_info_row = manual_info[row_data["NHLGameLink"]]
                            manual_row = {
                                "Year" : row_data["Year"],
                                "Tm" : row_data["Tm"],
                                "Opponent" : row_data["Opponent"],
                                "Date" : manual_info_row["Date"],
                                "StartTime" : manual_info_row["StartTime"],
                                "Time" : manual_info_row["Time"],
                                "Arena" : manual_info_row["Arena"],
                                "ArenaID" : manual_info_row["ArenaID"]
                            }
                            
                            if row_data["Location"]:
                                manual_row["Team Score"] = manual_info_row["Home Score"]
                                manual_row["Team Goals"] = manual_info_row["Home Goals"]
                                manual_row["Opponent Score"] = manual_info_row["Road Score"]
                                manual_row["Opponent Goals"] = manual_info_row["Road Goals"]
                                manual_row["Result"] = manual_info_row["Home Result"]
                                manual_row["TmGm"] = manual_info_row["Home TmGm"]
                            else:
                                manual_row["Team Score"] = manual_info_row["Road Score"]
                                manual_row["Team Goals"] = manual_info_row["Road Goals"]
                                manual_row["Opponent Score"] = manual_info_row["Home Score"]
                                manual_row["Opponent Goals"] = manual_info_row["Home Goals"]
                                manual_row["Result"] = manual_info_row["Road Result"]
                                manual_row["TmGm"] = manual_info_row["Road TmGm"]

                            if row_data["is_playoffs"]:
                                season_obj["playoffs"].append(manual_row)
                                season_obj["playoffs"] = sorted(season_obj["playoffs"], key=lambda row: row["TmGm"])
                            else:
                                season_obj["regular_season"].append(manual_row)
                                season_obj["regular_season"] = sorted(season_obj["regular_season"], key=lambda row: row["TmGm"])

    for da_year in team_schedule:
        all_rows_order = []
        for season_obj in team_schedule[da_year]:
            da_games = []
            da_games += season_obj["regular_season"]
            da_games += season_obj["playoffs"]
            for data in da_games:
                all_rows_order.append(data)
    
        all_rows_order = sorted(all_rows_order, key=lambda row: row["Date"])
        for index, row_data in enumerate(all_rows_order):
            if index == 0:
                row_data["Previous Team Result"] = None
            else:
                row_data["Previous Team Result"] = all_rows_order[index - 1]["Result"]
            
            if index == len(all_rows_order) - 1:
                row_data["Upcoming Team Result"] = None
            else:
                row_data["Upcoming Team Result"] = all_rows_order[index + 1]["Result"]

    player_data["team_games_map"] = {}
    for da_year in team_schedule:
        player_data["team_games_map"][da_year] = {}
        for season_obj in team_schedule[da_year]:
            team = season_obj["team"]

            if season_obj["regular_season"]:
                player_data["team_games_map"][da_year][team] = max(data["TmGm"] for data in season_obj["regular_season"])
            else:
                player_data["team_games_map"][da_year][team] = 1

            if is_playoffs:
                if is_playoffs == "Only":
                    max_team_games = max(data["TmGm"] for data in season_obj["regular_season"])
                else:
                    max_team_games = max(data["TmGm"] for data in season_obj["regular_season"] + season_obj["playoffs"])
            else:
                max_team_games = max(data["TmGm"] for data in season_obj["regular_season"])

            for row_data in all_rows:
                if row_data["Year"] == da_year and row_data["Tm"] == team:
                    for data in season_obj["regular_season"]:
                        if row_data["Date"] == data["Date"]:
                            row_data["Time"] = data["Time"]
                            row_data["StartTime"] = data["StartTime"]
                            row_data["Arena"] = data["Arena"]
                            row_data["ArenaID"] = data["ArenaID"]
                            row_data["Team Score"] = data["Team Score"]
                            row_data["Opponent Score"] = data["Opponent Score"]
                            row_data["Team Goals"] = data["Team Goals"]
                            row_data["Opponent Goals"] = data["Opponent Goals"]
                            row_data["CurrTmWins"] = data["CurrTmWins"]
                            row_data["CurrTmLosses"] = data["CurrTmLosses"]
                            row_data["CurrTmOTLosses"] = data["CurrTmOTLosses"]
                            row_data["CurrTmTies"] = data["CurrTmTies"]
                            row_data["CurrOppWins"] = data["CurrOppWins"]
                            row_data["CurrOppLosses"] = data["CurrOppLosses"]
                            row_data["CurrOppOTLosses"] = data["CurrOppOTLosses"]
                            row_data["CurrOppTies"] = data["CurrOppTies"]
                            row_data["Result"] = data["Result"]
                            row_data["TmGm"] = data["TmGm"]
                            row_data["Previous Team Result"] = data["Previous Team Result"]
                            row_data["Upcoming Team Result"] = data["Upcoming Team Result"]
                            row_data["TmGmRev"] = max_team_games - data["TmGm"] + 1

                            if "IsNational" in data:
                                row_data["IsNational"] = data["IsNational"]
                            if "IsUSNational" in data:
                                row_data["IsUSNational"] = data["IsUSNational"]
                            if "IsCANational" in data:
                                row_data["IsCANational"] = data["IsCANational"]
                            if "AnyIsNational" in data:
                                row_data["AnyIsNational"] = data["AnyIsNational"]
                            if "AnyIsUSNational" in data:
                                row_data["AnyIsUSNational"] = data["AnyIsUSNational"]
                            if "AnyIsCANational" in data:
                                row_data["AnyIsCANational"] = data["AnyIsCANational"]
                            if "TVNetworks" in data:
                                row_data["TVNetworks"] = data["TVNetworks"]
                            if "NationalTVNetworks" in data:
                                row_data["NationalTVNetworks"] = data["NationalTVNetworks"]
                            if "AnyNationalTVNetworks" in data:
                                row_data["AnyNationalTVNetworks"] = data["AnyNationalTVNetworks"]

                            if not isinstance(row_data["Date"], int):
                                games_rest = 0
                                starts_rest = 0
                                games_in_a_row = 1
                                starts_in_a_row = 1 if "GS" in row_data and row_data["GS"] else 0
                                count_games_rest = True
                                count_starts_rest = True
                                count_games_rest_2 = True
                                count_starts_rest_2 = True
                                not_first_game = False
                                for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["Date"], reverse=True):
                                    if sub_data["Date"] < row_data["Date"]:
                                        not_first_game = True
                                        if sub_data["Date"] in [row_subbest_data["Date"] for row_subbest_data in all_rows]:
                                            count_games_rest = False
                                        if count_games_rest:
                                            games_rest += 1
                                        if sub_data["Date"] in [row_subbest_data["Date"] for row_subbest_data in all_rows if "GS" in row_subbest_data and row_subbest_data["GS"]]:
                                            count_starts_rest = False
                                        if count_starts_rest:
                                            starts_rest += 1

                                        if sub_data["Date"] not in [row_subbest_data["Date"] for row_subbest_data in all_rows]:
                                            count_games_rest_2 = False
                                        if count_games_rest_2:
                                            games_in_a_row += 1
                                        if "GS" in row_data and row_data["GS"]:
                                            if sub_data["Date"] not in [row_subbest_data["Date"] for row_subbest_data in all_rows if "GS" in row_subbest_data and row_subbest_data["GS"]]:
                                                count_starts_rest_2 = False
                                            if count_starts_rest_2:
                                                starts_in_a_row += 1

                                        if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                            break
                                if not_first_game:
                                    row_data["GamesRest"] = games_rest
                                    row_data["StartsRest"] = starts_rest
                                else:
                                    row_data["GamesRest"] = float("inf")
                                    row_data["StartsRest"] = float("inf")
                                row_data["GamesInARow"] = games_in_a_row
                                row_data["StartsInARow"] = starts_in_a_row

            for index, data in enumerate(season_obj["playoffs"]):
                round_index = 0
                team_wins = 0
                series_game = 0
                opponent_wins = 0

                playoff_rounds = []
                for history in playoff_format_history:
                    league_start_year = history["start"]
                    league_end_year = history["end"]
                    if (not league_start_year or data["Year"] >= league_start_year) and (not league_end_year or data["Year"] <= league_end_year):
                        playoff_rounds = history["rounds"]
                
                round_name_index = ["cq", "cs", "cf", "sc"]
                if playoff_rounds:
                    for previous_game in reversed(season_obj["playoffs"][0:index]):
                        if previous_game["Opponent"] != data["Opponent"]:
                            break
                        
                        if previous_game["Result"]:
                            if previous_game["Result"].startswith("W"):
                                team_wins += 1
                            elif previous_game["Result"].startswith("L"):
                                opponent_wins += 1
                        
                    previous_loop_game = {}
                    for previous_game in season_obj["playoffs"][0:index + 1]:
                        if previous_loop_game and previous_loop_game["Opponent"] != previous_game["Opponent"]:
                            round_index += 1
                            series_game = 0

                        previous_loop_game = previous_game

                        if previous_game["Opponent"] == data["Opponent"]:
                            series_game += 1
                else:
                    missing_games.append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")
                    continue

                if playoff_rounds == "Special":
                    clinching_games_team = 0
                    clinching_games_opponent = 0
                    previous_loop_game = {}
                    for sub_data in season_obj["playoffs"]:
                        if previous_loop_game and previous_loop_game["Opponent"] != sub_data["Opponent"]:
                            break
                        if sub_data["Result"]:
                            if sub_data["Result"].startswith("W"):
                                clinching_games_team += 1
                            elif sub_data["Result"].startswith("L"):
                                clinching_games_opponent += 1
                        previous_loop_game = sub_data
                    clinching_games = max(clinching_games_team, clinching_games_opponent)

                    if data["Year"] >= 1925 and data["Year"] <= 1926:
                        if team in bye_mapping[data["Year"]]:
                            playoff_rounds = [-1, -1]
                            round_name_index = ["cf", "sc"]
                        else:
                            playoff_rounds = [-1, -1, -1]
                            round_name_index = ["cs", "cf", "sc"]
                    elif data["Year"] == 1927:
                        if team in bye_mapping[data["Year"]]:
                            playoff_rounds = [-1, 3]
                            round_name_index = ["cf", "sc"]
                        else:
                            playoff_rounds = [-1, -1, 3]
                            round_name_index = ["cs", "cf", "sc"]
                    elif data["Year"] >= 1928 and data["Year"] <= 1929:
                        if team in bye_mapping[data["Year"]]:
                            playoff_rounds = [3, 2]
                            round_name_index = ["cf", "sc"]
                        else:
                            playoff_rounds = [-1, 2, 2]
                            round_name_index = ["cs", "cf", "sc"]
                    elif data["Year"] >= 1930 and data["Year"] <= 1935:
                        if team in bye_mapping[data["Year"]]:
                            playoff_rounds = [3, 3]
                            round_name_index = ["cf", "sc"]
                        else:
                            playoff_rounds = [-1, -1, 3]
                            round_name_index = ["cs", "cf", "sc"]
                    elif data["Year"] <= 1937:
                        if clinching_games == 3:
                            playoff_rounds = [3, 3]
                            round_name_index = ["cf", "sc"]
                        else:
                            playoff_rounds = [2, 2, 3]
                            round_name_index = ["cs", "cf", "sc"]
                    elif data["Year"] <= 1973:
                        if clinching_games == 4:
                            playoff_rounds = [4, 4]
                            round_name_index = ["cf", "sc"]
                        else:
                            playoff_rounds = [2, 2, 4]
                            round_name_index = ["cs", "cf", "sc"]
                    elif data["Year"] <= 2018:
                        if clinching_games == 4:
                            playoff_rounds = [4, 4, 4]
                            round_name_index = ["cs", "cf", "sc"]
                        else:
                            playoff_rounds = [2, 4, 4, 4]
                    else:
                        if team in bye_mapping[data["Year"]]:
                            playoff_rounds = [-1, -1, -1, 4, 4, 4, 4]
                            round_name_index = ["rr", "rr", "rr", "cq", "cs", "cf", "sc"]
                        else:
                            playoff_rounds = [3, 4, 4, 4, 4]
                            round_name_index = ["pr", "cq", "cs", "cf", "sc"]

                for row_data in all_rows:
                    if not row_data["is_playoffs"]:
                        continue
                    
                    if row_data["Date"] == data["Date"]:
                        row_data["RoundGame"] = series_game
                        row_data["Round"] = round_name_index[round_index + (len(round_name_index) - len(playoff_rounds))]

                        if data["Year"] == 1926 and row_data["Round"] == "sc":
                            if series_game == 3 or series_game == 4:
                                if team == "OTS":
                                    row_data["Clinching"] = True
                                    row_data["Elimination"] = False
                                else:
                                    row_data["Clinching"] = False
                                    row_data["Elimination"] = True
                            else:
                                row_data["Clinching"] = False
                                row_data["Elimination"] = False
                        else:
                            round_length = playoff_rounds[round_index]
                            if round_length == -1:
                                row_data["Clinching"] = False
                                row_data["Elimination"] = False
                            else:
                                if opponent_wins == round_length - 1:  
                                    row_data["Elimination"] = True
                                else:
                                    row_data["Elimination"] = False
                                if team_wins == round_length - 1:
                                    row_data["Clinching"] = True
                                else:
                                    row_data["Clinching"] = False

                        row_data["SeriesTeamWins"] = team_wins
                        row_data["SeriesOpponentWins"] = opponent_wins
                        row_data["SeriesScore"] = team_wins - opponent_wins
                        row_data["Time"] = data["Time"]
                        row_data["StartTime"] = data["StartTime"]
                        row_data["Arena"] = data["Arena"]
                        row_data["ArenaID"] = data["ArenaID"]
                        row_data["Team Score"] = data["Team Score"]
                        row_data["Opponent Score"] = data["Opponent Score"]
                        row_data["Team Goals"] = data["Team Goals"]
                        row_data["Opponent Goals"] = data["Opponent Goals"]
                        row_data["CurrTmWins"] = data["CurrTmWins"]
                        row_data["CurrTmLosses"] = data["CurrTmLosses"]
                        row_data["CurrTmOTLosses"] = data["CurrTmOTLosses"]
                        row_data["CurrTmTies"] = data["CurrTmTies"]
                        row_data["CurrOppWins"] = data["CurrOppWins"]
                        row_data["CurrOppLosses"] = data["CurrOppLosses"]
                        row_data["CurrOppOTLosses"] = data["CurrOppOTLosses"]
                        row_data["CurrOppTies"] = data["CurrOppTies"]
                        row_data["Result"] = data["Result"]
                        row_data["TmGm"] = data["TmGm"]
                        row_data["Previous Team Result"] = data["Previous Team Result"]
                        row_data["Upcoming Team Result"] = data["Upcoming Team Result"]
                        row_data["TmGmRev"] = max_team_games - data["TmGm"] + 1

                        if "IsNational" in data:
                            row_data["IsNational"] = data["IsNational"]
                        if "IsUSNational" in data:
                            row_data["IsUSNational"] = data["IsUSNational"]
                        if "IsCANational" in data:
                            row_data["IsCANational"] = data["IsCANational"]
                        if "AnyIsNational" in data:
                            row_data["AnyIsNational"] = data["AnyIsNational"]
                        if "AnyIsUSNational" in data:
                            row_data["AnyIsUSNational"] = data["AnyIsUSNational"]
                        if "AnyIsCANational" in data:
                            row_data["AnyIsCANational"] = data["AnyIsCANational"]
                        if "TVNetworks" in data:
                            row_data["TVNetworks"] = data["TVNetworks"]
                        if "NationalTVNetworks" in data:
                            row_data["NationalTVNetworks"] = data["NationalTVNetworks"]
                        if "AnyNationalTVNetworks" in data:
                            row_data["AnyNationalTVNetworks"] = data["AnyNationalTVNetworks"]

                        if not isinstance(row_data["Date"], int):
                            games_rest = 0
                            starts_rest = 0
                            games_in_a_row = 1
                            starts_in_a_row = 1 if "GS" in row_data and row_data["GS"] else 0
                            count_games_rest = True
                            count_starts_rest = True
                            count_games_rest_2 = True
                            count_starts_rest_2 = True
                            not_first_game = False
                            for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["Date"], reverse=True):
                                if sub_data["Date"] < row_data["Date"]:
                                    not_first_game = True
                                    if sub_data["Date"] in [row_subbest_data["Date"] for row_subbest_data in all_rows]:
                                        count_games_rest = False
                                    if count_games_rest:
                                        games_rest += 1
                                    if sub_data["Date"] in [row_subbest_data["Date"] for row_subbest_data in all_rows if "GS" in row_subbest_data and row_subbest_data["GS"]]:
                                        count_starts_rest = False
                                    if count_starts_rest:
                                        starts_rest += 1

                                    if sub_data["Date"] not in [row_subbest_data["Date"] for row_subbest_data in all_rows]:
                                        count_games_rest_2 = False
                                    if count_games_rest_2:
                                        games_in_a_row += 1
                                    if "GS" in row_data and row_data["GS"]:
                                        if sub_data["Date"] not in [row_subbest_data["Date"] for row_subbest_data in all_rows if "GS" in row_subbest_data and row_subbest_data["GS"]]:
                                            count_starts_rest_2 = False
                                        if count_starts_rest_2:
                                            starts_in_a_row += 1

                                    if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                        break
                            if not_first_game:
                                row_data["GamesRest"] = games_rest
                                row_data["StartsRest"] = starts_rest
                            else:
                                row_data["GamesRest"] = float("inf")
                                row_data["StartsRest"] = float("inf")
                            row_data["GamesInARow"] = games_in_a_row
                            row_data["StartsInARow"] = starts_in_a_row

                        break
    
    for row_data in all_rows:
        if not isinstance(row_data["Date"], int):
            days_in_a_row = 1
            date_to_check = row_data["Date"] - datetime.timedelta(days=1)
            for sub_data in sorted(all_rows, key=lambda seas_row: seas_row["Date"], reverse=True):
                if sub_data["Date"] == date_to_check:
                    days_in_a_row += 1
                    date_to_check -= datetime.timedelta(days=1)
            row_data["DaysInARow"] = days_in_a_row

    for row_data in all_rows:
        if "TmGm" not in row_data or row_data["TmGm"] == None:
            missing_games.append("[" + str(row_data["Date"]) + "](" + "https://www.nhl.com/gamecenter/" + str(row_data["NHLGameLink"]) + ")")

    new_rows = []
    for row in all_rows:
        if perform_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows, missing_games

def perform_schedule_qualifiers(row, qualifiers):
    if "TmGm" not in row or row["TmGm"] == None:
        return False

    if "Time" in qualifiers:
        if row["Time"] == None:
            return
        for qual_object in qualifiers["Time"]:
            if qual_object["negate"]:
                if row["Time"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Time"].lower() in qual_object["values"]:
                    return False
    
    if "Arena" in qualifiers:
        if row["Arena"] == None:
            return
        for qual_object in qualifiers["Arena"]:
            has_match = False
            for arena in qual_object["values"]:
                if arena.isdigit():
                    if row["ArenaID"] == None:
                        return False
                    if int(arena) == row["ArenaID"]:
                        has_match = True
                        break
                else:
                    if arena in row["Arena"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Exact Arena" in qualifiers:
        if row["Arena"] == None:
            return
        for qual_object in qualifiers["Exact Arena"]:
            has_match = False
            for arena in qual_object["values"]:
                if arena.isdigit():
                    if row["ArenaID"] == None:
                        return False
                    if int(arena) == row["ArenaID"]:
                        has_match = True
                        break
                else:
                    if arena == row["Arena"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
                    
    if "Series Game" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Series Game"]:
            if qual_object["negate"]:
                if row["RoundGame"] >= qual_object["values"]["start_val"] and row["RoundGame"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["RoundGame"] >= qual_object["values"]["start_val"] and row["RoundGame"] <= qual_object["values"]["end_val"]):
                    return False

    if "Round" in qualifiers:
        if not row["is_playoffs"]:
            return False
        for qual_object in qualifiers["Round"]:
            if qual_object["negate"]:
                if row["Round"] in qual_object["values"] or ((row["Round"] == "pr" or row["Round"] == "rr") and "qr" in qual_object["values"]):
                    return False
            else:
                if not (row["Round"] in qual_object["values"] or ((row["Round"] == "pr" or row["Round"] == "rr") and "qr" in qual_object["values"])):
                    return False

    if "Series Team Wins" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Series Team Wins"]:
            if qual_object["negate"]:
                if row["SeriesTeamWins"] >= qual_object["values"]["start_val"] and row["SeriesTeamWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["SeriesTeamWins"] >= qual_object["values"]["start_val"] and row["SeriesTeamWins"] <= qual_object["values"]["end_val"]):
                    return False

    if "Series Opponent Wins" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Series Opponent Wins"]:
            if qual_object["negate"]:
                if row["SeriesOpponentWins"] >= qual_object["values"]["start_val"] and row["SeriesOpponentWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["SeriesOpponentWins"] >= qual_object["values"]["start_val"] and row["SeriesOpponentWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Series Score Margin" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Series Score Margin"]:
            if qual_object["negate"]:
                if row["SeriesScore"] >= qual_object["values"]["start_val"] and row["SeriesScore"]<= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["SeriesScore"] >= qual_object["values"]["start_val"] and row["SeriesScore"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Series Score Difference" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Series Score Difference"]:
            if qual_object["negate"]:
                if abs(row["SeriesScore"]) >= qual_object["values"]["start_val"] and abs(row["SeriesScore"]) <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (abs(row["SeriesScore"]) >= qual_object["values"]["start_val"] and abs(row["SeriesScore"]) <= qual_object["values"]["end_val"]):
                    return False

    if "Elimination" in qualifiers:
        if not row["is_playoffs"] or "Elimination" not in row:
            return False

        for qual_object in qualifiers["Elimination"]:
            if qual_object["negate"]:
                if row["Elimination"]:
                    return False
            else:
                if not row["Elimination"]:
                    return False

    if "Clinching" in qualifiers:
        if not row["is_playoffs"] or "Clinching" not in row:
            return False
            
        for qual_object in qualifiers["Clinching"]:
            if qual_object["negate"]:
                if row["Clinching"]:
                    return False
            else:
                if not row["Clinching"]:
                    return False
    
    if "Elimination Or Clinching" in qualifiers:
        if not row["is_playoffs"]:
            return False
            
        for qual_object in qualifiers["Elimination Or Clinching"]:
            if qual_object["negate"]:
                if row["Clinching"] or row["Elimination"]:
                    return False
            else:
                if not (row["Clinching"] or row["Elimination"]):
                    return False
    
    if "Winner Take All" in qualifiers:
        if not row["is_playoffs"]:
            return False
            
        for qual_object in qualifiers["Winner Take All"]:
            if qual_object["negate"]:
                if row["Elimination"] and row["Clinching"]:
                    return False
            else:
                if not (row["Elimination"] and row["Clinching"]):
                    return False
    
    if "Ahead In Series" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Ahead In Series"]:
            if qual_object["negate"]:
                if row["SeriesScore"] > 0:
                    return False
            else:
                if not row["SeriesScore"] > 0:
                    return False
    
    if "Behind In Series" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Behind In Series"]:
            if qual_object["negate"]:
                if row["SeriesScore"] < 0:
                    return False
            else:
                if not row["SeriesScore"] < 0:
                    return False
    
    if "Even In Series" in qualifiers:
        if not row["is_playoffs"]:
            return False

        for qual_object in qualifiers["Even In Series"]:
            if qual_object["negate"]:
                if row["SeriesScore"] == 0:
                    return False
            else:
                if not row["SeriesScore"] == 0:
                    return False
    
    if "Final Team Score" in qualifiers:
        if row["Team Score"] == None:
            return False
        for qual_object in qualifiers["Final Team Score"]:
            if qual_object["negate"]:
                if row["Team Score"] >= qual_object["values"]["start_val"] and row["Team Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Team Score"] >= qual_object["values"]["start_val"] and row["Team Score"] <= qual_object["values"]["end_val"]):
                    return False

    if "Final Opponent Score" in qualifiers:
        if row["Opponent Score"] == None:
            return False
        for qual_object in qualifiers["Final Opponent Score"]:
            if qual_object["negate"]:
                if row["Opponent Score"] >= qual_object["values"]["start_val"] and row["Opponent Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Opponent Score"] >= qual_object["values"]["start_val"] and row["Opponent Score"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Final Score Margin" in qualifiers:
        if row["Team Score"] == None or row["Opponent Score"] == None:
            return False
        score_margin = row["Team Score"] - row["Opponent Score"]

        for qual_object in qualifiers["Final Score Margin"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Final Score Difference" in qualifiers:
        if row["Team Score"] == None or row["Opponent Score"] == None:
            return False
        score_margin = abs(row["Team Score"] - row["Opponent Score"])

        for qual_object in qualifiers["Final Score Difference"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Game" in qualifiers:
        if row["TmGm"] == None:
            return False

        for qual_object in qualifiers["Team Game"]:
            if qual_object["negate"]:
                if row["TmGm"] >= qual_object["values"]["start_val"] and row["TmGm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmGm"] >= qual_object["values"]["start_val"] and row["TmGm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Game Reversed" in qualifiers:
        if row["TmGmRev"] == None:
            return False

        for qual_object in qualifiers["Team Game Reversed"]:
            if qual_object["negate"]:
                if row["TmGmRev"] >= qual_object["values"]["start_val"] and row["TmGmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmGmRev"] >= qual_object["values"]["start_val"] and row["TmGmRev"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Result" in qualifiers:
        if not row["Result"]:
            return False
        for qual_object in qualifiers["Result"]:
            if qual_object["negate"]:
                if row["Result"].startswith("L") and (row["Result"].endswith("OT") or row["Result"].endswith("SO")):
                    if row["Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Result"].endswith("OT") and "OT" in qual_object["values"]) or (row["Result"].endswith("SO") and "SO" in qual_object["values"]):
                        return False
                elif row["Result"].startswith("W") and (row["Result"].endswith("OT") or row["Result"].endswith("SO")):
                    if row["Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Result"].endswith("OT") and "OT" in qual_object["values"]) or (row["Result"].endswith("SO") and "SO" in qual_object["values"]):
                        return False
                else:
                    if row["Result"] in qual_object["values"]:
                        return False
            else:
                if row["Result"].startswith("L") and (row["Result"].endswith("OT") or row["Result"].endswith("SO")):
                    if not (row["Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Result"].endswith("OT") and "OT" in qual_object["values"]) or (row["Result"].endswith("SO") and "SO" in qual_object["values"])):
                        return False
                elif row["Result"].startswith("W") and (row["Result"].endswith("OT") or row["Result"].endswith("SO")):
                    if not (row["Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Result"].endswith("OT") and "OT" in qual_object["values"]) or (row["Result"].endswith("SO") and "SO" in qual_object["values"])):
                        return False
                else:
                    if not row["Result"] in qual_object["values"]:
                        return False

    if "Previous Result" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Result"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Result"].startswith("L") and (row["Previous Row"]["Result"].endswith("OT") or row["Previous Row"]["Result"].endswith("SO")):
                    if row["Previous Row"]["Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Previous Row"]["Result"].endswith("OT") and "L-OT" in qual_object["values"]):
                        return False
                elif row["Previous Row"]["Result"].startswith("W") and (row["Previous Row"]["Result"].endswith("OT") or row["Previous Row"]["Result"].endswith("SO")):
                    if row["Previous Row"]["Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Previous Row"]["Result"].endswith("OT") and "W-OT" in qual_object["values"]):
                        return False
                else:
                    if row["Previous Row"]["Result"] in qual_object["values"]:
                        return False
            else:
                if row["Previous Row"]["Result"].startswith("L") and (row["Previous Row"]["Result"].endswith("OT") or row["Previous Row"]["Result"].endswith("SO")):
                    if not (row["Previous Row"]["Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Previous Row"]["Result"].endswith("OT") and "L-OT" in qual_object["values"])):
                        return False
                elif row["Previous Row"]["Result"].startswith("W") and (row["Previous Row"]["Result"].endswith("OT") or row["Previous Row"]["Result"].endswith("SO")):
                    if not (row["Previous Row"]["Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Previous Row"]["Result"].endswith("OT") and "W-OT" in qual_object["values"])):
                        return False
                else:
                    if not row["Previous Row"]["Result"] in qual_object["values"]:
                        return False

    if "Upcoming Result" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Result"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Result"].startswith("L") and (row["Upcoming Row"]["Result"].endswith("OT") or row["Upcoming Row"]["Result"].endswith("SO")):
                    if row["Upcoming Row"]["Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Upcoming Row"]["Result"].endswith("OT") and "L-OT" in qual_object["values"]):
                        return False
                elif row["Upcoming Row"]["Result"].startswith("W") and (row["Upcoming Row"]["Result"].endswith("OT") or row["Upcoming Row"]["Result"].endswith("SO")):
                    if row["Upcoming Row"]["Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Upcoming Row"]["Result"].endswith("OT") and "W-OT" in qual_object["values"]):
                        return False
                else:
                    if row["Upcoming Row"]["Result"] in qual_object["values"]:
                        return False
            else:
                if row["Upcoming Row"]["Result"].startswith("L") and (row["Upcoming Row"]["Result"].endswith("OT") or row["Upcoming Row"]["Result"].endswith("SO")):
                    if not (row["Upcoming Row"]["Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Upcoming Row"]["Result"].endswith("OT") and "L-OT" in qual_object["values"])):
                        return False
                elif row["Upcoming Row"]["Result"].startswith("W") and (row["Upcoming Row"]["Result"].endswith("OT") or row["Upcoming Row"]["Result"].endswith("SO")):
                    if not (row["Upcoming Row"]["Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Upcoming Row"]["Result"].endswith("OT") and "W-OT" in qual_object["values"])):
                        return False
                else:
                    if not row["Upcoming Row"]["Result"] in qual_object["values"]:
                        return False

    if "Games Rest" in qualifiers:
        for qual_object in qualifiers["Games Rest"]:
            if qual_object["negate"]:
                if row["GamesRest"] >= qual_object["values"]["start_val"] and row["GamesRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GamesRest"] >= qual_object["values"]["start_val"] and row["GamesRest"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts Rest" in qualifiers:
        for qual_object in qualifiers["Starts Rest"]:
            if qual_object["negate"]:
                if row["StartsRest"] >= qual_object["values"]["start_val"] and row["StartsRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["StartsRest"] >= qual_object["values"]["start_val"] and row["StartsRest"] <= qual_object["values"]["end_val"]):
                    return False

    if "Days In A Row" in qualifiers:
        for qual_object in qualifiers["Days In A Row"]:
            if qual_object["negate"]:
                if row["DaysInARow"] >= qual_object["values"]["start_val"] and row["DaysInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["DaysInARow"] >= qual_object["values"]["start_val"] and row["DaysInARow"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Games In A Row" in qualifiers:
        for qual_object in qualifiers["Games In A Row"]:
            if qual_object["negate"]:
                if row["GamesInARow"] >= qual_object["values"]["start_val"] and row["GamesInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GamesInARow"] >= qual_object["values"]["start_val"] and row["GamesInARow"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts In A Row" in qualifiers:
        for qual_object in qualifiers["Starts In A Row"]:
            if qual_object["negate"]:
                if row["StartsInARow"] >= qual_object["values"]["start_val"] and row["StartsInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["StartsInARow"] >= qual_object["values"]["start_val"] and row["StartsInARow"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Previous Team Result" in qualifiers:
        if not row["Previous Team Result"]:
            return False
        for qual_object in qualifiers["Previous Team Result"]:
            if qual_object["negate"]:
                if row["Previous Team Result"].startswith("L") and (row["Previous Team Result"].endswith("OT") or row["Previous Team Result"].endswith("SO")):
                    if row["Previous Team Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Previous Team Result"].endswith("OT") and "L-OT" in qual_object["values"]):
                        return False
                elif row["Previous Team Result"].startswith("W") and (row["Previous Team Result"].endswith("OT") or row["Previous Team Result"].endswith("SO")):
                    if row["Previous Team Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Previous Team Result"].endswith("OT") and "W-OT" in qual_object["values"]):
                        return False
                else:
                    if row["Previous Team Result"] in qual_object["values"]:
                        return False
            else:
                if row["Previous Team Result"].startswith("L") and (row["Previous Team Result"].endswith("OT") or row["Previous Team Result"].endswith("SO")):
                    if not (row["Previous Team Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Previous Team Result"].endswith("OT") and "L-OT" in qual_object["values"])):
                        return False
                elif row["Previous Team Result"].startswith("W") and (row["Previous Team Result"].endswith("OT") or row["Previous Team Result"].endswith("SO")):
                    if not (row["Previous Team Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Previous Team Result"].endswith("OT") and "W-OT" in qual_object["values"])):
                        return False
                else:
                    if not row["Previous Team Result"] in qual_object["values"]:
                        return False

    if "Upcoming Team Result" in qualifiers:
        if not row["Upcoming Team Result"]:
            return False
        for qual_object in qualifiers["Upcoming Team Result"]:
            if qual_object["negate"]:
                if row["Upcoming Team Result"].startswith("L") and (row["Upcoming Team Result"].endswith("OT") or row["Upcoming Team Result"].endswith("SO")):
                    if row["Upcoming Team Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Upcoming Team Result"].endswith("OT") and "L-OT" in qual_object["values"]):
                        return False
                elif row["Upcoming Team Result"].startswith("W") and (row["Upcoming Team Result"].endswith("OT") or row["Upcoming Team Result"].endswith("SO")):
                    if row["Upcoming Team Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Upcoming Team Result"].endswith("OT") and "W-OT" in qual_object["values"]):
                        return False
                else:
                    if row["Upcoming Team Result"] in qual_object["values"]:
                        return False
            else:
                if row["Upcoming Team Result"].startswith("L") and (row["Upcoming Team Result"].endswith("OT") or row["Upcoming Team Result"].endswith("SO")):
                    if not (row["Upcoming Team Result"] in qual_object["values"] or "L" in qual_object["values"] or (row["Upcoming Team Result"].endswith("OT") and "L-OT" in qual_object["values"])):
                        return False
                elif row["Upcoming Team Result"].startswith("W") and (row["Upcoming Team Result"].endswith("OT") or row["Upcoming Team Result"].endswith("SO")):
                    if not (row["Upcoming Team Result"] in qual_object["values"] or "W" in qual_object["values"] or (row["Upcoming Team Result"].endswith("OT") and "W-OT" in qual_object["values"])):
                        return False
                else:
                    if not row["Upcoming Team Result"] in qual_object["values"]:
                        return False
    
    if "National Game" in qualifiers:
        if "IsNational" not in row:
            return False

        for qual_object in qualifiers["National Game"]:
            if qual_object["negate"]:
                if row["IsNational"]:
                    return False
            else:
                if not row["IsNational"]:
                    return False
    
    if "Any National Game" in qualifiers:
        if "AnyIsNational" not in row:
            return False

        for qual_object in qualifiers["Any National Game"]:
            if qual_object["negate"]:
                if row["AnyIsNational"]:
                    return False
            else:
                if not row["AnyIsNational"]:
                    return False
    
    if "US National Game" in qualifiers:
        if "IsUSNational" not in row:
            return False

        for qual_object in qualifiers["US National Game"]:
            if qual_object["negate"]:
                if row["IsUSNational"]:
                    return False
            else:
                if not row["IsUSNational"]:
                    return False
    
    if "Any US National Game" in qualifiers:
        if "AnyIsUSNational" not in row:
            return False

        for qual_object in qualifiers["Any US National Game"]:
            if qual_object["negate"]:
                if row["AnyIsUSNational"]:
                    return False
            else:
                if not row["AnyIsUSNational"]:
                    return False
    
    if "CA National Game" in qualifiers:
        if "IsCANational" not in row:
            return False

        for qual_object in qualifiers["CA National Game"]:
            if qual_object["negate"]:
                if row["IsCANational"]:
                    return False
            else:
                if not row["IsCANational"]:
                    return False
    
    if "Any CA National Game" in qualifiers:
        if "AnyIsCANational" not in row:
            return False

        for qual_object in qualifiers["Any CA National Game"]:
            if qual_object["negate"]:
                if row["AnyIsCANational"]:
                    return False
            else:
                if not row["AnyIsCANational"]:
                    return False
    
    if "TV Network" in qualifiers:
        if "TVNetworks" not in row or not row["TVNetworks"]:
            return False

        tv_networks = row["TVNetworks"]

        for qual_object in qualifiers["TV Network"]:
            if qual_object["negate"]:
                if set(tv_networks).intersection(set(qual_object["values"])):
                    return False
            else:
                if not set(tv_networks).intersection(set(qual_object["values"])):
                    return False
    
    if "Raw TV Network" in qualifiers:
        if "TVNetworks" not in row or not row["TVNetworks"]:
            return False

        tv_networks = row["TVNetworks"]

        for qual_object in qualifiers["Raw TV Network"]:
            has_match = False
            for network_val in qual_object["values"]:
                for network in tv_networks:
                    if network.startswith(network_val):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "National TV Network" in qualifiers:
        if "NationalTVNetworks" not in row or not row["NationalTVNetworks"]:
            return False

        tv_networks = row["NationalTVNetworks"]

        for qual_object in qualifiers["National TV Network"]:
            if qual_object["negate"]:
                if set(tv_networks).intersection(set(qual_object["values"])):
                    return False
            else:
                if not set(tv_networks).intersection(set(qual_object["values"])):
                    return False
    
    if "National Raw TV Network" in qualifiers:
        if "NationalTVNetworks" not in row or not row["NationalTVNetworks"]:
            return False

        tv_networks = row["NationalTVNetworks"]

        for qual_object in qualifiers["National Raw TV Network"]:
            has_match = False
            for network_val in qual_object["values"]:
                for network in tv_networks:
                    if network.startswith(network_val):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Any National TV Network" in qualifiers:
        if "AnyNationalTVNetworks" not in row or not row["AnyNationalTVNetworks"]:
            return False

        tv_networks = row["AnyNationalTVNetworks"]

        for qual_object in qualifiers["Any National TV Network"]:
            if qual_object["negate"]:
                if set(tv_networks).intersection(set(qual_object["values"])):
                    return False
            else:
                if not set(tv_networks).intersection(set(qual_object["values"])):
                    return False
    
    if "Any National Raw TV Network" in qualifiers:
        if "AnyNationalTVNetworks" not in row or not row["AnyNationalTVNetworks"]:
            return False

        tv_networks = row["AnyNationalTVNetworks"]

        for qual_object in qualifiers["Any National Raw TV Network"]:
            has_match = False
            for network_val in qual_object["values"]:
                for network in tv_networks:
                    if network.startswith(network_val):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Start Time" in qualifiers:
        if "StartTime" not in row or row["StartTime"] == None:
            return False
        event_time = row["StartTime"].time().replace(microsecond=0)

        for qual_object in qualifiers["Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            event_time = row["StartTime"].astimezone(pytz.timezone(qual_object["values"]["time_zone"])).time().replace(microsecond=0)
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False

    if "Current Winning Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] > (row["CurrOppLosses"] + row["CurrOppOTLosses"])
        for qual_object in qualifiers["Current Winning Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] < (row["CurrOppLosses"] + row["CurrOppOTLosses"])
        for qual_object in qualifiers["Current Losing Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] == (row["CurrOppLosses"] + row["CurrOppOTLosses"])
        for qual_object in qualifiers["Current Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Or Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] >= (row["CurrOppLosses"] + row["CurrOppOTLosses"])
        for qual_object in qualifiers["Current Winning Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Or Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] <= (row["CurrOppLosses"] + row["CurrOppOTLosses"])
        for qual_object in qualifiers["Current Losing Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrTmWins"] > (row["CurrTmLosses"] + row["CurrTmOTLosses"])
        for qual_object in qualifiers["Current Winning Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False
            
        opponent_match = row["CurrTmWins"] < (row["CurrTmLosses"] + row["CurrTmOTLosses"])
        for qual_object in qualifiers["Current Losing Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Tied Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrTmWins"] == (row["CurrTmLosses"] + row["CurrTmOTLosses"])
        for qual_object in qualifiers["Current Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Or Tied Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrTmWins"] >= (row["CurrTmLosses"] + row["CurrTmOTLosses"])
        for qual_object in qualifiers["Current Winning Or Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Or Tied Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False
            
        opponent_match = row["CurrTmWins"] <= (row["CurrTmLosses"] + row["CurrTmOTLosses"])
        for qual_object in qualifiers["Current Losing Or Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Team Win Percentage" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Win Percentage"]:
            try:
                win_percentage = row["CurrTmWins"] / (row["CurrTmWins"] + (row["CurrTmLosses"] + row["CurrTmOTLosses"]))
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Current Team Points Percentage" in qualifiers:
        if "CurrTmWins" not in row or row["CurrTmWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Points Percentage"]:
            points = (row["CurrTmWins"] * 2) + (row["CurrTmTies"] * 1) + (row["CurrTmOTLosses"] * 1)
            try:
                points_percentage = points / ((row["CurrTmWins"] + row["CurrTmLosses"] + row["CurrTmTies"] + row["CurrTmOTLosses"]) * 2)
            except ZeroDivisionError:
                points_percentage = 0
            if qual_object["negate"]:
                if points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Games Over 500" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Games Over 500"]:
            games_over_500 = row["CurrTmWins"] - (row["CurrTmLosses"] + row["CurrTmOTLosses"])
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False

    if "Current Team Wins" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Wins"]:
            if qual_object["negate"]:
                if row["CurrTmWins"] >= qual_object["values"]["start_val"] and row["CurrTmWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrTmWins"] >= qual_object["values"]["start_val"] and row["CurrTmWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Losses" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Losses"]:
            if qual_object["negate"]:
                if (row["CurrTmLosses"] + row["CurrTmOTLosses"]) >= qual_object["values"]["start_val"] and (row["CurrTmLosses"] + row["CurrTmOTLosses"]) <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not ((row["CurrTmLosses"] + row["CurrTmOTLosses"]) >= qual_object["values"]["start_val"] and (row["CurrTmLosses"] + row["CurrTmOTLosses"]) <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Ties" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Ties"]:
            if qual_object["negate"]:
                if row["CurrTmTies"] >= qual_object["values"]["start_val"] and row["CurrTmTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrTmTies"] >= qual_object["values"]["start_val"] and row["CurrTmTies"] <= qual_object["values"]["end_val"]):
                    return False

    if "Current Team Points" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Curre t Team Points"]:
            points = (row["CurrTmWins"] * 2) + (row["CurrTmTies"] * 1) + (row["CurrTmOTLosses"] * 1)
            if qual_object["negate"]:
                if points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Win Percentage" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Win Percentage"]:
            try:
                win_percentage = row["CurrOppWins"] / (row["CurrOppWins"] + (row["CurrOppLosses"] + row["CurrOppOTLosses"]))
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Points Percentage" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Points Percentage"]:
            points = (row["CurrOppWins"] * 2) + (row["CurrOppTies"] * 1) + (row["CurrOppOTLosses"] * 1)
            try:
                points_percentage = points / ((row["CurrOppWins"] + row["CurrOppLosses"] + row["CurrOppTies"] + row["CurrOppOTLosses"]) * 2)
            except ZeroDivisionError:
                points_percentage = 0
            if qual_object["negate"]:
                if points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points_percentage >= qual_object["values"]["start_val"] and points_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Current Opponent Games Over 500" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Games Over 500"]:
            games_over_500 = row["CurrOppWins"] - (row["CurrOppLosses"] + row["CurrOppOTLosses"])
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Wins" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Wins"]:
            if qual_object["negate"]:
                if row["CurrOppWins"] >= qual_object["values"]["start_val"] and row["CurrOppWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrOppWins"] >= qual_object["values"]["start_val"] and row["CurrOppWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Losses" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Losses"]:
            if qual_object["negate"]:
                if (row["CurrOppLosses"] + row["CurrOppOTLosses"]) >= qual_object["values"]["start_val"] and (row["CurrOppLosses"] + row["CurrOppOTLosses"]) <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not ((row["CurrOppLosses"] + row["CurrOppOTLosses"]) >= qual_object["values"]["start_val"] and (row["CurrOppLosses"] + row["CurrOppOTLosses"]) <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Ties" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False
            
        for qual_object in qualifiers["Current Opponent Ties"]:
            if qual_object["negate"]:
                if row["CurrOppTies"] >= qual_object["values"]["start_val"] and row["CurrOppTies"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrOppTies"] >= qual_object["values"]["start_val"] and row["CurrOppTies"] <= qual_object["values"]["end_val"]):
                    return False

    if "Current Opponent Points" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Points"]:
            points = (row["CurrOppWins"] * 2) + (row["CurrOppTies"] * 1) + (row["CurrOppOTLosses"] * 1)
            if qual_object["negate"]:
                if points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (points >= qual_object["values"]["start_val"] and points <= qual_object["values"]["end_val"]):
                    return False

    return True

def perform_team_opponent_schedule_qualifiers(row, qualifiers):                    
    if "Interconference" in qualifiers:
        if not row["Conference"] or not row["Conference"]:
            return False

        for qual_object in qualifiers["Interconference"]:
            if qual_object["negate"]:
                if row["Conference"] != row["OppConference"]:
                    return False
            else:
                if not row["Conference"] != row["OppConference"]:
                    return False
    
    if "Intraconference" in qualifiers:
        if not row["Conference"] or not row["Conference"]:
            return False

        for qual_object in qualifiers["Intraconference"]:
            if qual_object["negate"]:
                if row["Conference"] == row["OppConference"]:
                    return False
            else:
                if not row["Conference"] == row["OppConference"]:
                    return False

    if "Interdivision" in qualifiers:
        if not row["TmDivision"] or not row["OppDivision"]:
            return False

        for qual_object in qualifiers["Interdivision"]:
            if qual_object["negate"]:
                if row["TmDivision"] != row["OppDivision"]:
                    return False
            else:
                if not row["TmDivision"] != row["OppDivision"]:
                    return False
    
    if "Intradivision" in qualifiers:
        if not row["TmDivision"] or not row["OppDivision"]:
            return False

        for qual_object in qualifiers["Intradivision"]:
            if qual_object["negate"]:
                if row["TmDivision"] == row["OppDivision"]:
                    return False
            else:
                if not row["TmDivision"] == row["OppDivision"]:
                    return False
    
    return True

def calculate_formula(stat, player_type, formula, data, all_rows, player_data, safe_eval=False):
    if formula == "Special":
        if stat in ("TmW", "TmL", "TmTtlL", "TmT", "TmOTL", "TmROW", "TmROL"):
            return calculate_team_win_losses(data, all_rows, stat)
        elif stat == "TmRec":
            return str(data["TmW"]) + ":" + str(data["TmL"]) + ":" + str(data["TmT"] + data["TmOTL"])
        elif stat == "TmScore":
            return data["Team Score"]
        elif stat == "OppScore":
            return data["Opponent Score"]
        elif stat == "TmG":
            return data["Team Goals"]
        elif stat == "OppG":
            return data["Opponent Goals"]

    earliest_invalid_date = None
    formula = formula.lower()
    if all_rows:
        for sub_stat in data:
            if stat == "custom_formula" or (sub_stat != "Tm" and sub_stat != "Result" and sub_stat != "player_type" and sub_stat != "is_playoffs" and (not sub_stat in qualifier_map or sub_stat == "Team Score" or sub_stat == "Opponent Score")):
                temp_earliest_invalid_date = calculate_earliest_invalid_date(sub_stat, player_type, data, formula, earliest_invalid_date, stat, player_data)
                if temp_earliest_invalid_date:
                    earliest_invalid_date = temp_earliest_invalid_date

    if "PTS" in stat:
        earliest_invalid_date = None

    for sub_stat in data:
        if stat == "custom_formula" or (sub_stat != "Tm" and sub_stat != "Result" and sub_stat != "player_type" and sub_stat != "is_playoffs" and (not sub_stat in qualifier_map or sub_stat == "Team Score" or sub_stat == "Opponent Score")):
            formula = replace_formula(data, sub_stat, formula, all_rows, earliest_invalid_date, player_type, stat)

    try:
        if safe_eval:
            return float(numexpr.evaluate(formula))
        else:
            return eval(formula)
    except ZeroDivisionError:
        if "isinf" in headers[player_type["da_type"]["type"]][stat]:
            if data[headers[player_type["da_type"]["type"]][stat]["isinf"]] == 0:
                return 0.0
            else:
                return math.inf
        else:
            return 0.0
    except Exception:
        if stat == "custom_formula":
            raise CustomMessageException("Invalid formula!")
        else:
            raise

def calculate_team_win_losses(data, all_rows, stat):
    if not all_rows:
        all_rows = [data]

    result_count = 0
    for row in all_rows:
        if "Result" in row and row["Result"]:
            if stat == "TmW":
                if row["Result"].startswith("W"):
                    result_count += 1
            elif stat == "TmL":
                if row["Result"] == "L":
                    result_count += 1
                elif (row["Year"] < 1999 or row["is_playoffs"]) and row["Result"].startswith("L"):
                    result_count += 1
            elif stat == "TmTtlL":
                if row["Result"].startswith("L"):
                    result_count += 1
            elif stat == "TmT":
                if row["Result"].startswith("T"):
                    result_count += 1
            elif stat == "TmOTL":
                if row["Result"].startswith("L") and row["Result"] != "L" and not (row["Year"] < 1999 or row["is_playoffs"]):
                    result_count += 1
            elif stat == "TmROW":
                if row["Result"].startswith("W") and not row["Result"].endswith("SO") :
                    result_count += 1
            elif stat == "TmROL":
                if row["Result"].startswith("L") and not row["Result"].endswith("SO") :
                    result_count += 1

    return result_count

def calculate_earliest_invalid_date(stat, player_type, data, formula, earliest_invalid_date, real_stat, player_data):
    if re.search(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(stat.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", formula):
        invalid_date = is_invalid_stat(stat, player_type, data, False, player_data)
        if invalid_date:
            if not earliest_invalid_date or invalid_date == True or invalid_date > earliest_invalid_date:
                return invalid_date
    elif real_stat == "custom_formula":
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and header_stat.lower() == stat.lower():
                stat = headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower()
        if re.search(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(stat.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", formula):
            invalid_date = is_invalid_stat(stat, player_type, data, False, player_data)
            if invalid_date:
                if not earliest_invalid_date or invalid_date == True or invalid_date > earliest_invalid_date:
                    return invalid_date

def replace_formula(data, stat, formula, all_rows, earliest_invalid_date, player_type, real_stat):
    value = data[stat]
    if isinstance(value, numbers.Number):
        value = calculate_valid_value(stat, value, earliest_invalid_date, all_rows, real_stat)
    elif real_stat != "custom_formula":
        return formula

    formula, num_subs = re.subn(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(stat.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", str(value).lower(), formula)
    if not num_subs and real_stat == "custom_formula":
        for header_stat in headers[player_type["da_type"]["type"]]:
            if "display-value" in headers[player_type["da_type"]["type"]][header_stat] and header_stat.lower() == stat.lower():
                stat = headers[player_type["da_type"]["type"]][header_stat]["display-value"].lower()
        formula = re.sub(r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))" + re.escape(stat.lower()) + r"(?:(?<![\w+])(?=[\w+])|(?<=[\w+])(?![\w+]))", str(value).lower(), formula)
    return formula

def calculate_valid_value(stat, value, earliest_invalid_date, all_rows, real_stat):
    if not earliest_invalid_date:
        return value

    for row_data in all_rows:
        if stat in row_data:
            date = row_data["Year"]
            if date < earliest_invalid_date:
                value = value - row_data[stat]
    
    return value

def print_player_data(player_datas, player_type, highest_vals, lowest_vals, has_playoffs, has_non_playoffs, has_toi_stats, debug_mode, extra_stats, has_one_player_games):
    html_info = {
        "player_image_url" : [],
        "tables" : []
    }
    all_unique_quals = True
    quals = None
    player_index = 0
    for index, player_data in enumerate(player_datas):
        if not player_data["stat_values"]["Raw Quals"] or player_data["stat_values"]["Raw Quals"] == "Query: ":
            continue
        player_index = index
        if not quals:
            quals = player_data["stat_values"]["Raw Quals"]
        if quals != player_data["stat_values"]["Raw Quals"]:
            all_unique_quals = False
            break

    ranges_str = ""
    for index, player_data in enumerate(player_datas):
        html_info["player_image_url"].append({"urls" : player_data["player_image_url"], "positions" : player_data["player_position"], "teams" : player_data["player_current_team"], "flags" : player_data["player_flag"], "numbers" : player_data["player_current_number"], "hofs" : player_data["player_hof"], "names" : player_data["stat_values"]["Player"], "ids" : player_data["ids"]})
        if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
            player_str = player_data["stat_values"]["Raw Player"]
        else:
            player_str = ""
            for index, player in enumerate(player_data["stat_values"]["Player"]):
                player_str += create_player_url_string(player, player_data["ids"][index], extra_stats)
                if index != len(player_data["stat_values"]["Player"]) - 1:
                    player_str += " + "
        
        has_one_player_missing = False
        missing_all_players = True
        for player in player_data["stat_values"]["Player"]:
            if player == "No Player Match!":
                has_one_player_missing = True
            else:
                missing_all_players = False

        player_search_str = ""
        if has_one_player_missing:
            player_search_str = " Searched Term: \"" + " + ".join(player_data["stat_values"]["Search Term"]) + "\""

        ranges_str += player_str + player_search_str
        if missing_all_players:
            ranges_str += "\n"
        else:
            ranges_str += ": "  + player_data["stat_values"]["Raw Range"] + " " + player_data["stat_values"]["Raw Time"] + "\n"

        if not all_unique_quals:
            ranges_str += player_data["stat_values"]["Raw Quals"]
            if index != len(player_datas) - 1:
                ranges_str += "\n----------------------------------------\n"
    
    if all_unique_quals and player_datas[player_index]["stat_values"]["Raw Quals"] != "Query: ":
         ranges_str += "----------------------------------------\n" + player_datas[player_index]["stat_values"]["Raw Quals"]

    if debug_mode:
        logger.info("#" + str(threading.get_ident()) + "#   " + ranges_str)

    rate_headers = dict(filter(lambda header: header[1].get("type") == "Per Game/60 Minutes", headers[player_type["da_type"]["type"]].items()))
    score_sum_headers = dict(filter(lambda header: header[1].get("type") == "Advanced", headers[player_type["da_type"]["type"]].items()))
    advance_headers = dict(filter(lambda header: header[1].get("type") == ("5v5" if player_type["da_type"]["type"] == "Skater" else "Advanced"), headers[player_type["da_type"]["type"]].items()))
    award_headers = dict(filter(lambda header: header[1].get("type") == "Awards/Honors", headers[player_type["da_type"]["type"]].items()))
    penalty_headers = dict(filter(lambda header: header[1].get("type") == "Penalty", headers[player_type["da_type"]["type"]].items()))
    non_rate_headers = dict(filter(lambda header: header[1].get("type") != "Per Game/60 Minutes" and header[1].get("type") != ("5v5" if player_type["da_type"]["type"] == "Skater" else "Advanced") and header[1].get("type") != "Awards/Honors" and header[1].get("type") != "Advanced" and header[1].get("type") != "Penalty", headers[player_type["da_type"]["type"]].items()))

    has_season_stats = True
    for player_data in player_datas:
        if not player_data["has_season_stats"]:
            has_season_stats = False
            break

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    all_headers = {}
    if non_rate_headers:
        all_headers["Standard"] = non_rate_headers
    if rate_headers:
        all_headers["Per Game/60 Minutes"] = rate_headers
    if score_sum_headers:
        if player_type["da_type"]["type"] == "Skater":
            all_headers["Advanced"] = score_sum_headers
    if advance_headers:
        if player_type["da_type"]["type"] == "Skater":
            all_headers["5v5 (Avail since 2009-2010)"] = advance_headers
        else:
            all_headers["Advanced"] = advance_headers
    if penalty_headers and "penalties" in extra_stats:
        all_headers["Penalty"] = penalty_headers

    if award_headers:
        has_award_stats = True
        show_selke = False
        show_norris = False
        for player_data in player_datas:
            if not player_data["has_award_stats"]:
                has_award_stats = False
                break
            
            for player_pos in player_data["player_position"]:
                player_pos_split = player_pos.split("/")
                for sub_player_pos in player_pos_split:
                    if sub_player_pos != "G":
                        if sub_player_pos == "D" or sub_player_pos == "LHD" or sub_player_pos == "RHD":
                            if player_type["da_type"]["type"] == "Skater":
                                if handle_table_data(player_data, player_type, "Awards/Honors", "Norris", highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats) != "N/A":
                                    show_norris = True
                        elif sub_player_pos != "G":
                            if player_type["da_type"]["type"] == "Skater":
                                if handle_table_data(player_data, player_type, "Awards/Honors", "Selke", highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats) != "N/A":
                                    show_selke = True
        
        if has_award_stats:
            has_playoffs = False
            has_reg_season = False
            for player_data in player_datas:
                if player_data["stat_values"]["is_playoffs"]:
                    if player_data["stat_values"]["is_playoffs"] == "Only":
                        has_playoffs = True
                    else:
                        has_reg_season = True
                else:
                    has_reg_season = True
            if has_playoffs and has_reg_season:
                has_award_stats = False
                
        if has_award_stats:
            if not show_selke:
                award_headers = {award: award_values for award, award_values in award_headers.items() if not "Selke" in award}
            if not show_norris:
                award_headers = {award: award_values for award, award_values in award_headers.items() if not "Norris" in award}
            all_headers["Awards/Honors"] = award_headers
    
    tables_to_skip = set()
    headers_to_skip = {}
    for over_header in all_headers:
        has_table_match = False
        if all_headers[over_header]:
            for header in all_headers[over_header]:
                has_header_match = False
                for index, player_data in enumerate(player_datas):
                    value = handle_table_data(player_data, player_type, over_header, header, highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats)
                    if value != "N/A" and value != None:
                        has_header_match = True
                        if not header.startswith("Player") and header != "GP" and not header.startswith("GP/") and not header.startswith("GP_") and header != "GS" and not header.startswith("GS/") and not header.startswith("GS_") and header != "GP/Yr" and header != "GS/Yr" and header != "TOI/Yr" and header != "Seasons":
                            if (over_header != "Awards/Honors" or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                has_table_match = True
                                break
                if not has_header_match:
                    if not over_header in headers_to_skip:
                        headers_to_skip[over_header] = set()
                    headers_to_skip[over_header].add(header)
        if not has_table_match:
            tables_to_skip.add(over_header)
    
    for over_header in headers_to_skip:
        for header in headers_to_skip[over_header]:
            if over_header in all_headers and header in all_headers[over_header]:
                del all_headers[over_header][header]
    
    for over_header in tables_to_skip:
        if over_header in all_headers:
            del all_headers[over_header]
    
    if player_type["da_type"]["type"] == "Skater" and "Advanced" in all_headers:
        if len(all_headers["Advanced"]) <= 4 or "Penalty On" in extra_stats:
            if "PEN" in all_headers["Advanced"]:
                pen_obj = all_headers["Advanced"]["PEN"]
                pim_obj = all_headers["Standard"]["PIM"]
                del all_headers["Standard"]["PIM"]
                all_headers["Standard"]["PEN"] = pen_obj
                all_headers["Standard"]["PIM"] = pim_obj
            if "PEN/60M" in all_headers["Advanced"]:
                pen_obj = all_headers["Advanced"]["PEN/60M"]
                pim_obj = all_headers["Per Game/60 Minutes"]["PIM/60M"]
                del all_headers["Per Game/60 Minutes"]["PIM/60M"]
                all_headers["Per Game/60 Minutes"]["PEN/60M"] = pen_obj
                all_headers["Per Game/60 Minutes"]["PIM/60M"] = pim_obj
            del all_headers["Advanced"]

    error_getting_adv = False
    for player_data in player_datas:
        if player_data["error_getting_adv"]:
            error_getting_adv = True
            break

    for over_header in all_headers:
        if "hide-table-" + over_header.lower() in extra_stats:
            continue
        if over_header.startswith("5v5") and "hide-table-5v5" in extra_stats:
            continue
        if over_header == "5v5 (Avail since 2009-2010)":
            if error_getting_adv:
                continue

        if all_headers[over_header]:
            table = PrettyTable()
            field_names = []
            for header in all_headers[over_header]:
                if "hide-stat-" + header.lower() in extra_stats:
                    continue
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "hide-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        continue
                override_show = False
                if "show-stat-" + header.lower() in extra_stats:
                    override_show = True
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "show-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        override_show = True
                if header in ("TmW", "TmL", "TmTtlL", "TmT", "TmOTL", "TmPTS", "TmPTS%", "TmW/L%", "TmROW", "TmROL", "TmROW/L%") and "record" in extra_stats:
                    if header == "TmPTS" or header == "TmPTS%" or header == "TmROW" or header == "TmROL" or header == "TmROW/L%":
                        if has_non_playoffs and not has_playoffs:
                            override_show = True
                    elif header == "TmW/L%":
                        if has_playoffs:
                            override_show = True
                    elif header == "TmOTL":
                        if not has_playoffs:
                            override_show = True
                    elif header == "TmL":
                        if not has_playoffs:
                            override_show = True
                    elif header == "TmTtlL":
                        if has_playoffs:
                            override_show = True
                    else:   
                        override_show = True
                if header in ("TmG", "OppG", "TtlG", "GDiff", "TmG/GP", "OppG/GP", "TtlG/GP", "GDiff/GP") and "score" in extra_stats:
                    override_show = True
                if ("FirstStar" in header or "SecondStar" in header or "ThirdStar" in header or "TotalStar" in header) and "star" in extra_stats:
                    override_show = True
                if (header == "AdjGNoSeas" or header == "AdjANoSeas" or header == "AdjPNoSeas" or header == "AdjG/GP" or header == "AdjA/GP" or header == "AdjP/GP" or header == "AdjG/60M" or header == "AdjA/60M" or header == "AdjP/60M") and "adjusted" in extra_stats:
                    override_show = True
                if header in ("PIM/GP", "PEN/GP", "A1/GP", "EVA1/GP", "GA/GP", "SA/GP", "SV/GP") and not has_toi_stats:
                    override_show = True
                if "Shot On" in extra_stats and ("EVG" in header or "PPG" in header or "SHG" in header):
                    override_show = True
                if "Assisted On" in extra_stats and ("A1" in header or "EVA" in header or "PPA" in header or "SHA" in header):
                    override_show = True
                if "Faceoff Against" in extra_stats and "FO" in header:
                    override_show = True
                if "Points On" in extra_stats and ("P1" in header or "EVP" in header or "PPP" in header or "SHP" in header):
                    override_show = True
                if "scoring-stats" in extra_stats and ("EVG" in header or "PPG" in header or "SHG" in header or "A1" in header or "EVA" in header or "PPA" in header or "SHA" in header or "P1" in header or "EVP" in header or "PPP" in header or "SHP" in header):
                    override_show = True
                if "Assisted By" in extra_stats:
                    override_show = True
                if "Hit On" in extra_stats and header in ("HIT/GP"):
                    override_show = True
                if "Block On" in extra_stats and header in ("BLK/GP"):
                    override_show = True
                if "current-stats" in extra_stats or "current-stats-zone" in extra_stats:
                    if header in ("1stG", "Post/Bar", "Post/60M", "TK", "GV", "TK/GV", "TK/60M", "GV/60M", "GF/60M", "GA/60M", "GF%", "CF/60M", "CA/60M", "CFPer", "FF/60M", "FA/60M", "FFPer", "SF/60M", "SA/60M", "SFPer", "OZ%", "oiSPer", "oiSVPer", "PDO", "OZFO%", "DZFO%"):
                        override_show = True
                    if "TSA" in header or header == "SThr%" or header == "TS%" or header == "TOI/GP":
                        override_show = True
                if "toi" in extra_stats and "TOI" in header:
                    override_show = True
                if seasons_leading and header in div_id_to_stat[player_type["da_type"]["type"]].values():
                    override_show = True

                if override_show or ("display" not in all_headers[over_header][header] or all_headers[over_header][header]["display"]):
                    if not ("type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Awards/Honors" and not has_non_playoffs and not (header.startswith("Cup") or header.startswith("Smythe") or header.startswith("Seasons") or header.startswith("Player") or header.startswith("GP") or header == "GS" or header.startswith("GS/") or header.startswith("GS_") or header == "TOI/Yr")):
                        if not ((header == "T" or header == "OTL" or header == "ROW" or header == "ROL" or header == "ROW/L%") and has_playoffs and not has_non_playoffs):
                            display_header = all_headers[over_header][header]["display-value"] if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"] else header
                            if (header == "S" or header == "S/GP" or header == "S%" or header == "PTS%") and ((not "shootout" in extra_stats and not "penalty-shot" in extra_stats) or "Shot On" in extra_stats):
                                display_header = header
                            if over_header == "Per Game/60 Minutes":
                                if display_header.endswith("GP"):
                                    display_header = display_header[:-2]
                                if display_header.endswith("M"):
                                    display_header = display_header[:-1]
                                if display_header.endswith("/"):
                                    display_header = display_header[:-1]
                            elif over_header == "Advanced":
                                if display_header.endswith("_Score"):
                                    display_header = display_header[:-6]
                                if display_header.endswith("M"):
                                    display_header = display_header[:-1]
                                if display_header.endswith("_Sit"):
                                    display_header = display_header[:-4]
                            elif over_header == "5v5 (Avail since 2009-2010)":
                                if display_header.endswith("_5v5"):
                                    display_header = display_header[:-4]
                                if display_header.endswith("M"):
                                    display_header = display_header[:-1]
                                if display_header.endswith("/"):
                                    display_header = display_header[:-1]
                            elif over_header == "Awards/Honors":
                                if display_header.endswith("_Awards"):
                                    display_header = display_header[:-7]
                            elif over_header == "Penalty":
                                if display_header.endswith("_Penalty"):
                                    display_header = display_header[:-8]
                            field_names.append(display_header)

            table.field_names = field_names

            rows = []
            for index, player_data in enumerate(player_datas):
                if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
                    values = []
                    for header in all_headers[over_header]:
                        value = handle_table_data(player_data, player_type, over_header, header, highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, False, extra_stats)
                        if value:
                            values.append(value)
                    table.add_row(values)
                    rows.append(values)

            display_over_header = over_header
            if display_over_header == "Advanced":
                if player_type["da_type"]["type"] == "Skater":
                    if not has_against_quals_no_so(extra_stats):
                        if has_season_stats and has_non_playoffs:
                            display_over_header = "Advanced (Most stats avail since 2009-2010, xG per Hockey Reference)"
                        else:
                            display_over_header = "Advanced (Most stats avail since 2009-2010)"
                else:
                    if has_season_stats and has_non_playoffs:
                        display_over_header = "Situational/Advanced (Even Strength/Hockey Reference, avail since 2016-2017)"
                    else:
                        display_over_header = "Situational"
            elif display_over_header == "5v5 (Avail since 2009-2010)":
                if has_against_quals_no_so(extra_stats):
                    display_over_header = "5v5"

            if debug_mode:
                if len(all_headers) > 1:
                    logger.info("#" + str(threading.get_ident()) + "#   " + display_over_header + "\n\n" + str(table))
                else:
                    logger.info("#" + str(threading.get_ident()) + "#   " + str(table))

            html_info["tables"].append({
                "title" : display_over_header,
                "headers" : field_names,
                "rows" : rows
            })

    return html_info

def get_reddit_player_table(player_datas, player_type, debug_mode, original_comment, last_updated, comment_id, hide_table, extra_stats, has_one_player, has_one_player_games):
    has_non_playoffs = False
    has_playoffs = False
    has_season_stats = True
    for player_data in player_datas:
        if player_data["stat_values"]["is_playoffs"] != "Only":
            has_non_playoffs = True
        
        if player_data["stat_values"]["is_playoffs"] and player_data["stat_values"]["is_playoffs"] != "No":
            has_playoffs = True
        
        if not player_data["has_season_stats"]:
            has_season_stats = False

    has_toi_stats = not has_against_quals(extra_stats) or "current-stats" in extra_stats
    if player_type["da_type"]["type"] == "Skater":
        for index, player_data in enumerate(player_datas):
            if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
                value = handle_table_data(player_data, player_type, "Per Game/60 Minutes", "TOI/GP", {}, {}, index, has_season_stats, has_playoffs, has_non_playoffs, True, True, extra_stats)
                if value == "N/A" or value == None:
                    has_toi_stats = False
                    break
    
    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    highest_vals, lowest_vals = calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, has_playoffs, has_season_stats, has_toi_stats, seasons_leading, extra_stats)
    
    rate_headers = dict(filter(lambda header: header[1].get("type") == "Per Game/60 Minutes", headers[player_type["da_type"]["type"]].items()))
    score_sum_headers = dict(filter(lambda header: header[1].get("type") == "Advanced", headers[player_type["da_type"]["type"]].items()))
    advance_headers = dict(filter(lambda header: header[1].get("type") == ("5v5" if player_type["da_type"]["type"] == "Skater" else "Advanced"), headers[player_type["da_type"]["type"]].items()))
    award_headers = dict(filter(lambda header: header[1].get("type") == "Awards/Honors", headers[player_type["da_type"]["type"]].items()))
    penalty_headers = dict(filter(lambda header: header[1].get("type") == "Penalty", headers[player_type["da_type"]["type"]].items()))
    non_rate_headers = dict(filter(lambda header: header[1].get("type") != "Per Game/60 Minutes" and header[1].get("type") != ("5v5" if player_type["da_type"]["type"] == "Skater" else "Advanced") and header[1].get("type") != "Awards/Honors" and header[1].get("type") != "Advanced" and header[1].get("type") != "Penalty", headers[player_type["da_type"]["type"]].items()))

    all_headers = {}
    if non_rate_headers:
        all_headers["Standard"] = non_rate_headers
    if rate_headers:
        all_headers["Per Game/60 Minutes"] = rate_headers
    if score_sum_headers:
        if player_type["da_type"]["type"] == "Skater":
            all_headers["Advanced"] = score_sum_headers
    if advance_headers:
        if player_type["da_type"]["type"] == "Skater":
            all_headers["5v5 (Avail since 2009-2010)"] = advance_headers
        else:
            all_headers["Advanced"] = advance_headers
    if penalty_headers and "penalties" in extra_stats:
        all_headers["Penalty"] = penalty_headers

    if award_headers:
        has_award_stats = True
        show_selke = False
        show_norris = False
        for player_data in player_datas:
            if not player_data["has_award_stats"]:
                has_award_stats = False
                break
            
            for player_pos in player_data["player_position"]:
                player_pos_split = player_pos.split("/")
                for sub_player_pos in player_pos_split:
                    if sub_player_pos != "G":
                        if sub_player_pos == "D" or sub_player_pos == "LHD" or sub_player_pos == "RHD":
                            if player_type["da_type"]["type"] == "Skater":
                                if handle_table_data(player_data, player_type, "Awards/Honors", "Norris", highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats) != "N/A":
                                    show_norris = True
                        elif sub_player_pos != "G":
                            if player_type["da_type"]["type"] == "Skater":
                                if handle_table_data(player_data, player_type, "Awards/Honors", "Selke", highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats) != "N/A":
                                    show_selke = True
        
        if has_award_stats:
            has_playoffs = False
            has_reg_season = False
            for player_data in player_datas:
                if player_data["stat_values"]["is_playoffs"]:
                    if player_data["stat_values"]["is_playoffs"] == "Only":
                        has_playoffs = True
                    else:
                        has_reg_season = True
                else:
                    has_reg_season = True
            if has_playoffs and has_reg_season:
                has_award_stats = False
                
        if has_award_stats:
            if not show_selke:
                award_headers = {award: award_values for award, award_values in award_headers.items() if not "Selke" in award}
            if not show_norris:
                award_headers = {award: award_values for award, award_values in award_headers.items() if not "Norris" in award}
            all_headers["Awards/Honors"] = award_headers
    
    tables_to_skip = set()
    headers_to_skip = {}
    for over_header in all_headers:
        has_table_match = False
        if all_headers[over_header]:
            for header in all_headers[over_header]:
                has_header_match = False
                for index, player_data in enumerate(player_datas):
                    value = handle_table_data(player_data, player_type, over_header, header, highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats)
                    if value != "N/A" and value != None:
                        has_header_match = True
                        if not header.startswith("Player") and header != "GP" and not header.startswith("GP/") and not header.startswith("GP_") and header != "GS" and not header.startswith("GS/") and not header.startswith("GS_") and header != "GP/Yr" and header != "GS/Yr" and header != "TOI/Yr" and header != "Seasons":
                            if (over_header != "Awards/Honors" or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                has_table_match = True
                                break
                if not has_header_match:
                    if not over_header in headers_to_skip:
                        headers_to_skip[over_header] = set()
                    headers_to_skip[over_header].add(header)
        if not has_table_match:
            tables_to_skip.add(over_header)
    
    for over_header in headers_to_skip:
        for header in headers_to_skip[over_header]:
            if over_header in all_headers and header in all_headers[over_header]:
                del all_headers[over_header][header]
    
    for over_header in tables_to_skip:
        if over_header in all_headers:
            del all_headers[over_header]
    
    if player_type["da_type"]["type"] == "Skater" and "Advanced" in all_headers:
        if len(all_headers["Advanced"]) <= 4 or "Penalty On" in extra_stats:
            if "PEN" in all_headers["Advanced"]:
                pen_obj = all_headers["Advanced"]["PEN"]
                pim_obj = all_headers["Standard"]["PIM"]
                del all_headers["Standard"]["PIM"]
                all_headers["Standard"]["PEN"] = pen_obj
                all_headers["Standard"]["PIM"] = pim_obj
            if "PEN/60M" in all_headers["Advanced"]:
                pen_obj = all_headers["Advanced"]["PEN/60M"]
                pim_obj = all_headers["Per Game/60 Minutes"]["PIM/60M"]
                del all_headers["Per Game/60 Minutes"]["PIM/60M"]
                all_headers["Per Game/60 Minutes"]["PEN/60M"] = pen_obj
                all_headers["Per Game/60 Minutes"]["PIM/60M"] = pim_obj
            del all_headers["Advanced"]

    all_unique_quals = True
    quals = None
    player_index = 0
    for index, player_data in enumerate(player_datas):
        if not player_data["stat_values"]["Raw Quals"] or player_data["stat_values"]["Raw Quals"] == "Query: ":
            continue
        player_index = index
        if not quals:
            quals = player_data["stat_values"]["Raw Quals"]
        if quals != player_data["stat_values"]["Raw Quals"]:
            all_unique_quals = False
            break

    ranges_str = ""
    for index, player_data in enumerate(player_datas):
        if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
            player_str = player_data["stat_values"]["Raw Player"]
        else:
            player_str = ""
            for index, player in enumerate(player_data["stat_values"]["Player"]):
                player_str += create_player_url_string(player, player_data["ids"][index], extra_stats)
                if index != len(player_data["stat_values"]["Player"]) - 1:
                    player_str += " + "

        has_one_player_missing = False
        missing_all_players = True
        for player in player_data["stat_values"]["Player"]:
            if player == "No Player Match!":
                has_one_player_missing = True
            else:
                missing_all_players = False

        player_search_str = ""
        if has_one_player_missing:
            player_search_str = " Searched Term: \"" + " + ".join(player_data["stat_values"]["Search Term"]) + "\""

        ranges_str += player_str + player_search_str
        if missing_all_players:
            ranges_str += "\n\n"
        else:
            ranges_str += ": "  + player_data["stat_values"]["Raw Range"] + " " + player_data["stat_values"]["Raw Time"] + "\n\n"

        if not all_unique_quals:
            ranges_str += player_data["stat_values"]["Raw Quals"]
            if index != len(player_datas) - 1:
                ranges_str += "\n\n\\----------------------------------------\n\n"
    
    if all_unique_quals and player_datas[player_index]["stat_values"]["Raw Quals"] != "Query: ":
         ranges_str += "\\----------------------------------------\n\n" + player_datas[player_index]["stat_values"]["Raw Quals"]
                
    table_str = ranges_str + "\n\n---\n"

    error_getting_adv = False
    for player_data in player_datas:
        if player_data["error_getting_adv"]:
            error_getting_adv = True
            break

    for over_header in all_headers:
        if "hide-table-" + over_header.lower() in extra_stats:
            continue
        if over_header.startswith("5v5") and "hide-table-5v5" in extra_stats:
            continue
        if over_header == "5v5 (Avail since 2009-2010)":
            if error_getting_adv:
                continue

        if all_headers[over_header]:
            if len(all_headers) > 1:
                display_over_header = over_header
                if display_over_header == "Advanced":
                    if player_type["da_type"]["type"] == "Skater":
                        if not has_against_quals_no_so(extra_stats):
                            if has_season_stats and has_non_playoffs:
                                display_over_header = "Advanced (Most stats avail since 2009-2010, xG per Hockey Reference)"
                            else:
                                display_over_header = "Advanced (Most stats avail since 2009-2010)"
                    else:
                        if has_season_stats and has_non_playoffs:
                            display_over_header = "Situational/Advanced (Even Strength/Hockey Reference, avail since 2016-2017)"
                        else:
                            display_over_header = "Situational"
                elif display_over_header == "5v5 (Avail since 2009-2010)":
                    if has_against_quals_no_so(extra_stats):
                        display_over_header = "5v5"

                table_str += "**" + display_over_header + "**\n\n"

            field_names = []
            for header in all_headers[over_header]:
                if "hide-stat-" + header.lower() in extra_stats:
                    continue
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "hide-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        continue
                override_show = False
                if "show-stat-" + header.lower() in extra_stats:
                    override_show = True
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "show-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        override_show = True
                if header in ("TmW", "TmL", "TmTtlL", "TmT", "TmOTL", "TmPTS", "TmPTS%", "TmW/L%", "TmROW", "TmROL", "TmROW/L%") and "record" in extra_stats:
                    if header == "TmPTS" or header == "TmPTS%" or header == "TmROW" or header == "TmROL" or header == "TmROW/L%":
                        if has_non_playoffs and not has_playoffs:
                            override_show = True
                    elif header == "TmW/L%":
                        if has_playoffs:
                            override_show = True
                    elif header == "TmOTL":
                        if not has_playoffs:
                            override_show = True
                    elif header == "TmL":
                        if not has_playoffs:
                            override_show = True
                    elif header == "TmTtlL":
                        if has_playoffs:
                            override_show = True
                    else:   
                        override_show = True
                if header in ("TmG", "OppG", "TtlG", "GDiff", "TmG/GP", "OppG/GP", "TtlG/GP", "GDiff/GP") and "score" in extra_stats:
                    override_show = True
                if ("FirstStar" in header or "SecondStar" in header or "ThirdStar" in header or "TotalStar" in header) and "star" in extra_stats:
                    override_show = True
                if (header == "AdjGNoSeas" or header == "AdjANoSeas" or header == "AdjPNoSeas" or header == "AdjG/GP" or header == "AdjA/GP" or header == "AdjP/GP" or header == "AdjG/60M" or header == "AdjA/60M" or header == "AdjP/60M") and "adjusted" in extra_stats:
                    override_show = True
                if header in ("PIM/GP", "PEN/GP", "A1/GP", "EVA1/GP", "GA/GP", "SA/GP", "SV/GP") and not has_toi_stats:
                    override_show = True
                if "Shot On" in extra_stats and ("EVG" in header or "PPG" in header or "SHG" in header):
                    override_show = True
                if "Assisted On" in extra_stats and ("A1" in header or "EVA" in header or "PPA" in header or "SHA" in header):
                    override_show = True
                if "Faceoff Against" in extra_stats and "FO" in header:
                    override_show = True
                if "Points On" in extra_stats and ("P1" in header or "EVP" in header or "PPP" in header or "SHP" in header):
                    override_show = True
                if "scoring-stats" in extra_stats and ("EVG" in header or "PPG" in header or "SHG" in header or "A1" in header or "EVA" in header or "PPA" in header or "SHA" in header or "P1" in header or "EVP" in header or "PPP" in header or "SHP" in header):
                    override_show = True
                if "Assisted By" in extra_stats:
                    override_show = True
                if "Hit On" in extra_stats and header in ("HIT/GP"):
                    override_show = True
                if "Block On" in extra_stats and header in ("BLK/GP"):
                    override_show = True
                if "current-stats" in extra_stats or "current-stats-zone" in extra_stats:
                    if header in ("1stG", "Post/Bar", "Post/60M", "TK", "GV", "TK/GV", "TK/60M", "GV/60M", "GF/60M", "GA/60M", "GF%", "CF/60M", "CA/60M", "CFPer", "FF/60M", "FA/60M", "FFPer", "SF/60M", "SA/60M", "SFPer", "OZ%", "oiSPer", "oiSVPer", "PDO", "OZFO%", "DZFO%"):
                        override_show = True
                    if "TSA" in header or header == "SThr%" or header == "TS%" or header == "TOI/GP":
                        override_show = True
                if "toi" in extra_stats and "TOI" in header:
                    override_show = True
                if seasons_leading and header in div_id_to_stat[player_type["da_type"]["type"]].values():
                    override_show = True

                if override_show or ("display" not in all_headers[over_header][header] or all_headers[over_header][header]["display"]):
                    if not ("type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Awards/Honors" and not has_non_playoffs and not (header.startswith("Cup") or header.startswith("Smythe") or header.startswith("Seasons") or header.startswith("Player") or header.startswith("GP") or header == "GS" or header.startswith("GS/") or header.startswith("GS_") or header == "TOI/Yr")):
                        if not ((header == "T" or header == "OTL" or header == "ROW" or header == "ROL" or header == "ROW/L%") and has_playoffs and not has_non_playoffs):
                            display_header = all_headers[over_header][header]["display-value"] if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"] else header
                            if (header == "S" or header == "S/GP" or header == "S%" or header == "PTS%") and ((not "shootout" in extra_stats and not "penalty-shot" in extra_stats) or "Shot On" in extra_stats):
                                display_header = header
                            if over_header == "Per Game/60 Minutes":
                                if display_header.endswith("GP"):
                                    display_header = display_header[:-2]
                                if display_header.endswith("M"):
                                    display_header = display_header[:-1]
                                if display_header.endswith("/"):
                                    display_header = display_header[:-1]
                            elif over_header == "Advanced":
                                if display_header.endswith("_Score"):
                                    display_header = display_header[:-6]
                                if display_header.endswith("M"):
                                    display_header = display_header[:-1]
                                if display_header.endswith("_Sit"):
                                    display_header = display_header[:-4]
                                if display_header.startswith("sc ") or display_header.startswith("HDsc "):
                                     display_header = "[" + display_header + "](https://www.hockey-reference.com/about/advanced_stats.html)"
                            elif over_header == "5v5 (Avail since 2009-2010)":
                                if display_header.endswith("_5v5"):
                                    display_header = display_header[:-4]
                                if display_header.endswith("M"):
                                    display_header = display_header[:-1]
                                if display_header.endswith("/"):
                                    display_header = display_header[:-1]    
                            elif over_header == "Awards/Honors":
                                if display_header.endswith("_Awards"):
                                    display_header = display_header[:-7]
                            elif over_header == "Penalty":
                                if display_header.endswith("_Penalty"):
                                    display_header = display_header[:-8]
                            else:
                                if display_header.startswith("Adj"):
                                    display_header = "[" + display_header + "](https://www.hockey-reference.com/about/adjusted_stats.html)"
                                elif display_header.endswith("PS"):
                                    display_header = "[" + display_header + "](https://www.hockey-reference.com/about/point_shares.html)"
                            field_names.append(display_header)

            table_str += "|".join(field_names) + "\n"
            for index in range(len(field_names)):
                table_str += ":-:|"
            table_str = table_str[:-1] + "\n"

            for index, player_data in enumerate(player_datas):
                if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
                    values = []
                    for header in all_headers[over_header]:
                        value = handle_table_data(player_data, player_type, over_header, header, highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats)
                        if value:
                            values.append(value)
                    table_str += "|".join(values) + "\n"

    html_info = print_player_data(player_datas, player_type, highest_vals, lowest_vals, has_playoffs, has_non_playoffs, has_toi_stats, debug_mode, extra_stats, has_one_player_games)

    imgur_link = None
    if has_one_player:
        failed_counter = 0
        while(True):
            try:
                logger.info("#" + str(threading.get_ident()) + "#   " + "Starting image generation")
                imgur_link = create_table_html(html_info, player_datas, original_comment, last_updated, comment_id, extra_stats)
                logger.info("#" + str(threading.get_ident()) + "#   " + "Done with image generation")
                break
            except Exception:
                failed_counter += 1
                if failed_counter > max_request_retries:
                    if hide_table:
                        raise
                    else:
                        logger.exception("#" + str(threading.get_ident()) + "#   " + "Error generating image")
                        break

            delay_step = 10
            logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow image generation to chill")
            time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
            for i in range(retry_failure_delay, 0, -time_to_wait):
                logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                time.sleep(time_to_wait)
            logger.info("#" + str(threading.get_ident()) + "#   " + "0")

    return table_str, imgur_link


def calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, has_playoffs, has_season_stats, has_toi_stats, seasons_leading, extra_stats):
    highest_vals = {}
    lowest_vals = {}
    for index, player_data in enumerate(player_datas):
         if "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            for header in headers[player_type["da_type"]["type"]]:
                set_value = False
                add_value = False
                over_header = headers[player_type["da_type"]["type"]][header]["type"] if "type" in headers[player_type["da_type"]["type"]][header] else "Standard"
                if not seasons_leading:
                    if over_header in ("Awards/Honors"):
                        if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                            continue
                    elif over_header in ("5v5"):
                        if not ("GP_5v5" in player_data["stat_values"] and player_data["stat_values"]["GP_5v5"]):
                            continue
                    elif over_header in ("Advanced"):
                        if not ("GP_Sit" in player_data["stat_values"] and player_data["stat_values"]["GP_Sit"]) and player_type["da_type"]["type"] != "Skater":
                            continue
                    elif over_header in ("Penalty"):
                        if not ("GP_Penalty" in player_data["stat_values"] and player_data["stat_values"]["GP_Penalty"]):
                            continue
                    else:
                        if not ("GP" in player_data["stat_values"] and player_data["stat_values"]["GP"]):
                            continue
                else:
                    if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                        continue
                    
                if header in player_data["stat_values"] and handle_table_data(player_data, player_type, over_header, header, highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats) != "N/A":
                    value = player_data["stat_values"][header]
                    original_value = value

                    if header == "TmRec":
                        rec_split = value.split(":")
                        try:
                            value = float(rec_split[0]) / (float(rec_split[0]) + float(rec_split[1]))
                        except ZeroDivisionError:
                            value = 0

                    if isinstance(value, numbers.Number):
                        if header in highest_vals:
                            if "skipzero" in headers[player_type["da_type"]["type"]][header]:
                                if not value:
                                    if not highest_vals[header]["value"]:
                                        add_value = True
                                    else:
                                        continue
                                elif not highest_vals[header]["value"]:
                                    set_value = True

                            positive_to_use = headers[player_type["da_type"]["type"]][header]["positive"]
                            if seasons_leading and header in ["GAA", "GA%-", "AdjGAA"]:
                                positive_to_use = True

                            if not set_value:
                                if value > highest_vals[header]["value"]:
                                    set_value = positive_to_use
                                elif value < highest_vals[header]["value"]:
                                    set_value = not positive_to_use
                                else:
                                    add_value = True
                        else:
                            set_value = True
                        if set_value:
                            highest_vals[header] = {
                                "players" : [index],
                                "original_value" : original_value,
                                "value" : value
                            }
                        elif add_value:
                            highest_vals[header]["players"].append(index)
        
            for header in headers[player_type["da_type"]["type"]]:
                set_value = False
                add_value = False
                over_header = headers[player_type["da_type"]["type"]][header]["type"] if "type" in headers[player_type["da_type"]["type"]][header] else "Standard"
                if not seasons_leading:
                    if over_header in ("Awards/Honors"):
                        if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                            continue
                    elif over_header in ("5v5"):
                        if not ("GP_5v5" in player_data["stat_values"] and player_data["stat_values"]["GP_5v5"]):
                            continue
                    elif over_header in ("Advanced"):
                        if not ("GP_Sit" in player_data["stat_values"] and player_data["stat_values"]["GP_Sit"]) and player_type["da_type"]["type"] != "Skater":
                            continue
                    elif over_header in ("Penalty"):
                        if not ("GP_Penalty" in player_data["stat_values"] and player_data["stat_values"]["GP_Penalty"]):
                            continue
                    else:
                        if not ("GP" in player_data["stat_values"] and player_data["stat_values"]["GP"]):
                            continue
                else:
                    if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                        continue
                    
                if header in player_data["stat_values"] and handle_table_data(player_data, player_type, over_header, header, highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, True, extra_stats) != "N/A":
                    value = player_data["stat_values"][header]
                    original_value = value
                    
                    if header == "TmRec":
                        rec_split = value.split(":")
                        try:
                            value = float(rec_split[0]) / (float(rec_split[0]) + float(rec_split[1]))
                        except ZeroDivisionError:
                            value = 0

                    if isinstance(value, numbers.Number):
                        if header in lowest_vals:
                            if "skipzero" in headers[player_type["da_type"]["type"]][header]:
                                if not value:
                                    if not lowest_vals[header]["value"]:
                                        add_value = True
                                    else:
                                        set_value = True
                                elif not lowest_vals[header]["value"]:
                                    continue

                            positive_to_use = headers[player_type["da_type"]["type"]][header]["positive"]
                            if seasons_leading and header in ["GAA", "GA%-", "AdjGAA"]:
                                positive_to_use = True

                            if not set_value:
                                if value < lowest_vals[header]["value"]:
                                    set_value = positive_to_use
                                elif value > lowest_vals[header]["value"]:
                                    set_value = not positive_to_use
                                else:
                                    add_value = True
                        else:
                            set_value = True
                        if set_value:
                            lowest_vals[header] = {
                                "players" : [index],
                                "original_value" : original_value,
                                "value" : value
                            }
                        elif add_value:
                            lowest_vals[header]["players"].append(index)
    
    return highest_vals, lowest_vals

def create_table_html(html_info, player_datas, original_comment, last_updated, comment_id, extra_stats):
    dirpath = tempfile.mkdtemp()

    try:
        soup = BeautifulSoup("", "lxml")
        html_tag = soup.new_tag("html")
        head_tag = soup.new_tag("head")
        head_tag.append(BeautifulSoup("<meta charset=\"UTF-8\" />", "lxml"))
        style_tag = soup.new_tag("style")
        body_tag = soup.new_tag("body")
        body_tag["style"] = "text-rendering: geometricPrecision;"
        body_div = soup.new_tag("div")

        style_tag.append(css_string)
        head_tag.append(style_tag)

        # courtesy_div = soup.new_tag("div")
        # courtesy_div.string = "Data courtesy of Pro Football Reference"
        # courtesy_div["style"] = "font-size: 12px; text-align: right;"
        # body_div.append(courtesy_div)

        total_image_div = soup.new_tag("div")
        if "hide-name" in extra_stats:
            total_image_div["style"] = "height: 170px; padding-bottom: 10px; display: inline-block;"
        else:
            total_image_div["style"] = "height: 170px; border: dashed; border-width: 0px 1px 1px 0px; padding-bottom: 10px; display: inline-block;"
        title_div_tag = soup.new_tag("div")
        title_div_tag["style"] = "text-align: center;"
        images_div_tag = soup.new_tag("div")

        # league_div = soup.new_tag("div")
        # league_div["style"] = "float: right; max-width: 5%;"
        # league_total_div = soup.new_tag("div")
        # league_total_div["style"] = "float: right;"
        # league_div_tag = soup.new_tag("div")
        # league_tag = soup.new_tag("img")
        # league_tag["src"] = "file:///" + os.path.abspath("../team_logos/leagues/nhl.png")
        # league_tag["style"] = "width: 50px;"
        # league_div_tag.append(league_tag)
        # league_total_div.append(league_div_tag)
        # league_div.append(league_total_div)
        # body_div.append(league_div)

        # images_div_tag["style"] = "overflow: hidden; position: relative;"
        tables_div_tag = soup.new_tag("div")
        parsed_ids = set()
        max_comb_players = 0
        if not "hide-name" in extra_stats:
            for player_image_urls in html_info["player_image_url"]:
                if len(player_image_urls["urls"]) > max_comb_players:
                    max_comb_players = len(player_image_urls["urls"])
                for index, player_image_url in enumerate(player_image_urls["urls"]):
                    if player_image_urls["names"][index] != "No Player Match!" and len(parsed_ids) < 10:
                        url = player_image_url if player_image_url else "file:///" + os.path.abspath("../team_logos/leagues/missing.png")
                        id = player_image_urls["ids"][index]
                        name = player_image_urls["names"][index]
                        parsed_name = create_human_name(name)
                        position = player_image_urls["positions"][index]
                        team = player_image_urls["teams"][index]
                        flag = parse_flag(player_image_urls["flags"][index])
                        number = player_image_urls["numbers"][index]
                        hof = player_image_urls["hofs"][index]
                        team_link = None
                        if not id in parsed_ids:
                            total_div = soup.new_tag("div")
                            total_div["style"] = "display: table-cell; width: 85px; padding-right: 10px;"
                            #player_name_div_tag = soup.new_tag("div")
                            #player_name_div_tag["stule"] = "max-width: 100px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                            #player_name_div_tag.string = name

                            team_color = "black"
                            secondary_color = "white"
                            if hof:
                                team_color = "gold"
                                secondary_color = "black"
                                team_link = "file:///" + os.path.abspath("../team_logos/leagues/nhl_hof.png")
                            else:
                                if team:
                                    team = re.sub(r"[^A-Za-z0-9 ]+", "", team)
                                    team = re.sub(r"\s+", " ", team).strip().lower()
                                    if team in team_renames:
                                        team = team_renames[team]
                                    for team_obj in team_colors:
                                        if team_obj["league"] == "nhl":
                                            pot_team = team_obj["name"]
                                            pot_team = re.sub(r"[^A-Za-z0-9 ]+", "", pot_team)
                                            pot_team = re.sub(r"\s+", " ", pot_team).strip().lower()

                                            if team == pot_team:
                                                if "hex" in team_obj["colors"] and team_obj["colors"]["hex"]:
                                                    team_color = "#" + team_obj["colors"]["hex"][0]
                                                    if len(team_obj["colors"]["hex"]) > 1:
                                                        secondary_color = "#" + team_obj["colors"]["hex"][1]
                                                elif "rgb" in team_obj["colors"] and team_obj["colors"]["rgb"]:
                                                    team_color = "rgb(" + team_obj["colors"]["rgb"][0].replace(" ", ",") + ")"
                                                    if len(team_obj["colors"]["rgb"]) > 1:
                                                        secondary_color = "rgb(" + team_obj["colors"]["rgb"][1].replace(" ", ",") + ")"
                                                if os.path.isfile(os.path.abspath("../team_logos/nhl/" + pot_team.replace(" ", "-") + ".svg")):
                                                    team_link = "file:///" + os.path.abspath("../team_logos/nhl/" + pot_team.replace(" ", "-") + ".svg")
                                                elif os.path.isfile(os.path.abspath("../team_logos/nhl/" + pot_team.replace(" ", "-") + ".png")):
                                                    team_link = "file:///" + os.path.abspath("../team_logos/nhl/" + pot_team.replace(" ", "-") + ".png")
                                                break

                            url_div_tag = soup.new_tag("div")
                            images_tag = soup.new_tag("img")
                            images_tag["src"] = url
                            if player_image_url:
                                images_tag["style"] = "height: 165px; width: 110px; border-color: " + team_color + "; border-width:2px 2px 3px 2px; border-style: solid;"
                            else:
                                images_tag["style"] = "height: 165px; width: 110px; border-color: " + team_color + "; border-width:2px 2px 3px 2px; border-style: solid;"
                            url_div_tag.append(images_tag)
                            if team_link:
                                images_tag = soup.new_tag("img")
                                images_tag["src"] = team_link
                                if hof:
                                    images_tag["style"] = "width: 28px; height: 28px; position: relative; bottom: 51px; left: 3px;"
                                else:
                                    images_tag["style"] = "width: 30px; height: 30px; position: relative; bottom: 50px; right: 1px;"
                                url_div_tag.append(images_tag)
                            if flag and "cairosvg.svg" in sys.modules:
                                flat_split = flag.split("/")
                                flag_name_split = os.path.splitext(flat_split[len(flat_split) - 1])
                                flag_name = dirpath + "/" + flag_name_split[0] + ".png"
                                if not os.path.isfile(flag_name):
                                    svg2png(bytestring=url_request_bytes(flag).decode("UTF-8"), write_to=flag_name)
                                images_tag = soup.new_tag("img")
                                images_tag["src"] = "file:///" + os.path.abspath(flag_name)
                                if team_link:
                                    if hof:
                                        images_tag["style"] = "width: 25px; height: 18.75px; position: relative; bottom: 53px; left: 56px; box-shadow: 2px 2px 4px 0 rgba(0,0,0,0.5);"
                                    else:
                                        images_tag["style"] = "width: 25px; height: 18.75px; position: relative; bottom: 55px; left: 54px; box-shadow: 2px 2px 4px 0 rgba(0,0,0,0.5);"
                                else:
                                    images_tag["style"] = "width: 25px; height: 18.75px; position: relative; bottom: 43px; left: 84px; box-shadow: 2px 2px 4px 0 rgba(0,0,0,0.5);"
                                url_div_tag.append(images_tag)
                            if number:
                                number_tag = soup.new_tag("p")
                                if team_link:
                                    if hof:
                                        number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 218px; left: 88px; font-size: 20px;"
                                    else:
                                        number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 220px; left: 88px; font-size: 20px;"
                                else:
                                    number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 208px; left: 88px; font-size: 20px;"
                                number_tag["style"] += "-webkit-text-stroke-width: 3px; -webkit-text-stroke-color: " + secondary_color + "; display: flex;"

                                number_str = str(number)
                                if len(number_str) == 1:
                                    number_span = soup.new_tag("span")
                                    number_span.string = "0"
                                    number_span["style"] = "visibility:hidden;"
                                    number_tag.append(number_span)
                                for digit in number_str:
                                    number_span = soup.new_tag("span")
                                    number_span.string = digit
                                    number_tag.append(number_span)

                                url_div_tag.append(number_tag)
                            if position:
                                position_tag = soup.new_tag("p")
                                position_tag.string = position
                                if team_link:
                                    if hof:
                                        if number:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 265px; left: 4px; font-size: 20px;"
                                        else:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 218px; left: 4px; font-size: 20px;"
                                    else:
                                        if number:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 267px; left: 4px; font-size: 20px;"
                                        else:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 220px; left: 4px; font-size: 20px;"
                                else:
                                    if number:
                                        position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 255px; left: 4px; font-size: 20px;"
                                    else:
                                        position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 208px; left: 4px; font-size: 20px;"
                                position_tag["style"] += "-webkit-text-stroke-width: 3px; -webkit-text-stroke-color: " + secondary_color + ";"
                                url_div_tag.append(position_tag)
                            player_name_tag = soup.new_tag("p")
                            player_name_tag.string = parsed_name.first[0] + ". " + parsed_name.last
                            if team_link:
                                if hof:
                                    if number:
                                        player_name_tag["style"] = "position: relative; bottom: 164px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        if position:
                                            player_name_tag["style"] = "position: relative; bottom: 117px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                        else:
                                            player_name_tag["style"] = "position: relative; bottom: 65px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                else:
                                    if number:
                                        player_name_tag["style"] = "position: relative; bottom: 166px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        if position:
                                            player_name_tag["style"] = "position: relative; bottom: 119px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                        else:
                                            player_name_tag["style"] = "position: relative; bottom: 67px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                            else:
                                if number:
                                    player_name_tag["style"] = "position: relative; bottom: 154px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                else:
                                    if position:
                                        player_name_tag["style"] = "position: relative; bottom: 107px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        player_name_tag["style"] = "position: relative; bottom: 55px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                            url_div_tag.append(player_name_tag)

                            parsed_ids.add(id)
                        
                            total_div.append(url_div_tag)
                            #total_div.append(player_name_div_tag)
                            images_div_tag.append(total_div)

        total_image_div.append(images_div_tag)
        body_div.append(total_image_div)

        all_unique_quals = True
        quals = None
        player_index = 0
        for index, player_data in enumerate(player_datas):
            if not player_data["stat_values"]["Raw Quals"] or player_data["stat_values"]["Raw Quals"] == "Query: ":
                continue
            player_index = index
            if not quals:
                quals = player_data["stat_values"]["Raw Quals"]
            if quals != player_data["stat_values"]["Raw Quals"]:
                all_unique_quals = False
                break

        for index, player_data in enumerate(player_datas):
            current_div = soup.new_tag("div")
            if True:
                current_div["style"] = "display: inline-block; vertical-align: top;"
            else:
                current_div["style"] = "display: inline-block; border: dashed; border-width: 0px 0px 0px 1px; vertical-align: top;"
            
            has_one_player_missing = False
            missing_all_players = True
            for player in player_data["stat_values"]["Player"]:
                if player == "No Player Match!":
                    has_one_player_missing = True
                else:
                    missing_all_players = False

            h2 = soup.new_tag("h2")
            h2.string = player_data["stat_values"]["Raw Player"]
            h2["style"] = "float: left; padding-left:10px; padding-right:10px;"
            raw_range = player_data["stat_values"]["Raw Range"]
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_range)
            while match:
                raw_range = raw_range.replace(match.group(0), match.group(1), 1)
                match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_range)

            if has_one_player_missing:
                h2_div = soup.new_tag("div")
                h2_div.string = "Searched Term: \"" + " + ".join(player_data["stat_values"]["Search Term"]) + "\""
                h2_div["style"] = "font-size: medium;"
                h2.append(h2_div)

            if not missing_all_players:
                h2_div = soup.new_tag("div")
                h2_div.string = raw_range
                h2_div["style"] = "font-size: medium;"
                h2.append(h2_div)

            if player_data["stat_values"]["Raw Time"] and not missing_all_players:
                h2_div = soup.new_tag("div")
                h2_div.string = player_data["stat_values"]["Raw Time"]
                h2_div["style"] = "font-size: small;"
                h2.append(h2_div)
                
            if not all_unique_quals and not missing_all_players:
                raw_quals = player_data["stat_values"]["Raw Quals"]
                if raw_quals and raw_quals != "Query: ":
                    match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
                    while match:
                        raw_quals = raw_quals.replace(match.group(0), match.group(1), 1)
                        match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
                        
                    h2_div = soup.new_tag("div")
                    h2_div.string = raw_quals
                    h2_div["style"] = "font-size: x-small;"
                    h2.append(h2_div)
            current_div.append(h2)
            title_div_tag.append(current_div)

        if all_unique_quals and player_datas[player_index]["stat_values"]["Raw Quals"] != "Query: ":
            h2 = soup.new_tag("h2")
            raw_quals = player_datas[player_index]["stat_values"]["Raw Quals"]
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
            while match:
                raw_quals = raw_quals.replace(match.group(0), match.group(1), 1)
                match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+^]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
            border_div = soup.new_tag("div")
            border_div["style"] = "border: dashed; border-width: 1px 0px 0px 0px; width: 160px; margin: auto; margin-top: 2px;"
            h2.append(border_div)
            h2_div = soup.new_tag("div")
            h2_div.string = raw_quals
            h2_div["style"] = "font-size: large;"
            h2.append(h2_div)
            title_div_tag.append(h2)

        body_div.append(title_div_tag)

        for table in html_info["tables"]:
            div_tag = soup.new_tag("div")
            table_tag = soup.new_tag("table")
            caption_tag = soup.new_tag("caption")
            t_head_tag = soup.new_tag("thead")
            t_body_tag = soup.new_tag("tbody")

            caption_tag.string = table["title"]

            header_row = soup.new_tag("tr")
            for header in table["headers"]:
                th_tag = soup.new_tag("th")
                th_tag.string = header
                header_row.append(th_tag)
            t_head_tag.append(header_row)

            for index, row in enumerate(table["rows"]):
                column_row = soup.new_tag("tr")
                for column in row:
                    column_tag = soup.new_tag("td")
                    column, highest = re.subn(r"(?<!\\)\*{2}", "", column)
                    column = column.replace("\\*", "*")
                    if highest:
                        bold_tag = soup.new_tag("b")
                        bold_tag.string = column
                        column_tag.append(bold_tag)
                        column_tag["style"] = "color : green;"
                    else:
                        column_tag.string = column
                        column_tag["style"] = ""

                    if index % 2 == 0:
                        column_tag["style"] += " background-color: #EEEEEE;"
                    else:
                        column_tag["style"] += " background-color: #FFFFFF;"

                    column_row.append(column_tag)
                t_body_tag.append(column_row)

            table_tag.append(caption_tag)
            table_tag.append(t_head_tag)
            table_tag.append(t_body_tag)
            div_tag.append(table_tag)
            tables_div_tag.append(div_tag)

        body_div.append(tables_div_tag)

        info_div = soup.new_tag("div")
        stats_last_updated_div = soup.new_tag("div")
        comment_div = soup.new_tag("div")

        tz = pytz.timezone("US/Eastern")
        current_date = datetime.datetime.now(tz)

        stats_updated_div_1 = soup.new_tag("div")
        stats_updated_div_2 = soup.new_tag("div")
        stats_updated_div_1.string = "Generated: " + current_date.strftime("%b %d %Y, %I:%M%p %Z")
        if last_updated:
            stats_updated_div_2.string = "Stats last updated: " + last_updated.strftime("%b %d %Y, %I:%M%p %Z")
            stats_last_updated_div.append(stats_updated_div_1)
            stats_last_updated_div.append(stats_updated_div_2)
        else:
            stats_updated_div_2.string = "h"
            stats_updated_div_2["style"] = "color: white;"
            stats_last_updated_div.append(stats_updated_div_2)
            stats_last_updated_div.append(stats_updated_div_1)
        stats_last_updated_div["style"] = "float: left; width: 30%;"
        info_div.append(stats_last_updated_div)
        comment_div_1 = soup.new_tag("div")
        comment_div_2 = soup.new_tag("div")
        comment_div_1.string = "N/A indicates stat was not tracked at all during the time frame, * indicates stat was not tracked consistently throughout the entire time frame"
        if not "hide-name" in extra_stats:
            comment_div_2.string = "Generated from command: " + original_comment
        comment_div.append(comment_div_1)
        comment_div.append(comment_div_2)
        comment_div["style"] = "float: right; width: 70%; text-align: right;"
        info_div.append(comment_div)
        info_div["style"] = "padding-top: 20px; font-size: 12px;"
        body_div.append(info_div)

        body_tag.append(body_div)

        soup.append(html_tag)
        html_tag.append(head_tag)
        html_tag.append(body_tag)

        #with open(dirpath + "/out.html", "w", encoding="utf-8") as file:
            #file.write(str(soup))

        if max_comb_players > 10:
            options = {
                "quiet" : "",
                "page-width": "417",
                "page-height": "420"
            }
        else:
            options = {
                "quiet" : "",
                "page-size": "A3"
            }

        img = pdfkit.from_string(str(soup), False, options)
        img_file = io.BytesIO(img)

        the_uuid = str(uuid.uuid1())

        pdf_file_name = os.path.abspath(dirpath + "/" + the_uuid + ".pdf")
        image_file_name = os.path.abspath(dirpath + "/" + the_uuid + ".png")

        with open(pdf_file_name, "wb") as temp_pdf:
            temp_pdf.write(img_file.getbuffer())
        
        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting mupdf conversion")

        subprocess.check_output("/opt/mupdf/bin/mutool convert -O resolution=600 -o " + image_file_name + " " + temp_pdf.name, stderr=subprocess.STDOUT, shell=True)

        image_file_name_split = os.path.splitext(image_file_name)
        comb_image_file_name = image_file_name_split[0] + "*" + image_file_name_split[1]
    
        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting imagemagick conversion")

        subprocess.check_output("convert -trim -append -bordercolor White -border 30x30 " + comb_image_file_name + " " + image_file_name, stderr=subprocess.STDOUT, shell=True)

        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting imgur upload")

        with open(image_file_name, "rb") as image_file:
            data = {
                "image" : base64.standard_b64encode(image_file.read()),
                "title" : comment_id
            }
            request = urllib.request.Request(url=imgur_upload_url, data=urllib.parse.urlencode(data).encode("utf-8"), headers=imgur_headers)
            return url_request_json(request, timeout=30)["data"]["link"]
    finally:
        #logger.info("#" + str(threading.get_ident()) + "# " + dirpath)
        shutil.rmtree(dirpath)
    
def parse_flag(flag):
    if flag:
        link = flag["link"]
        flag_class = flag["flag_class"]
        request = urllib.request.Request(link, headers=request_headers)
        css = url_request_bytes(request).decode("UTF-8")
        stylesheet = tinycss.make_parser().parse_stylesheet(css)
        for rule in stylesheet.rules:
            if isinstance(rule, tinycss.css21.RuleSet):
                for selector in rule.selector:
                    if isinstance(selector, tinycss.token_data.Token):
                        if str(selector.value) == flag_class:
                            if rule.declarations and rule.declarations[0] and rule.declarations[0].name == "background-image":
                                return rule.declarations[0].value[0].value
    return None

def handle_table_data(player_data, player_type, over_header, header, highest_vals, lowest_vals, index, has_season_stats, has_playoffs, has_non_playoffs, has_toi_stats, for_reddit, extra_stats):
    if "hide-table-" + over_header.lower() in extra_stats:
        return None
    if over_header.startswith("5v5") and "hide-table-5v5" in extra_stats:
        return None
    if "hide-stat-" + header.lower() in extra_stats:
        return None
    if "display-value" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["display-value"]:
        if "hide-stat-" +headers[player_type["da_type"]["type"]][header]["display-value"].lower() in extra_stats:
            return None
    override_show = False
    if "show-stat-" + header.lower() in extra_stats:
        override_show = True
    if "display-value" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["display-value"]:
        if "show-stat-" + headers[player_type["da_type"]["type"]][header]["display-value"].lower() in extra_stats:
            override_show = True
    if header in ("TmW", "TmL", "TmTtlL", "TmT", "TmOTL", "TmPTS", "TmPTS%", "TmW/L%", "TmROW", "TmROL", "TmROW/L%") and "record" in extra_stats:
        if header == "TmPTS" or header == "TmPTS%" or header == "TmROW" or header == "TmROL" or header == "TmROW/L%":
            if has_non_playoffs and not has_playoffs:
                override_show = True
        elif header == "TmW/L%":
            if has_playoffs:
                override_show = True
        elif header == "TmOTL":
            if not has_playoffs:
                override_show = True
        elif header == "TmL":
            if not has_playoffs:
                override_show = True
        elif header == "TmTtlL":
            if has_playoffs:
                override_show = True
        else:   
            override_show = True
    if header in ("TmG", "OppG", "TtlG", "GDiff", "TmG/GP", "OppG/GP", "TtlG/GP", "GDiff/GP") and "score" in extra_stats:
        override_show = True
    if ("FirstStar" in header or "SecondStar" in header or "ThirdStar" in header or "TotalStar" in header) and "star" in extra_stats:
        override_show = True
    if (header == "AdjGNoSeas" or header == "AdjANoSeas" or header == "AdjPNoSeas" or header == "AdjG/GP" or header == "AdjA/GP" or header == "AdjP/GP" or header == "AdjG/60M" or header == "AdjA/60M" or header == "AdjP/60M") and "adjusted" in extra_stats:
        override_show = True
    if header in ("PIM/GP", "PEN/GP", "A1/GP", "EVA1/GP", "GA/GP", "SA/GP", "SV/GP") and not has_toi_stats:
        override_show = True
    if "Shot On" in extra_stats and ("EVG" in header or "PPG" in header or "SHG" in header):
        override_show = True
    if "Assisted On" in extra_stats and ("A1" in header or "EVA" in header or "PPA" in header or "SHA" in header):
        override_show = True
    if "Faceoff Against" in extra_stats and "FO" in header:
        override_show = True
    if "Points On" in extra_stats and ("P1" in header or "EVP" in header or "PPP" in header or "SHP" in header):
        override_show = True
    if "scoring-stats" in extra_stats and ("EVG" in header or "PPG" in header or "SHG" in header or "A1" in header or "EVA" in header or "PPA" in header or "SHA" in header or "P1" in header or "EVP" in header or "PPP" in header or "SHP" in header):
        override_show = True
    if "Assisted By" in extra_stats:
        override_show = True
    if "Hit On" in extra_stats and header in ("HIT/GP"):
        override_show = True
    if "Block On" in extra_stats and header in ("BLK/GP"):
        override_show = True
    if "current-stats" in extra_stats or "current-stats-zone" in extra_stats:
        if header in ("1stG", "Post/Bar", "Post/60M", "TK", "GV", "TK/GV", "TK/60M", "GV/60M", "GF/60M", "GA/60M", "GF%", "CF/60M", "CA/60M", "CFPer", "FF/60M", "FA/60M", "FFPer", "SF/60M", "SA/60M", "SFPer", "OZ%", "oiSPer", "oiSVPer", "PDO", "OZFO%", "DZFO%"):
            override_show = True
        if "TSA" in header or header == "SThr%" or header == "TS%" or header == "TOI/GP":
            override_show = True
    if "toi" in extra_stats and "TOI" in header:
        override_show = True

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1
    
    if seasons_leading and header in div_id_to_stat[player_type["da_type"]["type"]].values():
        override_show = True

    has_any_xg = False
    missing_any_xg = False
    if player_type["da_type"]["type"] == "Skater":
        if "all_rows" in player_data["stat_values"]:
            for row in player_data["stat_values"]["all_rows"]:
                if "xGFM" in row and row["xGFM"]:
                    has_any_xg = True
                else:
                    missing_any_xg = True

    if override_show or ("display" not in headers[player_type["da_type"]["type"]][header] or headers[player_type["da_type"]["type"]][header]["display"]):
        og_value = player_data["stat_values"][header] if header in player_data["stat_values"] else 0.0
        value = og_value
        
        if "type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Awards/Honors" and player_data["stat_values"]["is_playoffs"] == "Only" and not (header.startswith("Cup") or header.startswith("Smythe") or header.startswith("Seasons") or header.startswith("Player") or header.startswith("GP") or header == "GS" or header.startswith("GS/") or header.startswith("GS_") or header == "TOI/Yr"):
            if has_non_playoffs:
                return "N/A"
            else:
                return None
        
        if "type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Awards/Honors" and player_data["is_only_sc"] and header.startswith("Smythe"):
            return "N/A"

        if player_type["da_type"]["type"] == "Skater":
            if "type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Advanced" and ("xG" in header):
                if not (has_season_stats and has_non_playoffs) or not has_any_xg:
                    return "N/A"
        else:
            if "type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Advanced" and (header.startswith("sc") or header.startswith("HDsc") or "xG" in header or "xEV" in header or header == "GAPer60" or "Ax" in header):
                if not (has_season_stats and has_non_playoffs):
                    return "N/A"
        
        if (header == "L" or header == "T" or header == "OTL" or header == "ROW" or header == "ROL" or header == "ROW/L%" or header == "PTS%" or header == "TmPTS" or header == "TmPTS%" or header == "TmROW" or header == "TmROL" or header == "TmROW/L%" or header == "TmL"):
            if not (has_non_playoffs and not has_playoffs):
                return "N/A"

        if (header == "W/L%" or header == "TmW/L%" or header == "TmTtlL" or header == "TtlL"):
            if not has_playoffs:
                return "N/A"

        if seasons_leading and header not in div_id_to_stat[player_type["da_type"]["type"]].values() and not header.startswith("Player") and not header == "Seasons":
            return "N/A"

        if is_against_header(header, extra_stats, player_type, has_toi_stats):
            return "N/A"
        
        if player_type["da_type"]["type"] == "Skater" and not has_against_quals(extra_stats):
            has_non_goalie = False
            has_some_position = False
            for player_pos in player_data["player_position"]:
                player_pos_split = player_pos.split("/")
                for sub_player_pos in player_pos_split:
                    has_some_position = True
                    if sub_player_pos != "G":
                        has_non_goalie = True
            
            if not has_some_position:
                has_non_goalie = True
        
            if not has_non_goalie:
                if header not in ("G", "A", "P", "GC", "HAT", "AdjG", "AdjA", "AdjP", "AdjGC", "PlusMinus", "PIM", "OPS", "DPS", "PS", "TOI/GP", "G/GP", "A/GP", "P/GP", "GC/GP", "G/82GP", "A/82GP", "P/82GP", "G/60M", "A/60M", "P/60M", "PIM/60M") and not header.startswith("Player") and not header.startswith("GP") and not ("type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Awards/Honors"):
                    return "N/A"
                if "PlusMinus" in header:
                    return "N/A"

        any_missing_cap = False
        for cap_hit in player_data["player_cap"]:
            if player_data["stat_values"]["Player"] != ["No Player Match!"] and not cap_hit:
                any_missing_cap = True
        
        if header.startswith("PS") or header.startswith("OPS") or header.startswith("DPS"):
            for player_pos in player_data["player_position"]:
                has_goalie = False
                has_defense = False
                has_forward = False
                player_pos_split = player_pos.split("/")
                for sub_player_pos in player_pos_split:
                    if sub_player_pos == "G":
                        has_goalie = True
                    elif sub_player_pos == "D" or sub_player_pos == "LHD" or sub_player_pos == "RHD":
                        has_defense = True
                    else:
                        has_forward = True
                    
                if (has_goalie and (has_defense or has_forward)) or (has_defense and (has_goalie or has_forward)) or (has_forward and (has_defense or has_goalie)):
                    return "N/A"
        
        if "Selke" in header or "Norris" in header:
            has_defense = False
            has_forward = False
            for player_pos in player_data["player_position"]:
                player_pos_split = player_pos.split("/")
                for sub_player_pos in player_pos_split:
                    if sub_player_pos == "D" or sub_player_pos == "LHD" or sub_player_pos == "RHD":
                        has_defense = True
                    elif sub_player_pos != "G":
                        has_forward = True
                    
            if "Norris" in header:
                if not has_defense:
                    return "N/A"
            elif "Selke" in header:
                if not has_forward:
                    return "N/A"

        if header.startswith("Player"):
            players = value
            value = ""
            first = True
            for index, player in enumerate(players):
                if not first:
                    value += " + "
                else:
                    first = False

                if len(players) > 1:
                    if player != "No Player Match!":
                        parsed_name = create_human_name(player)
                        player = parsed_name.first

                if for_reddit and player_data["ids"]:
                    value += create_player_url_string(player, player_data["ids"][index], extra_stats)
                else:
                    value += player
        else:
            has_valid_stat = False
            if "all_rows" in player_data["stat_values"]:
                for row in player_data["stat_values"]["all_rows"]:
                    row["YearStart"] = [row["Year"]]
                    row["DateStart"] = [row["Date"]]
                    row["YearEnd"] = [row["Year"]]
                    row["DateEnd"] = [row["Date"]]
                    if row["is_playoffs"]:
                        row["is_playoffs"] = "Only"
                    else:
                        row["is_playoffs"] = None

                    if not is_invalid_stat(header, player_type, row, False, player_data):
                        has_valid_stat = True
                        break
            if not has_valid_stat:
                return "N/A"

            if isinstance(value, numbers.Number):
                if "round" in headers[player_type["da_type"]["type"]][header] and not seasons_leading:
                    round_val = headers[player_type["da_type"]["type"]][header]["round"]
                    if round_val == "percent":
                        value = ("{:.2f}").format(round_value(100 * value, 2)) + "%"
                    elif round_val == "dollar":
                        value = round_value(value / 1000000, 2)
                        value = ("{:." + str(2) + "f}").format(value)
                        value = "$" + value + "m"
                    elif round_val == "time":
                        is_minus = False
                        if value < 0:
                            is_minus = True
                            value *= -1

                        minutes, seconds = divmod(round_value(value), 60)
                        value = ("{:02d}").format(minutes) + ":" + ("{:02d}").format(seconds)

                        if is_minus:
                            value = "-" + value
                    else:
                        value = round_value(value, round_val)
                        value = ("{:." + str(round_val) + "f}").format(value)
                else:
                    value = round_value(value)
            elif header == "TmRec":
                rec_split = value.split(":")
                value = str(round_value(float(rec_split[0]))) + ":" + str(round_value(float(rec_split[1]))) + ":" + str(round_value(float(rec_split[2])))
            value = str(value) 
            
            if header.startswith("GP"):
                if player_data["stat_values"]["any_missing_games"] or is_invalid_stat(header, player_type, player_data["stat_values"], True, player_data):
                    value += "*"
            elif "TOI" in header or header == "GP_5v5":
                if player_data["stat_values"]["any_missing_toi"] or is_invalid_stat(header, player_type, player_data["stat_values"], True, player_data):
                    value += "*"
            elif header == "CurrentCap$":
                if not og_value:
                    return "N/A"

                if any_missing_cap:
                    value += "*"
            elif player_type["da_type"]["type"] == "Skater" and "type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Advanced" and header in ("EVxGF/60M", "EVxGA/60M", "EVxGF%"):
                if missing_any_xg:
                    value += "*"
            elif is_invalid_stat(header, player_type, player_data["stat_values"], True, player_data):
                value += "*"

            if header in highest_vals and index in highest_vals[header]["players"] and not (header in lowest_vals and index in lowest_vals[header]["players"]):
                value = "**" + value + "**"
                
        return value

def has_against_quals(extra_stats):
    return "Shot On" in extra_stats or "Assisted On" in extra_stats or "Points On" in extra_stats or "Assisted By" in extra_stats or "Hit On" in extra_stats or "Block On" in extra_stats or "Penalty On" in extra_stats or "Faceoff Against" in extra_stats or "Fight Against" in extra_stats or "current-stats" in extra_stats or "current-stats-zone" in extra_stats or "shootout" in extra_stats or "penalty-shot" in extra_stats or "scoring-stats" in extra_stats

def has_against_quals_no_so(extra_stats):
    return "Shot On" in extra_stats or "Assisted On" in extra_stats or "Points On" in extra_stats or "Assisted By" in extra_stats or "Hit On" in extra_stats or "Block On" in extra_stats or "Penalty On" in extra_stats or "Faceoff Against" in extra_stats or "Fight Against" in extra_stats or "current-stats" in extra_stats or "current-stats-zone" in extra_stats or "scoring-stats" in extra_stats

def is_against_header(header, extra_stats, player_type, has_toi_stats):
    if not has_against_quals(extra_stats):
        return False

    if header.startswith("Player"):
        return False
    
    if "shootout" in extra_stats or "penalty-shot" in extra_stats:
        if player_type["da_type"]["type"] == "Skater":
            if "shootout" in extra_stats:
                return header not in ("G", "S", "S%", "GWG")
            else:
                return header not in ("G", "S", "S%")
        else:
            if "shootout" in extra_stats:
                return header not in ("GP", "W", "L", "PTS%", "GA", "SV", "SA", "SV%")
            else:
                return header not in ("GP", "GA", "SV", "SA", "SV%")

    if "current-stats-zone" in extra_stats and ("/60M" in header or "TOI" in header):
        return True

    if "current-stats-no-game" in extra_stats and "GP" in header:
        return True

    if "current-stats" in extra_stats and ("/GP" in header or "/82GP" in header) and "TOI" not in header and has_toi_stats:
        if "show-stat-" + header.lower() not in extra_stats:
            return True

    if header.startswith("GP") and not header.startswith("GP_TOI"):
        return False

    if header in ("GS", "GS_Sit"):
        return True

    if not "shootout" in extra_stats and not "penalty-shot" in extra_stats and not "current-stats-zone" in extra_stats:
        if player_type["da_type"]["type"] == "Skater":
            if header == "TOI/GP":
                return False
        else:
            if header == "TOI":
                return False
        

    if "Shot On" in extra_stats:
        return header not in ("G", "G_5v5", "OTG", "EVTOI",  "PPTOI",  "SHTOI", "TOI_5v5", "EVTOI/GP",  "PPTOI/GP",  "SHTOI/GP", "TOI/GP_5v5", "GWG", "1stG", "HAT", "EVG", "AdjG", "PPG", "SHG", "S", "S%", "S_5v5", "S%_5v5", "G/GP", "EVG/GP", "PPG/GP", "SHG/GP", "S/GP", "G/60M", "EVG/60M", "PPG/60M", "SHG/60M", "S/60M",  "G/60M_5v5", "S/60M_5v5")
        #return header not in ("G", "G_5v5", "OTG", "TOI/GP_5v5", "GWG", "1stG", "HAT", "EVG", "AdjG", "PPG", "SHG", "S", "S%", "S_5v5", "S%_5v5", "G/GP", "EVG/GP", "PPG/GP", "SHG/GP", "S/GP", "G/60M", "S/60M",  "G/60M_5v5", "S/60M_5v5")
    if "Assisted By" in extra_stats:
        return header not in ("G", "G_5v5", "OTG", "EVTOI",  "PPTOI",  "SHTOI", "TOI_5v5", "EVTOI/GP",  "PPTOI/GP",  "SHTOI/GP", "TOI/GP_5v5", "GWG", "1stG", "HAT", "ENG", "EVG", "AdjG", "PPG", "SHG", "G/GP", "EVG/GP", "PPG/GP", "SHG/GP", "G/GP", "G/60M", "EVG/60M", "PPG/60M", "SHG/60M", "G/60M_5v5")
        #return header not in ("G", "G_5v5", "OTG", "TOI/GP_5v5", "GWG", "1stG", "HAT", "ENG", "EVG", "AdjG", "PPG", "SHG", "G/GP", "EVG/GP", "PPG/GP", "SHG/GP", "G/GP", "G/60M", "G/60M_5v5")
    if "Assisted On" in extra_stats:
        return header not in ("A", "A/GP", "A/60M", "EVTOI",  "PPTOI",  "SHTOI", "TOI_5v5", "EVTOI/GP",  "PPTOI/GP",  "SHTOI/GP", "TOI/GP_5v5", "ENA", "A1", "A1%", "A1/GP", "A1/60M", "A_5v5", "A/60M_5v5", "A1_5v5", "A1%_5v5", "A1/60M_5v5", "AdjA", "EVA", "EVA/GP", "EVA/60M", "EVA1", "EVA1/60M", "EVA1%", "EVA1/GP", "SHA", "SHA/GP", "SHA/60M", "SHA1", "SHA1/60M", "SHA1%", "SHA1/GP", "PPA", "PPA/GP", "PPA/60M", "PPA1", "PPA1/60M", "PPA1%", "PPA1/GP")
        #return header not in ("A", "A/GP", "A/60M", "TOI/GP_5v5", "A1", "A1%", "A1/GP", "A1/60M", "A_5v5", "A/60M_5v5", "A1_5v5", "A1%_5v5", "A1/60M_5v5", "AdjA", "EVA", "EVA/GP", "EVA1", "EVA1%", "EVA1/GP", "SHA", "SHA/GP", "SHA1", "SHA1%", "SHA1/GP", "PPA", "PPA/GP", "PPA1", "PPA1%", "PPA1/GP")
    if "Points On" in extra_stats:
        #return header not in ("P", "P/GP", "P/60M", "TOI/GP_5v5", "P_5v5", "P/60M_5v5", "AdjP", "EVP", "EVP/GP", "EVP/60M", "SHP", "SHP/GP", "PPP", "PPP/GP")
        return header not in ("P", "P/GP", "P/60M", "EVTOI",  "PPTOI",  "SHTOI", "TOI_5v5", "EVTOI/GP",  "PPTOI/GP",  "SHTOI/GP", "TOI/GP_5v5", "P_5v5", "ENP", "P/60M_5v5", "AdjP", "EVP", "EVP/GP", "EVP/60M", "SHP", "SHP/GP", "SHP/60M", "PPP", "PPP/GP", "PPP/60M")
    if "scoring-stats" in extra_stats:
        #return header not in ("G", "G_5v5", "OTG", "TOI/GP_5v5","GWG", "EVG", "AdjG", "PPG", "SHG", "G/GP", "EVG/GP", "PPG/GP", "SHG/GP", "G/60M",  "G/60M_5v5", "A", "A/GP", "A/60M", "A1", "A1%", "A1/GP", "A1/60M", "A_5v5", "A/60M_5v5", "A1_5v5", "A1%_5v5", "A1/60M_5v5", "AdjA", "EVA", "EVA/GP", "EVA1", "EVA1%", "EVA1/GP", "SHA", "SHA/GP", "SHA1", "SHA1%", "SHA1/GP", "PPA", "PPA/GP", "PPA1", "PPA1%", "PPA1/GP", "P", "P/GP", "P/60M", "P_5v5", "P/60M_5v5", "AdjP", "EVP", "EVP/GP", "SHP", "SHP/GP", "PPP", "PPP/GP")
        return header not in ("G", "G_5v5", "OTG", "EVTOI",  "PPTOI",  "SHTOI", "TOI_5v5", "EVTOI/GP",  "PPTOI/GP",  "SHTOI/GP", "TOI/GP_5v5","GWG", "1stG", "HAT", "ENG", "ENA", "ENP", "EVG", "AdjG", "PPG", "SHG", "G/GP", "EVG/GP", "EVG/60M", "PPG/GP", "PPG/60M", "G/60M",  "G/60M_5v5", "A", "A/GP", "A/60M", "A1", "A1%", "A1/GP", "A1/60M", "A_5v5", "A/60M_5v5", "A1_5v5", "A1%_5v5", "A1/60M_5v5", "AdjA", "EVA", "SHA", "PPA", "P", "P/GP", "P/60M", "P1", "P1%", "P1/GP", "P1/60M", "P_5v5", "P/60M_5v5", "P1_5v5", "P1%_5v5", "P1/60M_5v5", "AdjP", "EVP", "EVP/GP", "EVP/60M", "SHP", "PPP", "PPP/GP", "PPP/60M", "EVA1%", "EVP1%", "SHA1%", "SHP1%", "PPA1%", "PPP1%", "EVA1", "EVP1", "SHA1", "SHP1", "PPA1", "PPP1", "SHG/GP", "SHP/GP", "SHP/60M", "SHG/60M")
    if "Hit On" in extra_stats:
        return header not in ("HIT", "HIT/GP", "HIT/60M")
    if "Block On" in extra_stats:
        return header not in ("BLK", "BLK/GP", "BLK/60M")
    if "Penalty On" in extra_stats:
        if header in ("PIM", "PEN", "PIM/GP", "PEN/GP", "PEN/60M"):
            return False
        else:
            return "type" in headers[player_type["da_type"]["type"]][header] and headers[player_type["da_type"]["type"]][header]["type"] == "Penalty"
    if "Faceoff Against" in extra_stats:
        return header not in ("FO", "FOW", "FO%", "OZFO", "OZFOW", "OZFO%", "DZFO", "DZFOW", "DZFO%", "FO/GP", "FOW/GP", "FO/60M", "FOW/60M")
    if "Fight Against" in extra_stats:
        return header not in ("Fight", "Fight/GP", "Fight/60M")
    if "current-stats" in extra_stats or "current-stats-zone" in extra_stats:
        if player_type["da_type"]["type"] == "Skater":
            #if "EVTOI" in header or "PPTOI" in header or "SHTOI" in header:
                #return True
            #if "/60M" in header and ("EV" in header or "PP" in header or "SH" in header):
                #return True
            if "type" in headers[player_type["da_type"]["type"]][header] and (headers[player_type["da_type"]["type"]][header]["type"] == "Awards/Honors"):
                return True
            if "type" in headers[player_type["da_type"]["type"]][header] and (headers[player_type["da_type"]["type"]][header]["type"] == "Advanced") and ("S%" in header or "PEN" in header or "PenDrawn" in header or "Post" in header):
                if "show-stat-" + header.lower() not in extra_stats and ("penalties" not in extra_stats or not ("PEN" in header or "PenDrawn" in header)) and ("shot" not in extra_stats or not ("S%" in header)):
                    return True
            if "Adj" in header:
                if "show-stat-" + header.lower() not in extra_stats:
                    return True
        else:
            if header == "TOI/GP":
                return False
            if "type" in headers[player_type["da_type"]["type"]][header] and (headers[player_type["da_type"]["type"]][header]["type"] == "Awards/Honors"):
                return True
            if header.startswith("W") or header.startswith("L") or header.startswith("T") or header.startswith("OTL") or header.startswith("RO") or "PTS" in header or "SO" in header or "QS" in header or "RBS" in header or "CG" in header or header == "GS":
                return True
            #if header == "SVEvenStrength" or header == "SVPowerPlay" or header == "SVShorthanded":
                #return True
        return False

def is_invalid_stat(stat, player_type, data, count_inconsistent, player_data):
    if "YearStart" in data and stat in headers[player_type["da_type"]["type"]] and data["YearStart"]:
        if player_type["da_type"]["type"] == "Skater":
            header_shift_stats = ["Shft", "Shft/GP", "TOI/Shft"]
            report_2_stats = ["PenDrawn", "NetPEN", "Post/Bar", "CF", "CA", "CFPer", "CF/60M", "CA/60M", "FF", "FA", "FFPer", "SF/60M", "SA/60M", "SFPer", "CFRelPer", "FFRelPer", "FF/60M", "FA/60M", "FRel/60M", "CRel/60M", "OZ%", "oiSPer", "oiSVPer", "PDO", "TSA", "TSM", "TSB", "TSA/GP", "TSB/GP", "TSM/GP", "TS%", "SThr%"]
            report_3_stats = ["TK", "GV", "TK/GV", "HIT", "BLK"]
            strength_stats = ["PEN", "PEN/GP", "PIM", "PIM/GP", "OZFO%", "DZFO%", "FOW/GP", "FO/GP", "FOW", "FO", "FO%"]
            shot_on_stats = ["S", "S%", "S/GP"]
            report_stats = ["OZFO%", "DZFO%", "FOW/GP", "FO/GP", "FOW", "FO", "FO%", "S", "S%", "S/GP"]
            game_report_stats = ["PlusMinus", "GF", "EVGF", "GA", "EVGA", "IGP", "EVIGP", "IPP", "EVIPP", "GF%", "EVGF%", "GF/60M", "GA/60M"]
            header_indv_shift_stats = ["CF", "CA", "CFPer", "CF/60M", "CA/60M", "FF", "FA", "FFPer", "SF/60M", "SA/60M", "SFPer", "FF/60M", "FA/60M", "FRel/60M", "CRel/60M", "CFRelPer", "FFRelPer", "oiSPer", "oiSVPer", "PDO", "OZ%", "OZFO%", "DZFO%", "TSA", "TSM", "TSB", "TSA/GP", "TSA/60M", "TSB/GP", "TSB/60M", "TSM/GP", "TSM/60M", "TS%", "SThr%"]
        else:
            header_shift_stats = []
            report_2_stats = ["SH", "SA", "SV", "EVSH", "PPSH", "SHSH", "SVEvenStrength", "SVPowerPlay", "SVShorthanded", "SV%", "GA%-", "SH/60M", "SV/60M", "SA/60M", "SH/GP", "SV/GP", "SA/GP"]
            report_3_stats = []
            strength_stats = []
            report_stats = []
            shot_on_stats = []
            game_report_stats = ["GF", "GFA", "GAA", "AdjGAA", "GA/60M", "GF/60M"]
            header_indv_shift_stats = []

        for index, date_start in enumerate(data["DateStart"]):
            if player_data["stat_values"]["is_shift_data"]:
                if not player_data["stat_values"]["is_indv_shift_data"]:
                    if stat in header_indv_shift_stats:
                        return current_season

                if stat in header_shift_stats or "TOI" in stat or "/60M" in stat or "GAA" in stat:
                    if data["YearStart"][index] < 2010:
                        return 2010
                if player_data["stat_values"]["is_strength_data"] and stat in strength_stats:
                    if data["YearStart"][index] < 2007:
                        return 2007
                if player_data["stat_values"]["is_shot_on_data"] and stat in shot_on_stats:
                    if data["YearStart"][index] < 2007:
                        return 2007
                if player_data["stat_values"]["is_on_ice_data"] and (stat in report_3_stats or stat in strength_stats or stat in shot_on_stats):
                    if data["YearStart"][index] < 2007:
                        return 2007
                if "5v5" in stat:
                    raw_stat = stat[:-4]
                    if raw_stat in report_2_stats or raw_stat in report_3_stats or raw_stat in strength_stats or raw_stat in shot_on_stats:
                        if data["YearStart"][index] < 2007:
                            return 2007
                    else:
                        if data["YearStart"][index] < 2000:
                            return 2000
                if stat in report_2_stats:
                    if data["YearStart"][index] < 2007:
                        return 2007
                if stat in report_3_stats:
                    if data["YearStart"][index] < 2005:
                        return 2005
                if stat in report_stats:
                    if data["YearStart"][index] < 2003:
                        return 2003
                if stat in game_report_stats:
                    if data["YearStart"][index] < 2000:
                        return 2000
                
                return None
            
            if player_data["stat_values"]["is_leading_data"]:
                if stat in ("GF", "GA", "PPGF", "PPGA"):
                    if data["YearStart"][index] < 1959:
                        return 1959
                    else:
                        return None

            if player_type["da_type"]["type"] == "Skater" and not player_data["stat_values"]["is_indv_shift_data"]:
                has_non_goalie = False
                has_some_position = False
                for player_pos in player_data["player_position"]:
                    player_pos_split = player_pos.split("/")
                    for sub_player_pos in player_pos_split:
                        has_some_position = True
                        if sub_player_pos != "G":
                            has_non_goalie = True
                
                if not has_some_position:
                    has_non_goalie = True
                
                if not has_non_goalie:
                    if stat == "PlusMinus":
                        if data["YearStart"][index] < 2009:
                            return 2009
                        else:
                            return None
                    elif "TOI" in stat or "60M" in stat:
                        if data["YearStart"][index] < 1955:
                            return 1955
                        else:
                            return None
            
            if stat == "T" or stat == "TmT":
                if data["YearEnd"][index] > 2003:
                    return 2003
                else:
                    return None
        
            if stat == "OTG":
                if data["YearEnd"][index] > 1942 and data["YearStart"][index] < 1983:
                    return 1942

        if "valid_since" in headers[player_type["da_type"]["type"]][stat]:
            for index, date_start in enumerate(data["DateStart"]):
                if isinstance(date_start, int) and (not data["is_playoffs"] or data["is_playoffs"] == "No"):
                    if "season" in headers[player_type["da_type"]["type"]][stat]["valid_since"] and data["YearStart"][index] < headers[player_type["da_type"]["type"]][stat]["valid_since"]["season"]:
                        return headers[player_type["da_type"]["type"]][stat]["valid_since"]["season"]
                    elif count_inconsistent and "inconsistent" in headers[player_type["da_type"]["type"]][stat]["valid_since"] and data["YearStart"][index] < headers[player_type["da_type"]["type"]][stat]["valid_since"]["inconsistent"]:
                        return headers[player_type["da_type"]["type"]][stat]["valid_since"]["inconsistent"]
                else:
                    if "game" in headers[player_type["da_type"]["type"]][stat]["valid_since"] and data["YearStart"][index] < headers[player_type["da_type"]["type"]][stat]["valid_since"]["game"] and (not data["is_playoffs"] or data["is_playoffs"] == "No"):
                        return headers[player_type["da_type"]["type"]][stat]["valid_since"]["game"]
                    elif "game-np" in headers[player_type["da_type"]["type"]][stat]["valid_since"] and data["YearStart"][index] < headers[player_type["da_type"]["type"]][stat]["valid_since"]["game-np"]:
                        if data["is_playoffs"] == "Include":
                            if count_inconsistent:
                                return headers[player_type["da_type"]["type"]][stat]["valid_since"]["game-np"]
                        elif data["is_playoffs"] != "Only":
                            return headers[player_type["da_type"]["type"]][stat]["valid_since"]["game-np"]
                    elif "game" in headers[player_type["da_type"]["type"]][stat]["valid_since"] and data["YearStart"][index] < headers[player_type["da_type"]["type"]][stat]["valid_since"]["game"] and ("game-np" not in headers[player_type["da_type"]["type"]][stat]["valid_since"] or data["YearStart"][index] < headers[player_type["da_type"]["type"]][stat]["valid_since"]["game-np"]):
                        return headers[player_type["da_type"]["type"]][stat]["valid_since"]["game"]
                    elif count_inconsistent and "inconsistent-game" in headers[player_type["da_type"]["type"]][stat]["valid_since"] and data["YearStart"][index] < headers[player_type["da_type"]["type"]][stat]["valid_since"]["inconsistent-game"]:
                        return headers[player_type["da_type"]["type"]][stat]["valid_since"]["inconsistent-game"]

    return None

def ordinal_to_number(ordinal):
    if ordinal:
        is_exclusive = ordinal.endswith("excl")
        if is_exclusive:
            ordinal = ordinal[:-4]
            is_start_val = True
        else:
            is_exclusive = ordinal.startswith("excl")
            if is_exclusive:
                ordinal = ordinal[4:]
                is_start_val = False

        is_inclusive = ordinal.endswith("incl")
        if is_inclusive:
            ordinal = ordinal[:-4]
            is_start_val = True
        else:
            is_inclusive = ordinal.startswith("incl")
            if is_inclusive:
                ordinal = ordinal[4:]
                is_start_val = False

        is_percent = "%" in ordinal
        if is_percent:
            ordinal = ordinal.replace('%', '')
        ordinal = ordinal.replace('*', '')
        
        try:
            ordinal = float(numeral.roman2int(ordinal))
        except Exception:
            try:
                ordinal = float(ordinal)
            except ValueError:
                if ordinal == "min":
                    ordinal = -float('inf')
                elif ordinal == "max" or ordinal == "today" or ordinal == "present" or ordinal == "now":
                    ordinal = float('inf')
                else:
                    if ordinal.endswith("no"):
                        ordinal = ordinal.replace("no", "zero")
                    elif ordinal.endswith("first"):
                        ordinal = ordinal.replace("first", "one")
                    elif ordinal.endswith("second"):
                        ordinal = ordinal.replace("second", "two")
                    elif ordinal.endswith("third"):
                        ordinal = ordinal.replace("third", "three")
                    elif ordinal.endswith("fifth"):
                        ordinal = ordinal.replace("fifth", "five")
                    elif ordinal.endswith("eighth"):
                        ordinal = ordinal.replace("eighth", "eight")
                    elif ordinal.endswith("ninth"):
                        ordinal = ordinal.replace("ninth", "nine")
                    elif ordinal.endswith("th"):
                        ordinal = ordinal.replace("th", "")
                    elif ordinal.endswith("st"):
                        ordinal = ordinal.replace("st", "")
                    elif ordinal.endswith("nd"):
                        ordinal = ordinal.replace("nd", "")
                    elif ordinal.endswith("rd"):
                        ordinal = ordinal.replace("rd", "")

                    try:
                        ordinal = float(w2n.word_to_num(ordinal))
                    except Exception:
                        if ordinal:
                            return unescape_string(ordinal).upper()
                        else:
                            return ordinal

        if is_percent:
            ordinal = ordinal / 100
        
        if is_exclusive:
            if is_start_val:
                ordinal = numpy.nextafter(ordinal, ordinal + 1)
            else:
                ordinal = numpy.nextafter(ordinal, ordinal - 1)
        elif is_inclusive:
            if is_start_val:
                ordinal = numpy.nextafter(ordinal, ordinal - 1)
            else:
                ordinal = numpy.nextafter(ordinal, ordinal + 1)
        
        if ordinal.is_integer():
            ordinal = int(ordinal)

        return ordinal
    else:
        return ordinal

def unescape_string(escaped_string):
    if escaped_string:
        return escaped_string.replace("\\", "")
    else:
        return escaped_string

def create_human_name(human_name):
    parsed_name = HumanName(human_name)
    if not parsed_name.first and parsed_name.title:
        parsed_name.first = parsed_name.title
        parsed_name.title = ""
    if not parsed_name.last and parsed_name.suffix:
        parsed_name.last = parsed_name.suffix
        parsed_name.suffix = ""
    return parsed_name

def handle_string_year(string_year, playoffs, is_first, replace_first_year):
    if len(re.findall(r"(?<!\\)-", string_year)) == 1:
        raise ValueError
    
    string_year = string_year.replace("'", "")
    if string_year.isdigit():
        if len(string_year) == 2:
            pot_string_year = int("20" + string_year)
            if pot_string_year > datetime.datetime.now().year:
                string_year = int("19" + string_year)
            else:
                string_year = pot_string_year
        if playoffs == "Only":
            string_year =  str(int(string_year) - 1)
        if int(string_year) > current_season:
            return current_season
        return int(string_year)
    else:
        if string_year == "min":
            return datetime.date.min
        elif string_year == "max" or string_year == "today" or string_year == "present" or string_year == "now":
            return datetime.date.today()
        elif string_year == "yesterday":
            return datetime.date.today() - datetime.timedelta(days=1)
        else:
            date = dateutil.parser.parse(string_year).date()
            if is_first or replace_first_year["replace"]:
                today = datetime.date.today()
                if date > today:
                    date = date.replace(year=today.year)
                    if date > today:
                        date = date.replace(year=date.year - 1)
                    replace_first_year["replace"] = True
            return date

def round_value(value, round_val=0):
    if value == math.inf:
        return value
    decimal_val = decimal.Decimal(str(value)).quantize(
        decimal.Decimal(("{:." + str(round_val) + "f}").format(0)), 
        rounding=decimal.ROUND_HALF_UP
    )
    if round_val == 0:
        return int(decimal_val)
    else:
        return float(decimal_val)

def create_player_url_string(player, player_id, extra_stats):
    if player == "No Player Match!":
        return player
    
    if "hide-name" in extra_stats:
        return player
        
    player_url = main_page_url_format.format(player_id[0], player_id)
    return "[" + player + "](" + player_url + ")"

def format_alert_message(comment_obj, do_update=True):
    now_time = datetime.datetime.now(timezone("US/Eastern"))
    if do_update:
        comment_obj["player_count"] += 1

    percent_complete = str(round((comment_obj["player_count"] / comment_obj["total_players"]) * 100))
    if isinstance(comment_obj["comment"], Message):
        est_message = alert_message_no_update
    else:
        if not comment_obj["is_approved"]:
            return alert_message_no_approved
        else:
            est_message = alert_message + "\n\nPlayers Complete: " + str(comment_obj["player_count"]) + "/" + str(comment_obj["total_players"]) + " (" + percent_complete + "%)"
            if do_update:
                if percent_complete == "100":
                    est_message += "\n\nGenerating tables/images and making comment"
                else:
                    elapsed_time = now_time - comment_obj["start_time"]
                    player_rate = (elapsed_time) / comment_obj["player_count"]
                    est_completion_time = now_time + (player_rate * (comment_obj["total_players"] - comment_obj["player_count"]))
                    est_message += "\n\nElapsed Time: " + str(elapsed_time).split(".")[0]
                    #est_message += "\n\nEstimated Completion: " + est_completion_time.strftime("%I:%M:%S%p %Z")

                est_message += "\n\nLast Update: " + now_time.strftime("%I:%M:%S%p %Z")
    
    return est_message

def get_time_str(value, ordinal, percent=False, time=False, period=False):
    if value == float("inf"):
        if time:
            return "11PM"
        else:
            return "MAX"
    elif value == -float("inf"):
        if time:
            return "12AM"
        else:
            return "MIN"
    else:
        if percent:
            return ("{:.2f}").format(round_value(100 * value, 2)) + "%"
        else:
            if isinstance(value, float) and value.is_integer():
                value = int(value)

            if time and isinstance(value, int):
                if value == 0:
                    return "12AM"
                elif value < 12:
                    return str(value) + "AM"
                elif value == 12:
                    return str(value) + "PM"
                else:
                    return str(value - 12) + "PM"
            elif period and isinstance(value, int):
                return format_seconds_to_mmss(value)
            else:
                if ordinal and isinstance(value, int):
                    return inflect_engine.ordinal(value)
                else:
                    return str(value)

def format_seconds_to_mmss(seconds):
    minutes = seconds / 60
    seconds %= 60
    return "%02i:%02i" % (minutes, seconds)
                    
def chop_microseconds(delta):
    return delta - datetime.timedelta(microseconds=delta.microseconds)

class CustomMessageException(Exception):
    message = None
    def __init__(self, message):
        super().__init__(message)
        self.message = message

class FakeComment(object):
    def __init__(self, body, id, author, subreddit):
        self.body = body
        self.id = id
        self.author = FakeAuthor(author)
        self.subreddit = FakeSubreddit(subreddit)

class FakeAuthor(object):
    def __init__(self, name):
        self.name = name

class FakeSubreddit(object):
    def __init__(self, subreddit):
        self.display_name = subreddit

if __name__ == "__main__":
    main()
