import praw
from praw.models import Message
import re
import math
import time
import sqlite3
import traceback
import urllib.request
import urllib.parse
from bs4 import BeautifulSoup, Comment, Tag, element
from urllib.parse import urlparse, parse_qs
import dateutil.parser
import dateutil.relativedelta
import dateutil.rrule
from tzlocal import get_localzone
import datetime
from prettytable import PrettyTable
from concurrent.futures import ThreadPoolExecutor
import time
import logging
from logging.handlers import TimedRotatingFileHandler
import sys
import threading
import concurrent
import getopt
import socket
import json
import copy
from pytz import timezone
import unidecode
from html import unescape
from word2number import w2n
from nameparser import HumanName
import calendar
from num2words import num2words
import collections
import numbers
import inflect
inflect_engine = inflect.engine()
import calendar
import pdfkit
import locale
import io
import uuid
import subprocess
import os
import tempfile
import shutil
import base64
import pytz
import requests
try:
    from cairosvg import svg2png
except OSError:
    pass
import tinycss
import operator
locale.setlocale(locale.LC_ALL, "")
from convertdate import holidays
import inspect
import decimal
import numexpr
all_holidays = inspect.getmembers(holidays, inspect.isfunction)
import custom_holidays
all_custom_holidays = inspect.getmembers(custom_holidays, inspect.isfunction)
import numeral
import csv
import numpy
import lxml
import lxml.html
from lxml import etree
import cchardet
import multiprocessing
import functools
import get_constant_data
import get_team_ids
import ephem
import ssl
import cProfile
import pstats

subreddits_to_crawl = [
    "sportscomparebots",
    "baseball",
    "fantasybaseball",
    "braves",
    "clevelandindians",
    "torontobluejays",
    "astros",
    "nyyankees",
    "cubs",
    "chicubs",
    "brewers",
    "whitesox",
    "sfgiants",
    "padres",
    "reds",
    "cardinals",
    "nationals",
    "baseballcards",
    "orioles"
]

approved_subreddits = [
    "sportscomparebots"
]

blocked_users = ["mlbcomparebot", "nflcomparebot", "nhlcomparebot", "nbacomparebot"]

request_headers = {
    "User-Agent" : "MLBCompareRedditBot"
}

max_request_retries = 3
retry_failure_delay = 3
max_reddit_retries = 3

player_season_age_date = datetime.datetime(1, 6, 30)

imgur_upload_url = "https://api.imgur.com/3/upload.json"
imgur_headers = {
    "Authorization" : "Client-ID a79699457a20a4d"
}

use_threads_for_game = False
display_progress_as_edit = True
ignore_approved = True

current_season = 2022
show_title_current_season = False
season_in_progress = True

alert_message_no_approved = "Comparison received! The comment reply will be made with the comparison is finished\n\nComparisons may be slow due to recent Reddit API changes\n\n---"
alert_message = "Comparison received! Updates will be provided as players finish\n\n---"
alert_message_no_update = "Comparison received! A new message will be sent when the comparison is finished\n\n---"

all_months = [month.lower() for month in calendar.month_name[1:len(calendar.month_name)] + calendar.month_abbr[1:len(calendar.month_abbr)]]
all_months_re = r"(?:" + "|".join([month + "-?" for month in all_months]) + r")+"

all_days = [day.lower() for day in calendar.day_name[0:len(calendar.day_name)] + calendar.day_abbr[0:len(calendar.day_abbr)]]
all_days_re = r"(?:" + "|".join([day + "-?" for day in all_days]) + r")+"

string_stats = ["Tm", "TmLg", "Opponent", "OppLg"]

pitcher_overrides = [150449, 660271]

manual_country_map = {
    "republic of korea" : "south korea"
}

manual_stadium_map = {
    "yankee stadium i" : 9,
    "yankee stadium 1" : 9,
    "yankee stadium ii" : 3313,
    "yankee stadium 2" : 3313,
    "busch stadium ii" : 30,
    "busch stadium 2" : 30,
    "busch stadium iii" : 2889,
    "busch stadium 3" : 2889,
}

position_map = {
    '1': 'P',
    '2': 'C',
    '3': '1B',
    '4': '2B',
    '5': '3B',
    '6': 'SS',
    '7': 'LF',
    '8': 'CF',
    '9': 'RF',
    '10': 'OF',
    '11': 'DH',
    '12': 'PH',
    '13': 'PR'
}
position_map_reversed = {v: k for k, v in position_map.items()}

count_stats = ["Pit", "PitBall", "Chase", "PitStrike", "LkStr", "Str", "1stStr", "SwStr", "SwgStr", "CntStr", "Bal", "2StrPit"]
non_rate_stats = ["IP", "BF", "Pit", "PO", "ER", "AB", "H", "1B", "2B", "3B", "HR", "XBH", "TB", "Cycle", "SO", "GDP", "GDPO", "PA", "BB", "IBB", "HBP", "Slam", "WalkOff", "R", "RBI", "GWRBI", "SB", "CS", "TOB", "SH", "SF", "Pit", "PitBall", "Chase", "PitStrike", "LkStr", "Str", "1stStr", "SwStr", "SwgStr", "CntStr", "Bal", "2StrPit"]
non_rate_stats_lower = [non_rate_stat.lower() for non_rate_stat in non_rate_stats]

headers = {
    "Batter" : {
        "Player" : {
            "positive" : True
        },
        "DateStart" : {
            "positive" : True,
            "display" : False
        },
        "DateEnd" : {
            "positive" : True,
            "display" : False
        },
        "Tm" : {
            "positive" : True,
            "display" : False
        },
        "Opponent" : {
            "positive" : True,
            "display" : False
        },
        "TmLg" : {
            "positive" : True,
            "display" : False
        },
        "OppLg" : {
            "positive" : True,
            "display" : False
        },
        "Pos": {
            "positive" : True,
            "display" : False
        },
        "Gm" : {
            "positive" : True,
            "display" : False
        },
        "GmRev" : {
            "positive" : True,
            "display" : False
        },
        "TmGm" : {
            "positive" : True,
            "display" : False
        },
        "TmGmRev" : {
            "positive" : True,
            "display" : False
        },
        "CrGm" : {
            "positive" : True,
            "display" : False
        },
        "CrGmRev" : {
            "positive" : True,
            "display" : False
        },
        "RawCrGm" : {
            "positive" : True,
            "display" : False
        },
        "Result" : {
            "positive" : True,
            "display" : False
        },
        "Team Score" : {
            "positive" : True,
            "display" : False
        },
        "Opponent Score" : {
            "positive" : True,
            "display" : False
        },
        "SeriesTeamWins" : {
            "positive" : True,
            "display" : False
        },
        "SeriesOpponentWins" : {
            "positive" : False,
            "display" : False
        },
        "SeriesScore" : {
            "positive" : False,
            "display" : False
        },
        "Elimination" : {
            "positive" : False,
            "display" : False
        },
        "Clinching" : {
            "positive" : True,
            "display" : False
        },
        "Seasons" : {
            "positive" : True,
            "display" : False
        },
        "RegularSeasons" : {
            "positive" : True,
            "display" : False
        },
        "UniqueSeasons" : {
            "positive" : True,
            "display" : False
        },
        "CatchSeasons" : {
            "positive" : True,
            "display" : False
        },
        "WARSeasons" : {
            "positive" : True,
            "display" : False
        },
        "NonFakeSeasons" : {
            "positive" : True,
            "display" : False
        },
        "PitchSeasons" : {
            "positive" : True,
            "display" : False
        },
        "WARPitchSeasons" : {
            "positive" : True,
            "display" : False
        },
        "SlrSeasons" : {
            "positive" : True,
            "display" : False
        },
        "SlrInflSeasons" : {
            "positive" : True,
            "display" : False
        },
        "AllStarSeasons" : {
            "positive" : True,
            "display" : False
        },
        "G" : {
            "positive" : True
        },
        "CG": {
            "positive" : True,
            "display" : False
        },
        "PosG" : {
            "positive" : True,
            "display-value" : "G",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "DaysOnEarth" : {
            "positive" : True,
            "display" : False
        },
        "DaysSpan" : {
            "positive" : True,
            "display" : False
        },
        "TmW" :{
            "positive" : True,
            "display" : False
        },
        "TmL" :{
            "positive" : False,
            "display" : False
        },
        "TmT" :{
            "positive" : False,
            "display" : False
        },
        "TmRec" : {
            "positive" : True,
            "display" : False
        },
        "TmW/L%" :{
            "positive" : True,
            "round" : "percent",
            "display" : False
        },
        "TmScore" :{
            "positive" : True,
            "display" : False
        },
        "OppScore" :{
            "positive" : False,
            "display" : False
        },
        "TtlScore" :{
            "positive" : True,
            "display" : False
        },
        "ScoreDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmScore/G" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "OppScore/G" :{
            "positive" : False,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "TtlScore/G" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "ScoreDiff/G" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "TmR" :{
            "positive" : True,
            "display" : False
        },
        "OppR" :{
            "positive" : False,
            "display" : False
        },
        "TtlR" :{
            "positive" : True,
            "display" : False
        },
        "RDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmRBI" :{
            "positive" : True,
            "display" : False
        },
        "OppRBI" :{
            "positive" : False,
            "display" : False
        },
        "TtlRBI" :{
            "positive" : True,
            "display" : False
        },
        "RBIDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmH" :{
            "positive" : True,
            "display" : False
        },
        "OppH" :{
            "positive" : False,
            "display" : False
        },
        "TtlH" :{
            "positive" : True,
            "display" : False
        },
        "HDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmHR" :{
            "positive" : True,
            "display" : False
        },
        "OppHR" :{
            "positive" : False,
            "display" : False
        },
        "TtlHR" :{
            "positive" : True,
            "display" : False
        },
        "HRDiff" :{
            "positive" : True,
            "display" : False
        },
        "Ing" : {
            "positive" : True,
            "display" : False,
            "display-value" : "Inn"
        },
        "Pit" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "TtlPit" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Pit%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "PA" : {
            "positive" : True
        },
        "Pit/PA" : {
            "positive" : True,
            "display" : False,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "PA/162" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "AB": {
            "positive" : True
        },
        "EVRaw" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "EVPit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "EV" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MaxEV" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MinEV" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HardHit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "SwtSpt" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "Chase" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "PitBall" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "PitStrike" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "LARaw" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "LAPit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "LA" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MaxLA" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MinLA" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HitDistRaw" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HitDistPit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HitDist" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MaxDist" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MinDist" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MPHRaw" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MPHPit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MPH" : {
            "positive" : True,
            "display" : False,
            "display-value" : "PitMPH",
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MaxMPH" : {
            "positive" : True,
            "display" : False,
            "display-value" : "MaxPitMPH",
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MinMPH" : {
            "positive" : False,
            "display" : False,
            "display-value" : "MinPitMPH",
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "SpinRaw" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "SpinPit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "Spin" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MaxSpin" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MinSpin" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "HardHit%" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : "percent",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "SwtSpt%" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : "percent",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "Whiff%" : {
            "positive" : False,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "1stStr%" : {
            "positive" : False,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "SwStr%" : {
            "positive" : False,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Chase%" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : "percent",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "PutAway%" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : "percent",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "H": {
            "positive" : True
        },
        "H/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "1B": {
            "positive" : True
        },
        "2B": {
            "positive" : True
        },
        "2B/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "3B": {
            "positive" : True
        },
        "3B/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "HR": {
            "positive" : True
        },
        "Slam": {
            "positive" : True,
            "display" : False
        },
        "HR/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "AB/HR" : {
            "positive" : False,
            "skipzero" : True,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "XBH": {
            "positive" : True
        },
        "XBH/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "TB": {
            "positive" : True
        },
        "TB/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "Cycle" : {
            "positive" : True
        },
        "WalkOff" : {
            "positive" : True,
            "display" : False
        },
        "R": {
            "positive" : True
        },
        "R/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "RBI": {
            "positive" : True
        },
        "GWRBI": {
            "positive" : True,
            "display" : False
        },
        "DrivenIn": {
            "positive" : True,
            "display" : False
        },
        "GWDrivenIn": {
            "positive" : True,
            "display" : False
        },
        "RBI/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "BB": {
            "positive" : True
        },
        "SO": {
            "positive" : False,
            "display-value" : "K"
        },
        "Bal": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Str": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "SwStr": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "SwgStr": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "LkStr": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "CntStr": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "2StrPit": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "2StrK": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "1stStr": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "L/SO": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "S/SO": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "BB/SO" : {
            "positive" : True,
            "round" : 2,
            "isinf" : "BB",
            "display-value" : "BB/K"
        },
        "BA+" : {
            "positive" : True,
            "display-value" : "AVG+",
            "type" : "Adjusted"
        },
        "OBP+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "SLG+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "ISO+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "BAbip+" : {
            "positive" : True,
            "type" : "Adjusted",
            "valid_since" : {
                "season" : 1910,
                "game" : 1910
            }
        },
        "HR%+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "XBH%+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "X/H%+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "BB%+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "SO%+" : {
            "positive" : False,
            "type" : "Adjusted",
            "display-value" : "K%+",
            "valid_since" : {
                "season" : 1910,
                "game" : 1910
            }
        },
        "BB-SO%+": {
            "positive" : True,
            "type" : "Adjusted",
            "display-value" : "BB-K%+",
            "display" : False,
            "valid_since" : {
                "season" : 1910,
                "game" : 1910
            }
        },
        "TTO%+": {
            "positive" : True,
            "type" : "Adjusted",
            "valid_since" : {
                "season" : 1910,
                "game" : 1910
            }
        },
        "BB/SO+" : {
            "positive" : True,
            "type" : "Adjusted",
            "display-value" : "BB/K+",
            "valid_since" : {
                "season" : 1910,
                "game" : 1910
            }
        },
        "wRC+" : {
            "positive" : True,
            "type" : "Adjusted"
        },
        "BB/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "SO/162": {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "display-value" : "K/162"
        },
        "AB/SO" : {
            "positive" : True,
            "skipzero" : True,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "TOB": {
            "positive" : True
        },
        "TOB/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "SB": {
            "positive" : True,
            "valid_since" : {
                "game" : 1886,
                "season" : 1886
            }
        },
        "CS" : {
            "positive" : False,
            "valid_since" : {
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "NS" : {
            "positive" : True,
            "valid_since" : {
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "SB/162": {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1886,
                "season" : 1886
            }
        },
        "SB%": {
            "positive" : True,
            "round" : "percent",
            "valid_since" : {
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "WPA/162" : {
            "positive" : True,
            "display" : False,
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "cWPA/162" : {
            "positive" : True,
            "display" : False,
            "round" : "percent-1",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "HR%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced"
        },
        "XBH%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced"
        },
        "X/H%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced"
        },
        "BB%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced"
        },
        "SO%" : {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "display-value" : "K%"
        },
        "BB-SO%": {
            "positive" : True,
            "round" : 'percent',
            "type" : "Per Game/Advanced",
            "display-value" : "BB-K%"
        },
        "TTO%": {
            "positive" : True,
            "round" : 'percent',
            "type" : "Per Game/Advanced"
        },
        "IBB": {
            "positive" : True,
            "valid_since" : {
                "season" : 1927,
                "game" : 1927
            }
        },
        "IBB%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "season" : 1927,
                "game" : 1927
            }
        },
        "HBP": {
            "positive" : True,
            "valid_since" : {
                "season" : 1887,
                "game" : 1887
            }
        },
        "HBP%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "season" : 1887,
                "game" : 1887
            }
        },
        "ROE": {
            "positive" : True,
            "display" : False
        },
        "BOP": {
            "positive" : True,
            "display" : False
        },
        "SH": {
            "positive" : True,
            "valid_since" : {
                "season" : 1894,
                "game" : 1894
            }
        },
        "SF": {
            "positive" : True,
            "valid_since" : {
                "season" : 1954,
                "game" : 1954
            }
        },
        "GDP" : {
            "positive" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933,
                "inconsistent-game" : 1939,
                "inconsistent" : 1939
            }
        }, "GDPO" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933,
                "inconsistent-game" : 1939,
                "inconsistent" : 1939
            }
        }, "GDP%" : {
            "positive" : False,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933,
                "inconsistent-game" : 1939,
                "inconsistent" : 1939
            }
        },"BA" : {
            "positive" : True,
            "round" : 3,
            "display-value" : "AVG"
        }, "BA+" : {
            "positive" : True,
            "display-value" : "AVG+",
            "type" : "Adjusted"
        }, "OBP" : {
            "positive" : True,
            "round" : 3
        }, "SLG" : {
            "positive" : True,
            "round" : 3
        }, "OPS" : {
            "positive" : True,
            "round" : 3
        },
        "wOBA" : {
            "positive" : True,
            "round" : 3
        },
        "ISO" : {
            "positive" : True,
            "round" : 3
        },
        "BAbip" : {
            "positive" : True,
            "round" : 3
        },
        "wSB" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "wRC" : {
            "positive" : True,
            "type" : "Per Game/Advanced"
        },
        "wRAA" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "BRuns" : {
            "positive" : True,
            "round" : 2,
            "type" : "Per Game/Advanced"
        },
        "WPA" : {
            "positive" : True,
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "WPA/LI" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "cWPA" : {
            "positive" : True,
            "round" : "percent-1",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "RE24" : {
            "positive" : True,
            "round" : 1,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            },
            "type" : "Per Game/Advanced"
        },
        "PwrSpd" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "RC" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "BtRuns" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "BtWins" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "OWn%" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "REW" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            },
            "type" : "Per Game/Advanced"
        },
        "OPS+" : {
            "positive" : True,
            "display" : False,
            "type" : "Adjusted"
        },
        "Inn" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "round" : "innings",
            "valid_since" : {
                "inconsistent" : 1950,
                "inconsistent-game" : 1950
            }
        },
        "PutOut" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "A" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "E" : {
            "positive" : False,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "FldStolenBases" : {
            "positive" : False,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "FldCaughtStealing" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "FldCaughtStealing%" : {
            "positive" : True,
            "for-pos" : ["C"],
            "round" : "percent",
            "display-value" : "CS%",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Fld%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rtot" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)",
            "valid_since" : {
                "season" : 1953
            }
        },
        "Rdrs" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "DRS",
            "valid_since" : {
                "season" : 2003
            }
        },
        "Rbat" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rbaser" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rfield" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "RerC" : {
            "positive" : True,
            "for-pos" : ["C"],
            "type" : "Defense/Value (Baseball Reference)",
            "valid_since" : {
                "season" : 2003
            }
        },
        "RszC" : {
            "positive" : True,
            "for-pos" : ["C"],
            "type" : "Defense/Value (Baseball Reference)",
            "valid_since" : {
                "season" : 2011
            }
        },
        "WAAPos" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Positional (Baseball Reference)",
            "display-value" : "Pos WAA"
        },
        "WAAPitch" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Positional (Baseball Reference)",
            "display-value" : "Pitch WAA"
        },
        "WAA" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "oWAR" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "dWAR" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WARPos" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAR"
        },
        "WARPitch" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pitch WAR"
        },
        "WARJAWS" : {
            "positive" : True,
            "display" : False,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAR"
        },
        "WAR" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WAR7yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "WAR7"
        },
        "JAWS" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlroWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrdWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrWARPitch" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrWARPos" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInfloWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInfldWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInflWARPitch" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInflWARPos" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInflWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rdrs/yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "DRS/1200",
            "valid_since" : {
                "season" : 2003
            }
        },
        "Rbat/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rbaser/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rfield/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "RerC/Yr" : {
            "positive" : True,
            "for-pos" : ["C"],
            "type" : "Defense/Value (Baseball Reference)",
            "valid_since" : {
                "season" : 2003
            }
        },
        "RszC/Yr" : {
            "positive" : True,
            "for-pos" : ["C"],
            "type" : "Defense/Value (Baseball Reference)",
            "valid_since" : {
                "season" : 2011
            }
        },
        "WAAPos/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAA/Yr"
        },
        "WAAPitch/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pitch WAA/Yr"
        },
        "WAA/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "oWAR/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "dWAR/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WARPos/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Positional (Baseball Reference)",
            "display-value" : "Pos WAR/Yr"
        },
        "WARPitch/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Positional (Baseball Reference)",
            "display-value" : "Pitch WAR/Yr"
        },
        "WAR/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rdrs/162" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "round" : 1,
            "display-value" : "DRS/162",
            "display" : False,
            "valid_since" : {
                "season" : 2003
            }
        },
        "WAAPos/162" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAA/162"
        },
        "oWAR/162" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "dWAR/162" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WARPos/162" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAR/162"
        },
        "Salary" : {
            "positive" : False,
            "round" : "dollar",
            "skipzero" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "$",
        },
        "$/Yr" : {
            "positive" : False,
            "round" : "dollar",
            "skipzero" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "$/oWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "$/dWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "$/WAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "$/WARPos" : {
            "positive" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "InflSalary" : {
            "positive" : False,
            "round" : "dollar",
            "skipzero" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Inflation Adj $",
        },
        "Infl$/Yr" : {
            "positive" : False,
            "round" : "dollar",
            "skipzero" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Infl$/oWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Infl$/dWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Infl$/WAR" : {
            "positive" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "display" : False,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "G/Yr" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors"
        },
        "AllStar" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1933
            }
        },
        "AllStarInd" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display" : False,
            "valid_since" : {
                "season" : 1933
            }
        },
        "AllMLB:1st" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:2nd" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:Tot" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "SlvSlug" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1980
            }
        },
        "HankAaron" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1999
            }
        },
        "BatTitle" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "TripCrown" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "GldGlv" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1957
            }
        },
        "PltGlv" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2011
            }
        },
        "MVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "MVPShares" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "MVPShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "ROY" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1947
            }
        },
        "Derby" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1985
            }
        },
        "ASMVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1962
            }
        },
        "CSMVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1977,
                "game" : 1977,
                "inconsistent" : 1980,
                "inconsistent-game" : 1980
            }
        },
        "WSMVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "WS" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "BatBInk" : {
            "positive" : True,
            "display-value" : "Bat B Ink",
            "type" : "Awards/Honors"
        },
        "PitchBInk" : {
            "positive" : True,
            "display-value" : "Pitch B Ink",
            "type" : "Awards/Honors"
        },
        "BInk" : {
            "positive" : True,
            "display-value" : "B Ink",
            "type" : "Awards/Honors"
        },
        "BatGInk" : {
            "positive" : True,
            "display-value" : "Bat G Ink",
            "type" : "Awards/Honors"
        },
        "PitchGInk" : {
            "positive" : True,
            "display-value" : "Pitch G Ink",
            "type" : "Awards/Honors"
        },
        "GInk" : {
            "positive" : True,
            "display-value" : "G Ink",
            "type" : "Awards/Honors"
        },
        "Young" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "Old" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "AllStar%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1933
            }
        },
        "AllMLB:1st%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:2nd%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:Tot%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "SlvSlug%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1980
            }
        },
        "HankAaron%" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "round" : "percent",
            "valid_since" : {
                "season" : 1999
            }
        },
        "BatTitle%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors"
        },
        "GldGlv%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1957
            }
        },
        "MVP%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "WS%" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "round" : "percent"
        }
    }, "Pitcher" : {
        "Player" : {
            "positive" : True
        },
        "DateStart" : {
            "positive" : True,
            "display" : False
        },
        "DateEnd" : {
            "positive" : True,
            "display" : False
        },
        "Tm" : {
            "positive" : True,
            "display" : False
        },
        "Opponent" : {
            "positive" : True,
            "display" : False
        },
        "TmLg" : {
            "positive" : True,
            "display" : False
        },
        "OppLg" : {
            "positive" : True,
            "display" : False
        },
        "Pos": {
            "positive" : True,
            "display" : False
        },
        "Gm" : {
            "positive" : True,
            "display" : False
        },
        "GmRev" : {
            "positive" : True,
            "display" : False
        },
        "TmGm" : {
            "positive" : True,
            "display" : False
        },
        "TmGmRev" : {
            "positive" : True,
            "display" : False
        },
        "CrGm" : {
            "positive" : True,
            "display" : False
        },
        "CrGmRev" : {
            "positive" : True,
            "display" : False
        },
        "RawCrGm" : {
            "positive" : True,
            "display" : False
        },
        "Result" : {
            "positive" : True,
            "display" : False
        },
        "Team Score" : {
            "positive" : True,
            "display" : False
        },
        "Opponent Score" : {
            "positive" : True,
            "display" : False
        },
        "SeriesTeamWins" : {
            "positive" : True,
            "display" : False
        },
        "SeriesOpponentWins" : {
            "positive" : False,
            "display" : False
        },
        "SeriesScore" : {
            "positive" : False,
            "display" : False
        },
        "Elimination" : {
            "positive" : False,
            "display" : False
        },
        "Clinching" : {
            "positive" : True,
            "display" : False
        },
        "Seasons" : {
            "positive" : True,
            "display" : False
        },
        "RegularSeasons" : {
            "positive" : True,
            "display" : False
        },
        "UniqueSeasons" : {
            "positive" : True,
            "display" : False
        },
        "WARSeasons" : {
            "positive" : True,
            "display" : False
        },
        "NonFakeSeasons" : {
            "positive" : True,
            "display" : False
        },
        "PitchSeasons" : {
            "positive" : True,
            "display" : False
        },
        "WARPitchSeasons" : {
            "positive" : True,
            "display" : False
        },
        "SlrSeasons" : {
            "positive" : True,
            "display" : False
        },
        "SlrInflSeasons" : {
            "positive" : True,
            "display" : False
        },
        "AllStarSeasons" : {
            "positive" : True,
            "display" : False
        },
        "G": {
            "positive" : True
        },
        "GS" : {
            "positive" : True
        },
        "DaysOnEarth" : {
            "positive" : True,
            "display" : False
        },
        "DaysSpan" : {
            "positive" : True,
            "display" : False
        },
        "TmW" :{
            "positive" : True,
            "display" : False
        },
        "TmL" :{
            "positive" : False,
            "display" : False
        },
        "TmT" :{
            "positive" : False,
            "display" : False
        },
        "TmRec" : {
            "positive" : True,
            "display" : False
        },
        "TmW/L%" :{
            "positive" : True,
            "round" : "percent",
            "display" : False
        },
        "TmScore" :{
            "positive" : True,
            "display" : False
        },
        "OppScore" :{
            "positive" : False,
            "display" : False
        },
        "TtlScore" :{
            "positive" : True,
            "display" : False
        },
        "ScoreDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmScore/G" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "OppScore/G" :{
            "positive" : False,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "TtlScore/G" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "ScoreDiff/G" :{
            "positive" : True,
            "round" : 2,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "TmR" :{
            "positive" : True,
            "display" : False
        },
        "OppR" :{
            "positive" : False,
            "display" : False
        },
        "TtlR" :{
            "positive" : True,
            "display" : False
        },
        "RDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmRBI" :{
            "positive" : True,
            "display" : False
        },
        "OppRBI" :{
            "positive" : False,
            "display" : False
        },
        "TtlRBI" :{
            "positive" : True,
            "display" : False
        },
        "RBIDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmH" :{
            "positive" : True,
            "display" : False
        },
        "OppH" :{
            "positive" : False,
            "display" : False
        },
        "TtlH" :{
            "positive" : True,
            "display" : False
        },
        "HDiff" :{
            "positive" : True,
            "display" : False
        },
        "TmHR" :{
            "positive" : True,
            "display" : False
        },
        "OppHR" :{
            "positive" : False,
            "display" : False
        },
        "TtlHR" :{
            "positive" : True,
            "display" : False
        },
        "HRDiff" :{
            "positive" : True,
            "display" : False
        },
        "Ing" : {
            "positive" : True,
            "display" : False,
            "display-value" : "Inn"
        },
        "Pit": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "TtlPit" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Pit%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "IP": {
            "positive" : True,
            "round" : "innings"
        },
        "IPStart": {
            "positive" : True,
            "display" : False,
            "round" : "innings",
            "valid_since" : {
                "game" : 1901,
                "season" : 1901
            }
        },
        "IP/G": {
            "positive" : True,
            "round" : "innings-round",
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "IP/GS": {
            "positive" : True,
            "round" : "innings-round",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1901,
                "season" : 1901
            }
            
        },
        "PitStart": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "GamesPit": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "StartsPit": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Pit/G": {
            "positive" : True,
            "type" : "Per Game/Advanced",
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Pit/GS": {
            "positive" : True,
            "type" : "Per Game/Advanced",
            "round" : 2,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Pit/BF": {
            "positive" : True,
            "type" : "Per Game/Advanced",
            "display" : False,
            "round" : 2,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "MPHRaw" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MPHPit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MPH" : {
            "positive" : True,
            "display" : False,
            "display-value" : "PitMPH",
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MaxMPH" : {
            "positive" : True,
            "display" : False,
            "display-value" : "MaxPitMPH",
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MinMPH" : {
            "positive" : False,
            "display" : False,
            "display-value" : "MinPitMPH",
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "SpinRaw" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "SpinPit" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "Spin" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MaxSpin" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "MinSpin" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "EVRaw" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "EVPit" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "EV" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MaxEV" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MinEV" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HardHit" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "SwtSpt" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "Chase" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "PitBall" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "PitStrike" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "LARaw" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "LAPit" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "LA" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MaxLA" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MinLA" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HitDistRaw" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HitDistPit" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HitDist" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : 1,
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MaxDist" : {
            "positive" : False,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "MinDist" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "HardHit%" : {
            "positive" : False,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "SwtSpt%" : {
            "positive" : False,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2015,
                "season" : 2015
            }
        },
        "Whiff%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "1stStr%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "SwStr%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Chase%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 2007,
                "season" : 2007,
                "inconsistent-game" : 2008,
                "inconsistent" : 2008
            }
        },
        "PutAway%" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced",
            "round" : "percent",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "GSc": {
            "positive" : True,
            "display" : False,
            "display-value" : "GmScr",
            "valid_since" : {
                "season" : 1901,
                "inconsistent" : 1913
            }
        },
        "GSc/GS": {
            "positive" : True,
            "type" : "Per Game/Advanced",
            "round" : 2,
            "display-value" : "GmScr/GS",
            "valid_since" : {
                "season" : 1901,
                "inconsistent" : 1913
            }
        },
        "RunSW" : {
            "positive" : True,
            "display-value" : "Run Sup W",
            "display" : False
        },
        "RunSL" : {
            "positive" : False,
            "display-value" : "Run Sup L",
            "display" : False
        },
        "RunSW/L%" : {
            "positive" : True,
            "round" : "percent",
            "display-value" : "Run Sup W/L%",
            "display" : False
        },
        "RunSND" : {
            "positive" : False,
            "display-value" : "Run Sup ND",
            "display" : False
        },
        "RunSND%" : {
            "positive" : False,
            "round" : "percent",
            "display-value" : "Run Sup ND%",
            "display" : False
        },
        "ExitW" : {
            "positive" : True,
            "display" : False
        },
        "ExitL" : {
            "positive" : False,
            "display" : False
        },
        "ExitW/L%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False
        },
        "ExitND" : {
            "positive" : False,
            "display" : False
        },
        "ExitND%" : {
            "positive" : False,
            "round" : "percent",
            "display" : False
        },
        "W" : {
            "positive" : True
        },
        "L" : {
            "positive" : False
        },
        "W/L%" : {
            "positive" : True,
            "round" : "percent"
        },
        "ND" : {
            "positive" : False,
            "display" : False
        },
        "ND%" : {
            "positive" : False,
            "round" : "percent",
            "display" : False
        },
        "QS" : {
            "positive" : True,
            "valid_since" : {
                "season" : 1901,
                "inconsistent" : 1913
            }
        },
        "QS%" : {
            "positive" : True,
            "round" : "percent",
            "valid_since" : {
                "season" : 1901,
                "inconsistent" : 1913
            }
        },
        "CG": {
            "positive" : True
        },
        "CG%": {
            "positive" : True,
            "round" : "percent"
        },
        "SHO": {
            "positive" : True
        },
        "SHO%": {
            "positive" : True,
            "round" : "percent"
        },
        "NoHit" : {
            "positive" : True
        },
        "NoHit%" : {
            "positive" : True,
            "round" : "percent",
            "display" : None
        },
        "Prfct" : {
            "positive" : True
        },
        "Prfct%" : {
            "positive" : True,
            "round" : "percent",
            "display" : None
        },
        "SV": {
            "positive" : True
        },
        "BSv": {
            "positive" : False,
            "valid_since" : {
                "game" : 1916,
                "season" : 1916
            }
        },
        "SV%": {
            "positive" : True,
            "round" : "percent",
            "valid_since" : {
                "game" : 1916,
                "season" : 1916
            }
        },
        "Hold": {
            "positive" : True,
            "display-value" : "HLD",
            "valid_since" : {
                "game" : 1916,
                "season" : 1916
            }
        },
        "BF" : {
            "positive" : True
        },
        "SO": {
            "positive" : True,
            "display-value" : "K"
        },
        "Bal": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "Str": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "SwStr": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "SwgStr": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "LkStr": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "CntStr": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "2StrPit": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "2StrK": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "1stStr": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "L/SO": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "S/SO": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1988,
                "game" : 1988
            }
        },
        "BB": {
            "positive" : False
        },
        "SO/BB": {
            "positive" : True,
            "round" : 2,
            "isinf" : "SO",
            "display-value" : "K/BB"
        },
        "SO9+": {
            "positive" : True,
            "type" : "Adjusted",
            "display-value" : "K9+"
        },
        "BB9+": {
            "positive" : False,
            "type" : "Adjusted"
        },
        "H9+": {
            "positive" : False,
            "type" : "Adjusted"
        },
        "HR9+": {
            "positive" : False,
            "type" : "Adjusted"
        },
        "SO%+" : {
            "positive" : True,
            "type" : "Adjusted",
            "display-value" : "K%+",
            "valid_since" : {
                "season" : 1916,
                "game" : 1916
            }
        },
        "BB%+" : {
            "positive" : False,
            "type" : "Adjusted",
            "valid_since" : {
                "season" : 1916,
                "game" : 1916
            }
        },
        "SO-BB%+": {
            "positive" : True,
            "type" : "Adjusted",
            "display" : False,
            "display-value" : "K-BB%+"
        },
        "HR%+" : {
            "positive" : False,
            "type" : "Adjusted"
        },
        "SO/BB+": {
            "positive" : True,
            "type" : "Adjusted",
            "display-value" : "K/BB+"
        },
        "WHIP+": {
            "positive" : False,
            "type" : "Adjusted"
        },
        "wRC+" : {
            "positive" : False,
            "type" : "Adjusted",
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "ERA-": {
            "positive" : False,
            "type" : "Adjusted"
        },
        "FIP-": {
            "positive" : False,
            "display" : False,
            "type" : "Adjusted"
        },
        "SO9": {
            "positive" : True,
            "round" : 2,
            "isinf" : "SO",
            "type" : "Per Game/Advanced",
            "display-value" : "K9"
        },
        "BB9": {
            "positive" : False,
            "round" : 2,
            "isinf" : "BB",
            "type" : "Per Game/Advanced"
        },
        "AB": {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "H": {
            "positive" : False
        },
        "H9": {
            "positive" : False,
            "round" : 2,
            "isinf" : "H",
            "type" : "Per Game/Advanced"
        },
        "1B": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "2B": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "3B": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "HR": {
            "positive" : False
        },
        "Slam": {
            "positive" : False,
            "display" : False
        },
        "HR9": {
            "positive" : False,
            "round" : 2,
            "isinf" : "HR",
            "type" : "Per Game/Advanced"
        },
        "TB": {
            "positive" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "XBH": {
            "positive" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "WalkOff" : {
            "positive" : False,
            "display" : False
        },
        "SH": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1894,
                "game" : 1894
            }
        },
        "SF": {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "season" : 1954,
                "game" : 1954
            }
        },
        "IBB": {
            "positive" : False,
            "valid_since" : {
                "season" : 1927,
                "game" : 1927
            }
        },
        "SO%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "display-value" : "K%"
        },
        "BB%" : {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced"
        },
        "SO-BB%": {
            "positive" : True,
            "round" : 'percent',
            "type" : "Per Game/Advanced",
            "display-value" : "K-BB%"
        },
        "HR%" : {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced"
        },
        "XBH%" : {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "X/H%" : {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "IBB%" : {
            "positive" : False,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "season" : 1927,
                "game" : 1927
            }
        },
        "HBP%" : {
            "positive" : False,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "season" : 1887,
                "game" : 1887
            }
        },
        "SB%": {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "Str%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game" : 1988,
                "season" : 1988
            }
        },
        "HBP": {
            "positive" : False,
            "valid_since" : {
                "season" : 1887,
                "game" : 1887
            }
        },
        "ROE": {
            "positive" : False,
            "display" : False
        },
        "TOB": {
            "positive" : False,
            "display" : False
        },
        "GB": {
            "positive" : True,
            "display" : False
        },
        "GB%": {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "FB": {
            "positive" : True,
            "display" : False
        },
        "FB%": {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "LD": {
            "positive" : False,
            "display" : False
        },
        "LD%": {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "PU": {
            "positive" : True,
            "display" : False
        },
        "PU%": {
            "positive" : True,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "Unk": {
            "positive" : False,
            "display" : False
        },
        "Unk%": {
            "positive" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "display" : False
        },
        "InPly": {
            "positive" : False,
            "display" : False
        },
        "Entered": {
            "positive" : True,
            "display" : False
        },
        "Exited": {
            "positive" : True,
            "display" : False
        },
        "HR/FB": {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "isinf" : "HR",
            "display" : False
        },
        "GB/FB": {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "isinf" : "GB",
            "display" : False
        },
        "GDP": { 
            "positive" : True,
            "valid_since" : {
                "game-np" : 1933,
                "season-np" : 1933,
                "season" : 1901,
                "game" : 1901
            }
        }, "GDPO" : {
            "positive" : True,
            "display" : False,
            "valid_since" : {
                "season" : 1933,
                "game" : 1933,
                "inconsistent-game" : 1939,
                "inconsistent" : 1939
            }
        }, "GDP%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "season" : 1933,
                "game" : 1933,
                "inconsistent-game" : 1939,
                "inconsistent" : 1939
            }
        },
        "SB": {
            "positive" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "CS" : {
            "positive" : True,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "NS" : {
            "positive" : False,
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "PO": {
            "positive" : True,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "BA" : {
            "positive" : False,
            "round" : 3,
            "type" : "Per Game/Advanced",
            "display-value" : "AVG",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        }, "OBP" : {
            "positive" : False,
            "round" : 3,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        }, "SLG" : {
            "positive" : False,
            "round" : 3,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        }, "OPS" : {
            "positive" : False,
            "round" : 3,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        }, "wOBA" : {
            "positive" : False,
            "round" : 3,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        }, "ISO" : {
            "positive" : False,
            "round" : 3,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        }, "BAbip" : {
            "positive" : False,
            "round" : 3,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "wSB" : {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "game" : 1912,
                "season" : 1912,
                "inconsistent-game" : 1928,
                "inconsistent" : 1928
            }
        },
        "wRC" : {
            "positive" : False,
            "type" : "Per Game/Advanced",
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "wRAA" : {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "BRuns" : {
            "positive" : False,
            "round" : 2,
            "type" : "Per Game/Advanced",
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1901,
                "game" : 1901
            }
        },
        "RS" : {
            "positive" : False,
            "display" : False
        },
        "R": {
            "positive" : False
        },
        "ER": {
            "positive" : False
        },
        "BQS": {
            "positive" : False,
            "display" : False
        },
        "IR": {
            "positive" : False,
            "display" : False
        },
        "IS": {
            "positive" : False,
            "display" : False
        },
        "BQS%" : {
            "positive" : False,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "IS%" : {
            "positive" : False,
            "round" : "percent",
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "RS9" : {
            "positive" : True,
            "isinf" : "RS",
            "display" : False,
            "round" : 2
        },
        "RA9": {
            "positive" : False,
            "isinf" : "R",
            "round" : 2
        },
        "ERA": {
            "positive" : False,
            "isinf" : "ER",
            "round" : 2
        },
        "FIP": {
            "positive" : False,
            "round" : 2
        },
        "WHIP": {
            "positive" : False,
            "isinf" : "BB|H",
            "round" : 3
        },
        "PtchR" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "PtchW" : {
            "positive" : True,
            "display" : False,
            "type" : "Per Game/Advanced"
        },
        "REW" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            },
            "type" : "Per Game/Advanced"
        },
        "ERA+": {
            "positive" : True,
            "display" : False,
            "type" : "Adjusted"
        },
        "WPA" : {
            "positive" : True,
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1930,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "WPA/LI" : {
            "positive" : True,
            "display" : False,
            "round" : 1,
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1930,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "cWPA" : {
            "positive" : True,
            "round" : "percent-1",
            "type" : "Per Game/Advanced",
            "valid_since" : {
                "game-np" : 1916,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            }
        },
        "RE24" : {
            "positive" : True,
            "round" : 1,
            "valid_since" : {
                "game-np" : 1930,
                "season-np" : 1916,
                "season" : 1916,
                "game" : 1901
            },
            "type" : "Per Game/Advanced"
        },
        "Inn" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "round" : "innings",
            "valid_since" : {
                "inconsistent" : 1950,
                "inconsistent-game" : 1950
            }
        },
        "PutOut" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "A" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "E" : {
            "positive" : False,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Fld%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rdrs" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "DRS",
            "valid_since" : {
                "season" : 2003
            }
        },
        "Rbat" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rbaser" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rfield" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WAAPitch" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pitch WAA"
        },
        "WAAPos" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAA"
        },
        "WAA" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WARPitch" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pitch WAR"
        },
        "oWAR" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "dWAR" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WARPos" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAR"
        },
        "WARJAWS" : {
            "positive" : True,
            "display" : False,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAR"
        },
        "WAR" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WAR7yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "WAR7"
        },
        "JAWS" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlroWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrdWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrWARPitch" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrWARPos" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInfloWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInfldWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInflWARPitch" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInflWARPos" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "SlrInflWAR" : {
            "positive" : True,
            "round" : 1,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rdrs/yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "DRS/1200",
            "valid_since" : {
                "season" : 2003
            }
        },
        "Rbat/Yr" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rbaser/Yr" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Rfield/Yr" : {
            "positive" : True,
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WAAPitch/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pitch WAA/Yr"
        },
        "WAAPos/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAA/Yr"
        },
        "WAA/Yr" : {
            "positive" : True,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WARPitch/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pitch WAR/Yr"
        },
        "oWAR/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "dWAR/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "WARPos/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Pos WAR/Yr"
        },
        "WAR/Yr" : {
            "positive" : True,
            "round" : 1,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Salary" : {
            "positive" : False,
            "skipzero" : True,
            "display" : False,
            "round" : "dollar",
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "$",
        },
        "$/Yr" : {
            "positive" : False,
            "skipzero" : True,
            "display" : False,
            "round" : "dollar",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "$/oWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "$/dWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "$/WAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "InflSalary" : {
            "positive" : False,
            "skipzero" : True,
            "round" : "dollar",
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)",
            "display-value" : "Inflation Adj $",
        },
        "Infl$/Yr" : {
            "positive" : False,
            "skipzero" : True,
            "round" : "dollar",
            "display" : False,
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Infl$/oWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Infl$/dWAR" : {
            "positive" : False,
            "display" : False,
            "round" : "dollar",
            "skipzero" : True,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "Infl$/WAR" : {
            "positive" : False,
            "round" : "dollar",
            "skipzero" : True,
            "display" : False,
            "nonnegative" : True,
            "isinf" : "Salary",
            "type" : "Defense/Value (Baseball Reference)"
        },
        "G/Yr" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors"
        },
        "GS/Yr" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors"
        },
        "IP/Yr" : {
            "positive" : True,
            "round" : "innings-round",
            "type" : "Awards/Honors"
        },
        "AllStar" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1933
            }
        },
        "AllStarInd" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "display" : False,
            "valid_since" : {
                "season" : 1933
            }
        },
        "AllMLB:1st" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:2nd" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:Tot" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "PitchTitle" : {
            "positive" : True,
            "display-value" : "ERATitle",
            "type" : "Awards/Honors"
        },
        "TripCrown" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "ReliefYr" : {
            "positive" : True,
            "display-value" : "Relief/Yr",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1976
            }
        },
        "CyYoung" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1956
            }
        },
        "CyShares" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "round" : 2,
            "valid_since" : {
                "season" : 1956
            }
        },
        "CyShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1956
            }
        },
        "SlvSlug" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1980
            }
        },
        "GldGlv" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1957
            }
        },
        "PltGlv" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2011
            }
        },
        "MVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "MVPShares" : {
            "positive" : True,
            "round" : 2,
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "MVPShr%" : {
            "positive" : True,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "ROY" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1947
            }
        },
        "ASMVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1962
            }
        },
        "CSMVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1977,
                "game" : 1977,
                "inconsistent" : 1980,
                "inconsistent-game" : 1980
            }
        },
        "WSMVP" : {
            "positive" : True,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1955,
                "game" : 1955
            }
        },
        "WS" : {
            "positive" : True,
            "type" : "Awards/Honors"
        },
        "PitchBInk" : {
            "positive" : True,
            "display-value" : "Pitch B Ink",
            "type" : "Awards/Honors"
        },
        "BatBInk" : {
            "positive" : True,
            "display-value" : "Bat B Ink",
            "type" : "Awards/Honors"
        },
        "BInk" : {
            "positive" : True,
            "display-value" : "B Ink",
            "type" : "Awards/Honors"
        },
        "PitchGInk" : {
            "positive" : True,
            "display-value" : "Pitch G Ink",
            "type" : "Awards/Honors"
        },
        "BatGInk" : {
            "positive" : True,
            "display-value" : "Bat G Ink",
            "type" : "Awards/Honors"
        },
        "GInk" : {
            "positive" : True,
            "display-value" : "G Ink",
            "type" : "Awards/Honors"
        },
        "Young" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "Old" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors"
        },
        "AllStar%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1933
            }
        },
        "AllMLB:1st%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:2nd%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "AllMLB:Tot%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 2019
            }
        },
        "PitchTitle%" : {
            "positive" : True,
            "display-value" : "ERATitle%",
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors"
        },
        "Relief/Yr%" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "round" : "percent",
            "valid_since" : {
                "season" : 1976
            }
        },
        "CyYoung%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1956
            }
        },
        "SlvSlug%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1980
            }
        },
        "GldGlv%" : {
            "positive" : True,
            "display" : False,
            "round" : "percent",
            "type" : "Awards/Honors",
            "valid_since" : {
                "season" : 1957
            }
        },
        "MVP%" : {
            "positive" : True,
            "round" : "percent",
            "display" : False,
            "type" : "Awards/Honors",
            "valid_since" : {
                "inconsistent" : 1931,
                "season" : 1911
            }
        },
        "WS%" : {
            "positive" : True,
            "display" : False,
            "type" : "Awards/Honors",
            "round" : "percent"
        }
    }
}

special_doubleheaders = {
    "2000-09-25" : {
        "double_team" : "CLE",
        "single_teams" : ["CHW", "MIN"]
    },
    "1951-09-13" : {
        "double_team" : "STL",
        "single_teams" : ["NYG", "BSN"]
    }
}

decimal_stats = [
    "WAA",
    "WAAPitch",
    "WAAPos",
    "oWAR",
    "dWAR",
    "WAR",
    "WARPitch",
    "WARPos"
]

formulas = {
    "Batter" : {
        "DaysOnEarth" : "Special",
        "DaysSpan" : "Special",
        "TmW" : "Special",
        "TmL" : "Special",
        "TmT" : "Special",
        "TmRec" : "Special",
        "TmW/L%" : "TmW / (TmW + TmL)",
        "TmScore" : "Special",
        "OppScore" : "Special",
        "TtlScore" : "TmScore + OppScore",
        "ScoreDiff" : "TmScore - OppScore",
        "TtlH" : "TmH + OppH",
        "HDiff" : "TmH - OppH",
        "TtlR" : "TmR + OppR",
        "RDiff" : "TmR - OppR",
        "TtlRBI" : "TmRBI + OppRBI",
        "RBIDiff" : "TmRBI - OppRBI",
        "TtlHR" : "TmHR + OppH",
        "HRDiff" : "TmHR - OppH",
        "TmScore/G" : "TmScore / G",
        "OppScore/G" : "OppScore / G",
        "TtlScore/G" : "TtlScore / G",
        "ScoreDiff/G" : "ScoreDiff / G",
        "Pit/PA" : "Pit / PA",
        "Pit%" : "Pit / TtlPit",
        "MPH" : "MPHRaw / MPHPit",
        "EV" : "EVRaw / EVPit",
        "MaxEV" : "MAX",
        "MaxDist" : "MAX",
        "MaxMPH" : "MAX",
        "MaxSpin" : "MAX",
        "MaxLA" : "MAX",
        "MinEV" : "MIN",
        "MinDist" : "MIN",
        "MinMPH" : "MIN",
        "MinSpin" : "MIN",
        "MinLA" : "MIN",
        "HardHit%" : "HardHit / EVPit",
        "SwtSpt%" : "SwtSpt / LAPit",
        "LA" : "LARaw / LAPit",
        "HitDist" : "HitDistRaw / HitDistPit",
        "Spin" : "SpinRaw / SpinPit",
        "PA/162" : "PA / (G / 162)",
        "BA" : "H / AB",
        "BAbip" : "(H - HR)/(AB - SO - HR + SF)",
        "OBP" : "(H + BB + HBP) / (AB + BB + HBP + SF)",
        "SLG" : "TB / AB",
        "OPS" : "OBP + SLG",
        "ISO" : "SLG - BA",
        "SwStr%" : "SwStr / Pit",
        "PutAway%" : "2StrK / 2StrPit",
        "Chase%" : "Chase / PitBall",
        "1stStr%" : "1stStr / PA",
        "Whiff%" : "SwStr / (CntStr + SwStr)",
        "SB%" : "SB / (SB + CS)",
        "AB/HR" : "AB / HR",
        "HR%" : "HR / PA",
        "XBH%" : "XBH / PA",
        "X/H%" : "XBH / H",
        "BB%" : "BB / PA",
        "SO%" : "SO / PA",
        "BB-SO%" : "(BB - SO) / PA",
        "TTO%" : "(HR + BB + SO) / PA",
        "BB/SO" : "BB / SO",
        "IBB%" : "IBB / PA",
        "HBP%" : "HBP / PA",
        "GDP%" : "GDP / GDPO",
        "H/162" : "H / (G / 162)",
        "2B/162" : "2B / (G / 162)",
        "3B/162" : "3B / (G / 162)",
        "HR/162" : "HR / (G / 162)",
        "XBH/162" : "XBH / (G / 162)",
        "TB/162" : "TB / (G / 162)",
        "TOB/162" : "TOB / (G / 162)",
        "R/162" : "R / (G / 162)",
        "RBI/162" : "RBI / (G / 162)",
        "SB/162" : "SB / (G / 162)",
        "BB/162" : "BB / (G / 162)",
        "SO/162" : "SO / (G / 162)",
        "WPA/162" : "WPA / (G / 162)",
        "cWPA/162" : "cWPA / (G / 162)",
        "JAWS" : "(WARJAWS + WAR7yr) / 2",
        "Rdrs/162" : "Rdrs / (PosG / 162)",
        "WAAPos/162" : "WAAPos / (PosG / 162)",
        "oWAR/162" : "oWAR / (PosG / 162)",
        "dWAR/162" : "dWAR / (PosG / 162)",
        "WARPos/162" : "WARPos / (PosG / 162)",
        "FldCaughtStealing%" : "FldCaughtStealing / (FldStolenBases + FldCaughtStealing)",
        "Fld%" : "(PutOut + A) / (PutOut + A + E)",
        "Rdrs/yr" : "Special",
        "WAA/Yr" : "WAA / WARSeasons",
        "RerC/Yr" : "RerC / CatchSeasons",
        "RszC/Yr" : "RszC / CatchSeasons",
        "Rbat/Yr" : "Rbat / WARSeasons",
        "Rbaser/Yr" : "Rbaser / WARSeasons",
        "Rfield/Yr" : "Rfield / WARSeasons",
        "oWAR/Yr" : "oWAR / WARSeasons",
        "dWAR/Yr" : "dWAR / WARSeasons",
        "WAAPitch/Yr" : "WAAPitch / WARPitchSeasons",
        "WARPitch/Yr" : "WARPitch / WARPitchSeasons",
        "WAAPos/Yr" : "WAAPos / WARSeasons",
        "WARPos/Yr" : "WARPos / WARSeasons",
        "WAR/Yr" : "WAR / WARSeasons",
        "$/Yr" : "Salary / SlrSeasons",
        "$/oWAR" : "Salary / SlroWAR",
        "$/dWAR" : "Salary / SlrdWAR",
        "$/WAR" : "Salary / SlrWAR",
        "Infl$/Yr" : "InflSalary / SlrInflSeasons",
        "Infl$/oWAR" : "InflSalary / SlrInfloWAR",
        "Infl$/dWAR" : "InflSalary / SlrInfldWAR",
        "Infl$/WAR" : "InflSalary / SlrInflWAR",
        "G/Yr" : "G / NonFakeSeasons",
        "BInk" : "BatBInk + PitchBInk",
        "GInk" : "BatGInk + PitchGInk",
        "AllStar%" : "AllStarInd / AllStarSeasons",
        "AllMLB:1st%" : "AllMLB:1st / RegularSeasons",
        "AllMLB:2nd%" : "AllMLB:2nd / RegularSeasons",
        "AllMLB:Tot" : "AllMLB:1st + AllMLB:2nd",
        "AllMLB:Tot%" : "AllMLB:Tot / RegularSeasons",
        "SlvSlug%" : "SlvSlug / RegularSeasons",
        "HankAaron%" : "HankAaron / RegularSeasons",
        "BatTitle%" : "BatTitle / RegularSeasons",
        "GldGlv%" : "GldGlv / RegularSeasons",
        "MVP%" : "MVP / RegularSeasons",
        "MVPShr%" : "MVPShares / RegularSeasons",
        "WS%" : "WS / UniqueSeasons"
    }, "Pitcher" : {
        "DaysOnEarth" : "Special",
        "DaysSpan" : "Special",
        "TmW" : "Special",
        "TmL" : "Special",
        "TmT" : "Special",
        "TmRec" : "Special",
        "TmW/L%" : "TmW / (TmW + TmL)",
        "TmScore" : "Special",
        "OppScore" : "Special",
        "TtlScore" : "TmScore + OppScore",
        "ScoreDiff" : "TmScore - OppScore",
        "TtlH" : "TmH + OppH",
        "HDiff" : "TmH - OppH",
        "TtlR" : "TmR + OppR",
        "RDiff" : "TmR - OppR",
        "TtlRBI" : "TmRBI + OppRBI",
        "RBIDiff" : "TmRBI - OppRBI",
        "TtlHR" : "TmHR + OppH",
        "HRDiff" : "TmHR - OppH",
        "TmScore/G" : "TmScore / G",
        "OppScore/G" : "OppScore / G",
        "TtlScore/G" : "TtlScore / G",
        "ScoreDiff/G" : "ScoreDiff / G",
        "IP/G" : "IP / G",
        "Pit/G" : "Pit / G",
        "MPH" : "MPHRaw / MPHPit",
        "EV" : "EVRaw / EVPit",
        "MaxEV" : "MAX",
        "MaxDist" : "MAX",
        "MaxMPH" : "MAX",
        "MaxSpin" : "MAX",
        "MaxLA" : "MAX",
        "MinEV" : "MIN",
        "MinDist" : "MIN",
        "MinMPH" : "MIN",
        "MinSpin" : "MIN",
        "MinLA" : "MIN",
        "HardHit%" : "HardHit / EVPit",
        "SwtSpt%" : "SwtSpt / LAPit",
        "LA" : "LARaw / LAPit",
        "Spin" : "SpinRaw / SpinPit",
        "HitDist" : "HitDistRaw / HitDistPit",
        "Pit/BF" : "Pit / BF",
        "Pit%" : "Pit / TtlPit",
        "GSc/GS" : "GSc / GS",
        "IP/GS" : "IPStart / GS",
        "Pit/GS" : "PitStart / StartsPit",
        "BA" : "H / AB",
        "BAbip" : "(H - HR)/(AB - SO - HR + SF)",
        "OBP" : "(H + BB + HBP) / (AB + BB + HBP + SF)",
        "SLG" : "TB / AB",
        "OPS" : "OBP + SLG",
        "ISO" : "SLG - BA",
        "W/L%" : "(W) / (W + L)",
        "ND%" : "ND / GS",
        "RunSW/L%" : "(RunSW) / (RunSW + RunSL)",
        "RunSND%" : "RunSND / GS",
        "RS9" : "(9 * RS) / (IP)",
        "ExitW/L%" : "(ExitW) / (ExitW + ExitL)",
        "ExitND%" : "ExitND / GS",
        "RA9" : "(9 * R) / (IP)",
        "ERA" : "(9 * ER) / (IP)",
        "WHIP" : "(BB + H) / (IP)",
        "IS%" : "IS / IR",
        "H9" : "(9 * H) / (IP)",
        "HR9" : "(9 * HR) / (IP)",
        "HR%" : "HR / BF",
        "XBH%" : "XBH / BF",
        "X/H%" : "XBH / H",
        "BB9" : "(9 * BB) / (IP)",
        "BB%" : "BB / BF",
        "SO/BB" : "SO / BB",
        "SO-BB%" : "(SO - BB) / BF",
        "SO9" : "(9 * SO) / (IP)",
        "SO%" : "SO / BF",
        "IBB%" : "IBB / BF",
        "HBP%" : "HBP / BF",
        "GDP%" : "GDP / GDPO",
        "SV%" : "SV / (SV + BSv)",
        "QS%" : "QS / GS",
        "CG%" : "CG / GS",
        "SHO%" : "SHO / GS",
        "NoHit%" : "NoHit / GS",
        "Prfct%" : "Prfct / GS",
        "Str%" : "Special",
        "SwStr%" : "SwStr / Pit",
        "PutAway%" : "2StrK / 2StrPit",
        "Chase%" : "Chase / PitBall",
        "1stStr%" : "1stStr / BF",
        "Whiff%" : "SwStr / (CntStr + SwStr)",
        "SB%" : "SB / (SB + CS)",
        "GB%" : "GB / InPly",
        "FB%" : "FB / InPly",
        "LD%" : "LD / InPly",
        "PU%" : "PU / InPly",
        "Unk%" : "Unk / InPly",
        "HR/FB" : "HR / FB",
        "GB/FB" : "GB / FB",
        "Fld%" : "(PutOut + A) / (PutOut + A + E)",
        "Rdrs/yr" : "Special",
        "JAWS" : "(WARJAWS + WAR7yr) / 2",
        "oWAR/Yr" : "oWAR / WARSeasons",
        "dWAR/Yr" : "dWAR / WARSeasons",
        "WAAPitch/Yr" : "WAAPitch / WARPitchSeasons",
        "WARPitch/Yr" : "WARPitch / WARPitchSeasons",
        "WAAPos/Yr" : "WAAPos / WARSeasons",
        "WARPos/Yr" : "WARPos / WARSeasons",
        "Rbat/Yr" : "Rbat / WARSeasons",
        "Rbaser/Yr" : "Rbaser / WARSeasons",
        "Rfield/Yr" : "Rfield / WARSeasons",
        "WAA/Yr" : "WAA / WARSeasons",
        "WAR/Yr" : "WAR / WARSeasons",
        "$/Yr" : "Salary / SlrSeasons",
        "$/oWAR" : "Salary / SlroWAR",
        "$/dWAR" : "Salary / SlrdWAR",
        "$/WAR" : "Salary / SlrWAR",
        "Infl$/Yr" : "InflSalary / SlrInflSeasons",
        "Infl$/oWAR" : "InflSalary / SlrInfloWAR",
        "Infl$/dWAR" : "InflSalary / SlrInfldWAR",
        "Infl$/WAR" : "InflSalary / SlrInflWAR",
        "G/Yr" : "G / NonFakeSeasons",
        "GS/Yr" : "GS / NonFakeSeasons",
        "IP/Yr" : "IP / NonFakeSeasons",
        "BInk" : "BatBInk + PitchBInk",
        "GInk" : "BatGInk + PitchGInk",
        "AllStar%" : "AllStarInd / AllStarSeasons",
        "AllMLB:1st%" : "AllMLB:1st / RegularSeasons",
        "AllMLB:2nd%" : "AllMLB:2nd / RegularSeasons",
        "AllMLB:Tot" : "AllMLB:1st + AllMLB:2nd",
        "AllMLB:Tot%" : "AllMLB:Tot / RegularSeasons",
        "SlvSlug%" : "SlvSlug / RegularSeasons",
        "GldGlv%" : "GldGlv / RegularSeasons",
        "Relief/Yr%" : "ReliefYr / PitchSeasons",
        "PitchTitle%" : "PitchTitle / PitchSeasons",
        "CyYoung%" : "CyYoung / PitchSeasons",
        "CyShr%" : "CyShares / PitchSeasons",
        "MVP%" : "MVP / RegularSeasons",
        "MVPShr%" : "MVPShares / RegularSeasons",
        "WS%" : "WS / UniqueSeasons"
    }
}

league_data_mapping = {
    "Batter" : {
        "Cycle" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "MVP" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "MVPShares" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "MVPShr%" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "ROY" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "RBI" : {
            "AA" : {
                "inconsistent" : 1885,
                "inconsistent-game" : 1885
            },
            "UA" : {
                "season" : 1885,
                "game" : 1885
            }
        },
        "RBI/162" : {
            "AA-UA" : {
                "inconsistent" : 1885,
                "inconsistent-game" : 1885
            }
        },
        "SH" : {
            "AA-UA-PL-NA" : {
                "season" : 1914,
                "game" : 1914
            }
        },
        "SF" : {
            "AA-UA-PL-NA-FL-NNL-ECL-ANL-NSL-EWL" : {
                "season" : 1949,
                "game" : 1949
            },
            "NN2-NAL" : {
                "game" : 1943,
                "season" : 1943,
                "inconsistent" : 1944,
                "inconsistent-game" : 1944
            }
        },
        "SB" : {
            "AA-UA" : {
                "game" : 1886,
                "season" : 1886
            }
        },
        "SB/162" : {
            "AA-UA" : {
                "game" : 1886,
                "season" : 1886
            }
        },
        "CS" : {
            "AA-UA-PL-FL-NNL-ANL-NSL-EWL-NN2" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1929,
                "inconsistent-game" : 1929
            },
            "NAL" : {
                "game" : 1945,
                "season" : 1945,
                "inconsistent" : 1949,
                "inconsistent-game" : 1949
            }
        },
        "NS" : {
            "AA-UA-PL-FL-NNL-ANL-NSL-EWL-NN2" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1929,
                "inconsistent-game" : 1929
            },
            "NAL" : {
                "game" : 1945,
                "season" : 1945,
                "inconsistent" : 1949,
                "inconsistent-game" : 1949
            }
        },
        "SB%" : {
            "AA-UA-PL-FL-NNL-ANL-NSL-EWL-NN2" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1929,
                "inconsistent-game" : 1929
            },
            "NAL" : {
                "game" : 1945,
                "season" : 1945,
                "inconsistent" : 1949,
                "inconsistent-game" : 1949
            }
        },
        "wSB" : {
            "AA-UA-PL-FL-NNL-ANL-NSL-EWL-NN2" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1929,
                "inconsistent-game" : 1929
            },
            "NAL" : {
                "game" : 1945,
                "season" : 1945,
                "inconsistent" : 1946,
                "inconsistent-game" : 1946
            }
        },
        "IBB" : {
            "AA-UA-PL-NA-FL-NNL-ECL-ANL-NSL-EWL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2-NAL" : {
                "game" : 1945,
                "season" : 1945,
                "inconsistent" : 1946,
                "inconsistent-game" : 1946
            }
        },
        "HBP" : {
            "AA-UA-NA" : {
                "game" : 1884,
                "season" : 1884
            },
            "NNL" : {
                "inconsistent" : 1924,
                "inconsistent-game" : 1924
            },
            "NN2-NAL" : {
                "game" : 1943,
                "season" : 1943,
                "inconsistent" : 1944,
                "inconsistent-game" : 1944
            }
        },
        "SO" : {
            "AA-UA" : {
                "game" : 1890,
                "season" : 1890,
                "inconsistent" : 1891,
                "inconsistent-game" : 1891
            },
            "NNL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1927,
                "inconsistent-game" : 1927
            }
        },
        "SO/162" : {
            "AA-UA" : {
                "game" : 1890,
                "season" : 1890,
                "inconsistent" : 1891,
                "inconsistent-game" : 1891
            },
            "NNL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1927,
                "inconsistent-game" : 1927
            }
        },
        "SO%" : {
            "AA-UA" : {
                "game" : 1890,
                "season" : 1890,
                "inconsistent" : 1891,
                "inconsistent-game" : 1891
            },
            "NNL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1927,
                "inconsistent-game" : 1927
            }
        },
        "BB-SO%" : {
            "AA-UA" : {
                "game" : 1890,
                "season" : 1890,
                "inconsistent" : 1891,
                "inconsistent-game" : 1891
            },
            "NNL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1927,
                "inconsistent-game" : 1927
            }
        },
        "BB/SO" : {
            "AA-UA" : {
                "game" : 1890,
                "season" : 1890,
                "inconsistent" : 1891,
                "inconsistent-game" : 1891
            },
            "NNL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1927,
                "inconsistent-game" : 1927
            }
        },
        "TTO%" : {
            "AA-UA" : {
                "game" : 1890,
                "season" : 1890,
                "inconsistent" : 1891,
                "inconsistent-game" : 1891
            },
            "NNL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            },
            "ECL" : {
                "game" : 1926,
                "season" : 1926,
                "inconsistent" : 1927,
                "inconsistent-game" : 1927
            }
        },
        "GDP" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "WPA" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "cWPA" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "WPA/162" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "cWPA/162" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "REW" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "RE24" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "WPA/LI" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "SO%+" : {
            "AL" : {
                "game" : 1910,
                "season" : 1910
            },
            "NL" : {
                "game" : 1913,
                "season" : 1913
            }
        },
        "BB-SO%+" : {
            "AL" : {
                "game" : 1910,
                "season" : 1910
            },
            "NL" : {
                "game" : 1913,
                "season" : 1913
            }
        },
        "BB/SO+" : {
            "AL" : {
                "game" : 1910,
                "season" : 1910
            },
            "NL" : {
                "game" : 1913,
                "season" : 1913
            }
        },
        "TTO%+" : {
            "AL" : {
                "game" : 1910,
                "season" : 1910
            },
            "NL" : {
                "game" : 1913,
                "season" : 1913
            }
        },
        "BAbip+" : {
            "AL" : {
                "game" : 1910,
                "season" : 1910
            },
            "NL" : {
                "game" : 1913,
                "season" : 1913
            }
        },
        "Inn" : {
            "FL" : {
                "inconsistent" : 1914,
                "inconsistent-game" : 1914
            },
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        },
        "A" : {
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        },
        "E" : {
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        },
        "Fld%" : {
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        },
        "FldStolenBases" : {
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            },
            "ECL-NSL" : {
                "game" : 1926,
                "season" : 1926
            }
        },
        "FldCaughtStealing" : {
             "NNL-ECL-NSL-ANL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "FldCaughtStealing%" : {
             "NNL-ECL-NSL-ANL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        }
    },
    "Pitcher" : {
        "NoHit" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "Prfct" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "MVP" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "MVPShares" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "MVPShr%" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "ROY" : {
            "FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "QS" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "QS%" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "HLD" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "BSv" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "SV%" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "GSc" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "GSc/GS" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "IP/GS" : {
            "NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "SB" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "SB/162" : {
           "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "CS" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "NS" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "SB%" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "wSB" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "IBB" : {
            "AA-UA-PL-NA-FL-NNL-ECL-ANL-NSL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2" : {
                "game" : 1937,
                "season" : 1937,
                "inconsistent" : 1949,
                "inconsistent-game" : 1949
            },
            "NAL" : {
                "game" : 1937,
                "season" : 1937,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            }
        },
        "HBP" : {
            "AA-UA-NA" : {
                "game" : 1884,
                "season" : 1884
            }
        },
        "GDP" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "AB" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "BF" : {
            "ECL" : {
                "game" : 1925,
                "season" : 1925,
                "inconsistent" : 1923,
                "inconsistent-game" : 1923
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            },
            "NSL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            }
        },
        "1B" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "2B" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "3B" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "HR" : {
            "NNL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NSL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NAL" : {
                "game" : 1937,
                "season" : 1937,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            }
        },
        "TB" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "XBH" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "XBH%" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "X/H%" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "HR%" : {
            "ECL" : {
                "game" : 1925,
                "season" : 1925,
                "inconsistent" : 1923,
                "inconsistent-game" : 1923
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            },
            "NSL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            }
        },
        "SO-BB%" : {
            "ECL" : {
                "game" : 1925,
                "season" : 1925,
                "inconsistent" : 1923,
                "inconsistent-game" : 1923
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            },
            "NSL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            }
        },
        "SO%" : {
            "ECL" : {
                "game" : 1925,
                "season" : 1925,
                "inconsistent" : 1923,
                "inconsistent-game" : 1923
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            },
            "NSL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            }
        },
        "BB%" : {
            "ECL" : {
                "game" : 1925,
                "season" : 1925,
                "inconsistent" : 1923,
                "inconsistent-game" : 1923
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            },
            "NSL" : {
                "game" : 1949,
                "season" : 1949
            },
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            }
        },
        "PO" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "BA" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "OBP" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "SLG" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "OPS" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "wOBA" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "BAbip" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "ISO" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "wRC" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "wRAA" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "BRuns" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "wRC+" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "WPA" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "cWPA" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "REW" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "RE24" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "WPA/LI" : {
            "AA-UA-PL-FL-NNL-ECL-ANL-NSL-EWL-NN2-NAL" : {
                "game" : 1949,
                "season" : 1949
            }
        },
        "Inn" : {
            "FL" : {
                "inconsistent" : 1914,
                "inconsistent-game" : 1914
            },
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        },
        "A" : {
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        },
        "E" : {
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        },
        "Fld%" : {
            "NN2-NAL" : {
                "game" : 1933,
                "season" : 1933,
                "inconsistent" : 1947,
                "inconsistent-game" : 1947
            },
            "NSL" : {
                "game" : 1933,
                "season" : 1933
            },
            "ECL" : {
                "game" : 1923,
                "season" : 1923,
                "inconsistent" : 1926,
                "inconsistent-game" : 1926
            },
            "NNL" : {
                "game" : 1920,
                "season" : 1920,
                "inconsistent" : 1931,
                "inconsistent-game" : 1931
            }
        }
    }
}

leagues_to_id = {
    "National League" : "NL",
    "American League" : "AL",
    "Federal League" : "FL",
    "American Association" : "AA",
    "Players League" : "PL",
    "Union Association" : "UA",
    "National Association" : "NA",
    "Negro National League" : "NNL",
    "Negro National League II" : "NN2",
    "Negro American League" : "NAL",
    "Eastern Colored League" : "ECL",
    "American Negro League" : "ANL",
    "East-West League" : "EWL",
    "Negro Southern League" : "NSL"
}

qualifier_map = {
    "Rookie" : {},
    "Facing Former Team" : {},
    "Facing Former Franchise" : {},
    "Decision" : {},
    "Age" : {},
    "Season Age" : {},
    "Round" : {
        "ws" : "World Series",
        "cs" : "Championship Series",
        "ds" : "Division Series",
        "wc" : "Wild Card"
    },
    "Time" : {
        "d" : "Day",
        "n" : "Night"
    },
    "Series Game" : {},
    "Location" : {
        "home" : "Home",
        "away" : "Away"
    },
    "Temperate Season" : {},
    "Team" : {},
    "Opponent" : {},
    "Team Franchise" : {},
    "Opponent Franchise" : {},
    "Start" : {
        True : "Only Starts",
        False : "No Starts"
    },
    "Stadium" : {},
    "Exact Stadium" : {},
    "Team Stadium" : {},
    "Franchise Stadium" : {},
    "Pitch Type" : {},
    "Exact Pitch Type" : {},
    "Event Time" : {},
    "Start Time" : {},
    "Local Start Time" : {},
    "Team Start Time" : {},
    "Opponent Start Time" : {},
    "Event Type" : {},
    "Local Event Time" : {},
    "Team Event Time" : {},
    "Opponent Event Time" : {},
    "Event DateTime" : {},
    "Local Event DateTime" : {},
    "Team Event DateTime" : {},
    "Opponent Event DateTime" : {},
    "Exact Event Type" : {},
    "Previous Event Type" : {},
    "Previous Exact Event Type" : {},
    "Previous Player Event Type" : {},
    "Previous Exact Player Event Type" : {},
    "Upcoming Player Event Type" : {},
    "Upcoming Exact Player Event Type" : {},
    "Upcoming Event Type" : {},
    "Upcoming Exact Event Type" : {},
    "City" : {},
    "Exact City" : {},
    "State" : {},
    "Exact State" : {},
    "Time Zone" : {},
    "Exact Time Zone" : {},
    "Country" : {},
    "Exact Country" : {},
    "Team City" : {},
    "Team Exact City" : {},
    "Team State" : {},
    "Team Exact State" : {},
    "Team Time Zone" : {},
    "Team Exact Time Zone" : {},
    "Team Country" : {},
    "Team Exact Country" : {},
    "Opponent City" : {},
    "Opponent Exact City" : {},
    "Opponent State" : {},
    "Opponent Exact State" : {},
    "Opponent Time Zone" : {},
    "Opponent Exact Time Zone" : {},
    "Opponent Country" : {},
    "Opponent Exact Country" : {},
    "Event Description" : {},
    "Exact Event Description" : {},
    "Finished" : {},
    "Month" : {},
    "Temperature" : {},
    "Wind" : {},
    "Umpire" : {},
    "Home Plate Umpire" : {},
    "Exact Umpire" : {},
    "Exact Home Plate Umpire" : {},
    "Moon Phase" : {},
    "Surface" : {},
    "Condition" : {},
    "Day" : {},
    "Date" : {},
    "Dates" : {},
    "Year" : {},
    "Even Year" : {},
    "Odd Year" : {},
    "Calendar Year" : {},
    "Even Calendar Year" : {},
    "Odd Calendar Year" : {},
    "Birthday" : {
        True : "Birthday",
        False : "Not Birthday"
    },
    "First Half" : {},
    "Second Half" : {},
    "Pre All-Star" : {},
    "Post All-Star" : {},
    "Sub Query" : {},
    "Event Sub Query" : {},
    "Or Sub Query" : {},
    "Or Event Sub Query" : {},
    "Day Of Sub Query" : {},
    "Day After Sub Query" : {},
    "Day Before Sub Query" : {},
    "Game After Sub Query" : {},
    "Game Before Sub Query" : {},
    "Season Sub Query" : {},
    "Or Season Sub Query" : {},
    "Season After Sub Query" : {},
    "Season Before Sub Query" : {},
    "Playing With" : {},
    "Playing Against" : {},
    "Previous Playing With" : {},
    "Previous Playing Against" : {},
    "Upcoming Playing With" : {},
    "Upcoming Playing Against" : {},
    "Playing Same Game" : {},
    "Playing Same Opponents" : {},
    "Playing Same Date" : {},
    "Result" : {},
    "Save Situation" : {},
    "Inning Entered" : {},
    "Score Margin Entered" : {},
    "Score Difference Entered" : {},
    "Outs Entered" : {},
    "Outs Remaining Entered" : {},
    "Men On Base Entered" : {},
    "Men In Scoring Entered" : {},
    "Team Score" : {},
    "Ending Team Score" : {},
    "Run Support" : {},
    "Opponent Score" : {},
    "Ending Opponent Score" : {},
    "Series Team Wins" : {},
    "Series Opponent Wins" : {},
    "Series Score Margin" : {},
    "Series Score Difference" : {},
    "Elimination" : {},
    "Clinching" : {},
    "Elimination Or Clinching" : {},
    "Winner Take All" : {},
    "Behind In Series" : {},
    "Ahead In Series" : {},
    "Even In Series" : {},
    "Score Margin" : {},
    "Ending Score Margin" : {},
    "Score Difference" : {},
    "Ending Score Difference" : {},
    "Previous Team Score" : {},
    "Previous Opponent Score" : {},
    "Previous Score Margin" : {},
    "Previous Score Difference" : {},
    "Upcoming Team Score" : {},
    "Upcoming Opponent Score" : {},
    "Upcoming Score Margin" : {},
    "Upcoming Score Difference" : {},
    "Final Team Score" : {},
    "Pitch Count" : {},
    "Pitcher Batters Faced" : {},
    "Batter Plate Appearance" : {},
    "Pitcher Batters Faced Reversed" : {},
    "Batter Plate Appearance Reversed" : {},
    "Pitcher First Batter Faced" : {},
    "Batter First Plate Appearance" : {},
    "Pitcher Last Batter Faced" : {},
    "Batter Last Plate Appearance" : {},
    "Starting Pitch Count" : {},
    "At Bat Pitch Count" : {},
    "Game Pitch Count" : {},
    "Team Pitch Count" : {},
    "Innings Pitched" : {},
    "Ending Innings Pitched" : {},
    "Time Facing Opponent" : {},
    "Number Of Men On Base" : {},
    "Number Of Men In Scoring" : {},
    "Time Through Lineup" : {},
    "Final Opponent Score" : {},
    "Final Score Margin" : {},
    "Final Score Difference" : {},
    "Batting Order Position" : {},
    "Season" : {},
    "Season Reversed" : {},
    "Season Index" : {},
    "Season Index Reversed" : {},
    "Season Game" : {},
    "Individual Event Stat" : {},
    "Event Stat" : {},
    "Event Stat Reversed" : {},
    "Event Stats" : {},
    "Event Stats Reversed" : {},
    "Game Event Stat" : {},
    "Game Event Stat Reversed" : {},
    "Game Event Stats" : {},
    "Game Event Stats Reversed" : {},
    "Starting Event Stat" : {},
    "Starting Event Stat Reversed" : {},
    "Starting Event Stats" : {},
    "Starting Event Stats Reversed" : {},
    "Starting Game Event Stat" : {},
    "Starting Game Event Stat Reversed" : {},
    "Starting Game Event Stats" : {},
    "Starting Game Event Stats Reversed" : {},
    "Career Game" : {},
    "Team Game" : {},
    "Career Game Reversed" : {},
    "Season Game Reversed" : {},
    "Team Game Reversed" : {},
    "Days Rest" : {},
    "Starts Days Rest" : {},
    "Upcoming Starts Days Rest" : {},
    "Upcoming Days Rest" : {},
    "Games Rest" : {},
    "Starts Rest" : {},
    "Game Days Rest" : {},
    "Start Days Rest" : {},
    "Days In A Row" : {},
    "Games In A Row" : {},
    "Game Days In A Row" : {},
    "Start Days In A Row" : {},
    "Starts In A Row" : {},
    "Games In Days" : {},
    "Starts In Days" : {},
    "Season Number" : {},
    "Game Number" : {},
    "Winning Opponent" : {},
    "Losing Opponent" : {},
    "Tied Opponent" : {},
    "Winning Or Tied Opponent" : {},
    "Losing Or Tied Opponent" : {},
    "Current Winning Opponent" : {},
    "Current Losing Opponent" : {},
    "Current Tied Opponent" : {},
    "Current Winning Or Tied Opponent" : {},
    "Current Losing Or Tied Opponent" : {},
    "Playoff Opponent" : {},
    "WS Winner Opponent" : {},
    "Pennant Winner Opponent" : {},
    "Division Winner Opponent" : {},
    "Opponent Wins" : {},
    "Opponent Losses" : {},
    "Opponent Games Over 500" : {},
    "Opponent Win Percentage" : {},
    "Current Opponent Wins" : {},
    "Current Opponent Losses" : {},
    "Current Opponent Games Over 500" : {},
    "Current Opponent Win Percentage" : {},
    "Attendance" : {},
    "Opponent Standings Rank" : {},
    "Opponent Runs Rank" : {},
    "Opponent Runs Allowed Rank" : {},
    "Opponent wRC+ Rank" : {},
    "Opponent ERA- Rank" : {},
    "Opponent ERA Rank" : {},
    "Opponent AVG Rank" : {},
    "Opponent SLG Rank" : {},
    "Opponent OBP Rank" : {},
    "Opponent OPS Rank" : {},
    "Activated From IL" : {},
    "Activated" : {},
    "Winning Team" : {},
    "Losing Team" : {},
    "Tied Team" : {},
    "Winning Or Tied Team" : {},
    "Losing Or Tied Team" : {},
    "Current Winning Team" : {},
    "Current Losing Team" : {},
    "Current Tied Team" : {},
    "Current Winning Or Tied Team" : {},
    "Current Losing Or Tied Team" : {},
    "Playoff Team" : {},
    "WS Winner Team" : {},
    "Pennant Winner Team" : {},
    "Division Winner Team" : {},
    "Team Wins" : {},
    "Team Losses" : {},
    "Team Games Over 500" : {},
    "Team Win Percentage" : {},
    "Current Team Wins" : {},
    "Current Team Losses" : {},
    "Current Team Games Over 500" : {},
    "Current Team Win Percentage" : {},
    "Team Standings Rank" : {},
    "Team Runs Rank" : {},
    "Team Runs Allowed Rank" : {},
    "Team wRC+ Rank" : {},
    "Team AVG Rank" : {},
    "Team SLG Rank" : {},
    "Team OBP Rank" : {},
    "Team OPS Rank" : {},
    "Team ERA- Rank" : {},
    "Team ERA Rank" : {},
    "Previous Team" : {},
    "Upcoming Team" : {},
    "Previous Opponent" : {},
    "Upcoming Opponent" : {},
    "Previous Team Franchise" : {},
    "Upcoming Team Franchise" : {},
    "Previous Opponent Franchise" : {},
    "Upcoming Opponent Franchise" : {},
    "Previous Same Opponent" : {},
    "Upcoming Same Opponent" : {},
    "Team League" : {},
    "Opponent League" : {},
    "Previous Team League" : {},
    "Previous Opponent League" : {},
    "Upcoming Team League" : {},
    "Upcoming Opponent League" : {},
    "Interleague" : {},
    "Intraleague" : {},
    "Team Division" : {},
    "Opponent Division" : {},
    "Interdivision" : {},
    "Intradivision" : {},
    "Primary Season Position" : {},
    "Season Position" : {},
    "Position" : {},
    "PH For Position" : {},
    "Facing Pitcher" : {},
    "Facing Position Player" : {},
    "Facing Position" : {},
    "Facing PH For Position" : {},
    "Facing Main Position" : {},
    "Facing Primary Position" : {},
    "Primary Game Position" : {},
    "Game Position" : {},
    "Batting Against" : {},
    "Pitching Against" : {},
    "Batting Against First Name" : {},
    "Pitching Against First Name" : {},
    "Batting Against Birth Name" : {},
    "Pitching Against Birth Name" : {},
    "Batting Against First Or Birth Name" : {},
    "Pitching Against First Or Birth Name" : {},
    "Batting Against Last Name" : {},
    "Pitching Against Last Name" : {},
    "Batting Against Birth Country" : {},
    "Pitching Against Birth Country" : {},
    "Facing Stat Rank" : {},
    "Facing League Stat Rank" : {},
    "Facing AL Stat Rank" : {},
    "Facing NL Stat Rank" : {},
    "Facing Stat Percent" : {},
    "Facing League Stat Percent" : {},
    "Facing AL Stat Percent" : {},
    "Facing NL Stat Percent" : {},
    "Facing Stat" : {},
    "Facing AL Stat" : {},
    "Facing NL Stat" : {},
    "Batting Behind Stat Rank" : {},
    "Batting Behind League Stat Rank" : {},
    "Batting Behind AL Stat Rank" : {},
    "Batting Behind NL Stat Rank" : {},
    "Batting Behind Stat Percent" : {},
    "Batting Behind League Stat Percent" : {},
    "Batting Behind AL Stat Percent" : {},
    "Batting Behind NL Stat Percent" : {},
    "Batting Behind Stat" : {},
    "Batting Behind AL Stat" : {},
    "Batting Behind NL Stat" : {},
    "Batting In Front Of Stat Rank" : {},
    "Batting In Front Of League Stat Rank" : {},
    "Batting In Front Of AL Stat Rank" : {},
    "Batting In Front Of NL Stat Rank" : {},
    "Batting In Front Of Stat Percent" : {},
    "Batting In Front Of League Stat Percent" : {},
    "Batting In Front Of AL Stat Percent" : {},
    "Batting In Front Of NL Stat Percent" : {},
    "Batting In Front Of Stat" : {},
    "Batting In Front Of AL Stat" : {},
    "Batting In Front Of NL Stat" : {},
    "Batting Next To Stat Rank" : {},
    "Batting Next To League Stat Rank" : {},
    "Batting Next To AL Stat Rank" : {},
    "Batting Next To NL Stat Rank" : {},
    "Batting Next To Stat Percent" : {},
    "Batting Next To League Stat Percent" : {},
    "Batting Next To AL Stat Percent" : {},
    "Batting Next To NL Stat Percent" : {},
    "Batting Next To Stat" : {},
    "Batting Next To AL Stat" : {},
    "Batting Next To NL Stat" : {},
    "Driven In" : {},
    "Batted In" : {},
    "Back To Back With" : {},
    "Batting Behind" : {},
    "Batting In Front Of" : {},
    "Batting Next To" : {},
    "Caught By" : {},
    "Stealing On" : {},
    "On Field With" : {},
    "On Field Against" : {},
    "Bases Empty" : {},
    "Men On Base" : {},
    "RISP" : {},
    "Batter Reached Base" : {},
    "National Game" : {},
    "Any National Game" : {},
    "TV Network" : {},
    "Radio Network" : {},
    "Exact TV Network" : {},
    "Exact Radio Network" : {},
    "National TV Network" : {},
    "National Exact TV Network" : {},
    "Any National TV Network" : {},
    "Any National Exact TV Network" : {},
    "Day After Pitching" : {},
    "Day After Hitting" : {},
    "Day Before Pitching" : {},
    "Day Before Hitting" : {},
    "With New Team" : {},
    "With New Franchise" : {},
    "Stealing Second" : {},
    "Stealing Third" : {},
    "Stealing Home" : {},
    "Fastball" : {},
    "Offspeed" : {},
    "Breaking" : {},
    "Bunting" : {},
    "Pinch Hitting" : {},
    "Facing Starter" : {},
    "Facing Reliever" : {},
    "Leading Off Inning" : {},
    "Leading Off Game" : {},
    "Leading Off Whole Game" : {},
    "Facing Lefty" : {},
    "Facing Righty" : {},
    "Facing Rookie"  : {},
    "Facing Qualified Rookie" : {},
    "Platoon Advantage" : {},
    "Pitching Lefty" : {},
    "Pitching Righty" : {},
    "Batting Lefty" : {},
    "Batting Righty" : {},
    "Inning Started" : {},
    "Swung At First Pitch" : {},
    "First Pitch" : {},
    "Batter Ahead" : {},
    "Even Count" : {},
    "Pitcher Ahead" : {},
    "After Batter Ahead" : {},
    "After Even Count" : {},
    "After Pitcher Ahead" : {},
    "Inside The Park HR" : {},
    "Walk Off" : {},
    "Walk Off Opportunity" : {},
    "Last Inning" : {},
    "Last Inning Entered" : {},
    "Last Out" : {},
    "Last Batter" : {},
    "Extra Innings" : {},
    "Game Tying" : {},
    "Close" : {},
    "Late" : {},
    "Game Tying Opportunity" : {},
    "Go Ahead" : {},
    "Go Ahead Opportunity" : {},
    "Go Ahead Or Game Tying" : {},
    "Go Ahead Or Game Tying Opportunity" : {},
    "Game Winning" : {},
    "Tying On First" : {},
    "Go Ahead On First" : {},
    "Tying On Second" : {},
    "Go Ahead On Second" : {},
    "Tying On Third" : {},
    "Go Ahead On Third" : {},
    "Tying On Deck" : {},
    "Go Ahead On Deck" : {},
    "Tying On Base" : {},
    "Go Ahead On Base" : {},
    "Tying At Bat" : {},
    "Go Ahead At Bat" : {},
    "Tying In Scoring" : {},
    "Go Ahead In Scoring" : {},
    "Go Ahead Or Tying On First" : {},
    "Go Ahead Or Tying On Second" : {},
    "Go Ahead Or Tying On Third" : {},
    "Go Ahead Or Tying On Deck" : {},
    "Go Ahead Or Tying On Base" : {},
    "Go Ahead Or Tying At Bat" : {},
    "Go Ahead Or Tying In Scoring" : {},
    "Bottom Inning" : {},
    "Top Inning" : {},
    "Bottom Inning Entered" : {},
    "Top Inning Entered" : {},
    "Full Count" : {},
    "Bases Loaded" : {},
    "Man On First" : {},
    "Man On Second" : {},
    "Man On Third" : {},
    "Teammate On First" : {},
    "Teammate On Second" : {},
    "Teammate On Third" : {},
    "Teammate On Base" : {},
    "Opponent On First" : {},
    "Opponent On Second" : {},
    "Opponent On Third" : {},
    "Opponent On Base" : {},
    "Inherited" : {},
    "Earned" : {},
    "Outs" : {},
    "Outs Remaining" : {},
    "Ending Outs" : {},
    "Strikes" : {},
    "Balls" : {},
    "After Strikes" : {},
    "After Balls" : {},
    "Swinging On Strikes" : {},
    "Swinging On Balls" : {},
    "After Swinging On Strikes" : {},
    "After Swinging On Balls" : {},
    "Runs" : {},
    "RBIs" : {},
    "Number Drove In" : {},
    "Play Outs" : {},
    "Pitch Speed" : {},
    "Pitch Spin" : {},
    "Pitch Zone" : {},
    "In Zone" : {},
    "Out Of Zone" : {},
    "Exit Velocity" : {},
    "Hit Distance" : {},
    "Hit Trajectory" : {},
    "Hit Location" : {},
    "Exact Hit Location" : {},
    "Hit Hardness" : {},
    "Launch Angle" : {},
    "Hit Coordinates" : {},
    "Hit X Coordinate" : {},
    "Hit Y Coordinate" : {},
    "Pitch Coordinates" : {},
    "Pitch X Coordinate" : {},
    "Pitch Y Coordinate" : {},
    "Absolute Pitch Coordinates" : {},
    "Absolute Pitch X Coordinate" : {},
    "Absolute Pitch Y Coordinate" : {},
    "Pitch Within Distance" : {},
    "Pitch Raw Within Distance" : {},
    "Pitch Absolute Within Distance" : {},
    "Hit Within Distance" : {},
    "Hit Raw Within Distance" : {},
    "Hit Absolute Within Distance" : {},
    "Inning" : {},
    "Inning Reversed" : {},
    "Scheduled Inning Reversed" : {},
    "Pitching Against Batting Order" : {},
    "Count" : {},
    "After Count" : {},
    "After Swinging On Count" : {},
    "Swinging On Count" : {},
    "Previous Location" : {
        "home" : "Home",
        "away" : "Away"
    },
    "Upcoming Location" : {
        "home" : "Home",
        "away" : "Away"
    },
    "Previous Result" : {},
    "Upcoming Result" : {},
    "Previous Team Result" : {},
    "Upcoming Team Result" : {},
    "Stat" : {},
    "Inning Stat" : {},
    "Previous Stat" : {},
    "Upcoming Stat" : {},
    "Season Stat" : {},
    "Previous Season Stat" : {},
    "Upcoming Season Stat" : {},
    "Formula" : {},
    "Season Formula" : {},
    "Event Formula" : {},
    "Max Streak Formula" : {},
    "Count Streak Formula" : {},
    "Total Games Stat" : {},
    "Min Stat" : {},
    "Max Stat" : {},
    "Max Streak" : {},
    "Count Streak" : {},
    "Max Stretch" : {},
    "Quickest" : {},
    "Slowest" : {},
    "Holiday" : {},
    "Double Header" : {
        "Both" : "Both Games",
        "First" : "First Game",
        "Second" : "Second Game",
        "Either" : "Either Game"
    },
    "Force Dates" : False
}

missing_player_data = {
    "ids" : [],
    "mlb_ids" : [],
    "quals" : [],
    "Player" : "No Player Match!",
    "id" : "No Player Match!",
    "mlb_id" : "No Player Match!",
    "Search Term" : None,
    "LastUpdated" : None,
    "player_image_url" : [],
    "player_current_team" : [],
    "player_position" : [],
    "player_flag" : [],
    "player_current_number" : [],
    "player_hof" : [],
    "has_season_stats" : True,
    "has_season_pitch_stats" : False,
    "has_award_stats" : True,
    "is_only_ws" : True,
    "is_only_cs" : True,
    "is_full_career" : False,
    "ind_type" : set(),
    "rows" : [],
    "seperate_rows" : [],
    "DateStart" : [],
    "DateEnd" : [],
    "Birthday" : None,
    "Deathday" : None,
    "stat_values" : {
        "Player" : ["No Player Match!"],
        "any_missing_games" : [],
        "any_missing_pitch" : [],
        "any_missing_salary" : False,
        "any_missing_inf" : False,
        "is_playoffs" : False,
        "Raw Player" : "No Player Found!",
        "Raw Range" : "No Matching Games!",
        "Raw Time" : "",
        "Raw Quals" : ""
    }
}

advanced_stats = {
    "Batter" : [
        "wSB",
        "wRC",
        "wRAA",
        "BRuns",
        "wRC+",
        "OBP+",
        "BA+",
        "SLG+",
        "SO%+",
        "BB/SO+",
        "BB%+",
        "HR%+",
        "TTO%+",
        "XBH%+",
        "X/H%+",
        "BB-SO%+",
        "ISO+",
        "BAbip+",
        "wOBA"
    ],
    "Pitcher" : [
        "FIP",
        "ERA-",
        "SO%+",
        "BB%+",
        "HR%+",
        "SO-BB%+",
        "SO9+",
        "H9+",
        "HR9+",
        "BB9+",
        "SO/BB+",
        "WHIP+",
        "FIP-"
    ]
}

team_renames = {
    "los angeles angels of anaheim" : "los angeles angels",
    "california angels" : "los angeles angels",
    "anaheim angels" : "los angeles angels",
    "brooklyn dodgers" : "los angeles dodgers",
    "tampa bay devil rays" : "tampa bay rays",
    "florida marlins" : "miami marlins"
}

playoff_format_history = [
    {
        "start" : None,
        "end" : 1902,
        "rounds" : [4]
    },
    {
        "start" : None,
        "end" : 1903,
        "rounds" : [5]
    },
    {
        "start" : 1904,
        "end" : 1918,
        "rounds" : [4]
    },
    {
        "start" : 1919,
        "end" : 1921,
        "rounds" : [5]
    },
    {
        "start" : 1922,
        "end" : 1968,
        "rounds" : [4]
    },
    {
        "start" : 1969,
        "end" : 1980,
        "rounds" : [3, 4]
    },
    {
        "start" : 1981,
        "end" : 1981,
        "rounds" : [3, 3, 4]
    },
    {
        "start" : 1982,
        "end" : 1984,
        "rounds" : [3, 4]
    },
    {
        "start" : 1985,
        "end" : 1993,
        "rounds" : [4, 4]
    },
    {
        "start" : 1994,
        "end" : 2011,
        "rounds" : [3, 4, 4]
    },
    {
        "start" : 2012,
        "end" : 2019,
        "rounds" : [3, 4, 4]
    },
    {
        "start" : 2020,
        "end" : 2020,
        "rounds" : [2, 3, 4, 4]
    },
    {
        "start" : 2021,
        "end" : None,
        "rounds" : [3, 4, 4]
    }
]

div_id_to_stat = {
    "Batter" : {
        "leaderboard_HR" : "HR",
        "leaderboard_RBI" : "RBI",
        "leaderboard_batting_avg" : "BA",
        "leaderboard_onbase_perc" : "OBP",
        "leaderboard_onbase_plus_slugging" : "OPS",
        "leaderboard_slugging_perc" : "SLG",
        "leaderboard_R" : "R",
        "leaderboard_H" : "H",
        "leaderboard_TB" : "TB",
        "leaderboard_1B" : "1B",
        "leaderboard_2B" : "2B",
        "leaderboard_BB" : "BB",
        "leaderboard_SB" : "SB",
        "leaderboard_stolen_base_perc" : "SB%",
        "leaderboard_caught_stealing_perc" : "CS%",
        "leaderboard_CS" : "CS",
        "leaderboard_G" : "G",
        "leaderboard_PA" : "PA",
        "leaderboard_AB" : "AB",
        "leaderboard_3B" : "3B",
        "leaderboard_IBB" : "IBB",
        "leaderboard_SO" : "SO",
        "leaderboard_XBH" : "XBH",
        "leaderboard_TOB" : "TOB",
        "leaderboard_HBP" : "HBP",
        "leaderboard_SH" : "SH",
        "leaderboard_SF" : "SF",
        "leaderboard_WAR" : "WAR",
        "leaderboard_GIDP" : "GDP",
        "leaderboard_at_bats_per_strikeout" : "AB/SO",
        "leaderboard_at_bats_per_home_run" : "AB/HR",
        "leaderboard_WAR_bat" : "WARPos",
        "leaderboard_WAR_pitch" : "WARPitch",
        "leaderboard_WAR_off" : "oWAR",
        "leaderboard_WAR_def" : "dWAR",
        "leaderboard_wpa_bat" : "WPA",
        "leaderboard_cwpa_bat" : "cWPA",
        "leaderboard_RC" : "RC",
        "leaderboard_abRuns" : "BtRuns",
        "leaderboard_abWins" : "BtWins",
        "leaderboard_offensive_winning_perc" : "OWn%",
        "leaderboard_onbase_plus_slugging_plus" : "OPS+",
        "leaderboard_power_speed_number" : "PwrSpd",
        "leaderboard_re24_bat" : "RE24",
        "leaderboard_tz_runs_total_tf" : "Rtot",
        "leaderboard_rew_bat" : "REW",
        "leaderboard_wpa_li_bat" : "WPA/LI",
        "leaderboard_Salary" : "Salary",
        "leaderboard_mvp" : "MVP",
        "leaderboard_Oldest" : "Old",
        "leaderboard_Youngest" : "Young"

    }, "Pitcher" : {
        "leaderboard_W" : "W",
        "leaderboard_L" : "L",
        "leaderboard_earned_run_avg" : "ERA",
        "leaderboard_fip" : "FIP",
        "leaderboard_SO_p" : "SO",
        "leaderboard_BB_p" : "BB",
        "leaderboard_HBP_p" : "HBP",
        "leaderboard_batters_faced" : "BF",
        "leaderboard_strikeouts_per_base_on_balls" : "SO/BB",
        "leaderboard_H_p" : "H",
        "leaderboard_IP" : "IP",
        "leaderboard_SV" : "SV",
        "leaderboard_win_loss_perc" : "W/L%",
        "leaderboard_SV" : "SV%",
        "leaderboard_CG" : "CG",
        "leaderboard_SHO" : "SHO",
        "leaderboard_whip" : "WHIP",
        "leaderboard_bases_on_balls_per_nine" : "BB9",
        "leaderboard_home_runs_per_nine" : "HR9",
        "leaderboard_hits_per_nine" : "H9",
        "leaderboard_strikeouts_per_nine" : "SO9",
        "leaderboard_G_p" : "G",
        "leaderboard_IP_p" : "IP",
        "leaderboard_GS" : "GS",
        "leaderboard_SHO" : "SHO",
        "leaderboard_WAR" : "WAR",
        "leaderboard_WAR_bat" : "WARPos",
        "leaderboard_WAR_pitch" : "WARPitch",
        "leaderboard_earned_run_avg_plus" : "ERA+",
        "leaderboard_WAR_off" : "oWAR",
        "leaderboard_WAR_def" : "dWAR",
        "leaderboard_wpa_def" : "WPA",
        "leaderboard_cwpa_def" : "cWPA",
        "leaderboard_re24_def" : "RE24",
        "leaderboard_apRuns" : "PtchR",
        "leaderboard_apWins" : "PtchW",
        "leaderboard_rew_def" : "REW",
        "leaderboard_wpa_li_def" : "WPA/LI",
        "leaderboard_Salary" : "Salary",
        "leaderboard_mvp" : "MVP",
        "leaderboard_cyyoung" : "CyYoung",
        "leaderboard_Oldest" : "Old",
        "leaderboard_Youngest" : "Young"
    }
}

manual_awards_map = {}
manual_players = {
}

missing_mlb_schedule_games = {
    1981 : {
        113 : {
            180497 : {
                "date" : "1981-04-08",
                "index" : 0
            }
        },
        143 : {
            180497 : {
                "date" : "1981-04-08",
                "index" : 0
            }
        }
    }
}

logname = "mlb.log"
logger = logging.getLogger("mlb")
logger.setLevel(logging.INFO)
formatter = logging.Formatter(fmt='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
handler = TimedRotatingFileHandler(logname, when="midnight", interval=1)
handler.suffix = "%Y%m%d"
handler.setFormatter(formatter)
logger.addHandler(handler)
streamhandler = logging.StreamHandler(sys.stdout)
streamhandler.setLevel(logging.DEBUG)
logger.addHandler(streamhandler)

main_page_url_format = "https://www.baseball-reference.com/players/{}/{}.shtml"
register_url_format = "https://www.baseball-reference.com/register/player.fcgi?id={}"
advanced_page_url_format = "https://www.baseball-reference.com/players/{}/{}-{}.shtml"
player_search_url_format = "https://www.baseball-reference.com/search/search.fcgi?search={}"
game_splits_url_format = "https://www.baseball-reference.com/players/gl.fcgi?id={}&t={}&year={}"
playoffs_url_format = "https://www.baseball-reference.com/players/gl.fcgi?id={}&t={}&post=1"
team_schedule_url_format = "https://www.baseball-reference.com/teams/{}/{}-schedule-scores.shtml"
opponent_schedule_url_format = "https://www.baseball-reference.com/leagues/MLB/{}-standings.shtml"
opponent_schedule_main_url_format = "https://www.baseball-reference.com/leagues/MLB/{}.shtml"
sum_stats_format = "https://www.baseball-reference.com/tools/span_stats.cgi?html=1&page_id={}&table_id={}&range={}&plink=1"
total_schedule_url = "https://www.baseball-reference.com/leagues/MLB/{}-schedule.shtml"
team_roster_url_format = "https://statsapi.mlb.com/api/v1/teams/{}/roster?season={}&hydrate=person"
mlb_team_schedule_url_format = "https://statsapi.mlb.com/api/v1/schedule?teamId={}&season={}&sportId=1&gameType=R,F,D,L,W"
mlb_team_schedule_url_date_format = "https://statsapi.mlb.com/api/v1/schedule?teamId={}&startDate={}&endDate={}&sportId=1&gameType=R,F,D,L,W"
mlb_player_schedule_url_format = "https://statsapi.mlb.com/api/v1/people/{}/stats?stats=gameLog&season={}&gameType=R,F,D,L,W"
mlb_leaderboard_query = "https://bdfed.stitch.mlbinfra.com/bdfed/stats/player?stitch_env=prod&&season={}&playerPool={}&sportId=1&stats=season&group={}&gameType=R&limit={}&offset={}&sortStat={}&order={}"
mlb_leaderboard_query_no_sort = "https://bdfed.stitch.mlbinfra.com/bdfed/stats/player?stitch_env=prod&&season={}&playerPool={}&sportId=1&stats=season&group={}&gameType=R&limit={}&offset={}"

totals = None
with open("yearly_totals.json", "r") as file:
    totals = json.load(file)

constants = None
with open("yearly_constants.json", "r") as file:
    constants = json.load(file)

park_factors = None
with open("yearly_park_factors.json", "r") as file:
    park_factors = json.load(file)

all_star_games = None
with open("all_star_games.json", "r") as file:
    file.seek(0)
    all_star_games = json.load(file)

special_stats = None
with open("special_stats.json", "r") as file:
    special_stats = json.load(file)

cpis = None
with open("cpis.json", "r") as file:
    cpis = json.load(file)

css_string = None
with open ("mlb.css", "r") as file:
    css_string = file.read()

team_colors = None
with open ("../team_colors.json", "r") as file:
    team_colors = json.load(file)

team_ids = None
with open ("team_ids.json", "r") as file:
    team_ids = json.load(file)

team_abbr = None
with open ("team_abr.json", "r") as file:
    team_abbr = json.load(file)

team_name_info = None
with open ("team_name_info.json", "r") as file:
    team_name_info = json.load(file)

teams_to_league = None
with open ("teams_to_league.json", "r") as file:
    teams_to_league = json.load(file)

team_main_abbr = None
with open ("team_main_abbr.json", "r") as file:
    team_main_abbr = json.load(file)

team_venues = None
with open ("team_venues.json", "r") as file:
    team_venues = json.load(file)

team_venue_history = None
with open ("team_venue_history.json", "r") as file:
    team_venue_history = json.load(file)

manual_id_maps = None
with open ("manual_id_maps.json", "r") as file:
    manual_id_maps = json.load(file)

event_type_stat_mappings = None
with open ("event_type_stat_mappings.json", "r") as file:
    event_type_stat_mappings = json.load(file)

all_event_types = [event_type_stat_mapping.lower().replace("_", "-") for event_type_stat_mapping in event_type_stat_mappings]
all_event_types.extend(["out", "hit", "inplay"])
all_event_types_re = r"(?:" + "|".join([all_event_type + ";?" for all_event_type in all_event_types]) + r")+"

ssl._create_default_https_context = ssl._create_unverified_context

def main():
    """The main function."""

    manual_comment_short = "c"
    manual_comment_long = "comment"
    debug_mode_short = "d"
    debug_mode_long = "debug"
    try:
        options = getopt.getopt(sys.argv[1:], manual_comment_short + ":" + debug_mode_short + ":", [manual_comment_long + "=", debug_mode_long + "="])[0]
    except getopt.GetoptError as err:
        logger.error("Encountered error \"" + str(err) + "\" parsing arguments")
        return

    reddit = praw.Reddit("mlbcomparebot")
 
    subreddit = reddit.subreddit("+".join(subreddits_to_crawl))
    #subreddit = reddit.subreddit("pythonforengineers")

    conn = sqlite3.connect("mlb.db")
    try:
        with conn:
            curr = conn.cursor()
            
            curr.execute("SELECT COUNT(*) FROM sqlite_master WHERE type=\"table\" AND name=\"mlb\";")
            
            numtables = int(curr.fetchone()[0])

            if not numtables:
                logger.info("mlb table missing. Creating...")
                curr.execute("CREATE TABLE mlb (reply_id TEXT PRIMARY KEY, reply_comment_id TEXT, reply_author TEXT NOT NULL, subreddit TEXT NOT NULL, original_comment TEXT, was_successful BOOLEAN NOT NULL CHECK (was_successful IN (0,1)), was_deleted BOOLEAN NOT NULL CHECK (was_deleted IN (0,1)), timestamp INTEGER NOT NULL);")
                curr.execute("SELECT COUNT(*) FROM sqlite_master WHERE type=\"table\" AND name=\"mlb\";")
                numtables = int(curr.fetchone()[0])
                if numtables:
                    logger.info("mlb table created!")
                else:
                    raise Exception("Error creating table!")
    finally:
        conn.close()

    for opt, arg in options:
        if opt in ("-" + manual_comment_short, "--" + manual_comment_long):
            comment = reddit.comment(id=arg.strip())
            if not comment.archived and comment.author and not comment.author.name.lower() in blocked_users:
                if re.search(r"!\bmlbcompare(?:bot)?\b", comment.body, re.IGNORECASE):
                    logger.info("FOUND COMMENT " + str(comment.id))
                    parse_input(comment, False, comment.subreddit.display_name in approved_subreddits)
            return
        elif opt in ("-" + debug_mode_short, "--" + debug_mode_long):
            comment_str = arg.strip()
            comment = FakeComment(comment_str, "-1", "")
            if re.search(r"!\bmlbcompare(?:bot)?\b", comment.body, re.IGNORECASE):
                logger.info("FOUND COMMENT " + str(comment.id))
                parse_input(comment, True, False)
            return

    with ThreadPoolExecutor(max_workers=10) as executor:
        for comment in subreddit.stream.comments():
            if not comment.archived and comment.author and not comment.author.name.lower() in blocked_users:
                if re.search(r"!\bmlbcompare(?:bot)?\b", comment.body, re.IGNORECASE):
                    logger.info("FOUND COMMENT " + str(comment.id))
                    executor.submit(parse_input, comment, False, comment.subreddit.display_name in approved_subreddits)

def parse_input(comment, debug_mode, is_approved, existing_cur=None, existing_comment=None):
    try:
        start_time = datetime.datetime.now()
        logger.info("#" + str(threading.get_ident()) + "#   " + "THREAD STARTED FOR " + str(comment.id))
        logger.info("#" + str(threading.get_ident()) + "#   " + "COMMENT: " + comment.body)

        if existing_comment and not isinstance(existing_comment, Message):
            try:
                existing_comment.delete()
            except praw.exceptions.APIException as e:
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
            existing_comment = None

        if ignore_approved:
            is_approved = True

        manager = multiprocessing.Manager()
        comment_obj = manager.dict()
        comment_obj["comment"] = comment
        comment_obj["reply"] = existing_comment if not isinstance(existing_comment, Message) else None
        comment_obj["total_players"] = 0
        comment_obj["player_count"] = 0
        comment_obj["start_time"] = datetime.datetime.now(timezone("US/Eastern"))
        comment_obj["debug_mode"] = debug_mode
        comment_obj["is_approved"] = is_approved

        if existing_cur:
            sub_parse_input(existing_cur, comment, debug_mode, comment_obj, True)
        else:
            conn = sqlite3.connect("mlb.db")
            try:
                with conn:
                    curr = conn.cursor()
                    sub_parse_input(curr, comment, debug_mode, comment_obj, False)
            finally:
                conn.close()
    except BaseException as e:
        logger.error(traceback.format_exc())
        raise e
    finally:
        end_time = datetime.datetime.now() - start_time
        time_str = str(end_time)
        logger.info("#" + str(threading.get_ident()) + "#   " + "RunTime : " + time_str)

def sub_parse_input(curr, comment, debug_mode, comment_obj, force_through):
    curr.execute("SELECT 1 FROM mlb WHERE reply_id = ?;", (comment.id, ))
    if not curr.fetchone() or force_through:
        reddit_message = None
        last_updated = None
        imgur_link = None
        hide_table = False
        main_comment = None
        was_successful = 0
        try:
            main_comment = parse_comment_str(comment.body).group(0)

            player_type = {
                "da_type" : None
            }
            player_datas, last_updated, original_comment, hide_table, extra_stats = handle_player_string(comment.body, player_type, last_updated, hide_table, comment_obj)

            has_one_player = False
            for player_data in player_datas:
                if player_data["stat_values"]["Player"] != ["No Player Match!"]:
                    has_one_player =  True
                    break
            #if not has_one_player:
            #    raise CustomMessageException("Zero player matches in search!")

            has_one_player_games = False
            for player_data in player_datas:
                if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
                    has_one_player_games = True
                    break
            #if not has_one_player_games:
                #raise CustomMessageException("Zero players have games in the provided query!")
                        
            reddit_message, imgur_link, has_value = get_reddit_player_table(player_datas, player_type, debug_mode, original_comment, last_updated, str(comment.id), hide_table, extra_stats, has_one_player, has_one_player_games)
            if hide_table:
                reddit_message = "### Comparison complete! Image is available [here](" + imgur_link + ")"
            if has_one_player_games:
                if has_value:
                    reddit_message += "\n\n^(FanGraphs/Statcast stats may lose precision)"
                else:
                    reddit_message += "\n\n^(FanGraphs/Statcast stats may lose precision)"
                reddit_message += "\n\n^(N/A indicates stat was not tracked at all during the time frame, * indicates stat was not tracked consistently throughout the entire time frame)"
            else:
                reddit_message = reddit_message[:-5]
            was_successful = 1
        except CustomMessageException as e:
            reddit_message = "Oh no, I had a problem with your request: " + e.message
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        except (urllib.error.URLError, socket.timeout, requests.exceptions.ConnectionError) as e:
            reddit_message = "Oh no, I had a problem with your request: Unable to connect to Baseball Reference or MLB.com! Please try again later"
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        except BaseException as e:
            reddit_message = "Oh no, I had a problem with your request. If you leave your comment I will try to fix this issue and re-run the comparison"
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        reddit_message += "\n\n---"
        if imgur_link and not hide_table:
            reddit_message = "Tables cutoff or tough to read? Click [here](" + imgur_link + ") to view this comparison as an image\n\n---\n" + reddit_message
        if last_updated:
            reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
        non_message_reddit_message = reddit_message
        if not isinstance(comment, Message):
            reddit_message += "\n\n^(Made a mistake? Edit your comment and send me this )[^message](https://www.reddit.com/message/compose?to=mlbcomparebot&subject=Re-Run&message=" + comment.id + ")^( to re-run the comparison)"
            reddit_message += "\n\n^(Or delete the comparison by sending me this )[^message](https://www.reddit.com/message/compose?to=mlbcomparebot&subject=Delete&message=" + comment.id + ")"
        reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
        if len(reddit_message) > 10000:
            reddit_message = "Oh no, I had a problem with your request: Comment would be over the reddit max of 10000 characters!"
            if imgur_link:
                reddit_message += "\n\nI can at least provide an image of this comparison [here](" + imgur_link + ")\n"
            else:
                reddit_message += "\n\nI was also unable to generate an image of this comparison. This may be resolved if you try again later\n"
            reddit_message += "\n\n---"
            if last_updated:
                reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
            if not isinstance(comment, Message):
                reddit_message += "\n\n^(Made a mistake? Edit your comment and send me this )[^message](https://www.reddit.com/message/compose?to=mlbcomparebot&subject=Re-Run&message=" + comment.id + ")^( to re-run the comparison)"
                reddit_message += "\n\n^(Or delete the comparison by sending me this )[^message](https://www.reddit.com/message/compose?to=mlbcomparebot&subject=Delete&message=" + comment.id + ")"
            reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
        failed_counter = 0
        try_counter = 0
        last_wait_time = None
        while True:
            curr.execute("SELECT COUNT(*) FROM mlb;")
            num_replies = curr.fetchone()[0] + 1
            logger.info("#" + str(threading.get_ident()) + "#   " + "REPLY: " + comment.id + "(" + str(num_replies) + ")")
            if imgur_link:
                logger.info("#" + str(threading.get_ident()) + "#   " + "IMGUR LINK: " + imgur_link)
            try:
                if not debug_mode:
                    if isinstance(comment_obj["reply"], Message) or not comment_obj["reply"]:
                        reply_comment = comment_obj["comment"].reply(reddit_message)
                    else:
                        reply_comment = comment_obj["comment"].reply(reddit_message)
                        comment_obj["reply"].delete()
                        comment_obj["reply"] = None
                logger.info("#" + str(threading.get_ident()) + "#   " + "MESSAGE: " + reddit_message)
            except praw.exceptions.APIException as e:
                if (e.error_type == "RATELIMIT"):
                    if failed_counter == 0 and not isinstance(comment_obj["reply"], Message):
                        non_message_reddit_message = "Reddit is currently rate limiting this bot's comments! If this bot gets added to the approved users of r/" + comment.subreddit.display_name + " this should no longer occur. We will delay and try a few more times, but in the meantime here is your comparison as a message\n\n---\n" + non_message_reddit_message
                        non_message_reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
                        if len(non_message_reddit_message) > 10000:
                            non_message_reddit_message = "Reddit is currently rate limiting this bot's comments! If this bot gets added to the approved users of r/" + comment.subreddit.display_name + " this should no longer occur. We will delay and try a few more times, but in the meantime here is your comparison as a message\n\n---\n"
                            non_message_reddit_message += "Oh no, I had a problem with your request: Comment would be over the reddit max of 10000 characters!"
                            if imgur_link:
                                non_message_reddit_message += "\n\nI can at least provide an image of this comparison [here](" + imgur_link + ")\n"
                            else:
                                non_message_reddit_message += "\n\nI was also unable to generate an image of this comparison. This may be resolved if you try again later\n"
                            non_message_reddit_message += "\n\n---"
                            if last_updated:
                                reddit_message += "\n^(Stats last updated " + last_updated.strftime("%b %d %Y, %I:%M%p %Z") + ")"
                            non_message_reddit_message += "\n\n^(Instructions for usage and issue tracking can be found )[^here](https://github.com/gh674055/sports-compare-bots/wiki)"
                        try:
                            comment.author.message("MLBCompareBot Comparison " + comment.id, non_message_reddit_message)
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                        except Exception:
                            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                    failed_counter += 1
                    match = re.search(r"(\d+) (second|minute)s?", e.message.lower())
                    if match:
                        match = match.groups()
                        delay_time = int(match[0])
                        units = match[1]
                        if units == "minute":
                            delay_time = (delay_time * 60)
                        if last_wait_time == None or delay_time < last_wait_time or try_counter < max_reddit_retries:
                            last_wait_time = delay_time
                            if not (last_wait_time == None or delay_time < last_wait_time):
                                try_counter += 1
                            delay_step = 10
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(delay_time) + " seconds to allow us to chill")
                            time_to_wait = int(math.ceil(float(delay_time)/float(delay_step)))
                            for i in range(delay_time, 0, -time_to_wait):
                                logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                                time.sleep(time_to_wait)
                            logger.info("#" + str(threading.get_ident()) + "#   " + "0")
                            continue
                        elif not isinstance(comment_obj["reply"], Message):
                            try:
                                comment.author.message("MLBCompareBot Comparison " + comment.id, "We were unable to make the comment due to the rate limits :(. Please see the previous message for the comparison")
                                logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                            except Exception:
                                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                    elif not isinstance(comment_obj["reply"], Message):
                        try:
                            comment.author.message("MLBCompareBot Comparison " + comment.id, "We were unable to make the comment due to the rate limits :(. Please see the previous message for the comparison")
                            logger.info("#" + str(threading.get_ident()) + "#   " + "Delay message sent")
                        except Exception:
                            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                
                if not (isinstance(comment_obj["reply"], Message) or not comment_obj["reply"]):
                    comment_obj["reply"].delete()
                    comment_obj["reply"] = None
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
                break

            if not debug_mode:
                failed_counter = 0
                while(True):
                    try:
                        if reply_comment:
                            curr.execute("INSERT OR REPLACE INTO mlb VALUES (?,?,?,?,?,?,?,?);", (comment.id, reply_comment.id, comment.author.name, comment.subreddit.display_name if hasattr(comment, "subreddit") and comment.subreddit else "from_message", main_comment, was_successful, 0, round_value(time.time() * 1000)))
                        else:
                            curr.execute("INSERT OR REPLACE INTO mlb VALUES (?,?,?,?,?,?,?,?);", (comment.id, None, comment.author.name, comment.subreddit.display_name if hasattr(comment, "subreddit") and comment.subreddit else "from_message", main_comment, was_successful, 0, round_value(time.time() * 1000)))
                        break
                    except Exception:
                        failed_counter += 1
                        if failed_counter > max_request_retries:
                            raise

                    delay_step = 10
                    logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow db to chill")
                    time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
                    for i in range(retry_failure_delay, 0, -time_to_wait):
                        logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                        time.sleep(time_to_wait)
                    logger.info("#" + str(threading.get_ident()) + "#   " + "0")
            break
    else:
        logger.info("#" + str(threading.get_ident()) + "#   " + "SKIP: " +  comment.id)

def parse_comment_str(comment_str):
    input_str = re.sub(r"\s+", " ", comment_str).strip()
    input_str = unescape(input_str)
    input_str = input_str.replace("\\<", "<").replace("\\>", ">").replace("\\]", "]").replace("\\[", "[")
    input_str = re.sub(r"(?<!\\)(?:[*_^`]|[~]{2})", "", input_str)
    match = re.search(r"!\bmlbcompare(?:bot)?\b\s*(?<!\\)<(.+?)(?<!\\)>(?:\s*(?<!\\)\[(.+?)(?<!\\)\](?!\s*\((http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\)))?", input_str, re.IGNORECASE)

    if not match:
        input_split = re.split(r"!\bmlbcompare(?:bot)?\b", input_str, 1, re.IGNORECASE)
        input_str = "!mlbcompare <" + input_split[1].strip() + ">"
        match = re.search(r"!\bmlbcompare(?:bot)?\b\s*(?<!\\)<(.+?)(?<!\\)>(?:\s*(?<!\\)\[(.+?)(?<!\\)\](?!\s*\((http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\)))?", input_str, re.IGNORECASE)
    if not match:
        raise CustomMessageException("No players in search!")

    return match

def handle_player_string(comment, player_type, last_updated, hide_table, comment_obj):
    match = parse_comment_str(comment)

    original_comment = match.group(0)
    
    names = re.split(r"(?<!\\)\,", match.group(1))

    remove_duplicates = False
    remove_duplicate_games = False
    extra_stats = set()
    sort_vals = []

    try:
        sub_time_frames = match.group(2)
        parse_time_frames = []
        if sub_time_frames:
            sub_time_frames = re.split(r"(?<!\\)\,", unidecode.unidecode(sub_time_frames).lower().strip())
            for sub_time_frame in sub_time_frames:
                subb_time_frames = re.split(r"(?<!\\)\|", sub_time_frame.strip())
                sub_parsed_time_frames = []
                for sub_time_frame in subb_time_frames:
                    time_frames = re.split(r"(?<!\\)(?:\+|\bdiff\b)", sub_time_frame.strip())
                    add_type = "minus" if re.search(r"\b(diff|playerdiff)\b", sub_time_frame.strip()) else "plus"
                    da_time_frames = []
                    for time_frame in time_frames:
                        time_start = None
                        time_end = None
                        playoffs = None

                        og_time_str = time_frame
                        qualifiers = {}

                        time_frame = re.sub(r"\bplayerdiff\b", "", time_frame).strip()

                        is_sub_query = False
                        last_match = re.search(r"\bis-sub-query\b", time_frame)
                        if last_match:
                            is_sub_query = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:qual-sub-query):(?<!\\)\((.*?)(?<!\\)\))", time_frame)
                        for m in last_match:
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip() + " " + m.group(3)

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:sub-query|event-sub-query|or-sub-query|or-event-sub-query|day-after-sub-query|day-before-sub-query|day-of-sub-query|game-after-sub-query|game-before-sub-query|season-sub-query|or-season-sub-query|season-after-sub-query|season-before-sub-query):(?<!\\)\{.*?(?<!\\)\})", time_frame)
                        last_match = list(last_match)
                        # if len(last_match) > 10:
                        #     raise CustomMessageException("Only can have a max of 10 sub queries!")
                        for m in last_match:
                            # if is_sub_query:
                            #     raise CustomMessageException("Cannot have nested sub queries!")

                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)

                            if qualifier_str.startswith("sub-query:"):
                                qual_str = "sub-query:"
                                qual_type = "Sub Query"
                            elif qualifier_str.startswith("event-sub-query:"):
                                qual_str = "event-sub-query:"
                                qual_type = "Event Sub Query"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("or-sub-query:"):
                                qual_str = "or-sub-query:"
                                qual_type = "Or Sub Query"
                            elif qualifier_str.startswith("or-event-sub-query:"):
                                qual_str = "or-event-sub-query:"
                                qual_type = "Or Event Sub Query"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("day-of-sub-query:"):
                                qual_str = "day-of-sub-query:"
                                qual_type = "Day Of Sub Query"
                            elif qualifier_str.startswith("day-after-sub-query:"):
                                qual_str = "day-after-sub-query:"
                                qual_type = "Day After Sub Query"
                            elif qualifier_str.startswith("day-before-sub-query:"):
                                qual_str = "day-before-sub-query:"
                                qual_type = "Day Before Sub Query"
                            elif qualifier_str.startswith("game-after-sub-query:"):
                                qual_str = "game-after-sub-query:"
                                qual_type = "Game After Sub Query"
                            elif qualifier_str.startswith("game-before-sub-query:"):
                                qual_str = "game-before-sub-query:"
                                qual_type = "Game Before Sub Query"
                            elif qualifier_str.startswith("season-sub-query:"):
                                qual_str = "season-sub-query:"
                                qual_type = "Season Sub Query"
                            elif qualifier_str.startswith("or-season-sub-query:"):
                                qual_str = "or-season-sub-query:"
                                qual_type = "Or Season Sub Query"
                            elif qualifier_str.startswith("season-after-sub-query:"):
                                qual_str = "season-after-sub-query:"
                                qual_type = "Season After Sub Query"
                            elif qualifier_str.startswith("season-before-sub-query:"):
                                qual_str = "season-before-sub-query:"
                                qual_type = "Season Before Sub Query"

                            qualifier_obj["values"] = re.split(r"(?<!\\)\~", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])
                            qualifier_obj["values"] = [value.strip() for value in qualifier_obj["values"]]

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:w|(?:playing|starting)-with|a|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|holidays?|dts|dates|stadium|exact-stadium|arena|exact-arena|pitch-type|exact-pitch-type|hit-trajectory|hit-hardness|opponent-city|opponent-exact-city|team-city|team-exact-city|city|exact-city|event-description|exact-event-description|surface|condition|exact-home-plate-umpire|exact-umpire|home-plate-umpire|umpire|exact-home-plate-official|exact-official|home-plate-official|official|teammate-on-first|teammate-on-second|teammate-on-third|teammate-on-base|opponent-on-first|opponent-on-second|opponent-on-third|opponent-on-base|batting-against|pitching-against|batting-against-first-or-birth-name|pitching-against-first-or-birth-name|batting-against-birth-or-first-name|pitching-against-birth-or-first-name|batting-against-birth-name|pitching-against-birth-name|batting-against-first-name|pitching-against-first-name|batting-against-last-name|pitching-against-last-name|batting-against-birth-country|pitching-against-birth-country|facing|facing-first-or-birth-name|facing-birth-or-first-name|facing-birth-name|facing-first-name|facing-last-name|facing-birth-country|driven-in|batted-in|back-to-back-with|back-to-back|batting-in-front-of|batting-in-front|batting-ahead|batting-ahead-of|batting-behind|batting-behind-of|batting-next-to|caught-by|stealing-on|on-field-with|on-field-against|event-time|event-datetime|local-event-datetime|local-event-date-time|team-event-datetime|opponent-event-datetime|team-event-date-time|opponent-event-date-time|event-date-time|start-time):(?<!\\)\(.*?(?<!\\)\))", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("starting-"):
                                qualifier_str = qualifier_str.replace("starting-", "playing-", 1)
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })

                            if qualifier_str.startswith("w:"):
                                qual_str = "w:"
                                qual_type = "Playing With"
                            elif qualifier_str.startswith("playing-with:"):
                                qual_str = "playing-with:"
                                qual_type = "Playing With"
                            elif qualifier_str.startswith("a:"):
                                qual_str = "a:"
                                qual_type = "Playing Against"
                            elif qualifier_str.startswith("playing-against:"):
                                qual_str = "playing-against:"
                                qual_type = "Playing Against"
                            elif qualifier_str.startswith("prv-w:"):
                                qual_str = "prv-w:"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("previous-playing-with:"):
                                qual_str = "previous-playing-with:"
                                qual_type = "Previous Playing With"
                            elif qualifier_str.startswith("prv-a:"):
                                qual_str = "playing-against:"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("previous-playing-against:"):
                                qual_str = "previous-playing-against:"
                                qual_type = "Previous Playing Against"
                            elif qualifier_str.startswith("upc-w:"):
                                qual_str = "playing-against:"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upcoming-playing-with:"):
                                qual_str = "upcoming-playing-with:"
                                qual_type = "Upcoming Playing With"
                            elif qualifier_str.startswith("upc-a:"):
                                qual_str = "upc-a:"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("upcoming-playing-against:"):
                                qual_str = "upcoming-playing-against:"
                                qual_type = "Upcoming Playing Against"
                            elif qualifier_str.startswith("playing-same-opponent:"):
                                qual_str = "playing-same-opponent:"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-opponents:"):
                                qual_str = "playing-same-opponents:"
                                qual_type = "Playing Same Opponents"
                            elif qualifier_str.startswith("playing-same-date:"):
                                qual_str = "playing-same-date:"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("playing-same-dates:"):
                                qual_str = "playing-same-dates:"
                                qual_type = "Playing Same Date"
                            elif qualifier_str.startswith("batting-against:"):
                                qual_str = "batting-against:"
                                qual_type = "Batting Against"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("pitching-against:"):
                                qual_str = "pitching-against:"
                                qual_type = "Pitching Against"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-against-first-name:"):
                                qual_str = "batting-against-first-name:"
                                qual_type = "Batting Against First Name"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("pitching-against-first-name:"):
                                qual_str = "pitching-against-first-name:"
                                qual_type = "Pitching Against First Name"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-against-birth-name:"):
                                qual_str = "batting-against-birth-name:"
                                qual_type = "Batting Against Birth Name"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("pitching-against-birth-name:"):
                                qual_str = "pitching-against-birth-name:"
                                qual_type = "Pitching Against Birth Name"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-against-first-or-birth-name:"):
                                qual_str = "batting-against-first-or-birth-name:"
                                qual_type = "Batting Against First Or Birth Name"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("pitching-against-first-or-birth-name:"):
                                qual_str = "pitching-against-first-or-birth-name:"
                                qual_type = "Pitching Against First Or Birth Name"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-against-birth-or-first-name:"):
                                qual_str = "batting-against-birth-or-first-name:"
                                qual_type = "Batting Against First Or Birth Name"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("pitching-against-birth-or-first-name:"):
                                qual_str = "pitching-against-birth-or-first-name:"
                                qual_type = "Pitching Against First Or Birth Name"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-against-last-name:"):
                                qual_str = "batting-against-last-name:"
                                qual_type = "Batting Against Last Name"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("pitching-against-last-name:"):
                                qual_str = "pitching-against-last-name:"
                                qual_type = "Pitching Against Last Name"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-against-birth-country:"):
                                qual_str = "batting-against-birth-country:"
                                qual_type = "Batting Against Birth Country"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("pitching-against-birth-country:"):
                                qual_str = "pitching-against-birth-country:"
                                qual_type = "Pitching Against Birth Coutnry"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("facing:"):
                                qual_str = "facing:"
                                qual_type = "Facing"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("facing-first-name:"):
                                qual_str = "facing-first-name:"
                                qual_type = "Facing First Name"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("facing-birth-name:"):
                                qual_str = "facing-birth-name:"
                                qual_type = "Facing Birth Name"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("facing-first-or-birth-name:"):
                                qual_str = "facing-first-or-birth-name:"
                                qual_type = "Facing Birth First Or Name"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("facing-birth-or-first-name:"):
                                qual_str = "facing-birth-or-first-name:"
                                qual_type = "Facing Birth First Or Name"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("facing-last-name:"):
                                qual_str = "facing-last-name:"
                                qual_type = "Facing Last Name"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("facing-birth-country:"):
                                qual_str = "facing-birth-country:"
                                qual_type = "Facing Birth Country"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("driven-in:"):
                                qual_str = "driven-in:"
                                qual_type = "Driven In"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                                extra_stats.add("no-steals")
                                extra_stats.add("hide-rate")
                                extra_stats.add("show-stat-drivenin")
                                extra_stats.add("show-stat-gwdrivenin")
                            elif qualifier_str.startswith("batted-in:"):
                                qual_str = "batted-in:"
                                qual_type = "Batted In"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                                extra_stats.add("hide-rate")
                                extra_stats.add("no-steals")
                            elif qualifier_str.startswith("back-to-back-with:"):
                                qual_str = "back-to-back-with:"
                                qual_type = "Back To Back With"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                                extra_stats.add("hide-rate")
                                extra_stats.add("no-steals")
                            elif qualifier_str.startswith("back-to-back:"):
                                qual_str = "back-to-back:"
                                qual_type = "Back To Back With"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                                extra_stats.add("hide-rate")
                                extra_stats.add("no-steals")
                            elif qualifier_str.startswith("batting-behind:"):
                                qual_str = "batting-behind:"
                                qual_type = "Batting Behind"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-behind-of:"):
                                qual_str = "batting-behind-of:"
                                qual_type = "Batting Behind"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-in-front-of:"):
                                qual_str = "batting-in-front-of:"
                                qual_type = "Batting In Front Of"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-in-front:"):
                                qual_str = "batting-in-front:"
                                qual_type = "Batting In Front Of"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-ahead:"):
                                qual_str = "batting-ahead:"
                                qual_type = "Batting In Front Of"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-ahead-of:"):
                                qual_str = "batting-ahead-of:"
                                qual_type = "Batting In Front Of"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("batting-next-to:"):
                                qual_str = "batting-next-to:"
                                qual_type = "Batting Next To"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("teammate-on-first:"):
                                qual_str = "teammate-on-first:"
                                qual_type = "Teammate On First"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("teammate-on-second:"):
                                qual_str = "teammate-on-second:"
                                qual_type = "Teammate On Second"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("teammate-on-third:"):
                                qual_str = "teammate-on-third:"
                                qual_type = "Teammate On Third"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("teammate-on-base:"):
                                qual_str = "teammate-on-base:"
                                qual_type = "Teammate On Base"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("opponent-on-first:"):
                                qual_str = "opponent-on-first:"
                                qual_type = "Opponent On First"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("opponent-on-second:"):
                                qual_str = "opponent-on-second:"
                                qual_type = "Opponent On Second"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("opponent-on-third:"):
                                qual_str = "opponent-on-third:"
                                qual_type = "Opponent On Third"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("opponent-on-base:"):
                                qual_str = "opponent-on-base:"
                                qual_type = "Opponent On Base"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("caught-by:"):
                                qual_str = "caught-by:"
                                qual_type = "Caught By"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("stealing-on:"):
                                qual_str = "stealing-on:"
                                qual_type = "Stealing On"
                                player_type["da_type"] = "Batter"
                                extra_stats.add("current-stats")
                                extra_stats.add("stolen-base")
                            elif qualifier_str.startswith("on-field-with:"):
                                qual_str = "on-field-with:"
                                qual_type = "On Field With"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("on-field-against:"):
                                qual_str = "on-field-against:"
                                qual_type = "On Field Against"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("stadium:"):
                                qual_str = "stadium:"
                                qual_type = "Stadium"
                            elif qualifier_str.startswith("exact-stadium:"):
                                qual_str = "exact-stadium:"
                                qual_type = "Exact Stadium"
                            elif qualifier_str.startswith("arena:"):
                                qual_str = "arena:"
                                qual_type = "Stadium"
                            elif qualifier_str.startswith("exact-arena:"):
                                qual_str = "exact-arena:"
                                qual_type = "Exact Stadium"
                            elif qualifier_str.startswith("pitch-type:"):
                                qual_str = "pitch-type:"
                                qual_type = "Pitch Type"
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            elif qualifier_str.startswith("exact-pitch-type:"):
                                qual_str = "exact-pitch-type:"
                                qual_type = "Exact Pitch Type"
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            elif qualifier_str.startswith("city:"):
                                qual_str = "city:"
                                qual_type = "City"
                            elif qualifier_str.startswith("exact-city:"):
                                qual_str = "exact-city:"
                                qual_type = "Exact City"
                            elif qualifier_str.startswith("team-city:"):
                                qual_str = "team-city:"
                                qual_type = "Team City"
                            elif qualifier_str.startswith("team-exact-city:"):
                                qual_str = "team-exact-city:"
                                qual_type = "Team Exact City"
                            elif qualifier_str.startswith("opponent-city:"):
                                qual_str = "opponent-city:"
                                qual_type = "Opponent City"
                            elif qualifier_str.startswith("opponent-exact-city:"):
                                qual_str = "opponent-exact-city:"
                                qual_type = "Opponent Exact City"
                            elif qualifier_str.startswith("event-description:"):
                                qual_str = "event-description:"
                                qual_type = "Event Description"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("exact-event-description:"):
                                qual_str = "exact-event-description:"
                                qual_type = "Exact Event Description"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("hit-trajectory:"):
                                qual_str = "hit-trajectory:"
                                qual_type = "Hit Trajectory"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("hit-hardness:"):
                                qual_str = "hit-hardness:"
                                qual_type = "Hit Hardness"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("surface:"):
                                qual_str = "surface:"
                                qual_type = "Surface"
                            elif qualifier_str.startswith("condition:"):
                                qual_str = "condition:"
                                qual_type = "Condition"
                            elif qualifier_str.startswith("home-plate-umpire:"):
                                qual_str = "home-plate-umpire:"
                                qual_type = "Home Plate Umpire"
                            elif qualifier_str.startswith("umpire:"):
                                qual_str = "umpire:"
                                qual_type = "Umpire"
                            elif qualifier_str.startswith("exact-home-plate-umpire:"):
                                qual_str = "exact-home-plate-umpire:"
                                qual_type = "Exact Home Plate Umpire"
                            elif qualifier_str.startswith("exact-umpire:"):
                                qual_str = "exact-umpire:"
                                qual_type = "Exact Umpire"
                            elif qualifier_str.startswith("home-plate-official:"):
                                qual_str = "home-plate-official:"
                                qual_type = "Home Plate Umpire"
                            elif qualifier_str.startswith("official:"):
                                qual_str = "official:"
                                qual_type = "Umpire"
                            elif qualifier_str.startswith("exact-home-plate-official:"):
                                qual_str = "exact-home-plate-official:"
                                qual_type = "Exact Home Plate Umpire"
                            elif qualifier_str.startswith("exact-official:"):
                                qual_str = "exact-official:"
                                qual_type = "Exact Umpire"
                            elif qualifier_str.startswith("holiday:"):
                                qual_str = "holiday:"
                                qual_type = "Holiday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str.startswith("holidays:"):
                                qual_str = "holidays:"
                                qual_type = "Holiday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier_str.startswith("dts:"):
                                qual_str = "dts:"
                                qual_type = "Dates"
                            elif qualifier_str.startswith("dates:"):
                                qual_str = "dates:"
                                qual_type = "Dates"
                            elif qualifier_str.startswith("playing-same-game:"):
                                qual_str = "playing-same-game:"
                                qual_type = "Playing Same Game"
                            elif qualifier_str.startswith("event-time:") or qualifier_str.startswith("start-time:"):
                                if qualifier_str.startswith("event-time:"):
                                    qual_str = "event-time:"
                                    qual_type = "Event Time"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("start-time:"):
                                    qual_str = "start-time:"
                                    qual_type = "Start Time"

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])

                                time_zones = {
                                    "CDT" : "US/Central",
                                    "CST" : "US/Central",
                                    "EST" : "US/Eastern",
                                    "EDT" : "US/Eastern",
                                    "MDT" : "US/Mountain",
                                    "MST" : "US/Mountain",
                                    "PDT" : "US/Pacific",
                                    "PST" : "US/Pacific",
                                    "ET" : "US/Eastern",
                                    "CT" : "US/Central",
                                    "MT" : "US/Mountain",
                                    "PT" : "US/Pacific"
                                }
                                time_zone = None
                                last_val = split_vals[len(split_vals) - 1]
                                for index, split_val in enumerate(split_vals):
                                    for key in time_zones:
                                        if split_val.upper().endswith(key):
                                            time_zone = time_zones[key]
                                            split_vals[index] = split_vals[index][:-(len(key))].strip()
                                            break
                                    if not time_zone:
                                        for key in pytz.all_timezones:
                                            if split_val.upper().endswith(key.upper()):
                                                time_zone = key
                                                split_vals[index] = split_vals[index][:-(len(key))].strip()
                                                break
                                if not time_zone:
                                    time_zone = "US/Eastern"
                                
                                if len(split_vals) == 1:
                                    the_date = dateutil.parser.parse(split_vals[0]).time()
                                    the_date_2 = dateutil.parser.parse(split_vals[0]).time()
                                    if split_vals[0].count(":") == 0:
                                        the_date_2 = the_date_2.replace(minute=59).replace(second=59)
                                    elif split_vals[0].count(":") == 1:
                                        the_date_2 = the_date_2.replace(second=59)
                                    qualifier_obj["values"] = {
                                        "start_val" : the_date,
                                        "end_val" : the_date_2,
                                        "time_zone" : time_zone
                                    }
                                else:
                                    start_date = None
                                    end_date = None
                                    if split_vals[0] == "min" and split_vals[1] == "max":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = datetime.time(23, 59, 59)
                                    elif split_vals[0] == "min":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = dateutil.parser.parse(split_vals[1]).time()
                                    elif split_vals[1] == "max":
                                        start_date = dateutil.parser.parse(split_vals[0]).time()
                                        end_date = datetime.time(23, 59, 59)
                                    else:
                                        start_date = dateutil.parser.parse(split_vals[0]).time()
                                        end_date = dateutil.parser.parse(split_vals[1]).time()

                                    qualifier_obj["values"] = {
                                        "start_val" : start_date,
                                        "end_val" : end_date,
                                        "time_zone" : time_zone
                                    }
                                
                                qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"].replace(microsecond=0)
                                qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"].replace(microsecond=0)
                            elif qualifier_str.startswith("event-datetime:") or qualifier_str.startswith("event-date-time:"):
                                if qualifier_str.startswith("event-datetime:"):
                                    qual_str = "event-datetime:"
                                    qual_type = "Event DateTime"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("event-date-time:"):
                                    qual_str = "event-date-time:"
                                    qual_type = "Event DateTime"
                                    extra_stats.add("current-stats")

                                split_vals = re.split(r"(?<!\\)\~", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])

                                time_zones = {
                                    "CDT" : "US/Central",
                                    "CST" : "US/Central",
                                    "EST" : "US/Eastern",
                                    "EDT" : "US/Eastern",
                                    "MDT" : "US/Mountain",
                                    "MST" : "US/Mountain",
                                    "PDT" : "US/Pacific",
                                    "PST" : "US/Pacific",
                                    "ET" : "US/Eastern",
                                    "CT" : "US/Central",
                                    "MT" : "US/Mountain",
                                    "PT" : "US/Pacific"
                                }
                                time_zone = None
                                last_val = split_vals[len(split_vals) - 1]
                                for index, split_val in enumerate(split_vals):
                                    for key in time_zones:
                                        if split_val.upper().endswith(key):
                                            time_zone = time_zones[key]
                                            split_vals[index] = split_vals[index][:-(len(key))].strip()
                                            break
                                    if not time_zone:
                                        for key in pytz.all_timezones:
                                            if split_val.upper().endswith(key.upper()):
                                                time_zone = key
                                                split_vals[index] = split_vals[index][:-(len(key))].strip()
                                                break
                                if not time_zone:
                                    time_zone = "US/Eastern"
                                
                                if len(split_vals) == 1:
                                    the_date = dateutil.parser.parse(split_vals[0])
                                    the_date_2 = dateutil.parser.parse(split_vals[0])
                                    if split_vals[0].count(":") == 0:
                                        the_date_2 = the_date_2.replace(minute=59).replace(second=59)
                                    elif split_vals[0].count(":") == 1:
                                        the_date_2 = the_date_2.replace(second=59)
                                    qualifier_obj["values"] = {
                                        "start_val" : the_date,
                                        "end_val" : the_date_2,
                                        "time_zone" : time_zone
                                    }
                                else:
                                    start_date = None
                                    end_date = None
                                    if split_vals[0] == "min" and split_vals[1] == "max":
                                        start_date = datetime.datetime.min
                                        end_date = datetime.datetime.now()
                                    elif split_vals[0] == "min":
                                        start_date = datetime.datetime.min
                                        end_date = dateutil.parser.parse(split_vals[1])
                                    elif split_vals[1] == "max":
                                        start_date = dateutil.parser.parse(split_vals[0])
                                        end_date = datetime.datetime.now()
                                    else:
                                        start_date = dateutil.parser.parse(split_vals[0])
                                        end_date = dateutil.parser.parse(split_vals[1])

                                    qualifier_obj["values"] = {
                                        "start_val" : start_date,
                                        "end_val" : end_date,
                                        "time_zone" : time_zone
                                    }
                                
                                qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"].replace(microsecond=0).replace(tzinfo=None)
                                qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"].replace(microsecond=0).replace(tzinfo=None)
                            elif qualifier_str.startswith("local-event-datetime:") or qualifier_str.startswith("local-event-date-time:") or qualifier_str.startswith("team-event-datetime:") or qualifier_str.startswith("team-event-date-time:") or qualifier_str.startswith("opponent-event-datetime:") or qualifier_str.startswith("opponent-event-date-time:"):
                                if qualifier_str.startswith("local-event-datetime:"):
                                    qual_str = "local-event-datetime:"
                                    qual_type = "Local Event DateTime"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("local-event-date-time:"):
                                    qual_str = "local-event-date-time:"
                                    qual_type = "Local Event DateTime"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("team-event-datetime:"):
                                    qual_str = "team-event-datetime:"
                                    qual_type = "Team Event DateTime"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("team-event-date-time:"):
                                    qual_str = "team-event-date-time:"
                                    qual_type = "Team Event DateTime"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-event-datetime:"):
                                    qual_str = "opponent-event-datetime:"
                                    qual_type = "Opponent Event DateTime"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-event-date-time:"):
                                    qual_str = "opponent-event-date-time:"
                                    qual_type = "Opponent Event DateTime"
                                    extra_stats.add("current-stats")

                                split_vals = re.split(r"(?<!\\)\~", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])
                                if len(split_vals) == 1:
                                    the_date = dateutil.parser.parse(split_vals[0]).time()
                                    the_date_2 = dateutil.parser.parse(split_vals[0]).time()
                                    if split_vals[0].count(":") == 0:
                                        the_date_2 = the_date_2.replace(minute=59).replace(second=59)
                                    elif split_vals[0].count(":") == 1:
                                        the_date_2 = the_date_2.replace(second=59)
                                    qualifier_obj["values"] = {
                                        "start_val" : the_date,
                                        "end_val" : the_date_2
                                    }
                                else:
                                    start_date = None
                                    end_date = None
                                    if split_vals[0] == "min" and split_vals[1] == "max":
                                        start_date = datetime.datetime.min
                                        end_date = datetime.datetime.now()
                                    elif split_vals[0] == "min":
                                        start_date = datetime.datetime.min
                                        end_date = dateutil.parser.parse(split_vals[1].upper())
                                    elif split_vals[1] == "max":
                                        start_date = dateutil.parser.parse(split_vals[0].upper())
                                        end_date = datetime.datetime.now()
                                    else:
                                        start_date = dateutil.parser.parse(split_vals[0].upper())
                                        end_date = dateutil.parser.parse(split_vals[1].upper())

                                    qualifier_obj["values"] = {
                                        "start_val" : start_date,
                                        "end_val" : end_date
                                    }
                                
                                qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"].replace(microsecond=0).replace(tzinfo=None)
                                qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"].replace(microsecond=0).replace(tzinfo=None)
                            
                            if not qual_type in ["Event Time", "Start Time", "Event DateTime", "Local Event DateTime", "Team Event DateTime", "Opponent Event DateTime"]:
                                qualifier_obj["values"] = re.split(r"(?<!\\)\~", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])
                                qualifier_obj["values"] = [value.strip() for value in qualifier_obj["values"]]

                            if qual_type == "Dates":
                                new_values = []
                                for value in qualifier_obj["values"]:
                                    replace_first_year = {
                                        "replace" : False
                                    }

                                    if "to" in value:
                                        dates = re.split(r"(?<!\\)to", value)
                                        date1 = handle_string_year(dates[0], True, replace_first_year)
                                        date2 = handle_string_year(dates[1], False, replace_first_year)
                                        new_values.append({
                                            "start_val" : date1,
                                            "end_val" : date2,
                                        })
                                    else:
                                        date1 = handle_string_year(value, True, replace_first_year)
                                        new_values.append({
                                            "start_val" : date1,
                                            "end_val" : date1,
                                        })
                                qualifier_obj["values"] = new_values
                            elif "On Field" in qual_type:
                                new_values = []
                                for value in qualifier_obj["values"]:
                                    values = re.split(r"(?<!\\)=", value)
                                    if len(values) == 1:
                                        new_values.append({
                                            "pos" : ["ANY"],
                                            "value" : values[0].strip()
                                        })
                                    else:
                                        positions = []
                                        for sub_pos in re.split(r"(?<!\\)-", values[0]):
                                            positions.append(sub_pos.upper().strip())
                                        if positions == 2 and positions[0].isdigit() and positions[1].isdigit() and int(positions[0]) < int(positions[1]):
                                            positions = range(int(qualifier_obj["values"][0]), int(qualifier_obj["values"][1]) + 1)
                                        new_values.append({
                                            "pos" : positions,
                                            "value" : values[1].strip()
                                        })
                                qualifier_obj["values"] = new_values

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(career(?: |-)?(year|pitch-type|season|game|team|franchise|number))s?\b", time_frame)
                        for m in last_match:
                            if m.group(1) == "career-season":
                                extra_stats.add("career-year")
                            else:
                                extra_stats.add(m.group(1))
                            if m.group(2) == "pitch-type":
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(show(?: |-)?only(?: |-)?table:)\(.+?\)", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("show-only-table-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(hide(?: |-)?table:)\(.+?\)", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("hide-table-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        time_frame = re.sub(r"\s+", " ", re.sub(r"(?:career)(?!-)", "", time_frame)).strip()

                        time_frame = re.sub(r"tables?", "", time_frame).strip()
                        time_frame, is_image = re.subn(r"images?", "", time_frame)
                        if is_image:
                            time_frame = time_frame.strip()
                            hide_table = True
                        
                        last_match = re.search(r"\bremove[-\s]duplicate-games?\b", time_frame)
                        if last_match:
                            remove_duplicate_games = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_match = re.search(r"\bremove[-\s]duplicates?\b", time_frame)
                        if last_match:
                            remove_duplicates = True
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bshow(?: |-)?(seasons-leading)s?:(\S+)-(\S+)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1) + "-" + str(ordinal_to_number(m.group(2))) + "-" + str(str(ordinal_to_number(m.group(3)))))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\bshow(?: |-)?(best-season|worst-season|seasons-leading)s?:(\S+)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1) + "-" + str(ordinal_to_number(m.group(2))))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\badd-extra-stat:\((.+?)\)", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(1))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\bshow(?: |-)?(only(?: |-)?)?(pitcher-record|record|slash|score|year|pitch-type|games?-count|seasons-leading|season|date|missing-games-count|missing-pitches-count|missing-game-count|missing-pitches-count|missing-pitch-count|missing-game|missing-pitches|missing-pitch|per-game|game|play|run-support|run-support-record|exit-record|statcast|advanced-runner|advanced|best-season|worst-season|team|franchise|number|award|driven-in|mlb-link)s?\b", time_frame)
                        for m in last_match:
                            extra_stats.add(m.group(2))
                            if m.group(2) == "play":
                                extra_stats.add("current-stats")
                            elif m.group(2) == "pitch-type":
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            elif m.group(2) == "season":
                                extra_stats.add("year")
                            elif m.group(2) == "missing-games-count":
                                extra_stats.add("missing-game-count")
                            elif m.group(2) == "missing-pitches":
                                extra_stats.add("missing-pitches")
                            elif m.group(2) == "missing-pitches-count":
                                extra_stats.add("missing-pitches-count")
                            elif m.group(2) == "statcast" or m.group(2) == "advanced" or m.group(2) == "driven-in":
                                extra_stats.add("current-stats")
                                if m.group(2) == "driven-in":
                                    extra_stats.add("show-stat-drivenin")
                                    extra_stats.add("show-stat-gwdrivenin")
                                    if m.group(1):
                                        extra_stats.add("show-only-stat-drivenin")
                                        extra_stats.add("show-only-stat-gwdrivenin")
                            elif "run-support" in m.group(2) or "exit-record" in m.group(2) or "advanced-runner" in m.group(2):
                                player_type["da_type"] = "Pitcher"
                                if "run-support" in m.group(1):
                                    extra_stats.add("score")
                            elif m.group(2) == "game-count" or m.group(2) == "games-count":
                                extra_stats.add("show-only-stat-g")
                                extra_stats.add("show-only-stat-gs")
                                extra_stats.add("show-only-table-standard")
                            elif m.group(2) == "pitcher-record":
                                extra_stats.add("show-only-stat-w")
                                extra_stats.add("show-only-stat-l")
                                extra_stats.add("show-only-stat-w/l%")
                                extra_stats.add("show-only-stat-sho")
                                extra_stats.add("show-only-stat-sho%")
                                extra_stats.add("show-only-stat-qs")
                                extra_stats.add("show-only-stat-qs%")
                                extra_stats.add("show-only-stat-cg")
                                extra_stats.add("show-only-stat-cg%")
                                extra_stats.add("show-only-stat-nohit")
                                extra_stats.add("show-only-stat-prfct")
                                extra_stats.add("show-only-stat-sv")
                                extra_stats.add("show-only-stat-bsv")
                                extra_stats.add("show-only-stat-sv%")
                                extra_stats.add("show-only-stat-hld")
                                player_type["da_type"] = "Pitcher"
                            elif m.group(2) == "slash":
                                extra_stats.add("show-only-stat-avg")
                                extra_stats.add("show-only-stat-obp")
                                extra_stats.add("show-only-stat-slg")
                                extra_stats.add("show-only-stat-ops")
                                player_type["da_type"] = "Batter"
                
                            if m.group(1):
                                if m.group(2) == "record":
                                    for header in ("TmRec", "TmW/L%"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "run-support-record":
                                    for header in ("RunSW", "RunSL", "RunSW/L%"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "exit-record":
                                    for header in ("ExitW", "ExitL", "ExitW/L%"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "score":
                                    for header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "statcast":
                                    for header in ("Chase%", "EV", "Spin", "MPH", "HardHit%", "SwtSpt%", "LA", "HitDist", "PutAway%", "Whiff%"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "run-support":
                                    for header in ("RS9", "RS"):
                                        extra_stats.add("show-only-stat-" + header.lower())
                                elif m.group(2) == "advanced-runner":
                                    for header in ("BQS", "IS", "IR", "IS%"):
                                        extra_stats.add("show-only-stat-" + header.lower())

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\bhide(?: |-)?(name|year|season|live|date|query|queries|advanced)s?\b", time_frame)
                        for m in last_match:
                            if m.group(1) == "date" or m.group(1) == "season":
                                extra_stats.add("hide-year")
                            elif m.group(1).startswith("quer"):
                                extra_stats.add("hide-query")
                            else:
                                extra_stats.add("hide-" + m.group(1))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(show(?: |-)?stat:)[\S-]+", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("show-stat-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(show(?: |-)?only(?: |-)?stat:)[\S-]+", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("show-only-stat-" + unescape_string(stat.strip()))
                                extra_stats.add("show-stat-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(hide(?: |-)?stat:)[\S-]+", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                extra_stats.add("hide-stat-" + unescape_string(stat.strip()))
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
            
                        last_match = re.finditer(r"\b(sort(?: |-)?by(?:(?: |-)?stat)?:)[\S-]+", time_frame)
                        for m in last_match:
                            for stat in re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + m.group(1), m.group(0))[1][1:-1]):
                                is_desc = True
                                sort_split = re.split(r"(?<!\\)\;", stat)
                                if len(sort_split) == 2:
                                    is_desc = False
                                sort_vals.append({
                                    "stat" : unescape_string(sort_split[0].strip()),
                                    "is_desc" : is_desc
                                })
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        if is_sub_query:
                            has_hide_advanced = "hide-advanced" in extra_stats
                            extra_stats = set()
                            sort_vals = []
                            if has_hide_advanced:
                                extra_stats.add("hide-advanced")

                        playoffs_set = False
                        last_match = re.search(r"\b(no(?:t|n)?(?: -)?)?(?:(?<!-)includes?|(?<!-)including|(?<!-)and|(?<!-)with)(?: |-)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", time_frame)
                        if last_match:
                            playoff_match_str = last_match.group(1)
                            if "regular" in last_match.group(0):
                                if playoff_match_str:
                                    playoffs = "Only"
                                    playoffs_set = True
                                else:
                                    playoffs = "Include"
                            else:
                                if playoff_match_str:
                                    playoffs = "No"
                                else:
                                    playoffs = "Include"
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        else:
                            last_match = re.search(r"\b(no(?:t|n)?(?: -)?)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", time_frame)
                            if last_match:
                                playoff_match_str = last_match.group(1)
                                if "regular" in last_match.group(0):
                                    if playoff_match_str:
                                        playoffs = "Only"
                                        playoffs_set = True
                                    else:
                                        playoffs = "No"
                                else:
                                    if playoff_match_str:
                                        playoffs = "No"
                                    else:
                                        playoffs = "Only"
                                        playoffs_set = True
                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        time_frame = re.sub(r"\s+", " ", re.sub(r"(?:regular(?:-| )?season|playoffs?|post(?:-| )?seasons?)(?!-)", "", time_frame)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:facing|batting-against|pitching-against|batting-in-front-of|batting-in-front|batting-ahead|batting-ahead-of|batting-behind|batting-behind-of|batting-next-to)(?:-nl|-al|-league)?-stat(?:-rank|-percent(?:age)?)?(?:-reversed?)?:[\S-]+)", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False
                            
                            qualifier_str = m.group(2)
                            qual_str = qualifier_str.split(":")[0]
                            qual_type = ""

                            if "-league" in qual_str:
                                qual_str = "League " + qual_type
                            elif "-al" in qual_str:
                                qual_str = "AL " + qual_type
                            elif "-nl" in qual_str:
                                qual_str = "NL " + qual_type

                            if qual_str.startswith("facing") or qual_str.startswith("batting-against") or qual_str.startswith("pitching-against"):
                                qual_type = "Facing " + qual_type
                                if qual_str.startswith("batting-against"):
                                    player_type["da_type"] = "Batter"
                                elif qual_str.startswith("pitching-against"):
                                    player_type["da_type"] = "Pitcher"
                            elif qual_str.startswith("batting-in-front") or qual_str.startswith("batting-ahead"):
                                qual_type += "Batting In Front Of " + qual_type
                                player_type["da_type"] = "Batter"
                            elif qual_str.startswith("batting-behind"):
                                qual_type += "Batting Behind " + qual_type
                                player_type["da_type"] = "Batter"
                            elif qual_str.startswith("batting-next-to"):
                                qual_type += "Batting Next To " + qual_type
                                player_type["da_type"] = "Batter"

                            if "-stat-rank" in qual_str:
                                qual_type += "Stat Rank"
                                extra_stats.add("current-stats")
                            elif  "-stat-percent" in qual_str:
                                qual_type += "Stat Percent"
                                extra_stats.add("current-stats")
                            elif "-stat" in qual_str:
                                qual_type += "Stat"
                                extra_stats.add("current-stats")

                            if "Stat Rank" in qual_type or "Stat Percent" in qual_type:
                                reverse = "-reverse" in qual_str
                                qualifier_obj["values"] = []

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                qualifier_obj["include_all_players"] = False
                                qualifier_obj["only_rookies"] = False
                                if len(split_vals) > 2:
                                    if split_vals[2] == "all-players":
                                        qualifier_obj["include_all_players"] = True
                                    if split_vals[2] == "rookie": 
                                        qualifier_obj["only_rookies"] = True
                                    if len(split_vals) > 3:
                                        if split_vals[3] == "all-players":
                                            qualifier_obj["include_all_players"] = True
                                        if split_vals[3] == "rookie": 
                                            qualifier_obj["only_rookies"] = True
                                qualifier_obj["reverse"] = reverse
                                
                                all_vals = re.split(r"(?<!\\)\;", split_vals[1])
                                
                                for val in all_vals:
                                    split_vals = re.split(r"(?<!\\)\=", val)
                                    stat = unescape_string(split_vals[0])

                                    split_vals = re.split(r"(?<!\\)\-", split_vals[1])
                                    if qual_type.endswith("Percent"):
                                        if not split_vals[0].endswith("%"):
                                            split_vals[0] += "%"
                                        if len(split_vals) == 1:
                                            qualifier_obj["values"].append({
                                                "stat" : stat,
                                                "start_val" : 0,
                                                "end_val" : ordinal_to_number(split_vals[0])
                                            })
                                        else:
                                            if not split_vals[1].endswith("%"):
                                                split_vals[1] += "%"
                                            qualifier_obj["values"].append({
                                                "stat" : stat,
                                                "start_val" : ordinal_to_number(split_vals[0]),
                                                "end_val" : ordinal_to_number(split_vals[1])
                                            })

                                    else:
                                        if len(split_vals) == 1:
                                            qualifier_obj["values"].append({
                                                "stat" : stat,
                                                "start_val" : 1,
                                                "end_val" : ordinal_to_number(split_vals[0])
                                            })
                                        else:
                                            qualifier_obj["values"].append({
                                                "stat" : stat,
                                                "start_val" : ordinal_to_number(split_vals[0]),
                                                "end_val" : ordinal_to_number(split_vals[1])
                                            })
                            elif "Stat" in qual_type:
                                qualifier_obj["values"] = []

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                qualifier_obj["include_all_players"] = False
                                qualifier_obj["only_rookies"] = False
                                if len(split_vals) > 2:
                                    if split_vals[2] == "all-players":
                                        qualifier_obj["include_all_players"] = True
                                    if split_vals[2] == "rookie": 
                                        qualifier_obj["only_rookies"] = True
                                    if len(split_vals) > 3:
                                        if split_vals[3] == "all-players":
                                            qualifier_obj["include_all_players"] = True
                                        if split_vals[3] == "rookie": 
                                            qualifier_obj["only_rookies"] = True
                                
                                all_vals = re.split(r"(?<!\\)\;", split_vals[1])
                                
                                for val in all_vals:
                                    split_vals = re.split(r"(?<!\\)\=", val)
                                    stat = unescape_string(split_vals[0])

                                    if len(split_vals) == 1:
                                        qualifier_obj["values"].append({
                                            "stat" : stat,
                                            "start_val" : 1,
                                            "end_val" : float("inf")
                                        })
                                    else:
                                        split_vals = re.split(r"(?<!\\)(?<!^)\-", split_vals[1], 1)
                                        if len(split_vals) == 1:
                                            the_val = ordinal_to_number(split_vals[0])
                                            if the_val > 0:
                                                qualifier_obj["values"].append({
                                                    "stat" : stat,
                                                    "start_val" : the_val,
                                                    "end_val" : float("inf")
                                                })
                                            elif the_val < 0:
                                                qualifier_obj["values"].append({
                                                    "stat" : stat,
                                                    "start_val" : -float("inf"),
                                                    "end_val" : the_val
                                                })
                                            else:
                                                qualifier_obj["values"].append({
                                                    "stat" : stat,
                                                    "start_val" : the_val,
                                                    "end_val" : the_val
                                                })
                                        else:
                                            qualifier_obj["values"].append({
                                                "stat" : stat,
                                                "start_val" : ordinal_to_number(split_vals[0]),
                                                "end_val" : ordinal_to_number(split_vals[1])
                                            })
                            
                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:formula|season-formula|event-formula|max-streak-formula|count-streak-formula):\{.+?\})", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("formula:"):
                                qual_str = "formula:"
                                qual_type = "Formula"
                            elif qualifier_str.startswith("season-formula:"):
                                qual_str = "season-formula:"
                                qual_type = "Season Formula"
                            elif qualifier_str.startswith("max-streak-formula:"):
                                qual_str = "max-streak-formula:"
                                qual_type = "Max Streak Formula"
                            elif qualifier_str.startswith("count-streak-formula:"):
                                qual_str = "count-streak-formula:"
                                qual_type = "Count Streak Formula"
                            elif qualifier_str.startswith("event-formula:"):
                                qual_str = "event-formula:"
                                qual_type = "Event Formula"

                            formula = unescape_string(re.split(r"(?<!\\)" + qual_str, qualifier_str)[1][1:-1])
                            if "Streak" in qual_type:
                                qualifier_obj["values"] = [{
                                    "start_level" : 1,
                                    "end_level" : 1,
                                    "stat_quals" : None,
                                    "time_frame" : None,
                                    "stats" : [{
                                        "stat" : formula,
                                        "start_val" : 1,
                                        "end_val" : 1,
                                    }]
                                }]
                            else:
                                qualifier_obj["values"] = [formula]

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"(no(?:t|n)?(?: |-))?(?:only ?)?(before|after|exact|through)? *(?:season-)?age:? *(?:(\d+)(y|m|d)?)(?:(\d+)(y|m|d)?)?(?:(\d+)(y|m|d)?)?(?:-(?:(\d+)(y|m|d)?)(?:(\d+)(y|m|d)?)?(?:(\d+)(y|m|d)?)?)?", time_frame)
                        for m in last_match:
                            qualifier_obj = {}

                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            compare_type = m.group(2)

                            days = 0
                            years = 0
                            months = 0
                            days_2 = 0
                            years_2 = 0
                            months_2 = 0

                            date_1 = m.group(3)
                            unit_1 = m.group(4)
                            date_2 = m.group(5)
                            unit_2 = m.group(6)
                            date_3 = m.group(7)
                            unit_3 = m.group(8)
                            date_1_2 = m.group(9)
                            unit_1_2 = m.group(10)
                            date_2_2 = m.group(11)
                            unit_2_2 = m.group(12)
                            date_3_2 = m.group(13)
                            unit_3_2 = m.group(14)

                            has_first_months = False
                            has_first_days = False
                            has_second_months = False
                            has_second_days = False

                            if date_1:
                                if unit_1 == "d":
                                    days = int(date_1)
                                    has_first_days = True
                                elif unit_1 == "m":
                                    months = int(date_1)
                                    has_first_months = True
                                else:
                                    years = int(date_1)

                            if date_2:
                                if unit_2 == "d":
                                    days = int(date_2)
                                    has_first_days = True
                                elif unit_2 == "m":
                                    months = int(date_2)
                                    has_first_months = True
                                else:
                                    years = int(date_2)

                            if date_3:
                                if unit_3 == "d":
                                    days = int(date_3)
                                    has_first_days = True
                                elif unit_3 == "m":
                                    months = int(date_3)
                                    has_first_months = True
                                else:
                                    years = int(date_3)

                            second_match = False
                            if date_1_2 or date_2_2 or date_3_2:
                                second_match = True
                                if date_1_2:
                                    if unit_1_2 == "d":
                                        days_2 = int(date_1_2)
                                        has_second_days = True
                                    elif unit_1_2 == "m":
                                        months_2 = int(date_1_2)
                                        has_second_months = True
                                    else:
                                        years_2 = int(date_1_2)

                                if date_2_2:
                                    if unit_2_2 == "d":
                                        days_2 = int(date_2_2)
                                        has_second_days = True
                                    elif unit_2 == "m":
                                        months_2 = int(date_2_2)
                                        has_second_months = True
                                    else:
                                        years_2 = int(date_2_2)

                                if date_3_2:
                                    if unit_3_2 == "d":
                                        days_2 = int(date_3_2)
                                        has_second_days = True
                                    elif unit_3 == "m":
                                        months_2 = int(date_3_2)
                                        has_second_months = True
                                    else:
                                        years_2 = int(date_3_2)

                            if not compare_type or not compare_type.strip():
                                if second_match:
                                    qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years_2, months=months_2, days=days_2)
                                    if not has_second_months:
                                        qualifier_obj["time_unit_end"].months = 12
                                    if not has_second_days:
                                        qualifier_obj["time_unit_end"].days = -1
                                else:
                                    qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                    if not has_second_months:
                                        qualifier_obj["time_unit_end"].months = 12
                                    if not has_second_days:
                                        qualifier_obj["time_unit_end"].days = -1
                            elif compare_type.startswith("after"):
                                qualifier_obj["time_unit_end"] = datetime.date.max
                                qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                            elif compare_type.startswith("exact"):
                                qualifier_obj["time_unit_start"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                qualifier_obj["time_unit_start"] = qualifier_obj["time_unit_start"]
                            elif compare_type.startswith("through"):
                                qualifier_obj["time_unit_start"] = datetime.date.min
                                qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days)
                                if not has_second_months:
                                    qualifier_obj["time_unit_end"].months = 12
                                if not has_second_days:
                                    qualifier_obj["time_unit_end"].days = -1
                            else:
                                qualifier_obj["time_unit_start"] = datetime.date.min
                                if "season-age" in m.group(0):
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years - 1, months=months, days=days)
                                else:
                                    qualifier_obj["time_unit_end"] = dateutil.relativedelta.relativedelta(years=years, months=months, days=days - 1)

                            compare_str = compare_type.title() + " " if compare_type else ""
                
                            if years:
                                compare_str += str(years) + "Y-"
                            if months:
                                compare_str += str(months) + "M-"
                            if days:
                                compare_str += str(days) + "D-"
                            qualifier_obj["compare_str"] = compare_str[:-1]

                            if not compare_type and second_match:
                                qualifier_obj["compare_str"] += " to "
                                if years_2:
                                    qualifier_obj["compare_str"] += str(years_2) + "Y-"
                                if months_2:
                                    qualifier_obj["compare_str"] += str(months_2) + "M-"
                                if days_2:
                                    qualifier_obj["compare_str"] += str(days_2) + "D-"
                                qualifier_obj["compare_str"] = qualifier_obj["compare_str"][:-1]
                                
                            qual_type = "Season Age" if "season-age" in m.group(0) else "Age"

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((\S+)-(inning|out|strike|ball|score-game|run-game|men-on-base|man-on-base|time-through-lineup|run|rbi)s?)\b", time_frame)
                        for m in last_match:
                            if m.group(3) == "last":
                                continue

                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False
                            
                            qualifier_str = m.group(4)
                            if qualifier_str == "inning":
                                qual_type = "Inning"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "out":
                                qual_type = "Outs"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "strike":
                                qual_type = "Strikes"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "ball":
                                qual_type = "Balls"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "men-on-base" or qualifier_str == "man-on-base":
                                qual_type = "Number Of Men On Base"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "men-in-scoring" or qualifier_str == "man-in-scoring":
                                qual_type = "Number Of Men In Scoring"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "time-through-lineup":
                                qual_type = "Time Through Lineup"
                                player_type["da_type"] = "Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "run":
                                qual_type = "Runs"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "rbi":
                                qual_type = "RBIs"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "score-game" or qualifier_str == "run-game":
                                qual_type = "Score Margin"
                                extra_stats.add("current-stats")
                            
                            try:
                                value = ordinal_to_number(m.group(3))
                            except Exception:
                                continue

                            if isinstance(value, int):
                                if qual_type == "Score Margin":
                                    qualifier_obj["values"] = {
                                        "start_val" : -value,
                                        "end_val" : value
                                    }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : value,
                                        "end_val" : value
                                    }

                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((facing-batting|batting|leading-by|trailing-by|series-game)-(\S+))\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False
                            
                            qualifier_str = m.group(3)
                            if qualifier_str == "batting":
                                qual_type = "Batting Order Position"
                                player_type["da_type"] = "Batter"
                            elif qualifier_str == "facing-batting":
                                qual_type = "Pitching Against Batting Order"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str == "leading-by":
                                qual_type = "Score Margin"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "trailing-by":
                                qual_type = "Score Margin"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "series-game":
                                qual_type = "Series Game"
                                if not playoffs:
                                    playoffs = "Only"

                            try:
                                value = ordinal_to_number(m.group(4))
                            except Exception:
                                continue

                            if isinstance(value, int):
                                if qual_type == "Score Margin":
                                    if qualifier_str == "leading-by":
                                        qualifier_obj["values"] = {
                                            "start_val" : value,
                                            "end_val" : value
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : -value,
                                            "end_val" : -value
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : value,
                                        "end_val" : value
                                    }

                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?(current-season-age|first-games?|current-games?|first-seasons?|current-seasons?|last-games?|last-seasons?|first-starts?|last-starts?|first-innings|last-innings|current-innings?|first-plate-appearances?|last-plate-appearances?|current-plate-appearances?|first-batters?-faced|last-batters?-faced|current-batters?-faced|first-pitches|last-pitch(?:es)|current-pitch(?:es)?|first-at-bats?|last-at-bats?|current-at-bats?|current-age|rook|rookie|facing-former-franchise|facing-former-team|decision|interleague|intraleague|interdivision|intradivision|current-winning-opponents?|current-losing-opponents?|current-tied-opponents?|current-winning-or-tied-opponents?|current-losing-or-tied-opponents?|winning-opponents?|losing-opponents?|tied-opponents?|winning-or-tied-opponents?|losing-or-tied-opponents?|playoff-opponents?|ws-winner-opponent|pennant-winner-opponent|division-winner-opponent|current-winning-teams?|current-losing-teams?|current-tied-teams?|current-winning-or-tied-teams?|current-losing-or-tied-teams?|winning-teams?|losing-teams?|tied-teams?|winning-or-tied-teams?|losing-or-tied-teams?|playoff-teams?|ws-winner-team|pennant-winner-team|division-winner-team|elimination-or-clinching|clinching-or-elimination|elimination(?:-games?)?|eliminating(?:-games?)?|clinching(?:-games?)?|clinch(?:-games?)?|winner-take-all|behind-in-series|ahead-in-series|even-in-series|leading-off-inning|leading-off-whole-game|leading-off-game|leading-off|leading(:?-in-game)?|trailing(:?-in-game)?|tied?(:?(?:-in)?-game)?|force-dates|first-half|second-half|pre-all-star|post-all-star|series-games?:[\w-]+|t:[\w-]+|o:[\w-]+|m:[\w-]+|d:[\w-]+|dt:[\w-]+|team-franchise:[\w-]+|opponent-franchise:[\w-]+|franchise:[\w-]+|tf:[\w-]+|of:[\w-]+|f:[\w-]+|tv-network:[\S]+|radio-network:[\S]+|exact-tv-network:[\S]+|exact-radio-network:[\S]+|national-tv-network:[\S]+|national-exact-tv-network:[\S]+|any-national-tv-network:[\S]+|any-national-exact-tv-network:[\S]+|local-event-time:[\S-]+|local-start-time:[\S-]+|team-start-time:[\S-]+|opponent-start-time:[\S-]+|team-event-time:[\S-]+|opponent-event-time:[\S-]+|previous-event(?:-type)?:[\w-]+|previous-exact-event(?:-type)?:[\w-]+|upcoming-player-event(?:-type)?:[\w-]+|upcoming-exact-player-event(?:-type)?:[\w-]+|previous-player-event(?:-type)?:[\w-]+|previous-exact-player-event(?:-type)?:[\w-]+|upcoming-event(?:-type)?:[\w-]+|upcoming-exact-event(?:-type)?:[\w-]+|event(?:-type)?:[\w-]+|exact-event(?:-type)?:[\w-]+|hit-x-coordinate:[\S-]+|hit-y-coordinate:[\S-]+|hit-coordinates:[\S-]+|absolute-pitch-x-coordinate:[\w-]+|absolute-pitch-y-coordinate:[\w-]+|absolute-pitch-coordinates:[\w-]+|pitch-x-coordinate:[\S-]+|pitch-y-coordinate:[\S-]+|pitch-coordinates:[\S-]+|hit-within-distance:[\S-]+|pitch-within-distance:[\S-]+|absolute-pitch-within-distance:[\S-]+|team-stadium:[\w-]+|team-arena:[\w-]+|franchise-stadium:[\w-]+|franchise-arena:[\w-]+|team:[\w-]+|opponent:[\w-]+|team-central-european-time-zone|team-eastern-european-time-zone|team-japan-time-zone|team-hawaii-time-zone|team-greenwich-time-zone|team-australian-time-zone|team-atlantic-time-zone|team-eastern-time-zone|team-central-time-zone|team-mountain-time-zone|team-pacific-time-zone|opponent-central-european-time-zone|opponent-eastern-european-time-zone|opponent-japan-time-zone|opponent-hawaii-time-zone|opponent-greenwich-time-zone|opponent-australian-time-zone|opponent-atlantic-time-zone|opponent-eastern-time-zone|opponent-central-time-zone|opponent-mountain-time-zone|opponent-pacific-time-zone|central-european-time-zone|eastern-european-time-zone|japan-time-zone|hawaii-time-zone|greenwich-time-zone|australian-time-zone|atlantic-time-zone|eastern-time-zone|central-time-zone|mountain-time-zone|pacific-time-zone|time-zone:[\S-]+|exact-time-zone:[\S-]+|state:[\w-]+|exact-state:[\w-]+|province:[\w-]+|exact-province:[\w-]+|team-time-zone:[\S-]+|team-exact-time-zone:[\S-]+|team-state:[\w-]+|team-exact-state:[\w-]+|team-province:[\w-]+|team-exact-province:[\w-]+|opponent-time-zone:[\S-]+|opponent-exact-time-zone:[\S-]+|opponent-state:[\w-]+|opponent-exact-state:[\w-]+|opponent-province:[\w-]+|opponent-exact-province:[\w-]+|opponent-country:[\w-]+|opponent-exact-country:[\w-]+|team-country:[\w-]+|team-exact-country:[\w-]+|country:[\w-]+|exact-country:[\w-]+|month:[\w-]+|day:[\w-]+|date:[\w-]+|gm:[\w-]+|game:[\w-]+|season-gm:[\w-]+|season-game:[\w-]+|season:[\w-]+|season-reversed:[\w-]+|seasons:[\w-]+|seasons-reversed:[\w-]+|tmgm:[\w-]+|team-games?:[\w-]+|crgm:[\w-]+|career-games?-reversed:[\w-]+|team-games?-reversed:[\w-]+|season-games?-reversed:[\w-]+|games?-reversed:[\w-]+|career-games?:[\w-]+|dr:[\w-]+|starts-days-rest:[\w-]+|days-rest:[\w-]+|prv-dr:[\w-]+|previous-days-rest:[\w-]+|batter-plate-appearance:[\w-]+|pitcher-batters-faced:[\w-]+|batter-plate-appearance-reversed:[\w-]+|pitcher-batters-faced-reversed:[\w-]+|pitch-count:[\w-]+|starting-pitch-count:[\w-]+|innings-pitched:[\S-]+|ending-innings-pitched:[\S-]+|team-pitch-count:[\w-]+|game-pitch-count:[\w-]+|at-bat-pitch-count:[\w-]+|upc-dr:[\w-]+|games-in-days:[\S-]+|starts-in-days:[\S-]+|upcoming-starts-days-rest:[\w-]+|upcoming-days-rest:[\w-]+|gr:[\w-]+|game-days-rest:[\w-]+|start-days-rest:[\w-]+|games-rest:[\w-]+|starts-rest:[\w-]+|prv-gr:[\w-]+|previous-games-rest:[\w-]+|start-days-in-a-row:[\w-]+|game-days-in-a-row:[\w-]+|days-in-a-row:[\w-]+|games-in-a-row:[\w-]+|starts-in-a-row:[\w-]+|game-number:[\w-]+|season-number:[\w-]+|number:[\w-]+|upc-gr:[\w-]+|upcoming-games-rest:[\w-]+|prv-t:[\w-]+|prv-o:[\w-]+|upc-t:[\w-]+|upc-o:[\w-]+|upcoming-same-opponent|previous-same-opponent|previous-franchise:[\w-]+|previous-team-franchise:[\w-]+|previous-opponent-franchise:[\w-]+|upcoming-franchise:[\w-]+|upcoming-team-franchise:[\w-]+|upcoming-opponent-franchise:[\w-]+|previous-team:[\w-]+|previous-opponent:[\w-]+|upcoming-team:[\w-]+|upcoming-opponent:[\w-]+|lg:[\w-]+|team-league:[\w-]+|opp-lg:[\w-]+|opponent-league:[\w-]+|previous-team-league:[\w-]+|previous-opponent-league:[\w-]+|upcoming-team-league:[\w-]+|upcoming-team-league:[\w-]+|team-division:[\S-]+|opponent-division:[\S-]+|primary-season-position:[\S-]+|season-position:[\S-]+|ph-for-position:[\S-]+|position:[\S-]+|hit-location:[\S-]+|exact-hit-location:[\S-]+|facing-primary-position:[\S-]+|facing-main-position:[\S-]+|facing-ph-for-position:[\S-]+|facing-position:[\S-]+|starting-game-position:[\S-]+|primary-game-position:[\S-]+|game-position:[\S-]+|prv-season-st:[\S-]+|previous-season-stat:[\S-]+|upc-season-st:[\S-]+|upcoming-season-stat:[\S-]+|season-st:[\S-]+|season-stat:[\S-]+|individual-event-stat:[\S-]+|indv-event-stat:[\S-]+|ind-event-stat:[\S-]+|game-event-stat:[\S-]+|game-event-stat-reversed:[\S-]+|game-event-stats:[\S-]+|game-event-stats-reversed:[\S-]+|event-stat:[\S-]+|event-stat-reversed:[\S-]+|event-stats:[\S-]+|event-stats-reversed:[\S-]+|starting-game-event-stat:[\S-]+|starting-game-event-stat-reversed:[\S-]+|starting-game-event-stats:[\S-]+|starting-game-event-stats-reversed:[\S-]+|starting-event-stat:[\S-]+|starting-event-stat-reversed:[\S-]+|starting-event-stats:[\S-]+|starting-event-stats-reversed:[\S-]+|inning-stat:[\S-]+||st:[\S-]+|stat:[\S-]+|prv-st:[\S-]+|previous-stat:[\S-]+|upc-st:[\S-]+|upcoming-stat:[\S-]+|min-st:[\S-]+|min-stat:[\S-]+|max-st:[\S-]+|max-stat:[\S-]+|totalgames-st:[\S-]+|totalgames-stat:[\S-]+|max-str:[\S-]+|max-streak:[\S-]+|ctn-str:[\S-]+|count-streak:[\S-]+|q:[\S-]+|quickest:[\S-]+|s:[\S-]+|slowest:[\S-]+|dh(?::[((?:f|s|b|e)-]+)?|double-header(?::[((?:first|second|both|either)-]+)?|world(?:(?: |-)series|(?: |-)finals?|(?: |-)championship|(?: |-)?round)?|ws|(?:(?:(?:american|al|national|nl)(?:(?: |-)league)?)(?: |-)?)?(?:championship|league)(?:(?: |-)series|(?: |-)finals?|(?: |-)championship|(?: |-)?round)?|(?:(?:(?:american|al|national|nl)(?:(?: |-)league)?)(?: |-)?)?cs|(?:(?:(?:american|al|national|nl)(?:(?: |-)league)?)(?: |-)?)?division(?:(?: |-)series|(?: |-)finals?|(?: |-)championship|(?: |-)?round)?|(?:(?:(?:american|al|national|nl)(?:(?: |-)league)?)(?: |-)?)?ds|(?:(?:(?:american|al|national|nl)(?:(?: |-)league)?)(?: |-)?)?wild(?: |-)?card(?:(?: |-)series|(?: |-)finals?|(?: |-)championship|(?: |-)?round)?|(?:(?:(?:american|al|national|nl)(?:(?: |-)league)?)(?: |-)?)?wc|summer|spring|winter|fall|autumn|away|home|road|bunt(?:ing)?|previous-away|previous-home|previous-road|upcoming-away|upcoming-home|upcoming-road|-?starts?|-?started|-?starting|-?ignore-starts?|-?ignore-started?|-?ignore-starting|finished|win(?:s)?|loss(?:es)?|tie(?:s)?|w|l|tprv-w|prv-l|prv-t|upc-w|upc-l|upc-t|previous-win(?:s)?|previous-loss(?:es)?|previous-tie(?:s)?|upcoming-win(?:s)?|upcoming-loss(?:es)?|upcoming-tie(?:s)?|prv-t-w|prv-t-l|prv-t-t|upc-t-w|upc-t-l|upc-t-t|previous-team-win(?:s)?|previous-team-loss(?:es)?|previous-team-tie(?:s)?|upcoming-team-win(?:s)?|upcoming-team-loss(?:es)?|upcoming-team-tie(?:s)?|save(?: |-)situations?|run-support:[\w-]+|final-team-score:[\w-]+|men-on-base:[\w-]+|time-through-lineup:[\w-]+|time-facing-opponent:[\w-]+|men-in-scoring-number:[\w-]+|men-on-base-number:[\w-]+|final-opponent-score:[\w-]+|final-score-margin:[\S-]+|final-score-difference:[\S-]+|ending-team-score:[\w-]+|ending-opponent-score:[\w-]+|ending-score-margin:[\S-]+|ending-score-difference:[\S-]+|team-score:[\w-]+|entered-score:[\w-]+|opponent-score:[\w-]+|score-margin-entered:[\S-]+|score-margin:[\S-]+|score-difference-entered:[\S-]+|score-difference:[\S-]+|wind:[\w-]+|inning-entered:[\w-]+|men-on-base-entered:[\w-]+|men-in-scoring-entered:[\w-]+|outs-entered:[\w-]+|bases-empty|men-on-base|risp|inherited|earned|batter-reached-base|any-national-game|national-game|pitcher-first-batter-faced|batter-first-plate-appearance|pitcher-last-batter-faced|batter-last-plate-appearance|day-after-pitching|day-after-hitting|day-before-pitching|day-before-hitting|with-new-team|with-new-franchise|changing-team|changing-franchise|even-calendar-year|odd-calendar-year|even-year|odd-year|activated-from-(?:il|dl)|activated|two-seam-fastball|4-seam-fastball|2-seam-fastball|four-seam-fastball|4-seam|2-seam|four-seam|two-seam|cutter|intentional-ball|sinker|slider|curveball|splitter|knuckle-curve|pitchout|knuckle-ball|changeup|screwball|eephus|automatic-ball|slow-curve|forkball|facing-position-player|facing-pitcher|stealing-second|stealing-third|stealing-home|fastball|out-of-zone|in-zone|breaking|offspeed|facing-qualified-rookie|facing-rookie|facing-lefty|facing-righty|platoon-advantage|batting-lefty|batting-righty|pitching-lefty|pitching-righty|pinch-hitting|facing-starter|facing-reliever|inning-started|swung-at-first-pitch|first-pitch|batter-ahead|pitcher-ahead|even-count|after-batter-ahead|after-pitcher-ahead|after-even-count|go-ahead-or-game-tying-opp|go-ahead-or-game-tying|game-tying-or-go-ahead-opp|game-tying-or-go-ahead|game-tying-opp|close|late|game-tying|go-ahead-opp|go-ahead|game-winning|last-inning-entered|last-inning|last-out|last-batter|extra-innings|inside-the-park-hr|walk-off-opp|walk-off|tying-on-deck|tying-on-first|tying-on-second|tying-on-third|tying-at-bat|tying-in-scoring|tying-on-base|go-ahead-on-deck|go-ahead-on-first|go-ahead-on-second|go-ahead-on-third|go-ahead-at-bat|go-ahead-in-scoring|go-ahead-on-base|go-ahead-or-tying-on-deck|go-ahead-or-tying-on-first|go-ahead-or-tying-on-second|go-ahead-or-tying-on-third|go-ahead-or-tying-at-bat|go-ahead-or-tying-in-scoring|go-ahead-or-tying-on-base|bottom-inning-entered|top-inning-entered|bottom-inning|top-inning|full-count|man-on-first|man-on-second|man-on-third|bases-loaded|after-swinging-on-strikes:[\w-]+|after-swinging-on-balls:[\w-]+|swinging-on-strikes:[\w-]+|swinging-on-balls:[\w-]+|after-strikes:[\w-]+|after-balls:[\w-]+|strikes:[\w-]+|balls:[\w-]+|ending-outs:[\w-]+|play-outs:[\w-]+|outs-remaining-entered:[\w-]+|outs-remaining:[\w-]+|outs:[\w-]+|runs:[\w-]+|rbis:[\w-]+|number-drove-in:[\w-]+|pitch-speed:[\S-]+|pitch-zone:[\w-]+|pitch-spin:[\S-]+|exit-velocity:[\S-]+|hit-distance:[\S-]+|launch-angle:[\S-]+|inning:[\S-]+|inning-reversed:[\S-]+|scheduled-inning-reversed:[\S-]+|pitching-against-batting-order:[\w-]+|count:[\S-]+|final-score:[\S-]+|previous-score:[\S-]+|upcoming-score:[\S-]+|ending-score:[\S-]+|score:[\S-]+|after-count:[\S-]+|after-swinging-on-count:[\S-]+|swinging-on-count:[\S-]+|temperature:[\w-]+|new-moon|waning-crescent|third-quarter|waning-gibbous|full-moon|waxing-gibbous|first-quarter|waxing-crescent|grass|artificial|rain|cloudy|partly-cloudy|overcast|drizzle|sunny|dome|roof-closed|clear|previous-team-score:[\w-]+|previous-opponent-score:[\w-]+|previous-score-margin:[\S-]+|previous-score-difference:[\S-]+|upcoming-team-score:[\w-]+|upcoming-opponent-score:[\w-]+|upcoming-score-margin:[\S-]+|upcoming-score-difference:[\S-]+|series-team-wins:[\w-]+|series-opponent-wins:[\w-]+|series-score-margin:[\w-]+|series-score-difference:[\w-]+|series-score:[\w-]+|calendar-years?:[\w-]+|years?:[\w-]+|batting-order(?:-pos(?:ition)?|-spot)?:[\w-]+|opponent-runs?-rank:[\S-]+|current-team-wins:[\w-]+|current-team-losses:[\w-]+|current-team-games-over-500:[\S-]+|current-opponent-wins:[\w-]+|current-opponent-losses:[\w-]+|current-opponent-games-over-500:[\S-]+|attendance:[\w-]+|team-wins:[\w-]+|team-losses:[\w-]+|team-games-over-500:[\S-]+|opponent-wins:[\w-]+|opponent-losses:[\w-]+|opponent-games-over-500:[\S-]+|opponent-standings-rank:[\S-]+|opponent-runs?-allowed-rank:[\S-]+|opponent-wrc\\\+-rank:[\S-]+|opponent-avg-rank:[\S-]+|opponent-slg-rank:[\S-]+|opponent-obp-rank:[\S-]+|opponent-ops-rank:[\S-]+|opponent-era--rank:[\S-]+|opponent-era-rank:[\S-]+|current-opponent-win(?:ning)?-percent:[\S-]+|opponent-win(?:ning)?-percent:[\S-]+|team-runs?-rank:[\S-]+|team-standings-rank:[\S-]+|team-runs?-allowed-rank:[\S-]+|team-wrc\\\+-rank:[\S-]+|team-avg-rank:[\S-]+|team-slg-rank:[\S-]+|team-obp-rank:[\S-]+|team-ops-rank:[\S-]+|team-era--rank:[\S-]+|team-era-rank:[\S-]+|current-team-win(?:ning)?-percent:[\S-]+|team-win(?:ning)?-percent:[\S-]+|birthda(?:y|te)|early-?afternoon|late-?afternoon|morning|early|afternoon|daytime|day|night(?:time)?|evening|late|pitching|batting|hitting|" + all_months_re + r"|" + all_days_re + r'|' + all_event_types_re + r")(?!\S+)", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False
                            
                            qualifier_str = m.group(2)
                            og_qual_str = qualifier_str
                            league_qual_obj = None
                            if qualifier_str.startswith("american") or qualifier_str.startswith("al") or qualifier_str.startswith("national") or qualifier_str.startswith("nl"):
                                league_team_league = "al" if qualifier_str.startswith("american") or qualifier_str.startswith("al") else "nl"
                                league_qual_obj = {}
                                league_qual_obj["negate"] = qualifier_obj["negate"]
                                league_qual_obj["values"] = [league_team_league]

                                if qualifier_str.startswith("american") or qualifier_str.startswith("national"):
                                    qualifier_str = qualifier_str[8:].strip()
                                else:
                                    qualifier_str = qualifier_str[2:].strip()
                                if qualifier_str.startswith("-"):
                                    qualifier_str = qualifier_str[1:]
                        
                            if not qualifier_str.endswith("-opponent") and not qualifier_str.endswith("-team"):
                                if qualifier_str.startswith("world"):
                                    qualifier = "ws"
                                    qualifier_str = qualifier
                                elif qualifier_str.startswith("championship") or qualifier_str.startswith("league"):
                                    qualifier = "cs"
                                    qualifier_str = qualifier
                                elif qualifier_str.startswith("division"):
                                    qualifier = "ds"
                                    qualifier_str = qualifier
                                elif qualifier_str.startswith("wild card") or qualifier_str.startswith("wild-card") or qualifier_str.startswith("wildcard"):
                                    qualifier = "wc"
                                    qualifier_str = qualifier
                                else:
                                    qualifier = qualifier_str
                            else:
                                qualifier = qualifier_str
                                                        
                            if not (qualifier == "ws" or qualifier == "cs" or qualifier == "ds" or qualifier == "wc"):
                                qualifier_str = og_qual_str
                            
                            qual_type = None
                            if qualifier == "ws" or qualifier == "cs" or qualifier == "ds" or qualifier == "wc":
                                qual_type = "Round"
                                if not playoffs:
                                    playoffs = "Only"
                                qualifier_obj["values"] = [qualifier]

                                if league_qual_obj:
                                    if not "Team League" in qualifiers:
                                        qualifiers["Team League"] = []
                                    qualifiers["Team League"].append(league_qual_obj)
                            elif qualifier_str.startswith("current-season-age"):
                                qual_type = "Current Season Age"
                            elif qualifier_str.startswith("first-game") or qualifier_str.startswith("current-game"):
                                qual_type = "First Games"
                            elif qualifier_str.startswith("first-season") or qualifier_str.startswith("current-season"):
                                qual_type = "First Seasons"
                            elif qualifier_str.startswith("first-innings") or qualifier_str.startswith("current-inning"):
                                qual_type = "First Innings"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str.startswith("first-at-bat") or qualifier_str.startswith("current-at-bat"):
                                qual_type = "First At Bats"
                            elif qualifier_str.startswith("first-plate-appearance") or qualifier_str.startswith("current-plate-appearance"):
                                qual_type = "First Plate Appearances"
                                player_type["da_type"] = "Batter"
                            elif qualifier_str.startswith("first-batter-faced") or qualifier_str.startswith("current-batter-faced") or qualifier_str.startswith("first-batters-faced") or qualifier_str.startswith("current-batters-faced"):
                                qual_type = "First Batters Faced"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str.startswith("first-pitches") or qualifier_str.startswith("current-pitch"):
                                qual_type = "First Pitches"
                            elif qualifier_str.startswith("last-game"):
                                qual_type = "Last Games"
                            elif qualifier_str.startswith("last-season"):
                                qual_type = "Last Seasons"
                            elif qualifier_str.startswith("last-innings"):
                                qual_type = "Last Innings"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str.startswith("last-plate-appearance"):
                                qual_type = "Last Plate Appearances"
                                player_type["da_type"] = "Batter"
                            elif qualifier_str.startswith("last-batter-faced") or qualifier_str.startswith("last-batters-faced"):
                                qual_type = "Last Batters Faced"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str.startswith("last-pitch"):
                                qual_type = "Last Pitches"
                            elif qualifier_str.startswith("last-at-bat"):
                                qual_type = "Last At Bats"
                            elif qualifier_str.startswith("first-start"):
                                qual_type = "First Games"
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })
                            elif qualifier_str.startswith("last-start"):
                                qual_type = "Last Games"
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })
                            elif qualifier_str.startswith("current-age"):
                                qual_type = "Current Age"
                            elif qualifier_str.startswith("rook"):
                                qual_type = "Rookie"
                            elif qualifier_str == "facing-former-team":
                                qual_type = "Facing Former Team"
                            elif qualifier_str == "facing-former-franchise":
                                qual_type = "Facing Former Franchise"
                            elif qualifier_str == "decision":
                                player_type["da_type"] = "Pitcher"
                                qual_type = "Decision"
                            elif qualifier_str == "interleague":
                                qual_type = "Interleague"
                            elif qualifier_str == "intraleague":
                                qual_type = "Intraleague"
                            elif qualifier_str == "interdivision":
                                qual_type = "Interdivision"
                            elif qualifier_str == "intradivision":
                                qual_type = "Intradivision"
                            elif qualifier_str == "bases-empty":
                                qual_type = "Bases Empty"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "men-on-base":
                                qual_type = "Men On Base"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "risp":
                                qual_type = "RISP"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "inherited":
                                qual_type = "Inherited"
                                extra_stats.add("current-stats")
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str == "earned":
                                qual_type = "Earned"
                                extra_stats.add("current-stats")
                                extra_stats.add("show-only-stat-r")
                                extra_stats.add("show-only-stat-rbi")
                                extra_stats.add("show-only-stat-gwrbi")
                                extra_stats.add("show-stat-drivenin")
                                extra_stats.add("show-stat-gwdrivenin")
                                extra_stats.add("show-only-stat-drivenin")
                                extra_stats.add("show-only-stat-gwdrivenin")
                                player_type["da_type"] = "Batter"
                            elif qualifier_str == "batter-reached-base":
                                qual_type = "Batter Reached Base"
                                extra_stats.add("current-stats")
                                extra_stats.add("no-steals")
                            elif qualifier_str == "national-game":
                                qual_type = "National Game"
                            elif qualifier_str == "any-national-game":
                                qual_type = "Any National Game"
                            elif qualifier_str == "pitcher-first-batter-faced":
                                qual_type = "Pitcher First Batter Faced"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "batter-first-plate-appearance":
                                qual_type = "Batter First Plate Appearance"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "pitcher-last-batter-faced":
                                qual_type = "Pitcher Last Batter Faced"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "batter-last-plate-appearance":
                                qual_type = "Batter Last Plate Appearance"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "day-after-pitching":
                                qual_type = "Day After Pitching"
                                player_type["da_type"] = "Batter"
                            elif qualifier_str == "day-after-hitting":
                                qual_type = "Day After Hitting"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str == "day-before-pitching":
                                qual_type = "Day Before Pitching"
                                player_type["da_type"] = "Batter"
                            elif qualifier_str == "day-before-hitting":
                                qual_type = "Day Before Hitting"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str == "with-new-team":
                                qual_type = "With New Team"
                            elif qualifier_str == "with-new-franchise":
                                qual_type = "With New Franchise"
                            elif qualifier_str.startswith("previous-same-opponent"):
                                qual_str = "previous-same-opponent"
                                qual_type = "Previous Same Opponent"
                            elif qualifier_str.startswith("upcoming-same-opponent"):
                                qual_str = "upcoming-same-opponent"
                                qual_type = "Upcoming Same Opponent"
                            elif qualifier_str == "even-year":
                                qual_type = "Even Year"
                            elif qualifier_str == "odd-year":
                                qual_type = "Odd Year"
                            elif qualifier_str == "even-calendar-year":
                                qual_type = "Even Calendar Year"
                            elif qualifier_str == "odd-calendar-year":
                                qual_type = "Odd Calendar Year"
                            elif qualifier_str == "activated":
                                qual_type = "Activated"
                            elif qualifier_str.startswith("activated-from-"):
                                qual_type = "Activated From IL"
                            elif qualifier_str in ("four-seam", "4-seam", "two-seam", "2-seam", "4-seam-fastball", "2-seam-fastball", "four-seam-fastball", "cutter", "intentional-ball", "sinker", "two-seam-fastball", "slider", "curveball", "splitter", "knuckle-curve", "pitchout", "knuckle-ball", "changeup", "screwball", "eephus", "automatic-ball", "slow-curve", "forkball"):
                                qual_type = "Exact Pitch Type"
                                if qualifier_str in ("four-seam", "4-seam", "4-seam-fastball"):
                                    qualifier_obj["values"] = ["four seam fastball"]
                                elif qualifier_str in ("two-seam", "2-seam", "2-seam-fastball"):
                                    qualifier_obj["values"] = ["two seam fastball"]
                                else:
                                    qualifier_obj["values"] = [qualifier_str.replace("-", " ")]
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            elif qualifier_str == "facing-pitcher":
                                qual_type = "Facing Pitcher"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "facing-position-player":
                                qual_type = "Facing Position Player"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "stealing-second":
                                qual_type = "Stealing Second"
                                extra_stats.add("current-stats")
                                extra_stats.add("stolen-base")
                            elif qualifier_str == "stealing-third":
                                qual_type = "Stealing Third"
                                extra_stats.add("current-stats")
                                extra_stats.add("stolen-base")
                            elif qualifier_str == "stealing-home":
                                qual_type = "Stealing Home"
                                extra_stats.add("current-stats")
                                extra_stats.add("stolen-base")
                            elif qualifier_str == "fastball":
                                qual_type = "Fastball"
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            elif qualifier_str == "out-of-zone":
                                qual_type = "Out Of Zone"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "in-zone":
                                qual_type = "In Zone"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "breaking":
                                qual_type = "Breaking"
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            elif qualifier_str == "offspeed":
                                qual_type = "Offspeed"
                                extra_stats.add("current-stats")
                                extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-pit%")
                            elif qualifier_str == "facing-lefty":
                                qual_type = "Facing Lefty"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "facing-righty":
                                qual_type = "Facing Righty"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "facing-rookie":
                                qual_type = "Facing Rookie"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "facing-qualified-rookie":
                                qual_type = "Facing Qualified Rookie"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "platoon-advantage":
                                qual_type = "Platoon Advantage"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "batting-lefty":
                                qual_type = "Batting Lefty"
                                extra_stats.add("current-stats")
                                player_type["da_type"] = "Batter"
                            elif qualifier_str == "batting-righty":
                                qual_type = "Batting Righty"
                                extra_stats.add("current-stats")
                                player_type["da_type"] = "Batter"
                            elif qualifier_str == "pitching-lefty":
                                qual_type = "Pitching Lefty"
                                extra_stats.add("current-stats")
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str == "pitching-righty":
                                qual_type = "Pitching Righty"
                                extra_stats.add("current-stats")
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str == "pinch-hitting":
                                qual_type = "Pinch Hitting"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "facing-starter":
                                qual_type = "Facing Starter"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "facing-reliever":
                                qual_type = "Facing Reliever"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "leading-off-inning":
                                qual_type = "Leading Off Inning"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "inning-started":
                                qual_type = "Inning Started"
                                extra_stats.add("current-stats")
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str == "leading-off":
                                qual_type = "Leading Off Inning"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "leading-off-game":
                                qual_type = "Leading Off Game"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "leading-off-whole-game":
                                qual_type = "Leading Off Whole Game"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "swung-at-first-pitch":
                                qual_type = "Swung At First Pitch"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "batter-ahead":
                                qual_type = "Batter Ahead"
                                extra_stats.add("current-stats")
                                if "statcast" in extra_stats:
                                    extra_stats.add("show-stat-pit")
                            elif qualifier_str == "even-count":
                                qual_type = "Even Count"
                                extra_stats.add("current-stats")
                                if "statcast" in extra_stats:
                                    extra_stats.add("show-stat-pit")
                            elif qualifier_str == "pitcher-ahead":
                                qual_type = "Pitcher Ahead"
                                extra_stats.add("current-stats")
                                if "statcast" in extra_stats:
                                    extra_stats.add("show-stat-pit")
                            elif qualifier_str == "after-batter-ahead":
                                qual_type = "After Batter Ahead"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "after-even-count":
                                qual_type = "After Even Count"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "after-pitcher-ahead":
                                qual_type = "After Pitcher Ahead"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "first-pitch":
                                qual_type = "First Pitch"
                                extra_stats.add("current-stats")
                                if "statcast" in extra_stats:
                                    extra_stats.add("show-stat-pit")
                            elif qualifier_str == "walk-off-opp":
                                qual_type = "Walk Off Opportunity"
                                extra_stats.add("current-stats")
                                extra_stats.add("walk-off")
                            elif qualifier_str == "inside-the-park-hr":
                                qual_type = "Inside The Park HR"
                                extra_stats.add("current-stats")
                                extra_stats.add("show-only-stat-hr")
                            elif qualifier_str == "walk-off":
                                qual_type = "Walk Off"
                                extra_stats.add("current-stats")
                                extra_stats.add("walk-off")
                                extra_stats.add("hide-rate")
                            elif qualifier_str == "game-tying-opp":
                                qual_type = "Game Tying Opportunity"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "game-tying":
                                qual_type = "Game Tying"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "close":
                                qual_type = "Close"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "late":
                                qual_type = "Late"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-opp":
                                qual_type = "Go Ahead Opportunity"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead":
                                qual_type = "Go Ahead"
                                extra_stats.add("current-stats")
                                extra_stats.add("hide-rate")
                            elif qualifier_str == "go-ahead-or-game-tying-opp":
                                qual_type = "Go Ahead Or Game Tying Opportunity"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-game-tying":
                                qual_type = "Go Ahead Or Game Tying"
                                extra_stats.add("current-stats")
                                extra_stats.add("hide-rate")
                            elif qualifier_str == "game-tying-or-go-ahead-opp":
                                qual_type = "Go Ahead Or Game Tying Opportunity"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "game-tying-or-go-ahead":
                                qual_type = "Go Ahead Or Game Tying"
                                extra_stats.add("current-stats")
                                extra_stats.add("hide-rate")
                            elif qualifier_str == "game-winning":
                                qual_type = "Game Winning"
                                extra_stats.add("current-stats")
                                extra_stats.add("hide-rate")
                            elif qualifier_str == "last-inning":
                                qual_type = "Last Inning"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "last-inning-entered":
                                qual_type = "Last Inning Entered"
                            elif qualifier_str == "last-out":
                                qual_type = "Last Out"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "last-batter":
                                qual_type = "Last Batter"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tying-on-deck":
                                qual_type = "Tying On Deck"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tying-on-base":
                                qual_type = "Tying On Base"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tying-at-bat":
                                qual_type = "Tying At Bat"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tying-in-scoring":
                                qual_type = "Tying In Scoring"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tying-on-first":
                                qual_type = "Tying On First"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tying-on-second":
                                qual_type = "Tying On Second"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tying-on-third":
                                qual_type = "Tying On Third"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-on-deck":
                                qual_type = "Go Ahead On Deck"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-at-bat":
                                qual_type = "Go Ahead At Bat"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-in-scoring":
                                qual_type = "Go Ahead In Scoring"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-on-base":
                                qual_type = "Go Ahead On Base"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-on-first":
                                qual_type = "Go Ahead On First"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-on-second":
                                qual_type = "Go Ahead On Second"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-on-third":
                                qual_type = "Go Ahead On Third"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-tying-on-deck":
                                qual_type = "Go Ahead Or Tying On Deck"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-tying-at-bat":
                                qual_type = "Go Ahead Or Tying At Bat"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-tying-in-scoring":
                                qual_type = "Go Ahead Or Tying In Scoring"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-tying-on-base":
                                qual_type = "Go Ahead Or Tying On Base"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-tying-on-first":
                                qual_type = "Go Ahead Or Tying On First"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-tying-on-second":
                                qual_type = "Go Ahead Or Tying On Second"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "go-ahead-or-tying-on-third":
                                qual_type = "Go Ahead Or Tying On Third"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "extra-innings":
                                qual_type = "Extra Innings"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "bottom-inning":
                                qual_type = "Bottom Inning"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "top-inning":
                                qual_type = "Top Inning"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "bottom-inning-entered":
                                qual_type = "Bottom Inning Entered"
                            elif qualifier_str == "top-inning-entered":
                                qual_type = "Top Inning Entered"
                            elif qualifier_str == "full-count":
                                qual_type = "Full Count"
                                extra_stats.add("current-stats")
                                if "statcast" in extra_stats:
                                    extra_stats.add("show-stat-pit")
                            elif qualifier_str == "man-on-first":
                                qual_type = "Man On First"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "man-on-second":
                                qual_type = "Man On Second"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "man-on-third":
                                qual_type = "Man On Third"
                                extra_stats.add("current-stats")
                            elif qualifier_str == "bases-loaded":
                                qual_type = "Bases Loaded"
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("first-half"):
                                qual_type = "First Half"
                            elif qualifier_str.startswith("second-half"):
                                qual_type = "Second Half"
                            elif qualifier_str.startswith("pre-all-star"):
                                qual_type = "Pre All-Star"
                            elif qualifier_str.startswith("post-all-star"):
                                qual_type = "Post All-Star"
                            elif qualifier_str.startswith("current-winning-opponent"):
                                qual_type = "Current Winning Opponent"
                            elif qualifier_str.startswith("current-losing-opponent"):
                                qual_type = "Current Losing Opponent"
                            elif qualifier_str.startswith("current-tied-opponent"):
                                qual_type = "Current Tied Opponent"
                            elif qualifier_str.startswith("current-winning-or-tied-opponent"):
                                qual_type = "Current Winning Or Tied Opponent"
                            elif qualifier_str.startswith("current-losing-or-tied-opponent"):
                                qual_type = "Current Losing Or Tied Opponent"
                            elif qualifier_str.startswith("winning-opponent"):
                                qual_type = "Winning Opponent"
                            elif qualifier_str.startswith("losing-opponent"):
                                qual_type = "Losing Opponent"
                            elif qualifier_str.startswith("tied-opponent"):
                                qual_type = "Tied Opponent"
                            elif qualifier_str.startswith("winning-or-tied-opponent"):
                                qual_type = "Winning Or Tied Opponent"
                            elif qualifier_str.startswith("losing-or-tied-opponent"):
                                qual_type = "Losing Or Tied Opponent"
                            elif qualifier_str.startswith("playoff-opponent"):
                                qual_type = "Playoff Opponent"
                            elif qualifier_str.startswith("ws-winner-opponent"):
                                qual_type = "WS Winner Opponent"
                            elif qualifier_str.startswith("pennant-winner-opponent"):
                                qual_type = "Pennant Winner Opponent"
                            elif qualifier_str.startswith("division-winner-opponent"):
                                qual_type = "Division Winner Opponent"
                            elif qualifier_str.startswith("current-winning-team"):
                                qual_type = "Current Winning Team"
                            elif qualifier_str.startswith("current-losing-team"):
                                qual_type = "Current Losing Team"
                            elif qualifier_str.startswith("current-tied-team"):
                                qual_type = "Current Tied Team"
                            elif qualifier_str.startswith("current-winning-or-tied-team"):
                                qual_type = "Current Winning Or Tied Team"
                            elif qualifier_str.startswith("current-losing-or-tied-team"):
                                qual_type = "Current Losing Or Tied Team"
                            elif qualifier_str.startswith("winning-team"):
                                qual_type = "Winning Team"
                            elif qualifier_str.startswith("losing-team"):
                                qual_type = "Losing Team"
                            elif qualifier_str.startswith("tied-team"):
                                qual_type = "Tied Team"
                            elif qualifier_str.startswith("winning-or-tied-team"):
                                qual_type = "Winning Or Tied Team"
                            elif qualifier_str.startswith("losing-or-tied-team"):
                                qual_type = "Losing Or Tied Team"
                            elif qualifier_str.startswith("playoff-team"):
                                qual_type = "Playoff Team"
                            elif qualifier_str.startswith("ws-winner-team"):
                                qual_type = "WS Winner Team"
                            elif qualifier_str.startswith("pennant-winner-team"):
                                qual_type = "Pennant Winner Team"
                            elif qualifier_str.startswith("division-winner-team"):
                                qual_type = "Division Winner Team"
                            elif qualifier_str == "elimination-or-clinching" or qualifier_str == "clinching-or-elimination":
                                qual_type = "Elimination Or Clinching"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("elimination") or qualifier_str.startswith("eliminating"):
                                qual_type = "Elimination"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("clinching") or qualifier_str.startswith("clinch"):
                                qual_type = "Clinching"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("winner-take-all"):
                                qual_type = "Winner Take All"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("ahead-in-series"):
                                qual_type = "Ahead In Series"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("behind-in-series"):
                                qual_type = "Behind In Series"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str.startswith("even-in-series"):
                                qual_type = "Even In Series"
                                if not playoffs:
                                    playoffs = "Only"
                            elif qualifier_str == "leading" or qualifier_str == "leading-in-game":
                                qual_type = "Score Margin"
                                qualifier_obj["values"] = {
                                    "start_val" : 1,
                                    "end_val" : float("inf")
                                }
                                extra_stats.add("current-stats")
                            elif qualifier_str == "trailing" or qualifier_str == "trailing-in-game":
                                qual_type = "Score Margin"
                                qualifier_obj["values"] = {
                                    "start_val" : -float("inf"),
                                    "end_val" : -1
                                }
                                extra_stats.add("current-stats")
                            elif qualifier_str == "tied" or qualifier_str == "tied-in-game" or qualifier_str == "tied-game" or qualifier_str == "tie" or qualifier_str == "tie-in-game" or qualifier_str == "tie-game":
                                qual_type = "Score Margin"
                                qualifier_obj["values"] = {
                                    "start_val" : 0,
                                    "end_val" : 0
                                }
                                extra_stats.add("current-stats")
                            elif qualifier_str.startswith("save situation") or qualifier_str.startswith("save-situation"):
                                qual_type = "Save Situation"
                                player_type["da_type"] = "Pitcher"
                            elif qualifier_str.startswith("force-dates"):
                                qual_type = "Force Dates"
                            elif qualifier_str == "grass" or qualifier_str == "artificial":
                                qual_type = "Surface"
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "rain":
                                qual_type = "Condition"
                                qualifier_obj["values"] = ["rain", "drizzle"]
                            elif qualifier_str == "cloudy":
                                qual_type = "Condition"
                                qualifier_obj["values"] = ["cloudy", "partly cloudy", "overcast"]
                            elif qualifier_str == "clear":
                                qual_type = "Condition"
                                qualifier_obj["values"] = ["clear", "sunny"]
                            elif qualifier_str == "inside":
                                qual_type = "Condition"
                                qualifier_obj["values"] = ["dome", "roof closed"]
                            elif qualifier_str == "partly-cloudy":
                                qual_type = "Condition"
                                qualifier_obj["values"] = ["partly cloudy"]
                            elif qualifier_str == "overcast":
                                qual_type = "Condition"
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "drizzle":
                                qual_type = "Condition"
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "sunny":
                                qual_type = "Condition"
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "dome":
                                qual_type = "Condition"
                                qualifier_obj["values"] = [qualifier_str]
                            elif qualifier_str == "roof-closed":
                                qual_type = "Condition"
                                qualifier_obj["values"] = ["roof closed"]
                            elif qualifier_str == "eastern-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/New_York", "America/Kentucky/Louisville", "America/Toronto", "America/Detroit", "America/Indiana/Indianapolis"]
                            elif qualifier_str == "central-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Chicago", "America/Winnipeg", "America/Regina", "America/Mexico_City", "America/Monterrey"]
                            elif qualifier_str == "mountain-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Denver", "America/Edmonton", "America/Phoenix", "America/Boise"]
                            elif qualifier_str == "pacific-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Los_Angeles", "America/Vancouver"]
                            elif qualifier_str == "atlantic-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["America/Halifax", "America/Puerto_Rico"]
                            elif qualifier_str == "hawaii-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Pacific/Honolulu"]
                            elif qualifier_str == "japan-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Asia/Tokyo"]
                            elif qualifier_str == "greenwich-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/London"]
                            elif qualifier_str == "australian-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Australia/Sydney"]
                            elif qualifier_str == "central-european-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Stockholm", "Europe/Berlin", "Europe/Prague"]
                            elif qualifier_str == "eastern-european-time-zone":
                                qual_type = "Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Helsinki"]
                            elif qualifier_str == "team-eastern-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/New_York", "America/Kentucky/Louisville", "America/Toronto", "America/Detroit", "America/Indiana/Indianapolis"]
                            elif qualifier_str == "team-central-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Chicago", "America/Winnipeg", "America/Regina", "America/Mexico_City", "America/Monterrey"]
                            elif qualifier_str == "team-mountain-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Denver", "America/Edmonton", "America/Phoenix", "America/Boise"]
                            elif qualifier_str == "team-pacific-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Los_Angeles", "America/Vancouver"]
                            elif qualifier_str == "team-atlantic-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["America/Halifax", "America/Puerto_Rico"]
                            elif qualifier_str == "team-hawaii-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Pacific/Honolulu"]
                            elif qualifier_str == "team-japan-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Asia/Tokyo"]
                            elif qualifier_str == "team-greenwich-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/London"]
                            elif qualifier_str == "team-australian-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Australia/Sydney"]
                            elif qualifier_str == "team-central-european-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Stockholm", "Europe/Berlin", "Europe/Prague"]
                            elif qualifier_str == "team-eastern-european-time-zone":
                                qual_type = "Team Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Helsinki"]
                            elif qualifier_str == "opponent-eastern-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/New_York", "America/Kentucky/Louisville", "America/Toronto", "America/Detroit", "America/Indiana/Indianapolis"]
                            elif qualifier_str == "opponent-central-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Chicago", "America/Winnipeg", "America/Regina", "America/Mexico_City", "America/Monterrey"]
                            elif qualifier_str == "opponent-mountain-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Denver", "America/Edmonton", "America/Phoenix", "America/Boise"]
                            elif qualifier_str == "opponent-pacific-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Los_Angeles", "America/Vancouver"]
                            elif qualifier_str == "opponent-atlantic-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["America/Halifax", "America/Puerto_Rico"]
                            elif qualifier_str == "opponent-hawaii-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Pacific/Honolulu"]
                            elif qualifier_str == "opponent-japan-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Asia/Tokyo"]
                            elif qualifier_str == "opponent-greenwich-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/London"]
                            elif qualifier_str == "opponent-australian-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Australia/Sydney"]
                            elif qualifier_str == "opponent-central-european-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Stockholm", "Europe/Berlin", "Europe/Prague"]
                            elif qualifier_str == "opponent-eastern-european-time-zone":
                                qual_type = "Opponent Exact Time Zone"
                                qualifier_obj["values"] = ["Europe/Helsinki"]
                            elif qualifier_str in ["new-moon", "waning-crescent", "third-quarter", "waning-gibbous", "full-moon", "waxing-gibbous", "first-quarter", "waxing-crescent"]:
                                qual_type = "Moon Phase"
                                qualifier_obj["values"] = [qualifier_str.replace("-", " ")]
                            elif qualifier_str.startswith("bunt"):
                                qual_type = "Bunting"
                                if "statcast" in extra_stats:
                                    extra_stats.add("show-stat-pit")
                                extra_stats.add("show-stat-sh")
                                extra_stats.add("hide-stat-bb")
                                extra_stats.add("hide-stat-bb%")
                                extra_stats.add("hide-stat-bb%+")
                                extra_stats.add("hide-stat-so/bb")
                                extra_stats.add("hide-stat-so/bb+")
                                extra_stats.add("hide-stat-so-bb%")
                                extra_stats.add("hide-stat-so-bb%+")
                                extra_stats.add("hide-stat-bb/so")
                                extra_stats.add("hide-stat-bb/so+")
                                extra_stats.add("hide-stat-bb-so%")
                                extra_stats.add("hide-stat-bb-so%+")
                                extra_stats.add("hide-stat-bb-ibb")
                                extra_stats.add("hide-stat-bb-hpb")
                                extra_stats.add("current-stats")
                            elif qualifier_str == "winter" or qualifier_str == "spring" or qualifier_str == "summer" or qualifier_str == "fall" or qualifier_str == "autumn":
                                qual_type = "Temperate Season"
                                if qualifier_str == "autumn":
                                    qualifier_obj["values"] = ["Fall"]
                                else:
                                    qualifier_obj["values"] = [qualifier_str.title()]
                            elif qualifier == "away" or qualifier == "road" or qualifier == "home" or qualifier == "a" or qualifier == "r" or qualifier == "h" or qualifier == "previous-away" or qualifier == "previous-road" or qualifier == "previous-home" or qualifier == "upcoming-away" or qualifier == "upcoming-road" or qualifier == "upcoming-home" or qualifier == "prv-a" or qualifier == "prv-r" or qualifier == "prv-h" or qualifier == "upc-a" or qualifier == "upc-r" or qualifier == "upc-h" or qualifier_str.startswith("morning") or qualifier_str.startswith("early") or qualifier_str == "day" or qualifier_str == "daytime" or qualifier_str.startswith("afternoon") or qualifier_str.startswith("night") or qualifier_str == "evening" or qualifier_str.startswith("late"):
                                if qualifier == "away":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier == "road":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier == "home":
                                    qual_val = "home"
                                    qual_type = "Location"
                                elif qualifier == "a":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier == "r":
                                    qual_val = "away"
                                    qual_type = "Location"
                                elif qualifier == "h":
                                    qual_val = "home"
                                    qual_type = "Location"
                                elif qualifier == "previous-away":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier == "previous-road":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier == "previous-home":
                                    qual_val = "home"
                                    qual_type = "Previous Location"
                                elif qualifier == "upcoming-away":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier == "upcoming-road":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier == "upcoming-home":
                                    qual_val = "home"
                                    qual_type = "Upcoming Location"
                                elif qualifier == "prv-a":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier == "prv-r":
                                    qual_val = "away"
                                    qual_type = "Previous Location"
                                elif qualifier == "prv-h":
                                    qual_val = "home"
                                    qual_type = "Previous Location"
                                elif qualifier == "upc-a":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier == "upc-r":
                                    qual_val = "away"
                                    qual_type = "Upcoming Location"
                                elif qualifier == "upc-h":
                                    qual_val = "home"
                                    qual_type = "Upcoming Location"
                                elif qualifier == "day":
                                    qual_val = "d"
                                    qual_type = "Time"
                                elif qualifier.startswith("night"):
                                    qual_val = "n"
                                    qual_type = "Time"
                                elif qualifier_str.startswith("morning"):
                                    qual_type = "Local Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(0, 0, 0),
                                        "end_val" : datetime.time(11, 59, 59)
                                    }
                                elif qualifier_str.startswith("early"):
                                    qual_type = "Local Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(12, 0, 0),
                                        "end_val" : datetime.time(15, 59, 59)
                                    }
                                elif qualifier_str.startswith("late"):
                                    qual_type = "Local Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(16, 0, 0),
                                        "end_val" : datetime.time(17, 59, 59)
                                    }
                                elif qualifier_str.startswith("afternoon"):
                                    qual_type = "Local Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(12, 0, 0),
                                        "end_val" : datetime.time(17, 59, 59)
                                    }
                                elif qualifier_str == "daytime":
                                    qual_type = "Local Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(0, 0, 0),
                                        "end_val" : datetime.time(17, 59, 59)
                                    }
                                elif qualifier_str == "evening":
                                    qual_type = "Local Start Time"
                                    qual_val = {
                                        "start_val" : datetime.time(18, 0, 0),
                                        "end_val" : datetime.time(23, 59, 59)
                                    }
                                
                                qualifier_obj["values"] = qual_val if isinstance(qual_val, list) or qual_type == "Local Start Time" else [qual_val]
                            elif (qualifier.startswith("win") and not "wind:" in qualifier) or qualifier.startswith("loss") or qualifier.startswith("tie") or qualifier == "w" or qualifier == "l" or qualifier == "t" or qualifier.startswith("previous-win") or qualifier.startswith("previous-loss") or qualifier.startswith("previous-tie") or qualifier == "prv-w" or qualifier == "prv-l" or qualifier == "prv-t" or qualifier.startswith("upcoming-win") or qualifier.startswith("upcoming-loss") or qualifier.startswith("upcoming-tie") or qualifier == "upc-w" or qualifier == "upc-l" or qualifier == "upc-t" or qualifier.startswith("previous-team-win") or qualifier.startswith("previous-team-loss") or qualifier.startswith("previous-team-tie") or qualifier == "prv-t-w" or qualifier == "prv-t-l" or qualifier == "prv-t-t" or qualifier.startswith("upcoming-team-win") or qualifier.startswith("upcoming-team-loss") or qualifier.startswith("upcoming-team-tie") or qualifier == "upc-t-w" or qualifier == "upc-t-l" or qualifier == "upc-t-t":
                                if qualifier.startswith("win"):
                                    qual_val = "W"
                                    qual_type = "Result"
                                elif qualifier.startswith("loss"):
                                    qual_val = "L"
                                    qual_type = "Result"
                                elif qualifier.startswith("tie"):
                                    qual_val = "T"
                                    qual_type = "Result"
                                elif qualifier == "w":
                                    qual_val = "W"
                                    qual_type = "Result"
                                elif qualifier == "l":
                                    qual_val = "L"
                                    qual_type = "Result"
                                elif qualifier == "t":
                                    qual_val = "T"
                                    qual_type = "Result"
                                elif qualifier.startswith("previous-win"):
                                    qual_val = "W"
                                    qual_type = "Previous Result"
                                elif qualifier.startswith("previous-loss"):
                                    qual_val = "L"
                                    qual_type = "Previous Result"
                                elif qualifier.startswith("previous-tie"):
                                    qual_val = "T"
                                    qual_type = "Previous Result"
                                elif qualifier == "prv-w":
                                    qual_val = "W"
                                    qual_type = "Previous Result"
                                elif qualifier == "prv-l":
                                    qual_val = "L"
                                    qual_type = "Previous Result"
                                elif qualifier == "prv-t":
                                    qual_val = "T"
                                    qual_type = "Previous Result"
                                elif qualifier.startswith("upcoming-win"):
                                    qual_val = "W"
                                    qual_type = "Upcoming Result"
                                elif qualifier.startswith("upcoming-loss"):
                                    qual_val = "L"
                                    qual_type = "Upcoming Result"
                                elif qualifier.startswith("upcoming-tie"):
                                    qual_val = "T"
                                    qual_type = "Upcoming Result"
                                elif qualifier == "upc-w":
                                    qual_val = "W"
                                    qual_type = "Upcoming Result"
                                elif qualifier == "upc-l":
                                    qual_val = "L"
                                    qual_type = "Upcoming Result"
                                elif qualifier == "upc-t":
                                    qual_val = "T"
                                    qual_type = "Upcoming Result"
                                elif qualifier.startswith("previous-team-win"):
                                    qual_val = "W"
                                    qual_type = "Previous Team Result"
                                elif qualifier.startswith("previous-team-loss"):
                                    qual_val = "L"
                                    qual_type = "Previous Team Result"
                                elif qualifier.startswith("previous-team-tie"):
                                    qual_val = "T"
                                    qual_type = "Previous Team Result"
                                elif qualifier == "prv-t-w":
                                    qual_val = "W"
                                    qual_type = "Previous Team Result"
                                elif qualifier == "prv-t-l":
                                    qual_val = "L"
                                    qual_type = "Previous Team Result"
                                elif qualifier == "prv-t-t":
                                    qual_val = "T"
                                    qual_type = "Previous Team Result"
                                elif qualifier.startswith("upcoming-team-win"):
                                    qual_val = "W"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier.startswith("upcoming-team-loss"):
                                    qual_val = "L"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier.startswith("upcoming-team-tie"):
                                    qual_val = "T"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier == "upc-t-w":
                                    qual_val = "W"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier == "upc-t-l":
                                    qual_val = "L"
                                    qual_type = "Upcoming Team Result"
                                elif qualifier == "upc-t-t":
                                    qual_val = "T"
                                    qual_type = "Upcoming Team Result"
                                
                                qualifier_obj["values"] = [qual_val]
                            elif qualifier.startswith("team-score:") or qualifier.startswith("ending-team-score:") or qualifier.startswith("time-facing-opponent:") or qualifier.startswith("men-on-base-number:") or qualifier.startswith("men-in-scoring-number:") or qualifier.startswith("time-through-lineup:") or qualifier.startswith("inning-entered:") or qualifier.startswith("outs-entered:") or qualifier.startswith("outs-remaining-entered:") or qualifier.startswith("men-on-base-entered:") or qualifier.startswith("men-in-scoring-entered:") or qualifier.startswith("run-support:") or qualifier.startswith("opponent-score:") or qualifier.startswith("score-margin:") or qualifier.startswith("score-margin-entered:") or qualifier.startswith("score-difference:") or qualifier.startswith("score-difference-entered:") or qualifier.startswith("ending-opponent-score:") or qualifier.startswith("ending-score-margin:") or qualifier.startswith("ending-score-difference:") or qualifier_str.startswith("final-team-score:") or qualifier_str.startswith("final-opponent-score:") or qualifier_str.startswith("final-score-margin:") or qualifier_str.startswith("final-score-difference:") or qualifier.startswith("previous-team-score:") or qualifier.startswith("previous-opponent-score:") or qualifier.startswith("previous-score-margin:") or qualifier.startswith("previous-score-difference:") or qualifier.startswith("upcoming-team-score:") or qualifier.startswith("upcoming-opponent-score:") or qualifier.startswith("upcoming-score-margin:") or qualifier.startswith("upcoming-score-difference:") or qualifier.startswith("series-team-wins:") or qualifier.startswith("series-opponent-wins:") or qualifier.startswith("series-score-margin:") or qualifier.startswith("series-score-difference:") or qualifier.startswith("batting-order") or qualifier.startswith("calendar-year") or qualifier.startswith("year") or qualifier_str.startswith("temperature:") or qualifier_str.startswith("wind:") or qualifier.startswith("inning:") or qualifier.startswith("inning-reversed:") or qualifier.startswith("scheduled-inning-reversed:") or qualifier.startswith("ending-outs:") or qualifier.startswith("outs:") or qualifier.startswith("outs-remaining:") or qualifier.startswith("after-swinging-on-strikes:") or qualifier.startswith("after-swinging-on-balls:") or qualifier.startswith("swinging-on-strikes:") or qualifier.startswith("swinging-on-balls:") or qualifier.startswith("after-strikes:") or qualifier.startswith("after-balls:") or qualifier.startswith("strikes:") or qualifier.startswith("balls:") or qualifier.startswith("runs:") or qualifier.startswith("play-outs:") or qualifier.startswith("rbis:") or qualifier.startswith("number-drove-in:") or qualifier.startswith("pitch-speed:") or qualifier.startswith("pitch-zone:") or qualifier.startswith("pitch-spin:") or qualifier.startswith("launch-angle:") or qualifier.startswith("exit-velocity:") or qualifier.startswith("hit-distance:") or qualifier.startswith("pitching-against-batting-order:") or qualifier.startswith("men-on-base:") or qualifier.startswith("pitcher-batters-faced:") or qualifier.startswith("batter-plate-appearance:") or qualifier.startswith("pitcher-batters-faced-reversed:") or qualifier.startswith("batter-plate-appearance-reversed:") or qualifier.startswith("pitch-count:") or qualifier.startswith("game-pitch-count:") or qualifier.startswith("team-pitch-count:") or qualifier.startswith("starting-pitch-count:") or qualifier.startswith("innings-pitched:") or qualifier.startswith("ending-innings-pitched:") or qualifier.startswith("at-bat-pitch-count:") or qualifier_str.startswith("team-games-over-500:") or qualifier_str.startswith("opponent-games-over-500:") or qualifier_str.startswith("current-team-games-over-500:") or qualifier_str.startswith("current-opponent-games-over-500:"):
                                if qualifier.startswith("team-score:"):
                                    qual_str = "team-score:"
                                    qual_type = "Team Score"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("ending-team-score:"):
                                    qual_str = "ending-team-score:"
                                    qual_type = "Ending Team Score"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("run-support:"):
                                    qual_str = "run-support:"
                                    qual_type = "Run Support"
                                    player_type["da_type"] = "Pitcher"
                                elif qualifier.startswith("opponent-score:"):
                                    qual_str = "opponent-score:"
                                    qual_type = "Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("ending-opponent-score:"):
                                    qual_str = "ending-opponent-score:"
                                    qual_type = "Ending Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("outs:"):
                                    qual_str = "outs:"
                                    qual_type = "Outs"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("outs-remaining:"):
                                    qual_str = "outs-remaining:"
                                    qual_type = "Outs Remaining"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("ending-outs:"):
                                    qual_str = "ending-outs:"
                                    qual_type = "Ending Outs"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("outs-entered:"):
                                    qual_str = "outs-entered:"
                                    qual_type = "Outs Entered"
                                elif qualifier.startswith("outs-remaining-entered:"):
                                    qual_str = "outs-remaining-entered:"
                                    qual_type = "Outs Remaining Entered"
                                elif qualifier.startswith("inning-entered:"):
                                    qual_str = "inning-entered:"
                                    qual_type = "Inning Entered"
                                elif qualifier.startswith("men-on-base-entered:"):
                                    qual_str = "men-on-base-entered:"
                                    qual_type = "Men On Base Entered"
                                elif qualifier.startswith("men-in-scoring-entered:"):
                                    qual_str = "men-in-scoring-entered:"
                                    qual_type = "Men In Scoring Entered"
                                elif qualifier.startswith("strikes:"):
                                    qual_str = "strikes:"
                                    qual_type = "Strikes"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("balls:"):
                                    qual_str = "balls:"
                                    qual_type = "Balls"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("after-strikes:"):
                                    qual_str = "after-strikes:"
                                    qual_type = "After Strikes"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("after-balls:"):
                                    qual_str = "after-balls:"
                                    qual_type = "After Balls"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("swinging-on-strikes:"):
                                    qual_str = "swinging-on-strikes:"
                                    qual_type = "Swinging On Strikes"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("swinging-on-balls:"):
                                    qual_str = "swinging-on-balls:"
                                    qual_type = "Swinging On Balls"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("after-swinging-on-strikes:"):
                                    qual_str = "after-swinging-on-strikes:"
                                    qual_type = "After Swinging On Strikes"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("after-swinging-on-balls:"):
                                    qual_str = "after-swinging-on-balls:"
                                    qual_type = "After Swinging On Balls"
                                    extra_stats.add("current-stats")
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                elif qualifier.startswith("runs:"):
                                    qual_str = "runs:"
                                    qual_type = "Runs"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("play-outs:"):
                                    qual_str = "play-outs:"
                                    qual_type = "Play Outs"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("rbis:"):
                                    qual_str = "rbis:"
                                    qual_type = "RBIs"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier.startswith("number-drove-in:"):
                                    qual_str = "number-drove-in:"
                                    qual_type = "Number Drove In"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("show-stat-drivenin")
                                    extra_stats.add("show-stat-gwdrivenin")
                                    extra_stats.add("no-steals")
                                elif qualifier.startswith("pitch-speed:"):
                                    qual_str = "pitch-speed:"
                                    qual_type = "Pitch Speed"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("show-stat-pit")
                                    extra_stats.add("show-stat-pit%")
                                elif qualifier.startswith("pitch-zone:"):
                                    qual_str = "pitch-zone:"
                                    qual_type = "Pitch Zone"
                                    extra_stats.add("show-stat-pit")
                                    extra_stats.add("show-stat-pit%")
                                elif qualifier.startswith("pitch-spin:"):
                                    qual_str = "pitch-spin:"
                                    qual_type = "Pitch Spin"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("show-stat-pit")
                                    extra_stats.add("show-stat-pit%")
                                elif qualifier.startswith("hit-distance:"):
                                    qual_str = "hit-distance:"
                                    qual_type = "Hit Distance"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier.startswith("exit-velocity:"):
                                    qual_str = "exit-velocity:"
                                    qual_type = "Exit Velocity"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier.startswith("launch-angle:"):
                                    qual_str = "launch-angle:"
                                    qual_type = "Launch Angle"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier.startswith("inning:"):
                                    qual_str = "inning:"
                                    qual_type = "Inning"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("inning-reversed:"):
                                    qual_str = "inning-reversed:"
                                    qual_type = "Inning Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("scheduled-inning-reversed:"):
                                    qual_str = "scheduled-inning-reversed:"
                                    qual_type = "Scheduled Inning Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("pitching-against-batting-order:"):
                                    qual_str = "pitching-against-batting-order:"
                                    qual_type = "Pitching Against Batting Order"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("score-margin:"):
                                    qual_str = "score-margin:"
                                    qual_type = "Score Margin"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("score-margin-entered:"):
                                    qual_str = "score-margin-entered:"
                                    qual_type = "Score Margin Entered"
                                elif qualifier.startswith("ending-score-margin:"):
                                    qual_str = "ending-score-margin:"
                                    qual_type = "Ending Score Margin"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("score-difference:"):
                                    qual_str = "score-difference:"
                                    qual_type = "Score Difference"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("score-difference-entered:"):
                                    qual_str = "score-difference-entered:"
                                    qual_type = "Score Difference Entered"
                                elif qualifier.startswith("ending-score-difference:"):
                                    qual_str = "ending-score-difference:"
                                    qual_type = "Ending Score Difference"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("final-team-score:"):
                                    qual_str = "final-team-score:"
                                    qual_type = "Final Team Score"
                                elif qualifier_str.startswith("pitch-count:"):
                                    qual_str = "pitch-count:"
                                    qual_type = "Pitch Count"
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("pitcher-batters-faced:"):
                                    qual_str = "pitcher-batters-faced:"
                                    qual_type = "Pitcher Batters Faced"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batter-plate-appearance:"):
                                    qual_str = "batter-plate-appearance:"
                                    qual_type = "Batter Plate Appearance"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("pitcher-batters-faced-reversed:"):
                                    qual_str = "pitcher-batters-faced-reversed:"
                                    qual_type = "Pitcher Batters Faced Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batter-plate-appearance-reversed:"):
                                    qual_str = "batter-plate-appearance-reversed:"
                                    qual_type = "Batter Plate Appearance Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-pitch-count:"):
                                    qual_str = "starting-pitch-count:"
                                    qual_type = "Starting Pitch Count"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("at-bat-pitch-count:"):
                                    qual_str = "at-bat-pitch-count:"
                                    qual_type = "At Bat Pitch Count"
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("at-bat-pitch-count:"):
                                    qual_str = "at-bat-pitch-count:"
                                    qual_type = "At Bat Pitch Count"
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("team-pitch-count:"):
                                    qual_str = "team-pitch-count:"
                                    qual_type = "Team Pitch Count"
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("game-pitch-count:"):
                                    qual_str = "game-pitch-count:"
                                    qual_type = "Game Pitch Count"
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("ending-innings-pitched:"):
                                    qual_str = "ending-innings-pitched:"
                                    qual_type = "Ending Innings Pitched"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("innings-pitched:"):
                                    qual_str = "innings-pitched:"
                                    qual_type = "Innings Pitched"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("men-on-base:"):
                                    qual_str = "men-on-base:"
                                    qual_type = "Men On Base"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("time-facing-opponent:"):
                                    qual_str = "time-facing-opponent:"
                                    qual_type = "Time Facing Opponent"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("men-on-base-number:"):
                                    qual_str = "men-on-base-number:"
                                    qual_type = "Number Of Men On Base"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("men-in-scoring-number:"):
                                    qual_str = "men-in-scoring-number:"
                                    qual_type = "Number Of Men In Scoring"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("time-through-lineup:"):
                                    qual_str = "time-through-lineup:"
                                    qual_type = "Time Through Lineup"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("final-opponent-score:"):
                                    qual_str = "final-opponent-score:"
                                    qual_type = "Final Opponent Score"
                                elif qualifier_str.startswith("final-score-margin:"):
                                    qual_str = "final-score-margin:"
                                    qual_type = "Final Score Margin"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("final-score-difference:"):
                                    qual_str = "final-score-difference:"
                                    qual_type = "Final Score Difference"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("batting-order:"):
                                    qual_str = "batting-order:"
                                    qual_type = "Batting Order Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier.startswith("batting-order-pos:"):
                                    qual_str = "batting-order-pos:"
                                    qual_type = "Batting Order Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier.startswith("batting-order-position:"):
                                    qual_str = "batting-order-position:"
                                    qual_type = "Batting Order Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier.startswith("batting-order-spot:"):
                                    qual_str = "batting-order-spot:"
                                    qual_type = "Batting Order Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier.startswith("previous-team-score:"):
                                    qual_str = "previous-team-score:"
                                    qual_type = "Previous Team Score"
                                elif qualifier.startswith("previous-opponent-score:"):
                                    qual_str = "previous-opponent-score:"
                                    qual_type = "Previous Opponent Score"
                                elif qualifier.startswith("previous-score-margin:"):
                                    qual_str = "previous-score-margin:"
                                    qual_type = "Previous Score Margin"
                                elif qualifier.startswith("previous-score-difference:"):
                                    qual_str = "previous-score-difference:"
                                    qual_type = "Previous Score Difference"
                                elif qualifier.startswith("upcoming-team-score:"):
                                    qual_str = "upcoming-team-score:"
                                    qual_type = "Upcoming Team Score"
                                elif qualifier.startswith("upcoming-opponent-score:"):
                                    qual_str = "upcoming-opponent-score:"
                                    qual_type = "Upcoming Opponent Score"
                                elif qualifier.startswith("upcoming-score-margin:"):
                                    qual_str = "upcoming-score-margin:"
                                    qual_type = "Upcoming Score Margin"
                                elif qualifier.startswith("upcoming-score-difference:"):
                                    qual_str = "upcoming-score-difference:"
                                    qual_type = "Upcoming Score Difference"
                                elif qualifier_str.startswith("temperature:"):
                                    qual_str = "temperature:"
                                    qual_type = "Temperature"
                                elif qualifier_str.startswith("wind:"):
                                    qual_str = "wind:"
                                    qual_type = "Wind"
                                elif qualifier.startswith("years:"):
                                    qual_str = "years:"
                                    qual_type = "Year"
                                elif qualifier.startswith("year:"):
                                    qual_str = "year:"
                                    qual_type = "Year"
                                elif qualifier_str.startswith("calendar-years:"):
                                    qual_str = "calendar-years:"
                                    qual_type = "Calendar Year"
                                elif qualifier_str.startswith("calendar-year:"):
                                    qual_str = "calendar-year:"
                                    qual_type = "Calendar Year"
                                elif qualifier.startswith("series-team-wins:"):
                                    qual_str = "series-team-wins:"
                                    qual_type = "Series Team Wins"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier.startswith("series-opponent-wins:"):
                                    qual_str = "series-opponent-wins:"
                                    qual_type = "Series Opponent Wins"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier.startswith("series-score-margin:"):
                                    qual_str = "series-score-margin:"
                                    qual_type = "Series Score Margin"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier.startswith("series-score-difference:"):
                                    qual_str = "series-score-difference:"
                                    qual_type = "Series Score Difference"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("team-games-over-500:"):
                                    qual_str = "team-games-over-500:"
                                    qual_type = "Team Games Over 500"
                                elif qualifier_str.startswith("opponent-games-over-500:"):
                                    qual_str = "opponent-games-over-500:"
                                    qual_type = "Opponent Games Over 500"
                                elif qualifier_str.startswith("current-team-games-over-500:"):
                                    qual_str = "current-team-games-over-500:"
                                    qual_type = "Current Team Games Over 500"
                                elif qualifier_str.startswith("current-opponent-games-over-500:"):
                                    qual_str = "current-opponent-games-over-500:"
                                    qual_type = "Current Opponent Games Over 500"

                                split_vals = re.split(r"(?<!\\)(?<!^)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)
                                
                                if len(split_vals) == 1:
                                    if ("Pitch Count" in qual_type and qual_type != "At Bat Pitch Count") or "Innings Pitched" in qual_type or "Pitch Speed" in qual_type or "Pitch Spin" in qual_type or "Exit Velocity" in qual_type or "Hit Distance" in qual_type or "Launch Angle" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : float("inf")
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1])
                                    }

                                if "Innings Pitched" in qual_type:
                                    if qualifier_obj["values"]["start_val"] == -float("inf"):
                                        qualifier_obj["values"]["start_val"] = 0
                                    else:
                                        frac, whole = math.modf(qualifier_obj["values"]["start_val"])
                                        frac = round_value(frac * (10/3), 1)
                                        qualifier_obj["values"]["start_val"] = round_value(frac + whole, 2)
                                    if qualifier_obj["values"]["end_val"] == -float("inf"):
                                        qualifier_obj["values"]["end_val"] = 0
                                    else:
                                        frac, whole = math.modf(qualifier_obj["values"]["end_val"])
                                        frac = round_value(frac * (10/3), 1)
                                        qualifier_obj["values"]["end_val"] = round_value(frac + whole, 2)
                            elif qualifier.startswith("games-in-days:") or qualifier.startswith("starts-in-days:"):
                                if qualifier.startswith("games-in-days:"):
                                    qual_str = "games-in-days:"
                                    qual_type = "Games In Days"
                                    qual_1 = "games"
                                    qual_2 = "days"
                                elif qualifier.startswith("starts-in-days:"):
                                    qual_str = "starts-in-days:"
                                    qual_type = "Starts In Days"
                                    qual_1 = "starts"
                                    qual_2 = "days"
                                
                                qual_obj = {}
                                split_vals = re.split(r"(?<!\\)(?<!^)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)

                                games = split_vals[0]
                                days = split_vals[1]

                                games_split =  re.split(r"(?<!\\)(?<!^)\~", games)
                                if len(games_split) == 1:
                                    qual_obj[qual_1] = {
                                        "start_val" : ordinal_to_number(games_split[0]),
                                        "end_val" : float("inf")
                                    }
                                else:
                                    qual_obj[qual_1] = {
                                        "start_val" : ordinal_to_number(games_split[0]),
                                        "end_val" : ordinal_to_number(games_split[1])
                                    }

                                qual_obj[qual_2] = ordinal_to_number(days)
                                qualifier_obj["values"] = qual_obj
                            elif qualifier.startswith("count:") or qualifier.startswith("after-count:") or qualifier.startswith("after-swinging-on-count:") or qualifier.startswith("swinging-on-count:"):
                                if qualifier.startswith("count:"):
                                    qual_str = "count:"
                                    qual_type = "Count"
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("after-count:"):
                                    qual_str = "after-count:"
                                    qual_type = "After Count"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("after-swinging-on-count:"):
                                    qual_str = "after-swinging-on-count:"
                                    qual_type = "After Swinging On Count"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("swinging-on-count:"):
                                    qual_str = "swinging-on-count:"
                                    qual_type = "Swinging On Count"
                                    if "statcast" in extra_stats:
                                        extra_stats.add("show-stat-pit")
                                    extra_stats.add("current-stats")
                                
                                qual_obj = {}
                                split_vals = re.split(r"(?<!\\)(?<!^)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)

                                balls = split_vals[0]
                                strikes = split_vals[1]
                                if balls == "all":
                                    balls = "0~3"
                                if strikes == "all":
                                    strikes = "0~2"

                                balls_split =  re.split(r"(?<!\\)(?<!^)\~", balls)
                                if len(balls_split) == 1:
                                    qual_obj["balls"] = {
                                        "start_val" : ordinal_to_number(balls_split[0]),
                                        "end_val" : ordinal_to_number(balls_split[0])
                                    }
                                else:
                                    qual_obj["balls"] = {
                                        "start_val" : ordinal_to_number(balls_split[0]),
                                        "end_val" : ordinal_to_number(balls_split[1])
                                    }
                                strikes_split =  re.split(r"(?<!\\)(?<!^)\~", strikes)
                                if len(strikes_split) == 1:
                                    qual_obj["strikes"] = {
                                        "start_val" : ordinal_to_number(strikes_split[0]),
                                        "end_val" : ordinal_to_number(strikes_split[0])
                                    }
                                else:
                                    qual_obj["strikes"] = {
                                        "start_val" : ordinal_to_number(strikes_split[0]),
                                        "end_val" : ordinal_to_number(strikes_split[1])
                                    }
                                qualifier_obj["values"] = qual_obj
                            elif qualifier.startswith("score:") or qualifier.startswith("ending-score:") or qualifier.startswith("final-score:") or qualifier.startswith("previous-score:") or qualifier.startswith("upcoming-score:") or qualifier.startswith("series-score:"):
                                if qualifier.startswith("score:"):
                                    qual_str = "score:"
                                    team_sub_qual = "Team Score"
                                    opp_sub_qual = "Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("ending-score:"):
                                    qual_str = "ending-score:"
                                    team_sub_qual = "Ending Team Score"
                                    opp_sub_qual = "Ending Opponent Score"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("final-score:"):
                                    qual_str = "final-score:"
                                    team_sub_qual = "Final Team Score"
                                    opp_sub_qual = "Final Opponent Score"
                                elif qualifier.startswith("previous-score:"):
                                    qual_str = "previous-score:"
                                    team_sub_qual = "Previous Team Score"
                                    opp_sub_qual = "Previous Opponent Score"
                                elif qualifier_str.startswith("upcoming-score:"):
                                    qual_str = "upcoming-score:"
                                    team_sub_qual = "Upcoming Team Score"
                                    opp_sub_qual = "Upcoming Opponent Score"
                                elif qualifier_str.startswith("series-score:"):
                                    qual_str = "series-score:"
                                    team_sub_qual = "Series Team Wins"
                                    opp_sub_qual = "Series Opponent Wins"
                                    if not playoffs:
                                        playoffs = "Only"

                                split_vals = re.split(r"(?<!\\)(?<!^)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)

                                team_score = split_vals[0]
                                opp_score = split_vals[1]
                                if team_score == "all":
                                    team_score = "0~max"
                                if opp_score == "all":
                                    opp_score = "0~max"

                                qual_obj = {}
                                team_score_split =  re.split(r"(?<!\\)(?<!^)\~", team_score)
                                if len(team_score_split) == 1:
                                    qual_obj = {
                                        "values" : {
                                            "start_val" : ordinal_to_number(team_score_split[0]),
                                            "end_val" : ordinal_to_number(team_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }
                                else:
                                    qual_obj = {
                                        "values" : {
                                            "start_val" : ordinal_to_number(team_score_split[0]),
                                            "end_val" : ordinal_to_number(team_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }

                                qualifiers[team_sub_qual] = [qual_obj]

                                qual_obj = {}
                                opp_score_split =  re.split(r"(?<!\\)(?<!^)\~", opp_score)
                                if len(opp_score_split) == 1:
                                    qual_obj = {
                                       "values" : {
                                            "start_val" : ordinal_to_number(opp_score_split[0]),
                                            "end_val" : ordinal_to_number(opp_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }
                                else:
                                    qual_obj = {
                                        "values" : {
                                            "start_val" : ordinal_to_number(opp_score_split[0]),
                                            "end_val" : ordinal_to_number(opp_score_split[0]),
                                        },
                                        "negate" : qualifier_obj["negate"]
                                    }

                                qualifiers[opp_sub_qual] = [qual_obj]
                            elif qualifier.startswith("hit-coordinates:") or qualifier.startswith("pitch-coordinates:") or qualifier.startswith("absolte-pitch-coordinates:"):
                                if qualifier.startswith("hit-coordinates:"):
                                    qual_str = "hit-coordinates:"
                                    qual_type = "Hit Coordinates"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier.startswith("pitch-coordinates:"):
                                    qual_str = "pitch-coordinates:"
                                    qual_type = "Pitch Coordinates"
                                    extra_stats.add("current-stats")
                                elif qualifier.startswith("absolute-pitch-coordinates:"):
                                    qual_str = "absolute-pitch-coordinates:"
                                    qual_type = "Absolute Pitch Coordinates"
                                    extra_stats.add("current-stats")
                                
                                qual_obj = {}
                                split_vals = re.split(r"(?<!\\)(?<!^)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)

                                x_coord = split_vals[0]
                                y_coord = split_vals[1]
                                if x_coord == "all":
                                    x_coord = "-100-100"
                                if y_coord == "all":
                                    y_coord = "-42.5-42.5"

                                x_coord_split =  re.split(r"(?<!\\)(?<!^)\-", x_coord)
                                if len(x_coord_split) == 1:
                                    qual_obj["x_coord"] = {
                                        "start_val" : ordinal_to_number(x_coord_split[0]),
                                        "end_val" : ordinal_to_number(x_coord_split[0])
                                    }
                                else:
                                    qual_obj["x_coord"] = {
                                        "start_val" : ordinal_to_number(x_coord_split[0]),
                                        "end_val" : ordinal_to_number(x_coord_split[1])
                                    }
                                y_coord_split =  re.split(r"(?<!\\)(?<!^)\-", y_coord)
                                if len(y_coord_split) == 1:
                                    qual_obj["y_coord"] = {
                                        "start_val" : ordinal_to_number(y_coord_split[0]),
                                        "end_val" : ordinal_to_number(y_coord_split[0])
                                    }
                                else:
                                    qual_obj["y_coord"] = {
                                        "start_val" : ordinal_to_number(y_coord_split[0]),
                                        "end_val" : ordinal_to_number(y_coord_split[1])
                                    }
                                qualifier_obj["values"] = qual_obj
                            elif qualifier_str.startswith("hit-within-distance:") or qualifier_str.startswith("pitch-within-distance:") or qualifier_str.startswith("absolute-pitch-within-distance:"):
                                if qualifier_str.startswith("hit-within-distance:"):
                                    qual_str = "within-distance:"
                                    qual_type = "Within Distance"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier_str.startswith("pitch-within-distance:"):
                                    qual_str = "pitch-within-distance:"
                                    qual_type = "Pitch Within Distance"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("absolute-pitch-within-distance:"):
                                    qual_str = "absolute-pitch-within-distance:"
                                    qual_type = "Absolute Pitch Within Distance"
                                    extra_stats.add("current-stats")
                                
                                qual_obj = {}
                                split_vals = re.split(r"(?<!\\)(?<!^)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 2)

                                x_coord = split_vals[0]
                                y_coord = split_vals[1]
                                radius = split_vals[2]

                                qual_obj["x_coord"] = ordinal_to_number(x_coord)
                                qual_obj["y_coord"] = ordinal_to_number(y_coord)
                                qual_obj["radius"] = ordinal_to_number(radius)

                                qualifier_obj["values"] = qual_obj
                            elif qualifier.startswith("hit-x-coordinate:") or qualifier.startswith("hit-y-coordinate:") or qualifier.startswith("pitch-x-coordinate:") or qualifier.startswith("pitch-y-coordinate:") or qualifier.startswith("absolute-pitch-x-coordinate:") or qualifier.startswith("absolute-pitch-y-coordinate:"):
                                if qualifier_str.startswith("hit-x-coordinate:"):
                                    qual_str = "hit-x-coordinate:"
                                    qual_type = "Hit X Coordinate"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier_str.startswith("hit-y-coordinate:"):
                                    qual_str = "hit-y-coordinate:"
                                    qual_type = "Hit Y Coordinate"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                elif qualifier_str.startswith("pitch-x-coordinate:"):
                                    qual_str = "pitch-x-coordinate:"
                                    qual_type = "Pitch X Coordinate"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("pitch-y-coordinate:"):
                                    qual_str = "pitch-y-coordinate:"
                                    qual_type = "Pitch Y Coordinate"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("absolute-pitch-x-coordinate:"):
                                    qual_str = "absolute-pitch-x-coordinate:"
                                    qual_type = "Absolute Pitch X Coordinate"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("absolute-pitch-y-coordinate:"):
                                    qual_str = "absolute-pitch-y-coordinate:"
                                    qual_type = "Absolute Pitch Y Coordinate"
                                    extra_stats.add("current-stats")
                                
                                coords_split = re.split(r"(?<!\\)(?<!^)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str, 1)[1], 1)
                                if len(coords_split) == 1:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(coords_split[0]),
                                        "end_val" : ordinal_to_number(coords_split[0])
                                    }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(coords_split[0]),
                                        "end_val" : ordinal_to_number(coords_split[1])
                                    }
                            elif qualifier.startswith("dh") or qualifier.startswith("double-header"):
                                qual_type = "Double Header"
                                qualifier_obj["values"] = []
                                if ":" in qualifier:
                                    if qualifier.startswith("dh:"):
                                        qual_str = "dh:"
                                    elif qualifier.startswith("double-header:"):
                                        qual_str = "double-header:"

                                    qual_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                    for qual_val in qual_vals:
                                        if qual_val == "f":
                                            qual_val = "First"
                                        elif qual_val == "s":
                                            qual_val = "Second"
                                        elif qual_val == "b":
                                            qual_val = "Both"
                                        elif qual_val == "e":
                                            qual_val = "Either"
                                        else:
                                            qual_val = qual_val.capitalize()

                                        qualifier_obj["values"].append(qual_val)
                                else:
                                    qualifier_obj["values"].append("Either")
                            elif "start" in qualifier and not qualifier_str.startswith("starts-rest:") and not qualifier_str.startswith("starts-in-a-row:") and not qualifier_str.startswith("starts-days-rest:") and not qualifier_str.startswith("upcoming-starts-days-rest:") and not qualifier_str.startswith("start-time:") and not qualifier_str.startswith("local-start-time:") and not qualifier_str.startswith("starting-event") and not qualifier_str.startswith("starting-game-event") and not qualifier_str.startswith("team-start-time:") and not qualifier_str.startswith("opponent-start-time:") and not qualifier_str.startswith("starting-game-position:"):
                                if "ignore" in qualifier:
                                    qual_type = "Ignore Start"
                                else:
                                    qual_type = "Start"
                            elif qualifier_str == "finished":
                                qual_type = "Finished"
                            elif "birth" in qualifier:
                                qual_type = "Birthday"
                                if not playoffs:
                                    playoffs = "Include"
                            elif qualifier == "pitching":
                                player_type["da_type"] = "Pitcher"
                            elif qualifier == "batting" or qualifier == "hitting":
                                player_type["da_type"] = "Batter"
                            elif qualifier.startswith("t:") or qualifier.startswith("o:") or qualifier.startswith("team-stadium:") or qualifier.startswith("team-arena:") or qualifier.startswith("franchise-stadium:") or qualifier.startswith("franchise-arena:") or qualifier.startswith("team:") or qualifier.startswith("opponent:") or qualifier_str.startswith("franchise:") or qualifier_str.startswith("tf:") or qualifier_str.startswith("of:") or qualifier_str.startswith("f:") or qualifier_str.startswith("team-franchise:") or qualifier_str.startswith("opponent-franchise:") or qualifier_str.startswith("state:") or qualifier_str.startswith("exact-state:") or qualifier_str.startswith("province:") or qualifier_str.startswith("exact-province:") or qualifier_str.startswith("team-province:") or qualifier_str.startswith("team-exact-province:") or qualifier_str.startswith("opponent-province:") or qualifier_str.startswith("opponent-exact-province:") or qualifier_str.startswith("time-zone:") or qualifier_str.startswith("exact-time-zone:") or qualifier_str.startswith("team-state:") or qualifier_str.startswith("team-exact-state:") or qualifier_str.startswith("team-time-zone:") or qualifier_str.startswith("team-exact-time-zone:") or qualifier_str.startswith("opponent-state:") or qualifier_str.startswith("opponent-exact-state:") or qualifier_str.startswith("opponent-time-zone:") or qualifier_str.startswith("opponent-exact-time-zone:") or qualifier_str.startswith("country:") or qualifier_str.startswith("exact-country:") or qualifier_str.startswith("team-country:") or qualifier_str.startswith("team-exact-country:") or qualifier_str.startswith("opponent-country:") or qualifier_str.startswith("opponent-exact-country:") or qualifier_str.startswith("previous-franchise:") or qualifier_str.startswith("previous-team-franchise:") or qualifier_str.startswith("previous-opponent-franchise:") or qualifier_str.startswith("upcoming-franchise:") or qualifier_str.startswith("upcoming-team-franchise:") or qualifier_str.startswith("upcoming-opponent-franchise:") or qualifier.startswith("prv-t:") or qualifier.startswith("prv-o:") or qualifier.startswith("previous-team:") or qualifier.startswith("previous-opponent:") or qualifier.startswith("upc-t:") or qualifier.startswith("upc-o:") or qualifier.startswith("upcoming-team:") or qualifier.startswith("upcoming-opponent:") or qualifier.startswith("lg:") or qualifier.startswith("team-league:") or qualifier.startswith("opp-lg:") or qualifier.startswith("opponent-league:") or qualifier.startswith("previous-team-league:") or qualifier.startswith("previous-opponent-league:") or qualifier.startswith("upcoming-team-league:") or qualifier.startswith("upcoming-team-league:") or qualifier.startswith("team-division:")  or qualifier.startswith("opponent-division:") or qualifier.startswith("primary-season-position:") or qualifier.startswith("season-position:") or qualifier.startswith("ph-for-position:") or qualifier.startswith("position:") or qualifier.startswith("hit-location:") or qualifier.startswith("exact-hit-location:") or qualifier.startswith("starting-game-position:") or qualifier.startswith("primary-game-position:") or qualifier.startswith("game-position:") or qualifier.startswith("facing-ph-for-position:") or qualifier.startswith("facing-position:") or qualifier.startswith("facing-primary-position:") or qualifier.startswith("facing-main-position:") or qualifier_str.startswith("radio-network:") or qualifier_str.startswith("tv-network:") or qualifier_str.startswith("exact-radio-network:") or qualifier_str.startswith("exact-tv-network:") or qualifier_str.startswith("event-type:") or qualifier_str.startswith("exact-event-type:") or qualifier_str.startswith("previous-event-type:") or qualifier_str.startswith("previous-exact-event-type:") or qualifier_str.startswith("upcoming-event-type:") or qualifier_str.startswith("upcoming-exact-event-type:") or qualifier_str.startswith("previous-player-event-type:") or qualifier_str.startswith("previous-exact-player-event-type:") or qualifier_str.startswith("upcoming-player-event-type:") or qualifier_str.startswith("upcoming-exact-player-event-type:") or qualifier_str.startswith("event:") or qualifier_str.startswith("exact-event:") or qualifier_str.startswith("previous-event:") or qualifier_str.startswith("previous-exact-event:") or qualifier_str.startswith("upcoming-event:") or qualifier_str.startswith("upcoming-exact-event:") or qualifier_str.startswith("previous-player-event:") or qualifier_str.startswith("previous-exact-player-event:") or qualifier_str.startswith("upcoming-player-event:") or qualifier_str.startswith("upcoming-exact-player-event:") or qualifier_str.startswith("national-tv-network:") or qualifier_str.startswith("national-exact-tv-network:") or qualifier_str.startswith("any-national-tv-network:") or qualifier_str.startswith("any-national-exact-tv-network:"):
                                split_str = "-"
                                if qualifier_str.startswith("t:"):
                                    qual_str = "t:"
                                    qual_type = "Team"
                                elif qualifier_str.startswith("team:"):
                                    qual_str = "team:"
                                    qual_type = "Team"
                                elif qualifier_str.startswith("team-stadium:"):
                                    qual_str = "team-stadium:"
                                    qual_type = "Team Stadium"
                                elif qualifier_str.startswith("team-arena:"):
                                    qual_str = "team-arena:"
                                    qual_type = "Team Stadium"
                                elif qualifier_str.startswith("franchise-stadium:"):
                                    qual_str = "franchise-stadium:"
                                    qual_type = "Franchise Stadium"
                                elif qualifier_str.startswith("franchise-arena:"):
                                    qual_str = "franchise-arena:"
                                    qual_type = "Franchise Stadium"
                                elif qualifier_str.startswith("o:"):
                                    qual_str = "o:"
                                    qual_type = "Opponent"
                                elif qualifier_str.startswith("opponent:"):
                                    qual_str = "opponent:"
                                    qual_type = "Opponent"
                                elif qualifier_str.startswith("tf:"):
                                    qual_str = "tf:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("of:"):
                                    qual_str = "of:"
                                    qual_type = "Opponent Franchise"
                                elif qualifier_str.startswith("f:"):
                                    qual_str = "f:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("franchise:"):
                                    qual_str = "franchise:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("team-franchise:"):
                                    qual_str = "team-franchise:"
                                    qual_type = "Team Franchise"
                                elif qualifier_str.startswith("opponent-franchise:"):
                                    qual_str = "opponent-franchise:"
                                    qual_type = "Opponent Franchise"
                                elif qualifier_str.startswith("upcoming-franchise:"):
                                    qual_str = "upcoming-franchise:"
                                    qual_type = "Upcoming Team Franchise"
                                elif qualifier_str.startswith("upcoming-team-franchise:"):
                                    qual_str = "upcoming-team-franchise:"
                                    qual_type = "Upcoming Team Franchise"
                                elif qualifier_str.startswith("upcoming-opponent-franchise:"):
                                    qual_str = "upcoming-opponent-franchise:"
                                    qual_type = "Upcoming Opponent Franchise"
                                elif qualifier_str.startswith("previous-franchise:"):
                                    qual_str = "previous-franchise:"
                                    qual_type = "Previous Team Franchise"
                                elif qualifier_str.startswith("previous-team-franchise:"):
                                    qual_str = "previous-team-franchise:"
                                    qual_type = "Previous Team Franchise"
                                elif qualifier_str.startswith("previous-opponent-franchise:"):
                                    qual_str = "previous-opponent-franchise:"
                                    qual_type = "Previous Opponent Franchise"
                                elif qualifier_str.startswith("state:"):
                                    qual_str = "state:"
                                    qual_type = "State"
                                elif qualifier_str.startswith("exact-state:"):
                                    qual_str = "exact-state:"
                                    qual_type = "Exact State"
                                elif qualifier_str.startswith("province:"):
                                    qual_str = "province:"
                                    qual_type = "State"
                                elif qualifier_str.startswith("exact-province:"):
                                    qual_str = "exact-province:"
                                    qual_type = "Exact State"
                                elif qualifier_str.startswith("team-province:"):
                                    qual_str = "team-province:"
                                    qual_type = "Team State"
                                elif qualifier_str.startswith("team-exact-province:"):
                                    qual_str = "team-exact-province:"
                                    qual_type = "Team Exact State"
                                elif qualifier_str.startswith("opponent-province:"):
                                    qual_str = "opponent-province:"
                                    qual_type = "Opponent State"
                                elif qualifier_str.startswith("opponent-exact-province:"):
                                    qual_str = "opponent-exact-province:"
                                    qual_type = "Opponent Exact State"
                                elif qualifier_str.startswith("time-zone:"):
                                    qual_str = "time-zone:"
                                    qual_type = "Time Zone"
                                elif qualifier_str.startswith("exact-time-zone:"):
                                    qual_str = "exact-time-zone:"
                                    qual_type = "Exact Time Zone"
                                elif qualifier_str.startswith("team-state:"):
                                    qual_str = "team-state:"
                                    qual_type = "Team State"
                                elif qualifier_str.startswith("team-exact-state:"):
                                    qual_str = "team-exact-state:"
                                    qual_type = "Team Exact State"
                                elif qualifier_str.startswith("team-time-zone:"):
                                    qual_str = "team-time-zone:"
                                    qual_type = "Team Time Zone"
                                elif qualifier_str.startswith("team-exact-time-zone:"):
                                    qual_str = "team-exact-time-zone:"
                                    qual_type = "Team Exact Time Zone"
                                elif qualifier_str.startswith("opponent-state:"):
                                    qual_str = "opponent-state:"
                                    qual_type = "Opponent State"
                                elif qualifier_str.startswith("opponent-exact-state:"):
                                    qual_str = "opponent-exact-state:"
                                    qual_type = "Opponent Exact State"
                                elif qualifier_str.startswith("opponent-time-zone:"):
                                    qual_str = "opponent-time-zone:"
                                    qual_type = "Opponent Time Zone"
                                elif qualifier_str.startswith("opponent-exact-time-zone:"):
                                    qual_str = "opponent-exact-time-zone:"
                                    qual_type = "Opponent Exact Time Zone"
                                elif qualifier_str.startswith("country:"):
                                    qual_str = "country:"
                                    qual_type = "Country"
                                elif qualifier_str.startswith("exact-country:"):
                                    qual_str = "exact-country:"
                                    qual_type = "Exact Country"
                                elif qualifier_str.startswith("team-country:"):
                                    qual_str = "team-country:"
                                    qual_type = "Team Country"
                                elif qualifier_str.startswith("team-exact-country:"):
                                    qual_str = "team-exact-country:"
                                    qual_type = "Team Exact Country"
                                elif qualifier_str.startswith("opponent-country:"):
                                    qual_str = "opponent-country:"
                                    qual_type = "Opponent Country"
                                elif qualifier_str.startswith("opponent-exact-country:"):
                                    qual_str = "opponent-exact-country:"
                                    qual_type = "Opponent Exact Country"
                                elif qualifier_str.startswith("prv-t:"):
                                    qual_str = "prv-t:"
                                    qual_type = "Previous Team"
                                elif qualifier_str.startswith("previous-team:"):
                                    qual_str = "previous-team:"
                                    qual_type = "Previous Team"
                                elif qualifier_str.startswith("prv-o:"):
                                    qual_str = "prv-o:"
                                    qual_type = "Previous Opponent"
                                elif qualifier_str.startswith("previous-opponent:"):
                                    qual_str = "previous-opponent:"
                                    qual_type = "Previous Opponent"
                                elif qualifier_str.startswith("upc-t:"):
                                    qual_str = "upc-t:"
                                    qual_type = "Upcoming Team"
                                elif qualifier_str.startswith("upcoming-team:"):
                                    qual_str = "upcoming-team:"
                                    qual_type = "Upcoming Team"
                                elif qualifier_str.startswith("upc-o:"):
                                    qual_str = "upc-o:"
                                    qual_type = "Upcoming Opponent"
                                elif qualifier_str.startswith("upcoming-opponent:"):
                                    qual_str = "upcoming-opponent:"
                                    qual_type = "Upcoming Opponent"
                                elif qualifier_str.startswith("lg:"):
                                    qual_str = "lg:"
                                    qual_type = "Team League"
                                elif qualifier_str.startswith("league:"):
                                    qual_str = "league:"
                                    qual_type = "Team League"
                                elif qualifier_str.startswith("team-league:"):
                                    qual_str = "team-league:"
                                    qual_type = "Team League"
                                elif qualifier_str.startswith("opp-lg:"):
                                    qual_str = "opp-lg:"
                                    qual_type = "Opponent League"
                                elif qualifier_str.startswith("opponent-league:"):
                                    qual_str = "opponent-league:"
                                    qual_type = "Opponent League"
                                elif qualifier_str.startswith("previous-team-league:"):
                                    qual_str = "previous-team-league:"
                                    qual_type = "Previous Team League"
                                elif qualifier_str.startswith("previous-opponent-league:"):
                                    qual_str = "previous-opponent-league:"
                                    qual_type = "Previous Opponent League"
                                elif qualifier_str.startswith("upcoming-team-league:"):
                                    qual_str = "upcoming-team-league:"
                                    qual_type = "Upcoming Team League"
                                elif qualifier_str.startswith("upcoming-opponent-league:"):
                                    qual_str = "upcoming-opponent-league:"
                                    qual_type = "Upcoming Opponent League"
                                elif qualifier_str.startswith("team-division:"):
                                    qual_str = "team-division:"
                                    qual_type = "Team Division"
                                    split_str = ";"
                                elif qualifier_str.startswith("opponent-division:"):
                                    qual_str = "opponent-division:"
                                    qual_type = "Opponent Division"
                                    split_str = ";"
                                elif qualifier_str.startswith("primary-season-position:"):
                                    qual_str = "primary-season-position:"
                                    qual_type = "Primary Season Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier_str.startswith("season-position:"):
                                    qual_str = "season-position:"
                                    qual_type = "Season Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier_str.startswith("position:"):
                                    qual_str = "position:"
                                    qual_type = "Position"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("ph-for-position:"):
                                    qual_str = "ph-for-position:"
                                    qual_type = "PH For Position"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("hit-location:"):
                                    qual_str = "hit-location:"
                                    qual_type = "Hit Location"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("exact-hit-location:"):
                                    qual_str = "hit-location:"
                                    qual_type = "Exact Hit Location"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("facing-position:"):
                                    qual_str = "facing-position:"
                                    qual_type = "Facing Position"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("facing-ph-for-position:"):
                                    qual_str = "facing-ph-for-position:"
                                    qual_type = "Facing PH For Position"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("facing-primary-position:"):
                                    qual_str = "facing-primary-position:"
                                    qual_type = "Facing Primary Position"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("facing-main-position:"):
                                    qual_str = "facing-main-position:"
                                    qual_type = "Facing Main Position"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-game-position:"):
                                    qual_str = "starting-game-position:"
                                    qual_type = "Primary Game Position"
                                    player_type["da_type"] = "Batter"
                                    qualifiers["Start"] = []
                                    qualifiers["Start"].append({
                                        "negate" : False
                                    })
                                elif qualifier_str.startswith("primary-game-position:"):
                                    qual_str = "primary-game-position:"
                                    qual_type = "Primary Game Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier_str.startswith("game-position:"):
                                    qual_str = "game-position:"
                                    qual_type = "Game Position"
                                    player_type["da_type"] = "Batter"
                                elif qualifier_str.startswith("tv-network:"):
                                    qual_str = "tv-network:"
                                    qual_type = "TV Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("radio-network:"):
                                    qual_str = "radio-network:"
                                    qual_type = "Radio Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("exact-tv-network:"):
                                    qual_str = "exact-tv-network:"
                                    qual_type = "Exact TV Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("exact-radio-network:"):
                                    qual_str = "exact-radio-network:"
                                    qual_type = "Exact Radio Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("national-tv-network:"):
                                    qual_str = "national-tv-network:"
                                    qual_type = "National TV Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("national-exact-tv-network:"):
                                    qual_str = "national-exact-tv-network:"
                                    qual_type = "National Exact TV Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("any-national-tv-network:"):
                                    qual_str = "any-national-tv-network:"
                                    qual_type = "Any National TV Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("any-national-exact-tv-network:"):
                                    qual_str = "any-national-exact-tv-network:"
                                    qual_type = "Any National Exact TV Network"
                                    split_str = "~"
                                elif qualifier_str.startswith("event-type:"):
                                    qual_str = "event-type:"
                                    qual_type = "Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("event:"):
                                    qual_str = "event:"
                                    qual_type = "Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("exact-event-type:"):
                                    qual_str = "exact-event-type:"
                                    qual_type = "Exact Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("exact-event:"):
                                    qual_str = "exact-event:"
                                    qual_type = "Exact Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-event-type:"):
                                    qual_str = "previous-event-type:"
                                    qual_type = "Previous Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-event:"):
                                    qual_str = "previous-event:"
                                    qual_type = "Previous Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-player-event-type:"):
                                    qual_str = "previous-player-event-type:"
                                    qual_type = "Previous Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-player-event:"):
                                    qual_str = "previous-player-event:"
                                    qual_type = "Previous Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-player-event-type:"):
                                    qual_str = "upcoming-player-event-type:"
                                    qual_type = "Upcoming Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-player-event:"):
                                    qual_str = "upcoming-player-event:"
                                    qual_type = "Upcoming Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-exact-event-type:"):
                                    qual_str = "previous-exact-event-type:"
                                    qual_type = "Previous Exact Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-exact-event:"):
                                    qual_str = "previous-exact-event:"
                                    qual_type = "Previous Exact Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-exact-player-event-type:"):
                                    qual_str = "previous-exact-player-event-type:"
                                    qual_type = "Previous Exact Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("previous-exact-player-event:"):
                                    qual_str = "previous-exact-player-event:"
                                    qual_type = "Previous Exact Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-exact-player-event-type:"):
                                    qual_str = "upcoming-exact-player-event-type:"
                                    qual_type = "Upcoming Exact Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-exact-player-event:"):
                                    qual_str = "upcoming-exact-player-event:"
                                    qual_type = "Upcoming Exact Player Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-event-type:"):
                                    qual_str = "upcoming-event-type:"
                                    qual_type = "Upcoming Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-event:"):
                                    qual_str = "upcoming-event:"
                                    qual_type = "Upcoming Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-exact-event-type:"):
                                    qual_str = "upcoming-exact-event-type:"
                                    qual_type = "Upcoming Exact Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("upcoming-exact-event:"):
                                    qual_str = "upcoming-exact-event:"
                                    qual_type = "Upcoming Exact Event Type"
                                    split_str = ";"
                                    extra_stats.add("current-stats")
                                                                                                
                                qualifier_obj["values"] = re.split(r"(?<!\\)" + split_str, re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if ("Position" in qual_type or "Location" in qual_type) and len(qualifier_obj["values"]) == 2 and qualifier_obj["values"][0].isdigit() and qualifier_obj["values"][1].isdigit() and int(qualifier_obj["values"][0]) < int(qualifier_obj["values"][1]):
                                    new_vals = range(int(qualifier_obj["values"][0]), int(qualifier_obj["values"][1]) + 1)
                                    qualifier_obj["values"] = [str(val) for val in new_vals]
                                if "Position" in qual_type:
                                    new_vals = []
                                    for val in qualifier_obj["values"]:
                                        if val == "of":
                                            new_vals.extend(["lf", "cf", "rf"])
                                        elif val == "if":
                                            new_vals.extend(["1b", "2b", "3b", "ss"])
                                        elif val == "f":
                                            new_vals.extend(["1b", "2b", "3b", "ss", "lf", "cf", "rf"])
                                        else:
                                            new_vals.append(val)
                                    qualifier_obj["values"] = new_vals
                            elif qualifier.startswith("local-event-time:") or qualifier.startswith("local-start-time:") or qualifier.startswith("team-event-time:") or qualifier.startswith("team-start-time:") or qualifier.startswith("opponent-event-time:") or qualifier.startswith("opponent-start-time:"):
                                if qualifier_str.startswith("local-event-time:"):
                                    qual_str = "local-event-time:"
                                    qual_type = "Local Event Time"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("local-start-time:"):
                                    qual_str = "local-start-time:"
                                    qual_type = "Local Start Time"
                                elif qualifier_str.startswith("team-event-time:"):
                                    qual_str = "team-event-time:"
                                    qual_type = "Team Event Time"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("team-start-time:"):
                                    qual_str = "team-start-time:"
                                    qual_type = "Team Start Time"
                                elif qualifier_str.startswith("opponent-event-time:"):
                                    qual_str = "opponent-event-time:"
                                    qual_type = "Opponent Event Time"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-start-time:"):
                                    qual_str = "opponent-start-time:"
                                    qual_type = "Opponent Start Time"

                                split_vals = re.split(r"(?<!\\)-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    the_date = dateutil.parser.parse(split_vals[0]).time()
                                    the_date_2 = dateutil.parser.parse(split_vals[0]).time()
                                    if split_vals[0].count(":") == 0:
                                        the_date_2 = the_date_2.replace(minute=59).replace(second=59)
                                    elif split_vals[0].count(":") == 1:
                                        the_date_2 = the_date_2.replace(second=59)
                                    qualifier_obj["values"] = {
                                        "start_val" : the_date,
                                        "end_val" : the_date_2
                                    }
                                else:
                                    start_date = None
                                    end_date = None
                                    if split_vals[0] == "min" and split_vals[1] == "max":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = datetime.time(23, 59, 59)
                                    elif split_vals[0] == "min":
                                        start_date = datetime.time(0, 0, 0)
                                        end_date = dateutil.parser.parse(split_vals[1].upper()).time()
                                    elif split_vals[1] == "max":
                                        start_date = dateutil.parser.parse(split_vals[0].upper()).time()
                                        end_date = datetime.time(23, 59, 59)
                                    else:
                                        start_date = dateutil.parser.parse(split_vals[0].upper()).time()
                                        end_date = dateutil.parser.parse(split_vals[1].upper()).time()

                                    qualifier_obj["values"] = {
                                        "start_val" : start_date,
                                        "end_val" : end_date
                                    }
                                
                                qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"].replace(microsecond=0)
                                qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"].replace(microsecond=0)
                            elif re.match(all_event_types_re, qualifier):
                                qualifier_obj["values"] = re.split(r"(?<!\\)\;", qualifier_str)
                                qual_type = "Exact Event Type"
                                extra_stats.add("current-stats")
                            elif qualifier.startswith("m:") or qualifier.startswith("month:") or re.match(all_months_re, qualifier):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("m:"):
                                    qual_str = "m:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                elif qualifier_str.startswith("month:"):
                                    qual_str = "month:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                else:
                                    values = re.split(r"(?<!\\)\-", qualifier_str)

                                if len(values) == 2:
                                    start_month = dateutil.parser.parse(values[0]).date().month
                                    end_month =  dateutil.parser.parse(values[1]).date().month
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 13)) + list(range(1, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(dateutil.parser.parse(value).date().month)
                                qual_type = "Month"
                            elif qualifier.startswith("d:") or qualifier.startswith("day:") or re.match(all_days_re, qualifier):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("d:"):
                                    qual_str = "d:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                elif qualifier_str.startswith("day:"):
                                    qual_str = "day:"
                                    values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                else:
                                    values = re.split(r"(?<!\\)\-", qualifier_str)

                                if len(values) == 2:
                                    start_month = dateutil.parser.parse(values[0]).date().weekday()
                                    end_month =  dateutil.parser.parse(values[1]).date().weekday()
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 7)) + list(range(0, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(dateutil.parser.parse(value).date().weekday())
                                qual_type = "Day"
                            elif qualifier.startswith("dt:") or qualifier.startswith("date:"):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("dt:"):
                                    qual_str = "dt:"
                                elif qualifier_str.startswith("date:"):
                                    qual_str = "date:"

                                values = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(values) == 2:
                                    start_month = ordinal_to_number(values[0])
                                    end_month =  ordinal_to_number(values[1])
                                    if end_month < start_month:
                                         qualifier_obj["values"] = list(range(start_month, 32)) + list(range(1, end_month + 1))
                                    else:
                                        qualifier_obj["values"] = list(range(start_month, end_month + 1))
                                else:
                                    for value in values:
                                        qualifier_obj["values"].append(ordinal_to_number(value))
                                qual_type = "Date"
                            elif qualifier_str.startswith("series-game:") or qualifier_str.startswith("gm:") or qualifier_str.startswith("game:") or qualifier_str.startswith("season-gm:") or qualifier_str.startswith("season-game:") or qualifier_str.startswith("season:") or qualifier_str.startswith("season-reversed:") or qualifier_str.startswith("seasons:") or qualifier_str.startswith("seasons-reversed:") or qualifier_str.startswith("tmgm:") or qualifier_str.startswith("team-game:") or qualifier_str.startswith("crgm:") or qualifier_str.startswith("career-game:") or qualifier_str.startswith("game-reversed:") or qualifier_str.startswith("career-game-reversed:") or qualifier_str.startswith("season-game-reversed:") or qualifier_str.startswith("team-game-reversed:") or qualifier_str.startswith("career-games:") or qualifier_str.startswith("games-reversed:") or qualifier_str.startswith("career-games-reversed:") or qualifier_str.startswith("season-games-reversed:") or qualifier_str.startswith("team-games-reversed:") or qualifier_str.startswith("team-games:") or qualifier_str.startswith("dr:") or qualifier_str.startswith("days-rest:") or qualifier_str.startswith("starts-days-rest:") or qualifier_str.startswith("prv-dr:") or qualifier_str.startswith("previous-days-rest:") or qualifier_str.startswith("upc-dr:") or qualifier_str.startswith("upcoming-days-rest:") or qualifier_str.startswith("upcoming-starts-days-rest:") or qualifier_str.startswith("gr:") or qualifier_str.startswith("game-days-rest:") or qualifier_str.startswith("start-days-rest:") or qualifier_str.startswith("games-rest:") or qualifier_str.startswith("starts-rest:") or qualifier_str.startswith("prv-gr:") or qualifier_str.startswith("previous-games-rest:") or qualifier_str.startswith("upc-gr:") or qualifier_str.startswith("upcoming-games-rest:") or qualifier_str.startswith("start-days-in-a-row:") or qualifier_str.startswith("game-days-in-a-row:") or qualifier_str.startswith("days-in-a-row:") or qualifier_str.startswith("games-in-a-row:") or qualifier_str.startswith("starts-in-a-row:") or qualifier_str.startswith("number:") or qualifier_str.startswith("game-number:") or qualifier_str.startswith("season-number:"):
                                qualifier_obj["values"] = []

                                if qualifier_str.startswith("series-game:"):
                                    qual_str = "series-game:"
                                    qual_type = "Series Game"
                                    if not playoffs:
                                        playoffs = "Only"
                                elif qualifier_str.startswith("gm:"):
                                    qual_str = "gm:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("game:"):
                                    qual_str = "game:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("season-gm:"):
                                    qual_str = "season-gm:"
                                    qual_type = "Season Game"
                                elif qualifier_str.startswith("season-game:"):
                                    qual_str = "season-game:"
                                    qual_type = "Season Game"
                                elif qualifier_str.startswith("season:"):
                                    qual_str = "season:"
                                    qual_type = "Season"
                                elif qualifier_str.startswith("season-reversed:"):
                                    qual_str = "season-reversed:"
                                    qual_type = "Season Reversed"
                                elif qualifier_str.startswith("season-index:"):
                                    qual_str = "season-index:"
                                    qual_type = "Season Index"
                                elif qualifier_str.startswith("season-index-reversed:"):
                                    qual_str = "season-index-reversed:"
                                    qual_type = "Season Index Reversed"
                                elif qualifier_str.startswith("tmgm:"):
                                    qual_str = "tmgm:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("team-game:"):
                                    qual_str = "team-game:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("crgm:"):
                                    qual_str = "crgm:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-game:"):
                                    qual_str = "career-game:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-game-reversed:"):
                                    qual_str = "career-game-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("team-game-reversed:"):
                                    qual_str = "team-game-reversed:"
                                    qual_type = "Team Game Reversed"
                                elif qualifier_str.startswith("game-reversed:"):
                                    qual_str = "game-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("season-game-reversed:"):
                                    qual_str = "season-game-reversed:"
                                    qual_type = "Season Game Reversed"
                                elif qualifier_str.startswith("career-games:"):
                                    qual_str = "career-games:"
                                    qual_type = "Career Game"
                                elif qualifier_str.startswith("career-games-reversed:"):
                                    qual_str = "career-games-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("team-games-reversed:"):
                                    qual_str = "team-games-reversed:"
                                    qual_type = "Team Game Reversed"
                                elif qualifier_str.startswith("games-reversed:"):
                                    qual_str = "games-reversed:"
                                    qual_type = "Career Game Reversed"
                                elif qualifier_str.startswith("season-games-reversed:"):
                                    qual_str = "season-games-reversed:"
                                    qual_type = "Season Game Reversed"
                                elif qualifier_str.startswith("team-games:"):
                                    qual_str = "team-games:"
                                    qual_type = "Team Game"
                                elif qualifier_str.startswith("dr:"):
                                    qual_str = "dr:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("days-rest:"):
                                    qual_str = "days-rest:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("starts-days-rest:"):
                                    qual_str = "starts-days-rest:"
                                    qual_type = "Starts Days Rest"
                                elif qualifier_str.startswith("prv-dr:"):
                                    qual_str = "prv-dr:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("previous-days-rest:"):
                                    qual_str = "previous-days-rest:"
                                    qual_type = "Days Rest"
                                elif qualifier_str.startswith("upc-dr:"):
                                    qual_str = "upc-dr:"
                                    qual_type = "Upcoming Days Rest"
                                elif qualifier_str.startswith("upcoming-days-rest:"):
                                    qual_str = "upcoming-days-rest:"
                                    qual_type = "Upcoming Days Rest"
                                elif qualifier_str.startswith("upcoming-starts-days-rest:"):
                                    qual_str = "upcoming-starts-days-rest:"
                                    qual_type = "Upcoming Starts Days Rest"
                                elif qualifier_str.startswith("gr:"):
                                    qual_str = "gr:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("games-rest:"):
                                    qual_str = "games-rest:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("starts-rest:"):
                                    qual_str = "starts-rest:"
                                    qual_type = "Starts Rest"
                                elif qualifier_str.startswith("prv-gr:"):
                                    qual_str = "prv-gr:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("previous-games-rest:"):
                                    qual_str = "previous-games-rest:"
                                    qual_type = "Games Rest"
                                elif qualifier_str.startswith("game-days-rest:"):
                                    qual_str = "game-days-rest:"
                                    qual_type = "Game Days Rest"
                                elif qualifier_str.startswith("start-days-rest:"):
                                    qual_str = "start-days-rest:"
                                    qual_type = "Start Days Rest"
                                elif qualifier_str.startswith("days-in-a-row:"):
                                    qual_str = "days-in-a-row:"
                                    qual_type = "Days In A Row"
                                elif qualifier_str.startswith("game-days-in-a-row:"):
                                    qual_str = "game-days-in-a-row:"
                                    qual_type = "Game Days In A Row"
                                elif qualifier_str.startswith("start-days-in-a-row:"):
                                    qual_str = "start-days-in-a-row:"
                                    qual_type = "Start Days In A Row"
                                elif qualifier_str.startswith("games-in-a-row:"):
                                    qual_str = "games-in-a-row:"
                                    qual_type = "Games In A Row"
                                elif qualifier_str.startswith("starts-in-a-row:"):
                                    qual_str = "starts-in-a-row:"
                                    qual_type = "Starts In A Row"
                                elif qualifier_str.startswith("number:"):
                                    qual_str = "number:"
                                    qual_type = "Season Number"
                                elif qualifier_str.startswith("season-number:"):
                                    qual_str = "season-number:"
                                    qual_type = "Season Number"
                                elif qualifier_str.startswith("game-number:"):
                                    qual_str = "game-number:"
                                    qual_type = "Game Number"
                                
                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                
                                if len(split_vals) == 1:
                                    if qual_type == "Series Game" or qual_type == "Season Number" or qual_type == "Game Number" or "In A Row" in qual_type or "Rest" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0])
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1])
                                    }
                            elif qualifier_str.startswith("opponent-runs-rank:") or qualifier_str.startswith("opponent-standings-rank:") or qualifier_str.startswith("opponent-runs-allowed-rank:") or qualifier_str.startswith("opponent-run-rank:") or qualifier_str.startswith("opponent-run-allowed-rank:") or qualifier_str.startswith("opponent-wrc\+-rank:") or qualifier_str.startswith("opponent-avg-rank:") or qualifier_str.startswith("opponent-obp-rank:") or qualifier_str.startswith("opponent-slg-rank:") or qualifier_str.startswith("opponent-ops-rank:") or qualifier_str.startswith("opponent-era--rank:") or qualifier_str.startswith("opponent-era-rank:") or qualifier_str.startswith("opponent-win-percent:") or qualifier_str.startswith("opponent-winning-percent:") or qualifier_str.startswith("current-opponent-win-percent:") or qualifier_str.startswith("current-opponent-winning-percent:") or qualifier_str.startswith("opponent-wins:") or qualifier_str.startswith("opponent-losses:") or qualifier_str.startswith("current-opponent-wins:") or qualifier_str.startswith("current-opponent-losses:") or qualifier_str.startswith("attendance:"):
                                if qualifier_str.startswith("opponent-runs-rank:"):
                                    qual_str = "opponent-runs-rank:"
                                    qual_type = "Opponent Runs Rank"
                                elif qualifier_str.startswith("opponent-standings-rank:"):
                                    qual_str = "opponent-standings-rank:"
                                    qual_type = "Opponent Standings Rank"
                                elif qualifier_str.startswith("opponent-runs-allowed-rank:"):
                                    qual_str = "opponent-runs-allowed-rank:"
                                    qual_type = "Opponent Runs Allowed Rank"
                                elif qualifier_str.startswith("opponent-wrc\+-rank:"):
                                    qual_str = "opponent-wrc\\\\\+-rank:"
                                    qual_type = "Opponent wRC+ Rank"
                                elif qualifier_str.startswith("opponent-avg-rank:"):
                                    qual_str = "opponent-avg-rank:"
                                    qual_type = "Opponent AVG Rank"
                                elif qualifier_str.startswith("opponent-ops-rank:"):
                                    qual_str = "opponent-ops-rank:"
                                    qual_type = "Opponent OPS Rank"
                                elif qualifier_str.startswith("opponent-obp-rank:"):
                                    qual_str = "opponent-obp-rank:"
                                    qual_type = "Opponent OBP Rank"
                                elif qualifier_str.startswith("opponent-slg-rank:"):
                                    qual_str = "opponent-slg-rank:"
                                    qual_type = "Opponent SLG Rank"
                                elif qualifier_str.startswith("opponent-era--rank:"):
                                    qual_str = "opponent-era--rank:"
                                    qual_type = "Opponent ERA- Rank"
                                elif qualifier_str.startswith("opponent-era-rank:"):
                                    qual_str = "opponent-era-rank:"
                                    qual_type = "Opponent ERA Rank"
                                elif qualifier_str.startswith("opponent-run-rank:"):
                                    qual_str = "opponent-run-rank:"
                                    qual_type = "Opponent Runs Rank"
                                elif qualifier_str.startswith("opponent-run-allowed-rank:"):
                                    qual_str = "opponent-run-allowed-rank:"
                                    qual_type = "Opponent Runs Allowed Rank"
                                elif qualifier_str.startswith("opponent-win-percent:"):
                                    qual_str = "opponent-win-percent:"
                                    qual_type = "Opponent Win Percentage"
                                elif qualifier_str.startswith("opponent-winning-percent:"):
                                    qual_str = "opponent-winning-percent:"
                                    qual_type = "Opponent Win Percentage"
                                elif qualifier_str.startswith("opponent-wins:"):
                                    qual_str = "opponent-wins:"
                                    qual_type = "Opponent Wins"
                                elif qualifier_str.startswith("opponent-losses:"):
                                    qual_str = "opponent-losses:"
                                    qual_type = "Opponent Losses"
                                elif qualifier_str.startswith("current-opponent-wins:"):
                                    qual_str = "current-opponent-wins:"
                                    qual_type = "Current Opponent Wins"
                                elif qualifier_str.startswith("current-opponent-losses:"):
                                    qual_str = "current-opponent-losses:"
                                    qual_type = "Current Opponent Losses"
                                elif qualifier_str.startswith("current-opponent-win-percent:"):
                                    qual_str = "current-opponent-win-percent:"
                                    qual_type = "Current Opponent Win Percentage"
                                elif qualifier_str.startswith("current-opponent-winning-percent:"):
                                    qual_str = "current-opponent-winning-percent:"
                                    qual_type = "Current Opponent Win Percentage"
                                elif qualifier_str.startswith("attendance:"):
                                    qual_str = "attendance:"
                                    qual_type = "Attendance"

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                reverse = False
                                if len(split_vals) == 3:
                                    reverse = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    if "Percentage" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : 1,
                                            "reverse" : reverse
                                        }
                                    elif "Attendance" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : 0,
                                            "end_val" : ordinal_to_number(split_vals[0]),
                                            "reverse" : reverse
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0]),
                                            "reverse" : reverse
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1]),
                                        "reverse" : reverse
                                    }
                                
                                if "Percentage" in qual_type:
                                    if qualifier_obj["values"]["start_val"] > 1:
                                        qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"] / 100
                                    if qualifier_obj["values"]["end_val"] > 1:
                                        qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"] / 100
                            elif qualifier_str.startswith("team-runs-rank:") or qualifier_str.startswith("team-standings-rank:") or qualifier_str.startswith("team-runs-allowed-rank:") or qualifier_str.startswith("team-run-rank:") or qualifier_str.startswith("team-run-allowed-rank:") or qualifier_str.startswith("team-wrc\+-rank:") or qualifier_str.startswith("team-avg-rank:") or qualifier_str.startswith("team-obp-rank:") or qualifier_str.startswith("team-slg-rank:") or qualifier_str.startswith("team-ops-rank:") or qualifier_str.startswith("team-era--rank:") or qualifier_str.startswith("team-era-rank:") or qualifier_str.startswith("team-wins:") or qualifier_str.startswith("team-losses:") or qualifier_str.startswith("current-team-wins:") or qualifier_str.startswith("current-team-losses:") or qualifier_str.startswith("team-win-percent:") or qualifier_str.startswith("team-winning-percent:") or qualifier_str.startswith("current-team-winning-percent:") or qualifier_str.startswith("current-team-win-percent:"):
                                if qualifier_str.startswith("team-wins:"):
                                    qual_str = "team-wins:"
                                    qual_type = "Team Wins"
                                elif qualifier_str.startswith("team-losses:"):
                                    qual_str = "team-losses:"
                                    qual_type = "Team Losses"
                                elif qualifier_str.startswith("current-team-wins:"):
                                    qual_str = "current-team-wins:"
                                    qual_type = "Current Team Wins"
                                elif qualifier_str.startswith("current-team-losses:"):
                                    qual_str = "current-team-losses:"
                                    qual_type = "Current Team Losses"
                                elif qualifier_str.startswith("team-runs-rank:"):
                                    qual_str = "team-runs-rank:"
                                    qual_type = "Team Runs Rank"
                                elif qualifier_str.startswith("team-standings-rank:"):
                                    qual_str = "team-standings-rank:"
                                    qual_type = "Team Standings Rank"
                                elif qualifier_str.startswith("team-runs-allowed-rank:"):
                                    qual_str = "team-runs-allowed-rank:"
                                    qual_type = "Team Runs Allowed Rank"
                                elif qualifier_str.startswith("team-wrc\+-rank:"):
                                    qual_str = "team-wrc\\\\\+-rank:"
                                    qual_type = "Team wRC+ Rank"
                                elif qualifier_str.startswith("team-avg-rank:"):
                                    qual_str = "team-avg-rank:"
                                    qual_type = "Team AVG Rank"
                                elif qualifier_str.startswith("team-ops-rank:"):
                                    qual_str = "team-ops-rank:"
                                    qual_type = "Team OPS Rank"
                                elif qualifier_str.startswith("team-obp-rank:"):
                                    qual_str = "team-obp-rank:"
                                    qual_type = "Team OBP Rank"
                                elif qualifier_str.startswith("team-slg-rank:"):
                                    qual_str = "team-slg-rank:"
                                    qual_type = "Team SLG Rank"
                                elif qualifier_str.startswith("team-era--rank:"):
                                    qual_str = "team-era--rank:"
                                    qual_type = "Team ERA- Rank"
                                elif qualifier_str.startswith("team-era-rank:"):
                                    qual_str = "team-era-rank:"
                                    qual_type = "Team ERA Rank"
                                elif qualifier_str.startswith("team-run-rank:"):
                                    qual_str = "team-run-rank:"
                                    qual_type = "Team Runs Rank"
                                elif qualifier_str.startswith("team-run-allowed-rank:"):
                                    qual_str = "team-run-allowed-rank:"
                                    qual_type = "Team Runs Allowed Rank"
                                elif qualifier_str.startswith("team-win-percent:"):
                                    qual_str = "team-win-percent:"
                                    qual_type = "Team Win Percentage"
                                elif qualifier_str.startswith("team-winning-percent:"):
                                    qual_str = "team-winning-percent:"
                                    qual_type = "Team Win Percentage"
                                elif qualifier_str.startswith("current-team-win-percent:"):
                                    qual_str = "current-team-win-percent:"
                                    qual_type = "Current Team Win Percentage"
                                elif qualifier_str.startswith("current-team-winning-percent:"):
                                    qual_str = "current-team-winning-percent:"
                                    qual_type = "Current Team Win Percentage"

                                split_vals = re.split(r"(?<!\\)\:", qualifier_str)
                                reverse = False
                                if len(split_vals) == 3:
                                    reverse = True
                                    qualifier_str = split_vals[0] + ":" + split_vals[1]

                                split_vals = re.split(r"(?<!\\)\-", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                if len(split_vals) == 1:
                                    if "Percentage" in qual_type:
                                        qualifier_obj["values"] = {
                                            "start_val" : ordinal_to_number(split_vals[0]),
                                            "end_val" : 1,
                                            "reverse" : reverse
                                        }
                                    else:
                                        qualifier_obj["values"] = {
                                            "start_val" : 1,
                                            "end_val" : ordinal_to_number(split_vals[0]),
                                            "reverse" : reverse
                                        }
                                else:
                                    qualifier_obj["values"] = {
                                        "start_val" : ordinal_to_number(split_vals[0]),
                                        "end_val" : ordinal_to_number(split_vals[1]),
                                        "reverse" : reverse
                                    }

                                if "Percentage" in qual_type:
                                    if qualifier_obj["values"]["start_val"] > 1:
                                        qualifier_obj["values"]["start_val"] = qualifier_obj["values"]["start_val"] / 100
                                    if qualifier_obj["values"]["end_val"] > 1:
                                        qualifier_obj["values"]["end_val"] = qualifier_obj["values"]["end_val"] / 100
                            elif qualifier_str.startswith("ind-event-stat:") or qualifier_str.startswith("indv-event-stat:") or qualifier_str.startswith("individual-event-stat:") or qualifier.startswith("st:") or qualifier.startswith("inning-stat:") or qualifier.startswith("stat:") or qualifier.startswith("prv-st:") or qualifier.startswith("previous-stat:") or qualifier.startswith("upc-st:") or qualifier.startswith("upcoming-stat:") or qualifier.startswith("season-st:") or qualifier.startswith("season-stat:") or qualifier.startswith("prv-season-st:") or qualifier.startswith("previous-season-stat:") or qualifier.startswith("upc-season-st:") or qualifier.startswith("upcoming-season-stat:") or qualifier.startswith("totalgames-st:") or qualifier.startswith("totalgames-stat:"):
                                if qualifier_str.startswith("ind-event-stat:"):
                                    qual_str = "ind-event-stat:"
                                    qual_type = "Individual Event Stat"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("indv-event-stat:"):
                                    qual_str = "indv-event-stat:"
                                    qual_type = "Individual Event Stat"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("individual-event-stat:"):
                                    qual_str = "individual-event-stat:"
                                    qual_type = "Individual Event Stat"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("st:"):
                                    qual_str = "st:"
                                    qual_type = "Stat"
                                elif qualifier_str.startswith("inning-stat:"):
                                    qual_str = "inning-stat:"
                                    qual_type = "Inning Stat"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("show-stat-ing")
                                elif qualifier_str.startswith("stat:"):
                                    qual_str = "stat:"
                                    qual_type = "Stat"
                                elif qualifier_str.startswith("prv-st:"):
                                    qual_str = "prv-st:"
                                    qual_type = "Previous Stat"
                                elif qualifier_str.startswith("previous-stat:"):
                                    qual_str = "previous-stat:"
                                    qual_type = "Previous Stat"
                                elif qualifier_str.startswith("upc-st:"):
                                    qual_str = "upc-st:"
                                    qual_type = "Upcoming Stat"
                                elif qualifier_str.startswith("upcoming-stat:"):
                                    qual_str = "upcoming-stat:"
                                    qual_type = "Upcoming Stat"
                                elif qualifier_str.startswith("season-st:"):
                                    qual_str = "season-st:"
                                    qual_type = "Season Stat"
                                elif qualifier_str.startswith("season-stat:"):
                                    qual_str = "season-stat:"
                                    qual_type = "Season Stat"
                                elif qualifier_str.startswith("prv-season-st:"):
                                    qual_str = "prv-season-st:"
                                    qual_type = "Previous Season Stat"
                                elif qualifier_str.startswith("previous-season-stat:"):
                                    qual_str = "previous-season-stat:"
                                    qual_type = "Previous Season Stat"
                                elif qualifier_str.startswith("upc-season-st:"):
                                    qual_str = "upc-season-st:"
                                    qual_type = "Upcoming Season Stat"
                                elif qualifier_str.startswith("upcoming-season-stat:"):
                                    qual_str = "upcoming-season-stat:"
                                    qual_type = "Upcoming Season Stat"
                                elif qualifier_str.startswith("totalgames-st:"):
                                    qual_str = "totalgames-st:"
                                    qual_type = "Total Games Stat"
                                elif qualifier_str.startswith("totalgames-stat:"):
                                    qual_str = "totalgames-stat:"
                                    qual_type = "Total Games Stat"

                                qualifier_obj["values"] = []

                                all_vals = re.split(r"(?<!\\)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                
                                for val in all_vals:
                                    split_vals = re.split(r"(?<!\\)\=", val)
                                    stat = unescape_string(split_vals[0])

                                    if len(split_vals) == 1:
                                        qualifier_obj["values"].append({
                                            "stat" : stat,
                                            "start_val" : 1,
                                            "end_val" : float("inf"),
                                            "end_exclusive" : False
                                        })
                                    else:
                                        split_vals = re.split(r"(?<!\\)(?<!^)\-", split_vals[1], 1)
                                        if len(split_vals) == 1:
                                            end_exclusive = False
                                            if split_vals[0].endswith("exc"):
                                                end_exclusive = True
                                                split_vals[0] = split_vals[0].rsplit("exc", 1)[0]

                                            if qual_type == "Total Games Stat":
                                                the_val = ordinal_to_number(split_vals[0])
                                                if the_val > 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : 0,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                elif the_val < 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : 0,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                else:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                            else:
                                                the_val = ordinal_to_number(split_vals[0])
                                                if the_val > 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : float("inf"),
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                elif the_val < 0:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : -float("inf"),
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                                else:
                                                    qualifier_obj["values"].append({
                                                        "stat" : stat,
                                                        "start_val" : the_val,
                                                        "end_val" : the_val,
                                                        "end_exclusive" : end_exclusive
                                                    })
                                        else:
                                            end_exclusive = False
                                            if split_vals[1].endswith("exc"):
                                                end_exclusive = True
                                                split_vals[1] = split_vals[1].rsplit("exc", 1)[0]

                                            qualifier_obj["values"].append({
                                                "stat" : stat,
                                                "start_val" : ordinal_to_number(split_vals[0]),
                                                "end_val" : ordinal_to_number(split_vals[1]),
                                                "end_exclusive" : end_exclusive
                                            })
                            elif qualifier.startswith("event-stat:") or qualifier.startswith("event-stat-reversed:") or qualifier.startswith("event-stats:") or qualifier.startswith("event-stats-reversed:") or  qualifier.startswith("game-event-stat:") or qualifier.startswith("game-event-stat-reversed:") or qualifier.startswith("game-event-stats:") or qualifier.startswith("game-event-stats-reversed:") or qualifier.startswith("starting-event-stat:") or qualifier.startswith("starting-event-stat-reversed:") or qualifier.startswith("starting-event-stats:") or qualifier.startswith("starting-event-stats-reversed:") or  qualifier.startswith("starting-game-event-stat:") or qualifier.startswith("starting-game-event-stat-reversed:") or qualifier.startswith("starting-game-event-stats:") or qualifier.startswith("starting-game-event-stats-reversed:"):
                                if qualifier_str.startswith("event-stat:"):
                                    qual_str = "event-stat:"
                                    qual_type = "Event Stat"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("event-stat-reversed:"):
                                    qual_str = "event-stat-reversed:"
                                    qual_type = "Event Stat Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("event-stats:"):
                                    qual_str = "event-stats:"
                                    qual_type = "Event Stats"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("event-stats-reversed:"):
                                    qual_str = "event-stats-reversed:"
                                    qual_type = "Event Stats Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("game-event-stat:"):
                                    qual_str = "game-event-stat:"
                                    qual_type = "Game Event Stat"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("game-event-stat-reversed:"):
                                    qual_str = "game-event-stat-reversed:"
                                    qual_type = "Game Event Stat Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("game-event-stats:"):
                                    qual_str = "game-event-stats:"
                                    qual_type = "Game Event Stats"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("game-event-stats-reversed:"):
                                    qual_str = "game-event-stats-reversed:"
                                    qual_type = "Game Event Stats Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-event-stat:"):
                                    qual_str = "starting-event-stat:"
                                    qual_type = "Starting Event Stat"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-event-stat-reversed:"):
                                    qual_str = "starting-event-stat-reversed:"
                                    qual_type = "Starting Event Stat Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-event-stats:"):
                                    qual_str = "starting-event-stats:"
                                    qual_type = "Starting Event Stats"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-event-stats-reversed:"):
                                    qual_str = "starting-event-stats-reversed:"
                                    qual_type = "Starting Event Stats Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-game-event-stat:"):
                                    qual_str = "starting-game-event-stat:"
                                    qual_type = "Starting Game Event Stat"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-game-event-stat-reversed:"):
                                    qual_str = "starting-game-event-stat-reversed:"
                                    qual_type = "Starting Game Event Stat Reversed"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-game-event-stats:"):
                                    qual_str = "starting-game-event-stats:"
                                    qual_type = "Starting Game Event Stats"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("starting-game-event-stats-reversed:"):
                                    qual_str = "starting-game-event-stats-reversed:"
                                    qual_type = "Starting Game Event Stats Reversed"
                                    extra_stats.add("current-stats")
                                
                                split_vals = re.split(r"(?<!\\)\=", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])

                                stat = unescape_string(split_vals[0])

                                if stat in headers["Batter"] and stat not in headers["Pitcher"]:
                                    player_type["da_type"] = "Batter"
                                elif stat in headers["Pitcher"] and stat not in headers["Batter"]:
                                    player_type["da_type"] = "Pitcher"
                                
                                if stat in ["Pit"]:
                                    extra_stats.add("show-stat-pit")

                                if len(split_vals) == 1:
                                    time_start = 0
                                    time_end = 1
                                else:
                                    split_vals = re.split(r"(?<!\\)(?<!^)\-", split_vals[1], 1)
                                    if len(split_vals) == 1:
                                        time_start = 0
                                        time_end = ordinal_to_number(split_vals[0])
                                    else:
                                        time_start = ordinal_to_number(split_vals[0])
                                        time_end = ordinal_to_number(split_vals[1])
                                
                                if stat == "pit":
                                    stat = "Pit"
                                elif stat == "k":
                                    stat = "SO"
                                elif stat == "ip":
                                    frac, whole = math.modf(time_start)
                                    frac = round_value(frac * (10/3), 1)
                                    time_start = round_value(frac + whole, 2)
                                    frac, whole = math.modf(time_end)
                                    frac = round_value(frac * (10/3), 1)
                                    time_end = round_value(frac + whole, 2)
                                    stat = "IP"
                                else:
                                    stat = stat.upper()

                                if stat in headers["Batter"] and stat not in headers["Pitcher"]:
                                    player_type["da_type"] = "Batter"
                                elif stat in headers["Pitcher"] and stat not in headers["Batter"]:
                                    player_type["da_type"] = "Pitcher"
                                
                                if stat in ["Pit"]:
                                    extra_stats.add("show-stat-pit")

                                qualifier_obj["values"] = {
                                    "start_val" : time_start,
                                    "end_val" : time_end
                                }
                                qualifier_obj["stat"] = stat
                            elif qualifier_str.startswith("min-st:") or qualifier_str.startswith("min-stat:") or qualifier_str.startswith("max-st:") or qualifier_str.startswith("max-stat:") or qualifier_str.startswith("max-str:") or qualifier_str.startswith("max-streak:") or qualifier_str.startswith("max-stretch:") or qualifier_str.startswith("ctn-str:") or qualifier_str.startswith("count-streak:") or qualifier_str.startswith("q:") or qualifier_str.startswith("quickest:") or qualifier_str.startswith("s:") or qualifier_str.startswith("slowest:"):
                                if qualifier_str.startswith("min-st:"):
                                    qual_str = "min-st:"
                                    qual_type = "Min Stat"
                                elif qualifier_str.startswith("min-stat:"):
                                    qual_str = "min-stat:"
                                    qual_type = "Min Stat"
                                elif qualifier_str.startswith("max-st:"):
                                    qual_str = "max-st:"
                                    qual_type = "Max Stat"
                                elif qualifier_str.startswith("max-stat:"):
                                    qual_str = "max-stat:"
                                    qual_type = "Max Stat"
                                elif qualifier_str.startswith("max-str:"):
                                    qual_str = "max-str:"
                                    qual_type = "Max Streak"
                                elif qualifier_str.startswith("max-streak:"):
                                    qual_str = "max-streak:"
                                    qual_type = "Max Streak"
                                elif qualifier_str.startswith("max-stretch:"):
                                    qual_str = "max-stretch:"
                                    qual_type = "Max Stretch"
                                elif qualifier_str.startswith("ctn-str:"):
                                    qual_str = "cnt-str:"
                                    qual_type = "Count Streak"
                                elif qualifier_str.startswith("count-streak:"):
                                    qual_str = "count-streak:"
                                    qual_type = "Count Streak"
                                elif qualifier_str.startswith("quickest:"):
                                    qual_str = "quickest:"
                                    qual_type = "Quickest"
                                elif qualifier_str.startswith("q:"):
                                    qual_str = "q:"
                                    qual_type = "Quickest"
                                elif qualifier_str.startswith("slowest:"):
                                    qual_str = "slowest:"
                                    qual_type = "Slowest"
                                elif qualifier_str.startswith("s:"):
                                    qual_str = "s:"
                                    qual_type = "Slowest"

                                qualifier_obj["values"] = []
                                values = re.split(r"(?<!\\)\;", re.split(r"(?<!\\)" + qual_str, qualifier_str)[1])
                                for value in values:
                                    split_vals = re.split(r"(?<!\\)\:", value)
                                    stats = []
                                    for stat in re.split(r"(?<!\\)\~", split_vals[0]):
                                        start_val = 1
                                        end_val = float("inf")
                                        subbb_stat = re.split(r"(?<!\\)\=", stat)
                                        if len(subbb_stat) > 1:
                                            split_stats = re.split(r"(?<!\\)(?<!^)\-", subbb_stat[1], 1)
                                            stat = subbb_stat[0]
                                            if qual_type == "Quickest" or qual_type == "Slowest":
                                                start_val = ordinal_to_number(split_stats[0])
                                                end_val = float("inf")
                                            else:
                                                if len(split_stats) == 1:
                                                    start_val = ordinal_to_number(split_stats[0])
                                                    if start_val == 0:
                                                        end_val = start_val
                                                    else:
                                                        end_val = float("inf")
                                                else:
                                                    start_val = ordinal_to_number(split_stats[0])
                                                    end_val = ordinal_to_number(split_stats[1])
                                        stats.append({
                                            "stat" : unescape_string(stat),
                                            "start_val" : start_val,
                                            "end_val" : end_val
                                        })
                                    if len(split_vals) == 1:
                                        start_level = 1
                                        end_level = 1
                                        time_frame_obj = None
                                        stat_quals = None
                                    elif len(split_vals) == 2:
                                        try:
                                            start_level = 1
                                            end_level = 1
                                            stat_quals = None
                                            time_frame_obj = handle_stat_time_frame(split_vals[1])
                                        except Exception:
                                            time_frame_obj = None
                                            levels = re.split(r"(?<!\\)\-", split_vals[1])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[1])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = unescape_string(sub_split_vals[0])
                                                    sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                                    
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                    elif len(split_vals) == 3:
                                        try:
                                            time_frame_obj = handle_stat_time_frame(split_vals[1])
                                            levels = re.split(r"(?<!\\)\-", split_vals[2])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                                stat_quals = None
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[2])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = unescape_string(sub_split_vals[0])
                                                    sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                                    
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                        except Exception:
                                            time_frame_obj = None
                                            stat_quals = None
                                            levels = re.split(r"(?<!\\)\-", split_vals[1])
                                            try:
                                                if len(levels) == 1:
                                                    start_level = 1
                                                    end_level = ordinal_to_number(levels[0])
                                                else:
                                                    start_level = ordinal_to_number(levels[0])
                                                    end_level = ordinal_to_number(levels[1])
                                                stat_quals = None
                                            except Exception:
                                                start_level = 1
                                                end_level = 1
                                                values = re.split(r"(?<!\\)\~", split_vals[1])
                                                stat_quals = []
                                                for value in values:
                                                    sub_split_vals = re.split(r"(?<!\\)\=", value)
                                                    sub_stat = unescape_string(sub_split_vals[0])
                                                    sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                                    
                                                    if len(sub_split_vals) == 1:
                                                        start_val = ordinal_to_number(sub_split_vals[0])
                                                        if start_val > 0:
                                                            end_val = float("inf")
                                                        elif start_val < 0:
                                                            end_val = start_val
                                                            start_val = -float("inf")
                                                        else:
                                                            end_val = start_val
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : start_val,
                                                            "end_val" : end_val
                                                        })
                                                    else:
                                                        stat_quals.append({
                                                            "stat" : sub_stat,
                                                            "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                            "end_val" : ordinal_to_number(sub_split_vals[1])
                                                        })
                                    else:
                                        time_frame_obj = handle_stat_time_frame(split_vals[1])
                                        levels = re.split(r"(?<!\\)\-", split_vals[3])
                                        if len(levels) == 1:
                                            start_level = 1
                                            end_level = ordinal_to_number(levels[0])
                                        else:
                                            start_level = ordinal_to_number(levels[0])
                                            end_level = ordinal_to_number(levels[1])
                                        values = re.split(r"(?<!\\)\~", split_vals[2])
                                        stat_quals = []
                                        for value in values:
                                            sub_split_vals = re.split(r"(?<!\\)\=", value)
                                            sub_stat = unescape_string(sub_split_vals[0])
                                            sub_split_vals = re.split(r"(?<!\\)(?<!^)\-", sub_split_vals[1], 1)
                                            
                                            if len(sub_split_vals) == 1:
                                                start_val = ordinal_to_number(sub_split_vals[0])
                                                if start_val > 0:
                                                    end_val = float("inf")
                                                elif start_val < 0:
                                                    end_val = start_val
                                                    start_val = -float("inf")
                                                else:
                                                    end_val = start_val
                                                stat_quals.append({
                                                    "stat" : sub_stat,
                                                    "start_val" : start_val,
                                                    "end_val" : end_val
                                                })
                                            else:
                                                stat_quals.append({
                                                    "stat" : sub_stat,
                                                    "start_val" : ordinal_to_number(sub_split_vals[0]),
                                                    "end_val" : ordinal_to_number(sub_split_vals[1])
                                                })

                                    qualifier_obj["values"].append({
                                        "start_level" : start_level,
                                        "end_level" : end_level,
                                        "stat_quals" : stat_quals,
                                        "time_frame" : time_frame_obj,
                                        "stats" : stats
                                    })
                                
                            if qual_type:
                                if "Time Zone" in qual_type:
                                    new_values = []
                                    for old_time_zone in qualifier_obj["values"]:
                                        new_values.append(old_time_zone.lower().replace("_", ""))
                                    qualifier_obj["values"] = new_values
                                    
                                if not qual_type in qualifiers:
                                    qualifiers[qual_type] = []
                                qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                        
                        last_match = re.finditer(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:(?:playing|starting)-with|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|teammate-on-first|teammate-on-second|teammate-on-third|teammate-on-base|opponent-on-first|opponent-on-second|opponent-on-third|opponent-on-base|batting-against|pitching-against|facing|driven-in|batted-in|back-to-back-with|back-to-back|batting-in-front-of|batting-in-front|batting-ahead|batting-ahead-of|batting-behind|batting-behind-of|batting-next-to|caught-by|stealing-on|on-field-with|on-field-against))\b", time_frame)
                        for m in last_match:
                            qualifier_obj = {}
                            negate_str = m.group(1)
                            if negate_str:
                                qualifier_obj["negate"] = True
                            else:
                                qualifier_obj["negate"] = False

                            qualifier_str = m.group(2)
                            if qualifier_str.startswith("starting-"):
                                qualifier_str = qualifier_str.replace("starting-", "playing-", 1)
                                qualifiers["Start"] = []
                                qualifiers["Start"].append({
                                    "negate" : False
                                })

                            if qualifier_str.startswith("playing-with") or qualifier_str.startswith("playing-against") or qualifier_str.startswith("playing-same-game") or qualifier_str.startswith("starting-same-game:") or qualifier_str.startswith("prv-w") or qualifier_str.startswith("previous-playing-with") or qualifier_str.startswith("prv-a") or qualifier_str.startswith("previous-playing-against") or qualifier_str.startswith("upc-w") or qualifier_str.startswith("upcoming-playing-with") or qualifier_str.startswith("upc-a") or qualifier_str.startswith("upcoming-playing-against") or qualifier_str.startswith("playing-same-opponent")  or qualifier_str.startswith("playing-same-opponents") or qualifier_str.startswith("playing-same-date") or qualifier_str.startswith("playing-same-dates") or qualifier_str.startswith("batting-against") or qualifier_str.startswith("pitching-against") or qualifier_str.startswith("facing") or qualifier_str.startswith("driven-in") or qualifier_str.startswith("batted-in") or qualifier_str.startswith("back-to-back") or qualifier_str.startswith("back-to-back-with") or qualifier_str.startswith("batting-ahead") or qualifier_str.startswith("batting-ahead-of") or qualifier_str.startswith("batting-in-front-of") or qualifier_str.startswith("batting-in-front") or qualifier_str.startswith("batting-behind") or qualifier_str.startswith("batting-behind-of") or qualifier_str.startswith("batting-next-to") or qualifier_str.startswith("caught-by") or qualifier_str.startswith("stealing-on") or qualifier_str.startswith("on-field-with") or qualifier_str.startswith("on-field-against"):
                                if qualifier_str.startswith("playing-with"):
                                    qual_str = "playing-with"
                                    qual_type = "Playing With"
                                elif qualifier_str.startswith("playing-against"):
                                    qual_str = "playing-against"
                                    qual_type = "Playing Against"
                                elif qualifier_str.startswith("prv-w"):
                                    qual_str = "prv-w"
                                    qual_type = "Previous Playing With"
                                elif qualifier_str.startswith("previous-playing-with"):
                                    qual_str = "previous-playing-with"
                                    qual_type = "Previous Playing With"
                                elif qualifier_str.startswith("prv-a"):
                                    qual_str = "playing-against"
                                    qual_type = "Previous Playing Against"
                                elif qualifier_str.startswith("previous-playing-against"):
                                    qual_str = "previous-playing-against"
                                    qual_type = "Previous Playing Against"
                                elif qualifier_str.startswith("upc-w"):
                                    qual_str = "playing-against"
                                    qual_type = "Upcoming Playing With"
                                elif qualifier_str.startswith("upcoming-playing-with"):
                                    qual_str = "upcoming-playing-with"
                                    qual_type = "Upcoming Playing With"
                                elif qualifier_str.startswith("upc-a"):
                                    qual_str = "upc-a"
                                    qual_type = "Upcoming Playing Against"
                                elif qualifier_str.startswith("upcoming-playing-against"):
                                    qual_str = "upcoming-playing-against"
                                    qual_type = "Upcoming Playing Against"
                                elif qualifier_str.startswith("playing-same-opponent"):
                                    qual_str = "playing-same-opponent"
                                    qual_type = "Playing Same Opponents"
                                elif qualifier_str.startswith("playing-same-opponents"):
                                    qual_str = "playing-same-opponents"
                                    qual_type = "Playing Same Opponents"
                                elif qualifier_str.startswith("playing-same-date"):
                                    qual_str = "playing-same-date"
                                    qual_type = "Playing Same Date"
                                elif qualifier_str.startswith("playing-same-dates"):
                                    qual_str = "playing-same-dates"
                                    qual_type = "Playing Same Date"
                                elif qualifier_str.startswith("batting-against"):
                                    qual_str = "batting-against"
                                    qual_type = "Batting Against"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("pitching-against"):
                                    qual_str = "pitching-against"
                                    qual_type = "Pitching Against"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("facing"):
                                    qual_str = "facing"
                                    qual_type = "Facing"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("driven-in"):
                                    qual_str = "driven-in"
                                    qual_type = "Driven In"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                    extra_stats.add("hide-rate")
                                    extra_stats.add("show-stat-drivenin")
                                    extra_stats.add("show-stat-gwdrivenin")
                                elif qualifier_str.startswith("batted-in"):
                                    qual_str = "batted-in"
                                    qual_type = "Batted In"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                    extra_stats.add("hide-rate")
                                elif qualifier_str.startswith("back-to-back-with"):
                                    qual_str = "back-to-back-with"
                                    qual_type = "Back To Back With"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                    extra_stats.add("hide-rate")
                                elif qualifier_str.startswith("back-to-back"):
                                    qual_str = "back-to-back"
                                    qual_type = "Back To Back With"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("no-steals")
                                    extra_stats.add("hide-rate")
                                elif qualifier_str.startswith("batting-behind"):
                                    qual_str = "batting-behind:"
                                    qual_type = "Batting Behind"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batting-behind-of"):
                                    qual_str = "batting-behind-of"
                                    qual_type = "Batting Behind"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batting-in-front-of"):
                                    qual_str = "batting-in-front-of"
                                    qual_type = "Batting In Front Of"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batting-in-front"):
                                    qual_str = "batting-in-front"
                                    qual_type = "Batting In Front Of"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batting-ahead"):
                                    qual_str = "batting-ahead"
                                    qual_type = "Batting In Front Of"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batting-ahead-of"):
                                    qual_str = "batting-ahead-of"
                                    qual_type = "Batting In Front Of"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("batting-next-to"):
                                    qual_str = "batting-next-to"
                                    qual_type = "Batting Next To"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("caught-by"):
                                    qual_str = "caught-by"
                                    qual_type = "Caught By"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("stealing-on"):
                                    qual_str = "stealing-on"
                                    qual_type = "Stealing On"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                    extra_stats.add("stolen-base")
                                elif qualifier_str.startswith("on-field-with"):
                                    qual_str = "on-field-with"
                                    qual_type = "On Field With"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("on-field-against"):
                                    qual_str = "on-field-against"
                                    qual_type = "On Field Against"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("teammate-on-first"):
                                    qual_str = "teammate-on-first"
                                    qual_type = "Teammate On First"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("teammate-on-second"):
                                    qual_str = "teammate-on-second"
                                    qual_type = "Teammate On Second"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("teammate-on-third"):
                                    qual_str = "teammate-on-third"
                                    qual_type = "Teammate On Third"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("teammate-on-base"):
                                    qual_str = "teammate-on-base"
                                    qual_type = "Teammate On Base"
                                    player_type["da_type"] = "Batter"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-on-first"):
                                    qual_str = "opponent-on-first"
                                    qual_type = "Opponent On First"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-on-second"):
                                    qual_str = "opponent-on-second"
                                    qual_type = "Opponent On Second"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-on-third"):
                                    qual_str = "opponent-on-third"
                                    qual_type = "Opponent On Third"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("opponent-on-base"):
                                    qual_str = "opponent-on-base"
                                    qual_type = "Opponent On Base"
                                    player_type["da_type"] = "Pitcher"
                                    extra_stats.add("current-stats")
                                elif qualifier_str.startswith("playing-same-game"):
                                    qual_str = "playing-same-game:"
                                    qual_type = "Playing Same Game"

                            qualifier_obj["time_frame_str"] = re.sub(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:(?:playing|starting)-with|(?:playing|starting)-against|(?:playing|starting)-same-game|prv-w|previous-playing-with|prv-a|previous-playing-against|upc-w|upcoming-playing-with|upc-a|upcoming-playing-against|(?:playing|starting)-same-opponents?|(?:playing|starting)-same-dates?|batting-against|pitching-against|facing|driven-in|batted-in|back-to-back-with|back-to-back|batting-in-front-of|batting-in-front|batting-ahead|batting-ahead-of|batting-behind|batting-behind-of|batting-next-to|caught-by|stealing-on|on-field-with|on-field-against|-?starts?|-?started|-?starting|-?ignore-starts?|-?ignore-started?|-?ignore-starting))(?!:)\b", "", og_time_str)
                            qualifier_obj["time_frame_str"] = re.sub(r"\b(no(?:t|n)?(?: |-))?(?:only ?)?((?:qual-sub-query):(?<!\\)\(.*?(?<!\\)\))", "", qualifier_obj["time_frame_str"])

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()

                        last_matches = re.finditer(r"\b(no(?:t|n)?(?: |-))?(first|1st|last|this|past)?(?: ?(\S*) (starting-)?(game-)?(innings?-pitched|inning|ip|plate-appearance|pa|batters?-faced|bf|at-bat|ab|pitche?|pit|" + "|".join(non_rate_stats_lower) + r")s?)\b", time_frame)
                        for last_match in last_matches:
                            compare_type = last_match.group(2)
                            time_unit = last_match.group(3)
                            if time_unit in ["first", "1st", "last", "this", "past"]:
                                compare_type = time_unit
                                time_unit = "1"
                            if not time_unit.strip():
                                time_start = 0
                                time_end = 1
                            else:
                                time_unit_spl = re.split(r"(?<!\\)-", time_unit)
                                if len(time_unit_spl) > 1:
                                    time_unit = time_unit_spl
                                    time_start = ordinal_to_number(time_unit[0])
                                    time_end = ordinal_to_number(time_unit[1])
                                else:
                                    time_start = 0
                                    time_end = ordinal_to_number(time_unit)
                            qual_type = last_match.group(6)

                            stat = None
                            if qual_type == "plate-appearance":
                                stat = "PA"
                            elif qual_type == "batter-faced" or qual_type == "batters-faced":
                                stat = "BF"
                            elif qual_type.startswith("pitch") or qual_type == "pit":
                                stat = "Pit"
                            elif qual_type == "at-bat":
                                stat = "AB"
                            elif qual_type == "k":
                                stat = "SO"
                            elif "inning" in qual_type or qual_type == "ip":
                                frac, whole = math.modf(time_start)
                                frac = round_value(frac * (10/3), 1)
                                time_start = round_value(frac + whole, 2)
                                frac, whole = math.modf(time_end)
                                frac = round_value(frac * (10/3), 1)
                                time_end = round_value(frac + whole, 2)
                                stat = "IP"
                            else:
                                for pot_stat in non_rate_stats:
                                    if pot_stat.lower() == qual_type:
                                        stat = pot_stat
                                        break

                            if stat in headers["Batter"] and stat not in headers["Pitcher"]:
                                player_type["da_type"] = "Batter"
                            elif stat in headers["Pitcher"] and stat not in headers["Batter"]:
                                player_type["da_type"] = "Pitcher"
                            
                            if stat in count_stats:
                                extra_stats.add("statcast")
                            elif stat in ["Pit"]:
                                extra_stats.add("show-stat-pit")

                            qual_type_to_use = "Event Stat"

                            if compare_type and compare_type not in ("first", "1st"):
                                qual_type_to_use += " Reversed"

                            if last_match.group(5):
                                qual_type_to_use = "Game " + qual_type_to_use
                            if last_match.group(4):
                                qual_type_to_use = "Starting " + qual_type_to_use

                            extra_stats.add("current-stats")

                            qualifier_obj = {}
                            qualifier_obj["negate"] = bool(last_match.group(1))
                            qualifier_obj["values"] = {
                                "start_val" : time_start,
                                "end_val" : time_end
                            }
                            qualifier_obj["stat"] = stat

                            if not qual_type_to_use in qualifiers:
                                qualifiers[qual_type_to_use] = []
                            qualifiers[qual_type_to_use].append(qualifier_obj)

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        last_matches = re.finditer(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?((?:exact(?: |-)days?|exact(?: |-)weeks?|exact(?: |-)months?|exact(?: |-)years?|(?:exact(?: |-))?hours?)|(?:exact(?: |-))?minutes?|(?:exact(?: |-))?seconds?)", time_frame)
                        for last_match in last_matches:
                            compare_type = last_match.group(2)
                            if not compare_type:
                                compare_type = "last"

                            if compare_type == "1st":
                                compare_type = "first"

                            qual_type = "Event DateTime"

                            unit = last_match.group(4)
                            time_unit = last_match.group(3)
                            if not time_unit:
                                time_unit = 1
                            else:
                                time_unit = ordinal_to_number(time_unit)

                            extra_stats.add("current-stats")

                            days = 0
                            weeks = 0
                            months = 0
                            years = 0
                            hours = 0
                            minutes = 0
                            seconds = 0

                            if "week" in unit:
                                weeks = time_unit
                            elif "month" in unit:
                                months = time_unit
                            elif "year" in unit:
                                years = time_unit
                            elif "day" in unit:
                                days = time_unit
                            elif "hour" in unit:
                                hours = time_unit
                            elif "minute" in unit:
                                minutes = time_unit
                            else:
                                seconds = time_unit

                            if compare_type == "first":
                                time_start = datetime.datetime.min.replace(microsecond=0)
                                time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days, hours=hours, minutes=minutes, seconds=seconds - 1)
                            else:
                                time_end = datetime.datetime.today().replace(microsecond=0)
                                time_start = (time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days, hours=hours, minutes=minutes, seconds=seconds - 1)).replace(microsecond=0)

                            qualifier_obj = {}
                            qualifier_obj["negate"] = bool(last_match.group(1))
                            qualifier_obj["values"] = {
                                "start_val" : time_start,
                                "end_val" : time_end,
                                "time_zone" : str(get_localzone())
                            }

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            qualifiers[qual_type].append(qualifier_obj)
                            
                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                    
                        last_matches = list(re.finditer(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?(?:season(?:[- ]))?(games?)", time_frame))
                        sub_last_match = re.search(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)( ([\w-]+)( reversed?)?)?", time_frame)
                        if ("Start" in qualifiers or not playoffs_set) and (not sub_last_match or sub_last_match.group(3).endswith("to") or sub_last_match.group(3).endswith("yester")):
                            last_matches += list(re.finditer(r"(no(?:t|n)?(?: |-))?(first|1st|last|this|past) ?(\S*)", time_frame))
                        for last_match in last_matches:
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester") and (last_match.group(2) or not re.search(r"(no(?:t|n)?(?: |-))?(?:season(?:[- ]))?games? ([\w-]+)( reversed?)?", time_frame)):
                                compare_type = last_match.group(2)
                                skip_time = False
                                if not compare_type or not compare_type.strip():
                                    if last_match.group(3) == "first" or last_match.group(3) == "1st" or last_match.group(3) == "this" or last_match.group(3) == "past" or last_match.group(3) == "last":
                                        compare_type = last_match.group(3)
                                        skip_time = True
                                    else:
                                        compare_type = "special"

                                if compare_type == "1st":
                                    compare_type = "first"

                                if not skip_time:
                                    time_unit = last_match.group(3)
                                    if time_unit and "season" not in time_unit and "game" not in time_unit:
                                        time_unit = ordinal_to_number(time_unit)
                                        if time_unit < 1:
                                            time_unit = 1
                                    else:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                
                                if compare_type == "special":
                                    qual_type = "Career Game"
                                    qualifier_obj = {}
                                    qualifier_obj["negate"] = bool(last_match.group(1))
                                    qualifier_obj["values"] = {
                                        "start_val" : time_unit,
                                        "end_val" : time_unit
                                    }
                                    if not qual_type in qualifiers:
                                        qualifiers[qual_type] = []
                                    qualifiers[qual_type].append(qualifier_obj)
                                else:
                                    qual_type = "Games"
                                    if "season" in last_match.group(0):
                                        qual_type = "Season Games"
                                    if not qual_type in qualifiers:
                                        qualifiers[qual_type] = []

                                    qualifiers[qual_type] = {
                                        "compare_type" : compare_type,
                                        "time_unit" : time_unit,
                                        "negate" : bool(last_match.group(1))
                                    }

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_matches = re.finditer(r"(no(?:t|n)?(?: |-))?(?:season(?:[- ]))?games? ([\w-]+)( reversed?)?", time_frame)
                        for last_match in last_matches:
                            time_unit = re.split(r"(?<!\\)-", last_match.group(2))
                            if len(time_unit) == 1:
                                time_start = ordinal_to_number(time_unit[0])
                                time_end = ordinal_to_number(time_unit[0])
                            else:
                                time_start = ordinal_to_number(time_unit[0])
                                time_end = ordinal_to_number(time_unit[1])

                            qual_type = "Games"
                            if "season" in last_match.group(0):
                                qual_type = "Season Games"

                            if not qual_type in qualifiers:
                                qualifiers[qual_type] = []
                            
                            reverse = False
                            if last_match.group(3):
                                reverse = True

                            qualifiers[qual_type] = {
                                "start_val" : time_start,
                                "end_val" : time_end,
                                "reverse" : reverse,
                                "negate" : bool(last_match.group(1))
                            }

                            time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_matches = re.finditer(r"(no(?:t|n)?(?: |-))(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)( ([\w-]+)( reversed?)?)?", time_frame)
                        for last_match in last_matches:
                            unit = None
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester"):
                                compare_type = last_match.group(2)
                                if not compare_type or not compare_type.strip():
                                    if unit == "season" or (last_match.group(4) and (last_match.group(4).startswith("season") or last_match.group(3).startswith("year"))):
                                        compare_type = "special"
                                    else:
                                        compare_type = "last"

                                if compare_type == "1st":
                                    compare_type = "first"

                                time_unit = last_match.group(3)
                                if time_unit and not ("calendar" in time_unit or "date" in time_unit):
                                    time_unit = ordinal_to_number(time_unit)
                                    if time_unit < 1:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                if not unit:
                                    unit = last_match.group(4)
                                if ("calendar" in last_match.group(3) or "date" in last_match.group(3)):
                                    unit = last_match.group(3) + unit
                                if unit.startswith("season"):
                                    if len(last_match.groups()) > 3 and last_match.group(6):
                                        time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                        if len(time_unit) == 1:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[0])
                                        else:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[1])
                                    else:
                                        if compare_type == "first":
                                            time_start = time_unit
                                        else:
                                            time_end = time_unit
                                else:
                                    days = 0
                                    weeks = 0
                                    months = 0
                                    years = 0

                                    is_seasons = False
                                    if "week" in unit:
                                        weeks = time_unit
                                    elif "month" in unit:
                                        months = time_unit
                                    elif "year" in unit:
                                        if "date" in unit or "calendar" in unit:
                                            years = time_unit
                                        else:
                                            if len(last_match.groups()) > 3 and last_match.group(6):
                                                time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                                time_start = -float("inf")
                                                time_end = float("inf")
                                                if len(time_unit) == 1:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[0])
                                                else:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[1])
                                            else:
                                                if compare_type == "first":
                                                    time_start = time_unit
                                                else:
                                                    time_end = time_unit
                                            is_seasons = True
                                    else:
                                        days = time_unit

                                    if not is_seasons:
                                        if compare_type == "first":
                                            time_start = datetime.date.min
                                            time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)

                                            if "week" in unit:
                                                time_end.seconds = 1
                                                time_end.minutes = weeks
                                            elif "month" in unit:
                                                time_end.seconds = 2
                                                time_end.minutes = months
                                            elif "year" in unit:
                                                time_end.seconds = 3
                                                time_end.minutes = years
                                            else:
                                                time_end.minutes = days

                                            if "calendar" in unit:
                                                time_end.microseconds = 1
                                        else:
                                            time_end = datetime.date.today()
                                            if "calendar" in unit:
                                                if "week" in unit:
                                                    time_end = time_end + datetime.timedelta(days=6 - time_end.weekday())
                                                    if datetime.date.today().weekday() <= 3:
                                                        time_end -= dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                elif "month" in unit:
                                                    if datetime.date.today().day > 15:
                                                        time_end = datetime.datetime(time_end.year, time_end.month, calendar.monthrange(time_end.year, time_end.month)[1]).date()
                                                    else:
                                                        if time_end.month == 1:
                                                            time_end = datetime.datetime(time_end.year - 1, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                        else:
                                                            time_end = datetime.datetime(time_end.year, time_end.month - 1, calendar.monthrange(time_end.year, time_end.month - 1)[1]).date()
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    original_day = time_start.day
                                                    time_start = time_start.replace(day=1)
                                                    if original_day > 15:
                                                        if time_start.month == 12:
                                                            time_start = time_start.replace(month=1, year=time_start.year + 1)
                                                        else:
                                                            time_start = time_start.replace(month=(time_start.month + 1))
                                                elif "year" in unit:
                                                    time_end = datetime.datetime(time_end.year, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                    if datetime.date.today().month <= 6:
                                                        time_end -=- dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                else:
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                            else:
                                                time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                
                                qualifier_obj = {}
                                qualifier_obj["negate"] = True
                                qual_str = "Season Index" if (unit.startswith("season") or time_frame_type == "special-qual") else "Dates"
                                if qual_str == "Season Index":
                                    qual_str = "Season Index Reversed" if time_start == None and compare_type != "special" else "Season Index"
                                    if not time_start or not time_end:    
                                        time_end = time_start if time_start else time_end
                                        if compare_type != "special":
                                            time_start = 1
                                        else:
                                            time_start = time_end
                                    qualifier_obj["values"] = {
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }
                                else:
                                    qualifier_obj["values"] = [{
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }]

                                if not qual_str in qualifiers:
                                    qualifiers[qual_str] = []
                                qualifiers[qual_str].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                        
                        last_matches = re.finditer(r"(no(?:t|n)?(?: |-))(first|1st|last|this|past) ?(\S*)", time_frame)
                        for last_match in last_matches:
                            unit = "season"
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester") and playoffs_set:
                                time_frame_type = "special-qual"
                            if last_match and not last_match.group(3).endswith("to") and not last_match.group(3).endswith("yester"):
                                compare_type = last_match.group(2)
                                if not compare_type or not compare_type.strip():
                                    if unit == "season" or (last_match.group(4) and (last_match.group(4).startswith("season") or last_match.group(3).startswith("year"))):
                                        compare_type = "special"
                                    else:
                                        compare_type = "last"

                                if compare_type == "1st":
                                    compare_type = "first"

                                time_unit = last_match.group(3)
                                if time_unit and not ("calendar" in time_unit or "date" in time_unit):
                                    time_unit = ordinal_to_number(time_unit)
                                    if time_unit < 1:
                                        time_unit = 1
                                else:
                                    time_unit = 1
                                if not unit:
                                    unit = last_match.group(4)
                                if ("calendar" in last_match.group(3) or "date" in last_match.group(3)):
                                    unit = last_match.group(3) + unit
                                if unit.startswith("season"):
                                    if len(last_match.groups()) > 3 and last_match.group(6):
                                        time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                        if len(time_unit) == 1:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[0])
                                        else:
                                            time_start = ordinal_to_number(time_unit[0])
                                            time_end = ordinal_to_number(time_unit[1])
                                    else:
                                        if compare_type == "first":
                                            time_start = time_unit
                                        else:
                                            time_end = time_unit
                                else:
                                    days = 0
                                    weeks = 0
                                    months = 0
                                    years = 0

                                    is_seasons = False
                                    if "week" in unit:
                                        weeks = time_unit
                                    elif "month" in unit:
                                        months = time_unit
                                    elif "year" in unit:
                                        if "date" in unit or "calendar" in unit:
                                            years = time_unit
                                        else:
                                            if len(last_match.groups()) > 3 and last_match.group(6):
                                                time_unit = re.split(r"(?<!\\)-", last_match.group(6))
                                                time_start = -float("inf")
                                                time_end = float("inf")
                                                if len(time_unit) == 1:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[0])
                                                else:
                                                    time_start = ordinal_to_number(time_unit[0])
                                                    time_end = ordinal_to_number(time_unit[1])
                                            else:
                                                if compare_type == "first":
                                                    time_start = time_unit
                                                else:
                                                    time_end = time_unit
                                            is_seasons = True
                                    else:
                                        days = time_unit

                                    if not is_seasons:
                                        if compare_type == "first":
                                            time_start = datetime.date.min
                                            time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)

                                            if "week" in unit:
                                                time_end.seconds = 1
                                                time_end.minutes = weeks
                                            elif "month" in unit:
                                                time_end.seconds = 2
                                                time_end.minutes = months
                                            elif "year" in unit:
                                                time_end.seconds = 3
                                                time_end.minutes = years
                                            else:
                                                time_end.minutes = days

                                            if "calendar" in unit:
                                                time_end.microseconds = 1
                                        else:
                                            time_end = datetime.date.today()
                                            if "calendar" in unit:
                                                if "week" in unit:
                                                    time_end = time_end + datetime.timedelta(days=6 - time_end.weekday())
                                                    if datetime.date.today().weekday() <= 3:
                                                        time_end -= dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                elif "month" in unit:
                                                    if datetime.date.today().day > 15:
                                                        time_end = datetime.datetime(time_end.year, time_end.month, calendar.monthrange(time_end.year, time_end.month)[1]).date()
                                                    else:
                                                        if time_end.month == 1:
                                                            time_end = datetime.datetime(time_end.year - 1, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                        else:
                                                            time_end = datetime.datetime(time_end.year, time_end.month - 1, calendar.monthrange(time_end.year, time_end.month - 1)[1]).date()
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    original_day = time_start.day
                                                    time_start = time_start.replace(day=1)
                                                    if original_day > 15:
                                                        if time_start.month == 12:
                                                            time_start = time_start.replace(month=1, year=time_start.year + 1)
                                                        else:
                                                            time_start = time_start.replace(month=(time_start.month + 1))
                                                elif "year" in unit:
                                                    time_end = datetime.datetime(time_end.year, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                    if datetime.date.today().month <= 6:
                                                        time_end -=- dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                else:
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                            else:
                                                time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                
                                qualifier_obj = {}
                                qualifier_obj["negate"] = True
                                qual_str = "Season Index" if (unit.startswith("season") or time_frame_type == "special-qual") else "Dates"
                                if qual_str == "Season Index":
                                    qual_str = "Season Index Reversed" if time_start == None and compare_type != "special" else "Season Index"
                                    if not time_start or not time_end:
                                        time_end = time_start if time_start else time_end
                                        if compare_type != "special":
                                            time_start = 1
                                        else:
                                            time_start = time_end
                                    qualifier_obj["values"] = {
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }
                                else:
                                    qualifier_obj["values"] = [{
                                        "start_val" : time_start,
                                        "end_val" : time_end
                                    }]

                                if not qual_str in qualifiers:
                                    qualifiers[qual_str] = []
                                qualifiers[qual_str].append(qualifier_obj)

                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                        time_frame_type = "date"
                        if not time_frame:
                            time_start = datetime.date.min.year
                            time_end = current_season
                        else:
                            last_matches = re.finditer(r"\b(?:years?|seasons?)(?: |-)([\w-]+)((?: |-)reversed?)?\b", time_frame)
                            for last_match in last_matches:
                                time_unit = re.split(r"(?<!\\)-", last_match.group(1))
                                try:
                                    if len(time_unit) == 1:
                                        time_start = ordinal_to_number(time_unit[0])
                                        time_end = ordinal_to_number(time_unit[0])
                                    else:
                                        time_start = ordinal_to_number(time_unit[0])
                                        time_end = ordinal_to_number(time_unit[1])
                                except Exception:
                                    continue

                                time_frame_type = "season-range"
                                if last_match.group(2):
                                    time_frame_type = "season-range-reversed"
                                
                                time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()

                            while True:
                                unit = None
                                last_match = re.search(r"\b(first|1st|last|this|past)? ?(\S*)? ?((?:(?:calendar|date)(?: |-))?days?|(?:(?:calendar|date)(?: |-))?weeks?|(?:(?:calendar|date)(?: |-))?months?|(?:(?:calendar|date)(?: |-))?years?|seasons?)\b", time_frame)
                                if not last_match:
                                    last_match = re.search(r"\b(first|1st|last|this|past) ?(\S*)\b", time_frame)
                                    unit = "season"
                                    if last_match and not last_match.group(2).endswith("to") and not last_match.group(2).endswith("yester") and playoffs_set:
                                        time_frame_type = "special-qual"
                                if last_match and not last_match.group(2).endswith("to") and not last_match.group(2).endswith("yester"):
                                    compare_type = last_match.group(1)
                                    if not compare_type or not compare_type.strip():
                                        if unit == "season" or (last_match.group(3) and (last_match.group(3).startswith("season") or last_match.group(3).startswith("year"))):
                                            compare_type = "special"
                                        else:
                                            compare_type = "last"

                                    if compare_type == "1st":
                                        compare_type = "first"

                                    time_unit = last_match.group(2)
                                    if time_unit and not ("calendar" in time_unit or "date" in time_unit):
                                        time_unit = ordinal_to_number(time_unit)
                                        if time_unit < 1:
                                            time_unit = 1
                                    else:
                                        time_unit = 1
                                    if not unit:
                                        unit = last_match.group(3)
                                    if ("calendar" in last_match.group(2) or "date" in last_match.group(2)):
                                        unit = last_match.group(2) + unit
                                    if unit.startswith("season"):
                                        if time_frame_type != "special-qual":
                                            time_frame_type = "season"
                                        if compare_type == "first":
                                            time_start = time_unit
                                        else:
                                            time_end = time_unit
                                    else:
                                        days = 0
                                        weeks = 0
                                        months = 0
                                        years = 0

                                        is_seasons = False
                                        if "week" in unit:
                                            weeks = time_unit
                                        elif "month" in unit:
                                            months = time_unit
                                        elif "year" in unit:
                                            if "date" in unit or "calendar" in unit:
                                                years = time_unit
                                            else:
                                                time_frame_type = "season"
                                                if compare_type == "first":
                                                    time_start = time_unit
                                                else:
                                                    time_end = time_unit
                                                is_seasons = True
                                        else:
                                            days = time_unit

                                        if not is_seasons:
                                            if compare_type == "first":
                                                time_start = datetime.date.min
                                                time_end = dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)

                                                if "week" in unit:
                                                    time_end.seconds = 1
                                                    time_end.minutes = weeks
                                                elif "month" in unit:
                                                    time_end.seconds = 2
                                                    time_end.minutes = months
                                                elif "year" in unit:
                                                    time_end.seconds = 3
                                                    time_end.minutes = years
                                                else:
                                                    time_end.minutes = days

                                                if "calendar" in unit:
                                                    time_end.microseconds = 1
                                            else:
                                                time_end = datetime.date.today()
                                                if "calendar" in unit:
                                                    if "week" in unit:
                                                        time_end = time_end + datetime.timedelta(days=6 - time_end.weekday())
                                                        if datetime.date.today().weekday() <= 3:
                                                            time_end -= dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                                        time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    elif "month" in unit:
                                                        if datetime.date.today().day > 15:
                                                            time_end = datetime.datetime(time_end.year, time_end.month, calendar.monthrange(time_end.year, time_end.month)[1]).date()
                                                        else:
                                                            if time_end.month == 1:
                                                                time_end = datetime.datetime(time_end.year - 1, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                            else:
                                                                time_end = datetime.datetime(time_end.year, time_end.month - 1, calendar.monthrange(time_end.year, time_end.month - 1)[1]).date()
                                                        time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                        original_day = time_start.day
                                                        time_start = time_start.replace(day=1)
                                                        if original_day > 15:
                                                            if time_start.month == 12:
                                                                time_start = time_start.replace(month=1, year=time_start.year + 1)
                                                            else:
                                                                time_start = time_start.replace(month=(time_start.month + 1))
                                                    elif "year" in unit:
                                                        time_end = datetime.datetime(time_end.year, 12, calendar.monthrange(time_end.year, 12)[1]).date()
                                                        if datetime.date.today().month <= 6:
                                                            time_end -=- dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                                        time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                    else:
                                                        time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                                else:
                                                    time_start = time_end - dateutil.relativedelta.relativedelta(years=years, months=months, weeks=weeks, days=days - 1)
                                    
                                    if compare_type == "special" and time_frame_type == "season":
                                        time_frame_type = "season-range"
                                    
                                    if time_frame_type == "special-qual":
                                        qualifier_obj = {}
                                        qualifier_obj["negate"] = False
                                        qual_str = "Season Reversed" if time_start == None else "Season"
                                        if not time_start or not time_end:    
                                            time_end = time_start if time_start else time_end
                                            time_start = 1
                                        qualifier_obj["values"] = {
                                            "start_val" : time_start,
                                            "end_val" : time_end
                                        }

                                        if not qual_str in qualifiers:
                                            qualifiers[qual_str] = []
                                        qualifiers[qual_str].append(qualifier_obj)

                                        time_frame_type = "date"
                                        time_start = datetime.date.min.year
                                        time_end = current_season

                                    time_frame = re.sub(r"\s+", " ", time_frame.replace(last_match.group(0), "", 1)).strip()
                                else:
                                    break
                            
                            if time_frame:
                                replace_first_year = {
                                    "replace" : False
                                }

                                while True:
                                    m = re.search(r"no(?:t|n)?(?: |-)(.+)(?=no(?:t|n)?(?: |-)(?:.+))", time_frame)
                                    if not m:
                                        m = re.search(r"no(?:t|n)?(?: |-)(.+)", time_frame)
                                    if not m:
                                        break

                                    date_str = m.group(1)
                                    find_all_match = tuple(re.finditer(r"(?<!\\)-", date_str))
                                    if len(find_all_match) == 5:
                                        match_span = find_all_match[2].span()[0]
                                        time_frame_range = [date_str[:match_span], date_str[match_span + 1:]]
                                    else:
                                        time_frame_range = re.split(r"(?<!\\)\bto\b", date_str)
                                    try:
                                        sub_time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)
                                    except ValueError:
                                        time_frame_range = re.split(r"(?<!\\)-", date_str)
                                        sub_time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)

                                    if len(time_frame_range) == 2:
                                        sub_time_end = handle_string_year(time_frame_range[1].strip(), False, replace_first_year)
                                    else:
                                        sub_time_end = sub_time_start
                                    
                                    if isinstance(sub_time_start, int) and not isinstance(sub_time_end, int):
                                        sub_time_start = datetime.date(year=sub_time_start, month=1, day=1)
                                    elif isinstance(sub_time_end, int) and not isinstance(sub_time_start, int):
                                        sub_time_end = datetime.date(year=sub_time_end, month=12, day=31)

                                    qualifier_obj = {}
                                    qualifier_obj["negate"] = True
                                    qual_str = "Year" if isinstance(sub_time_start, int) else "Dates"
                                    if qual_str == "Year":
                                        qualifier_obj["values"] = {
                                            "start_val" : sub_time_start,
                                            "end_val" : sub_time_end
                                        }
                                    else:
                                        qualifier_obj["values"] = [{
                                            "start_val" : sub_time_start,
                                            "end_val" : sub_time_end
                                        }]

                                    if not qual_str in qualifiers:
                                        qualifiers[qual_str] = []
                                    qualifiers[qual_str].append(qualifier_obj)

                                    time_frame = re.sub(r"\s+", " ", time_frame.replace(m.group(0), "", 1)).strip()
                                
                                if time_start == None and time_end == None:
                                    time_start = datetime.date.min.year
                                    time_end = current_season

                                if time_frame:
                                    find_all_match = tuple(re.finditer(r"(?<!\\)-", time_frame))
                                    if len(find_all_match) == 5:
                                        match_span = find_all_match[2].span()[0]
                                        time_frame_range = [time_frame[:match_span], time_frame[match_span + 1:]]
                                    else:
                                        time_frame_range = re.split(r"(?<!\\)\bto\b", time_frame)
                                    try:
                                        time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)
                                    except ValueError:
                                        time_frame_range = re.split(r"(?<!\\)-", time_frame)
                                        time_start = handle_string_year(time_frame_range[0].strip(), True, replace_first_year)

                                    if len(time_frame_range) == 2:
                                        time_end = handle_string_year(time_frame_range[1].strip(), False, replace_first_year)
                                    else:
                                        time_end = time_start
                                        if not isinstance(time_start, int):
                                            if not playoffs:
                                                playoffs = "Include"
                                    
                                    if isinstance(time_start, int) and not isinstance(time_end, int):
                                        time_start = datetime.date(year=time_start, month=1, day=1)
                                    elif isinstance(time_end, int) and not isinstance(time_start, int):
                                        time_end = datetime.date(year=time_end, month=12, day=31)

                        da_time_frames.append({
                            "time_start" : time_start,
                            "time_end" : time_end,
                            "type" : time_frame_type,
                            "add_type" : add_type, 
                            "playoffs" : playoffs if playoffs != "No" else None,
                            "qualifiers" : qualifiers
                        })
                    sub_parsed_time_frames.append(da_time_frames)
                parse_time_frames.append(sub_parsed_time_frames)
        else:
            parse_time_frames.append([[{
                "time_start" : datetime.date.min.year,
                "time_end" : current_season,
                "type" : "date",
                "playoffs" : None,
                "add_type" : "plus",
                "qualifiers" : []
            }]])
    except BaseException as e:
        if isinstance(e, CustomMessageException):
            raise e
        else: 
            raise CustomMessageException("Invalid query format!")

    best_games_table = 0
    worst_games_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-game"):
            if "-" in extra_stat:
                best_games_table = int(extra_stat.split("-")[2])
            else:
                best_games_table = 1
        elif extra_stat.startswith("worst-game"):
            if "-" in extra_stat:
                worst_games_table = int(extra_stat.split("-")[2])
            else:
                worst_games_table = 1

    while len(names) < len(parse_time_frames):
        names.append(names[len(names) - 1])

    while len(parse_time_frames) < len(names):
        parse_time_frames.append(copy.deepcopy(parse_time_frames[len(parse_time_frames) - 1]))
    
    for index, subb_name in enumerate(names):
        subb_frame = parse_time_frames[index]
        subb_names = re.split(r"(?<!\\)\+", subb_name.strip())
        while len(subb_names) < len(subb_frame):
            subb_names.append(subb_names[len(subb_names) - 1])

        while len(subb_frame) < len(subb_names):
            subb_frame.append(copy.deepcopy(subb_frame[len(subb_frame) - 1]))
    
    if player_type["da_type"] == None:
        player_type["da_type"] = get_init_type(names, parse_time_frames)

    for subb_frames in parse_time_frames:
        for subbb_frames in subb_frames:
            for time_frame in subbb_frames:
                for qualifier in time_frame["qualifiers"]:
                    if "Season" not in qualifier and "State" not in qualifier and "Facing" not in qualifier and ("Event Stat" not in qualifier or qualifier == "Individual Event Stat") and ("Stat" in qualifier or "Streak" in qualifier or "Stretch" in qualifier or ("Formula" in qualifier and qualifier != "Event Formula") or "Quickest" in qualifier or "Slowest" in qualifier):
                        for qual_object in time_frame["qualifiers"][qualifier]:
                            for sub_qual_object in qual_object["values"]:
                                if "Formula" in qualifier:
                                    stats = qual_object["values"]
                                else:
                                    if "stats" in sub_qual_object:
                                        stats = []
                                        for stat in sub_qual_object["stats"]:
                                            stats.append(stat["stat"])
                                    else:
                                        stats = [sub_qual_object["stat"]]
                            for stat in stats:
                                if "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                                    extra_stats.add("current-stats")
                                for header_stat in headers[player_type["da_type"]]:
                                    if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                        stat = header_stat.lower()
                                        if "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                                            extra_stats.add("current-stats")
                                        break
        
    add_play = False
    for extra_stat in extra_stats:
        if extra_stat.startswith("show-stat-"):
            stat = extra_stat.split("show-stat-", 1)[1]
            if "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                add_play = True
            for header_stat in headers[player_type["da_type"]]:
                if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                    stat = header_stat.lower()
                    if "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                        add_play = True
                    break

    if add_play:
        extra_stats.add("current-stats")

    if "hide-advanced" in extra_stats and "current-stats" in extra_stats:
        extra_stats.remove("current-stats")    
            
    if remove_duplicates or remove_duplicate_games or "score" in extra_stats or "record" in extra_stats or "game" in extra_stats or "current-stats" in extra_stats or "run-support" in extra_stats or "advanced-runner" in extra_stats or "run-support-record" in extra_stats or "exit-record" in extra_stats or "show-stat-opponent" in extra_stats or "show-stat-opplg" in extra_stats or best_games_table or worst_games_table:
        for subb_frame in parse_time_frames:
            for subbb_frame in subb_frame:
                for time_frame in subbb_frame:
                    time_frame["qualifiers"]["Force Dates"] = [{
                        "negate" : False
                    }]

    for subb_frames in parse_time_frames:
        for subbb_frames in subb_frames:
            for time_frame in subbb_frames:
                objs_to_add = {}
                objs_to_delete = set()
                for qual_str in time_frame["qualifiers"]:
                    if qual_str in ["Facing", "Facing First Name", "Facing Birth Name", "Facing First Or Birth Name", "Facing Last Name", "Facing Birth Country"]:
                        objs_to_delete.add(qual_str)
                        if player_type["da_type"] == "Batter":
                            new_qual_str = qual_str.replace("Facing", "Batting Against")
                        else:
                            new_qual_str = qual_str.replace("Facing", "Pitching Against")
                        objs_to_add[new_qual_str] = time_frame["qualifiers"][qual_str]

                for obj_to_add in objs_to_add:
                    time_frame["qualifiers"][obj_to_add] = objs_to_add[obj_to_add]
                for obj_to_delete in objs_to_delete:
                    del time_frame["qualifiers"][obj_to_delete]

    parsed_game_quals = set()

    name_count = sum(len(re.split(r"(?<!\\)\+", subb_name.strip())) for subb_name in names)
    sub_name_count = 0
    player_str_set = set()
    for index, subb_date in enumerate(parse_time_frames):
        for subbbb_index, subbb_date in enumerate(subb_date):
            subb_names_with = []
            subb_names_against = []
            sub_matching_names = []
            for sub_index, sub_name in enumerate(names):
                sub_names_split = re.split(r"(?<!\\)\+", sub_name.strip())
                for subbbbbbb_index, subbb_name in enumerate(sub_names_split):
                    if len(sub_names_split) > 1:
                        if sub_index == index:
                            if subbbbbbb_index != subbbb_index:
                                subb_names_with.append(subbb_name)
                            else:
                                sub_matching_names.append(subbb_name)
                        else:
                            subb_names_against.append(subbb_name)
                    else:
                        if sub_index != index or subbbbbbb_index != subbbb_index:
                            subb_names_with.append(subbb_name)
                            subb_names_against.append(subbb_name)
                        else:
                            sub_matching_names.append(subbb_name)
            for subbbb_date in subbb_date:
                if "Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Playing With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Playing Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Game" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Game"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Playing Same Game")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Previous Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Previous Playing With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Previous Playing With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Previous Playing Against" in subbbb_date["qualifiers"]:
                   for qual in subbbb_date["qualifiers"]["Previous Playing Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Previous Playing Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Upcoming Playing With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Upcoming Playing With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Upcoming Playing With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Upcoming Playing Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Upcoming Playing Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Upcoming Playing Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Opponents" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Opponents"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Playing Same Opponents")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Playing Same Date" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Playing Same Date"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Playing Same Date")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Batting Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Batting Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Batting Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Pitching Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Pitching Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Pitching Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Driven In" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Driven In"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Driven In")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Batted In" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Batted In"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Batted In")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Back To Back With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Back To Back With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Back To Back With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Batting In Front Of" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Batting In Front Of"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Batting In Front Of")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Batting Behind" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Batting Behind"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Batting Behind")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Batting Next To" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Batting Next To"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Batting Next To")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Caught By" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Caught By"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Caught By")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Stealing On" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Stealing On"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Stealing On")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Teammate On First" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Teammate On First"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Teammate On First")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Teammate On First" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Teammate On First"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Teammate On First")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Teammate On Second" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Teammate On Second"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Teammate On Second")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Teammate On Third" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Teammate On Third"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Teammate On Third")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Teammate On Base" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Teammate On Base"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Teammate On Base")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Opponent On First" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Opponent On First"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Opponent On First")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Opponent On Second" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Opponent On Second"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Opponent On Second")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Opponent On Third" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Opponent On Third"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Opponent On Third")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "Opponent On Base" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["Opponent On Base"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "Opponent On Base")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "On Field With" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["On Field With"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_with):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "On Field With")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
                if "On Field Against" in subbbb_date["qualifiers"]:
                    for qual in subbbb_date["qualifiers"]["On Field Against"]:
                        if "time_frame_str" in qual:
                            continue
                        for player_str in (qual["values"] if "values" in qual else subb_names_against):
                            player_str = determine_player_str(qual, player_type, player_str, subbbb_date, "On Field Against")
                            if player_str not in player_str_set:
                                sub_name_count += 1
                                player_str_set.add(player_str)
            name_count += len(subbb_date) - 1

    if name_count > 30:
        raise CustomMessageException("You can only compare a max of 30 players!")

    if sub_name_count > 30:
        raise CustomMessageException("You can only have a max of 30 sub-players!")

    years_table = "year" in extra_stats
    years_table_career = "career-year" in extra_stats
    games_table = "game" in extra_stats
    games_table_career = "career-game" in extra_stats
    teams_table = "team" in extra_stats
    teams_table_career = "career-team" in extra_stats
    franchise_table = "franchise" in extra_stats
    franchise_table_career = "career-franchise" in extra_stats
    numbers_table = "number" in extra_stats
    numbers_table_career = "career-number" in extra_stats
    pitch_type_table = "pitch-type" in extra_stats
    pitch_type_table_career = "career-pitch-type" in extra_stats

    if comment_obj:
        comment_obj["total_players"] = name_count
        try:
            string_output = format_alert_message(comment_obj, False)
            if not comment_obj["debug_mode"]:
                if not comment_obj["reply"]:
                    if not comment_obj["is_approved"]:
                        comment_obj["comment"].author.message("MLBCompareBot Comparison " + comment_obj["comment"].id, string_output)
                    else:
                        comment_obj["reply"] = comment_obj["comment"].reply(string_output)
                logger.info("#" + str(threading.get_ident()) + "#   User alerted")
        except Exception:
            logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
    
    if player_type["da_type"] == "Batter":
        is_pitching_jaws = get_init_jaws_type(names, parse_time_frames)
    else:
        is_pitching_jaws = True

    handle_against_qual(names, parse_time_frames, player_type, comment_obj, extra_stats)
    handle_same_games_qual(names, player_type, parse_time_frames, comment_obj, extra_stats)

    for subb_frames in parse_time_frames:
        for subbb_frames in subb_frames:
            for time_frame in subbb_frames:
                if "Batting Lefty" in time_frame["qualifiers"] or "Batting Righty" in time_frame["qualifiers"] or "Back To Back With" in time_frame["qualifiers"] or "Pinch Hitting" in time_frame["qualifiers"] or "Leading Off Game" in time_frame["qualifiers"] or "Leading Off Whole Game" in time_frame["qualifiers"]  or "Leading Off Inning" in time_frame["qualifiers"] or "Swung At First Pitch" in time_frame["qualifiers"] or "Time Facing Opponent" in time_frame["qualifiers"] or "After Swinging On Count" in time_frame["qualifiers"] or "Swinging On Count" in time_frame["qualifiers"]:
                    if player_type["da_type"] == "Batter":
                        extra_stats.add("no-steals")

    if "current-stats" in extra_stats and player_type["da_type"] == "Batter":
        extra_stats.add("walk-off")

    player_datas = []
    arguments = []
    for index, sub_name in enumerate(names):
        arguments.append([sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj])
    with multiprocessing.Pool(processes=multiprocessing.cpu_count()) as pool:
        sub_player_datas = pool.starmap(handle_name_threads, arguments)
        for sub_player_data in sub_player_datas:
            player_datas += sub_player_data
    # with ThreadPoolExecutor(max_workers=5) as sub_executor:
    #     futures = []
    #     for index, sub_name in enumerate(names):
    #         futures.append(sub_executor.submit(handle_name_threads, sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj))
    #     for future in concurrent.futures.as_completed(futures):
    #         player_datas += future.result()
    #         gc.collect()

    # tr = tracker.SummaryTracker()
    # tr.print_diff()
    # for index, sub_name in enumerate(names):
    #     player_datas += handle_name_threads(sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)
    #     gc.collect()
    #     tr.print_diff()
    
    for player_data in player_datas:
        if player_data["stat_values"]["LastUpdated"] and (not last_updated or player_data["stat_values"]["LastUpdated"] < last_updated):
            last_updated = player_data["stat_values"]["LastUpdated"]

    if not player_type["da_type"]:
        player_type["da_type"] = "Batter"
    
    player_datas.sort(key=lambda player_data: player_data["sort_index"])

    if years_table or years_table_career or games_table or teams_table or teams_table_career or franchise_table or franchise_table_career or numbers_table or numbers_table_career or pitch_type_table or pitch_type_table_career:
        datas_by_index = {}
        for player_data in player_datas:
            if player_data["sort_index"] not in datas_by_index:
                datas_by_index[player_data["sort_index"]] = []
            datas_by_index[player_data["sort_index"]].append(player_data)
        max_value = max(len(datas_by_index[index]) for index in datas_by_index)
        player_datas = []
        for index in range(0, max_value + 1):
            for sub_index in datas_by_index:
                if len(datas_by_index[sub_index]) > index:
                    player_datas.append(datas_by_index[sub_index][index])

    if sort_vals:
        player_datas = sort_player_datats(player_datas, sort_vals, player_type, extra_stats)

    return player_datas, last_updated, original_comment, hide_table, extra_stats

def get_init_type(names, time_frames):
    for index, sub_name in enumerate(names):
        sub_names = re.split(r"(?<!\\)\+", sub_name.strip())
        for sub_index, name in enumerate(sub_names):
            real_index = sub_index if len(time_frames[index]) > sub_index else len(time_frames[index]) - 1
            player_id, player_page = get_player(name, time_frames[index][real_index])
            if player_page:
                return get_player_type(player_page)

def get_init_jaws_type(names, time_frames):
    for index, sub_name in enumerate(names):
        sub_names = re.split(r"(?<!\\)\+", sub_name.strip())
        for sub_index, name in enumerate(sub_names):
            real_index = sub_index if len(time_frames[index]) > sub_index else len(time_frames[index]) - 1
            player_id, player_page = get_player(name, time_frames[index][real_index])
            if player_page:
                player_jaws_pos = get_player_jaws_position(player_page)
                if player_jaws_pos:
                    if get_player_jaws_position(player_page).endswith("P"):
                        return True
                else:
                    player_position = get_player_position(player_page)
                    if player_position and player_position.endswith("P"):
                        return True
    return False

def handle_name_threads(sub_name, parse_time_frames, index, player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj):
    try:
        player_datas = []

        years_table = "year" in extra_stats
        years_table_career = "career-year" in extra_stats
        games_table = "game" in extra_stats
        games_table_career = "career-game" in extra_stats
        teams_table = "team" in extra_stats
        teams_table_career = "career-team" in extra_stats
        franchise_table = "franchise" in extra_stats
        franchise_table_career = "career-franchise" in extra_stats
        numbers_table = "number" in extra_stats
        numbers_table_career = "career-number" in extra_stats
        pitch_type_table = "pitch-type" in extra_stats
        pitch_type_table_career = "career-pitch-type" in extra_stats

        best_table = 0
        worst_table = 0
        for extra_stat in extra_stats:
            if extra_stat.startswith("best-season"):
                if len(extra_stat.split("-")) == 3:
                    best_table = int(extra_stat.split("-")[2])
                else:
                    best_table = 1
            elif extra_stat.startswith("worst-season"):
                if len(extra_stat.split("-")) == 3:
                    worst_table = int(extra_stat.split("-")[2])
                else:
                    worst_table = 1
        best_games_table = 0
        worst_games_table = 0
        for extra_stat in extra_stats:
            if extra_stat.startswith("best-game"):
                if len(extra_stat.split("-")) == 3:
                    best_games_table = int(extra_stat.split("-")[2])
                else:
                    best_games_table = 1
            elif extra_stat.startswith("worst-game"):
                if len(extra_stat.split("-")) == 3:
                    worst_games_table = int(extra_stat.split("-")[2])
                else:
                    worst_games_table = 1
        
        sub_names = re.split(r"(?<!\\)\+", sub_name.strip())
        player_data, sub_player_datas = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)

        if years_table or years_table_career:
            seasons = sorted(list(set([row["Year"] for row in player_data["stat_values"]["all_rows"]])))
            if len(seasons) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(seasons) * len(parse_time_frames[index]) * len(sub_names)
                    
                for season in seasons:
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["time_start"] = season
                            time_frame["time_end"] = season
                            time_frame["type"] = "date"
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                years_table = False
                years_table_career = False
        
        if (best_table or worst_table) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            import numbers
            if player_type["da_type"]:
                for header in headers[player_type["da_type"]].keys():
                    if not header.startswith("Player"):
                        if isinstance(player_data["stat_values"][header], numbers.Number):
                            player_data["stat_values"][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"][header] = ""
                        
            seasons = calculate_chunks(sorted(list(set([row["Year"] for row in player_data["stat_values"]["all_rows"]]))), best_table if best_table else worst_table)
            if comment_obj:
                comment_obj["total_players"] += len(seasons) * len(parse_time_frames[index]) * len(sub_names)
                
            season_player_datas = []
            for season in seasons:
                clear_time_frames(parse_time_frames[index])
                for subbb_frames in parse_time_frames[index]:
                    for time_frame in subbb_frames:
                        time_frame["time_start"] = season[0]
                        time_frame["time_end"] = season[len(season) - 1]
                        time_frame["type"] = "date"
                sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)[0]
                season_player_datas.append(sub_player_data)
            combined_datas = calculate_best(player_data, season_player_datas, player_type, extra_stats, best_table)
            if combined_datas["stat_values"]["G"]:
                player_datas.append(combined_datas)
            else:
                best_table = False
                worst_table = False
        else:
            best_table = False
            worst_table = False
        
        if (teams_table or teams_table_career) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            franchises = {}
            for row in player_data["stat_values"]["all_rows"]:
                team = row["Tm"]
                year = str(row["Year"])
                if team not in franchises:
                    franchises[team] = set()
                franchises[team].add(year)
            if len(franchises) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(franchises) * len(parse_time_frames[index]) * len(sub_names)
                    
                for team in sorted(franchises.items(), key=lambda item: len(item[1]), reverse=True):
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Team"] = [{
                                "negate" : False,
                                "values" : [
                                    team[0].lower()
                                ]
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                teams_table = False
                teams_table_career = False
        
        if (franchise_table or franchise_table_career) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            franchises = {}
            for row in player_data["stat_values"]["all_rows"]:
                team = row["Tm"]
                year = str(row["Year"])
                sleague = row["TmLg"]
                team_franchise = team_main_abbr[sleague][year][team]
                if team_franchise not in franchises:
                    franchises[team_franchise] = set()
                franchises[team_franchise].add(year)
            if len(franchises) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(franchises) * len(parse_time_frames[index]) * len(sub_names)
                    
                for team in sorted(franchises.items(), key=lambda item: len(item[1]), reverse=True):
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Team Franchise"] = [{
                                "negate" : False,
                                "values" : [
                                    team[0].lower()
                                ]
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                franchise_table = False
                franchise_table_career = False
        
        if numbers_table or numbers_table_career:
            numbers = []
            for sub_player_data in sub_player_datas:
                player_numbers = sorted(sub_player_data["player_all_numbers"], key=lambda num: num["start_year"])
                numbers += [number["number"] for number in player_numbers]
            numbers =  list(dict.fromkeys(numbers))
            if len(numbers) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(numbers) * len(parse_time_frames[index]) * len(sub_names)
                    
                for number in numbers:
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Season Number"] = [{
                                "negate" : False,
                                "values" : {
                                    "start_val" : number,
                                    "end_val" : number
                                }
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                numbers_table = False
                numbers_table_career = False

        if (games_table or games_table_career):
            rows_count = 0
            for subb_player_data in sub_player_datas:
                for row in subb_player_data["rows"]:
                    rows_count += 1

            if rows_count > 20:
                raise CustomMessageException("Cannot show more than 20 games!")
            
            if rows_count > 1:
                for subb_player_data in sub_player_datas:
                    for row in subb_player_data["rows"]:
                        game_player_data = copy.copy(subb_player_data)
                        game_player_data["rows"] = [row]
                        game_player_data["DateStart"] = [row["DateTime"]]
                        game_player_data["DateEnd"] = [row["DateTime"]]

                        sub_player_data = combine_player_datas([game_player_data], player_type, False, False, False, False, parse_time_frames[index], "add", remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats)
                        player_datas.append(sub_player_data)
            else:
                games_table = False
                games_table_career = False

        if (pitch_type_table or pitch_type_table_career) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            pitch_types = set()
            for row in player_data["stat_values"]["all_rows"]:
                pitch_types.update(row["PitTypes"])
            if len(pitch_types) > 1:
                if comment_obj:
                    comment_obj["total_players"] += len(pitch_types) * len(parse_time_frames[index]) * len(sub_names)
                    
                for pitch_type in sorted(pitch_types):
                    clear_time_frames(parse_time_frames[index])
                    for subbb_frames in parse_time_frames[index]:
                        for time_frame in subbb_frames:
                            time_frame["qualifiers"]["Exact Pitch Type"] = [{
                                "negate" : False,
                                "values" : [
                                    pitch_type.lower()
                                ]
                            }]
                    sub_player_data = handle_multi_name_data(sub_names, parse_time_frames[index], player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)[0]
                    player_datas.append(sub_player_data)
            else:
                pitch_type_table = False
                pitch_type_table_career = False
        
        if (best_games_table or worst_games_table) and "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            import numbers
            if player_type["da_type"]:
                for header in headers[player_type["da_type"]].keys():
                    if not header.startswith("Player"):
                        if isinstance(player_data["stat_values"][header], numbers.Number):
                            player_data["stat_values"][header] = 0.0
                        elif headers in string_stats:
                            player_data["stat_values"][header] = ""

            game_player_datas = []
            for subb_player_data in sub_player_datas:
                rows = []
                for row in subb_player_data["rows"]:
                    rows.append(row)
                rows = calculate_chunks(rows, best_games_table if best_games_table else worst_games_table)
                for row in rows:
                    subbb_player_data = {
                        "ids" : [subb_player_data["id"]],
                        "mlb_ids" : [subb_player_data["mlb_id"]],
                        "has_season_stats" : subb_player_data["has_season_stats"],
                        "stat_values" : {
                            "DateStart" : subb_player_data["DateStart"],
                            "DateEnd" : subb_player_data["DateEnd"],
                            "Birthdays" : [subb_player_data["Birthday"]],
                            "Deathdays" : [subb_player_data["Deathday"]],
                            "is_playoffs" : subb_player_data["is_playoffs"],
                            "Player" : [subb_player_data["Player"]],
                            "any_missing_games" : [],
                            "any_missing_pitch" : [],
                            "all_rows" : row
                        }
                    }
                    calculated_values = calculate_values(row, player_type, None, subbb_player_data, extra_stats)
                    for stat in calculated_values["stat_values"]:
                        if stat not in subbb_player_data["stat_values"]:
                            subbb_player_data["stat_values"][stat] = calculated_values["stat_values"][stat]
                    game_player_datas.append(subbb_player_data)
            combined_datas = calculate_best(player_data, game_player_datas, player_type, extra_stats, best_games_table)
            if combined_datas["stat_values"]["G"]:
                player_datas.append(combined_datas)
            else:
                best_games_table = False
                worst_games_table = False
        else:
            best_games_table = False
            worst_games_table = False

        clear_time_frames(parse_time_frames[index])

        if not games_table and not years_table and not teams_table and not franchise_table and not numbers_table and not pitch_type_table and not best_table and not worst_table and not best_games_table and not worst_games_table:
            player_datas.append(player_data)
        
        for player_data in player_datas:
            player_data["sort_index"] = index    
        return player_datas
    except urllib.error.URLError as err:
        logger.error(traceback.format_exc())
        raise urllib.error.URLError(err.reason)
    except Exception as err:
        logger.error(traceback.format_exc())
        raise err

def calculate_chunks(da_list, size):
    all_items = []
    for index, item in enumerate(da_list):
        sub_array = [item]
        if len(sub_array) == size:
            all_items.append(sub_array)
            continue
        for sub_index in range(index + 1, len(da_list)):
            sub_item = da_list[sub_index]
            sub_array.append(sub_item)
            if len(sub_array) == size:
                all_items.append(sub_array)
                break
    return all_items

def calculate_even_chunks(da_list, size):
    for i in range(0, len(da_list), size):
        yield da_list[i:i + size]

def calculate_best(player_data, player_datas, player_type, extra_stats, is_best):
    has_non_playoffs = False
    for sub_player_data in player_datas:
        if sub_player_data["stat_values"]["is_playoffs"] != "Only":
            has_non_playoffs = True

    highest_vals, lowest_vals = calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, 0, extra_stats)
    if is_best:
        for header in highest_vals:
            player_data["stat_values"][header] = highest_vals[header]["original_value"]
    else:
        for header in lowest_vals:
            player_data["stat_values"][header] = lowest_vals[header]["original_value"]
    
    return player_data

def clear_time_frames(subb_frames):
    for subbb_frames in subb_frames:
        for time_frame in subbb_frames:
            for qualifier in time_frame["qualifiers"]:
                if qualifier == "Min Stat" or qualifier == "Max Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Max Stretch Formula" or qualifier == "Count Streak Formula" or qualifier == "Quickest" or qualifier == "Slowest" or qualifier == "Season Stat" or qualifier == "Previous Season Stat" or qualifier == "Upcoming Season Stat" or qualifier == "Total Games Stat":
                    for qual_obj in time_frame["qualifiers"][qualifier]:
                        for sub_qualifier in qual_obj["values"]:
                            sub_qualifier.pop("explain_str", None)

def handle_stat_time_frame(time_frame, hide_exceptions=False):
    match = re.match(r"\b(only-season-?(?:st-?)?(?:end-?)?)?(games?-start(?:~[\S]+)?|games?-end(?:~[\S]+)?|seasons?-end(?:~[\S]+)?|totalgames?(?:~[\S]+)?|days?(?:~[\S]+)?|weeks?(?:~[\S]+)?|months?(?:~[\S]+)?|years?(?:~[\S]+)?|calendarweeks?(?:~[\S]+)?|calendarmonths?(?:~[\S]+)?|calendaryears?(?:~[\S]+)?|games?(?:~[\S]+)?|seasons?(?:~[\S]+)?|teams?(?:~[\S]+)?|opponents?(?:~[\S]+)?|g-st(?:~[\S]+)?|tg(?:~[\S]+)?|s-st(?:~[\S]+)?|g-end(?:~[\S]+)?|s-end(?:~[\S]+)?|d(?:~[\S]+)?|w(?:~[\S]+)?|m(?:~[\S]+)?|y(?:~[\S]+)?|g(?:~[\S]+)?|s(?:~[\S]+)?|t(?:~[\S]+)?|o(?:~[\S]+)?)?", time_frame)
    
    qualifier = match.group(2)
    if not qualifier:
        if match.group(1):
            qualifier = "games"
        else:
            raise Exception("Invalid query: " + time_frame)
    
    if qualifier.startswith("d") or qualifier.startswith("day"):
        qual_type = "Days"
    elif qualifier.startswith("w") or qualifier.startswith("week"):
        qual_type = "Weeks"
    elif qualifier.startswith("m") or qualifier.startswith("month"):
        qual_type = "Months"
    elif qualifier.startswith("y") or qualifier.startswith("year"):
        qual_type = "Years"
    elif qualifier.startswith("calw") or qualifier.startswith("calendarweek"):
        qual_type = "Calendar-Weeks"
    elif qualifier.startswith("calm") or qualifier.startswith("calendarmonth"):
        qual_type = "Calendar-Months"
    elif qualifier.startswith("caly") or qualifier.startswith("calendaryear"):
        qual_type = "Calendar-Years"
    elif qualifier.startswith("g") or qualifier.startswith("game"):
        qual_type = "Games"
    elif qualifier.startswith("tg") or qualifier.startswith("totalgame"):
        qual_type = "Total Games"
    elif qualifier.startswith("s") or qualifier.startswith("season"):
        qual_type = "Seasons"
    elif qualifier.startswith("t") or qualifier.startswith("team"):
        qual_type = "Teams"
    elif qualifier.startswith("o") or qualifier.startswith("opponent"):
        qual_type = "Opponents"

    if match.group(1):
        qual_type = "Only-Season-" + qual_type
        if "st" in match.group(1):
            qual_type += "-Start"
        elif "end" in match.group(1):
            qual_type += "-End"

    if qualifier.endswith("-st"):
        qual_type += "-Start"
    elif qualifier.endswith("-end"):
         qual_type += "-End"

    qual_split = re.split(r"(?<!\\)\=", time_frame)
    if len(qual_split) > 1:
        raise Exception("Cant have = in query: " + time_frame)

    qual_split = re.split(r"(?<!\\)\~", qualifier)
    if len(qual_split) > 1:
        qual_nums = re.split(r"(?<!\\)\-", qual_split[1])
        if len(qual_nums) > 1:
            qual_num_start = ordinal_to_number(qual_nums[0])
            qual_num_end = ordinal_to_number(qual_nums[1])
        else:
            qual_num_start = ordinal_to_number(qual_nums[0])
            qual_num_end = ordinal_to_number(qual_nums[0])
    else:
        qual_num_start = 1
        qual_num_end = 1

    return {
        "qual_type" : qual_type,
        "qual_num_start" : qual_num_start,
        "qual_num_end" : qual_num_end
    }

def handle_against_qual(names, time_frames, player_type, comment_obj, extra_stats):
    players_map = {}
    for index, subb_frames in enumerate(time_frames):
        for subbbb_index, subbb_frames in enumerate(subb_frames):
            subb_names_with = []
            subb_names_against = []
            sub_matching_names = []
            for sub_index, sub_name in enumerate(names):
                sub_names_split = re.split(r"(?<!\\)\+", sub_name.strip())
                for subbbbbbb_index, subbb_name in enumerate(sub_names_split):
                    if len(sub_names_split) > 1:
                        if sub_index == index:
                            if subbbbbbb_index != subbbb_index:
                                subb_names_with.append(subbb_name)
                            else:
                                sub_matching_names.append(subbb_name)
                        else:
                            subb_names_against.append(subbb_name)
                    else:
                        if sub_index != index or subbbbbbb_index != subbbb_index:
                            subb_names_with.append(subbb_name)
                            subb_names_against.append(subbb_name)
                        else:
                            sub_matching_names.append(subbb_name)
            for time_frame in subbb_frames:
                if "Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Event Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Event Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Or Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Or Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Or Event Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Or Event Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Day Of Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Day Of Sub Query", sub_matching_names, time_frame, "Date", comment_obj, players_map, extra_stats)
                if "Day After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Day After Sub Query", sub_matching_names, time_frame, "DateAfter", comment_obj, players_map, extra_stats)
                if "Day Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Day Before Sub Query", sub_matching_names, time_frame, "DateBefore", comment_obj, players_map, extra_stats)
                if "Game After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Game After Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Game Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Game Before Sub Query", sub_matching_names, time_frame, "Game", comment_obj, players_map, extra_stats)
                if "Season Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Season Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map, extra_stats)
                if "Or Season Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Or Season Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map, extra_stats)
                if "Season After Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Season After Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map, extra_stats)
                if "Season Before Sub Query" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Season Before Sub Query", sub_matching_names, time_frame, "Season", comment_obj, players_map, extra_stats)
                if "Day After Pitching" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Day After Pitching", sub_matching_names, time_frame, "DateAfter", comment_obj, players_map, extra_stats)
                if "Day After Hitting" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Day After Hitting", sub_matching_names, time_frame, "DateAfter", comment_obj, players_map, extra_stats)
                if "Day Before Pitching" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Day Before Pitching", sub_matching_names, time_frame, "DateBefore", comment_obj, players_map, extra_stats)
                if "Day Before Hitting" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Day Before Hitting", sub_matching_names, time_frame, "DateBefore", comment_obj, players_map, extra_stats)
                if "Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Previous Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Previous Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Playing Same Game" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Playing Same Game", subb_names_with, time_frame, "Either", comment_obj, players_map, extra_stats)
                if "Upcoming Playing With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Upcoming Playing With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Previous Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Previous Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Upcoming Playing Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Upcoming Playing Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Playing Same Opponents" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Playing Same Opponents", subb_names_against, time_frame, "Same Opponent", comment_obj, players_map, extra_stats)
                if "Playing Same Date" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Playing Same Date", subb_names_against, time_frame, "Date", comment_obj, players_map, extra_stats)
                if "Batting Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Batting Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Pitching Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Pitching Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Driven In" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Driven In", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Batted In" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Batted In", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Back To Back With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Back To Back With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Batting In Front Of" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Batting In Front Of", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Batting Behind" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Batting Behind", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Batting Next To" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Batting Next To", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Caught By" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Caught By", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Stealing On" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Stealing On", subb_names_with, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Teammate On First" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Teammate On First", subb_names_against, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Teammate On Second" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Teammate On Second", subb_names_against, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Teammate On Third" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Teammate On Third", subb_names_against, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Teammate On Base" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Teammate On Base", subb_names_against, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "Opponent On First" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Opponent On First", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Opponent On Second" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Opponent On Second", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Opponent On Third" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Opponent On Third", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "Opponent On Base" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "Opponent On Base", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)
                if "On Field With" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "On Field With", subb_names_with, time_frame, "Tm", comment_obj, players_map, extra_stats)
                if "On Field Against" in time_frame["qualifiers"]:
                    handle_the_quals(time_frame["qualifiers"], player_type, "On Field Against", subb_names_against, time_frame, "Opponent", comment_obj, players_map, extra_stats)

def handle_same_games_qual(names, player_type, time_frames, comment_obj, extra_stats):
    qual_map = {}
    for index, sub_name in enumerate(names):
        for subbb_frames in time_frames[index]:
            for time_frame in subbb_frames:
                if "First Games" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Games", subbb_frames, time_frame, player_type, "Games", True, comment_obj, qual_map, extra_stats)
                if "First Innings" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Innings", subbb_frames, time_frame, player_type, "IP", True, comment_obj, qual_map, extra_stats)
                if "First Plate Appearances" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Plate Appearances", subbb_frames, time_frame, player_type, "PA", True, comment_obj, qual_map, extra_stats)
                if "First Batters Faced" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Batters Faced", subbb_frames, time_frame, player_type, "BF", True, comment_obj, qual_map, extra_stats)
                if "First Pitches" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Pitches", subbb_frames, time_frame, player_type, "Pit", True, comment_obj, qual_map, extra_stats)
                if "First At Bats" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First At Bats", subbb_frames, time_frame, player_type, "AB", True, comment_obj, qual_map, extra_stats)
                if "First Seasons" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "First Seasons", subbb_frames, time_frame, player_type, "Seasons", True, comment_obj, qual_map, extra_stats)
                if "Last Games" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Games", subbb_frames, time_frame, player_type, "Games", False, comment_obj, qual_map, extra_stats)
                if "Last Innings" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Innings", subbb_frames, time_frame, player_type, "IP", False, comment_obj, qual_map, extra_stats)
                if "Last Plate Appearances" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Plate Appearances", subbb_frames, time_frame, player_type, "PA", False, comment_obj, qual_map, extra_stats)
                if "Last Batters Faced" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Batters Faced", subbb_frames, time_frame, player_type, "BF", False, comment_obj, qual_map, extra_stats)
                if "Last Pitches" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Pitches", subbb_frames, time_frame, player_type, "Pit", False, comment_obj, qual_map, extra_stats)
                if "Last At Bats" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last At Bats", subbb_frames, time_frame, player_type, "AB", False, comment_obj, qual_map, extra_stats)
                if "Last Seasons" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Last Seasons", subbb_frames, time_frame, player_type, "Seasons", False, comment_obj, qual_map, extra_stats)
                if "Current Age" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Current Age", subbb_frames, time_frame, player_type, "Age", False, comment_obj, qual_map, extra_stats)
                if "Current Season Age" in time_frame["qualifiers"]:
                    handle_the_same_games_quals(sub_name, "Current Season Age", subbb_frames, time_frame, player_type, "Season Age", False, comment_obj, qual_map, extra_stats)
    
    for index, sub_name in enumerate(names):
        for subbb_frames in time_frames[index]:
            for time_frame in subbb_frames:
                for qual_str in qual_map:
                    min_value = qual_map[qual_str]["min_value"]
                    is_first =  qual_map[qual_str]["is_first"]
                    new_qual_type = qual_map[qual_str]["new_qual_type"]

                    if new_qual_type == "Games":
                        compare_type = "first" if is_first else "last" 
                        time_frame["qualifiers"][new_qual_type] = {
                            "compare_type" : compare_type,
                            "time_unit" : int(min_value),
                            "negate" : False
                        }
                    elif new_qual_type == "IP" or new_qual_type == "PA" or new_qual_type == "BF" or new_qual_type == "Pit" or new_qual_type == "AB":
                        qual_type = "Event Stat"
                        if not is_first:
                            qual_type += " Reversed"
                        time_frame["qualifiers"][qual_type] = [{
                            "values" : {
                                "start_val" : 0,
                                "end_val" : min_value if new_qual_type == "IP" else int(min_value)
                            },
                            "stat" : new_qual_type,
                            "negate" : False
                        }]
                        extra_stats.add("current-stats")
                        if new_qual_type == "Pit":
                            extra_stats.add("show-stat-pit")
                    elif new_qual_type == "Seasons":
                        time_start = None
                        time_end = None
                        if is_first:
                            time_start = min_value
                        else:
                            time_end = min_value

                        time_frame["time_start"] = time_start
                        time_frame["time_end"] = time_end
                        time_frame["type"] = "season"
                    else:
                        if new_qual_type == "Age":
                            compare_str = ""
                            if min_value.years:
                                compare_str += str(min_value.years).replace("-", "") + "Y"
                            if min_value.months:
                                if min_value.years:
                                    compare_str += "-"
                                compare_str += str(min_value.months).replace("-", "") + "M"
                            if min_value.days:
                                if min_value.years or min_value.months:
                                    compare_str += "-"
                                compare_str += str(min_value.days).replace("-", "") + "D"
                        else:
                            compare_str = ""
                            if min_value.years:
                                compare_str += str(min_value.years).replace("-", "") + "Y"

                        time_frame["qualifiers"][new_qual_type] = [{
                            "negate" : False,
                            "time_unit_start" : datetime.date.min,
                            "time_unit_end" : dateutil.relativedelta.relativedelta(years=min_value.years, months=min_value.months, days=min_value.days),
                            "compare_str" : compare_str
                        }]
                        
def handle_the_quals(qualifiers, real_player_type, qual_str, subb_names, time_frame, key, comment_obj, players_map, extra_stats):
    the_quals = qualifiers[qual_str]
    new_quals = []
    for qualifier in the_quals:
        players = []
        seperate_quals = not "values" in qualifier
        for player_str in (qualifier["values"] if not seperate_quals else subb_names):
            if "Sub Query" in qual_str:
                for match_name in subb_names:
                    sub_handle_the_quals(players, qualifier, real_player_type, qual_str, "<" + match_name + "> [" + player_str + "]", time_frame, key, comment_obj, players_map, extra_stats)
            else:
                sub_handle_the_quals(players, qualifier, real_player_type, qual_str, player_str, time_frame, key, comment_obj, players_map, extra_stats)
                    
        if seperate_quals:
            for player in players:
                new_qual = copy.deepcopy(qualifier)
                new_qual["values"] = [player]
                new_quals.append(new_qual)
        else:
            qualifier["values"] = players
            new_quals.append(qualifier)
    
    qualifiers[qual_str] = new_quals

def sub_handle_the_quals(players, qualifier, real_player_type, qual_str, player_str, time_frame, key, comment_obj, players_map, extra_stats):
    new_search = False
    
    is_raw_query = False
    if "time_frame_str" not in qualifier:
        if "On Field" in qual_str:
            is_raw_query = bool("Sub Query" in qual_str or re.search(r"(?<!\\)]", unescape_string(player_str["value"])) or re.search(r"(?<!\\)}", unescape_string(player_str["value"])))
        else:
            is_raw_query = bool("Sub Query" in qual_str or re.search(r"(?<!\\)]", unescape_string(player_str)) or re.search(r"(?<!\\)}", unescape_string(player_str)))

    og_player_str = player_str

    player_str = determine_player_str(qualifier, real_player_type, player_str, time_frame, qual_str)
    
    player_type = {
        "da_type" : None
    }

    if player_str in players_map:
        player_datas = players_map[player_str]
    else:
        player_datas, last_updated, original_comment, hide_table, sub_extra_stats = handle_player_string(player_str, player_type, None, False, None)
        if "Event Sub Query" in qual_str:
            extra_stats.update(sub_extra_stats)
        players_map[player_str] = player_datas
        new_search = True
    
    for player_data in player_datas:
        player_games = {}

        missing_games = player_data["stat_values"]["any_missing_games"]
        missing_pitch = player_data["stat_values"]["any_missing_pitch"]
        missing_salary = player_data["stat_values"]["any_missing_salary"]
        missing_inf = player_data["stat_values"]["any_missing_inf"]
        
        if "all_rows" in player_data["stat_values"]:
            for row in player_data["stat_values"]["all_rows"]:
                if key == "Same Opponent":
                    date = row["Year"]
                    opponent = row["Opponent"]
                    if not opponent in player_games:
                        player_games[opponent] = set()
                    player_games[opponent].add(date)
                elif key == "Game":
                    player_games[row["GameID"]] = True
                elif key == "Season":
                    player_games[row["Year"]] = True
                elif key == "Date":
                    date = row["Date"]
                    player_games[date] = True
                elif key == "DateAfter":
                    date = row["Date"] + datetime.timedelta(days=1)
                    player_games[date] = True
                elif key == "DateBefore":
                    date = row["Date"] - datetime.timedelta(days=1)
                    player_games[date] = True
                elif key == "Either":
                    date = row["GameID"]
                    if not row["Tm"].lower() in player_games:
                        player_games[row["Tm"].lower()] = []
                    player_games[row["Tm"].lower()].append(date)
                    if not row["Opponent"].lower() in player_games:
                        player_games[row["Opponent"].lower()] = []
                    player_games[row["Opponent"].lower()].append(date)
                else:
                    date = row["GameID"]
                    opponent = row[key]
                    if key == "Tm":
                        opponent = opponent.lower()
                    if not opponent in player_games:
                        player_games[opponent] = []
                    player_games[opponent].append(date)

        qual_index = 0
        for index, player_name in enumerate(player_data["stat_values"]["Player"]):
            players.append({
                "id" : player_data["ids"][index],
                "mlb_id" : player_data["mlb_ids"][index],
                "name" : player_name,
                "missing_games" : missing_games,
                "missing_pitch" : missing_pitch,
                "missing_salary" : missing_salary,
                "missing_inf" : missing_inf,
                "query" : player_data["stat_values"]["Raw Quals"],
                "search_term" : player_data["stat_values"]["Search Term"],
                "games" : player_games,
                "is_raw_query" : is_raw_query
            })
            if "On Field" in qual_str:
                if isinstance(og_player_str, dict):
                    players[len(players) - 1]["pos"] = og_player_str["pos"]
                else:
                    players[len(players) - 1]["pos"] = ["ANY"]
            if "Event Sub Query" in qual_str:
                if player_name != "No Player Match!":
                    players[len(players) - 1]["quals"] = player_data["quals"][qual_index]
                    qual_index += 1
                else:
                    players[len(players) - 1]["quals"] = []
    
    # if comment_obj and new_search and comment_obj["is_approved"] and "time_frame_str" not in qualifier:
    #     try:
    #         string_output = format_alert_message(comment_obj)
    #         if comment_obj["reply"]:
    #             if isinstance(comment_obj["reply"], Message):
    #                 #comment_obj["comment"].reply(string_output.split(alert_message + "\n\n", 1)[1])
    #                 pass
    #             else:
    #                 if display_progress_as_edit:
    #                     comment_obj["reply"].edit(string_output)
    #                 #else:
    #                 #    comment_obj["reply"].delete()
    #                 #    comment_obj["reply"] = None
    #                 #    comment_obj["reply"] = comment_obj["comment"].reply(string_output)
    #             logger.info("#" + str(threading.get_ident()) + "#   User alert edited")
    #     except Exception:
    #         logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())

def determine_player_str(qualifier, player_type, player_str, time_frame, qual_str):
    if "On Field" in qual_str and isinstance(player_str, dict):
        player_str = player_str["value"]
    player_str = unescape_string(player_str)
    
    is_pre_query = "time_frame_str" not in qualifier and not "Sub Query" in qual_str and not re.search(r"(?<!\\)]", player_str)
    if not "<" in player_str:
        player_str = "<" + player_str + ">"
    player_str = "!mlbcompare " + player_str

    if "values" in qualifier:
        if re.search(r"(?<!\\)}", player_str):
            player_str = re.sub(r"(?<!\\)}", "]", re.sub(r"(?<!\\){", "[", player_str))
        elif not re.search(r"(?<!\\)]", player_str):
            player_str += " []"

        if time_frame["playoffs"] and time_frame["playoffs"] != "No" and not re.search(r"\b(no(?:t|n)?(?: -)?)?(?:(?<!-)includes?|(?<!-)including|(?<!-)and|(?<!-)with)(?: |-)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", player_str) and not re.search(r"\b(no(?:t|n)?(?: -)?)?(?:playoffs?|post(?:-| )?seasons?|regular(?:-| )?seasons?)(?!-)\b", player_str):
            bracket_index = re.search(r"(?<!\\)]", player_str).start()
            playoffs_str = "playoffs" if time_frame["playoffs"] == "Only" else "including playoffs"
            player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
    elif "time_frame_str" in qualifier:
        player_str += " [" + qualifier["time_frame_str"] + "]"
    else:
        player_str += " []"

    if is_pre_query and time_frame["type"] == "date" and not (time_frame["time_start"] == datetime.date.min.year and time_frame["time_end"] == current_season):
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " " + get_time_str(time_frame["time_start"], False) + " to " + get_time_str(time_frame["time_end"], False) + player_str[bracket_index:]

    if not qual_str in ["Season Sub Query", "Or Season Sub Query", "Season After Sub Query", "Season Before Sub Query"]:
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " force-dates" + player_str[bracket_index:]

    if qual_str in ["Driven In", "Batted In", "Back To Back With", "Batting In Front Of", "Batting Behind", "Batting Next To", "Caught By", "Stealing On", "Pitching Against", "Day After Hitting", "Day Before Hitting", "Teammate On First", "Teammate On Second", "Teammate On Third", "Teammate On Base", "Opponent On First", "Opponent On Second", "Opponent On Third", "Opponent On Base"]:
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " batting" + player_str[bracket_index:]
    elif qual_str in ["Batting Against", "Day After Pitching", "Day Before Pitching"]:
        bracket_index = re.search(r"(?<!\\)]", player_str).start()
        player_str = player_str[:bracket_index] + " pitching" + player_str[bracket_index:]
    
    bracket_index = re.search(r"(?<!\\)]", player_str).start()
    player_str = player_str[:bracket_index] + " is-sub-query" + player_str[bracket_index:]

    bracket_index = re.search(r"(?<!\\)]", player_str).start()
    if "Event Sub Query" in qual_str:
        player_str = player_str[:bracket_index] + " show-advanced" + player_str[bracket_index:]
    else:
        player_str = player_str[:bracket_index] + " hide-advanced" + player_str[bracket_index:]
    
    if "Ignore Start" not in time_frame["qualifiers"]:
        if "Start" in time_frame["qualifiers"]:
            if time_frame["qualifiers"]["Start"][0]["negate"]:
                bracket_index = re.search(r"(?<!\\)]", player_str).start()
                playoffs_str = "not starts"
                player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]
            else:
                bracket_index = re.search(r"(?<!\\)]", player_str).start()
                playoffs_str = "starts"
                player_str = player_str[:bracket_index] + " " + playoffs_str + player_str[bracket_index:]

    return player_str

def handle_the_same_games_quals(sub_name, qual_str, subbb_frames, time_frame, player_type, new_qual_type, is_first, comment_obj, qual_map, extra_stats):
    del time_frame["qualifiers"][qual_str]

    names = re.split(r"(?<!\\)\+", sub_name.strip())

    extra_stats = copy.deepcopy(extra_stats)
    if new_qual_type == "Pit" and player_type["da_type"] == "Batter":
        extra_stats.add("current-stats")
    elif new_qual_type in ["Age", "Season Age"] and "current-stats" in extra_stats:
        extra_stats.remove("current-stats")

    for name in names:
        min_value = float("inf")
        player_id, player_page = get_player(name, subbb_frames)
        if player_id and player_page:
            player_data = handle_multi_player_data(player_id, subbb_frames, player_type, player_page, False, False, False, extra_stats, comment_obj)[0]
            
            player_data["stat_values"] = {}
            player_data["stat_values"]["DateStart"] = player_data["DateStart"]
            player_data["stat_values"]["DateEnd"] = player_data["DateEnd"]
            player_data["stat_values"]["Birthdays"] = [player_data["Birthday"]]
            player_data["stat_values"]["Deathdays"] = [player_data["Deathday"]]
            player_data["stat_values"]["is_playoffs"] = None
            if time_frame["playoffs"] == "Only":
                player_data["stat_values"]["is_playoffs"] = "Only"
            elif time_frame["playoffs"]:
                player_data["stat_values"]["is_playoffs"] = "Include"
            player_data["stat_values"]["all_rows"] = player_data["rows"]

            calculated_values = calculate_values(player_data["stat_values"]["all_rows"], player_type, None, player_data)

            if new_qual_type == "Games":
                min_value = calculated_values["stat_values"]["G"]
            elif new_qual_type == "IP":
                min_value = round(calculated_values["stat_values"]["IP"], 1)
            elif new_qual_type == "PA":
                min_value = calculated_values["stat_values"].get("PA", 0)
            elif new_qual_type == "BF":
                min_value = calculated_values["stat_values"].get("BF", 0)
            elif new_qual_type == "Pit":
                min_value = calculated_values["stat_values"]["Pit"]
            elif new_qual_type == "AB":
                min_value = calculated_values["stat_values"]["AB"]
            elif new_qual_type == "Seasons":
                min_value = len(set([row["Year"] for row in player_data["stat_values"]["all_rows"]]))
            elif new_qual_type == "Age":
                min_value = dateutil.relativedelta.relativedelta(datetime.datetime.now(), player_data["Birthday"])
            else:
                min_value = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=current_season), player_data["Birthday"])

            if min_value != 0 and min_value != float("inf") or isinstance(min_value, dateutil.relativedelta.relativedelta):
                if qual_str not in qual_map or (isinstance(min_value, numbers.Number) and min_value < qual_map[qual_str]["min_value"]) or (isinstance(min_value, dateutil.relativedelta.relativedelta) and (min_value + datetime.datetime.now()) < (qual_map[qual_str]["min_value"] + datetime.datetime.now())):
                    qual_map[qual_str] = {
                        "min_value" : min_value,
                        "is_first" : is_first,
                        "new_qual_type" : new_qual_type
                    }

def handle_multi_name_data(names, time_frames, player_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj):
    player_datas = []
    any_missing_games = []
    any_missing_pitch = []
    any_missing_salary = False
    any_missing_inf = False

    add_type = "plus"

    for index, name in enumerate(names):
        real_index = index if len(time_frames) > index else len(time_frames) - 1
        player_id, player_page = get_player(name, time_frames[real_index])
        if player_id and player_page:
            player_data, missing_games, missing_pitch, missing_salary, missing_inf = handle_multi_player_data(player_id, time_frames[real_index], player_type, player_page, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj)
            player_data["Search Term"] = name
            for sub_frame in time_frames[real_index]:
                if sub_frame["add_type"] == "minus":
                    add_type = "minus"

            player_datas.append(player_data)
            any_missing_games += missing_games
            any_missing_pitch += missing_pitch
            if missing_salary:
                any_missing_salary = True
            if missing_inf:
                any_missing_inf = True
        else:
            player_data = copy.deepcopy(missing_player_data)
            player_data["Search Term"] = name
            player_datas.append(player_data)
    
    # if len(player_datas) > 1:
    #     add_type = "plus"
    
    return combine_player_datas(player_datas, player_type, any_missing_games, any_missing_pitch, any_missing_salary, any_missing_inf, time_frames, add_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats), player_datas

def get_player(name, time_frames):
    name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", unidecode.unidecode(name))).strip()
    name_sub = re.sub(r"[^\w\s']", "", name).lower().strip()    
    if name_sub in manual_players:
        player_id = manual_players[name_sub]
        player_url = main_page_url_format.format(player_id[0], player_id)
        request = urllib.request.Request(player_url, headers=request_headers)
        try:
            response, player_page = url_request(request)
            return player_id, player_page
        except urllib.error.HTTPError as err:
            if err.status == 404:
                return None, None
            else:
                raise

    search_url = player_search_url_format.format(urllib.parse.quote_plus(name.replace(".", "")))
    request = urllib.request.Request(search_url, headers=request_headers)
    response = None
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return None, None
        else:
            raise
        

    url = urlparse(response.geturl())
    path = url.path[1:].split("/")

    if path[0] == "players":
        player_id = path[2][:-6]
        return player_id, player_page
    elif path[0] == "register" and path[1] == "player.fcgi":
        major_league_link = player_page.find("div", {"id" : "bottom_nav"}).find("p").find("a").get("href")
        path = major_league_link.split("/")
        if len(path) >= 4 and path[1] == "players":
            player_id = path[3][:-6]
            player_url = main_page_url_format.format(player_id[0], player_id)
            request = urllib.request.Request(player_url, headers=request_headers)
            response = None
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    return player_id, player_page
                else:
                    raise
            return player_id, player_page
        else:
            request = urllib.request.Request(response.geturl(), headers=request_headers)
            response = None
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    return None, None
                else:
                    raise
            return parse_qs(url.query)["id"][0], player_page
    elif path[0] == "search":
        player_div = player_page.find("div", {"id" : "players"})
        common_search_div = player_page.find("div", {"id" : "common_searches"})
        player_search_divs = []
        if player_div:
            player_search_divs += player_div.find_all("div", {"class" : "search-item"})
        if common_search_div:
            player_search_divs += common_search_div.find_all("div", {"class" : "search-item"})
        if not player_div and not common_search_div:
            other_div = player_page.find("div", {"id" : "milb_players"})
            if other_div:
                player_search_divs.append(other_div)
            other_div = player_page.find("div", {"id" : "japan_players"})
            if other_div:
                player_search_divs.append(other_div)
            other_div = player_page.find("div", {"id" : "nlb_players"})
            if other_div:
                player_search_divs.append(other_div)
            other_div = player_page.find("div", {"id" : "other_people"})
            if other_div:
                player_search_divs.append(other_div)

        if player_search_divs:
            matching_players = []
            for player_search_div in player_search_divs:
                player_url_div = player_search_div.find("div", {"class" : "search-item-url"})
                path = str(player_url_div.find(text=True))
                path_split = path.split("/")
                if path_split[1] == "players" or path_split[1] == "register":
                    if path_split[1] == "players":
                        player_id = path_split[3][:-6]
                    else:
                        url = urlparse(path)
                        player_id = parse_qs(url.query)["id"][0]

                    player_pos_div = player_search_div.find("div", {"class" : "search-item-name"})

                    player_name_time = str(player_pos_div.find("a").find(text=True)).split("(")
                    player_name = unidecode.unidecode(player_name_time[0].strip().lower())

                    parsed_name = create_human_name(player_name)
                    
                    last_name_match = False
                    is_exact = False
                    contains_name = False
                    if re.search(r"^" + name.lower() + "$", parsed_name.last) or re.search(r"^" + parsed_name.last + "$", name.lower()):
                        last_name_match = True
                        is_exact = True
                        contains_name = True
                    else:
                        if re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", re.sub(r"[^A-Za-z\s]", "", parsed_name.last)) or re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", parsed_name.last) + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())):
                            last_name_match = True
                            is_exact = True
                            contains_name = True
                        else:
                            if re.search(r"^" + player_name + "$", name.lower()) or re.search(r"^" + name.lower() + "$", player_name):
                                is_exact = True
                                contains_name = True
                            else:
                                if re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", player_name) + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())) or re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", re.sub(r"[^A-Za-z\s]", "", player_name)):
                                    is_exact = True
                                    contains_name = True
                                else:
                                    contains_name = name.lower() in player_name
                                    if not contains_name:
                                        contains_name = re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", player_name)
                                    if re.search(r"^" + name.lower() + "$", parsed_name.first) or re.search(r"^" + parsed_name.first + "$", name.lower()):
                                        is_exact = True
                                        contains_name = True
                                    elif re.search(r"^" + re.sub(r"[^A-Za-z\s]", "", name.lower()) + "$", parsed_name.first) or re.search(r"^" + parsed_name.first + "$", re.sub(r"[^A-Za-z\s]", "", name.lower())):
                                        is_exact = True
                                        contains_name = True
                                    elif name.lower() in parsed_name.first or name.lower() in parsed_name.last or parsed_name.first in name.lower() or parsed_name.last in name.lower():
                                        contains_name = True
                                    elif re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", parsed_name.first) or re.sub(r"[^A-Za-z\s]", "", name.lower()) in re.sub(r"[^A-Za-z\s]", "", parsed_name.last) or re.sub(r"[^A-Za-z\s]", "", parsed_name.first) in re.sub(r"[^A-Za-z\s]", "", name.lower()) or re.sub(r"[^A-Za-z\s]", "", parsed_name.last) in re.sub(r"[^A-Za-z\s]", "", name.lower()):
                                        contains_name = True
                    
                    has_first_name_match = False
                    name_split = name.split()
                    if len(name_split) >= 2:
                        if parsed_name.first.startswith(name_split[0].lower()):
                            has_first_name_match = True

                    year_start = 0
                    year_end = 0
                    if len(player_name_time) == 2:
                        player_info = "(" + player_name_time[1].strip()
                        years = player_info[1:][:-1].split("-")
                        year_start = int(years[0])
                        year_end = year_start
                        if len(years) == 2:
                            year_end = int(years[1])
                    
                    has_year_match_count = 0
                    if year_start:
                        for time_frame in time_frames:
                            frame_start = time_frame["time_start"]
                            frame_end = time_frame["time_end"]
                            if frame_start and frame_end and not isinstance(frame_start, dateutil.relativedelta.relativedelta) and not isinstance(frame_end, dateutil.relativedelta.relativedelta):
                                if not (isinstance(frame_start, int) or isinstance(frame_end, int)):
                                    frame_start = frame_start.year
                                    frame_end = frame_end.year
                                
                                player_range = range(year_start, year_end + 1)
                                frame_range = range(frame_start, frame_end + 1)

                                if set(player_range).intersection(frame_range):
                                    has_year_match_count += 1
                            
                    is_hof = bool(player_pos_div.find("span", {"class" : "search-hof"}))
                    is_allstar = bool(player_pos_div.find("span", {"class" : "search-allstar"}))
                    is_active = player_pos_div.find("a").parent.name == "strong"
                            
                    year_score = -1000
                    career_length = 0
                    if year_start and year_end:
                        current_year = current_season
                        if current_year < year_end:
                            year_end = current_year
                        year_score = math.log(1 / (current_year - year_end + 1), 1.2)
                        career_length = (year_end - year_start) + 1

                    score = 0
                    if is_hof:
                        score += 20
                    elif is_allstar:
                        score += 2
                    if is_active:
                        score += 2
                    score += year_score
                    score += career_length * .2

                    matching_players.append({
                        "name" : player_name,
                        "id" : player_id,
                        "has_years" : bool(career_length),
                        "is_exact" : is_exact,
                        "last_name_match" : last_name_match,
                        "has_year_match_count": has_year_match_count,
                        "contains_name" : contains_name,
                        "has_first_name_match" : has_first_name_match,
                        "prof_player" : path_split[1] == "players",
                        "score" : score
                    })
            if matching_players:
                matching_players.sort(key=lambda player: (-player["prof_player"], -player["has_years"], -player["has_year_match_count"], -player["is_exact"], -player["last_name_match"], -player["contains_name"], -player["has_first_name_match"], -player["score"]))
                matching_player = matching_players[0]

                if matching_player["prof_player"]:
                    player_url = main_page_url_format.format(matching_player["id"][0], matching_player["id"])
                else:
                    player_url = register_url_format.format(matching_player["id"])
                    request = urllib.request.Request(player_url, headers=request_headers)
                    response = None
                    try:
                        response, player_page = url_request(request)
                    except urllib.error.HTTPError as err:
                        if err.status == 404:
                            pass
                        else:
                            raise

                    if response:
                        major_league_link = player_page.find("div", {"id" : "bottom_nav"}).find("p").find("a").get("href")
                        path = major_league_link.split("/")
                        if len(path) >= 4 and path[1] == "players":
                            player_id = path[3][:-6]
                            player_url = main_page_url_format.format(player_id[0], player_id)
                            matching_player["id"] = player_id
                        
                request = urllib.request.Request(player_url, headers=request_headers)
                response = None
                try:
                    response, player_page = url_request(request)
                except urllib.error.HTTPError as err:
                    if err.status == 404:
                        return None, None
                    else:
                        raise
                return matching_player["id"], player_page
    return None, None

def combine_player_datas(player_datas, player_type, any_missing_games, any_missing_pitch, any_missing_salary, any_missing_inf, time_frames, add_type, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats):    
    player_data = {
        "ids": [],
        "mlb_ids" : [],
        "quals" : [],
        "stat_values": {},
        "add_type" : add_type
    }

    player_data["stat_values"]["DateStart"] = []
    player_data["stat_values"]["DateEnd"] = []
    player_data["stat_values"]["Birthdays"] = []
    player_data["stat_values"]["Deathdays"] = []
    player_data["stat_values"]["Player"] = []
    player_data["stat_values"]["Search Term"] = []
    player_data["stat_values"]["Raw Player"] = ""
    player_data["stat_values"]["Raw Range"] = ""
    player_data["stat_values"]["Raw Time"] = ""
    player_data["stat_values"]["Raw Quals"] = "Query: "
    
    is_playoffs = None
    has_reg_season = False
    has_playoffs = False
    for subb_frame in time_frames:
        for time_frame in subb_frame:
            if "Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Event Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Event Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Or Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Or Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Or Event Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Or Event Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Day Of Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Of Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Day After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day After Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Day Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Before Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Game After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Game After Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Game Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Game Before Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Season Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Or Season Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Or Season Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Season After Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season After Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Season Before Sub Query" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Season Before Sub Query"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Day After Pitching" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day After Pitching"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Day After Hitting" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day After Hitting"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Day Before Pitching" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Before Pitching"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Day Before Hitting" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Day Before Hitting"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Previous Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Previous Playing With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Upcoming Playing With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Upcoming Playing With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Previous Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Previous Playing Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Upcoming Playing Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Upcoming Playing Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Playing Same Game" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Game"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Playing Same Opponents" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Opponents"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Playing Same Date" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Playing Same Date"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Batting Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Batting Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Pitching Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Pitching Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Driven In" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Driven In"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Batted In" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Batted In"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Back To Back With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Back To Back With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Batting In Front Of" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Batting In Front Of"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Batting Behind" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Batting Behind"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Batting Next To" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Batting Next To"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Caught By" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Caught By"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Stealing On" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Stealing On"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Teammate On First" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Teammate On First"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Teammate On Second" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Teammate On Second"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Teammate On Third" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Teammate On Third"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Teammate On Base" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Teammate On Base"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Opponent On First" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Opponent On First"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Opponent On Second" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Opponent On Second"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Opponent On Third" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Opponent On Third"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "Opponent On Base" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["Opponent On Base"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "On Field With" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["On Field With"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            if "On Field Against" in time_frame["qualifiers"]:
                for qualifier in time_frame["qualifiers"]["On Field Against"]:
                    for player in qualifier["values"]:
                        any_missing_games += player["missing_games"]
                        any_missing_pitch += player["missing_pitch"]
                        if player["missing_salary"]:
                            any_missing_salary = True
                        if player["missing_inf"]:
                            any_missing_inf = True
            
            if time_frame["playoffs"]:
                if time_frame["playoffs"] == "Only":
                    has_playoffs = True
                    if not is_playoffs or is_playoffs == "Only":
                        is_playoffs = "Only"
                    else:
                        is_playoffs = "Include"
                else:
                    has_reg_season = True
                    is_playoffs = "Include"
            else:
                has_reg_season = True
                if is_playoffs:
                    is_playoffs = "Include"

    player_data["stat_values"]["any_missing_games"] = any_missing_games
    player_data["stat_values"]["any_missing_pitch"] = any_missing_pitch
    player_data["stat_values"]["any_missing_salary"] = any_missing_salary
    player_data["stat_values"]["any_missing_inf"] = any_missing_inf
    player_data["stat_values"]["is_playoffs"] = is_playoffs

    format_str = "b" if player_type["da_type"] == "Batter" else "p"

    all_rows = []
    sub_add_rows = []
    multiple_matches = False
    has_season_stats = True
    has_season_pitch_stats = False
    has_award_stats = True
    is_only_ws = True
    is_only_cs = True
    ind_type = set()
    player_images = []
    player_teams = []
    player_positions = []
    player_flags = []
    player_numbers = []
    player_hofs = []
    has_one_player = False
    for sub_player_data in player_datas:
        sub_range = ""
        raw_sub_range = ""
        raw_sub_time = ""
        all_rows += sub_player_data["rows"]
        sub_add_rows.append(sub_player_data["rows"])

        if sub_player_data["Player"] != "No Player Match!":
            has_one_player = True

        for index, date_start in enumerate(sub_player_data["DateStart"]):
            if len(player_data["stat_values"]["DateStart"]) - 1 < index:
                if not isinstance(date_start, int) and not isinstance(date_start, datetime.date):
                    player_data["stat_values"]["DateStart"].append(date_start.date())
                else:
                    player_data["stat_values"]["DateStart"].append(date_start)
            elif date_start < player_data["stat_values"]["DateStart"][index]:
                if not isinstance(date_start, int) and not isinstance(date_start, datetime.date):
                    player_data["stat_values"]["DateStart"][index] = date_start.date()
                else:
                    player_data["stat_values"]["DateStart"][index] = date_start
        for index, date_end in enumerate(sub_player_data["DateEnd"]):
            if len(player_data["stat_values"]["DateEnd"]) - 1 < index:
                if not isinstance(date_end, int) and not isinstance(date_end, datetime.date):
                    player_data["stat_values"]["DateEnd"].append(date_end.date())
                else:
                    player_data["stat_values"]["DateEnd"].append(date_end)
            elif date_end > player_data["stat_values"]["DateEnd"][index]:
                if not isinstance(date_end, int) and not isinstance(date_end, datetime.date):
                     player_data["stat_values"]["DateEnd"][index] = date_end.date()
                else:
                    player_data["stat_values"]["DateEnd"][index] = date_end
            
            date_start = sub_player_data["DateStart"][index]

            if isinstance(date_start, int):
                original_start_year = date_start
                original_end_year = date_end

                if date_start in sub_player_data["game_valid_years"]:
                    date_start = "[" + str(date_start) + "](" + game_splits_url_format.format(sub_player_data["id"], format_str, str(date_start)) + ")"
                if date_end in sub_player_data["game_valid_years"]:
                    date_end = "[" + str(date_end) + "](" + game_splits_url_format.format(sub_player_data["id"], format_str, str(date_end)) + ")"
                
                if "date" not in extra_stats:
                    if date_start == date_end:
                        raw_sub_range += str(date_start)
                    else:
                        raw_sub_range += str(date_start) + " to " + str(date_end)
                    
                    if add_type == "minus":
                        raw_sub_range += " DIFF "
                    else:
                        raw_sub_range += " + "

                start_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(original_start_year) + 1)
                end_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(original_end_year) + 1)
                
                start_age = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=original_start_year), sub_player_data["Birthday"])
                end_age = dateutil.relativedelta.relativedelta(player_season_age_date.replace(year=original_end_year), sub_player_data["Birthday"])

                date_start = str(date_start) + " [" + start_season + " Season - Age: " + str(start_age.years) + "]"
                date_end = str(date_end) + " [" + end_season + " Season - Age: " + str(end_age.years) + "]"
                
                raw_date_start = str(original_start_year)
                raw_date_end = str(original_end_year)

                raw_time_start = "[" + start_season + " Season - Age: " + str(start_age.years) + "]"
                raw_time_end = "[" + end_season + " Season - Age: " + str(end_age.years) + "]"
            else:
                original_start_date = date_start
                original_end_date = date_end

                date_start_link = None
                date_end_link = None
                start_season = None
                end_season = None
                for row in sub_player_data["rows"]:
                    if row["DateTime"] == date_start:
                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                            date_start_link = "https://www.baseball-reference.com" + row["GameLink"]
                        else:
                            date_start_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                        start_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(row["Year"]) + 1)
                    if row["DateTime"] == date_end:
                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                            date_end_link = "https://www.baseball-reference.com" + row["GameLink"]
                        else:
                            date_end_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                        end_season = inflect_engine.ordinal(sub_player_data["year_valid_years"].index(row["Year"]) + 1)
                    
                    if date_start_link and date_end_link:
                        break
                date_start = "[" + str(date_start.date()) + "](" + date_start_link + ")"
                date_end = "[" + str(date_end.date()) + "](" + date_end_link + ")"
            
                if "date" not in extra_stats:
                    if date_start == date_end:
                        raw_sub_range += str(date_start)
                    else:
                        raw_sub_range += str(date_start) + " to " + str(date_end)

                    if add_type == "minus":
                        raw_sub_range += " DIFF "
                    else:
                        raw_sub_range += " + "

                start_age = dateutil.relativedelta.relativedelta(original_start_date, sub_player_data["Birthday"])
                start_date_diff_str = ""
                if start_age.years:
                    start_date_diff_str += str(start_age.years).replace("-", "") + "Y"
                if start_age.months:
                    if start_age.years:
                        start_date_diff_str += "-"
                    start_date_diff_str += str(start_age.months).replace("-", "") + "M"
                if start_age.days:
                    if start_age.years or start_age.months:
                        start_date_diff_str += "-"
                    start_date_diff_str += str(start_age.days).replace("-", "") + "D"

                end_age = dateutil.relativedelta.relativedelta(original_end_date, sub_player_data["Birthday"])
                end_date_diff_str = ""
                if end_age.years:
                    end_date_diff_str += str(end_age.years).replace("-", "") + "Y"
                if end_age.months:
                    if end_age.years:
                        end_date_diff_str += "-"
                    end_date_diff_str += str(end_age.months).replace("-", "") + "M"
                if end_age.days:
                    if end_age.years or end_age.months:
                        end_date_diff_str += "-"
                    end_date_diff_str += str(end_age.days).replace("-", "") + "D"

                date_start += " [" + start_season + " Season - Age: " + start_date_diff_str + "]"
                date_end += " [" + end_season + " Season - Age: " + end_date_diff_str + "]"

                raw_date_start = str(original_start_date.date())
                raw_date_end = str(original_end_date.date())

                raw_time_start = "[" + start_season + " Season - Age: " + start_date_diff_str + "]"
                raw_time_end = "[" + end_season + " Season - Age: " + end_date_diff_str + "]"

            if "date" in extra_stats:
                dates = sorted(list(set([row["DateTime"] for row in sub_player_data["rows"]])))
                if len(dates) > 20:
                    raise CustomMessageException("Cannot show more than 20 dates!")

                for date_start in dates:
                    if isinstance(date_start, int):
                        if date_start in sub_player_data["game_valid_years"]:
                            date_start = "[" + str(date_start) + "](" + game_splits_url_format.format(sub_player_data["id"], format_str, str(date_start)) + ")"                        
                        raw_sub_range += str(date_start) + " + "
                    else:
                        date_start_link = None
                        for row in sub_player_data["rows"]:
                            if row["DateTime"] == date_start:
                                if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                                    date_start_link = "https://www.baseball-reference.com" + row["GameLink"]
                                else:
                                    date_start_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                                break
                        raw_sub_range += "[" + str(date_start.date()) + "](" + date_start_link + ")" + " + "
            else:
                if date_start == date_end:
                    sub_range += str(date_start)
                else:
                    sub_range += str(date_start) + " to " + str(date_end)
                
                if add_type == "minus":
                    sub_range += " DIFF "
                else:
                    sub_range += " + "

                if raw_time_start == raw_time_end:
                    raw_sub_time += str(raw_time_start)
                else:
                    raw_sub_time += str(raw_time_start) + " to " + str(raw_time_end)

                if add_type == "minus":
                    raw_sub_time += " DIFF "
                else:
                    raw_sub_time += " + "

        player_data["stat_values"]["Raw Player"] += "{" + (sub_player_data["Player"] if "hide-name" not in extra_stats else "?????") + "} " + ("DIFF" if add_type == "minus" else "+") + " "
        if raw_sub_range[:(-6 if add_type == "minus" else -3)]:
            player_data["stat_values"]["Raw Range"] += "{" + raw_sub_range[:(-6 if add_type == "minus" else -3)] + "}"
        else:
            player_data["stat_values"]["Raw Range"] += "{No Matching Games!}"
        
        if add_type == "minus":
            player_data["stat_values"]["Raw Range"] += " DIFF "
        else:
            player_data["stat_values"]["Raw Range"] += " + "

        if raw_sub_time[:(-6 if add_type == "minus" else -3)]:
            player_data["stat_values"]["Raw Time"] += "{" + raw_sub_time[:(-6 if add_type == "minus" else -3)] + "}"

            if add_type == "minus":
                player_data["stat_values"]["Raw Time"] += " DIFF "
            else:
                player_data["stat_values"]["Raw Time"] += " + "

        if not multiple_matches and len(sub_player_data["DateEnd"]) > 1 and len(player_datas) > 1:
            multiple_matches = True

        player_data["ids"].append(sub_player_data["id"])
        player_data["mlb_ids"].append(sub_player_data["mlb_id"])
        player_data["stat_values"]["Player"].append((sub_player_data["Player"] if "hide-name" not in extra_stats else "?????"))
        player_data["stat_values"]["Birthdays"].append(sub_player_data["Birthday"])
        player_data["stat_values"]["Deathdays"].append(sub_player_data["Deathday"])
        player_data["stat_values"]["Search Term"].append(sub_player_data["Search Term"])
        player_data["stat_values"]["LastUpdated"] = sub_player_data["LastUpdated"]

        if not sub_player_data["has_season_stats"]:
            has_season_stats = False
        if sub_player_data["has_season_pitch_stats"]:
            has_season_pitch_stats = True
        if not sub_player_data["has_award_stats"]:
            has_award_stats = False
        if not sub_player_data["is_only_ws"]:
            is_only_ws = False
        if not sub_player_data["is_only_cs"]:
            is_only_cs = False
        ind_type.update(sub_player_data["ind_type"])
        player_images.append(sub_player_data["player_image_url"])
        player_teams.append(sub_player_data["player_current_team"])
        player_positions.append(sub_player_data["player_position"])
        player_numbers.append(sub_player_data["player_current_number"])
        player_flags.append(sub_player_data["player_flag"])
        player_hofs.append(sub_player_data["player_hof"])

    if has_reg_season and has_playoffs:
        has_award_stats = False

    player_data["has_season_stats"] = has_season_stats
    player_data["has_season_pitch_stats"] = has_season_pitch_stats
    player_data["has_award_stats"] = has_award_stats
    player_data["is_only_ws"] = is_only_ws
    player_data["is_only_cs"] = is_only_cs
    player_data["ind_type"] = ind_type
    player_data["player_image_url"] = player_images
    player_data["player_current_team"] = player_teams
    player_data["player_position"] = player_positions
    player_data["player_flag"] = player_flags
    player_data["player_current_number"] = player_numbers
    player_data["player_hof"] = player_hofs

    player_data["stat_values"]["Raw Player"] = player_data["stat_values"]["Raw Player"][:(-6 if add_type == "minus" else -3)]
    player_data["stat_values"]["Raw Range"] = player_data["stat_values"]["Raw Range"][:(-6 if add_type == "minus" else -3)]
    player_data["stat_values"]["Raw Time"] = player_data["stat_values"]["Raw Time"][:(-6 if add_type == "minus" else -3)]
    if not multiple_matches:
        player_data["stat_values"]["Raw Player"] = player_data["stat_values"]["Raw Player"].replace("{", "").replace("}", "")
        player_data["stat_values"]["Raw Range"] = player_data["stat_values"]["Raw Range"].replace("{", "").replace("}", "")
        player_data["stat_values"]["Raw Time"] = player_data["stat_values"]["Raw Time"].replace("{", "").replace("}", "")

    if not has_one_player:
        return player_data

    jaws_matches = 0
    for sub_player_data in player_datas:
        if "seperate_rows" in sub_player_data and sub_player_data["seperate_rows"]:
            for seperate_row in sub_player_data["seperate_rows"]:
                if seperate_row:
                    jaws_matches += 1
    
    if jaws_matches > 1:
        for row in all_rows:
            if "JAWS" in row:
                del row["JAWS"]
            if "WAR7yr" in row:
                del row["WAR7yr"]
            if "Rdrs/yr" in row:
                del row["Rdrs/yr"]
            if "Rbat/Yr" in row:
                del row["Rbat/Yr"]
            if "Rbaser/Yr" in row:
                del row["Rbaser/Yr"]
            if "Rfield/Yr" in row:
                del row["Rfield/Yr"]
            if "oWAR/Yr" in row:
                del row["oWAR/Yr"]
            if "dWAR/Yr" in row:
                del row["dWAR/Yr"]
            if "WAAPos/Yr" in row:
                del row["WAAPos/Yr"]
            if "WARPos/Yr" in row:
                del row["WARPos/Yr"]
            if "WAAPitch/Yr" in row:
                del row["WAAPitch/Yr"]
            if "WARPitch/Yr" in row:
                del row["WARPitch/Yr"]
            if "WAA/Yr" in row:
                del row["WAA/Yr"]
            if "WAR/Yr" in row:
                del row["WAR/Yr"]
            if "WAAPos/162" in row:
                del row["WAAPos/162"]
            if "oWAR/162" in row:
                del row["oWAR/162"]
            if "dWAR/162" in row:
                del row["dWAR/162"]
            if "WARPos/162" in row:
                del row["WARPos/162"]
        all_rows[len(all_rows) - 1]["WAR7yr"] = calculate_war_7yr_multiplayer(player_datas, player_type, is_pitching_jaws)
    
    player_data["stat_values"]["all_rows"] = all_rows
    player_data["stat_values"]["seperate_rows"] = sub_add_rows
    
    if add_type == "minus":
        parsed_stats = set()
        total_count = sum([len(sub_player_data["seperate_rows"]) for sub_player_data in player_datas])
        for sub_player_data in player_datas:
            for sub_all_rows in sub_player_data["seperate_rows"]:
                calculated_values = calculate_values(sub_all_rows, player_type, time_frames, player_data, extra_stats)
                for stat in calculated_values["stat_values"]:
                    if stat in parsed_stats:
                        if isinstance(player_data["stat_values"][stat], numbers.Number):
                            if abs(calculated_values["stat_values"][stat]):
                                player_data["stat_values"][stat] = (player_data["stat_values"][stat] - calculated_values["stat_values"][stat]) / abs(calculated_values["stat_values"][stat])
                            else:
                                if player_data["stat_values"][stat] > 0:
                                    player_data["stat_values"][stat] = float("inf")
                                elif player_data["stat_values"][stat] < 0:
                                    player_data["stat_values"][stat] = -float("inf")
                                else:
                                    player_data["stat_values"][stat] = 0
                        elif stat == "TmRec":
                            old_rec_split = player_data["stat_values"][stat].split(":")
                            new_rec_split = calculated_values["stat_values"][stat].split(":")
                            player_data["stat_values"][stat] = str(round_value(float(old_rec_split[0]) - float(new_rec_split[0]))) + ":" + str(round_value(float(old_rec_split[1]) - float(new_rec_split[1])))
                            if len(old_rec_split) == 3 or len(new_rec_split) == 3:
                                old_ties = 0
                                if len(old_rec_split) == 3:
                                    old_ties = old_rec_split[2]
                                new_ties = 0
                                if len(new_rec_split) == 3:
                                    new_ties = new_rec_split[2]
                                player_data["stat_values"][stat] += ":" + str(round_value(float(old_ties) - float(new_ties)))
                        elif stat in string_stats:
                            if not player_data["stat_values"][stat]:
                                player_data["stat_values"][stat] = ""
                            player_data["stat_values"][stat] += calculated_values["stat_values"][stat].upper() + "-"
                    else:
                        if stat not in player_data["stat_values"]:
                            player_data["stat_values"][stat] = calculated_values["stat_values"][stat]
                            parsed_stats.add(stat)
                            if isinstance(player_data["stat_values"][stat], numbers.Number):
                                if total_count == 1:
                                    if player_data["stat_values"][stat] > 0:
                                        player_data["stat_values"][stat] = float("inf")
                                    elif player_data["stat_values"][stat] < 0:
                                        player_data["stat_values"][stat] = -float("inf")
                                    else:
                                        player_data["stat_values"][stat] = 0
                
                for stat in player_data["stat_values"]:
                    if stat in string_stats:
                        if player_data["stat_values"][stat]:
                            parsed_teams = set()
                            stat_vals = player_data["stat_values"][stat].split("-")
                            player_data["stat_values"][stat] = ""
                            for stat_val in stat_vals:
                                if stat_val and stat_val not in parsed_teams:
                                    player_data["stat_values"][stat] += stat_val + "-"
                                    parsed_teams.add(stat_val)
                            player_data["stat_values"][stat] = player_data["stat_values"][stat][:-1]
    else:
        calculated_values = calculate_values(all_rows, player_type, time_frames, player_data, extra_stats)
        for stat in calculated_values["stat_values"]:
            if stat not in player_data["stat_values"]:
                player_data["stat_values"][stat] = calculated_values["stat_values"][stat]

    if player_type["da_type"]:
        for header in headers[player_type["da_type"]].keys():
            if header not in player_data["stat_values"]:
                if not header.startswith("Player"):
                    player_data["stat_values"][header] = 0.0
    
    best_table = 0
    worst_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-season"):
            if len(extra_stat.split("-")) == 3:
                best_table = int(extra_stat.split("-")[2])
            else:
                best_table = 1
        elif extra_stat.startswith("worst-season"):
            if len(extra_stat.split("-")) == 3:
                worst_table = int(extra_stat.split("-")[2])
            else:
                worst_table = 1
    best_games_table = 0
    worst_games_table = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("best-game"):
            if len(extra_stat.split("-")) == 3:
                best_games_table = int(extra_stat.split("-")[2])
            else:
                best_games_table = 1
        elif extra_stat.startswith("worst-game"):
            if len(extra_stat.split("-")) == 3:
                worst_games_table = int(extra_stat.split("-")[2])
            else:
                worst_games_table = 1
    seasons_leading_start = 0
    seasons_leading_end = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading_end = int(extra_stat.split("-")[2])
                if len(extra_stat.split("-")) >= 4:
                    seasons_leading_start = int(extra_stat.split("-")[2])
                else:
                    seasons_leading_start = 1
            else:
                seasons_leading_start = 1
                seasons_leading_end = 1

    all_unique_quals = True
    last_qual_str = None
    for subb_frame in time_frames:
        for subbb_frame in subb_frame:
            qual_str = determine_raw_str(subbb_frame)
            if not last_qual_str:
                last_qual_str = qual_str
            if last_qual_str != qual_str:
                all_unique_quals = False
                break
        if not all_unique_quals:
            break

    first_qual = True
    multiple_matches = len(time_frames) > 1
    for subb_index, subb_frame in enumerate(time_frames):
        if not multiple_matches and len(subb_frame) > 1:
            multiple_matches = True
        if all_unique_quals:
            multiple_matches = False
        for subbb_index, subbb_frame in enumerate(subb_frame):
            player_data["quals"].append(subbb_frame["qualifiers"])
            if all_unique_quals and (subb_index or subbb_index):
                continue

            qual_str = ""
            if multiple_matches:
                qual_str += "("
            
            qual_str += determine_raw_str(subbb_frame)
            
            if multiple_matches:
                qual_str += ")"
            if qual_str and qual_str != " ()":
                if not first_qual:
                    if add_type == "minus":
                        player_data["stat_values"]["Raw Quals"] += " DIFF "
                    else:
                        player_data["stat_values"]["Raw Quals"] += " + "
                else:
                    first_qual = False

                player_data["stat_values"]["Raw Quals"] += qual_str
    
        if remove_duplicates:
            if first_qual:
                first_qual = False
            
            player_data["stat_values"]["Raw Quals"] += " [Duplicates Removed]"
        
        if remove_duplicate_games:
            if first_qual:
                first_qual = False
            
            player_data["stat_values"]["Raw Quals"] += " [Duplicate Games Removed]"
        
        if best_table:
            if first_qual:
                first_qual = False
            
            if best_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Best Season]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Best " + str(best_table) + " Seasons]"
        
        if worst_table:
            if first_qual:
                first_qual = False
            
            if best_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Worst Season]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Worst " + str(worst_table) + " Seasons]"
        
        if best_games_table:
            if first_qual:
                first_qual = False
            
            if best_games_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Best Game]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Best " + str(best_games_table) + " Games]"
        
        if worst_games_table:
            if first_qual:
                first_qual = False
            
            if worst_games_table == 1:
                player_data["stat_values"]["Raw Quals"] += " [Worst Game]"
            else:
                player_data["stat_values"]["Raw Quals"] += " [Worst " + str(worst_games_table) + " Games]"
        
        if seasons_leading_start:
            if first_qual:
                first_qual = False
            
            if seasons_leading_start == seasons_leading_end:
                player_data["stat_values"]["Raw Quals"] += " [Seasons In " + get_time_str(seasons_leading_start, True) + "]"
            elif seasons_leading_end == 1:
                player_data["stat_values"]["Raw Quals"] += " [Seasons In Top " + str(seasons_leading_end) + "]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [Seasons In Top " + str(seasons_leading_start) + "-" + str(seasons_leading_end) + "]"

        if "missing-game" in extra_stats:
            if player_data["stat_values"]["any_missing_games"]:
                if len(player_data["stat_values"]["any_missing_games"]) > 20:
                    raise CustomMessageException("Cannot show more than 20 dates!")

                player_data["stat_values"]["any_missing_games"] = sorted(player_data["stat_values"]["any_missing_games"], key=customGameDateSort)
                player_data["stat_values"]["Raw Quals"] +=  " [Missing Games: " + " + ".join(player_data["stat_values"]["any_missing_games"]) + "]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [No Missing Games!]"
        elif "missing-game-count" in extra_stats or player_data["stat_values"]["any_missing_games"]:
            if player_data["stat_values"]["any_missing_games"]:
                player_data["stat_values"]["Raw Quals"] +=  " [" + str(len(player_data["stat_values"]["any_missing_games"])) + " Missing Game(s)]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [No Missing Games!]"
    
        if "missing-pitch" in extra_stats:
            if player_data["stat_values"]["any_missing_pitch"]:
                if len(player_data["stat_values"]["any_missing_pitch"]) > 20:
                    raise CustomMessageException("Cannot show more than 20 dates!")

                player_data["stat_values"]["any_missing_pitch"] = sorted(player_data["stat_values"]["any_missing_pitch"], key=customGameDateSort)
                player_data["stat_values"]["Raw Quals"] +=  " [Missing Pitch Games: " + " + ".join(player_data["stat_values"]["any_missing_pitch"]) + "]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [No Missing Pitch Games!]"
        elif "missing-pitch-count" in extra_stats or (player_data["stat_values"]["any_missing_pitch"] and "show-stat-pit" in extra_stats):
            if player_data["stat_values"]["any_missing_pitch"]:
                player_data["stat_values"]["Raw Quals"] +=  " [" + str(len(player_data["stat_values"]["any_missing_pitch"])) + " Missing Pitch Game(s)]"
            else:
                player_data["stat_values"]["Raw Quals"] +=  " [No Missing Pitch Games!]"
    
    player_data["stat_values"]["Raw Quals"] = player_data["stat_values"]["Raw Quals"].strip()

    for row in player_data["stat_values"]["all_rows"]:
        keys_to_delete = set()
        for key in row:
            if key in ("Previous Row", "Upcoming Row"):
                keys_to_delete.add(key)
        for key in keys_to_delete:
            del row[key]
    
    if "hide-year" in extra_stats:
        player_data["stat_values"]["Raw Range"] = "Dates: ?????"
        player_data["stat_values"]["Raw Time"] = ""
    elif "hide-name" in extra_stats:
        match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", player_data["stat_values"]["Raw Range"])
        while match:
            player_data["stat_values"]["Raw Range"] = player_data["stat_values"]["Raw Range"].replace(match.group(0), match.group(1), 1)
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", player_data["stat_values"]["Raw Range"])
        player_data["stat_values"]["Raw Time"] = ""

    if "hide-query" in extra_stats:
        player_data["stat_values"]["Raw Quals"] = "Query: ?????"

    return player_data

def customGameDateSort(game_link):
    match = re.match(r"\[(.+)\]\(.+\)", game_link)
    return dateutil.parser.parse(match.group(1))

def calculate_values(all_rows, player_type, time_frames, og_player_data, extra_stats={}):
    has_own_jaws = False
    has_own_war162 = False
    has_pitch_val_year_stats = False
    has_pos_val_year_stats = False
    has_war_year_stats = False
    has_waa_year_stats = False

    player_data = {
        "stat_values" : {
            "DateStart" : og_player_data["stat_values"]["DateStart"],
            "DateEnd" : og_player_data["stat_values"]["DateEnd"],
            "is_playoffs" : og_player_data["stat_values"]["is_playoffs"]
        }
    }

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    if player_type["da_type"]:
        for header in headers[player_type["da_type"]].keys():
            if header not in player_data["stat_values"]:
                if not header.startswith("Player"):
                    player_data["stat_values"][header] = 0.0

    for row_data in all_rows:
        for stat in row_data:
            if stat != "is_playoffs" and stat in player_data["stat_values"] and isinstance(row_data[stat], numbers.Number) and isinstance(player_data["stat_values"][stat], numbers.Number) and (seasons_leading or ((not stat in qualifier_map or stat == "Team Score" or stat == "Opponent Score") and (stat in ("JAWS", "Rbat/Yr", "Rbaser/Yr", "Rfield/Yr", "oWAR/Yr", "dWAR/Yr", "WAAPos/Yr", "WARPos/Yr", "WAAPitch/Yr", "WARPitch/Yr", "WAA/Yr", "WAR/Yr", "WAAPos/162", "oWAR/162", "dWAR/162", "WARPos/162") or not stat in formulas[player_type["da_type"]]) and not stat in advanced_stats["Batter"] and not stat in advanced_stats["Pitcher"])):
                if stat in decimal_stats:
                    player_data["stat_values"][stat] = round_value(player_data["stat_values"][stat] + row_data[stat], 1)
                else:
                    player_data["stat_values"][stat] += row_data[stat]
                if stat == "JAWS":
                    has_own_jaws = True
                elif stat == "WARPos/162":
                    has_own_war162 = True
                elif stat in ["Rbat/Yr", "Rbaser/Yr", "Rfield/Yr", "oWAR/Yr", "dWAR/Yr", "WAAPos/Yr", "WARPos/Yr"]:
                    has_pos_val_year_stats = True
                elif stat in ["WAAPitch/Yr", "WARPitch/Yr"]:
                    has_pitch_val_year_stats = True
                elif stat == "WAA/Yr":
                    has_waa_year_stats = True
                elif stat == "WAR/Yr":
                    has_war_year_stats = True

            elif stat in string_stats:
                if not player_data["stat_values"][stat]:
                    player_data["stat_values"][stat] = ""
                player_data["stat_values"][stat] += row_data[stat].upper() + "-"

    if "IP" in player_data["stat_values"]:
        frac, whole = math.modf(player_data["stat_values"]["IP"])
        frac = round_value(frac, 1)
        player_data["stat_values"]["IP"] = whole
        if frac == 0.3:
            player_data["stat_values"]["IP"] += 1/3
        elif frac == 0.7:
            player_data["stat_values"]["IP"] += 2/3
        elif frac == 1.0:
            player_data["stat_values"]["IP"] += 1

    if "Inn" in player_data["stat_values"]:
        frac, whole = math.modf(player_data["stat_values"]["Inn"])
        frac = round_value(frac, 1)
        player_data["stat_values"]["Inn"] = whole
        if frac == 0.3:
            player_data["stat_values"]["Inn"] += 1/3
        elif frac == 0.7:
            player_data["stat_values"]["Inn"] += 2/3
        elif frac == 1.0:
            player_data["stat_values"]["Inn"] += 1

    if "IPStart" in player_data["stat_values"]:
        frac, whole = math.modf(player_data["stat_values"]["IPStart"])
        frac = round_value(frac, 1)
        player_data["stat_values"]["IPStart"] = whole
        if frac == 0.3:
            player_data["stat_values"]["IPStart"] += 1/3
        elif frac == 0.7:
            player_data["stat_values"]["IPStart"] += 2/3
        elif frac == 1.0:
            player_data["stat_values"]["IPStart"] += 1

    for stat in player_data["stat_values"]:
        if stat in string_stats:
            if player_data["stat_values"][stat]:
                parsed_teams = set()
                stat_vals = player_data["stat_values"][stat].split("-")
                player_data["stat_values"][stat] = ""
                for stat_val in stat_vals:
                    if stat_val and stat_val not in parsed_teams:
                        player_data["stat_values"][stat] += stat_val + "-"
                        parsed_teams.add(stat_val)
                player_data["stat_values"][stat] = player_data["stat_values"][stat][:-1]

    for stat in formulas[player_type["da_type"]]:
        if stat == "JAWS" and has_own_jaws:
            continue
        elif stat in ["WAAPos/162", "dWARPos/162", "oWARPos/162", "WARPos/162"] and has_own_war162:
            continue
        elif stat in ["Rbat/Yr", "Rbaser/Yr", "Rfield/Yr", "oWAR/Yr", "dWAR/Yr", "WAAPos/Yr", "WARPos/Yr"] and has_pos_val_year_stats:
            continue
        elif stat in ["WAAPitch/Yr", "WARPitch/Yr"] and has_pitch_val_year_stats:
            continue
        elif stat == "WAA/Yr" and has_waa_year_stats:
            continue
        elif stat == "WAR/Yr" and has_war_year_stats:
            continue

        if not seasons_leading or stat == "TmRec":
            formula = formulas[player_type["da_type"]][stat]
            value = calculate_formula(stat, og_player_data, player_type, formula, player_data["stat_values"], all_rows)
            player_data["stat_values"][stat] = value

    if not seasons_leading:
        calculate_advanced_stats(player_data["stat_values"], all_rows, player_type, time_frames)

    return player_data

def handle_multi_player_data(player_id, time_frames, player_type, player_page, remove_duplicates, remove_duplicate_games, is_pitching_jaws, extra_stats, comment_obj):
    player_data = {
        "id": player_id,
        "mlb_id" : None,
        "rows" : [],
        "seperate_rows" : []
    }

    if player_type["da_type"] == None:
        player_type["da_type"] = get_player_type(player_page)

    player_data["Player"] = get_player_name(player_page)
    #player_data["LastUpdated"] = get_last_updated(player_page)
    player_data["LastUpdated"] = None
    player_data["Birthday"] = get_player_birthday(player_page)
    player_data["Deathday"] = get_player_deathday(player_page)
    player_data["Player_Active"] = get_player_is_active(player_id, player_page)
    player_data["player_image_url"] = get_player_image(player_page)
    player_data["player_current_team"], player_data["player_current_number"], player_data["player_all_numbers"], player_data["player_team_map"], player_data["numbers_year_map"] = get_player_current_team_number(player_id, player_page)
    player_data["player_position"] = get_player_position(player_page)
    if not player_data["player_position"]:
        try:
            minor_league_link = player_page.find("div", {"id" : "bottom_nav"}).find("a", text="Minor Lg Stats")
            if minor_league_link:
                request = urllib.request.Request("https://www.baseball-reference.com" + minor_league_link.get("href"), headers=request_headers)
                response, minor_player_page = url_request(request)
                player_data["player_position"] = get_player_position(minor_player_page)
        except Exception:
            pass
    player_data["player_jaws_position"] = get_player_jaws_position(player_page)
    player_data["player_flag"] = get_player_country(player_page)
    player_data["player_hof"] = get_player_hof(player_page)
    player_data["year_valid_years"], player_data["reg_year_valid_years"], player_data["game_valid_years"], player_data["total_game_valid_years"], player_data["pitch_valid_years"], player_data["catch_valid_years"], valid_teams, valid_teams_raw_key, valid_year_teams = get_valid_years(player_page, player_type)
    player_data["has_season_stats"] = True
    player_data["has_award_stats"] = True
    player_data["is_only_ws"] = True
    player_data["is_only_cs"] = True
    player_data["is_full_career"] = False
    player_data["ind_type"] = set()

    player_data["DateStart"] = []
    player_data["DateEnd"] = []
    player_data["is_playoffs"] = []

    any_missing_games = []
    any_missing_pitch = []
    any_missing_salary = False
    any_missing_inf = False
    for time_frame in time_frames:
        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting player " + player_id)
        if ("Facing Former Team" in time_frame["qualifiers"] or "Facing Former Franchise" in time_frame["qualifiers"] or "With New Team" in time_frame["qualifiers"] or "With New Franchise" in time_frame["qualifiers"]) and not "valid_teams_order" in player_data:
            get_team_map_info(player_data, player_type, valid_teams_raw_key, comment_obj)
        if ("Game After Sub Query" in time_frame["qualifiers"] or "Game Before Sub Query" in time_frame["qualifiers"] or "Games Rest" in time_frame["qualifiers"] or "Starts Rest" in time_frame["qualifiers"] or "Days In A Row" in time_frame["qualifiers"] or "Games In A Row" in time_frame["qualifiers"] or "Starts In A Row" in time_frame["qualifiers"] or "Game Days Rest" in time_frame["qualifiers"] or "Start Days Rest" in time_frame["qualifiers"] or "Start Days In A Row" in time_frame["qualifiers"] or "Game Days In A Row" in time_frame["qualifiers"] or "Days Rest" in time_frame["qualifiers"] or "Starts Days Rest" in time_frame["qualifiers"] or "Upcoming Days Rest" in time_frame["qualifiers"] or "Upcoming Starts Days Rest" in time_frame["qualifiers"] or "Games In Days" in time_frame["qualifiers"] or "Starts In Days" in time_frame["qualifiers"]) and not "all_games" in player_data:
            get_all_games(player_data, time_frame, player_type, comment_obj)

        row, missing_games, missing_pitch, missing_salary, missing_inf = handle_player_data(player_data, time_frame, player_type, player_page, valid_teams, valid_year_teams, is_pitching_jaws, extra_stats)

        if remove_duplicates:
            current_dates = set([row_data["DateTime"] for row_data in player_data["rows"]])
            new_rows = []
            for row_data in row:
                if row_data["DateTime"] not in current_dates:
                    new_rows.append(row_data)
            row = new_rows
        
        if remove_duplicate_games:
            current_dates = set([row_data["DateTime"] for row_data in player_data["rows"]])
            for row_data in row:
                if row_data["DateTime"] in current_dates:
                    row_data["G"] = 0
                    row_data["GS"] = 0

        date_start = 0
        date_end = 0

        for row_data in row:
            for stat in row_data:
                if stat == "DateTime":
                    start_date_to_use = row_data[stat]
                    end_date_to_use = row_data[stat]

                    if isinstance(start_date_to_use, int) and not isinstance(date_start, int):
                        date_start = date_start.year
                    if isinstance(end_date_to_use, int) and not isinstance(date_end, int):
                        date_end = date_end.year

                    if date_start == 0 or start_date_to_use < date_start:
                        date_start = row_data[stat]
                    if date_end == 0 or end_date_to_use > date_end:
                        date_end = row_data[stat]
        
        if date_start:
            player_data["DateStart"].append(date_start)
        if date_end:
            player_data["DateEnd"].append(date_end)
        player_data["is_playoffs"].append(time_frame["playoffs"])

        player_data["rows"] += row
        player_data["seperate_rows"] += [row]

        any_missing_games += missing_games
        any_missing_pitch += missing_pitch
        if missing_salary:
            any_missing_salary = True
        if missing_inf:
            any_missing_inf = True

        if comment_obj and comment_obj["is_approved"]:
            try:
                string_output = format_alert_message(comment_obj)
                if comment_obj["reply"]:
                    if isinstance(comment_obj["reply"], Message):
                        #comment_obj["comment"].reply(string_output.split(alert_message + "\n\n", 1)[1])
                        pass
                    else:
                        if display_progress_as_edit:
                            comment_obj["reply"].edit(string_output)
                        #else:
                        #    comment_obj["reply"].delete()
                        #    comment_obj["reply"] = None
                        #    comment_obj["reply"] = comment_obj["comment"].reply(string_output)
                    logger.info("#" + str(threading.get_ident()) + "#   User alert edited")
            except Exception:
                logger.error("#" + str(threading.get_ident()) + "#   " + traceback.format_exc())
        
        logger.info("#" + str(threading.get_ident()) + "#   " + "Done with player " + player_id)

    return player_data, any_missing_games, any_missing_pitch, any_missing_salary, any_missing_inf

def determine_raw_str(subbb_frame):
    qual_str = ""

    if subbb_frame["type"].startswith("season"):
        if subbb_frame["type"].startswith("season-range"):
            qual_str += "Seasons: "
            if not subbb_frame["time_start"]:
                qual_str += get_time_str(subbb_frame["time_end"], True)
            elif not subbb_frame["time_end"]:
                qual_str += get_time_str(subbb_frame["time_start"], True)
            elif subbb_frame["time_start"] == subbb_frame["time_end"]:
                qual_str += get_time_str(subbb_frame["time_start"], True)
            else:
                qual_str += (get_time_str(subbb_frame["time_start"], True)) + "-" + (get_time_str(subbb_frame["time_end"], True))
                if subbb_frame["type"] == "season-range-reversed":
                    qual_str += " [Reverse]"
        else:
            if subbb_frame["time_start"]:
                if subbb_frame["time_start"] == 1:
                    qual_str += "First Season"
                else:
                    qual_str += "First " + str(subbb_frame["time_start"]) + " Seasons"
            else:
                if subbb_frame["time_end"] == 1:
                    qual_str += "Last Season"
                else:
                    qual_str += "Last " + str(subbb_frame["time_end"]) + " Seasons"
    else:
        if subbb_frame["time_start"] == datetime.date.min.year and subbb_frame["time_end"] == current_season:
            qual_str += "Career"
        else:
            if isinstance(subbb_frame["time_end"], dateutil.relativedelta.relativedelta):
                qual_str += "First "
                if subbb_frame["time_end"].microseconds:
                    qual_str += "Calendar "
                if subbb_frame["time_end"].minutes > 1:
                    qual_str += str(subbb_frame["time_end"].minutes) + " "

                if subbb_frame["time_end"].seconds == 0:
                    qual_str += "Day"
                elif subbb_frame["time_end"].seconds == 1:
                    qual_str += "Week"
                elif subbb_frame["time_end"].seconds == 2:
                    qual_str += "Month"
                else:
                    qual_str += "Year"
                if subbb_frame["time_end"].minutes > 1:
                    qual_str += "s"
            else:
                time_start = subbb_frame["time_start"]
                if time_start == datetime.date.min or time_start == datetime.date.min.year:
                    time_start = "MIN"
                if time_start == subbb_frame["time_end"]:
                    qual_str += str(time_start)
                else:
                    qual_str += str(time_start) + " to " + str(subbb_frame["time_end"])
    
    if subbb_frame["playoffs"]:
        if subbb_frame["playoffs"] == "Only":
            qual_str += " - Postseason"
        else:
            qual_str += " - Regular Season and Postseason"
    else:
        qual_str += " - Regular Season"

    for qualifier in subbb_frame["qualifiers"]:
        if qualifier == "Force Dates" or qualifier == "Ignore Start":
            continue

        sub_sub_first = True
        if qual_str:
            qual_str += " - "
        
        if qualifier != "Start" and qualifier != "Birthday" and qualifier != "Games" and qualifier != "Season Games":
            qual_str += qualifier + ": "

        if qualifier == "Games" or qualifier == "Season Games":
            if subbb_frame["qualifiers"][qualifier]["negate"]:
                qual_str += "Not "
            if "compare_type" in subbb_frame["qualifiers"][qualifier]:
                qual_str += subbb_frame["qualifiers"][qualifier]["compare_type"].capitalize()
                if subbb_frame["qualifiers"][qualifier]["time_unit"] == 1:
                    qual_str += " " + qualifier[:-1]
                else:
                    qual_str += " " + str(subbb_frame["qualifiers"][qualifier]["time_unit"]) + " " + qualifier
            else:
                qual_str += qualifier + ": "
                if subbb_frame["qualifiers"][qualifier]["start_val"] == subbb_frame["qualifiers"][qualifier]["end_val"]:
                    qual_str += get_time_str(subbb_frame["qualifiers"][qualifier]["start_val"], True)
                else:
                    qual_str += (get_time_str(subbb_frame["qualifiers"][qualifier]["start_val"], True)) + "-" + (get_time_str(subbb_frame["qualifiers"][qualifier]["end_val"], True))
                    if subbb_frame["qualifiers"][qualifier]["reverse"]:
                        qual_str += " [Reverse]"
        else:
            for qual_obj in subbb_frame["qualifiers"][qualifier]:
                sub_sub_sub_first = True
                if not sub_sub_first:
                    qual_str += " OR " if qualifier.startswith("Or") and qualifier.endswith("Sub Query") else " AND "
                else:
                    sub_sub_first = False
                if len(subbb_frame["qualifiers"][qualifier]) > 1:
                    if "values" in qual_obj and isinstance(qual_obj["values"], list) and len(qual_obj["values"]) > 1:
                        qual_str += "("

                if qualifier == "Start" or qualifier == "Birthday":
                    qual_str += qualifier_map[qualifier][not qual_obj["negate"]]
                elif qualifier == "Rookie" or qualifier == "Facing Former Franchise" or qualifier == "Facing Former Team" or qualifier == "Previous Same Opponent" or qualifier == "Upcoming Same Opponent" or qualifier == "Decision" or qualifier == "Interleague" or qualifier == "Intraleague" or qualifier == "Interdivision" or qualifier == "Intradivision" or qualifier == "First Half" or qualifier == "Second Half" or qualifier == "Post All-Star" or qualifier == "Pre All-Star" or qualifier == "Elimination" or qualifier == "Clinching" or qualifier == "Elimination Or Clinching" or qualifier == "Winner Take All" or qualifier == "Ahead In Series" or qualifier == "Behind In Series" or qualifier == "Even In Series" or qualifier == "Winning Opponent" or qualifier == "Losing Opponent" or qualifier == "Tied Opponent" or qualifier == "Winning Or Tied Opponent" or qualifier == "Losing Or Tied Opponent" or qualifier == "Current Winning Opponent" or qualifier == "Current Losing Opponent" or qualifier == "Current Tied Opponent" or qualifier == "Current Winning Or Tied Opponent" or qualifier == "Current Losing Or Tied Opponent" or qualifier == "Playoff Opponent" or qualifier == "WS Winner Opponent" or qualifier == "Pennant Winner Opponent" or qualifier == "Division Winner Opponent" or qualifier == "Winning Team" or qualifier == "Losing Team" or qualifier == "Tied Team" or qualifier == "Winning Or Tied Team" or qualifier == "Losing Or Tied Team" or qualifier == "Current Winning Team" or qualifier == "Current Losing Team" or qualifier == "Current Tied Team" or qualifier == "Current Winning Or Tied Team" or qualifier == "Current Losing Or Tied Team" or qualifier == "Playoff Team" or qualifier == "WS Winner Team" or qualifier == "Pennant Winner Team" or qualifier == "Division Winner Team" or qualifier == "Save Situation" or qualifier == "Finished" or qualifier == "Bases Empty" or qualifier == "Men On Base" or qualifier == "Bunting" or qualifier == "Fastball" or qualifier == "Out Of Zone" or qualifier == "In Zone" or qualifier == "Offspeed" or qualifier == "Breaking" or qualifier == "With New Team" or qualifier == "With New Franchise" or qualifier == "Even Calendar Year" or qualifier == "Odd Calendar Year" or qualifier == "Even Year" or qualifier == "Odd Year" or qualifier == "RISP" or qualifier == "Inherited" or qualifier == "Earned" or qualifier == "Batter Reached Base" or qualifier == "National Game" or qualifier == "Any National Game" or qualifier == "Batter First Plate Appearance" or qualifier == "Pitcher First Batter Faced" or qualifier == "Batter Last Plate Appearance" or qualifier == "Pitcher Last Batter Faced" or qualifier == "Activated" or qualifier == "Activated From IL" or qualifier == "Facing Pitcher" or qualifier == "Facing Position Player" or qualifier == "Stealing Second" or qualifier == "Stealing Third" or qualifier == "Stealing Home" or qualifier == "Facing Lefty" or qualifier == "Facing Righty" or qualifier == "Facing Rookie" or qualifier == "Facing Qualified Rookie" or qualifier == "Platoon Advantage" or qualifier == "Batting Lefty"  or qualifier == "Batting Righty"  or qualifier == "Pitching Lefty"  or qualifier == "Pitching Righty" or qualifier == "Pinch Hitting" or qualifier == "Facing Starter" or qualifier == "Facing Reliever" or qualifier == "Leading Off Inning" or qualifier == "Inning Started" or qualifier == "Leading Off Game" or qualifier == "Leading Off Whole Game" or qualifier == "Swung At First Pitch" or qualifier == "Batter Ahead" or qualifier == "Even Count" or qualifier == "Pitcher Ahead" or qualifier == "After Batter Ahead" or qualifier == "After Even Count" or qualifier == "After Pitcher Ahead" or qualifier == "First Pitch" or qualifier == "Top Inning" or qualifier == "Bottom Inning" or qualifier == "Top Inning Entered" or qualifier == "Bottom Inning Entered" or qualifier == "Walk Off" or qualifier == "Inside The Park HR" or qualifier == "Walk Off Opportunity" or qualifier == "Game Tying" or qualifier == "Late" or qualifier == "Close" or qualifier == "Game Tying Opportunity" or qualifier == "Go Ahead" or qualifier == "Go Ahead Opportunity" or qualifier == "Go Ahead Or Game Tying" or qualifier == "Go Ahead Or Game Tying Opportunity" or qualifier == "Game Winning" or qualifier == "Tying On Deck" or qualifier == "Go Ahead On Deck" or qualifier == "Tying On First" or qualifier == "Go Ahead On First" or qualifier == "Tying On Second" or qualifier == "Go Ahead On Second" or qualifier == "Tying On Third" or qualifier == "Go Ahead On Third" or qualifier == "Tying At Bat" or qualifier == "Go Ahead At Bat" or qualifier == "Tying In Scoring" or qualifier == "Go Ahead In Scoring" or qualifier == "Tying On Base" or qualifier == "Go Ahead On Base" or qualifier == "Go Ahead Or Tying On Deck" or qualifier == "Go Ahead Or Tying On First" or qualifier == "Go Ahead Or Tying On Second" or qualifier == "Go Ahead Or Tying On Third" or qualifier == "Go Ahead Or Tying At Bat" or qualifier == "Go Ahead Or Tying In Scoring" or qualifier == "Go Ahead Or Tying On Base" or qualifier == "Last Inning" or qualifier == "Last Inning Entered" or qualifier == "Last Out" or qualifier == "Last Batter" or qualifier == "Extra Innings" or qualifier == "Bases Loaded" or qualifier == "Full Count" or qualifier == "Man On First" or qualifier == "Man On Second" or qualifier == "Man On Third" or qualifier == "Day After Pitching" or qualifier == "Day After Hitting" or qualifier == "Day Before Pitching" or qualifier == "Day Before Hitting":
                    qual_str += str(not qual_obj["negate"])
                elif qualifier == "Playing With" or qualifier == "Playing Against" or qualifier == "Playing Same Game" or qualifier == "Previous Playing With" or qualifier == "Previous Playing Against" or qualifier == "Upcoming Playing With" or qualifier == "Upcoming Playing Against" or qualifier == "Playing Same Opponents" or qualifier == "Playing Same Date" or qualifier == "Batting Against" or qualifier == "Pitching Against" or qualifier == "Driven In" or qualifier == "Batted In" or qualifier == "Back To Back With" or qualifier == "Batting Behind" or qualifier == "Batting In Front Of" or qualifier == "Batting Next To" or qualifier == "Caught By" or qualifier == "Stealing On" or qualifier == "Teammate On First" or qualifier == "Teammate On Second" or qualifier == "Teammate On Third" or qualifier == "Teammate On Base" or qualifier == "Opponent On First" or qualifier == "Opponent On Second" or qualifier == "Opponent On Third" or qualifier == "Opponent On Base":
                    for player in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        player_url_str = create_player_url_string(player["name"], player["id"], {})
                        if player_url_str == "No Player Match!":
                            qual_str += player_url_str + " (Searched Term: \"" + "+".join(player["search_term"]) + "\")"
                        else:
                            query = player["query"].replace("Query: ", "", 1)
                            qual_str += player_url_str + ((" (" + query + ")") if query and player["is_raw_query"] else "")
                elif qualifier == "Batting Against First Name" or qualifier == "Pitching Against First Name" or qualifier == "Batting Against Birth Name" or qualifier == "Pitching Against Birth Name" or qualifier == "Batting Against First Or Birth Name" or qualifier == "Pitching Against First Or Birth Name" or qualifier == "Batting Against Last Name" or qualifier == "Pitching Against Last Name" or qualifier == "Batting Against Birth Country" or qualifier == "Pitching Against Birth Country":
                    for player in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        if "Birth Country" in qualifier and player == "usa":
                            qual_str += player.upper()
                        else:
                            qual_str += player.title()
                elif qualifier == "Sub Query" or qualifier == "Event Sub Query" or qualifier == "Or Sub Query" or qualifier == "Or Event Sub Query" or qualifier == "Day Of Sub Query" or qualifier == "Day After Sub Query" or qualifier == "Day Before Sub Query" or qualifier == "Game After Sub Query" or qualifier == "Game Before Sub Query" or qualifier == "Season Sub Query" or qualifier == "Or Season Sub Query" or qualifier == "Season After Sub Query" or qualifier == "Season Before Sub Query":
                    for player in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        qual_str += "(" + player["query"].replace("Query: ", "", 1) + ")"
                elif qualifier == "On Field With" or qualifier == "On Field Against":
                    for player in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        qual_str += "+".join(player["pos"]) + " -> "
                        player_url_str = create_player_url_string(player["name"], player["id"], {})
                        if player_url_str == "No Player Match!":
                            qual_str += player_url_str + " (Searched Term: \"" + "+".join(player["search_term"]) + "\")"
                        else:
                            query = player["query"].replace("Query: ", "", 1)
                            qual_str += player_url_str + ((" (" + query + ")") if query and player["is_raw_query"] else "")
                elif qualifier == "Days Rest" or qualifier == "Upcoming Days Rest" or qualifier == "Starts Days Rest" or qualifier == "Upcoming Starts Days Rest" or qualifier == "Start Days In A Row" or qualifier == "Game Days In A Row" or qualifier == "Days In A Row" or qualifier == "Games In A Row" or qualifier == "Starts In A Row" or qualifier == "Game Days Rest" or qualifier == "Start Days Rest" or qualifier == "Games Rest" or qualifier == "Starts Rest" or qualifier == "Inning Entered" or qualifier == "Outs Entered" or qualifier == "Outs Remaining Entered" or qualifier == "Men On Base Entered" or qualifier == "Men In Scoring Entered" or qualifier == "Team Score" or qualifier == "Ending Team Score" or qualifier == "Run Support" or qualifier == "Opponent Score" or qualifier == "Ending Opponent Score" or qualifier == "Previous Team Score" or qualifier == "Previous Opponent Score" or qualifier == "Final Team Score" or qualifier == "Team Pitch Count" or qualifier == "Game Pitch Count" or qualifier == "Pitch Count" or qualifier == "Pitcher Batters Faced" or qualifier == "Batter Plate Appearance" or qualifier == "Pitcher Batters Faced Reversed" or qualifier == "Batter Plate Appearance Reversed" or qualifier == "Starting Pitch Count" or qualifier == "At Bat Pitch Count" or qualifier == "Men On Base" or qualifier == "Final Opponent Score" or qualifier == "Upcoming Team Score" or qualifier == "Upcoming Opponent Score" or qualifier == "Series Team Wins" or qualifier == "Series Opponent Wins" or qualifier == "Series Score Margin" or qualifier == "Series Score Difference" or qualifier == "Season Number" or qualifier == "Game Number" or qualifier == "Ending Outs" or qualifier == "Outs" or qualifier == "Outs Remaining" or qualifier == "After Strikes" or qualifier == "After Balls" or qualifier == "Swinging On Strikes" or qualifier == "Swinging On Balls" or qualifier == "After Swinging On Strikes" or qualifier == "After Swinging On Balls" or qualifier == "Strikes" or qualifier == "Balls" or qualifier == "Runs" or qualifier == "Play Outs" or qualifier == "RBIs" or qualifier == "Number Drove In" or qualifier == "Pitch Speed" or qualifier == "Pitch Zone" or qualifier == "Pitch Spin" or qualifier == "Exit Velocity" or qualifier == "Hit Distance" or qualifier == "Launch Angle" or qualifier == "Number Of Men On Base" or qualifier == "Number Of Men In Scoring" or qualifier == "Team Wins" or qualifier == "Team Losses" or qualifier == "Opponent Wins" or qualifier == "Opponent Losses" or qualifier == "Current Team Wins" or qualifier == "Current Team Losses" or qualifier == "Current Opponent Wins" or qualifier == "Current Opponent Losses" or qualifier == "Team Games Over 500" or qualifier == "Opponent Games Over 500" or qualifier == "Current Team Games Over 500" or qualifier == "Current Opponent Games Over 500" or qualifier == "Hit X Coordinate" or qualifier == "Hit Y Coordinate" or qualifier == "Pitch X Coordinate" or qualifier == "Pitch Y Coordinate" or qualifier == "Absolute Pitch X Coordinate" or qualifier == "Absolute Pitch Y Coordinate" or qualifier == "Attendance":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Event Stat" or qualifier == "Event Stat Reversed" or qualifier == "Event Stats" or qualifier == "Event Stats Reversed" or qualifier == "Game Event Stat" or qualifier == "Game Event Stat Reversed" or qualifier == "Game Event Stats" or qualifier == "Game Event Stats Reversed" or qualifier == "Starting Event Stat" or qualifier == "Starting Event Stat Reversed" or qualifier == "Starting Event Stats" or qualifier == "Starting Event Stats Reversed" or qualifier == "Starting Game Event Stat" or qualifier == "Starting Game Event Stat Reversed" or qualifier == "Starting Game Event Stats" or qualifier == "Starting Game Event Stats Reversed":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    qual_str += qual_obj["stat"] + "="
                    if qual_obj["stat"] == "IP":
                        frac, whole = math.modf(qual_obj["values"]["start_val"])
                        frac = round_value(frac / (10/3), 1)
                        if frac == 0.3:
                            frac = 0
                            whole += 1
                        start_val = ("{:.1f}").format(round_value(frac + whole, 2))
                        frac, whole = math.modf(qual_obj["values"]["end_val"])
                        frac = round_value(frac / (10/3), 1)
                        if frac == 0.3:
                            frac = 0
                            whole += 1
                        end_val = ("{:.1f}").format(round_value(frac + whole, 2))

                        if start_val == end_val:
                            qual_str += start_val
                        else:
                            qual_str += (start_val) + "-" + (end_val)
                    else:
                        if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                            qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                        else:
                            qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Innings Pitched" or qualifier == "Ending Innings Pitched":
                    frac, whole = math.modf(qual_obj["values"]["start_val"])
                    frac = round_value(frac / (10/3), 1)
                    if frac == 0.3:
                        frac = 0
                        whole += 1
                    start_val = ("{:.1f}").format(round_value(frac + whole, 2))
                    frac, whole = math.modf(qual_obj["values"]["end_val"])
                    frac = round_value(frac / (10/3), 1)
                    if frac == 0.3:
                        frac = 0
                        whole += 1
                    end_val = ("{:.1f}").format(round_value(frac + whole, 2))

                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if start_val == qual_obj["values"]["end_val"]:
                        qual_str += start_val
                    else:
                        qual_str += (start_val) + "-" + (end_val)
                elif qualifier == "Hit Coordinates" or qualifier == "Pitch Coordinates" or qualifier == "Absolute Pitch Coordinates":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["x_coord"]["start_val"] == qual_obj["values"]["x_coord"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["x_coord"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["x_coord"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["x_coord"]["end_val"], False))

                    qual_str += "X: "
                    if qual_obj["values"]["x_coord"]["start_val"] == qual_obj["values"]["x_coord"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["x_coord"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["x_coord"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["x_coord"]["end_val"], False))

                    qual_str += ", Y: "
                    if qual_obj["values"]["y_coord"]["start_val"] == qual_obj["values"]["y_coord"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["y_coord"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["y_coord"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["y_coord"]["end_val"], False))
                elif qualifier == "Hit Within Distance" or qualifier == "Pitch Within Distance" or qualifier == "Absolute Pitch Within Distance":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    qual_str += "X: "
                    qual_str += get_time_str(qual_obj["values"]["x_coord"], False)

                    qual_str += ", Y: "
                    qual_str += get_time_str(qual_obj["values"]["y_coord"], False)
                    
                    qual_str += ", Dist: "
                    qual_str += get_time_str(qual_obj["values"]["radius"], False)
                elif qualifier == "Year" or qualifier == "Calendar Year":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Temperature":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                    qual_str += " °F"
                elif qualifier == "Dates":
                    for date_obj in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "
                        
                        if date_obj["start_val"] == date_obj["end_val"]:
                            qual_str += get_time_str(date_obj["start_val"], False)
                        else:
                            qual_str += get_time_str(date_obj["start_val"], False) + " to " + get_time_str(date_obj["end_val"], False)
                elif qualifier == "Wind":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                
                    qual_str += " MPH"
                elif qualifier == "Games In Days" or qualifier == "Starts In Days":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    for str_qual in qual_obj["values"]:
                        qual_str += str_qual.title() + ": "
                        if isinstance(qual_obj["values"][str_qual], dict):
                            if qual_obj["values"][str_qual]["start_val"] == qual_obj["values"][str_qual]["end_val"]:
                                qual_str += get_time_str(qual_obj["values"][str_qual]["start_val"], False)
                            else:
                                qual_str += (get_time_str(qual_obj["values"][str_qual]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"][str_qual]["end_val"], False))
                        else:
                            qual_str += get_time_str(qual_obj["values"][str_qual], False)
                        qual_str += " - "
                    qual_str = qual_str[:-3]
                elif qualifier == "Count" or qualifier == "After Count" or qualifier == "After Swinging On Count" or qualifier == "Swinging On Count":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    qual_str += "Balls: "
                    if qual_obj["values"]["balls"]["start_val"] == qual_obj["values"]["balls"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["balls"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["balls"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["balls"]["end_val"], False))

                    qual_str += " - Strikes: "
                    if qual_obj["values"]["strikes"]["start_val"] == qual_obj["values"]["strikes"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["strikes"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["strikes"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["strikes"]["end_val"], False))
                elif qualifier == "Score Margin" or qualifier == "Score Margin Entered" or qualifier == "Ending Score Margin" or qualifier == "Previous Score Margin" or qualifier == "Upcoming Score Margin" or qualifier == "Final Score Margin" or qualifier == "Score Difference" or qualifier == "Score Difference Entered" or qualifier == "Ending Score Difference" or qualifier == "Previous Score Difference" or qualifier == "Upcoming Score Difference" or qualifier == "Final Score Difference":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], False)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], False)) + "-" + (get_time_str(qual_obj["values"]["end_val"], False))
                elif qualifier == "Season" or qualifier == "Season Reversed" or qualifier == "Season Index" or qualifier == "Season Index Reversed" or qualifier == "Series Game" or qualifier == "Season Game" or qualifier == "Career Game" or qualifier == "Career Game Reversed" or qualifier == "Season Game Reversed" or qualifier == "Team Game Reversed" or qualifier == "Team Game" or qualifier == "Team Standings Rank" or qualifier == "Opponent Standings Rank" or qualifier == "Opponent Runs Rank" or qualifier == "Opponent Runs Allowed Rank" or qualifier == "Opponent wRC+ Rank" or qualifier == "Opponent AVG Rank" or qualifier == "Opponent OBP Rank" or qualifier == "Opponent SLG Rank" or qualifier == "Opponent OPS Rank" or qualifier == "Opponent ERA- Rank" or qualifier == "Opponent ERA Rank" or qualifier == "Team Runs Rank" or qualifier == "Team Runs Allowed Rank" or qualifier == "Team wRC+ Rank" or qualifier == "Team AVG Rank" or qualifier == "Team SLG Rank" or qualifier == "Team OPS Rank" or qualifier == "Team OBP Rank" or qualifier == "Team ERA- Rank" or qualifier == "Team ERA Rank" or qualifier == "Batting Order Position" or qualifier == "Pitching Against Batting Order" or qualifier == "Inning" or qualifier == "Inning Reversed" or qualifier == "Scheduled Inning Reversed" or qualifier == "Time Facing Opponent" or qualifier == "Time Through Lineup":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], True)
                        if "reverse" in qual_obj["values"] and qual_obj["values"]["reverse"]:
                            qual_str += " [Reverse]"
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], True)) + "-" + (get_time_str(qual_obj["values"]["end_val"], True))
                        if "reverse" in qual_obj["values"] and qual_obj["values"]["reverse"]:
                            qual_str += " [Reverse]"
                elif qualifier == "Opponent Win Percentage" or qualifier == "Team Win Percentage" or qualifier == "Current Opponent Win Percentage" or qualifier == "Current Team Win Percentage":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    if qual_obj["values"]["start_val"] == qual_obj["values"]["end_val"]:
                        qual_str += get_time_str(qual_obj["values"]["start_val"], True, True)
                    else:
                        qual_str += (get_time_str(qual_obj["values"]["start_val"], True, True)) + " to " + (get_time_str(qual_obj["values"]["end_val"], True, True))
                elif qualifier == "Event Time" or qualifier == "Start Time":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    start_time = datetime.datetime.now().replace(hour=qual_obj["values"]["start_val"].hour).replace(minute=qual_obj["values"]["start_val"].minute).replace(second=qual_obj["values"]["start_val"].second)
                    end_time = datetime.datetime.now().replace(hour=qual_obj["values"]["end_val"].hour).replace(minute=qual_obj["values"]["end_val"].minute).replace(second=qual_obj["values"]["end_val"].second)

                    if start_time == end_time:
                        qual_str += start_time.strftime("%I:%M:%S%p")
                    else:
                        qual_str += start_time.strftime("%I:%M:%S%p") + " to " + end_time.strftime("%I:%M:%S%p")
                    qual_str += " " + qual_obj["values"]["time_zone"]
                elif qualifier == "Local Event Time" or qualifier == "Local Start Time" or qualifier == "Team Event Time" or qualifier == "Team Start Time" or qualifier == "Opponent Event Time" or qualifier == "Opponent Start Time":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    start_time = qual_obj["values"]["start_val"]
                    end_time = qual_obj["values"]["end_val"]

                    if start_time == end_time:
                        qual_str += start_time.strftime("%I:%M:%S%p")
                    else:
                        qual_str += start_time.strftime("%I:%M:%S%p") + " to " + end_time.strftime("%I:%M:%S%p")
                elif qualifier == "Event DateTime":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    start_time = datetime.datetime.now().replace(year=qual_obj["values"]["start_val"].year).replace(month=qual_obj["values"]["start_val"].month).replace(day=qual_obj["values"]["start_val"].day).replace(hour=qual_obj["values"]["start_val"].hour).replace(minute=qual_obj["values"]["start_val"].minute).replace(second=qual_obj["values"]["start_val"].second)
                    end_time = datetime.datetime.now().replace(year=qual_obj["values"]["end_val"].year).replace(month=qual_obj["values"]["end_val"].month).replace(day=qual_obj["values"]["end_val"].day).replace(hour=qual_obj["values"]["end_val"].hour).replace(minute=qual_obj["values"]["end_val"].minute).replace(second=qual_obj["values"]["end_val"].second)

                    if start_time == end_time:
                        qual_str += start_time.strftime("%Y-%m-%d %I:%M:%S%p")
                    else:
                        qual_str += start_time.strftime("%Y-%m-%d %I:%M:%S%p") + " to " + end_time.strftime("%Y-%m-%d %I:%M:%S%p")
                    qual_str += " " + qual_obj["values"]["time_zone"]
                elif qualifier == "Local Event DateTime" or qualifier == "Team Event DateTime" or qualifier == "Opponent Event DateTime":
                    if qual_obj["negate"]:
                        qual_str += "Not "

                    start_time = qual_obj["values"]["start_val"]
                    end_time = qual_obj["values"]["end_val"]

                    if start_time == end_time:
                        qual_str += start_time.strftime("%Y-%m-%d %I:%M:%S%p")
                    else:
                        qual_str += start_time.strftime("%Y-%m-%d %I:%M:%S%p") + " to " + end_time.strftime("%Y-%m-%d %I:%M:%S%p")
                elif qualifier == "Age" or qualifier == "Season Age":
                    if qual_obj["negate"]:
                        qual_str += "Not "
                    qual_str += qual_obj["compare_str"]
                else:
                    for sub_qualifier in qual_obj["values"]:
                        if not sub_sub_sub_first:
                            qual_str += " OR "
                        else:
                            sub_sub_sub_first = False
                        if qual_obj["negate"]:
                            qual_str += "Not "

                        if qualifier == "Individual Event Stat" or qualifier == "Stat" or qualifier == "Inning Stat" or qualifier == "Previous Stat" or qualifier == "Upcoming Stat" or qualifier == "Season Stat" or qualifier == "Previous Season Stat" or qualifier == "Upcoming Season Stat" or qualifier == "Total Games Stat":
                            if "explain_str" in sub_qualifier and sub_qualifier["explain_str"]:
                                for explain_str in sub_qualifier["explain_str"]:
                                    qual_str += explain_str + " + "
                                qual_str = qual_str[:-3]
                            else:
                                qual_str += sub_qualifier["stat"].upper() + "="
                                if sub_qualifier["start_val"] == sub_qualifier["end_val"]:
                                    qual_str += get_time_str(sub_qualifier["start_val"], False)
                                else:
                                    qual_str += (get_time_str(sub_qualifier["start_val"], False)) + "-" + (get_time_str(sub_qualifier["end_val"], False))
                        elif qualifier == "Facing Stat Rank" or qualifier == "Facing League Stat Rank" or qualifier == "Facing AL Stat Rank" or qualifier == "Facing NL Stat Rank" or qualifier == "Batting In Front Of Stat Rank" or qualifier == "Batting In Front Of League Stat Rank" or qualifier == "Batting In Front Of AL Stat Rank" or qualifier == "Batting In Front Of NL Stat Rank" or qualifier == "Batting Behind Stat Rank" or qualifier == "Batting Behind League Stat Rank" or qualifier == "Batting Behind AL Stat Rank" or qualifier == "Batting Behind NL Stat Rank" or qualifier == "Batting Next To Stat Rank" or qualifier == "Batting Next To League Stat Rank" or qualifier == "Batting Next To AL Stat Rank" or qualifier == "Batting Next To NL Stat Rank":
                            qual_str += sub_qualifier["stat"].upper() + "="
                            if sub_qualifier["start_val"] == sub_qualifier["end_val"]:
                                qual_str += get_time_str(sub_qualifier["start_val"], True)
                            else:
                                qual_str += (get_time_str(sub_qualifier["start_val"], True)) + "-" + (get_time_str(sub_qualifier["end_val"], True))
                            if "reverse" in qual_obj and qual_obj["reverse"]:
                                qual_str += " [Reverse]"
                            if qual_obj["only_rookies"]:
                                qual_str += " [Only Rookies]"
                            if not qual_obj["include_all_players"]:
                                qual_str += " [Qualified Players]"
                            else:
                                qual_str += " [All Players]"
                        elif qualifier == "Facing Stat Percent" or qualifier == "Facing League Stat Percent" or qualifier == "Facing AL Stat Percent" or qualifier == "Facing NL Stat Percent" or qualifier == "Batting In Front Of Stat Percent" or qualifier == "Batting In Front Of League Stat Percent" or qualifier == "Batting In Front Of AL Stat Percent" or qualifier == "Batting In Front Of NL Stat Percent" or qualifier == "Batting Behind Stat Percent" or qualifier == "Batting Behind League Stat Percent" or qualifier == "Batting Behind AL Stat Percent" or qualifier == "Batting Behind NL Stat Percent" or qualifier == "Batting Next To Stat Percent" or qualifier == "Batting Next To League Stat Percent" or qualifier == "Batting Next To AL Stat Percent" or qualifier == "Batting Next To NL Stat Percent":
                            qual_str += sub_qualifier["stat"].upper() + "="
                            if sub_qualifier["start_val"] == sub_qualifier["end_val"]:
                                qual_str += get_time_str(sub_qualifier["start_val"], False, True)
                            else:
                                qual_str += (get_time_str(sub_qualifier["start_val"], False, True)) + "-" + (get_time_str(sub_qualifier["end_val"], False, True))
                            if "reverse" in qual_obj and qual_obj["reverse"]:
                                qual_str += " [Reverse]"
                            if qual_obj["only_rookies"]:
                                qual_str += " [Only Rookies]"
                            if not qual_obj["include_all_players"]:
                                qual_str += " [Qualified Players]"
                            else:
                                qual_str += " [All Players]"
                        elif qualifier == "Facing Stat" or qualifier == "Facing NL Stat" or qualifier == "Facing AL Stat" or qualifier == "Batting In Front Of Stat" or qualifier == "Batting In Front Of NL Stat" or qualifier == "Batting In Front Of AL Stat" or qualifier == "Batting Behind Stat" or qualifier == "Batting Behind NL Stat" or qualifier == "Batting Behind AL Stat" or qualifier == "Batting Next To Stat" or qualifier == "Batting Next To NL Stat" or qualifier == "Batting Next To AL Stat":
                            qual_str += sub_qualifier["stat"].upper() + "="
                            if sub_qualifier["start_val"] == sub_qualifier["end_val"]:
                                qual_str += get_time_str(sub_qualifier["start_val"], False)
                            else:
                                qual_str += (get_time_str(sub_qualifier["start_val"], False)) + "-" + (get_time_str(sub_qualifier["end_val"], False))
                            if qual_obj["only_rookies"]:
                                qual_str += " [Only Rookies]"
                            if not qual_obj["include_all_players"]:
                                qual_str += " [Qualified Players]"
                            else:
                                qual_str += " [All Players]"
                        elif qualifier == "Min Stat" or qualifier == "Max Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Max Streak Formula" or qualifier == "Count Streak Formula" or qualifier == "Quickest" or qualifier == "Slowest":
                            if "explain_str" in sub_qualifier and sub_qualifier["explain_str"]:
                                for explain_str in sub_qualifier["explain_str"]:
                                    qual_str += explain_str + " + "
                                qual_str = qual_str[:-3]
                            else:
                                for stat in sub_qualifier["stats"]:
                                    qual_str += stat["stat"].upper()
                                    if stat["start_val"] == stat["end_val"]:
                                        qual_str += "=" + (get_time_str(stat["start_val"], False))
                                    else:
                                        if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                                            qual_str += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
                                    qual_str += " + "
                                qual_str = qual_str[:-3]
                                if sub_qualifier["start_level"] == sub_qualifier["end_level"]:
                                    if sub_qualifier["start_level"] != 1:
                                        qual_str += "|" + (get_time_str(sub_qualifier["start_level"], True)) + " Result"
                                else:
                                    qual_str += "|" + (get_time_str(sub_qualifier["start_level"], True)) + " Result to " + (get_time_str(sub_qualifier["end_level"], True)) + " Result"
                        else:
                            if sub_qualifier in qualifier_map[qualifier]:
                                qual_str += qualifier_map[qualifier][sub_qualifier]
                            else:
                                if qualifier == "Team" or qualifier == "Opponent" or qualifier == "Team Stadium" or qualifier == "Franchise Stadium" or qualifier == "TV Network" or qualifier == "Radio Network" or qualifier == "Exact TV Network" or qualifier == "Exact Radio Network" or qualifier == "National TV Network" or qualifier == "National Exact TV Network" or qualifier == "Any National TV Network" or qualifier == "Any National Exact TV Network" or qualifier == "Team Franchise" or qualifier == "Opponent Franchise" or qualifier == "Previous Team" or qualifier == "Upcoming Team" or qualifier == "Previous Opponent" or qualifier == "Upcoming Opponent" or qualifier == "Previous Team Franchise" or qualifier == "Upcoming Team Franchise" or qualifier == "Previous Opponent Franchise" or qualifier == "Upcoming Opponent Franchise" or qualifier == "Team League" or qualifier == "Opponent League" or qualifier == "Previous Team League" or qualifier == "Upcoming Team League" or qualifier == "Previous Opponent League" or qualifier == "Upcoming Opponent League" or qualifier == "Formula" or qualifier == "Season Formula" or qualifier == "Event Formula" or qualifier == "Primary Season Position" or qualifier == "Season Position" or qualifier == "Position" or qualifier == "PH For Position" or qualifier == "Hit Location" or qualifier == "Exact Hit Location" or qualifier == "Facing Position" or qualifier == "Facing PH For Position" or qualifier == "Facing Primary Position" or qualifier == "Facing Main Position" or qualifier == "Primary Game Position" or qualifier == "Game Position" or qualifier == "State" or qualifier == "Exact State" or qualifier == "Team State" or qualifier == "Team Exact State" or qualifier == "Opponent State" or qualifier == "Opponent Exact State" or qualifier == "Country" or qualifier == "Exact Country" or qualifier == "Team Country" or qualifier == "Team Exact Country" or qualifier == "Opponent Country" or qualifier == "Opponent Exact Country":
                                    sub_qualifier = sub_qualifier.upper()
                                elif qualifier == "Holiday" or qualifier == "Pitch Type"  or qualifier == "Exact Pitch Type" or qualifier == "Hit Trajectory" or qualifier == "Hit Hardness" or qualifier == "Event Type" or qualifier == "Exact Event Type" or qualifier == "Previous Event Type" or qualifier == "Upcoming Exact Event Type" or qualifier == "Upcoming Player Event Type" or qualifier == "Previous Exact Event Type" or qualifier == "Previous Player Event Type" or qualifier == "Previous Exact Player Event Type" or qualifier == "Upcoming Event Type" or qualifier == "Upcoming Exact Event Type" or qualifier == "City" or qualifier == "Exact City" or qualifier == "Team City" or qualifier == "Team Exact City" or qualifier == "Opponent City" or qualifier == "Opponent Exact City" or qualifier == "Event Description" or qualifier == "Exact Event Description" or qualifier == "Surface" or qualifier == "Condition" or qualifier == "Moon Phase" or qualifier == "Exact Home Plate Umpire" or qualifier == "Exact Umpire" or qualifier == "Home Plate Umpire" or qualifier == "Umpire" or qualifier == "Team Time Zone" or qualifier == "Team Exact Time Zone" or qualifier == "Opponent Time Zone" or qualifier == "Opponent Exact Time Zone" or qualifier == "Time Zone" or qualifier == "Exact Time Zone":
                                    sub_qualifier = sub_qualifier.title()
                                elif qualifier == "Stadium"  or qualifier == "Exact Stadium":
                                    if sub_qualifier.isdigit():
                                        if sub_qualifier in team_venues:
                                            sub_qualifier = team_venues[sub_qualifier]["values"][len(team_venues[sub_qualifier]["values"]) - 1] + " (" + sub_qualifier + ")"
                                        else:
                                            sub_qualifier = "Unknown" + " (" + sub_qualifier + ")"
                                    else:
                                        sub_qualifier = sub_qualifier.title()
                                elif qualifier == "Team Division" or qualifier == "Opponent Division":
                                    sub_qualifier_split = sub_qualifier.split("-")
                                    sub_qualifier = sub_qualifier_split[0].upper() + "-"
                                    if len(sub_qualifier_split) > 1:
                                        sub_qualifier += sub_qualifier_split[1].title()
                                elif qualifier == "Month":
                                    sub_qualifier = calendar.month_name[sub_qualifier]
                                elif qualifier == "Day":
                                    sub_qualifier = calendar.day_name[sub_qualifier]
                                elif qualifier == "Date":
                                    sub_qualifier = num2words(sub_qualifier, lang="en", to="ordinal_num")
                                qual_str += sub_qualifier
                if len(subbb_frame["qualifiers"][qualifier]) > 1:
                    if "values" in qual_obj and isinstance(qual_obj["values"], list) and len(qual_obj["values"]) > 1:
                        qual_str += ")"

    return qual_str

def handle_player_data(player_data, time_frame, player_type, player_page, valid_teams, valid_year_teams, is_pitching_jaws, extra_stats):
    if not player_data["id"][len(player_data["id"]) - 1].isdigit():
        player_page = BeautifulSoup("", "lxml")

    time_frame = {
        "playoffs" : time_frame["playoffs"],
        "time_start" : time_frame["time_start"],
        "time_end" : time_frame["time_end"],
        "type" : time_frame["type"],
        "qualifiers" : time_frame["qualifiers"]
    }

    is_qual_match = False
    is_qual_match_excl_round = False
    for qualifier in time_frame["qualifiers"]:
        if qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team League" and qualifier != "Team Division" and qualifier != "Rookie" and qualifier != "Max Stat" and qualifier != "Min Stat" and qualifier != "Max Streak" and qualifier != "Max Stretch" and qualifier != "Count Streak" and qualifier != "Quickest"  and qualifier != "Slowest" and qualifier != "Season Stat" and qualifier != "Season Age" and qualifier != "Season" and qualifier != "Season Reversed" and qualifier != "Season Index" and qualifier != "Season Index Reversed" and qualifier != "Previous Season Stat"  and qualifier != "Upcoming Season Stat" and qualifier != "Season Sub Query" and qualifier != "Or Season Sub Query" and qualifier != "Season Before Sub Query" and qualifier != "Season After Sub Query" and qualifier !=  "Winning Team" and qualifier !=  "Losing Team" and qualifier !=  "Tied Team" and qualifier !=  "Winning Or Tied Team" and qualifier !=  "Losing Or Tied Team" and qualifier != "Playoff Team" and qualifier != "WS Winner Team" and qualifier != "Pennant Winner Team" and qualifier != "Division Winner Team" and qualifier != "Team Win Percentage" and qualifier != "Team Games Over 500" and qualifier != "Team Wins" and qualifier != "Team Losses" and qualifier != "Team Runs Rank" and qualifier != "Team Runs Allowed Rank" and qualifier != "Team wRC+ Rank" and qualifier != "Team AVG Rank" and qualifier != "Team SLG Rank" and qualifier != "Team OBP Rank" and qualifier != "Team OPS Rank" and qualifier != "Team ERA- Rank" and qualifier != "Team ERA Rank" and qualifier != "Season Formula" and qualifier != "Season Number" and qualifier != "Even Year" and qualifier != "Odd Year" and qualifier != "Year" and qualifier != "Primary Season Position" and qualifier != "Season Position" and qualifier != "Team City" and qualifier != "Team Exact City" and qualifier != "Team State" and qualifier != "Team Exact State" and qualifier != "Team Country" and qualifier != "Team Exact Country" and qualifier != "Team Time Zone" and qualifier != "Team Exact Time Zone":
            is_qual_match = True
            if qualifier != "Round":
                is_qual_match_excl_round = True
        elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Max Stretch" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
            for qual_object in time_frame["qualifiers"][qualifier]:
                for stat_obj in qual_object["values"]:
                    if not stat_obj["time_frame"] or not (stat_obj["time_frame"]["qual_type"] == "Seasons" or stat_obj["time_frame"]["qual_type"] == "Teams"):
                        is_qual_match = True
                        is_qual_match_excl_round = True
    
    is_game = not (time_frame["type"].startswith("season") or (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)))) or is_qual_match
    is_game_page = is_game or time_frame["playoffs"]
    is_only_round = (time_frame["type"].startswith("season") or (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)))) and "Round" in time_frame["qualifiers"] and not is_qual_match_excl_round
    if is_only_round:
        is_only_round = False
        for qual_object in time_frame["qualifiers"]["Round"]:
            if not qual_object["negate"]:
                if "ws" in qual_object["values"] or "cs" in qual_object["values"]:
                    is_only_round = True
                    break

    missing_games = []
    missing_pitch = []
    valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]
    if not (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int))) or is_qual_match:
        is_seasons = (time_frame["type"].startswith("season") and not is_qual_match) or time_frame["playoffs"] == "Only"
        if not is_seasons:
            valid_years = player_data["game_valid_years"]
    
    missing_salary = False
    missing_inf = False

    all_rows = []

    live_game = None
    player_link = None
    with requests.Session() as s:
        try:
            player_link = get_mlb_player_link(player_data, s)
        except Exception:
            pass
        
        if not player_link:
            logger.warn("#" + str(threading.get_ident()) + "#   " + "Unable to get MLB player link for BRef ID : " + player_data["id"] + ". Cannot retrieve MLB API data")
        else:
            player_data["mlb_id"] = int(player_link.split('/')[-1])
            player_data["player_link"] = player_link
            live_game = get_live_game(player_link, player_data, player_type, time_frame, "hide-live" not in extra_stats and season_in_progress, s)

        if "Rookie" in time_frame["qualifiers"]:
            determine_rookie_years(player_page, player_type, time_frame["qualifiers"]["Rookie"])

        playoff_data = None
        if time_frame["playoffs"]:
            playoff_data = parse_table(player_data, None, None, player_type)
            # if not (time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int))):
            #     valid_years = add_valid_playoff_years(valid_years, playoff_data, time_frame)

        if time_frame["type"].startswith("season"):
            if not valid_years:
                time_frame["time_start"] = -1
                time_frame["time_end"] = -1
            elif time_frame["type"].startswith("season-range"):
                if not time_frame["time_start"]:
                    time_index_end = time_frame["time_end"] - 1
                    time_index_start = time_index_end
                elif not time_frame["time_end"]:
                    time_index_start = time_frame["time_start"] - 1
                    time_index_end = time_index_start
                else:
                    time_index_start = time_frame["time_start"] - 1
                    time_index_end = time_frame["time_end"] - 1
                
                if time_frame["type"] == "season-range-reversed":
                    temp_time_index_end = time_index_end
                    time_index_end = len(valid_years) - time_index_start - 1
                    time_index_start = len(valid_years) - temp_time_index_end - time_index_start

                if time_index_start < 0:
                    time_index_start = 0
                if time_index_end < 0:
                    time_index_end = 0
                if time_index_start > len(valid_years) - 1:
                    time_frame["time_start"] = -1
                    time_frame["time_end"] = -1
                else:
                    if time_index_end > len(valid_years) - 1:
                        time_index_end = len(valid_years) - 1
                    time_frame["time_start"] = valid_years[time_index_start]
                    time_frame["time_end"] = valid_years[time_index_end]
            elif time_frame["time_start"]:
                time_index = time_frame["time_start"]
                time_frame["time_start"] = valid_years[0]
                time_index = len(valid_years) - 1 if time_index > len(valid_years) else time_index - 1
                time_frame["time_end"] = valid_years[time_index]
            else:
                time_index = len(valid_years) - time_frame["time_end"]
                time_frame["time_end"] = valid_years[len(valid_years) - 1]
                time_index = 0 if time_index < 0 else time_index
                time_frame["time_start"] = valid_years[time_index]
            time_frame["type"] = "date"
        elif time_frame["type"] == "date":
            if isinstance(time_frame["time_end"], dateutil.relativedelta.relativedelta):
                if not player_data["game_valid_years"]:
                    time_frame["time_start"] = -1
                    time_frame["time_end"] = -1
                else:
                    first_year =  player_data["game_valid_years"][0]
                    temp_time_frame = {
                        "type" : "date",
                        "time_start" : first_year,
                        "time_end" : first_year,
                        "qualifiers" : []
                    }
                    temp_rows = parse_table(player_data, temp_time_frame, first_year, player_type)
                    if time_frame["playoffs"]:
                        temp_rows = handle_playoffs_data(temp_rows, player_data, player_type, playoff_data, temp_time_frame)
                    if temp_rows:
                        first_date = temp_rows[0]["Date"]

                        if time_frame["time_end"].microseconds:
                            if time_frame["time_end"].seconds == 1:
                                first_date = first_date - datetime.timedelta(days=first_date.weekday()) + dateutil.relativedelta.relativedelta(years=0, months=0, weeks=1, days=0)
                                time_frame["time_end"] = first_date + time_frame["time_end"]
                            elif time_frame["time_end"].seconds == 2:
                                first_date = datetime.datetime(first_date.year, first_date.month, 1).date() + dateutil.relativedelta.relativedelta(years=0, months=1, weeks=0, days=0)
                                time_frame["time_end"] = first_date + time_frame["time_end"]
                                original_day = time_frame["time_end"].day
                                time_frame["time_end"] = time_frame["time_end"].replace(day=1)
                                if original_day <= 15:
                                    time_frame["time_end"] = time_frame["time_end"].replace(month=(time_frame["time_end"].month - 1))
                                time_frame["time_end"] = time_frame["time_end"].replace(day=calendar.monthrange(time_frame["time_end"].year, time_frame["time_end"].month)[1])
                            elif time_frame["time_end"].seconds == 3:
                                first_date = datetime.datetime(first_date.year, 1, 1).date() + dateutil.relativedelta.relativedelta(years=1, months=0, weeks=0, days=0)
                                time_frame["time_end"] = first_date + time_frame["time_end"]
                        else:
                            time_frame["time_end"] = first_date + time_frame["time_end"]

                        time_frame["time_start"] = first_date
                    else:
                        time_frame["time_start"] = -1
                        time_frame["time_end"] = -1
        
        if time_frame["playoffs"] == "Only":
            all_rows = handle_playoffs_data(all_rows, player_data, player_type, playoff_data, time_frame)
        else:
            if time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)):
                if is_qual_match:
                    years_to_use = valid_years
                    if time_frame["time_start"] or time_frame["time_end"]:
                        years_to_use = [valid_year for valid_year in valid_years if time_frame["time_start"] <= valid_year <= time_frame["time_end"]]

                    for year in years_to_use:
                        all_rows += parse_table(player_data, time_frame, year, player_type)
                else:
                    all_rows += parse_table(player_data, time_frame, None, player_type)
                    
                if time_frame["playoffs"]:
                    all_rows = handle_playoffs_data(all_rows, player_data, player_type, playoff_data, time_frame)
            else:
                if valid_years:  
                    for year in range(time_frame["time_start"].year, time_frame["time_end"].year + 1):
                        if year not in valid_years:
                            continue
                        all_rows += parse_table(player_data, time_frame, year, player_type)
                    
                    if time_frame["playoffs"]:
                        all_rows = handle_playoffs_data(all_rows, player_data, player_type, playoff_data, time_frame)

        if not is_game and time_frame["playoffs"] != "Only" and player_type["da_type"] != "Batter":
            handle_missing_game_data(all_rows, player_data, player_type, time_frame, valid_years)
                
        if not is_game:
            handle_missing_reg_rows(player_page, player_data, all_rows, player_type, time_frame)
        
        if not is_game_page:
            handle_missing_playoff_rows(player_page, player_data, valid_years, all_rows, player_type, time_frame)

        has_result_stat_qual = False
        has_count_stat = False
        for qualifier in time_frame["qualifiers"]:
            if "Season" not in qualifier and "State" not in qualifier and "Facing" not in qualifier and ("Event Stat" not in qualifier or qualifier == "Individual Event Stat") and ("Stat" in qualifier or "Streak" in qualifier or "Stretch" in qualifier or ("Formula" in qualifier and qualifier != "Event Formula") or "Quickest" in qualifier or "Slowest" in qualifier):
                for qual_object in time_frame["qualifiers"][qualifier]:
                    for sub_qual_object in qual_object["values"]:
                        if "Formula" in qualifier:
                            stats = qual_object["values"]
                        else:
                            if "stats" in sub_qual_object:
                                stats = []
                                for stat in sub_qual_object["stats"]:
                                    stats.append(stat["stat"])
                            else:
                                stats = [sub_qual_object["stat"]]
                    for stat in stats:
                        if "tmh" in stat or "tmr" in stat or "tmrbi" in stat or "tmhr" in stat or "opph" in stat or "oppr" in stat or "opprbi" in stat or "opphr" in stat or "ttlh" in stat or "hdiff" in stat or "ttlr" in stat or "rdiff" in stat or "ttlrbi" in stat or "rbidiff" in stat or "ttlhr" in stat or "hrdiff" in stat or "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                            has_result_stat_qual = True
                        for count_stat in count_stats:
                            if count_stat.lower() in stat:
                                has_count_stat = True
                                break
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                                if "tmh" in stat or "tmr" in stat or "tmrbi" in stat or "tmhr" in stat or "opph" in stat or "oppr" in stat or "opprbi" in stat or "opphr" in stat or "ttlh" in stat or "hdiff" in stat or "ttlr" in stat or "rdiff" in stat or "ttlrbi" in stat or "rbidiff" in stat or "ttlhr" in stat or "hrdiff" in stat or "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                                    has_result_stat_qual = True
                                for count_stat in count_stats:
                                    if count_stat.lower() in stat:
                                        has_count_stat = True
                                        break
                                break
            
        for extra_stat in extra_stats:
            if extra_stat.startswith("show-stat-"):
                stat = extra_stat.split("show-stat-", 1)[1]
                if "tmh" in stat or "tmr" in stat or "tmrbi" in stat or "tmhr" in stat or "opph" in stat or "oppr" in stat or "opprbi" in stat or "opphr" in stat or "ttlh" in stat or "hdiff" in stat or "ttlr" in stat or "rdiff" in stat or "ttlrbi" in stat or "rbidiff" in stat or "ttlhr" in stat or "hrdiff" in stat or "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                    has_result_stat_qual = True
                for count_stat in count_stats:
                    if count_stat.lower() in stat:
                        has_count_stat = True
                        break
                for header_stat in headers[player_type["da_type"]]:
                    if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                        stat = header_stat.lower()
                        if "tmh" in stat or "tmr" in stat or "tmrbi" in stat or "tmhr" in stat or "opph" in stat or "oppr" in stat or "opprbi" in stat or "opphr" in stat or "ttlh" in stat or "hdiff" in stat or "ttlr" in stat or "rdiff" in stat or "ttlrbi" in stat or "rbidiff" in stat or "ttlhr" in stat or "hrdiff" in stat or "gwrbi" in stat or "slam" in stat or "walkoff" in stat or "drivenin" in stat or "gwdrivenin" in stat or "gdpo" in stat or "gdp%" in stat:
                            has_result_stat_qual = True
                        for count_stat in count_stats:
                            if count_stat.lower() in stat:
                                has_count_stat = True
                                break
                        break
        
        all_dates = set()
        if live_game:
            if valid_years and max(valid_years) >= current_season:
                temp_time_frame = {
                    "type" : "date",
                    "time_start" : current_season,
                    "time_end" : current_season,
                    "qualifiers" : {
                        "Force Dates" : [{
                            "negate" : False
                        }]
                    }
                }
                last_game_rows = parse_table(player_data, temp_time_frame, current_season, player_type)
                if time_frame["playoffs"]:
                    last_game_rows = handle_playoffs_data(last_game_rows, player_data, player_type, playoff_data, temp_time_frame)
                all_dates.update(set([row["DateTime"] for row in last_game_rows]))
            all_rows = handle_live_stats(player_type, player_data, player_link, time_frame, all_rows, live_game, all_dates, s)
        
        if is_game:
            handle_date_row_data(all_rows)

        if player_type["da_type"] != "Batter":
            handle_no_hit(player_data, all_rows)
        else:
            handle_cycle(player_data, all_rows)
        
        pre_qual_teams = set([row["Tm"] for row in all_rows])
        pre_qual_years = set([row["Year"] for row in all_rows])
        pre_qual_teams_drs = set([row["Tm"] for row in all_rows if row["Year"] >= 2003])
        pre_qual_teams_map = {}
        for year in pre_qual_years:
            pre_qual_teams_map[year] = set([row["Tm"] for row in all_rows if row["Year"] == year])
        
        needs_half = False
        if "First Half" in time_frame["qualifiers"] or "Second Half" in time_frame["qualifiers"]:
            for row in all_rows:
                year = row["Year"]
                if str(year) not in all_star_games:
                    needs_half = True

        needs_playoff_round_stats = False
        needs_reg_season_round_stats = False
        if "Elimination" in time_frame["qualifiers"] or "Clinching" in time_frame["qualifiers"] or "Elimination Or Clinching" in time_frame["qualifiers"] or "Winner Take All" in time_frame["qualifiers"] or "Ahead In Series" in time_frame["qualifiers"] or "Behind In Series" in time_frame["qualifiers"] or "Even In Series" in time_frame["qualifiers"] or "Series Team Wins" in time_frame["qualifiers"] or "Series Opponent Wins" in time_frame["qualifiers"] or "Series Score Margin" in time_frame["qualifiers"] or "Series Score Difference" in time_frame["qualifiers"]:
            if time_frame["playoffs"]:
                needs_playoff_round_stats = True
            if not time_frame["playoffs"] or time_frame["playoffs"] == "Include":
                needs_reg_season_round_stats = True
        if "Series Game" in time_frame["qualifiers"]:
            if not time_frame["playoffs"] or time_frame["playoffs"] == "Include":
                needs_reg_season_round_stats = True

        if needs_playoff_round_stats or "Time" in time_frame["qualifiers"] or "Team Division" in time_frame["qualifiers"] or "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"]  or "Team Game" in time_frame["qualifiers"] or "Team Game Reversed" in time_frame["qualifiers"] or "Game Days Rest" in time_frame["qualifiers"] or "Start Days Rest" in time_frame["qualifiers"] or "Games Rest" in time_frame["qualifiers"] or "Starts Rest" in time_frame["qualifiers"] or "Start Days In A Row" in time_frame["qualifiers"] or "Game Days In A Row" in time_frame["qualifiers"] or "Days In A Row" in time_frame["qualifiers"] or "Games In A Row" in time_frame["qualifiers"] or "Starts In A Row" in time_frame["qualifiers"] or "Previous Team Result" in time_frame["qualifiers"] or "Upcoming Team Result" in time_frame["qualifiers"] or "Games In Days" in time_frame["qualifiers"] or "Starts In Days" in time_frame["qualifiers"] or needs_half:
            all_rows = handle_schedule_stats(player_data, live_game, all_rows, time_frame["qualifiers"], time_frame["playoffs"], player_type, s)
        
        if "Winning Opponent" in time_frame["qualifiers"] or "Losing Opponent" in time_frame["qualifiers"] or "Tied Opponent" in time_frame["qualifiers"] or "Winning Or Tied Opponent" in time_frame["qualifiers"] or "Losing Or Tied Opponent" in time_frame["qualifiers"] or "Playoff Opponent" in time_frame["qualifiers"] or "WS Winner Opponent" in time_frame["qualifiers"] or "Pennant Winner Opponent" in time_frame["qualifiers"] or "Division Winner Opponent" in time_frame["qualifiers"] or "Opponent Runs Rank" in time_frame["qualifiers"] or "Team Standings Rank" in time_frame["qualifiers"] or "Opponent Standings Rank" in time_frame["qualifiers"] or "Opponent Runs Allowed Rank" in time_frame["qualifiers"] or "Opponent wRC+ Rank" in time_frame["qualifiers"] or "Opponent AVG Rank" in time_frame["qualifiers"] or "Opponent OBP Rank" in time_frame["qualifiers"] or "Opponent OPS Rank" in time_frame["qualifiers"] or "Opponent SLG Rank" in time_frame["qualifiers"] or "Opponent ERA- Rank" in time_frame["qualifiers"] or "Opponent ERA Rank" in time_frame["qualifiers"] or "Opponent Win Percentage" in time_frame["qualifiers"] or "Winning Team" in time_frame["qualifiers"] or "Losing Team" in time_frame["qualifiers"] or "Tied Team" in time_frame["qualifiers"] or "Winning Or Tied Team" in time_frame["qualifiers"] or "Losing Or Tied Team" in time_frame["qualifiers"] or "Playoff Team" in time_frame["qualifiers"] or "WS Winner Team" in time_frame["qualifiers"] or "Pennant Winner Team" in time_frame["qualifiers"] or "Division Winner Team" in time_frame["qualifiers"] or "Team Runs Rank" in time_frame["qualifiers"] or "Team Runs Allowed Rank" in time_frame["qualifiers"] or "Team wRC+ Rank" in time_frame["qualifiers"] or "Team SLG Rank" in time_frame["qualifiers"] or "Team AVG Rank" in time_frame["qualifiers"] or "Team OBP Rank" in time_frame["qualifiers"] or "Team OPS Rank" in time_frame["qualifiers"] or "Team ERA- Rank" in time_frame["qualifiers"] or "Team ERA Rank" in time_frame["qualifiers"] or "Team Win Percentage" in time_frame["qualifiers"] or "Team Wins" in time_frame["qualifiers"] or "Team Losses" in time_frame["qualifiers"] or "Opponent Wins" in time_frame["qualifiers"] or "Opponent Losses" in time_frame["qualifiers"] or "Opponent Division" in time_frame["qualifiers"] or "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"] or "Team Games Over 500" in time_frame["qualifiers"] or "Opponent Games Over 500" in time_frame["qualifiers"]:
            all_rows = handle_opponent_schedule_stats(all_rows, time_frame["qualifiers"])

        if "Intradivision" in time_frame["qualifiers"] or "Interdivision" in time_frame["qualifiers"]:
            new_rows = []
            for row in all_rows:
                if perform_team_opponent_schedule_qualifiers(row, time_frame["qualifiers"]):
                    new_rows.append(row)
            all_rows = new_rows

        if time_frame["qualifiers"]:
            new_rows = []
            for row_data in all_rows:
                if perform_qualifier(player_data, player_type, row_data, time_frame, all_rows):
                    new_rows.append(row_data)
            all_rows = new_rows

        needs_start_time = False
        if "Event DateTime" in time_frame["qualifiers"]:
            for qual_obj in time_frame["qualifiers"]["Event DateTime"]:
                if isinstance(qual_obj["values"]["end_val"], dateutil.relativedelta.relativedelta):
                    needs_start_time = True
                    break

        if "National Game" in time_frame["qualifiers"] or "Any National Game" in time_frame["qualifiers"] or "TV Network" in time_frame["qualifiers"] or "Radio Network" in time_frame["qualifiers"] or "Exact TV Network" in time_frame["qualifiers"] or "Exact Radio Network" in time_frame["qualifiers"] or "National TV Network" in time_frame["qualifiers"] or "National Exact TV Network" in time_frame["qualifiers"] or "Any National TV Network" in time_frame["qualifiers"] or "Any National Exact TV Network" in time_frame["qualifiers"] or "Current Winning Opponent" in time_frame["qualifiers"] or "Current Losing Opponent" in time_frame["qualifiers"] or "Current Tied Opponent" in time_frame["qualifiers"] or "Current Winning Or Tied Opponent" in time_frame["qualifiers"] or "Current Losing Or Tied Opponent" in time_frame["qualifiers"] or "Current Winning Team" in time_frame["qualifiers"] or "Current Losing Team" in time_frame["qualifiers"] or "Current Tied Team" in time_frame["qualifiers"] or "Current Winning Or Tied Team" in time_frame["qualifiers"] or "Current Losing Or Tied Team" in time_frame["qualifiers"] or "Current Team Win Percentage" in time_frame["qualifiers"] or "Current Opponent Win Percentage" in time_frame["qualifiers"] or "Current Team Wins" in time_frame["qualifiers"] or "Current Team Losses" in time_frame["qualifiers"] or "Current Opponent Wins" in time_frame["qualifiers"] or "Current Opponent Losses" in time_frame["qualifiers"] or "Current Team Games Over 500" in time_frame["qualifiers"] or "Current Opponent Games Over 500" in time_frame["qualifiers"] or "Attendance" in time_frame["qualifiers"] or "Team Stadium" in time_frame["qualifiers"] or "Franchise Stadium" in time_frame["qualifiers"] or "Stadium" in time_frame["qualifiers"] or "Exact Stadium" in time_frame["qualifiers"] or "Start Time" in time_frame["qualifiers"] or "Team Start Time" in time_frame["qualifiers"] or "Opponent Start Time" in time_frame["qualifiers"] or "Exact City" in time_frame["qualifiers"] or "City" in time_frame["qualifiers"] or "Exact State" in time_frame["qualifiers"] or "State" in time_frame["qualifiers"] or "Exact Country" in time_frame["qualifiers"] or "Country" in time_frame["qualifiers"] or "Surface" in time_frame["qualifiers"] or "Condition" in time_frame["qualifiers"] or "Temperature" in time_frame["qualifiers"] or "Wind" in time_frame["qualifiers"] or "Exact Umpire" in time_frame["qualifiers"] or "Exact Home Plate Umpire" in time_frame["qualifiers"] or "Umpire" in time_frame["qualifiers"] or "Home Plate Umpire" in time_frame["qualifiers"] or "Time Zone" in time_frame["qualifiers"] or "Exact Time Zone" in time_frame["qualifiers"] or "Local Start Time" in time_frame["qualifiers"] or "Local Event Time" in time_frame["qualifiers"]:
            get_mlb_game_links_schedule_links(player_data, player_type, player_link, all_rows, time_frame["qualifiers"], s)
        elif ("Event Stat" in time_frame["qualifiers"] or "Event Stat Reversed" in time_frame["qualifiers"] or "Event Stats" in time_frame["qualifiers"] or "Event Stats Reversed" in time_frame["qualifiers"] or "Starting Event Stat" in time_frame["qualifiers"] or "Starting Event Stat Reversed" in time_frame["qualifiers"] or "Starting Event Stats" in time_frame["qualifiers"] or "Starting Event Stats Reversed" in time_frame["qualifiers"]):
            get_mlb_game_links_schedule_links(player_data, player_type, player_link, all_rows, time_frame["qualifiers"], s)
        elif has_result_stat_qual or "Game Number" in time_frame["qualifiers"] or "Run Support" in time_frame["qualifiers"] or "current-stats" in extra_stats or "run-support-record" in extra_stats or "run-support" in extra_stats or "advanced-runner" in extra_stats or "exit-record" in extra_stats:
            get_mlb_game_links_schedule_links(player_data, player_type, player_link, all_rows, time_frame["qualifiers"], s)

        if needs_start_time:
            fix_neg_event_datetimes(all_rows, time_frame["qualifiers"]["Event DateTime"], player_data, player_type, s)
        
        if "National Game" in time_frame["qualifiers"] or "Any National Game" in time_frame["qualifiers"] or "TV Network" in time_frame["qualifiers"] or "Radio Network" in time_frame["qualifiers"] or "Exact TV Network" in time_frame["qualifiers"] or "Exact Radio Network" in time_frame["qualifiers"] or "National TV Network" in time_frame["qualifiers"] or "National Exact TV Network" in time_frame["qualifiers"] or "Any National TV Network" in time_frame["qualifiers"] or "Any National Exact TV Network" in time_frame["qualifiers"] or "Current Winning Opponent" in time_frame["qualifiers"] or "Current Losing Opponent" in time_frame["qualifiers"] or "Current Tied Opponent" in time_frame["qualifiers"] or "Current Winning Or Tied Opponent" in time_frame["qualifiers"] or "Current Losing Or Tied Opponent" in time_frame["qualifiers"] or "Current Winning Team" in time_frame["qualifiers"] or "Current Losing Team" in time_frame["qualifiers"] or "Current Tied Team" in time_frame["qualifiers"] or "Current Winning Or Tied Team" in time_frame["qualifiers"] or "Current Losing Or Tied Team" in time_frame["qualifiers"] or "Current Team Win Percentage" in time_frame["qualifiers"] or "Current Opponent Win Percentage" in time_frame["qualifiers"] or "Current Team Wins" in time_frame["qualifiers"] or "Current Team Losses" in time_frame["qualifiers"] or "Current Opponent Wins" in time_frame["qualifiers"] or "Current Opponent Losses" in time_frame["qualifiers"] or "Current Team Games Over 500" in time_frame["qualifiers"] or "Current Opponent Games Over 500" in time_frame["qualifiers"] or "Attendance" in time_frame["qualifiers"] or "Team Stadium" in time_frame["qualifiers"] or "Franchise Stadium" in time_frame["qualifiers"] or "Stadium" in time_frame["qualifiers"] or "Exact Stadium" in time_frame["qualifiers"] or "Start Time" in time_frame["qualifiers"] or "Team Start Time" in time_frame["qualifiers"] or "Opponent Start Time" in time_frame["qualifiers"] or "Exact City" in time_frame["qualifiers"] or "City" in time_frame["qualifiers"] or "Exact State" in time_frame["qualifiers"] or "State" in time_frame["qualifiers"] or "Exact Country" in time_frame["qualifiers"] or "Country" in time_frame["qualifiers"] or "Surface" in time_frame["qualifiers"] or "Condition" in time_frame["qualifiers"] or "Temperature" in time_frame["qualifiers"] or "Wind" in time_frame["qualifiers"] or "Exact Umpire" in time_frame["qualifiers"] or "Exact Home Plate Umpire" in time_frame["qualifiers"] or "Umpire" in time_frame["qualifiers"] or "Home Plate Umpire" in time_frame["qualifiers"] or "Time Zone" in time_frame["qualifiers"] or "Exact Time Zone" in time_frame["qualifiers"] or "Local Start Time" in time_frame["qualifiers"] or "Local Event Time" in time_frame["qualifiers"]:
            all_rows, missing_games = handle_mlb_schedule_stats(all_rows, time_frame["qualifiers"], player_data, player_type, missing_games, extra_stats)

        if needs_playoff_round_stats or needs_reg_season_round_stats:
            new_rows = []
            for row_data in all_rows:
                if perform_round_qualifiers(row_data, time_frame["qualifiers"]):
                    new_rows.append(row_data)
            all_rows = new_rows

        if "Facing Rookie" in time_frame["qualifiers"] or "Facing Qualified Rookie" in time_frame["qualifiers"] or "Facing Stat Rank" in time_frame["qualifiers"] or "Facing League Stat Rank" in time_frame["qualifiers"] or "Facing AL Stat Rank" in time_frame["qualifiers"] or "Facing NL Stat Rank" in time_frame["qualifiers"] or "Facing Stat Percent" in time_frame["qualifiers"] or "Facing League Stat Percent" in time_frame["qualifiers"] or "Facing AL Stat Percent" in time_frame["qualifiers"] or "Facing NL Stat Percent" in time_frame["qualifiers"] or "Facing Stat" in time_frame["qualifiers"] or "Facing AL Stat" in time_frame["qualifiers"] or "Facing NL Stat" in time_frame["qualifiers"] or "Batting In Front Of Stat Rank" in time_frame["qualifiers"] or "Batting In Front Of League Stat Rank" in time_frame["qualifiers"] or "Batting In Front Of AL Stat Rank" in time_frame["qualifiers"] or "Batting In Front Of NL Stat Rank" in time_frame["qualifiers"] or "Batting In Front Of Stat Percent" in time_frame["qualifiers"] or "Batting In Front Of League Stat Percent" in time_frame["qualifiers"] or "Batting In Front Of AL Stat Percent" in time_frame["qualifiers"] or "Batting In Front Of NL Stat Percent" in time_frame["qualifiers"] or "Batting In Front Of Stat" in time_frame["qualifiers"] or "Batting In Front Of AL Stat" in time_frame["qualifiers"] or "Batting In Front Of NL Stat" in time_frame["qualifiers"] or "Batting Behind Stat Rank" in time_frame["qualifiers"] or "Batting Behind League Stat Rank" in time_frame["qualifiers"] or "Batting Behind AL Stat Rank" in time_frame["qualifiers"] or "Batting Behind NL Stat Rank" in time_frame["qualifiers"] or "Batting Behind Stat Percent" in time_frame["qualifiers"] or "Batting Behind League Stat Percent" in time_frame["qualifiers"] or "Batting Behind AL Stat Percent" in time_frame["qualifiers"] or "Batting Behind NL Stat Percent" in time_frame["qualifiers"] or "Batting Behind Stat" in time_frame["qualifiers"] or "Batting Behind AL Stat" in time_frame["qualifiers"] or "Batting Behind NL Stat" in time_frame["qualifiers"] or "Batting Next To Stat Rank" in time_frame["qualifiers"] or "Batting Next To League Stat Rank" in time_frame["qualifiers"] or "Batting Next To AL Stat Rank" in time_frame["qualifiers"] or "Batting Next To NL Stat Rank" in time_frame["qualifiers"] or "Batting Next To Stat Percent" in time_frame["qualifiers"] or "Batting Next To League Stat Percent" in time_frame["qualifiers"] or "Batting Next To AL Stat Percent" in time_frame["qualifiers"] or "Batting Next To NL Stat Percent" in time_frame["qualifiers"] or "Batting Next To Stat" in time_frame["qualifiers"] or "Batting Next To AL Stat" in time_frame["qualifiers"] or "Batting Next To NL Stat" in time_frame["qualifiers"]:
            handle_stat_rank_stats(all_rows, time_frame["qualifiers"], player_type, s)

        if ("Event Stat" in time_frame["qualifiers"] or "Event Stat Reversed" in time_frame["qualifiers"] or "Event Stats" in time_frame["qualifiers"] or "Event Stats Reversed" in time_frame["qualifiers"] or "Starting Event Stat" in time_frame["qualifiers"] or "Starting Event Stat Reversed" in time_frame["qualifiers"] or "Starting Event Stats" in time_frame["qualifiers"] or "Starting Event Stats Reversed" in time_frame["qualifiers"]):
            all_rows, missing_games, missing_pitch = handle_mlb_game_stats_single_thread(all_rows, has_count_stat, time_frame["qualifiers"], player_data, player_type, missing_games, missing_pitch, extra_stats, s)
        elif has_result_stat_qual or "Game Number" in time_frame["qualifiers"] or "Run Support" in time_frame["qualifiers"] or "current-stats" in extra_stats or "run-support-record" in extra_stats or "run-support" in extra_stats or "advanced-runner" in extra_stats or "exit-record" in extra_stats:
            all_rows, missing_games, missing_pitch = handle_mlb_game_stats(all_rows, has_count_stat, time_frame["qualifiers"], player_data, player_type, missing_games, missing_pitch, extra_stats, s)

    if time_frame["qualifiers"]:
        new_rows = []
        for row_data in all_rows:
            if perform_post_qualifier(player_data, player_type, row_data, time_frame["qualifiers"], all_rows):
                new_rows.append(row_data)
        all_rows = new_rows

    field_player_page = None

    calling_catching_years = {}
    framing_catching_years = {}
    if player_data["catch_valid_years"]:
        field_page_url = advanced_page_url_format.format(player_data["id"][0], player_data["id"], "field")
        field_request = urllib.request.Request(field_page_url, headers=request_headers)
        field_player_page = None
        try:
            field_response, field_player_page = url_request(field_request)
        except urllib.error.HTTPError as err:
            if err.status != 404:
                raise

        if field_player_page != None:
            table = field_player_page.find("table", id="advanced_fielding")
            if not table:
                field_comments = field_player_page.find_all(string=lambda text: isinstance(text, Comment))
                for c in field_comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("table", id="advanced_fielding")
                    if temp_table:
                        table = temp_table
                        break

            if table:
                total_rows = table.find("tbody").find_all("tr")
                for row in total_rows:
                    match = False
                    row_id = row.get("id")
                    if row_id:
                        match = re.match(r"^\d+\:standard_fielding$", row_id)
                    elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                        match = True
                        
                    if match:
                        field_year = int(row.find("th", {"data-stat" : "year_ID"}).find(text=True))
                        field_team = str(row.find("td", {"data-stat" : "team_ID"}).find(text=True))
                        if str(row.find("td", {"data-stat" : "pos"}).find(text=True)) == "C":
                            if field_year >= 2003:
                                if field_year not in calling_catching_years:
                                    calling_catching_years[field_year] = set()
                                calling_catching_years[field_year].add(field_team)
                                if field_year >= 2011:
                                    if field_year not in framing_catching_years:
                                        framing_catching_years[field_year] = set()
                                    framing_catching_years[field_year].add(field_team)
                        
    is_full_career_calling_catch = False
    if calling_catching_years:
        is_full_career_calling_catch = True
        for catch_year in calling_catching_years:
            for catch_team in calling_catching_years[catch_year]:
                has_catch_match = False
                for row_data in all_rows:
                    if row_data["Year"] == catch_year and row_data["Tm"] == catch_team:
                        has_catch_match = True
                        break
                if not has_catch_match:
                    is_full_career_calling_catch = False
                    break
            if not is_full_career_calling_catch:
                break
    is_full_career_framing_catch = False
    if framing_catching_years:
        is_full_career_framing_catch = True
        for catch_year in framing_catching_years:
            for catch_team in framing_catching_years[catch_year]:
                has_catch_match = False
                for row_data in all_rows:
                    if row_data["Year"] == catch_year and row_data["Tm"] == catch_team:
                        has_catch_match = True
                        break
                if not has_catch_match:
                    is_full_career_framing_catch = False
                    break
            if not is_full_career_framing_catch:
                break

    post_qual_teams = set([row["Tm"] for row in all_rows])
    post_qual_years = set([row["Year"] for row in all_rows])
    post_qual_teams_drs = set([row["Tm"] for row in all_rows if row["Year"] >= 2003])
    post_qual_years_drs = set([row["Year"] for row in all_rows if row["Year"] >= 2003])
    has_all_years = post_qual_years == set(valid_years)
    is_full_career = has_all_years and pre_qual_teams == post_qual_teams
    is_full_career_drs = post_qual_years_drs == set([year for year in valid_years if year >= 2003]) and pre_qual_teams_drs == post_qual_teams_drs
    is_full_teams = True
    all_teams_unique = True
    years_full_team = set()
    for post_team in post_qual_teams:
        if post_team in valid_teams and set([row["Year"] for row in all_rows if row["Tm"] == post_team]) != valid_teams[post_team]:
            is_full_teams = False
            break
    
    for year in post_qual_years:
        if pre_qual_teams_map[year] == set([row["Tm"] for row in all_rows if row["Year"] == year]):
            years_full_team.add(year)
        else:
            all_teams_unique = False
    
    years_to_skip = set()
    years_to_skip_champ = {}
    years_to_skip_allstar = {}
    if ("Team" in time_frame["qualifiers"] or "Team Franchise" in time_frame["qualifiers"] or "Team League" in time_frame["qualifiers"] or "Team Division" in time_frame["qualifiers"]) and not (is_game and is_only_round):
        years_count = {}
        for team in valid_teams:
            for year in valid_teams[team]:
                if not year in years_count:
                    years_count[year] = 0
                years_count[year] += 1
        
        for year in years_count:
            if year in set([row["Year"] for row in all_rows]):
                if years_count[year] > 1:
                    if year not in years_full_team:
                        years_to_skip.add(year)
                        years_to_skip_champ[year] = valid_year_teams[year][len(valid_year_teams[year]) - 1]

                        all_star_dates = []
                        if str(year) in all_star_games:
                            temp_time_frame = {
                                "type" : "date",
                                "time_start" : year,
                                "time_end" : year
                            }
                            all_star_rows = parse_table(player_data, temp_time_frame, year, player_type)
                            for all_star_row in all_star_rows:
                                all_star_date = dateutil.parser.parse(all_star_games[str(year)]).date()
                                all_star_date = all_star_date.replace(year=year)
                                if all_star_row["Date"] < all_star_date:
                                    if all_star_row["Tm"] not in all_star_dates:
                                        all_star_dates.append(all_star_row["Tm"])
                        years_to_skip_allstar[year] = all_star_dates

    has_post_qual = False
    if "Season Stat" in time_frame["qualifiers"] or "Previous Season Stat" in time_frame["qualifiers"] or "Upcoming Season Stat" in time_frame["qualifiers"] or "Season Formula" in time_frame["qualifiers"] or "Total Games Stat" in time_frame["qualifiers"] or "Max Streak" in time_frame["qualifiers"] or "Count Streak" in time_frame["qualifiers"] or "Max Streak Formula" in time_frame["qualifiers"] or "Count Streak Formula" in time_frame["qualifiers"] or "Max Stretch" in time_frame["qualifiers"] or "Quickest" in time_frame["qualifiers"] or "Slowest" in time_frame["qualifiers"] or "Max Stat" in time_frame["qualifiers"] or "Min Stat" in time_frame["qualifiers"] or "Season" in time_frame["qualifiers"] or "Season Reversed" in time_frame["qualifiers"] or "Season Games" in time_frame["qualifiers"] or "Games" in time_frame["qualifiers"]:
        is_full_career = False
        is_full_career_drs = False
        is_full_career_calling_catch = False
        is_full_career_framing_catch = False
        is_full_teams = False
        all_teams_unique = False
        has_post_qual = True

    
    has_season_stats = False
    has_award_stats = False
    has_season_pitch_stats = False
    is_only_ws = False
    is_only_cs = False
    if not all_rows:
        has_season_stats = True
        has_award_stats = True
        is_only_ws = True
        is_only_cs = True
    elif not is_game or is_only_round:
        if not time_frame["playoffs"]:
            has_season_pitch_stats = handle_season_only_stats(player_page, field_player_page, player_data, player_type, time_frame, all_rows, is_full_career, is_full_career_drs, is_full_career_calling_catch, is_full_career_framing_catch, is_full_teams, all_teams_unique, is_pitching_jaws, False)
            has_season_stats = True
            regular_seasons = set()
            playoff_seasons = set()
            all_seasons = set()
            seasons_has_salary = set()
            seasons_has_inf_salary = set()
            for row in all_rows:
                if row["Year"] not in years_to_skip:
                    if "fake_playoff_row" in row and row["fake_playoff_row"]:
                        row["PlayoffSeasons"] = 1
                        regular_seasons.add(row["Year"])
                    elif row["is_playoffs"]:
                        row["PlayoffSeasons"] = 1
                        playoff_seasons.add(row["Year"])
                    else:
                        row["RegularSeasons"] = 1
                        if row["Year"] in player_data["pitch_valid_years"]:
                            row["PitchSeasons"] = 1
                        if row["Year"] in player_data["catch_valid_years"]:
                            row["CatchSeasons"] = 1
                        regular_seasons.add(row["Year"])
                
                if not (("fake_playoff_row" in row and row["fake_playoff_row"]) or row["is_playoffs"]):
                    row["WARSeasons"] = 1
                    if row["Year"] in player_data["pitch_valid_years"]:
                        row["WARPitchSeasons"] = 1
                    if "Salary" in row:
                        row["SlrSeasons"] = 1
                        if "InflSalary" in row:
                            row["SlrInflSeasons"] = 1
                    regular_seasons.add(row["Year"])

                if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                    row["UniqueSeasons"] = 1
                
                if not (("fake_playoff_row" in row and row["fake_playoff_row"]) or row["is_playoffs"]) and row["Year"] != 2020:
                    if row["Year"] not in years_to_skip_allstar or (len(years_to_skip_allstar[row["Year"]]) == 1 and years_to_skip_allstar[row["Year"]][0] == row["Tm"]):
                        row["AllStarSeasons"] = 1

                row["Seasons"] = 1
                if not ("fake_playoff_row" in row and row["fake_playoff_row"]):
                    row["NonFakeSeasons"] = 1
                all_seasons.add(row["Year"])
                
                if "Salary" in row:
                    seasons_has_salary.add(row["Year"])

                    if "InflSalary" in row:
                        seasons_has_inf_salary.add(row["Year"])
            if all_seasons != seasons_has_salary:
                missing_salary = True
            if all_seasons != seasons_has_inf_salary:
                missing_inf = True
            is_only_ws = True
            is_only_cs = True
        else:
            if not (is_game and is_only_round):
                regular_seasons = set()
                playoff_seasons = set()
                all_seasons = set()
                for row in all_rows:
                    if row["Year"] not in years_to_skip:
                        if "fake_playoff_row" in row and row["fake_playoff_row"]:
                            row["PlayoffSeasons"] = 1
                            regular_seasons.add(row["Year"])
                        elif row["is_playoffs"]:
                            row["PlayoffSeasons"] = 1
                            playoff_seasons.add(row["Year"])
                        else:
                            row["RegularSeasons"] = 1
                            if row["Year"] in player_data["pitch_valid_years"]:
                                row["PitchSeasons"] = 1
                            if row["Year"] in player_data["catch_valid_years"]:
                                row["CatchSeasons"] = 1
                            regular_seasons.add(row["Year"])
                    if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                        row["UniqueSeasons"] = 1
                    
                    if not (("fake_playoff_row" in row and row["fake_playoff_row"]) or row["is_playoffs"]):
                        row["WARSeasons"] = 1
                        if row["Year"] in player_data["pitch_valid_years"]:
                            row["WARPitchSeasons"] = 1
                        if "Salary" in row:
                            row["SlrSeasons"] = 1
                            if "InflSalary" in row:
                                row["SlrInflSeasons"] = 1
                        regular_seasons.add(row["Year"])

                    if not (("fake_playoff_row" in row and row["fake_playoff_row"]) or row["is_playoffs"]) and row["Year"] != 2020:
                        if row["Year"] not in years_to_skip_allstar or (len(years_to_skip_allstar[row["Year"]]) == 1 and years_to_skip_allstar[row["Year"]][0] == row["Tm"]):
                            row["AllStarSeasons"] = 1
                    
                    row["Seasons"] = 1
                    if not ("fake_playoff_row" in row and row["fake_playoff_row"]):
                        row["NonFakeSeasons"] = 1
                    all_seasons.add(row["Year"])
            
            if is_game and is_only_round:
                for qual_object in time_frame["qualifiers"]["Round"]:
                    if not qual_object["negate"]:
                        if "ws" in qual_object["values"]:
                            is_only_ws = True
                        if "cs" in qual_object["values"]:
                            is_only_cs = True
            else:
                is_only_ws = True
                is_only_cs = True

        if not (is_game and is_only_round):
            handle_awards(player_page, player_data, player_type, time_frame, is_full_career, years_to_skip, years_to_skip_champ, years_to_skip_allstar, all_rows)
            has_award_stats = True

    if "Season Stat" in time_frame["qualifiers"] or "Previous Season Stat" in time_frame["qualifiers"] or "Upcoming Season Stat" in time_frame["qualifiers"] or "Season Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_season_stats(all_rows, player_data, player_type, time_frame["qualifiers"])

    if "Total Games Stat" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_career_stats(all_rows, player_data, player_type, time_frame["qualifiers"])
    
    if "Max Streak" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], True, False, extra_stats)

    if "Count Streak" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], False, False, extra_stats)
    
    if "Max Streak Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], True, True, extra_stats)

    if "Count Streak Formula" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_max_streak(all_rows, player_data, player_type, time_frame["qualifiers"], False, True, extra_stats)

    if "Max Stretch" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_max_stretch(all_rows, player_data, player_type, time_frame["qualifiers"], extra_stats)

    if "Quickest" in time_frame["qualifiers"] or "Slowest" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_quick_long(all_rows, player_data, player_type, time_frame["qualifiers"])

    if "Max Stat" in time_frame["qualifiers"] or "Min Stat" in time_frame["qualifiers"]:
        all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
        all_rows = handle_max_min_data(all_rows, player_data, player_type, time_frame["qualifiers"], extra_stats)
    
    if "Season" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        new_rows = []
        for row in all_rows:
            add_row = True
            for qual_object in time_frame["qualifiers"]["Season"]:
                season_index = seasons.index(row["Year"]) + 1
                if qual_object["negate"]:
                    if season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]:
                        add_row =  False
                        break
                else:
                    if not (season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]):
                        add_row =  False
                        break
                if add_row:
                    new_rows.append(row)
        all_rows = new_rows
    
    if "Season Reversed" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Year"] for row in all_rows])), reverse=True)
        new_rows = []
        for row in all_rows:
            add_row = True
            for qual_object in time_frame["qualifiers"]["Season Reversed"]:
                season_index = seasons.index(row["Year"]) + 1
                if qual_object["negate"]:
                    if season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]:
                        add_row =  False
                        break
                else:
                    if not (season_index >= qual_object["values"]["start_val"] and season_index <= qual_object["values"]["end_val"]):
                        add_row =  False
                        break
                if add_row:
                    new_rows.append(row)
        all_rows = new_rows
    
    if "Season Games" in time_frame["qualifiers"]:
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        new_rows = []
        for season in seasons:
            yearly_rows = []
            for row in all_rows:
                if row["Year"] == season:
                    yearly_rows.append(row)
            
            if "compare_type" in time_frame["qualifiers"]["Season Games"]:
                yearly_rows = sorted(yearly_rows, key=lambda row: row["DateTime"])
                if time_frame["qualifiers"]["Season Games"]["negate"]:
                    if time_frame["qualifiers"]["Season Games"]["compare_type"] == "first":
                        yearly_rows = yearly_rows[time_frame["qualifiers"]["Season Games"]["time_unit"]:]
                    else:
                        yearly_rows = yearly_rows[:-time_frame["qualifiers"]["Season Games"]["time_unit"]]
                else:
                    if time_frame["qualifiers"]["Season Games"]["compare_type"] == "first":
                        yearly_rows = yearly_rows[:time_frame["qualifiers"]["Season Games"]["time_unit"]]
                    else:
                        yearly_rows = yearly_rows[-time_frame["qualifiers"]["Season Games"]["time_unit"]:]
            else:
                yearly_rows = sorted(yearly_rows, key=lambda row: row["DateTime"], reverse=time_frame["qualifiers"]["Season Games"]["reverse"])
                time_start = time_frame["qualifiers"]["Season Games"]["start_val"]
                if time_start == float("inf"):
                    time_start = len(yearly_rows) - 1
                elif time_start == -float("inf"):
                    time_start = 0
                else:
                    time_start -= 1
                time_end = time_frame["qualifiers"]["Season Games"]["end_val"]
                if time_end == float("inf"):
                    time_end = len(yearly_rows)
                elif time_end == -float("inf"):
                    time_end = 1
                if time_frame["qualifiers"]["Season Games"]["negate"]:
                    yearly_rows = yearly_rows[:time_start] + yearly_rows[time_end:]
                else:
                    yearly_rows = yearly_rows[time_start:time_end]
            
            new_rows.extend(yearly_rows)
        all_rows = new_rows

    if "Games" in time_frame["qualifiers"]:
        if "compare_type" in time_frame["qualifiers"]["Games"]:
            all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
            if time_frame["qualifiers"]["Games"]["negate"]:
                if time_frame["qualifiers"]["Games"]["compare_type"] == "first":
                    all_rows = all_rows[time_frame["qualifiers"]["Games"]["time_unit"]:]
                else:
                    all_rows = all_rows[:-time_frame["qualifiers"]["Games"]["time_unit"]]
            else:
                if time_frame["qualifiers"]["Games"]["compare_type"] == "first":
                    all_rows = all_rows[:time_frame["qualifiers"]["Games"]["time_unit"]]
                else:
                    all_rows = all_rows[-time_frame["qualifiers"]["Games"]["time_unit"]:]
        else:
            all_rows = sorted(all_rows, key=lambda row: row["DateTime"], reverse=time_frame["qualifiers"]["Games"]["reverse"])
            time_start = time_frame["qualifiers"]["Games"]["start_val"]
            if time_start == float("inf"):
                time_start = len(all_rows) - 1
            elif time_start == -float("inf"):
                time_start = 0
            else:
                time_start -= 1
            time_end = time_frame["qualifiers"]["Games"]["end_val"]
            if time_end == float("inf"):
                time_end = len(all_rows)
            elif time_end == -float("inf"):
                time_end = 1
            if time_frame["qualifiers"]["Games"]["negate"]:
                all_rows = all_rows[:time_start] + all_rows[time_end:]
            else:
                all_rows = all_rows[time_start:time_end]

    if is_game and is_only_round:
        regular_seasons = set()
        playoff_seasons = set()
        all_seasons = set()
        for row in all_rows:
            if row["Year"] not in years_to_skip:
                if "fake_playoff_row" in row and row["fake_playoff_row"]:
                    row["PlayoffSeasons"] = 1
                    regular_seasons.add(row["Year"])
                elif row["is_playoffs"]:
                    row["PlayoffSeasons"] = 1
                    playoff_seasons.add(row["Year"])
                else:
                    row["RegularSeasons"] = 1
                    if row["Year"] in player_data["pitch_valid_years"]:
                        row["PitchSeasons"] = 1
                    if row["Year"] in player_data["catch_valid_years"]:
                        row["CatchSeasons"] = 1
                    regular_seasons.add(row["Year"])
            if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                row["UniqueSeasons"] = 1

            if not (("fake_playoff_row" in row and row["fake_playoff_row"]) or row["is_playoffs"]):
                row["WARSeasons"] = 1
                if row["Year"] in player_data["pitch_valid_years"]:
                    row["WARPitchSeasons"] = 1
                if "Salary" in row:
                    row["SlrSeasons"] = 1
                    if "InflSalary" in row:
                        row["SlrInflSeasons"] = 1
                regular_seasons.add(row["Year"])
            
            if not (("fake_playoff_row" in row and row["fake_playoff_row"]) or row["is_playoffs"]) and row["Year"] != 2020:
                if row["Year"] not in years_to_skip_allstar or (len(years_to_skip_allstar[row["Year"]]) == 1 and years_to_skip_allstar[row["Year"]][0] == row["Tm"]):
                    row["AllStarSeasons"] = 1
            
            row["Seasons"] = 1
            if not ("fake_playoff_row" in row and row["fake_playoff_row"]):
                row["NonFakeSeasons"] = 1
            all_seasons.add(row["Year"])

        handle_awards(player_page, player_data, player_type, time_frame, is_full_career, years_to_skip, years_to_skip_champ, years_to_skip_allstar, all_rows)
        has_award_stats = True
    
    if not has_season_stats:
        player_data["has_season_stats"] = False
    if not has_award_stats:
        player_data["has_award_stats"] = False
    if not is_only_ws:
        player_data["is_only_ws"] = False
    if not is_only_cs:
        player_data["is_only_cs"] = False

    if has_season_stats or has_award_stats:
        fix_seasons(all_rows)
    
    if has_season_stats and has_post_qual and not is_qual_match:
        post_qual_teams = set([row["Tm"] for row in all_rows])
        post_qual_years = set([row["Year"] for row in all_rows])
        post_qual_teams_drs = set([row["Tm"] for row in all_rows if row["Year"] >= 2003])
        post_qual_years_drs = set([row["Year"] for row in all_rows if row["Year"] >= 2003])
        has_all_years = post_qual_years == set(valid_years)
        is_full_career = has_all_years and pre_qual_teams == post_qual_teams

        is_full_career_calling_catch = False
        if calling_catching_years:
            is_full_career_calling_catch = True
            for catch_year in calling_catching_years:
                for catch_team in calling_catching_years[catch_year]:
                    has_catch_match = False
                    for row_data in all_rows:
                        if row_data["Year"] == catch_year and row_data["Tm"] == catch_team:
                            has_catch_match = True
                            break
                    if not has_catch_match:
                        is_full_career_calling_catch = False
                        break
                if not is_full_career_calling_catch:
                    break
        is_full_career_framing_catch = False
        if framing_catching_years:
            is_full_career_framing_catch = True
            for catch_year in framing_catching_years:
                for catch_team in framing_catching_years[catch_year]:
                    has_catch_match = False
                    for row_data in all_rows:
                        if row_data["Year"] == catch_year and row_data["Tm"] == catch_team:
                            has_catch_match = True
                            break
                    if not has_catch_match:
                        is_full_career_framing_catch = False
                        break
                if not is_full_career_framing_catch:
                    break

        is_full_career_drs = post_qual_years_drs == set([year for year in valid_years if year >= 2003]) and pre_qual_teams_drs == post_qual_teams_drs
        is_full_teams = True
        all_teams_unique = True
        for post_team in post_qual_teams:
            if post_team in valid_teams and set([row["Year"] for row in all_rows if row["Tm"] == post_team]) != valid_teams[post_team]:
                is_full_teams = False
                break
        
        for year in post_qual_years:
            if pre_qual_teams_map[year] != set([row["Tm"] for row in all_rows if row["Year"] == year]):
                all_teams_unique = False
                break

        for row in all_rows:
            for stat in row:
                if stat in headers[player_type["da_type"]] and "type" in headers[player_type["da_type"]][stat] and headers[player_type["da_type"]][stat]["type"].startswith("Defense/"):
                    row[stat] = 0
    
        has_season_pitch_stats = handle_season_only_stats(player_page, field_player_page, player_data, player_type, time_frame, all_rows, is_full_career, is_full_career_drs, is_full_career_calling_catch, is_full_career_framing_catch, is_full_teams, all_teams_unique, is_pitching_jaws, True)

    if all_rows:
        has_war_7 = False
        for row in all_rows:
            if "WAR7yr" in row:
                has_war_7 = True
                break
        
        if not has_war_7:
            all_rows[len(all_rows) - 1]["WAR7yr"] = calculate_war_7yr(player_data, all_rows, player_type, is_pitching_jaws)

    if not has_against_quals(extra_stats):
        if is_game_page:
            fix_prob_data(all_rows, player_data, player_type, all_teams_unique)
        
    seasons_leading_start = 0
    seasons_leading_end = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading_end = int(extra_stat.split("-")[2])
                if len(extra_stat.split("-")) >= 4:
                    seasons_leading_start = int(extra_stat.split("-")[2])
                else:
                    seasons_leading_start = 1
            else:
                seasons_leading_start = 1
                seasons_leading_end = 1
    if not is_game_page and seasons_leading_start:
        handle_leading_seasons(player_page, player_data, player_type, time_frame, years_to_skip, all_rows, seasons_leading_start, seasons_leading_end)
    
    if is_full_career:
        player_data["is_full_career"] = is_full_career
    player_data["has_season_pitch_stats"] = has_season_pitch_stats

    for row_data in all_rows:
        if "Pos" in row_data and isinstance(row_data["Pos"], str):
            qual_str = list(row_data["Pos"].replace("*", "").replace("/", ""))
            for pos in qual_str:
                pos = pos.upper()
                if pos in position_map:
                    pos = position_map[pos]
                player_data["ind_type"].add(pos)

    return all_rows, missing_games, missing_pitch, missing_salary, missing_inf

def fix_neg_event_datetimes(all_rows, qualifiers, player_data, player_type, s):
    if not all_rows:
        return

    the_start_time = None

    fake_row_data = copy.deepcopy(sorted(all_rows, key=lambda row: row["DateTime"])[0])
    fake_game_data, fake_row_data, fake_index, fake_sub_missing_games, fake_sub_missing_pitch = get_live_game_data(-1, False, player_data, fake_row_data, player_type, {}, True, s)

    min_time = None
    for at_bat_event in fake_game_data["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:
        event_name = at_bat_event["result"]
        if event_name == "pitch":
            continue
        if at_bat_event["event_time"] != None:
            if min_time == None or at_bat_event["event_time"] < min_time:
                min_time = at_bat_event["event_time"]
        if at_bat_event["ind_pitches"]:
            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                if event_name not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                    pitch_event_obj = handle_da_pitch_quals(fake_row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, {}, player_data, player_type, fake_game_data, pitch_index + 1)
                    if pitch_event_obj:
                        if pitch_event_obj["event_time"] != None:
                            if min_time == None or pitch_event_obj["event_time"] < min_time:
                                min_time = pitch_event_obj["event_time"]
    
    if min_time:
        the_start_time = min_time
    elif "StartTime" in fake_row_data and fake_row_data["StartTime"]:
        the_start_time = fake_row_data["StartTime"]
    else:
        the_start_time = datetime.datetime(year=fake_row_data["Date"].year, month=fake_row_data["Date"].month, day=fake_row_data["Date"].day, hour=0, minute=0, second=0)

    if the_start_time:
        for qual_obj in qualifiers:
            if isinstance(qual_obj["values"]["end_val"], dateutil.relativedelta.relativedelta):
                qual_obj["values"]["start_val"] = the_start_time
                qual_obj["values"]["end_val"] += the_start_time
                
                qual_obj["values"]["start_val"] = qual_obj["values"]["start_val"].astimezone(pytz.timezone(qual_obj["values"]["time_zone"])).replace(microsecond=0).replace(tzinfo=None)
                qual_obj["values"]["end_val"] = qual_obj["values"]["end_val"].astimezone(pytz.timezone(qual_obj["values"]["time_zone"])).replace(microsecond=0).replace(tzinfo=None)

def get_team_map_info(player_data, player_type, valid_teams, comment_obj):
    subbb_frames = [{
        "time_start" : datetime.date.min.year,
        "time_end" : current_season,
        "type" : "date",
        "add_type" : "add", 
        "playoffs" : "Include",
        "qualifiers" : {
            "Force Dates" : [{
                "negate" : False
            }]
        }
    }]

    player_url = main_page_url_format.format(player_data["id"][0], player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        player_page = url_request(request)[1]
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return None, None
        else:
            raise

    sub_player_data = handle_multi_player_data(player_data["id"], subbb_frames, player_type, player_page, False, False, False, set(), comment_obj)[0]

    teams_map = {}
    franc_map = {}
    team_ranges = {}
    franc_ranges = {}
    last_team = None
    last_franchise = None
    for row_data in sorted(sub_player_data["rows"], key=lambda row: row["DateTime"]):
        if row_data["Tm"] not in teams_map:
            teams_map[row_data["Tm"]] = row_data["DateTime"]
        if row_data["Tm"] not in team_ranges:
            team_ranges[row_data["Tm"]] = {}
            last_team = None
        if row_data["Year"] not in team_ranges[row_data["Tm"]]:
            team_ranges[row_data["Tm"]][row_data["Year"]] = []
            last_team = None
        if last_team != row_data["Tm"]:
            team_ranges[row_data["Tm"]][row_data["Year"]].append({
                "start" : row_data["DateTime"]
            })
        team_ranges[row_data["Tm"]][row_data["Year"]][len(team_ranges[row_data["Tm"]][row_data["Year"]]) - 1]["end"] = row_data["DateTime"]
        last_team = row_data["Tm"]

        sleague = row_data["TmLg"]
        team_franchise = team_main_abbr[sleague][str(row_data["Year"])][row_data["Tm"]]
        if team_franchise not in franc_map:
            franc_map[team_franchise] = row_data["DateTime"]
        if team_franchise not in franc_ranges:
            franc_ranges[team_franchise] = {}
            last_franchise = None
        if row_data["Year"] not in franc_ranges[team_franchise]:
            franc_ranges[team_franchise][row_data["Year"]] = []
            last_franchise = None
        if last_franchise != team_franchise:
            franc_ranges[team_franchise][row_data["Year"]].append({
                "start" : row_data["DateTime"]
            })
        franc_ranges[team_franchise][row_data["Year"]][len(franc_ranges[team_franchise][row_data["Year"]]) - 1]["end"] = row_data["DateTime"]
        last_franchise = team_franchise


    last_team = None
    last_franchise = None
    for team in valid_teams:
        for year in sorted(valid_teams[team]):
            if year not in player_data["game_valid_years"]:
                if team not in teams_map:
                    teams_map[team] = year
                if team not in team_ranges:
                    team_ranges[team] = {}
                    last_team = None
                if year not in team_ranges[team]:
                    team_ranges[team][year] = []
                    last_team = None
                if last_team != team:
                    team_ranges[team][year].append({
                        "start" : year
                    })
                team_ranges[team][year][len(team_ranges[team][year]) - 1]["end"] = year
                last_team = team

                sleague = get_team_league(team, year)
                team_franchise = team_main_abbr[sleague][str(year)][team]
                if team_franchise not in franc_map:
                    franc_map[team_franchise] = year
                if team_franchise not in team_ranges:
                    team_ranges[team_franchise] = {}
                    last_franchise = None
                if year not in team_ranges[team_franchise]:
                    team_ranges[team_franchise][year] = []
                    last_franchise = None
                if last_franchise != team_franchise:
                    team_ranges[team_franchise][year].append({
                        "start" : year
                    })
                team_ranges[team_franchise][year][len(team_ranges[team_franchise][year]) - 1]["end"] = year
                last_franchise = team_franchise
    
    player_data["valid_teams_order"] = {
        "team" : teams_map,
        "franchise" : franc_map
    }

    player_data["valid_team_ranges"] = {
        "team" : team_ranges,
        "franchise" : franc_ranges
    }

def get_all_games(player_data, time_frame, player_type, comment_obj):
    subbb_frames = [{
        "time_start" : datetime.date.min.year,
        "time_end" : current_season,
        "type" : "date",
        "add_type" : "add", 
        "playoffs" : "Include",
        "qualifiers" : {
            "Force Dates" : [{
                "negate" : False
            }]
        }
    }]

    player_url = main_page_url_format.format(player_data["id"][0], player_data["id"])
    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        player_page = url_request(request)[1]
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return None, None
        else:
            raise

    sub_player_data = handle_multi_player_data(player_data["id"], subbb_frames, player_type, player_page, False, False, False, set(), comment_obj)[0]

    player_data["all_games"] = {}
    for row_data in sorted(sub_player_data["rows"], key=lambda row: row["DateTime"]):
        if row_data["Year"] not in player_data["all_games"]:
            player_data["all_games"][row_data["Year"]] = []
        player_data["all_games"][row_data["Year"]].append(row_data)

def handle_date_row_data(all_rows):
    all_rows = sorted(all_rows, key=lambda row: row["DateTime"])

    game_counter = 0
    prev_year = None
    last_date = None
    year_count = None
    for index, row_data in enumerate(all_rows):
        if last_date == row_data["DateTime"]:
            row_data["Gm"] = all_rows[index - 1]["Gm"]
            row_data["GmRev"] = all_rows[index - 1]["GmRev"]
            row_data["CrGm"] = all_rows[index - 1]["CrGm"]
            row_data["CrGmRev"] = all_rows[index - 1]["CrGmRev"]
            row_data["Previous Row"] = all_rows[index - 1]["Previous Row"]
            row_data["Upcoming Row"] = all_rows[index - 1]["Upcoming Row"]
            continue
        
        last_date = row_data["DateTime"]
        if prev_year != row_data["Year"]:
            game_counter = 0
            year_count = len(set([row["DateTime"] for row in all_rows if row["Year"] == row_data["Year"]]))
        prev_year = row_data["Year"]

        if not year_count:
            year_count = len(set([row["DateTime"] for row in all_rows if row["Year"] == row_data["Year"]]))

        game_counter += 1

        row_data["Gm"] = game_counter
        row_data["GmRev"] = year_count - game_counter + 1
        row_data["CrGm"] = index + 1
        row_data["CrGmRev"] = len(all_rows) - index

        if index == 0:
            row_data["Previous Row"] = None
        else:
            row_data["Previous Row"] = all_rows[index - 1]
            if row_data["Previous Row"]["Year"] != row_data["Year"]:
                row_data["Previous Row"] = None
        
        if index == len(all_rows) - 1:
            row_data["Upcoming Row"] = None
        else:
            row_data["Upcoming Row"] = all_rows[index + 1]
            if row_data["Upcoming Row"]["Year"] != row_data["Year"]:
                row_data["Upcoming Row"] = None

def get_live_game(player_link, player_data, player_type, time_frame, do_live, s):
    player_id = int(player_link.split('/')[-1])
    sub_data = url_request_json(s, "https://statsapi.mlb.com" + player_link + "?hydrate=currentTeam,transactions")

    if "transactions" in sub_data["people"][0]:
        player_data["transactions"] = sub_data["people"][0]["transactions"]

    if not do_live:
        return

    if "currentTeam" not in sub_data["people"][0]:
        return

    current_team = sub_data["people"][0]["currentTeam"]["id"]

    da_dates = []
    # for month_int in range(1, (datetime.datetime.now().month + 1)):
    #     min_date = datetime.date(current_season, month_int, 1)
    #     max_date = datetime.date(current_season, month_int, calendar.monthrange(current_season, month_int)[1])

    #     scheudle_url = mlb_team_schedule_url_format.format(current_team, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date)))
    #     data = url_request_json(s, scheudle_url)

    #     for game in data["dates"]:
    #         da_dates.append(game)

    scheudle_url = mlb_team_schedule_url_format.format(current_team, current_season)
    data = url_request_json(s, scheudle_url)

    for game in data["dates"]:
        da_dates.append(game)

    add_missing_schedule_games(current_team, current_season, da_dates, s)

    lastest_games = []
    team_game_number = 1
    for sub_game in da_dates:
        ids_to_header = {}
        for game in sub_game["games"]:
            if game["officialDate"] != sub_game["date"]:
                continue
            game_type = game["gameType"]
            if game_type != "R" and game_type != "F" and game_type != "D" and game_type != "L" and game_type != "W":
                continue
            if game["status"]["detailedState"]:
                if game["status"]["detailedState"] == "Cancelled" or game["status"]["detailedState"] == "Warmup" or game["status"]["detailedState"] == "Postponed" or game["status"]["detailedState"].startswith("Suspended"):
                    continue
            if not "score" in game["teams"]["home"]:
                continue
            ids_to_header[game["gamePk"]] = len(ids_to_header)

        if len(ids_to_header) > 1:
            for game_pk in ids_to_header:
                ids_to_header[game_pk] += 1

        for latest_game in sub_game["games"]:
            if latest_game["gamePk"] not in ids_to_header:
                continue

            game_type = latest_game["gameType"]
            if game_type != "R" and game_type != "F" and game_type != "D" and game_type != "L" and game_type != "W":
                continue
            if game_type == "R" and time_frame["playoffs"] == "Only":
                continue
            elif game_type in ("F", "D", "L", "W") and not time_frame["playoffs"]:
                continue
            
            game_status = latest_game["status"]["abstractGameState"]
            if game_status != "Live" and game_status != "Final":
                continue
            if latest_game["status"]["detailedState"]:
                if latest_game["status"]["detailedState"] == "Cancelled" or latest_game["status"]["detailedState"] == "Warmup" or latest_game["status"]["detailedState"] == "Postponed" or latest_game["status"]["detailedState"].startswith("Suspended"):
                    continue
            if not "score" in latest_game["teams"]["home"]:
                continue

            latest_game["teamGameNumber"] = team_game_number
            latest_game["time_int"] = ids_to_header[latest_game["gamePk"]]
            lastest_games.append(latest_game)
            team_game_number += 1

            year = int(latest_game["season"])
            is_playoffs = latest_game["gameType"] in ("F", "D", "L", "W")

            if (year not in player_data["year_valid_years"]) or (not is_playoffs and year not in player_data["reg_year_valid_years"]):
                sub_data = url_request_json(s, "https://statsapi.mlb.com" + latest_game["link"])

                is_home = sub_data["gameData"]["teams"]["home"]["id"] == current_team
                team_str = "home" if is_home else "away"

                player = None
                for sub_player in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
                    sub_player = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][sub_player]
                    if sub_player["person"]["id"] == player_id:
                        if player_type["da_type"] == "Batter":
                            if sub_player["stats"]["batting"] and sub_player["stats"]["batting"]["gamesPlayed"]:
                                player = sub_player
                                break
                        else:
                            if sub_player["stats"]["pitching"] and sub_player["stats"]["pitching"]["gamesPitched"]:
                                player = sub_player
                                break

                if player:
                    if year not in player_data["year_valid_years"]:
                        player_data["year_valid_years"].append(year)
                    if not is_playoffs and year not in player_data["reg_year_valid_years"]:
                        player_data["reg_year_valid_years"].append(year)
            
    if lastest_games:
        return current_team, lastest_games
    else:
        return None

def handle_live_stats(player_type, player_data, player_link, time_frame, all_rows, live_game, all_dates, s):
    current_team, sub_datas = live_game[0], live_game[1]
    
    player_id = int(player_link.split('/')[-1])
    for game_data in sub_datas:
        row_data = determine_row_data(game_data, player_type, player_data, player_id, current_team, all_dates, all_rows, time_frame, s)
        if row_data:
            all_rows.append(row_data)

    all_rows = sorted(all_rows, key=lambda row: row["DateTime"])

    return all_rows

def determine_row_data(game_data, player_type, player_data, player_id, current_team, all_dates, all_rows, time_frame, s):
    row_data = {}
    row_data["Year"] = int(game_data["season"])

    game_datetime = dateutil.parser.parse(game_data["officialDate"])
    row_data["Date"] = game_datetime.date()
    time_int = game_data["time_int"]
    row_data["DateTime"] = game_datetime.replace(hour=time_int)

    if row_data["DateTime"] in all_dates:
        return None
    
    if isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int):
        has_match = row_data["Year"] >= time_frame["time_start"] and row_data["Year"] <= time_frame["time_end"]
    else:
        has_match = row_data["Date"] >= time_frame["time_start"] and row_data["Date"] <= time_frame["time_end"]

    if not has_match:
        return None

    sub_data = url_request_json(s, "https://statsapi.mlb.com" + game_data["link"])

    game_type = sub_data["gameData"]["game"]["type"]
    is_home = sub_data["gameData"]["teams"]["home"]["id"] == current_team
    team_str = "home" if is_home else "away"
    opp_team_str = "away" if is_home else "home"
    if is_home:
        player_team_abbr = sub_data["gameData"]["teams"]["home"]["abbreviation"]
        player_team_league = leagues_to_id[sub_data["gameData"]["teams"]["home"]["league"]["name"]]
        player_opp_abbr = sub_data["gameData"]["teams"]["away"]["abbreviation"]
        player_opp_league = leagues_to_id[sub_data["gameData"]["teams"]["away"]["league"]["name"]]
    else:
        player_team_abbr = sub_data["gameData"]["teams"]["away"]["abbreviation"]
        player_team_league = leagues_to_id[sub_data["gameData"]["teams"]["away"]["league"]["name"]]
        player_opp_abbr = sub_data["gameData"]["teams"]["home"]["abbreviation"]
        player_opp_league = leagues_to_id[sub_data["gameData"]["teams"]["home"]["league"]["name"]]

    is_final = sub_data["gameData"]["status"]["abstractGameState"] == "Final"
    if not is_final:
        row_data["InProgress"] = 1

    row_data["is_playoffs"] = game_type in ("F", "D", "L", "W")
    row_data["G"] = 1
                        
    row_data["Month"] = row_data["Date"].month
    row_data["Day"] = row_data["Date"].day
    row_data["YearDay"] = row_data["Date"].timetuple().tm_yday
    next_date = row_data["Date"] - dateutil.relativedelta.relativedelta(weeks=1)
    weekday_in_month = 1
    while next_date.month == row_data["Date"].month:
        weekday_in_month += 1
        next_date -= dateutil.relativedelta.relativedelta(weeks=1)
    row_data["WeekDayInMonth"] = weekday_in_month
    row_data["CalendarYear"] = row_data["Date"].year

    row_data["TmGm"] = game_data["teamGameNumber"]
    if row_data["is_playoffs"]:
        row_data["RoundGame"] = game_data["seriesGameNumber"]
        if game_type == "F":
            row_data["Round"] = "wc"
        elif game_type == "D":
            row_data["Round"] = "ds"
        elif game_type == "L":
            row_data["Round"] = "cs"
        else:
            row_data["Round"] = "ws"

    parsed_team_name = team_abbr[player_team_league][player_team_abbr]
    if parsed_team_name in team_name_info:
        for abbr in team_name_info[parsed_team_name]:
            if player_team_league in team_name_info[parsed_team_name][abbr]:
                if row_data["Year"] in team_name_info[parsed_team_name][abbr][player_team_league]:
                    row_data["Tm"] = abbr
                    break
    
    if "Tm" not in row_data:
        if parsed_team_name in team_name_info:
            for abbr in team_name_info[parsed_team_name]:
                if player_team_league in team_name_info[parsed_team_name][abbr]:
                    row_data["Tm"] = abbr

    parsed_opp_name = team_abbr[player_opp_league][player_opp_abbr]
    if parsed_opp_name in team_name_info:
        for abbr in team_name_info[parsed_opp_name]:
            if player_opp_league in team_name_info[parsed_opp_name][abbr]:
                if row_data["Year"] in team_name_info[parsed_opp_name][abbr][player_opp_league]:
                    row_data["Opponent"] = abbr.lower()
                    break
    
    if "Opponent" not in row_data:
        if parsed_opp_name in team_name_info:
            for abbr in team_name_info[parsed_opp_name]:
                if player_opp_league in team_name_info[parsed_opp_name][abbr]:
                    row_data["Opponent"] = abbr.lower()

    if "Tm" not in row_data:
        logger.warn("#" + str(threading.get_ident()) + "#   " + "Unable to get MLB live game link for BRef ID : " + player_data["id"] + " and team/year " + parsed_team_name + "/" +  str(row_data["Year"]) + ". Cannot retrieve MLB live data")
        return
    if "Opponent" not in row_data:
        logger.warn("#" + str(threading.get_ident()) + "#   " + "Unable to get MLB live game link for BRef ID : " + player_data["id"] + " and team/year " + parsed_team_name + "/" +  str(row_data["Year"]) + ". Cannot retrieve MLB live data")
        return

    row_data["TmLg"] = get_team_league(row_data["Tm"], row_data["Year"])
    row_data["OppLg"] = get_team_league(row_data["Opponent"].upper(), row_data["Year"])

    if str(row_data["Date"]) in special_doubleheaders and row_data["Tm"] in special_doubleheaders[str(row_data["Date"])]["single_teams"]:
        row_data["DateTime"] = game_datetime.replace(hour=0)

    if row_data["DateTime"] in all_dates:
        return None

    row_data["Location"] = is_home
    row_data["MLBLiveGame"] = True
    home_team = row_data["Tm"] if row_data["Location"] else row_data["Opponent"]
    row_data["GameLink"] = None
    row_data["MLBGameLink"] = sub_data["gamePk"]
    row_data["GameID"] = sub_data["gamePk"]
    row_data["MLBTmID"] = sub_data["gameData"]["teams"]["home"]["id"]
    row_data["MLBOppID"] = sub_data["gameData"]["teams"]["home"]["id"]

    if all_rows:
        last_row = all_rows[len(all_rows) - 1]
        row_data["CrGm"] = len(all_rows) + 1
        if last_row["Year"] == row_data["Year"]:
            row_data["Gm"] = len([row for row in all_rows if row["Year"] == row_data["Year"]]) + 1
        else:
            row_data["Gm"] = 1
    else:
        row_data["Gm"] = 1
        row_data["CrGm"] = 1

    row_data["Team Score"] = sub_data["liveData"]["linescore"]["teams"][team_str]["runs"]
    row_data["Opponent Score"] = sub_data["liveData"]["linescore"]["teams"][opp_team_str]["runs"]

    if is_final:
        if row_data["Team Score"] > row_data["Opponent Score"]:
            result_str = "W"
        elif row_data["Team Score"] < row_data["Opponent Score"]:
            result_str = "L"
        else:
            result_str = "T"

        row_data["Result"] = result_str
    else:
        row_data["Result"] = None

    if sub_data["gameData"]["datetime"]["dayNight"] == "day":
        row_data["Time"] = "D"
    elif sub_data["gameData"]["datetime"]["dayNight"] == "night":
        row_data["Time"] = "N"

    if not player_id:
        all_dates.add(row_data["DateTime"])
        return row_data

    player = None
    for sub_player in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
        sub_player = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][sub_player]
        if sub_player["person"]["id"] == player_id:
            if player_type["da_type"] == "Batter":
                if sub_player["stats"]["batting"] and sub_player["stats"]["batting"]["gamesPlayed"]:
                    player = sub_player
                    break
            else:
                if sub_player["stats"]["pitching"] and sub_player["stats"]["pitching"]["gamesPitched"]:
                    player = sub_player
                    break

    if not player:
        return None

    if "fielding" in player["stats"] and player["stats"]["fielding"]:
        game = player["stats"]["fielding"]
        row_data["PutOut"] = game["putOuts"]
        row_data["A"] = game["assists"]
        row_data["E"] = game["errors"]
        if player_type["da_type"] == "Batter":
            row_data["FldCaughtStealing"] = game["caughtStealing"]
            row_data["FldStolenBases"] = game["stolenBases"]
            row_data["PB"] = game["passedBall"]
            row_data["PO"] = game["pickoffs"]

    if player_type["da_type"] == "Batter":
        game = player["stats"]["batting"]
        row_data["R"] = game["runs"]
        row_data["2B"] = game["doubles"]
        row_data["3B"] = game["triples"]
        row_data["HR"] = game["homeRuns"]
        row_data["SO"] = game["strikeOuts"]
        row_data["BB"] = game["baseOnBalls"]
        row_data["IBB"] = game["intentionalWalks"]
        row_data["H"] = game["hits"]
        row_data["HBP"] = game["hitByPitch"]
        row_data["AB"] = game["atBats"]
        row_data["CS"] = game["caughtStealing"]
        row_data["SB"] = game["stolenBases"]
        row_data["GDP"] = game["groundIntoDoublePlay"] + game["groundIntoTriplePlay"]
        row_data["PA"] = game["plateAppearances"]
        row_data["RBI"] = game["rbi"]
        row_data["SH"] = game["sacBunts"]
        row_data["SF"] = game["sacFlies"]

        calculate_sum_stats(player_type, row_data)

        row_data["Start"] = bool(not player["gameStatus"]["isOnBench"] and not player["gameStatus"]["isSubstitute"])

        if row_data["1B"] and row_data["2B"] and row_data["3B"] and row_data["HR"]:
            has_cycle = False
            if player_data["id"] in special_stats["cycle"]:
                for cycle_obj in special_stats["cycle"][player_data["id"]]:
                    is_playoffs = cycle_obj["is_playoffs"]
                    date_str = cycle_obj["date"]
                    is_datetime = date_str.endswith("00:00")
                    attr_to_use = "DateTime" if is_datetime else "Date"
                    cycle = dateutil.parser.parse(date_str) if is_datetime else dateutil.parser.parse(date_str).date()
                    if isinstance(row_data[attr_to_use], int):
                        cycle = cycle.year

                    if row_data[attr_to_use] == cycle and row_data["Tm"] == cycle_obj["team"] and ((is_playoffs and row_data["is_playoffs"]) or (not is_playoffs and not row_data["is_playoffs"])):
                        has_cycle = True
                        break
            if not has_cycle:
                row_data["Cycle"] = 1
    else:
        game = player["stats"]["pitching"]
        
        row_data["GS"] = game["gamesStarted"]
        row_data["R"] = game["runs"]
        row_data["2B"] = game["doubles"]
        row_data["3B"] = game["triples"]
        row_data["HR"] = game["homeRuns"]
        row_data["SO"] = game["strikeOuts"]
        row_data["BB"] = game["baseOnBalls"]
        row_data["IBB"] = game["intentionalWalks"]
        row_data["H"] = game["hits"]
        row_data["HBP"] = game["hitByPitch"]
        row_data["AB"] = game["atBats"]
        row_data["CS"] = game["caughtStealing"]
        row_data["SB"] = game["stolenBases"]
        row_data["Pit"] = game["pitchesThrown"]

        fake_row_data = copy.deepcopy(row_data)
        fake_game_data, fake_row_data, fake_index, fake_sub_missing_games, fake_sub_missing_pitch = get_live_game_data(-1, False, player_data, fake_row_data, player_type, {}, True, s)
        perform_sub_mlb_game_qualifiers(fake_row_data, player_data, {}, fake_game_data, player_type, True)
        row_data["GDP"] = fake_row_data["GDP"]

        innings = game["inningsPitched"]
        column_value_split = str(innings).split(".")
        innings = float(column_value_split[0])
        if column_value_split[1] == "1":
            innings += 1/3
        elif column_value_split[1] == "2":
            innings += 2/3
        row_data["IP"] = innings

        row_data["W"] = game["wins"]
        row_data["L"] = game["losses"]
        row_data["SV"]  = game["saves"]
        row_data["Hold"] = game["holds"]
        row_data["BSv"] = game["blownSaves"]
        row_data["ER"] = game["earnedRuns"]	
        row_data["BF"] = game["battersFaced"]
        row_data["CG"] = game["completeGames"]
        row_data["SHO"] = game["shutouts"]
        row_data["Str"] = game["strikes"]
        row_data["Bal"] = game["balls"]
        row_data["HPB"] = game["hitBatsmen"]
        row_data["PO"] = game["pickoffs"]
        row_data["SF"] = game["sacFlies"]

        if is_final:
            row_data["Finished"] = bool(game["gamesFinished"]) or bool(game["completeGames"])

        calculate_sum_stats(player_type, row_data)

        if row_data["GS"]:
            row_data["Start"] = True
            row_data["IPStart"] = row_data["IP"]
            row_data["PitStart"] = row_data["Pit"]
            row_data["GSc"] = 50 + (row_data["IP"] * 3) + (row_data["SO"]) - (2 * row_data["H"]) - (4 * row_data["ER"]) - (2 * (row_data["R"] - row_data["ER"])) - row_data["BB"]
            points_after_fourth = (2 * (math.floor(row_data["IP"]) - 4))
            if points_after_fourth > 0:
                row_data["GSc"] += points_after_fourth
            if row_data["IP"] >= 6 and row_data["ER"] <= 3:
                row_data["QS"] = 1
            if is_final:
                has_no_hit = False
                if player_data["id"] in special_stats["no_hit"]:
                    for no_hitter_obj in special_stats["no_hit"][player_data["id"]]:
                        is_playoffs = no_hitter_obj["is_playoffs"]
                        no_hitter = dateutil.parser.parse(no_hitter_obj["date"])
                        if isinstance(row_data["DateTime"], int):
                            no_hitter = no_hitter.year

                        if row_data["DateTime"] == no_hitter and row_data["Tm"] == no_hitter_obj["team"] and ((is_playoffs and row_data["is_playoffs"]) or (not is_playoffs and not row_data["is_playoffs"])):
                            has_no_hit = True
                            break
                if not has_no_hit:
                    if row_data["CG"] and row_data["IP"] >= 9 and not row_data["H"]:
                        row_data["NoHit"] = 1
                        if row_data["SHO"]:
                            is_perfect = True
                            for play in sub_data["liveData"]["plays"]["allPlays"]:
                                if play["result"]["type"] == "atBat":
                                    if (play["about"]["isTopInning"] and is_home) or (not play["about"]["isTopInning"] and not is_home):
                                        if len(play["runners"]) > 1 or not play["runners"][0]["movement"]["isOut"]:
                                            is_perfect = False
                                            break
                            if is_perfect:
                                row_data["Prfct"] = 1
        else:
            row_data["Start"] = False
        
        if row_data["Pit"]:
            row_data["GamesPit"] = 1
            if row_data["Start"]:
                row_data["StartsPit"] = 1

        is_home_team = None
        for player in sub_data["liveData"]["boxscore"]["teams"]["away"]["players"]:
            player = sub_data["liveData"]["boxscore"]["teams"]["away"]["players"][player]
            if player["person"]["id"] == player_data["mlb_id"]:
                is_home_team = False
                break
        
        for player in sub_data["liveData"]["boxscore"]["teams"]["home"]["players"]:
            player = sub_data["liveData"]["boxscore"]["teams"]["home"]["players"][player]
            if player["person"]["id"] == player_data["mlb_id"]:
                is_home_team = True
                break
        if is_home_team == None:
            raise Exception("Could not determine home team")

        is_save_situation = None
        inning_entered = None
        top_inning_entered = None
        outs_entered = None
        outs_remaining_entered = None
        men_on_base_entered = None
        men_in_scoring_entered = None
        run_diff = None

        for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
            for sub_play in scoring_play["playEvents"]:
                if "isSubstitution" in sub_play and sub_play["isSubstitution"]:
                    if sub_play["details"]["eventType"] == "pitching_substitution":
                        if sub_play["player"]["id"] == player_data["mlb_id"]:
                            is_save_situation = bool(row_data.get("SV", 0) or row_data.get("BSv", 0) or row_data.get("Hold", 0))

                            inning = scoring_play["about"]["inning"]
                            is_top_inning = scoring_play["about"]["isTopInning"]

                            sub_man_on_first = False
                            sub_man_on_second = False
                            sub_man_on_third = False

                            if index != 0 and sub_data["liveData"]["plays"]["allPlays"][index - 1]["about"]["isTopInning"] == is_top_inning:
                                if "postOnFirst" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                    sub_man_on_first = True
                                if "postOnSecond" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                    sub_man_on_second = True
                                if "postOnThird" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                    sub_man_on_third = True
                            
                            for inherited_play in scoring_play["playEvents"]:
                                if "eventType" in inherited_play["details"] and inherited_play["details"]["eventType"] and inherited_play["details"]["eventType"] == "runner_placed":
                                    sub_man_on_second = True

                            runners_by_play = {}
                            for sub_runner in scoring_play["runners"]:
                                if sub_runner["details"]["playIndex"] < sub_play["index"]:
                                    if sub_runner["details"]["playIndex"] not in runners_by_play:
                                        runners_by_play[sub_runner["details"]["playIndex"]] = []
                                    runners_by_play[sub_runner["details"]["playIndex"]].append(sub_runner)
                            
                            for play_index in runners_by_play:
                                new_man_on_second = False
                                new_man_on_third = False
                                for sub_run_index, sub_runner in enumerate(runners_by_play[play_index]):
                                    if sub_run_index == len(runners_by_play[play_index]) - 1 or runners_by_play[play_index][sub_run_index + 1]["details"]["runner"]["id"] != sub_runner["details"]["runner"]["id"]:
                                        if sub_runner["movement"]["end"] == "2B":
                                            sub_man_on_second = True
                                            new_man_on_second = True
                                        if sub_runner["movement"]["end"] == "3B":
                                            sub_man_on_third = True
                                            new_man_on_third = True
                                
                                for sub_runner in runners_by_play[play_index]:
                                    if sub_runner["movement"]["start"] == "1B" and sub_runner["movement"]["end"] != "1B":
                                        sub_man_on_first = False
                                    if sub_runner["movement"]["start"] == "2B" and sub_runner["movement"]["end"] != "2B" and not new_man_on_second:
                                        sub_man_on_second = False
                                    if sub_runner["movement"]["start"] == "3B" and sub_runner["movement"]["end"] != "3B" and not new_man_on_third:
                                        sub_man_on_third = False

                            num_occupied = int(sub_man_on_first) + int(sub_man_on_second) + int(sub_man_on_third)

                            num_out = sub_play["count"]["outs"]

                            if is_home_team:
                                run_diff = sub_play["details"]["homeScore"] - sub_play["details"]["awayScore"]
                            else:
                                run_diff = sub_play["details"]["awayScore"] - sub_play["details"]["homeScore"]

                            outs_remaining = ((9 - inning) * 3) + (3 - num_out)
                            if inning > 9:
                                outs_remaining = 3 - num_out
                            if (row_data["DateTime"].hour == 1 or row_data["DateTime"].hour == 2) and row_data["Year"] >= 2020:
                                outs_remaining = ((7 - inning) * 3) + (3 - num_out)
                                if inning > 7:
                                    outs_remaining = 3 - num_out

                            if outs_remaining <= 9:
                                if run_diff > 0 and run_diff <= 3 and outs_remaining >= 3:
                                    is_save_situation = True
                                elif run_diff > 0 and run_diff - num_occupied - 2 <= 0:
                                    is_save_situation = True 

                            inning_entered = inning
                            top_inning_entered = is_top_inning
                            outs_entered = num_out
                            outs_remaining_entered = outs_remaining
                            men_on_base_entered = num_occupied
                            men_in_scoring_entered = int(sub_man_on_second) + int(sub_man_on_third)
                            break

        if inning_entered == None:
            for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
                if scoring_play["result"]["type"] != "atBat" or "eventType" not in scoring_play["result"]:
                    if scoring_play["matchup"]["pitcher"]["id"] == player_data["mlb_id"]:
                        inning_entered = scoring_play["about"]["inning"]
                        top_inning_entered = scoring_play["about"]["isTopInning"]
                        outs_entered = 0
                        men_on_base_entered = 0
                        men_in_scoring_entered = 0
                        num_out = 0
                        outs_remaining = ((9 - inning_entered) * 3) + (3 - num_out)
                        if inning_entered > 9:
                            outs_remaining = 3 - num_out
                        if (row_data["DateTime"].hour == 1 or row_data["DateTime"].hour == 2) and row_data["Year"] >= 2020:
                            outs_remaining = ((7 - inning_entered) * 3) + (3 - num_out)
                            if inning_entered > 7:
                                outs_remaining = 3 - num_out

                        outs_remaining_entered = outs_remaining

                        if index == 0:
                            run_diff = 0
                        else:
                            if is_home_team:
                                run_diff = sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["homeScore"] - sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["awayScore"]
                            else:
                                run_diff = sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["awayScore"] - sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["homeScore"]
                        break

        row_data["SaveOpp"] = is_save_situation
        row_data["InningEntered"] = inning_entered
        row_data["TopInningEntered"] = top_inning_entered
        row_data["OutsEntered"] = outs_entered
        row_data["OutsRemainingEntered"] = outs_remaining_entered
        row_data["MenOnBaseEntered"] = men_on_base_entered
        row_data["MenInScoringEntered"] = men_in_scoring_entered
        row_data["ScoreMarginEntered"] = run_diff

    if is_final:
        if player_type["da_type"] == "Batter":
            fake_row_data = copy.deepcopy(row_data)
            fake_game_data = get_live_game_data(-1, False, player_data, fake_row_data, player_type, {}, True, s)[0]
            row_data["Finished"] = False
            for position in fake_game_data["final_team_position_map"]:
                if position in ("PH", "PR"):
                    if player_data["mlb_id"] in fake_game_data["final_team_position_map"][position]:
                        row_data["Finished"] = True
                else:
                    if fake_game_data["final_team_position_map"][position] == player_data["mlb_id"]:
                        row_data["Finished"] = True
    
    all_dates.add(row_data["DateTime"])
    
    is_qual_match = False
    for qualifier in time_frame["qualifiers"]:
        if qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team League" and qualifier != "Team Division" and qualifier != "Rookie" and qualifier != "Max Stat" and qualifier != "Min Stat" and qualifier != "Max Streak" and qualifier != "Max Stretch" and qualifier != "Count Streak" and qualifier != "Quickest"  and qualifier != "Slowest" and qualifier != "Season Stat" and qualifier != "Season Age" and qualifier != "Season" and qualifier != "Season Reversed" and qualifier != "Season Index" and qualifier != "Season Index Reversed" and qualifier != "Previous Season Stat"  and qualifier != "Upcoming Season Stat" and qualifier != "Season Sub Query" and qualifier != "Or Season Sub Query" and qualifier != "Season Before Sub Query" and qualifier != "Season After Sub Query" and qualifier !=  "Winning Team" and qualifier !=  "Losing Team" and qualifier !=  "Tied Team" and qualifier !=  "Winning Or Tied Team" and qualifier !=  "Losing Or Tied Team" and qualifier != "Playoff Team" and qualifier != "WS Winner Team" and qualifier != "Pennant Winner Team" and qualifier != "Division Winner Team" and qualifier != "Team Win Percentage" and qualifier != "Team Games Over 500" and qualifier != "Team Wins" and qualifier != "Team Losses" and qualifier != "Team Runs Rank" and qualifier != "Team Runs Allowed Rank" and qualifier != "Team wRC+ Rank" and qualifier != "Team AVG Rank" and qualifier != "Team SLG Rank" and qualifier != "Team OBP Rank" and qualifier != "Team OPS Rank" and qualifier != "Team ERA- Rank" and qualifier != "Team ERA Rank" and qualifier != "Season Formula" and qualifier != "Season Number" and qualifier != "Even Year" and qualifier != "Odd Year" and qualifier != "Year" and qualifier != "Primary Season Position" and qualifier != "Season Position" and qualifier != "Team City" and qualifier != "Team Exact City" and qualifier != "Team State" and qualifier != "Team Exact State" and qualifier != "Team Country" and qualifier != "Team Exact Country" and qualifier != "Team Time Zone" and qualifier != "Team Exact Time Zone":
            is_qual_match = True
        elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
            for qual_object in time_frame["qualifiers"][qualifier]:
                for stat_obj in qual_object["values"]:
                    if not stat_obj["time_frame"] or not (stat_obj["time_frame"]["qual_type"] == "Seasons" or stat_obj["time_frame"]["qual_type"] == "Teams"):
                        is_qual_match = True

    is_season_qual = False
    if time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)):
        year = row_data["Year"]
        if not is_qual_match:
            row_data["Date"] = year
            row_data["DateTime"] = year
            is_season_qual = True

    if player_type["da_type"] == "Batter":
        row_data["Pos"] = ""
        for position in player["allPositions"]:
            if is_season_qual:
                if position["abbreviation"] in ["PH", "PR"]:
                    row_data["Pos"] += "H"
                else:
                    row_data["Pos"] += position_map_reversed[position["abbreviation"]]
            else:
                row_data["Pos"] += position["abbreviation"] + " "
        row_data["Pos"].strip()
        if "battingOrder" in player:
            row_data["BOP"] = int(player["battingOrder"][0])

    return row_data

def fix_seasons(all_rows):
    stats_to_fix = ["Seasons", "UniqueSeasons", "NonFakeSeasons", "PitchSeasons", "WARPitchSeasons", "CatchSeasons", "SlrSeasons", "RegularSeasons", "WARSeasons", "PlayoffSeasons", "AllStarSeasons"]
    for stat_to_fix in stats_to_fix:
        years = set()
        for row in all_rows:
            if row["Year"] in years:
                row[stat_to_fix] = 0
            else:
                if stat_to_fix in row and row[stat_to_fix]:
                    years.add(row["Year"])

def handle_missing_reg_rows(player_page, player_data, all_rows, player_type, time_frame):
    table_names = ["batting_standard"] if player_type["da_type"] != "Batter" else ["pitching_standard"]

    if time_frame["playoffs"]:
        if time_frame["playoffs"] == "Only":
            table_names = ["batting_postseason"] if player_type["da_type"] != "Batter" else ["pitching_postseason"]
        else:
            table_names.extend(["batting_postseason"]) if player_type["da_type"] != "Batter" else table_names.extend(["pitching_postseason"])


    seasons = set([row["Year"] for row in all_rows])
    comments = None
    previous_headers = set()
    for table_name in table_names:
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))
                    
            standard_table_rows = table.find_all("tr")
            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True
                
                if match or (table_name.endswith("postseason") and not row.get("class")) and row.parent.name != "thead" and row.parent.name != "tfoot":
                    row_data = parse_row(row, time_frame, None, False, player_type, header_values, previous_headers, 0, table_name)
                    
                    if not row_data:
                        continue
                
                    if row_data["Tm"] != "TOT":
                        if not perform_qualifier(player_data, player_type, row_data, time_frame, all_rows):
                            continue
                        if not row_data["Year"] in seasons:
                            all_rows.append({"Year" : row_data["Year"], "Date" : row_data["Date"], "DateTime" : row_data["DateTime"], "Tm" : row_data["Tm"], "TmLg" : get_team_league(row_data["Tm"], row_data["Year"]), "is_playoffs" : False, "fake_reg_row" : True})

def handle_missing_playoff_rows(player_page, player_data, valid_years, all_rows, player_type, time_frame):     
    table_names = ["batting_postseason", "pitching_postseason"]
    comments = None
    previous_headers = set()
    for table_index, table_name in enumerate(table_names):
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))
                    
            standard_table_rows = table.find_all("tr")
            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                if not row.get("class") and row.parent.name != "thead" and row.parent.name != "tfoot":
                    row_data = parse_row(row, time_frame, None, False, player_type, header_values, previous_headers, table_index, table_name)
                    
                    if not row_data:
                        continue
                
                    if not perform_qualifier(player_data, player_type, row_data, time_frame, all_rows):
                        continue

                    if row_data["Tm"] != "TOT":
                        if not row_data["Year"] in valid_years:
                            all_rows.append({"Year" : row_data["Year"], "Date" : row_data["Date"], "DateTime" : row_data["DateTime"], "Tm" : row_data["Tm"], "TmLg" : get_team_league(row_data["Tm"], row_data["Year"]), "is_playoffs" : False, "fake_playoff_row" : True})
                            valid_years.append(row_data["Year"])

def handle_no_hit(player_data, all_rows):
    parsed_no_hitters = set()
    parsed_perfect_ganes = set()
    if player_data["id"] in special_stats["no_hit"]:
        for row_data in all_rows:
            for no_hitter_obj in special_stats["no_hit"][player_data["id"]]:
                is_playoffs = no_hitter_obj["is_playoffs"]
                no_hitter = dateutil.parser.parse(no_hitter_obj["date"])
                if not no_hitter in parsed_no_hitters:
                    og_no_hitter = no_hitter
                    if isinstance(row_data["DateTime"], int):
                        no_hitter = no_hitter.year

                    if row_data["DateTime"] == no_hitter and row_data["Tm"] == no_hitter_obj["team"] and ((is_playoffs and row_data["is_playoffs"]) or (not is_playoffs and not row_data["is_playoffs"])):
                        if not "NoHit" in row_data:
                            row_data["NoHit"] = 0
                        row_data["NoHit"] += 1
                        parsed_no_hitters.add(og_no_hitter)
            if player_data["id"] in special_stats["perfect"]:
                for perfect_game_obj in special_stats["perfect"][player_data["id"]]:
                    is_playoffs = perfect_game_obj["is_playoffs"]
                    perfect_game = dateutil.parser.parse(perfect_game_obj["date"])
                    if not perfect_game in parsed_perfect_ganes:
                        og_perfect_game = perfect_game
                        if isinstance(row_data["DateTime"], int):
                            perfect_game = perfect_game.year

                        if row_data["DateTime"] == perfect_game and row_data["Tm"] == perfect_game_obj["team"] and ((is_playoffs and row_data["is_playoffs"]) or (not is_playoffs and not row_data["is_playoffs"])):
                            if not "Prfct" in row_data:
                                row_data["Prfct"] = 0
                            row_data["Prfct"] += 1
                            parsed_perfect_ganes.add(og_perfect_game)

def handle_cycle(player_data, all_rows):
    parsed_cycles = set()
    if player_data["id"] in special_stats["cycle"]:
        for row_data in all_rows:
            for cycle_obj in special_stats["cycle"][player_data["id"]]:
                is_playoffs = cycle_obj["is_playoffs"]
                date_str = cycle_obj["date"]
                is_datetime = date_str.endswith("00:00")
                attr_to_use = "DateTime" if is_datetime else "Date"
                cycle = dateutil.parser.parse(date_str) if is_datetime else dateutil.parser.parse(date_str).date()
                if not cycle in parsed_cycles:
                    og_cycle = cycle
                    if isinstance(row_data[attr_to_use], int):
                        cycle = cycle.year

                    if row_data[attr_to_use] == cycle and row_data["Tm"] == cycle_obj["team"] and ((is_playoffs and row_data["is_playoffs"]) or (not is_playoffs and not row_data["is_playoffs"])):
                        if not "Cycle" in row_data:
                            row_data["Cycle"] = 0
                        row_data["Cycle"] += 1
                        parsed_cycles.add(og_cycle)

def handle_season_only_stats(player_page, field_player_page, player_data, player_type, time_frame, all_rows, is_full_career, is_full_career_drs, is_full_career_calling_catch, is_full_career_framing_catch, is_full_teams, all_teams_unique, is_pitching_jaws, force_seasons):
    if not all_rows:
        return False
        
    table_names = ["batting_value", "pitching_value", "standard_fielding", "appearances"]
    split_table_names = ["batting_value", "pitching_value"]

    if field_player_page:
        table_names.append("advanced_fielding")

    positions_to_skip = ["LF", "RF", "CF"]

    handle_season_only_stats = False

    is_career = (time_frame["type"] == "date" and time_frame["time_start"] == datetime.date.min.year and time_frame["time_end"] == current_season) or is_full_career
    has_quals = bool(time_frame["qualifiers"])
    has_non_war_quals = False
    has_team_quals = False
    
    if not is_full_career:
        for qualifier in time_frame["qualifiers"]:
            if (qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team League" and qualifier != "Team Division"):
                is_career = False
            if qualifier != "Rookie" and qualifier != "Season Age":
                has_non_war_quals = True
        has_team_quals = "Team" in time_frame["qualifiers"] or "Team Franchise" in time_frame["qualifiers"] or "Team League" in time_frame["qualifiers"] or "Team Division" in time_frame["qualifiers"]

    is_full_career = is_full_career if is_full_career else is_career and not has_quals

    if not all_teams_unique:
        has_non_war_quals = True
    else:
        has_non_war_quals = False

    if force_seasons:
        has_non_war_quals = False

    teams_map = {}
    team_franchise = None
    for row in all_rows:
        year = str(row["Year"])
        team = row["Tm"]
        sleague = row["TmLg"]
        team_franchise = team_main_abbr[sleague][year][team]
        if team_franchise not in teams_map:
            teams_map[team_franchise] = {}
        teams_map[team_franchise][year] = team

    is_multi_team = is_full_teams and len(teams_map) > 1 and has_team_quals
    is_single_team = is_full_teams and len(teams_map) == 1
    
    min_year = None
    max_year = None
    stat_sum_range = None
    if not has_non_war_quals:
        all_years = set()
        for row in all_rows:
            all_years.add(str(row["Year"]))
        min_year = min(set([row["Year"] for row in all_rows]))
        max_year = max(set([row["Year"] for row in all_rows]))
        stat_sum_range = ",".join(all_years) if len(all_years) > 1 else list(all_years)[0] + "-" + list(all_years)[0]
    
    is_full_current_year = min_year == max_year and min_year == current_season
    
    if stat_sum_range and (not has_team_quals or is_full_teams or all_teams_unique):
        if player_type["da_type"] != "Batter":
            split_table_names.append("pitching_start")
            split_table_names.append("pitching_win_probability")
        else:
            split_table_names.append("batting_win_probability")
        for row in all_rows:
            row["WPA"] = 0
            row["cWPA"] = 0
            row["RE24"] = 0
    
    comments = None
    previous_headers = set()
    has_pitch_war = False
    has_pos_war = False
    has_pitch_waa = False
    has_pos_waa = False
    for table_index, table_name in enumerate(split_table_names):
        table_has_teeam_quals = has_team_quals and not is_full_teams and not all_teams_unique

        player_page_to_use = player_page
        if stat_sum_range and not table_has_teeam_quals:
            request = urllib.request.Request(sum_stats_format.format(player_data["id"], table_name, stat_sum_range), headers=request_headers)
            try:
                response, player_page_to_use = url_request(request)
            except urllib.error.HTTPError:
                raise

            table_name = "span_stats"

        table = player_page_to_use.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page_to_use.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))

            standard_table_rows = table.find("tbody").find_all("tr")

            single_team_match = False
            is_all_match = False
            if is_multi_team and table_name != "span_stats":
                standard_table_rows = table.find("tfoot").find_all("tr")[3:]
                if standard_table_rows:
                    is_all_match = True
                    rows_to_remove = set()
                    for index, new_row in enumerate(standard_table_rows):
                        team_franchise = str(new_row.find("th", {"data-stat" : "player_stats_summary_explain"}).find(text=True)).split("(")[0].strip().upper()
                        if team_franchise not in teams_map:
                            rows_to_remove.add(index)
                            continue
                        last_year = max(teams_map[team_franchise].keys())
                        single_team = teams_map[team_franchise][last_year]
                        new_row.find("th").extract()
                        new_row.find("td").extract()

                        new_tag = player_page.new_tag("td")
                        new_tag["data-stat"] = "lg_ID"
                        new_tag.string = "League"
                        new_row.insert(0, new_tag)
                        new_tag = player_page.new_tag("td")
                        new_tag["data-stat"] = "team_ID"
                        new_tag.string = single_team
                        new_row.insert(0, new_tag)
                        new_tag = player_page.new_tag("td")
                        new_tag["data-stat"] = "age"
                        new_tag.string = "Age"
                        new_row.insert(0, new_tag)
                        new_tag = player_page.new_tag("th")
                        new_tag["data-stat"] = "year_ID"
                        new_tag.string = last_year
                        new_row.insert(0, new_tag)
                    standard_table_rows = [team_row for index, team_row in enumerate(standard_table_rows) if index not in rows_to_remove]
                else:
                    request = urllib.request.Request(sum_stats_format.format(player_data["id"], table_name, stat_sum_range), headers=request_headers)
                    try:
                        response, player_page_to_use = url_request(request)
                    except urllib.error.HTTPError:
                        raise

                    table_name = "span_stats"

                    table = player_page_to_use.find("table", id=table_name)
                    if not table:
                        if not comments:
                            comments = player_page_to_use.find_all(string=lambda text: isinstance(text, Comment))
                        for c in comments:
                            temp_soup = BeautifulSoup(c, "lxml")
                            temp_table = temp_soup.find("table", id=table_name)
                            if temp_table:
                                table = temp_table
                                break

                    if not table:
                        continue

                    header_columns = table.find("thead").find_all("th")

                    header_values = []
                    for header in header_columns:
                        contents = header.find(text=True)
                        if contents:
                            header_values.append(str(contents))

                    standard_table_rows = table.find("tbody").find_all("tr")
            elif is_single_team and table_name in ("batting_value", "pitching_value"):
                len_team = len(teams_map[team_franchise])
                last_year = max(teams_map[team_franchise].keys())
                single_team = teams_map[team_franchise][last_year]
                standard_table_rows = table.find("tfoot").find_all("tr")
                for row in standard_table_rows:
                    explain_row = row.find("th", {"data-stat" : "player_stats_summary_explain"})
                    if explain_row and explain_row.find(text=True) and re.match(single_team + r" \(" + str(len_team) + r" yrs?\)", str(explain_row.find(text=True))):
                        last_row = all_rows[len(all_rows) - 1]
                        row.find("th").extract()
                        row.find("td").extract()

                        new_tag = player_page.new_tag("td")
                        new_tag["data-stat"] = "lg_ID"
                        new_tag.string = "League"
                        row.insert(0, new_tag)
                        new_tag = player_page.new_tag("td")
                        new_tag["data-stat"] = "team_ID"
                        new_tag.string = single_team
                        row.insert(0, new_tag)
                        new_tag = player_page.new_tag("td")
                        new_tag["data-stat"] = "age"
                        new_tag.string = "Age"
                        row.insert(0, new_tag)
                        new_tag = player_page.new_tag("th")
                        new_tag["data-stat"] = "year_ID"
                        new_tag.string = str(last_row["Year"])
                        row.insert(0, new_tag)

                        standard_table_rows = [row]
                        single_team_match = True
                        break

            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                row_id = row.get("id")
                match =  True if is_all_match else bool(stat_sum_range and not table_has_teeam_quals)
                if single_team_match:
                    match = True

                if row_id:
                    if table_name in ["standard_fielding", "advanced_fielding"]:
                        match = re.match(r"^\d+\:standard_fielding$", row_id)
                    else:
                        match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True

                if match:
                    if table_name in ["standard_fielding", "advanced_fielding"] and str(row.find("td", {"data-stat" : "pos"}).find(text=True)) in positions_to_skip:
                        continue
                
                    if stat_sum_range and not table_has_teeam_quals:
                        row_year = row.find("th", {"data-stat" : "year_ID"})
                        year_to_set = str(row_year.find(text=True)).split("-")[1]
                        row_year.string = year_to_set

                    row_data = parse_row(row, time_frame, False, False, player_type, header_values, previous_headers, table_index, split_table_names[table_index])
                    
                    if not row_data:
                        continue

                    if (stat_sum_range and not table_has_teeam_quals) or row_data["Tm"] != "TOT":
                        for pot_row in reversed(all_rows):
                            if pot_row["Year"] == row_data["Year"] and ((stat_sum_range and not table_has_teeam_quals) or pot_row["Tm"] == row_data["Tm"]):
                                for stat in row_data:
                                    if stat in headers[player_type["da_type"]] and (stat == "WPA" or stat == "cWPA" or stat == "RE24" or ("type" in headers[player_type["da_type"]][stat] and headers[player_type["da_type"]][stat]["type"].startswith("Defense"))):
                                        if stat == "Salary":
                                            continue
                                        if table_name.endswith("win_probability") and stat != "WPA" and stat != "cWPA" and stat != "RE24":
                                            continue
                                        if not stat in pot_row:
                                            pot_row[stat] = 0.0
                                        if stat in decimal_stats:
                                            pot_row[stat] = round_value(pot_row[stat] + row_data[stat], 1)
                                        else:
                                            pot_row[stat] += row_data[stat]
                                        
                                        if pot_row[stat]:
                                            if stat == "WAAPitch":
                                                has_pitch_waa = True
                                            elif stat == "WAAPos":
                                                has_pos_waa = True
                                            elif stat == "WARPitch":
                                                has_pitch_war = True
                                            elif stat == "WARPos":
                                                has_pos_war = True
                                        
                                        new_stat = "Slr" + stat
                                        if not new_stat in pot_row:
                                            pot_row[new_stat] = 0.0
                                        if stat in decimal_stats:
                                            pot_row[new_stat] = round_value(pot_row[new_stat] + row_data[stat], 1)
                                        else:
                                            pot_row[new_stat] += row_data[stat]

                                        new_stat = "SlrInfl" + stat
                                        if not new_stat in pot_row:
                                            pot_row[new_stat] = 0.0
                                        if stat in decimal_stats:
                                            pot_row[new_stat] = round_value(pot_row[new_stat] + row_data[stat], 1)
                                        else:
                                            pot_row[new_stat] += row_data[stat]
                                break
            
            if stat_sum_range and not table_has_teeam_quals:
                tfoot = table.find("tfoot")
                if tfoot:
                    total_rows = table.find("tfoot").find_all("tr")
                    if total_rows:
                        total_row = total_rows[0]

                        pot_row = all_rows[len(all_rows) - 1]

                        row_year = total_row.find("th")
                        year_to_set = str(pot_row["Year"])
                        row_year.string = year_to_set

                        new_header_valus = header_values.copy()
                        if "Tm" in header_values:
                            header_values.remove("Tm")

                        row_data = parse_row(total_row, time_frame, False, False, player_type, header_values, set(), table_index, split_table_names[table_index])

                        for stat in row_data:
                            if stat in headers[player_type["da_type"]] and (stat == "WPA" or stat == "cWPA" or stat == "RE24" or ("type" in headers[player_type["da_type"]][stat] and headers[player_type["da_type"]][stat]["type"].startswith("Defense"))):
                                if stat == "Salary":
                                    continue
                                if table_name.endswith("win_probability") and stat != "WPA" and stat != "cWPA" and stat != "RE24":
                                    continue
                                new_stat = stat + "/Yr"
                                if new_stat in headers[player_type["da_type"]]:
                                    pot_row[new_stat] = row_data[stat]

    
    pot_row = all_rows[len(all_rows) - 1]
    stat_keys = list(pot_row.keys())
    for stat in stat_keys:
        if stat == "WAAPos/Yr":
            if not has_pitch_waa:
                pot_row["WAA/Yr"] = pot_row[stat]
        elif stat == "WAAPitch/Yr":
            if not has_pos_waa:
                pot_row["WAA/Yr"] = pot_row[stat]
        elif stat == "WARPos/Yr":
            if not has_pitch_war:
                pot_row["WAR/Yr"] = pot_row[stat]
        elif stat == "WARPitch/Yr":
            if not has_pos_war:
                pot_row["WAR/Yr"] = pot_row[stat]

    comments = None
    field_comments = None
    previous_headers = set()
    years_have_salary = {}
    drs_year_values = []
    for table_index, table_name in enumerate(table_names):
        player_page_to_use = player_page
        if table_name == "advanced_fielding":
            player_page_to_use = field_player_page

        table = player_page_to_use.find("table", id=table_name)
        if not table:
            if table_name == "advanced_fielding":
                if not field_comments:
                    field_comments = player_page_to_use.find_all(string=lambda text: isinstance(text, Comment))
                for c in field_comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("table", id=table_name)
                    if temp_table:
                        table = temp_table
                        break
            else:
                if not comments:
                    comments = player_page_to_use.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("table", id=table_name)
                    if temp_table:
                        table = temp_table
                        break

        if table:
            header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))

            standard_table_rows = table.find("tbody").find_all("tr")

            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                row_id = row.get("id")
                match = False
                if row_id:
                    if table_name in ["standard_fielding", "advanced_fielding"]:
                        match = re.match(r"^\d+\:standard_fielding$", row_id)
                    else:
                        match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True
                elif table_name == "appearances":
                    match = True

                if match:
                    if table_name in ["standard_fielding", "advanced_fielding"] and str(row.find("td", {"data-stat" : "pos"}).find(text=True)) in positions_to_skip:
                        continue

                    row_data = parse_row(row, time_frame, False, False, player_type, header_values, previous_headers, table_index, table_name)
                    
                    if not row_data:
                        continue
                    
                    if row_data["Tm"] != "TOT":
                        for pot_row in reversed(all_rows):
                            if pot_row["Year"] == row_data["Year"] and pot_row["Tm"] == row_data["Tm"]:
                                if table_name == "pitching_value":
                                    handle_season_only_stats = True
                                for stat in row_data:
                                    if stat in headers[player_type["da_type"]] and "type" in headers[player_type["da_type"]][stat] and headers[player_type["da_type"]][stat]["type"].startswith("Defense"):
                                        if stat == "Salary":
                                            if row_data["Tm"] in years_have_salary and row_data["Year"] in years_have_salary[row_data["Tm"]]:
                                                continue
                                            if row_data["Tm"] not in years_have_salary:
                                                years_have_salary[row_data["Tm"]] = set()
                                            years_have_salary[row_data["Tm"]].add(row_data["Year"])
                                        
                                        if stat == "Salary" or table_name in ["standard_fielding", "advanced_fielding"]:
                                            if stat == "Rdrs/yr":
                                                drs_year_values.append({
                                                    "pos" : str(row.find("td", {"data-stat" : "pos"}).find(text=True)),
                                                    "val" : row_data[stat]
                                                })
                                                continue

                                            if not stat in pot_row:
                                                pot_row[stat] = 0.0
                                            if stat in decimal_stats:
                                                pot_row[stat] = round_value(pot_row[stat] + row_data[stat], 1)
                                            else:
                                                pot_row[stat] += row_data[stat]
                                            
                                            if stat == "Salary" and str(row_data["Year"]) in cpis and str(current_season) in cpis:
                                                if not "InflSalary" in pot_row:
                                                    pot_row["InflSalary"] = 0.0
                                                avg_year_cpi = cpis[str(row_data["Year"])]["total_cpi"] / cpis[str(row_data["Year"])]["total_months"]
                                                avg_current_cpi = cpis[str(current_season)]["total_cpi"] / cpis[str(current_season)]["total_months"]
                                                    
                                                pot_row["InflSalary"] += (row_data[stat] * avg_current_cpi) / float(avg_year_cpi)
                                        else:
                                            new_stat = stat
                                            if new_stat != "PosG":
                                                new_stat = "Raw" + stat
                                            if not new_stat in pot_row:
                                                pot_row[new_stat] = 0.0
                                            if stat in decimal_stats:
                                                pot_row[new_stat] = round_value(pot_row[new_stat] + row_data[stat], 1)
                                            else:
                                                pot_row[new_stat] += row_data[stat]
                                            if pot_row[new_stat]:
                                                if stat == "WAAPitch":
                                                    has_pitch_waa = True
                                                elif stat == "WAAPos":
                                                    has_pos_waa = True
                                                elif stat == "WARPitch":
                                                    has_pitch_war = True
                                                elif stat == "WARPos":
                                                    has_pos_war = True

                                break
                            
            previous_headers.update(header_values)
    
    if is_full_career_drs:
        table = player_page.find("table", id="standard_fielding")
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id="standard_fielding")
                if temp_table:
                    table = temp_table
                    break

        if table:
            total_rows = table.find("tfoot").find_all("tr")
            if total_rows:
                total_row = total_rows[len(total_rows) - 1]
                drs_col = total_row.find("td", {"data-stat" : "bis_runs_total"})
                if not drs_col:
                    total_row = total_rows[len(total_rows) - 2]
                    drs_col = total_row.find("td", {"data-stat" : "bis_runs_total"})
                if drs_col:
                    drs_value = drs_col.find(text=True)
                    if drs_value:
                        for row in all_rows:
                            if "Rdrs" in row:
                                row["Rdrs"] = 0

                        all_rows[len(all_rows) - 1]["Rdrs"] = int(str(drs_value))
                drs_col = total_row.find("td", {"data-stat" : "bis_runs_total_per_season"})
                if not drs_col:
                    total_row = total_rows[len(total_rows) - 2]
                    drs_col = total_row.find("td", {"data-stat" : "bis_runs_total_per_season"})
                if drs_col:
                    drs_value = drs_col.find(text=True)
                    if drs_value:
                        for row in all_rows:
                            if "Rdrs/yr" in row:
                                row["Rdrs/yr"] = 0

                        all_rows[len(all_rows) - 1]["Rdrs/yr"] = int(str(drs_value))
    elif len(drs_year_values) == 1 and drs_year_values[0]["pos"] != "P":
        for row in all_rows:
            if "Rdrs/yr" in row:
                row["Rdrs/yr"] = 0

        all_rows[len(all_rows) - 1]["Rdrs/yr"] = int(drs_year_values[0]["val"])

    if player_type["da_type"] == "Batter" and is_full_career:
        table = player_page.find("table", id="batting_value")
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id="batting_value")
                if temp_table:
                    table = temp_table
                    break

        if table:
            total_rows = table.find("tfoot").find_all("tr")
            if total_rows:
                total_row = total_rows[1]
                all_rows[len(all_rows) - 1]["WAAPos/162"] = float(total_row.find("td", {"data-stat" : "WAA"}).find(text=True))
                all_rows[len(all_rows) - 1]["oWAR/162"] = float(total_row.find("td", {"data-stat" : "WAR_off"}).find(text=True))
                all_rows[len(all_rows) - 1]["dWAR/162"] = float(total_row.find("td", {"data-stat" : "WAR_def"}).find(text=True))
                all_rows[len(all_rows) - 1]["WARPos/162"] = float(total_row.find("td", {"data-stat" : "WAR"}).find(text=True))
    
    if is_full_career and player_data["player_jaws_position"]:
        allowed_car_war = False
        if is_pitching_jaws:
            if player_data["player_jaws_position"].endswith("P") or not has_pitch_war:
                allowed_car_war = True
        else:
            allowed_car_war = True
        if allowed_car_war:
            hof_div = player_page.find("div", {"id" : "div_hof_other"})
            if not hof_div:
                if not comments:
                    comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                for c in comments:
                    temp_soup = BeautifulSoup(c, "lxml")
                    temp_table = temp_soup.find("div", {"id" : "div_hof_other"})
                    if temp_table:
                        hof_div = temp_table
                        break
            if hof_div:
                hof_table = hof_div.find("table")
                if hof_table:
                    jaws_row = hof_table.find("a", text="JAWS")
                    if jaws_row:
                        jaws_parent = jaws_row.find_parent("tr")
                        if jaws_parent:
                            next_row = jaws_parent.find_next_sibling("tr")
                            if next_row:
                                player_pos_link = next_row.find("a")
                                if player_pos_link and player_pos_link.find(text=True):
                                    jaws_strongs = next_row.find_all("strong")
                                    war_strong = str(jaws_strongs[1].find(text=True))
                                    war_7yr_strong = str(jaws_strongs[2].find(text=True))
                                    jaws_strong = str(jaws_strongs[3].find(text=True))
                                    if war_strong and war_7yr_strong and jaws_strong:
                                        all_rows[len(all_rows) - 1]["WAR7yr"] = float(war_7yr_strong)
                                        all_rows[len(all_rows) - 1]["JAWS"] = float(jaws_strong)
    
    if player_data["catch_valid_years"] and (is_full_career_calling_catch or is_full_career_framing_catch):
        table = field_player_page.find("table", id="advanced_fielding")
        if not table:
            if not field_comments:
                field_comments = field_player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in field_comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id="standard_fielding")
                if temp_table:
                    table = temp_table
                    break

        if table:
            total_rows = table.find("tfoot").find_all("tr")
            if total_rows:
                total_row = total_rows[len(total_rows) - 1]
                if is_full_career_calling_catch:
                    drs_col = total_row.find("td", {"data-stat" : "bis_runs_catcher_er"})
                    if not drs_col:
                        total_row = total_rows[len(total_rows) - 2]
                        drs_col = total_row.find("td", {"data-stat" : "bis_runs_catcher_er"})
                    if drs_col:
                        drs_value = drs_col.find(text=True)
                        if drs_value:
                            for row in all_rows:
                                if "RerC" in row:
                                    row["RerC"] = 0

                            all_rows[len(all_rows) - 1]["RerC"] = int(str(drs_value))
                if is_full_career_framing_catch:
                    drs_col = total_row.find("td", {"data-stat" : "bis_runs_catcher_sz"})
                    if not drs_col:
                        total_row = total_rows[len(total_rows) - 2]
                        drs_col = total_row.find("td", {"data-stat" : "bis_runs_catcher_sz"})
                    if drs_col:
                        drs_value = drs_col.find(text=True)
                        if drs_value:
                            for row in all_rows:
                                if "RszC" in row:
                                    row["RszC"] = 0

                            all_rows[len(all_rows) - 1]["RszC"] = int(str(drs_value))
    
    set_war = False
    if is_full_career or is_full_current_year:
        info_div = player_page.find("div", {"id" : "info"})
        if info_div:
            stats_div = info_div.find("div", {"class" : "stats_pullout"})
            if stats_div:
                war_h4 = stats_div.find("strong", text="WAR")
                if war_h4:
                    war_ps = war_h4.parent.find_next_siblings("p")
                    if war_ps:
                        war_value = None
                        if is_full_career:
                            war_value = war_ps[len(war_ps) - 1].find(text=True)
                        elif len(war_ps) == 2:
                            war_value = war_ps[0].find(text=True)
                        if war_value and war_value != "-":
                            set_war = True
                            all_rows[len(all_rows) - 1]["WAR"] = float(str(war_value))
                            all_rows[len(all_rows) - 1]["SlrWAR"] = float(str(war_value))
                            all_rows[len(all_rows) - 1]["SlrInflWAR"] = float(str(war_value))
                            if is_full_current_year and is_pitching_jaws:
                                all_rows[len(all_rows) - 1]["WAR7yr"] = float(str(war_value))
                                all_rows[len(all_rows) - 1]["JAWS"] = float(str(war_value))
    
    if stat_sum_range and (not has_team_quals or is_full_teams or all_teams_unique):
        total_salary_stats = {}
        total_infl_salary_stats = {}
        for row in all_rows:
            for stat in row:
                if "SlrInfl" in stat:
                    if not stat in total_infl_salary_stats:
                        total_infl_salary_stats[stat] = 0
                    total_infl_salary_stats[stat] += row[stat]
                    row[stat] = 0
                elif "Slr" in stat:
                    if not stat in total_salary_stats:
                        total_salary_stats[stat] = 0
                    total_salary_stats[stat] += row[stat]
                    row[stat] = 0

        for row in all_rows:
            for stat in row:
                if stat.startswith("Raw"):
                    display_stat = stat.replace("Raw", "SlrInfl", 1)
                    if display_stat in total_infl_salary_stats and "InflSalary" not in row:
                        total_infl_salary_stats[display_stat] -= row[stat]
                        if (stat == "RawWARPitch" or stat == "RawWARPos") and "SlrInflWAR" in total_infl_salary_stats:
                            total_infl_salary_stats["SlrInflWAR"] -= row[stat]
                    display_stat = stat.replace("Raw", "Slr", 1)
                    if display_stat in total_salary_stats and "Salary" not in row:
                        total_salary_stats[display_stat] -= row[stat]
                        if (stat == "RawWARPitch" or stat == "RawWARPos") and "SlrWAR" in total_salary_stats:
                            total_salary_stats["SlrWAR"] -= row[stat]
        
        for stat in total_salary_stats:
            all_rows[len(all_rows) - 1][stat] = total_salary_stats[stat]
        for stat in total_infl_salary_stats:
            all_rows[len(all_rows) - 1][stat] = total_infl_salary_stats[stat]
    else:
        for row in all_rows:
            for stat in row:
                if "SlrInfl" in stat:
                    if "InflSalary" not in row:
                        row[stat] = 0
                elif "Slr" in stat:
                    if "Salary" not in row:
                        row[stat] = 0

    if stat_sum_range and (not has_team_quals or is_full_teams or all_teams_unique):
        if "WAR7yr" not in all_rows[len(all_rows) - 1]:
            all_rows[len(all_rows) - 1]["WAR7yr"] = calculate_manual_war_7yr(all_rows, player_data, player_type, time_frame, is_pitching_jaws)
    
    for row in all_rows:
        war_jaws = row.get("WARPos", 0)
        war = row.get("WARPos", 0)
        waa = row.get("WAAPos", 0)
        slr_war = row.get("SlrWARPos", 0)
        slr_ifl_war = row.get("SlrInflWARPos", 0)
        if is_pitching_jaws:
            war_jaws += row.get("WARPitch", 0)
        war += row.get("WARPitch", 0)
        waa += row.get("WAAPitch", 0)
        slr_war += row.get("SlrWARPitch", 0)
        slr_ifl_war += row.get("SlrInflWARPitch", 0)
        row["WARJAWS"] = war_jaws
        if not set_war:
            row["WAR"] = war
            row["SlrWAR"] = slr_war
            row["SlrInflWAR"] = slr_ifl_war
        row["WAA"] = waa

    if set_war and is_full_current_year and is_pitching_jaws:
        for row in all_rows:
            row["WARJAWS"] = 0
        all_rows[len(all_rows) - 1]["WARJAWS"] = all_rows[len(all_rows) - 1]["WAR"]
    
    return handle_season_only_stats

def handle_awards(player_page, player_data, player_type, time_frame, is_full_career, years_to_skip, years_to_skip_champ, years_to_skip_allstar, all_rows):
    count_divs = {
        "leaderboard_allstar" : "AllStar",
        "leaderboard_hr_derby" : "Derby",
        "leaderboard_silver_sluggers" : "SlvSlug",
        "leaderboard_gold_gloves" : "GldGlv",
        "leaderboard_HR" : "BInk 4",
        "leaderboard_RBI" : "BInk 4",
        "leaderboard_batting_avg" : "BInk 4",
        "leaderboard_R" : "BInk 3",
        "leaderboard_H" : "BInk 3",
        "leaderboard_slugging_perc" : "BInk 3",
        "leaderboard_2B" : "BInk 2",
        "leaderboard_BB" : "BInk 2",
        "leaderboard_SB" : "BInk 2",
        "leaderboard_G" : "BInk 1",
        "leaderboard_AB" : "BInk 1",
        "leaderboard_3B" : "BInk 1",
        "leaderboard_W" : "P Ink 4",
        "leaderboard_earned_run_avg" : "P Ink 4",
        "leaderboard_SO_p" : "P Ink 4",
        "leaderboard_IP" : "P Ink 3",
        "leaderboard_win_loss_perc" : "P Ink 3",
        "leaderboard_SV" : "P Ink 3",
        "leaderboard_CG" : "P Ink 2",
        "leaderboard_bases_on_balls_per_nine" : "P Ink 2",
        "leaderboard_hits_per_nine" : "P Ink 2",
        "leaderboard_G_p" : "P Ink 1",
        "leaderboard_GS" : "P Ink 1",
        "leaderboard_SHO" : "P Ink 1"
    }

    is_career = (time_frame["type"] == "date" and time_frame["time_start"] == datetime.date.min.year and time_frame["time_end"] == current_season) or is_full_career
    has_quals = bool(time_frame["qualifiers"])
    is_full_career = is_full_career if is_full_career else is_career and not has_quals

    comments = None
    for div_id in count_divs:
        count_div = player_page.find("div", id=div_id)
        if not count_div:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_div = temp_soup.find("div", id=div_id)
                if temp_div:
                    count_div = temp_div
                    break
                    
        if count_div:
            count_table_rows = count_div.find("table").find_all("tr")
            for count_table_row in count_table_rows:
                if div_id == "leaderboard_allstar":
                    count_table_text = None
                    year_str = str(count_table_row.text).strip()[:4]
                elif div_id == "leaderboard_hr_derby":
                    count_table_text = None
                    derby_text = str(count_table_row.text).strip()
                    if not derby_text.endswith("(Winner)"):
                        continue
                    year_str = derby_text[:4]
                else:
                    count_table_link = count_table_row.find("a")
                    count_table_text = str(count_table_link.find(text=True))
                    year_str = count_table_text.split("-")[0].split()[0]
                if year_str.isdigit():
                    year = int(year_str)
                    if int(year) not in years_to_skip or div_id in ("leaderboard_allstar", "leaderboard_hr_derby"):
                        for row in all_rows:
                            if div_id not in ("leaderboard_allstar", "leaderboard_hr_derby") or (row["Year"] not in years_to_skip_allstar or (len(years_to_skip_allstar[row["Year"]]) == 1 and years_to_skip_allstar[row["Year"]][0] == row["Tm"])):
                                if row["Year"] == year:
                                    if count_divs[div_id].startswith("BInk") or count_divs[div_id].startswith("P Ink"):
                                        if year < current_season or True:
                                            if count_table_text.endswith("ML"):
                                                continue

                                            row_split = None
                                            if count_divs[div_id].startswith("BInk"):
                                                row_split = "BInk"
                                                b_ink_to_use = "BatBInk"
                                                g_ink_to_user = "BatGInk"
                                            elif count_divs[div_id].startswith("P Ink"):
                                                row_split = "P Ink"
                                                b_ink_to_use = "PitchBInk"
                                                g_ink_to_user = "PitchGInk"
                                            
                                            if not row_split:
                                                continue

                                            row_weight = int(count_divs[div_id].split(row_split)[1])
                                            if not b_ink_to_use in row:
                                                row[b_ink_to_use] = 0
                                            if not g_ink_to_user in row:
                                                row[g_ink_to_user] = 0
                                            
                                            if count_table_row.get("class") and "first_place" in count_table_row.get("class"):
                                                row[b_ink_to_use] += row_weight
                                            row[g_ink_to_user] += row_weight
                                    else:
                                        if not count_divs[div_id] in row:
                                            row[count_divs[div_id]] = 0
                                        row[count_divs[div_id]] += 1
                                        if div_id == "leaderboard_allstar":
                                            row["AllStarInd"] = 1
                                    break

    awards_div = player_page.find("div", id="leaderboard_awards")
    if not awards_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="leaderboard_awards")
            if temp_div:
                awards_div = temp_div
                break
                
    if awards_div:
        awards_table_links = awards_div.find("table").find_all("a")
        for awards_table_link in awards_table_links:
            award_text = str(awards_table_link.find(text=True))
            if award_text.endswith("Rookie of the Year"):
                year = int(award_text.split()[0])
                if int(year) not in years_to_skip:
                    for row in all_rows:
                        if row["Year"] == year:
                            if not "ROY" in row:
                                row["ROY"] = 0
                            row["ROY"] += 1
                            break
            elif award_text.endswith("Platinum Glove"):
                year = int(award_text.split()[0])
                if int(year) not in years_to_skip:
                    for row in all_rows:
                        if row["Year"] == year:
                            if not "PltGlv" in row:
                                row["PltGlv"] = 0
                            row["PltGlv"] += 1
                            break
            elif award_text.endswith("Rolaids Relief") or award_text.endswith("Reliever Award"):
                if player_type["da_type"] != "Batter":
                    year = int(award_text.split()[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Year"] == year:
                                if not "ReliefYr" in row:
                                    row["ReliefYr"] = 0
                                row["ReliefYr"] += 1
                                break
            elif award_text.endswith("AS MVP"):
                year = int(award_text.split()[0])
                for row in all_rows:
                    if row["Year"] == year:
                        if row["Year"] not in years_to_skip_allstar or (len(years_to_skip_allstar[row["Year"]]) == 1 and years_to_skip_allstar[row["Year"]][0] == row["Tm"]):
                            if not "ASMVP" in row:
                                row["ASMVP"] = 0
                            row["ASMVP"] += 1
                            break
            elif award_text.endswith("CS MVP"):
                year = int(award_text.split()[0])
                for row in all_rows:
                    if row["Year"] not in years_to_skip_champ or years_to_skip_champ[row["Year"]] == row["Tm"]:
                        if row["Year"] == year:
                            if not "CSMVP" in row:
                                row["CSMVP"] = 0
                            row["CSMVP"] += 1
                            break
            elif award_text.endswith("WS MVP"):
                year = int(award_text.split()[0])
                for row in all_rows:
                    if year not in years_to_skip_champ or years_to_skip_champ[year] == row["Tm"]:
                        if row["Year"] == year:
                            if not "WSMVP" in row:
                                row["WSMVP"] = 0
                            row["WSMVP"] += 1
                            break
            elif award_text.endswith("MVP"):
                year = int(award_text.split()[0])
                if int(year) not in years_to_skip:
                    for row in all_rows:
                        if row["Year"] == year:
                            if not "MVP" in row:
                                row["MVP"] = 0
                            row["MVP"] += 1
                            break
            elif award_text.endswith("Cy Young"):
                if player_type["da_type"] != "Batter":
                    year = int(award_text.split()[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Year"] == year:
                                if not "CyYoung" in row:
                                    row["CyYoung"] = 0
                                row["CyYoung"] += 1
                                break
            elif award_text.endswith("Hank Aaron Award"):
                if player_type["da_type"] == "Batter":
                    year = int(award_text.split()[0])
                    if int(year) not in years_to_skip:
                        for row in all_rows:
                            if row["Year"] == year:
                                if not "HankAaron" in row:
                                    row["HankAaron"] = 0
                                row["HankAaron"] += 1
                                break
            elif "All-MLB" in award_text:
                award_text_spl = award_text.split()
                year = int(award_text_spl[0])
                if int(year) not in years_to_skip:
                    level = int(award_text_spl[len(award_text_spl) - 1])
                    level = "AllMLB:1st" if level == 1 else "AllMLB:2nd"
                    for row in all_rows:
                        if row["Year"] == year:
                            if level == "AllMLB:1st":
                                row[level] = 1
                                row["AllMLB:2nd"] = 0
                            elif not row.get("AllMLB:1st", None):
                                row["AllMLB:2nd"] = 1
                            break
        
    table_name = "pitching_standard" if player_type["da_type"] != "Batter" else "batting_standard"
    standard_table = player_page.find("table", id=table_name)
    if not standard_table:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("table", id=table_name)
            if temp_div:
                standard_table = temp_div
                break
    
    if standard_table:
        standard_table_rows = standard_table.find_all("tr")
        for row in standard_table_rows:
            row_id = row.get("id")
            match = False
            if row_id:
                match = re.match(r"^" + table_name + r"\.\d+$", row_id)
            elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                match = True

            if match:
                year = int(str(row.find("th").find(text=True)).split("-")[0])
                if int(year) not in years_to_skip:
                    if year < current_season or show_title_current_season:
                        if player_type["da_type"] != "Batter":
                            era_row = row.find("td", {"data-stat" : "earned_run_avg"})
                            wins_row = row.find("td", {"data-stat" : "W"})
                            strikeouts_row = row.find("td", {"data-stat" : "SO"})

                            if era_row and era_row.find("strong"):
                                is_trip_crown = wins_row and wins_row.find("strong") and strikeouts_row and strikeouts_row.find("strong")
                                for row in all_rows:
                                    if row["Year"] == year:
                                        if not "PitchTitle" in row:
                                            row["PitchTitle"] = 0
                                        row["PitchTitle"] += 1
                                        if is_trip_crown:
                                            if not "TripCrown" in row:
                                                row["TripCrown"] = 0
                                            row["TripCrown"] += 1
                                        break
                        else:
                            avg_row = row.find("td", {"data-stat" : "batting_avg"})
                            hrs_row = row.find("td", {"data-stat" : "HR"})
                            rbis_row = row.find("td", {"data-stat" : "RBI"})

                            if avg_row and avg_row.find("strong"):
                                is_trip_crown = hrs_row and hrs_row.find("strong") and rbis_row and rbis_row.find("strong")
                                for row in all_rows:
                                    if row["Year"] == year:
                                        if not "BatTitle" in row:
                                            row["BatTitle"] = 0
                                        row["BatTitle"] += 1
                                        if is_trip_crown:
                                            if not "TripCrown" in row:
                                                row["TripCrown"] = 0
                                            row["TripCrown"] += 1
                                        break

    shares_div = player_page.find("div", id="leaderboard_mvp")
    if not shares_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="leaderboard_mvp")
            if temp_div:
                shares_div = temp_div
                break
                
    if shares_div:
        shares_table_rows = shares_div.find("table").find_all("td")
        if is_full_career:
            shares_table_row = shares_table_rows[len(shares_table_rows) - 1]
            share = float(str(shares_table_row.text).strip().split()[0])
            if all_rows:
                row = all_rows[len(all_rows) - 1]
                if not "MVPShares" in row:
                    row["MVPShares"] = 0.0
                row["MVPShares"] += share
        else:
            for shares_table_row in shares_table_rows:
                share_text = str(shares_table_row.text).strip()
                share_regex = re.match(r"^(\d{4}).*\(\d+, (\d{1,3})%\)$", share_text)
                if share_regex:
                    year = int(share_regex.group(1))
                    if int(year) not in years_to_skip:
                        share = int(share_regex.group(2)) / 100
                        for row in all_rows:
                            if row["Year"] == year:
                                if not "MVPShares" in row:
                                    row["MVPShares"] = 0.0
                                row["MVPShares"] += share
                                break

    if player_type["da_type"] != "Batter":
        shares_div = player_page.find("div", id="leaderboard_cyyoung")
        if not shares_div:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_div = temp_soup.find("div", id="leaderboard_cyyoung")
                if temp_div:
                    shares_div = temp_div
                    break
                    
        if shares_div:
            shares_table_rows = shares_div.find("table").find_all("td")
            if is_full_career:
                shares_table_row = shares_table_rows[len(shares_table_rows) - 1]
                share = float(str(shares_table_row.text).strip().split()[0])
                if all_rows:
                    row = all_rows[len(all_rows) - 1]
                    if not "CyShares" in row:
                        row["CyShares"] = 0.0
                    row["CyShares"] += share
            else:
                for shares_table_row in shares_table_rows:
                    share_text = str(shares_table_row.text).strip()
                    share_regex = re.match(r"^(\d{4}).*\(\d+, (\d{1,3})%\)$", share_text)
                    if share_regex:
                        year = int(share_regex.group(1))
                        if int(year) not in years_to_skip:
                            share = int(share_regex.group(2)) / 100
                            for row in all_rows:
                                if row["Year"] == year:
                                    if not "CyShares" in row:
                                        row["CyShares"] = 0.0
                                    row["CyShares"] += share
                                    break

    table_names = ["batting_postseason", "pitching_postseason"]
    ps_years_parsed = set()
    for table_name in table_names:
        table = player_page.find("table", id=table_name)

        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                row_year = row.find("th", {"data-stat" : "year_ID"})
                if row_year:
                    world_series = row_year.find("span", {"class" : "sr_ring"})
                    if world_series:
                        row_year = int(str(row_year.find(text=True)))
                        if row_year not in ps_years_parsed:
                            for row in all_rows:
                                if row_year not in years_to_skip_champ or years_to_skip_champ[row_year] == row["Tm"]:
                                    if row["Year"] == row_year:
                                        ps_years_parsed.add(row_year)
                                        if not "WS" in row:
                                            row["WS"] = 0.0
                                        row["WS"] += 1
                                        break
    
    if player_data["id"] in manual_awards_map:
        if player_type["da_type"] in manual_awards_map[player_data["id"]]:
            for row in all_rows:
                if row["Year"] not in years_to_skip:
                    if row["Year"] in manual_awards_map[player_data["id"]][player_type["da_type"]]:
                        for award_stat in manual_awards_map[player_data["id"]][player_type["da_type"]][row["Year"]]:
                            has_row_match = False
                            for sub_row in all_rows:
                                if sub_row["Year"] == row["Year"] and award_stat in sub_row and sub_row[award_stat] != 0:
                                    has_row_match = True

                            if not has_row_match:
                                if not award_stat in row:
                                    row[award_stat] = 0.0
                                row[award_stat] += manual_awards_map[player_data["id"]][player_type["da_type"]][row["Year"]][award_stat]

def handle_leading_seasons(player_page, player_data, player_type, time_frame, years_to_skip, all_rows, seasons_leading_start, seasons_leading_end):   
    if player_type["da_type"]:
        for header in div_id_to_stat[player_type["da_type"]].values():
            for row in all_rows:
                row[header] = 0.0

    comments = None
    count_div = player_page.find("div", id="div_leaderboard")
    if not count_div:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_div = temp_soup.find("div", id="div_leaderboard")
            if temp_div:
                count_div = temp_div
                break

    if not count_div:
        return
        
    for div_id in div_id_to_stat[player_type["da_type"]]:
        sub_count_div = count_div.find("div", id=div_id) 
        if sub_count_div:
            stat = div_id_to_stat[player_type["da_type"]][div_id]
            count_table_rows = sub_count_div.find("table").find_all("tr")
            parsed_years = set()
            for count_table_row in count_table_rows:
                count_table_link = count_table_row.find("a")
                if div_id == "leaderboard_mvp" or div_id ==  "leaderboard_cyyoung":
                    match = re.search(r"\((\d+), \S*\)", str(count_table_row.text))
                else:
                    match = re.search(r".* \((\S+)\)", str(count_table_row.text))
                year_str = count_table_link.find(text=True).split("-")[0].split()[0]
                if year_str.isdigit() and match:
                    year = int(year_str)
                    if year < current_season or True:
                        if not year in parsed_years:
                            lead_num = ordinal_to_number(match.group(1))
                            if int(year) not in years_to_skip:
                                for row in all_rows:
                                    if row["Year"] == year:
                                        if lead_num >= seasons_leading_start and lead_num <= seasons_leading_end:
                                            row[stat] = 1
                                        parsed_years.add(year)
                                        break

def perform_post_qualifier(player_data, player_type, row, qualifiers, all_rows):
    if "Stat" in qualifiers:
        stats = set()
        find_stat_match(qualifiers["Stat"], player_type, stats)
        row_lower = fill_row(row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                stat = sub_qual_object["stat"]

                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Formula" in qualifiers:
        stats = set()
        for qual_object in qualifiers["Formula"]:
            formula = qual_object["values"][0].lower()
            formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula))
            for header in headers[player_type["da_type"]].keys():
                has_match = False
                for formula_match in formula_matches:
                    if formula_match.group() == header.lower():
                        has_match = True
                        break

                if not has_match:
                    new_stat = None
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and header_stat.lower() == header.lower():
                            new_stat = headers[player_type["da_type"]][header_stat]["display-value"].lower()
                            break

                    if new_stat:
                        for formula_match in formula_matches:
                            if formula_match.group() == new_stat.lower():
                                has_match = True
                                break
                if has_match:
                    stats.add(header)
            
        row_normal = fill_row(row, player_data, player_type, lower=False, stats=stats)
        for qual_object in qualifiers["Formula"]:
            formula = qual_object["values"][0]
            try:
                has_match = bool(calculate_formula("custom_formula", player_data, player_type, formula, row_normal, all_rows, safe_eval=True))
            except Exception:
                return False

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Stat" in qualifiers:
        if not row["Previous Row"]:
            return False
        stats = set()
        find_stat_match(qualifiers["Previous Stat"], player_type, stats)
        prev_row = row["Previous Row"]
        row_lower = fill_row(prev_row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Previous Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                stat = sub_qual_object["stat"]
                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Stat" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        stats = set()
        find_stat_match(qualifiers["Upcoming Stat"], player_type, stats)
        upc_row = row["Upcoming Row"]
        row_lower = fill_row(upc_row, player_data, player_type, stats=stats)
        for qual_object in qualifiers["Upcoming Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                stat = sub_qual_object["stat"]
                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    return True

def perform_qualifier(player_data, player_type, row, time_frame, all_rows):
    qualifiers = time_frame["qualifiers"]

    if ("fake_playoff_row" in row and row["fake_playoff_row"]) or ("fake_reg_row" in row and row["fake_reg_row"]):
        return True

    if "Rookie" in qualifiers:
        for qual_object in qualifiers["Rookie"]:
            if qual_object["negate"]:
                if row["Year"] in qual_object["values"]:
                    return False
            else:
                if not row["Year"] in qual_object["values"]:
                    return False

    if "Facing Former Team" in qualifiers:
        for qual_object in qualifiers["Facing Former Team"]:
            has_match =  row["Opponent"].upper() in player_data["valid_teams_order"]["team"]
            if has_match:
                if isinstance(player_data["valid_teams_order"]["team"][row["Opponent"].upper()], int):
                    has_match = row["Year"] > player_data["valid_teams_order"]["team"][row["Opponent"].upper()]
                else:
                    has_match = row["DateTime"] > player_data["valid_teams_order"]["team"][row["Opponent"].upper()]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Former Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Opponent"].upper()
        sleague = row["OppLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["Facing Former Franchise"]:
            has_match =  team_franchise in player_data["valid_teams_order"]["franchise"]
            if has_match:
                if isinstance(player_data["valid_teams_order"]["franchise"][team_franchise], int):
                    has_match = row["Year"] > player_data["valid_teams_order"]["franchise"][team_franchise]
                else:
                    has_match = row["DateTime"] > player_data["valid_teams_order"]["franchise"][team_franchise]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "With New Team" in qualifiers:
        for qual_object in qualifiers["With New Team"]:
            has_match = row["Tm"] != list(player_data["valid_team_ranges"]["team"].keys())[0]
            if has_match:
                first_year = list(player_data["valid_team_ranges"]["team"][row["Tm"]].keys())[0]
                has_match = row["Year"] == first_year
                if has_match:
                    first_range = player_data["valid_team_ranges"]["team"][row["Tm"]][first_year][0]
                    has_match = row["DateTime"] >= first_range["start"] and row["DateTime"] <= first_range["end"]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "With New Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Opponent"].upper()
        sleague = row["OppLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["With New Franchise"]:
            has_match = team_franchise != list(player_data["valid_team_ranges"]["franchise"].keys())[0]
            if has_match:
                first_year = list(player_data["valid_team_ranges"]["franchise"][team_franchise].keys())[0]
                has_match = row["Year"] == first_year
                if has_match:
                    first_range = player_data["valid_team_ranges"]["franchise"][team_franchise][first_year][0]
                    has_match = row["DateTime"] >= first_range["start"] and row["DateTime"] <= first_range["end"]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Decision" in qualifiers:
        if not row["Start"] or ("InProgress" in row and row["InProgress"]):
            return False
            
        for qual_object in qualifiers["Decision"]:
            if qual_object["negate"]:
                if not row.get("ND", 0):
                    return False
            else:
                if row.get("ND", 0):
                    return False
    
    if "Season Age" in qualifiers:
        for qual_object in qualifiers["Season Age"]:
            player_age_date = player_season_age_date.replace(year=row["Year"])
            player_delt = dateutil.relativedelta.relativedelta(player_age_date, player_data["Birthday"])
            player_delt_start = qual_object["time_unit_start"].year if qual_object["time_unit_start"] == datetime.date.min else qual_object["time_unit_start"].years
            player_delt_end = qual_object["time_unit_end"].year if qual_object["time_unit_end"] == datetime.date.max else qual_object["time_unit_end"].years
            if qual_object["negate"]:
                if player_delt.years >= player_delt_start and player_delt.years <= player_delt_end:
                    return False
            else:
                if not (player_delt.years >= player_delt_start and player_delt.years <= player_delt_end):
                    return False

    if "Age" in qualifiers:
        for qual_object in qualifiers["Age"]:
            player_delt_start = datetime.date.min if qual_object["time_unit_start"] == datetime.date.min else player_data["Birthday"] + qual_object["time_unit_start"]
            player_delt_end = datetime.date.max if qual_object["time_unit_end"] == datetime.date.max else player_data["Birthday"] + qual_object["time_unit_end"]
            if qual_object["negate"]:
                if row["Date"] >= player_delt_start and row["Date"] <= player_delt_end:
                    return False
            else:
                if not (row["Date"] >= player_delt_start and row["Date"] <= player_delt_end):
                    return False

    if "Round" in qualifiers:
        if not row["is_playoffs"]:
            return False
        for qual_object in qualifiers["Round"]:
            if qual_object["negate"]:
                if row["Round"] in qual_object["values"]:
                    return False
            else:
                if not row["Round"] in qual_object["values"]:
                    return False

    if "First Half" in qualifiers:
        for qual_object in qualifiers["First Half"]:
            year = row["Year"]
            if str(year) in all_star_games:
                all_star_date = dateutil.parser.parse(all_star_games[str(year)])
                all_star_date = all_star_date.replace(year=year)
                if qual_object["negate"]:
                    if row["Date"] < all_star_date.date():
                        return False
                else:
                    if row["Date"] >= all_star_date.date():
                        return False
            else:
                is_first_half = row["TmGm"] / player_data["team_games_map"][row["Year"]][row["Tm"]] <= 0.5
                if qual_object["negate"]:
                    if is_first_half:
                        return False
                else:
                    if not is_first_half:
                        return False

    if "Second Half" in qualifiers:
        for qual_object in qualifiers["Second Half"]:
            year = row["Year"]
            if str(year) in all_star_games:
                all_star_date = dateutil.parser.parse(all_star_games[str(year)])
                all_star_date = all_star_date.replace(year=year)
                if qual_object["negate"]:
                    if row["Date"] >= all_star_date.date():
                        return False
                else:
                    if row["Date"] < all_star_date.date():
                        return False
            else:
                is_second_half = row["TmGm"] / player_data["team_games_map"][row["Year"]][row["Tm"]] > 0.5
                if qual_object["negate"]:
                    if is_second_half:
                        return False
                else:
                    if not is_second_half:
                        return False
    
    if "Pre All-Star" in qualifiers:
        year = row["Year"]
        if str(year) not in all_star_games:
            return False

        for qual_object in qualifiers["Pre All-Star"]:
            all_star_date = dateutil.parser.parse(all_star_games[str(year)])
            all_star_date = all_star_date.replace(year=year)
            if qual_object["negate"]:
                if row["Date"] < all_star_date.date():
                    return False
            else:
                if row["Date"] >= all_star_date.date():
                    return False
    
    if "Post All-Star" in qualifiers:
        year = row["Year"]
        if str(year) not in all_star_games:
            return False

        for qual_object in qualifiers["Post All-Star"]:
            all_star_date = dateutil.parser.parse(all_star_games[str(year)])
            all_star_date = all_star_date.replace(year=year)
            if qual_object["negate"]:
                if row["Date"] >= all_star_date.date():
                    return False
            else:
                if row["Date"] < all_star_date.date():
                    return False

    if "Location" in qualifiers:
        for qual_object in qualifiers["Location"]:
            if row["Location"]:
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            else:
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False

    if "Activated From IL" in qualifiers:
        if "transactions" not in player_data:
            return False

        off_il_dates = set()
        all_team_ids = set()
        for league in team_ids:
            all_team_ids.update(team_ids[league].values())
            
        for transaction in player_data["transactions"]:
            if transaction["toTeam"]["id"] in all_team_ids and transaction["typeCode"] == "SC":
                if transaction["description"].startswith(transaction["toTeam"]["name"] + " activated ") and (transaction["description"].endswith(" injured list.") or transaction["description"].endswith(" disabled list.")):
                    off_il_dates.add(dateutil.parser.parse(transaction["date"]).date())

        is_coming_off_il = row["Date"] in off_il_dates
        for qual_object in qualifiers["Activated From IL"]:
            if is_coming_off_il:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False

    if "Activated" in qualifiers:
        if "transactions" not in player_data:
            return False

        off_il_dates = set()
        all_team_ids = set()
        for league in team_ids:
            all_team_ids.update(team_ids[league].values())
            
        for transaction in player_data["transactions"]:
            if transaction["toTeam"]["id"] in all_team_ids and transaction["typeCode"] == "SC":
                if transaction["description"].startswith(transaction["toTeam"]["name"] + " activated "):
                    off_il_dates.add(dateutil.parser.parse(transaction["date"]).date())

        is_coming_off_il = row["Date"] in off_il_dates
        for qual_object in qualifiers["Activated"]:
            if is_coming_off_il:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False
    
    if "Temperate Season" in qualifiers:
        for qual_object in qualifiers["Temperate Season"]:
            winter_start = ephem.date(ephem.previous_winter_solstice(str(row["Year"]))).datetime().date()
            spring_start = ephem.date(ephem.next_spring_equinox(str(row["Year"]))).datetime().date()
            summer_start = ephem.date(ephem.next_summer_solstice(str(row["Year"]))).datetime().date()
            fall_start = ephem.date(ephem.next_fall_equinox(str(row["Year"]))).datetime().date()
            winter_2_start = ephem.date(ephem.next_winter_solstice(str(row["Year"]))).datetime().date()

            season = None
            if row["Date"] >= winter_start and row["Date"] < spring_start:
                season = "Winter"
            elif row["Date"] >= spring_start and row["Date"] < summer_start:
                season = "Spring"
            elif row["Date"] >= summer_start and row["Date"] < fall_start:
                season = "Summer"
            elif row["Date"] >= fall_start and row["Date"] < winter_2_start:
                season = "Fall"
            else:
                season = "Winter"

            if qual_object["negate"]:
                if season in qual_object["values"]:
                    return False
            else:
                if not season in qual_object["values"]:
                    return False

    if "Previous Location" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Location"]:
            if row["Previous Row"]["Location"]:
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            elif row["Previous Row"]["Location"] == False:
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False

    if "Upcoming Location" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Location"]:
            if row["Upcoming Row"]["Location"]:
                if qual_object["negate"]:
                    if "home" in qual_object["values"]:
                        return False
                else:
                    if not "home" in qual_object["values"]:
                        return False
            elif row["Upcoming Row"]["Location"] == False:
                if qual_object["negate"]:
                    if "away" in qual_object["values"]:
                        return False
                else:
                    if not "away" in qual_object["values"]:
                        return False

    if "Team" in qualifiers:
        for qual_object in qualifiers["Team"]:
            if qual_object["negate"]:
                if row["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Tm"].lower() in qual_object["values"]:
                    return False
    
    if "Opponent" in qualifiers:
        for qual_object in qualifiers["Opponent"]:
            if qual_object["negate"]:
                if row["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Opponent"] in qual_object["values"]:
                    return False
    
    if "Team Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Tm"].upper()
        sleague = row["TmLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Opponent Franchise" in qualifiers:
        year = str(row["Year"])
        team = row["Opponent"].upper()
        sleague = row["OppLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False

    if "Previous Team" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Team"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Previous Row"]["Tm"].lower() in qual_object["values"]:
                    return False

    if "Previous Opponent" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Opponent"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Previous Row"]["Opponent"] in qual_object["values"]:
                    return False
    
    if "Upcoming Team" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Team"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Tm"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Upcoming Row"]["Tm"].lower() in qual_object["values"]:
                    return False

    if "Upcoming Opponent" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Opponent"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Opponent"] in qual_object["values"]:
                    return False
            else:
                if not row["Upcoming Row"]["Opponent"] in qual_object["values"]:
                    return False

    if "Previous Team Franchise" in qualifiers:
        if not row["Previous Row"]:
            return False

        year = str(row["Previous Row"]["Year"])
        team = row["Previous Row"]["Tm"].upper()
        sleague = row["Previous Row"]["TmLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["Previous Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Previous Opponent Franchise" in qualifiers:
        if not row["Previous Row"]:
            return False

        year = str(row["Previous Row"]["Year"])
        team = row["Previous Row"]["Opponent"].upper()
        sleague = row["Previous Row"]["OppLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["Previous Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False

    if "Upcoming Team Franchise" in qualifiers:
        if not row["Upcoming Row"]:
            return False

        year = str(row["Upcoming Row"]["Year"])
        team = row["Upcoming Row"]["Tm"].upper()
        sleague = row["Upcoming Row"]["TmLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["Upcoming Team Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False
    
    if "Upcoming Opponent Franchise" in qualifiers:
        if not row["Upcoming Row"]:
            return False
            
        year = str(row["Upcoming Row"]["Year"])
        team = row["Upcoming Row"]["Opponent"].upper()
        sleague = row["Upcoming Row"]["OppLg"]
        team_franchise = team_main_abbr[sleague][year][team]

        for qual_object in qualifiers["Upcoming Opponent Franchise"]:
            if qual_object["negate"]:
                if team_franchise.lower() in qual_object["values"]:
                    return False
            else:
                if not team_franchise.lower() in qual_object["values"]:
                    return False

    if "Team League" in qualifiers:
        sleague = row["TmLg"]

        for qual_object in qualifiers["Team League"]:
            if qual_object["negate"]:
                if sleague.lower() in qual_object["values"]:
                    return False
            else:
                if not sleague.lower() in qual_object["values"]:
                    return False

    if "Opponent League" in qualifiers:
        sleague = row["OppLg"]

        for qual_object in qualifiers["Opponent League"]:
            if qual_object["negate"]:
                if sleague.lower() in qual_object["values"]:
                    return False
            else:
                if not sleague.lower() in qual_object["values"]:
                    return False

    if "Previous Team League" in qualifiers:
        if not row["Previous Row"]:
            return False
        sleague = row["Previous Row"]["TmLg"]

        for qual_object in qualifiers["Previous Team League"]:
            if qual_object["negate"]:
                if sleague.lower() in qual_object["values"]:
                    return False
            else:
                if not sleague.lower() in qual_object["values"]:
                    return False

    if "Previous Opponent League" in qualifiers:
        if not row["Previous Row"]:
            return False
        sleague = row["Previous Row"]["OppLg"]

        for qual_object in qualifiers["Previous Opponent League"]:
            if qual_object["negate"]:
                if sleague.lower() in qual_object["values"]:
                    return False
            else:
                if not sleague.lower() in qual_object["values"]:
                    return False
    
    if "Upcoming Team League" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        sleague = row["Upcoming Row"]["TmLg"]

        for qual_object in qualifiers["Upcoming Team League"]:
            if qual_object["negate"]:
                if sleague.lower() in qual_object["values"]:
                    return False
            else:
                if not sleague.lower() in qual_object["values"]:
                    return False

    if "Upcoming Opponent League" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        sleague = row["Upcoming Row"]["OppLg"]

        for qual_object in qualifiers["Upcoming Opponent League"]:
            if qual_object["negate"]:
                if sleague.lower() in qual_object["values"]:
                    return False
            else:
                if not sleague.lower() in qual_object["values"]:
                    return False

    if "Previous Same Opponent" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Same Opponent"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Opponent"] == row["Opponent"]:
                    return False
            else:
                if not row["Previous Row"]["Opponent"] == row["Opponent"]:
                    return False
    
    if "Upcoming Same Opponent" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Same Opponent"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Opponent"] == row["Opponent"]:
                    return False
            else:
                if not row["Upcoming Row"]["Opponent"] == row["Opponent"]:
                    return False
    
    if "Interleague" in qualifiers:
        sleague_team = row["TmLg"]
        sleague_opponent = row["OppLg"]

        for qual_object in qualifiers["Interleague"]:
            if qual_object["negate"]:
                if sleague_team != sleague_opponent:
                    return False
            else:
                if not sleague_team != sleague_opponent:
                    return False
    
    if "Intraleague" in qualifiers:
        sleague_team = row["TmLg"]
        sleague_opponent = row["OppLg"]

        for qual_object in qualifiers["Intraleague"]:
            if qual_object["negate"]:
                if sleague_team == sleague_opponent:
                    return False
            else:
                if not sleague_team == sleague_opponent:
                    return False
    
    if "Sub Query" in qualifiers:
        for qual_object in qualifiers["Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["GameID"] in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Or Sub Query" in qualifiers:
        has_any_match = False
        for qual_object in qualifiers["Or Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["GameID"] in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if not has_match:
                    has_any_match = True
            else:
                if has_match:
                    has_any_match = True
        if not has_any_match:
            return False
    
    if "Day Of Sub Query" in qualifiers:
        for qual_object in qualifiers["Day Of Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day After Sub Query" in qualifiers:
        for qual_object in qualifiers["Day After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day Before Sub Query" in qualifiers:
        for qual_object in qualifiers["Day Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Game After Sub Query" in qualifiers:
        all_games = player_data["all_games"][row["Year"]]

        game_index = [sub_row["GameID"] for sub_row in player_data["all_games"][row["Year"]]].index(row["GameID"])
        if game_index == 0:
            return False
        previous_game = all_games[game_index - 1]["GameID"]

        for qual_object in qualifiers["Game After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if previous_game in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Game Before Sub Query" in qualifiers:
        all_games = player_data["all_games"][row["Year"]]

        game_index = [sub_row["GameID"] for sub_row in player_data["all_games"][row["Year"]]].index(row["GameID"])
        if game_index == len(all_games) - 1:
            return False
        next_game = all_games[game_index + 1]["GameID"]

        for qual_object in qualifiers["Game Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if next_game in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Season Sub Query" in qualifiers:
        for qual_object in qualifiers["Season Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Year"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Or Season Sub Query" in qualifiers:
        has_row_match = False
        for qual_object in qualifiers["Or Season Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Year"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if not has_match:
                    has_row_match = True
            else:
                if has_match:
                    has_row_match = True
        if not has_row_match:
            return False

    if "Season After Sub Query" in qualifiers:
        valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]

        if row["Year"] not in valid_years:
            return False

        year_index = valid_years.index(row["Year"])
        if year_index == 0:
            return False
        previous_year = valid_years[year_index - 1]

        for qual_object in qualifiers["Season After Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if previous_year in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Season Before Sub Query" in qualifiers:
        valid_years = player_data["reg_year_valid_years"] if not time_frame["playoffs"] else player_data["year_valid_years"]

        if row["Year"] not in valid_years:
            return False

        year_index = valid_years.index(row["Year"])
        if year_index == len(valid_years) - 1:
            return False
        next_year = valid_years[year_index + 1]

        for qual_object in qualifiers["Season Before Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if next_year in player["games"]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Playing With" in qualifiers:
        for qual_object in qualifiers["Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Playing Against" in qualifiers:
        for qual_object in qualifiers["Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Game" in qualifiers:
        for qual_object in qualifiers["Playing Same Game"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Playing With" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Previous Row"]["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Playing With" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Playing With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Upcoming Row"]["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Playing Against" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Previous Row"]["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Playing Against" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Playing Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["Upcoming Row"]["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Opponents" in qualifiers:
        for qual_object in qualifiers["Playing Same Opponents"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Opponent"] in player["games"] and row["Year"] in player["games"][row["Opponent"]]:
                    has_match = True
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Playing Same Date" in qualifiers:
        for qual_object in qualifiers["Playing Same Date"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Day After Pitching" in qualifiers:
        for qual_object in qualifiers["Day After Pitching"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day After Hitting" in qualifiers:
        for qual_object in qualifiers["Day After Hitting"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day Before Pitching" in qualifiers:
        for qual_object in qualifiers["Day Before Pitching"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Day Before Hitting" in qualifiers:
        for qual_object in qualifiers["Day Before Hitting"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Date"] in player["games"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Start" in qualifiers:
        for qual_object in qualifiers["Start"]:
            if row["Start"]:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False
    
    if "Finished" in qualifiers:
        if "Finished" not in row:
            return False

        for qual_object in qualifiers["Finished"]:
            if row["Finished"]:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False

    if "Birthday" in qualifiers:
        for qual_object in qualifiers["Birthday"]:
            is_birthday = row["Date"].month == player_data["Birthday"].month and row["Date"].day == player_data["Birthday"].day
            if is_birthday:
                if qual_object["negate"]:
                    return False
            else:
                if not qual_object["negate"]:
                    return False

    if "Month" in qualifiers:
        for qual_object in qualifiers["Month"]:
            if qual_object["negate"]:
                if row["Date"].month in qual_object["values"]:
                    return False
            else:
                if not row["Date"].month in qual_object["values"]:
                    return False

    if "Day" in qualifiers:
        for qual_object in qualifiers["Day"]:
            if qual_object["negate"]:
                if row["Date"].weekday() in qual_object["values"]:
                    return False
            else:
                if not row["Date"].weekday() in qual_object["values"]:
                    return False

    if "Date" in qualifiers:
        for qual_object in qualifiers["Date"]:
            if qual_object["negate"]:
                if row["Date"].day in qual_object["values"]:
                    return False
            else:
                if not row["Date"].day in qual_object["values"]:
                    return False
    
    if "Dates" in qualifiers:
        for qual_object in qualifiers["Dates"]:
            has_one_match = False
            for date_obj in qual_object["values"]:
                if qual_object["negate"]:
                    if not (row["Date"] >= date_obj["start_val"] and row["Date"] <= date_obj["end_val"]):
                        has_one_match = True
                else:
                    if row["Date"] >= date_obj["start_val"] and row["Date"] <= date_obj["end_val"]:
                        has_one_match = True
            if not has_one_match:
                return False

    if "Season Game" in qualifiers:
        for qual_object in qualifiers["Season Game"]:
            if qual_object["negate"]:
                if row["Gm"] >= qual_object["values"]["start_val"] and row["Gm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Gm"] >= qual_object["values"]["start_val"] and row["Gm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Career Game" in qualifiers:
        for qual_object in qualifiers["Career Game"]:
            if qual_object["negate"]:
                if row["CrGm"] >= qual_object["values"]["start_val"] and row["CrGm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CrGm"] >= qual_object["values"]["start_val"] and row["CrGm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Career Game Reversed" in qualifiers:
        for qual_object in qualifiers["Career Game Reversed"]:
            if qual_object["negate"]:
                if row["CrGmRev"] >= qual_object["values"]["start_val"] and row["CrGmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CrGmRev"] >= qual_object["values"]["start_val"] and row["CrGmRev"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Season Game Reversed" in qualifiers:
        for qual_object in qualifiers["Season Game Reversed"]:
            if qual_object["negate"]:
                if row["GmRev"] >= qual_object["values"]["start_val"] and row["GmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GmRev"] >= qual_object["values"]["start_val"] and row["GmRev"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Final Team Score" in qualifiers:
        if "Team Score" not in row or row["Team Score"] == None:
            return False

        for qual_object in qualifiers["Final Team Score"]:
            if qual_object["negate"]:
                if row["Team Score"] >= qual_object["values"]["start_val"] and row["Team Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Team Score"] >= qual_object["values"]["start_val"] and row["Team Score"] <= qual_object["values"]["end_val"]):
                    return False

    if "Final Opponent Score" in qualifiers:
        if "Opponent Score" not in row or row["Opponent Score"] == None:
            return False

        for qual_object in qualifiers["Final Opponent Score"]:
            if qual_object["negate"]:
                if row["Opponent Score"] >= qual_object["values"]["start_val"] and row["Opponent Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Opponent Score"] >= qual_object["values"]["start_val"] and row["Opponent Score"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Final Score Margin" in qualifiers:
        if "Team Score" not in row or row["Team Score"] == None or "Opponent Score" not in row or row["Opponent Score"] == None:
            return False

        score_margin = row["Team Score"] - row["Opponent Score"]

        for qual_object in qualifiers["Final Score Margin"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Final Score Difference" in qualifiers:
        if "Team Score" not in row or row["Team Score"] == None or "Opponent Score" not in row or row["Opponent Score"] == None:
            return False

        score_margin = abs(row["Team Score"] - row["Opponent Score"])

        for qual_object in qualifiers["Final Score Difference"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Previous Team Score" in qualifiers:
        if not row["Previous Row"]:
            return False
        if "Team Score" not in row["Previous Row"] or row["Previous Row"]["Team Score"] == None:
            return False

        for qual_object in qualifiers["Previous Team Score"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Team Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Team Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Previous Row"]["Team Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Team Score"] <= qual_object["values"]["end_val"]):
                    return False

    if "Previous Opponent Score" in qualifiers:
        if not row["Previous Row"]:
            return False
        if "Opponent Score" not in row["Previous Row"] or row["Previous Row"]["Opponent Score"] == None:
            return False

        for qual_object in qualifiers["Previous Opponent Score"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Opponent Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Previous Row"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Previous Row"]["Opponent Score"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Previous Score Margin" in qualifiers:
        if not row["Previous Row"]:
            return False
        if "Team Score" not in row["Previous Row"] or row["Previous Row"]["Team Score"] == None or "Opponent Score" not in row["Previous Row"] or row["Previous Row"]["Opponent Score"] == None:
            return False

        score_margin = row["Previous Row"]["Team Score"] - row["Previous Row"]["Opponent Score"]

        for qual_object in qualifiers["Previous Score Margin"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Previous Score Difference" in qualifiers:
        if not row["Previous Row"]:
            return False
        if "Team Score" not in row["Previous Row"] or row["Previous Row"]["Team Score"] == None or "Opponent Score" not in row["Previous Row"] or row["Previous Row"]["Opponent Score"] == None:
            return False

        score_margin = abs(row["Previous Row"]["Team Score"] - row["Previous Row"]["Opponent Score"])

        for qual_object in qualifiers["Previous Score Difference"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Team Score" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        if "Team Score" not in row["Upcoming Row"] or row["Upcoming Row"]["Team Score"] == None:
            return False

        for qual_object in qualifiers["Upcoming Team Score"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Team Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Team Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Upcoming Row"]["Team Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Team Score"] <= qual_object["values"]["end_val"]):
                    return False

    if "Upcoming Opponent Score" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        if "Opponent Score" not in row["Upcoming Row"] or row["Upcoming Row"]["Opponent Score"] == None:
            return False

        for qual_object in qualifiers["Upcoming Opponent Score"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Opponent Score"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Upcoming Row"]["Opponent Score"] >= qual_object["values"]["start_val"] and row["Upcoming Row"]["Opponent Score"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Score Margin" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        if "Team Score" not in row["Upcoming Row"] or row["Upcoming Row"]["Team Score"] == None or "Opponent Score" not in row["Upcoming Row"] or row["Upcoming Row"]["Opponent Score"] == None:
            return False

        score_margin = row["Upcoming Row"]["Team Score"] - row["Upcoming Row"]["Opponent Score"]

        for qual_object in qualifiers["Upcoming Score Margin"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Score Difference" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        if "Team Score" not in row["Upcoming Row"] or row["Upcoming Row"]["Team Score"] == None or "Opponent Score" not in row["Upcoming Row"] or row["Upcoming Row"]["Opponent Score"] == None:
            return False

        score_margin = abs(row["Upcoming Row"]["Team Score"] - row["Upcoming Row"]["Opponent Score"])

        for qual_object in qualifiers["Upcoming Score Difference"]:
            if qual_object["negate"]:
                if score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin >= qual_object["values"]["start_val"] and score_margin <= qual_object["values"]["end_val"]):
                    return False
    
    if "Batting Order Position" in qualifiers:
        if "BOP" not in row or not row["BOP"]:
            return False
        for qual_object in qualifiers["Batting Order Position"]:
            if qual_object["negate"]:
                if row["BOP"] >= qual_object["values"]["start_val"] and row["BOP"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["BOP"] >= qual_object["values"]["start_val"] and row["BOP"] <= qual_object["values"]["end_val"]):
                    return False

    if "Result" in qualifiers:
        if "Result" not in row or row["Result"] == None:
            return False

        for qual_object in qualifiers["Result"]:
            if qual_object["negate"]:
                if row["Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Result"] in qual_object["values"]:
                    return False

    if "Previous Result" in qualifiers:
        if not row["Previous Row"]:
            return False
        for qual_object in qualifiers["Previous Result"]:
            if qual_object["negate"]:
                if row["Previous Row"]["Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Previous Row"]["Result"] in qual_object["values"]:
                    return False

    if "Upcoming Result" in qualifiers:
        if not row["Upcoming Row"]:
            return False
        for qual_object in qualifiers["Upcoming Result"]:
            if qual_object["negate"]:
                if row["Upcoming Row"]["Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Upcoming Row"]["Result"] in qual_object["values"]:
                    return False
    
    if "Year" in qualifiers:
        for qual_object in qualifiers["Year"]:
            if qual_object["negate"]:
                if row["Year"] >= qual_object["values"]["start_val"] and row["Year"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Year"] >= qual_object["values"]["start_val"] and row["Year"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Even Year" in qualifiers:
        is_even = row["Year"] % 2 == 0
        for qual_object in qualifiers["Even Year"]:
            if qual_object["negate"]:
                if is_even:
                    return False
            else:
                if not is_even:
                    return False
    
    if "Odd Year" in qualifiers:
        is_odd = row["Year"] % 2 == 1
        for qual_object in qualifiers["Odd Year"]:
            if qual_object["negate"]:
                if is_odd:
                    return False
            else:
                if not is_odd:
                    return False
    
    if "Calendar Year" in qualifiers:
        for qual_object in qualifiers["Calendar Year"]:
            if qual_object["negate"]:
                if row["Date"].year >= qual_object["values"]["start_val"] and row["Date"].year <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Date"].year >= qual_object["values"]["start_val"] and row["Date"].year <= qual_object["values"]["end_val"]):
                    return False

    if "Even Calendar Year" in qualifiers:
        is_even = row["Date"].year % 2 == 0
        for qual_object in qualifiers["Even Calendar Year"]:
            if qual_object["negate"]:
                if is_even:
                    return False
            else:
                if not is_even:
                    return False
    
    if "Odd Calendar Year" in qualifiers:
        is_odd = row["Date"].year % 2 == 1
        for qual_object in qualifiers["Odd Calendar Year"]:
            if qual_object["negate"]:
                if is_odd:
                    return False
            else:
                if not is_odd:
                    return False

    if "Double Header" in qualifiers:
        double_header_results = set()
        date = row["Date"]
        hour = row["DateTime"].hour

        if str(row["Date"]) in special_doubleheaders and row["Tm"] in special_doubleheaders[str(row["Date"])]["single_teams"]:
            return False

        if hour == 1:
            double_header_results.add("First")
            double_header_results.add("Either")
            if row["Upcoming Row"]:
                if row["Upcoming Row"]["Date"] == date and row["Upcoming Row"]["DateTime"].hour == 2:
                        double_header_results.add("Both")
        elif hour == 2:
            double_header_results.add("Second")
            double_header_results.add("Either")
            if row["Previous Row"]:
                if row["Previous Row"]["Date"] == date and row["Previous Row"]["DateTime"].hour == 1:
                    double_header_results.add("Both")

        for qual_object in qualifiers["Double Header"]:
            if qual_object["negate"]:
                if double_header_results & set(qual_object["values"]):
                    return False
            else:
                if not double_header_results & set(qual_object["values"]):
                    return False
    
    if "Holiday" in qualifiers:
        game_date = row["Date"]
        for qual_object in qualifiers["Holiday"]:
            has_match = False
            for holiday in qual_object["values"]:
                country = "usa"
                eve = False
                observed = False
                church = "western"
                if "canadian" in holiday:
                    country = "canada"
                    holiday = re.sub(r"\s+", " ", holiday.replace("canadian", "")).strip()
                elif "canada" in holiday:
                    country = "canada"
                    holiday = re.sub(r"\s+", " ", holiday.replace("canada", "")).strip()
                elif "eve" in holiday:
                    eve = True
                    holiday = re.sub(r"\s+", " ", holiday.replace("eve", "")).strip()
                elif "observed" in holiday:
                    observed = True
                    holiday = re.sub(r"\s+", " ", holiday.replace("observed", "")).strip()
                elif "orthodox" in holiday:
                    church = "orthodox"
                    holiday = re.sub(r"\s+", " ", holiday.replace("orthodox", "")).strip()
                elif "eastern" in holiday:
                    church = "eastern"
                    holiday = re.sub(r"\s+", " ", holiday.replace("eastern", "")).strip()
                holiday = re.sub(r"\W+", "", re.sub(r"[\s-]+", "_", holiday))

                has_custom_match = False
                for holiday_func in all_custom_holidays:
                    if holiday_func[0] == holiday:
                        has_custom_match = True
                        if holiday_func[1](game_date, church, country, observed, eve):
                            has_match = True
                        break

                if not has_custom_match:
                    for holiday_func in all_holidays:
                        if holiday_func[0] == holiday:
                            arguments = inspect.signature(holiday_func[1]).parameters
                            if "church" in arguments:
                                holiday_date = holiday_func[1](game_date.year, church=church)
                            elif "country" in arguments:
                                holiday_date = holiday_func[1](game_date.year, country=country)
                            elif "observed" in arguments:
                                holiday_date = holiday_func[1](game_date.year, observed=observed)
                            elif "eve" in arguments:
                                holiday_date = holiday_func[1](game_date.year, eve=eve)
                            else:
                                holiday_date = holiday_func[1](game_date.year)

                            if holiday_date:
                                holiday_date = datetime.datetime(holiday_date[0], holiday_date[1], holiday_date[2]).date()
                                if eve:
                                    holiday_date -= datetime.timedelta(days=1)
                                if game_date == holiday_date:
                                    has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Save Situation" in qualifiers:
        if player_type["da_type"] == "Batter" or row["Start"]:
            return False

        is_save_situation = None
        if "SaveOpp" in row:
            is_save_situation = row["SaveOpp"]
        else:
            if "Entered" in row:
                is_save_situation = parse_entered_str(row)[0]
                
        if is_save_situation == None:
            return False
            
        for qual_object in qualifiers["Save Situation"]:
            if qual_object["negate"]:
                if is_save_situation:
                    return False
            else:
                if not is_save_situation:
                    return False
    
    if "Inning Entered" in qualifiers:
        inning_entered = None
        if "InningEntered" in row:
            inning_entered = row["InningEntered"]
        else:
            if "Entered" in row:
                inning_entered = parse_entered_str(row)[1]
                
        if inning_entered == None:
            return False

        for qual_object in qualifiers["Inning Entered"]:
            if qual_object["negate"]:
                if inning_entered >= qual_object["values"]["start_val"] and inning_entered <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (inning_entered >= qual_object["values"]["start_val"] and inning_entered <= qual_object["values"]["end_val"]):
                    return False
    
    if "Last Inning Entered" in qualifiers:
        inning_entered = None
        if "InningEntered" in row:
            inning_entered = row["InningEntered"]
        else:
            if "Entered" in row:
                inning_entered = parse_entered_str(row)[1]
                
        if inning_entered == None:
            return False

        last_inning = inning_entered >= 9 or ((row["DateTime"].hour == 1 or row["DateTime"].hour == 2) and row["Year"] >= 2020 and inning_entered >= 7)

        for qual_object in qualifiers["Last Inning Entered"]:
            if qual_object["negate"]:
                if last_inning:
                    return False
            else:
                if not last_inning:
                    return False
    
    if "Top Inning Entered" in qualifiers:
        top_inning_entered = None
        if "TopInningEntered" in row:
            top_inning_entered = row["TopInningEntered"]
        else:
            if "Entered" in row:
                top_inning_entered = parse_entered_str(row)[6]
                
        if top_inning_entered == None:
            return False

        for qual_object in qualifiers["Top Inning Entered"]:
            if qual_object["negate"]:
                if top_inning_entered:
                    return False
            else:
                if not top_inning_entered:
                    return False
    
    if "Bottom Inning Entered" in qualifiers:
        top_inning_entered = None
        if "TopInningEntered" in row:
            top_inning_entered = row["TopInningEntered"]
        else:
            if "Entered" in row:
                top_inning_entered = parse_entered_str(row)[6]
                
        if top_inning_entered == None:
            return False

        for qual_object in qualifiers["Bottom Inning Entered"]:
            if qual_object["negate"]:
                if not top_inning_entered:
                    return False
            else:
                if top_inning_entered:
                    return False
    
    if "Outs Entered" in qualifiers:
        outs_entered = None
        if "OutsEntered" in row:
            outs_entered = row["OutsEntered"]
        else:
            if "Entered" in row:
                outs_entered = parse_entered_str(row)[2]

        if outs_entered == None:
            return False

        for qual_object in qualifiers["Outs Entered"]:
            if qual_object["negate"]:
                if outs_entered >= qual_object["values"]["start_val"] and outs_entered <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (outs_entered >= qual_object["values"]["start_val"] and outs_entered <= qual_object["values"]["end_val"]):
                    return False
    
    if "Outs Remaining Entered" in qualifiers:
        outs_entered = None
        if "OutsRemainingEntered" in row:
            outs_entered = row["OutsRemainingEntered"]
        else:
            if "Entered" in row:
                outs_entered = parse_entered_str(row)[7]

        if outs_entered == None:
            return False

        for qual_object in qualifiers["Outs Remaining Entered"]:
            if qual_object["negate"]:
                if outs_entered >= qual_object["values"]["start_val"] and outs_entered <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (outs_entered >= qual_object["values"]["start_val"] and outs_entered <= qual_object["values"]["end_val"]):
                    return False
    
    if "Men On Base Entered" in qualifiers:
        men_on_base_entered = None
        if "MenOnBaseEntered" in row:
            men_on_base_entered = row["MenOnBaseEntered"]
        else:
            if "Entered" in row:
                men_on_base_entered = parse_entered_str(row)[3]

        if men_on_base_entered == None:
            return False

        for qual_object in qualifiers["Men On Base Entered"]:
            if qual_object["negate"]:
                if men_on_base_entered >= qual_object["values"]["start_val"] and men_on_base_entered <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (men_on_base_entered >= qual_object["values"]["start_val"] and men_on_base_entered <= qual_object["values"]["end_val"]):
                    return False
    
    if "Men In Scoring Entered" in qualifiers:
        men_in_scoring_entered = None
        if "MenInScoringEntered" in row:
            men_in_scoring_entered = row["MenInScoringEntered"]
        else:
            if "Entered" in row:
                men_in_scoring_entered = parse_entered_str(row)[4]

        if men_in_scoring_entered == None:
            return False

        for qual_object in qualifiers["Men In Scoring Entered"]:
            if qual_object["negate"]:
                if men_in_scoring_entered >= qual_object["values"]["start_val"] and men_in_scoring_entered <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (men_in_scoring_entered >= qual_object["values"]["start_val"] and men_in_scoring_entered <= qual_object["values"]["end_val"]):
                    return False
    
    if "Score Margin Entered" in qualifiers:
        score_margin_entered = None
        if "ScoreMarginEntered" in row:
            score_margin_entered = row["ScoreMarginEntered"]
        else:
            if "Entered" in row:
                score_margin_entered = parse_entered_str(row)[5]

        if score_margin_entered == None:
            return False

        for qual_object in qualifiers["Score Margin Entered"]:
            if qual_object["negate"]:
                if score_margin_entered >= qual_object["values"]["start_val"] and score_margin_entered <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin_entered >= qual_object["values"]["start_val"] and score_margin_entered <= qual_object["values"]["end_val"]):
                    return False
    
    if "Score Difference Entered" in qualifiers:
        score_margin_entered = None
        if "ScoreMarginEntered" in row:
            score_margin_entered = row["ScoreMarginEntered"]
        else:
            if "Entered" in row:
                score_margin_entered = parse_entered_str(row)[5]

        if score_margin_entered == None:
            return False
        
        score_margin_entered = abs(score_margin_entered)

        for qual_object in qualifiers["Score Difference Entered"]:
            if qual_object["negate"]:
                if score_margin_entered >= qual_object["values"]["start_val"] and score_margin_entered <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (score_margin_entered >= qual_object["values"]["start_val"] and score_margin_entered <= qual_object["values"]["end_val"]):
                    return False
    
    if "Season Number" in qualifiers:
        if not player_data["player_all_numbers"]:
            return False
        for qual_object in qualifiers["Season Number"]:
            has_number_match = False

            for num_obj in player_data["player_all_numbers"]:
                if row["Tm"] in num_obj["teams"]:
                    if row["Year"] >= num_obj["start_year"] and row["Year"] <= num_obj["end_year"]:
                        if num_obj["number"] >= qual_object["values"]["start_val"] and num_obj["number"] <= qual_object["values"]["end_val"]:
                            has_number_match = True
                            break

            if qual_object["negate"]:
                if has_number_match:
                    return False
            else:
                if not has_number_match:
                    return False
    
    if "Primary Season Position" in qualifiers:
        if "Pos" not in row:
            return False

        qual_str = list(row["Pos"].replace("*", "").replace("/", ""))
        if not qual_str:
            return False

        for qual_object in qualifiers["Primary Season Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                other_pos = pos
                if pos in position_map:
                    other_pos = position_map[pos]
                if qual_str[0] == pos or qual_str[0] == other_pos:
                    has_match = True
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Season Position" in qualifiers:
        if "Pos" not in row:
            return False

        qual_str = list(row["Pos"].replace("*", "").replace("/", ""))
        if not qual_str:
            return False

        for qual_object in qualifiers["Season Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                other_pos = pos
                if pos in position_map:
                    other_pos = position_map[pos]
                if pos in qual_str or other_pos in qual_str:
                    has_match = True
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Primary Game Position" in qualifiers:
        if "Pos" not in row:
            return False

        qual_str = re.split(r"\s+", row["Pos"].replace("*", "").replace("/", ""))
        if not qual_str:
            return False

        for qual_object in qualifiers["Primary Game Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                other_pos = pos
                if pos in position_map:
                    other_pos = position_map[pos]
                if qual_str[0] == pos or qual_str[0] == other_pos:
                    has_match = True
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Game Position" in qualifiers:
        if "Pos" not in row:
            return False

        qual_str = re.split(r"\s+", row["Pos"].replace("*", "").replace("/", ""))
        if not qual_str:
            return False

        for qual_object in qualifiers["Game Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                other_pos = pos
                if pos in position_map:
                    other_pos = position_map[pos]
                if pos in qual_str or other_pos in qual_str:
                    has_match = True
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Moon Phase" in qualifiers:
        moon_phases = human_moon(row["Date"])

        for qual_object in qualifiers["Moon Phase"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in moon_phases:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Year"]], key=lambda seas_row: seas_row["DateTime"], reverse=True):
            if sub_data["DateTime"] < row["DateTime"]:
                days_rest = (row["Date"] - sub_data["Date"]).days - 1
                break

        for qual_object in qualifiers["Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Year"]], key=lambda seas_row: seas_row["DateTime"], reverse=True):
            if sub_data["DateTime"] < row["DateTime"] and sub_data["Start"]:
                days_rest = (row["Date"] - sub_data["Date"]).days - 1
                break

        for qual_object in qualifiers["Starts Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False
    
    if "Upcoming Starts Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Year"]], key=lambda seas_row: seas_row["DateTime"], reverse=False):
            if sub_data["DateTime"] > row["DateTime"] and sub_data["Start"]:
                days_rest = (row["Date"] - sub_data["Date"]).days - 1
                break

        for qual_object in qualifiers["Upcoming Starts Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False

    if "Upcoming Days Rest" in qualifiers:
        days_rest = float("inf")
        for sub_data in sorted(player_data["all_games"][row["Year"]], key=lambda seas_row: seas_row["DateTime"], reverse=False):
            if sub_data["DateTime"] > row["DateTime"]:
                days_rest = (row["Date"] - sub_data["Date"]).days - 1
                break

        for qual_object in qualifiers["Upcoming Days Rest"]:
            if qual_object["negate"]:
                if days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_rest >= qual_object["values"]["start_val"] and days_rest <= qual_object["values"]["end_val"]):
                    return False

    if "Days In A Row" in qualifiers:
        days_in_a_row = 1
        date_to_check = row["Date"] - datetime.timedelta(days=1)
        for sub_data in sorted(player_data["all_games"][row["Year"]], key=lambda seas_row: seas_row["DateTime"], reverse=True):
            if sub_data["Date"] == date_to_check:
                days_in_a_row += 1
                date_to_check -= datetime.timedelta(days=1)

        for qual_object in qualifiers["Days In A Row"]:
            if qual_object["negate"]:
                if days_in_a_row >= qual_object["values"]["start_val"] and days_in_a_row <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (days_in_a_row >= qual_object["values"]["start_val"] and days_in_a_row <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team City" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Team City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
                elif venue_obj["state"] and venue_obj["state"].lower() == "ny" and val_to_check.lower() in ["brooklyn", "bronx", "flushing"]:
                    if stadium in "new york":
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact City" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Team Exact City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team State" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Team State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact State" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Team Exact State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Country" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Team Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact Country" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Team Exact Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Team Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Team Exact Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Team Exact Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent City" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Opponent City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
                elif venue_obj["state"] and venue_obj["state"].lower() == "ny" and val_to_check.lower() in ["brooklyn", "bronx", "flushing"]:
                    if stadium in "new york":
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact City" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Opponent Exact City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent State" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Opponent State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact State" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Opponent Exact State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Country" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Opponent Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact Country" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Opponent Exact Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Opponent Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent Exact Time Zone" in qualifiers:
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False
            
        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Opponent Exact Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
                    
    return True

def determine_venue_obj(row, is_team):
    team = row["Tm" if is_team else "Opponent"].upper()
    sleague = row["TmLg" if is_team else "OppLg"].upper()

    return get_venue_obj(team, sleague, row["Year"])[1]

def get_venue_obj(team, sleague, year):
    team_id = None
    for parsed_team_name in team_name_info:
        if team in team_name_info[parsed_team_name]:
            if sleague in team_name_info[parsed_team_name][team]:
                if year in team_name_info[parsed_team_name][team][sleague]:
                    team_id = team_ids[sleague][parsed_team_name]
                    break
    
    if not team_id:
        for parsed_team_name in team_name_info:
            if team in team_name_info[parsed_team_name]:
                if sleague in team_name_info[parsed_team_name][team]:
                    team_id = team_ids[sleague][parsed_team_name]

    if team_id and str(team_id) in team_venue_history:
        for pot_team_venue in team_venue_history[str(team_id)]:
            if pot_team_venue["start_year"] == None:
                if year <= pot_team_venue["end_year"]:
                    return pot_team_venue["venue"], team_venues[str(pot_team_venue["venue"])]
            elif pot_team_venue["end_year"] == None:
                if year >= pot_team_venue["start_year"]:
                    return pot_team_venue["venue"], team_venues[str(pot_team_venue["venue"])]
            else:
                if year >= pot_team_venue["start_year"] and year <= pot_team_venue["end_year"]:
                    return pot_team_venue["venue"], team_venues[str(pot_team_venue["venue"])]

    return None, None

def human_moon(date):
    date = datetime.datetime(year=date.year, month=date.month, day=date.day, hour=19, minute=0, second=0)
    date = pytz.timezone("US/Eastern").localize(date)
    next_full = ephem.next_full_moon(date)
    next_new = ephem.next_new_moon(date)
    next_last_quarter = ephem.next_last_quarter_moon(date)
    next_first_quarter = ephem.next_first_quarter_moon(date)
    previous_full = ephem.previous_full_moon(date)
    previous_new = ephem.previous_new_moon(date)
    previous_last_quarter = ephem.previous_last_quarter_moon(date)
    previous_first_quarter = ephem.previous_first_quarter_moon(date)

    moon_phases = []

    if is_moon_match(date.date(), next_full):
        moon_phases.append("Full Moon")
    if is_moon_match(date.date(), previous_full):
        moon_phases.append("Full Moon")
    
    if is_moon_match(date.date(), next_new):
        moon_phases.append("New Moon")
    if is_moon_match(date.date(), previous_new):
        moon_phases.append("New Moon")
    
    if is_moon_match(date.date(), next_first_quarter):
        moon_phases.append("First Quarter")
    if is_moon_match(date.date(), previous_first_quarter):
        moon_phases.append("First Quarter")
    
    if is_moon_match(date.date(), next_last_quarter):
        moon_phases.append("Third Quarter")
    if is_moon_match(date.date(), previous_last_quarter):
        moon_phases.append("Third Quarter")
    
    if previous_new < next_first_quarter < next_full < next_last_quarter < next_new:
        moon_phases.append("Waxing Crescent")
    elif previous_first_quarter < next_full < next_last_quarter < next_new < next_first_quarter:
        moon_phases.append("Waxing Gibbous")
    elif previous_full < next_last_quarter < next_new < next_first_quarter < next_full:
        moon_phases.append("Waning Gibbous")
    elif previous_last_quarter < next_new < next_first_quarter < next_full < next_last_quarter:
        moon_phases.append("Waning Crescent")

    return [moon_phase.lower() for moon_phase in moon_phases]

def is_moon_match(da_date, da_moon_date):
    da_moon_date = da_moon_date.datetime()
    da_moon_date = pytz.utc.localize(da_moon_date).astimezone(pytz.timezone("US/Eastern"))
    if da_moon_date.time() < datetime.time(hour=12, minute=0, second=0):
        dt_1 = da_moon_date - datetime.timedelta(days=1)
        dt_2 = da_moon_date
    else:
        dt_1 = da_moon_date
        dt_2 = da_moon_date

    return da_date >= dt_1.date() and da_date <= dt_2.date()

def parse_entered_str(row):
    is_save_situation = bool(row.get("SV", 0) or row.get("BSv", 0) or row.get("Hold", 0))
    entered_str = row["Entered"]
    entered_split = entered_str.lower().split()

    inning = int(entered_split[0][len(entered_split[0]) - 2])
    is_top_inning = entered_split[0][len(entered_split[0]) - 1] == "t"

    occupied_split = entered_split[1]
    num_occupied = 0
    num_in_scoring = 0
    if occupied_split[0] != '-':
        num_occupied += 1
    if occupied_split[1] != '-':
        num_occupied += 1
        num_in_scoring += 1
    if occupied_split[2] != '-':
        num_occupied += 1
        num_in_scoring += 1

    num_out = int(entered_split[2])

    outs_remaining = ((9 - inning) * 3) + (3 - num_out)
    if inning > 9:
        outs_remaining = 3 - num_out
    if (row["DateTime"].hour == 1 or row["DateTime"].hour == 2) and row["Year"] >= 2020:
        outs_remaining = ((7 - inning) * 3) + (3 - num_out)
        if inning > 7:
            outs_remaining = 3 - num_out

    run_diff = entered_split[4]
    if run_diff == "tie":
        run_diff = 0
    else:
        old_run_diff = run_diff
        run_diff = int(old_run_diff[1:])
        if old_run_diff[0] == "d":
            run_diff *= -1

    if outs_remaining <= 9:
        if run_diff > 0 and run_diff <= 3 and outs_remaining >= 3:
            is_save_situation = True
        elif run_diff > 0 and run_diff - num_occupied - 2 <= 0:
            is_save_situation = True

    return is_save_situation, inning, num_out, num_occupied, num_in_scoring, run_diff, is_top_inning, outs_remaining

def handle_max_min_data(all_rows, player_data, player_type, qualifiers, extra_stats):
    new_rows = []
    stat_vals = []

    da_max_stats = set()
    if "Min Stat" in qualifiers:
        find_stat_sub_match(qualifiers["Min Stat"], player_type, da_max_stats)
        for qual_object in qualifiers["Min Stat"]:
            for stat_obj in qual_object["values"]:
                stat = stat_obj["stats"][0]["stat"]
                start_level = stat_obj["start_level"] - 1
                end_level = stat_obj["end_level"]
                time_frame = stat_obj["time_frame"]
                stat_quals = stat_obj["stat_quals"]

                min_stats = []
                if not time_frame:
                    for row in all_rows:
                        row_lower = fill_row(row, player_data, player_type, stats=da_max_stats)
                        if stat not in row_lower:
                            for header_stat in headers[player_type["da_type"]]:
                                if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                    stat = header_stat.lower()
                        if stat in row_lower:
                            single_index = 0
                            for single_stat in min_stats:
                                if single_stat["value"] == row_lower[stat]:
                                    single_index += 1
                            min_stats.append({
                                "index" : single_index,
                                "value" : row_lower[stat],
                                "counter" : 0
                            })
                else:
                    handle_min_max_calc(min_stats, stat_quals, player_data, player_type, stat, time_frame, all_rows)

                if start_level == float("inf"):
                    start_level = len(min_stats) - 1
                elif start_level < 0:
                    start_level = 0
                elif start_level >= len(min_stats):
                    start_level = len(min_stats) - 1
                
                if end_level == float("inf"):
                    end_level = len(min_stats)
                elif end_level < 0:
                    end_level = 0
                elif end_level >= len(min_stats):
                    end_level = len(min_stats)
                
                stat_vals.append({
                    "stat_obj" : stat_obj,
                    "values" : sorted(min_stats, key=lambda stat:(stat["value"], -stat["index"]))[start_level:end_level],
                    "negate" : qual_object["negate"]
                })

    da_min_stats = set()
    if "Max Stat" in qualifiers:
        find_stat_sub_match(qualifiers["Max Stat"], player_type, da_min_stats)
        for qual_object in qualifiers["Max Stat"]:
            for stat_obj in qual_object["values"]:
                stat = stat_obj["stats"][0]["stat"]
                start_level = stat_obj["start_level"] - 1
                end_level = stat_obj["end_level"]
                time_frame = stat_obj["time_frame"]
                stat_quals = stat_obj["stat_quals"]
                
                max_stats = []
                if not time_frame:
                    for row in all_rows:
                        row_lower = fill_row(row, player_data, player_type, stats=da_min_stats)
                        if stat not in row_lower:
                            for header_stat in headers[player_type["da_type"]]:
                                if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                    stat = header_stat.lower()
                        if stat in row_lower:
                            single_index = 0
                            for single_stat in max_stats:
                                if single_stat["value"] == row_lower[stat]:
                                    single_index += 1
                            max_stats.append({
                                "index" : single_index,
                                "value" : row_lower[stat],
                                "counter" : 0
                            })
                else:
                    handle_min_max_calc(max_stats, stat_quals, player_data, player_type, stat, time_frame, all_rows)

                if start_level == float("inf"):
                    start_level = len(max_stats) - 1
                elif start_level < 0:
                    start_level = 0
                elif start_level >= len(max_stats):
                    start_level = len(max_stats) - 1
                
                if end_level == float("inf"):
                    end_level = len(max_stats)
                elif end_level < 0:
                    end_level = 0
                elif end_level >= len(max_stats):
                    end_level = len(max_stats)

                stat_vals.append({
                    "stat_obj" : stat_obj,
                    "values" : sorted(max_stats, key=lambda stat:(-stat["value"], -stat["index"]))[start_level:end_level],
                    "negate" : qual_object["negate"]
                }) 
    
    stats = da_max_stats.union(da_min_stats)
    for stat_val in stat_vals:
        stat = stat_val["stat_obj"]["stats"][0]["stat"]
        time_frame = stat_val["stat_obj"]["time_frame"]

        transformed_vals = []
        for single_stat in stat_val["values"]:
            value = single_stat["value"]
            real_stat = None
            for header_stat in headers[player_type["da_type"]]:
                if header_stat.lower() == stat or ("display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat):
                    real_stat = header_stat
                            
            if isinstance(value, numbers.Number):
                if real_stat and "round" in headers[player_type["da_type"]][real_stat]:
                    round_val = headers[player_type["da_type"]][real_stat]["round"]
                    if isinstance(round_val, str):
                        if round_val == "percent":
                            value = ("{:.2f}").format(round_value(100 * value, 2)) + "%"
                        elif round_val.startswith("percent-"):
                            rount_int = int(round_val.split("-")[1])
                            value = ("{:." + str(rount_int) + "f}").format(round_value(100 * value, rount_int)) + "%"
                        elif round_val == "dollar":
                            value = round_value(value / 1000000, 2)
                            value = ("{:." + str(2) + "f}").format(value)
                            value = "$" + value + "m"
                        else:
                            frac, whole = math.modf(value)
                            if round_val == "innings-round":
                                frac = round_value(frac / (10/3), 2)
                            else:
                                frac = round_value(frac / (10/3), 1)
                            if frac == 0.3:
                                frac = 0
                                whole += 1
                            value = round_value(frac + whole, 2)
                            if round_val == "innings-round":
                                value = ("{:.2f}").format(value)
                            else:
                                value = ("{:.1f}").format(value)
                    else: 
                        value = round_value(value, round_val)
                        value = ("{:." + str(round_val) + "f}").format(value)
                else:
                    value = round_value(value)
            elif real_stat == "TmRec":
                rec_split = value.split(":")
                value = str(round_value(float(rec_split[0]))) + ":" + str(round_value(float(rec_split[1])))
                if len(rec_split) == 3:
                    value += ":" + str(round_value(float(rec_split[2])))
            value = str(value)
            transformed_vals.append(value)
    
        if "explain_str" not in stat_val["stat_obj"]:
            stat_val["stat_obj"]["explain_str"] = []
        current_explain_strs = stat_val["stat_obj"]["explain_str"]
        stat_val["stat_obj"]["explain_str"] = ""

        if not time_frame:
            stat_val["stat_obj"]["explain_str"] += stat.upper() + ":" + ",".join(transformed_vals)
            for row in all_rows:
                row_lower = fill_row(row, player_data, player_type, stats=stats)

                if stat not in row_lower:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in row_lower:
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == row_lower[stat]:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match:
                        if not stat_val["negate"]:
                            new_rows.append(row)
                    elif stat_val["negate"]:
                        new_rows.append(row)
            stat_val["stat_obj"]["explain_str"] = current_explain_strs + [stat_val["stat_obj"]["explain_str"]]
        else:
            matching_rows = handle_min_max_final(stat_val, current_explain_strs, player_data, player_type, stat, qualifiers, all_rows, transformed_vals, extra_stats)
            if matching_rows:
                new_rows.extend(matching_rows)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_min_max_calc(the_stats, stat_quals, player_data, player_type, stat, time_frame, all_rows):
    if not all_rows:
        return

    qual_type = time_frame["qual_type"]
    qual_num_start = time_frame["qual_num_start"]
    qual_num_end = time_frame["qual_num_end"]

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")

    if qual_type == "Days" or qual_type == "Weeks" or qual_type == "Months" or qual_type == "Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        qual_num = qual_num_start
        while (True):
            if qual_type == "Days":
                date_diff = dateutil.relativedelta.relativedelta(days=qual_num)
            elif qual_type == "Weeks":
                start_date -= datetime.timedelta(days=7)
                end_date += datetime.timedelta(days=7)
                date_diff = dateutil.relativedelta.relativedelta(weeks=qual_num)
            elif qual_type == "Months":
                start_date -= datetime.timedelta(days=31)
                end_date += datetime.timedelta(days=31)
                date_diff = dateutil.relativedelta.relativedelta(months=qual_num)
            elif qual_type == "Years":
                start_date -= datetime.timedelta(days=365)
                end_date += datetime.timedelta(days=365)
                date_diff = dateutil.relativedelta.relativedelta(years=qual_num)
            
            for days in range((end_date - start_date).days + 1):
                current_start_date = start_date + datetime.timedelta(days)
                stat_value, matching_rows = handle_date_rows(player_data, player_type, stat, current_start_date, date_diff, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
            
            if qual_num >= qual_num_end:
                break
            if start_date + date_diff > end_date:
                break
            qual_num += 1
    elif qual_type == "Calendar-Weeks" or qual_type == "Calendar-Months" or qual_type == "Calendar-Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        if qual_type == "Calendar-Weeks":
            start_date = start_date - datetime.timedelta(days=start_date.weekday())
            tmp_end_date = end_date - datetime.timedelta(days=end_date.weekday())
            end_date = tmp_end_date + datetime.timedelta(days=6)
            for date in dateutil.rrule.rrule(dateutil.rrule.WEEKLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_week_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
        elif qual_type == "Calendar-Months":
            start_date = datetime.datetime(start_date.year, start_date.month, 1)
            end_date = datetime.datetime(end_date.year, end_date.month, calendar.monthrange(end_date.year, end_date.month)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.MONTHLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_month_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
        elif qual_type == "Calendar-Years":
            start_date = datetime.datetime(start_date.year, 1, 1)
            end_date = datetime.datetime(end_date.year, 12, calendar.monthrange(end_date.year, 12)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.YEARLY, dtstart=start_date, until=end_date):
                stat_value, matching_rows = handle_year_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
    elif qual_type == "Games":
        qual_num = qual_num_start
        while (True):
            for i in range(len(all_rows)):
                stat_value, matching_rows = handle_game_rows(i, player_data, player_type, stat, qual_num, all_rows, only_seasons)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })

            if qual_num >= qual_num_end:
                break
            if qual_num > len(all_rows):
                break
            qual_num += 1
    elif qual_type == "Seasons":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        qual_num = qual_num_start
        while (True):
            for i in range(len(seasons)):
                season = seasons[i]
                next_season_index = i + qual_num
                if next_season_index > len(seasons):
                    continue
                if next_season_index == len(seasons):
                    current_end_season = seasons[next_season_index - 1] + 1
                else:
                    current_end_season = seasons[next_season_index]
                stat_value, matching_rows = handle_season_rows(season, current_end_season, player_data, player_type, stat, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
            
            if qual_num >= qual_num_end:
                break
            if qual_num > len(seasons):
                break
            qual_num += 1
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        if only_seasons:
            seasons = sorted(list(set([row["Year"] for row in all_rows])))
            for season in seasons:
                season_rows = [row for row in all_rows if row["Year"] == season]
                teams = set([row[row_stat] for row in season_rows])
                for team in teams:
                    stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, season_rows)
                    if matching_rows:
                        if not stat_quals:
                            single_index = 0
                            for single_stat in the_stats:
                                if single_stat["value"] == stat_value:
                                    single_index += 1
                            the_stats.append({
                                "index" : single_index,
                                "value" : stat_value,
                                "counter" : 0
                            })
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            single_index = 0
                            for single_stat in the_stats:
                                if single_stat["value"] == stat_value:
                                    single_index += 1
                            the_stats.append({
                                "index" : single_index,
                                "value" : stat_value,
                                "counter" : 0
                            })
        else:
            teams = set([row[row_stat] for row in all_rows])
            for team in teams:
                stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, all_rows)
                if matching_rows:
                    if not stat_quals:
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        single_index = 0
                        for single_stat in the_stats:
                            if single_stat["value"] == stat_value:
                                single_index += 1
                        the_stats.append({
                            "index" : single_index,
                            "value" : stat_value,
                            "counter" : 0
                        })
        
def handle_min_max_final(stat_val, current_explain_strs, player_data, player_type, stat, qualifiers, all_rows, transformed_vals, extra_stats):
    if not all_rows:
        stat_val["stat_obj"]["explain_str"] = current_explain_strs
        return []

    qual_type = stat_val["stat_obj"]["time_frame"]["qual_type"]
    qual_num_start = stat_val["stat_obj"]["time_frame"]["qual_num_start"]
    qual_num_end = stat_val["stat_obj"]["time_frame"]["qual_num_end"]
    stat_quals = stat_val["stat_obj"]["stat_quals"]

    qual_num_str = ""
    if qual_num_start == qual_num_end:
        qual_num_str = str(qual_num_start)
    else:
        qual_num_str = str(qual_num_start) + "-" + str(qual_num_end)

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    match_all = False
    if not stat:
        stat = "datestart"
        match_all = True

    if not match_all:
        stat_val["stat_obj"]["explain_str"] += stat.upper() + ":" + ",".join(transformed_vals)
    
    format_str = "b" if player_type["da_type"] == "Batter" else "p"

    range_str = ""

    match_count = 0
    total_matching_rows = []
    total_matching_dates = set()
    if qual_type == "Days" or qual_type == "Weeks" or qual_type == "Months" or qual_type == "Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        qual_num = qual_num_start
        while (True):
            if qual_type == "Days":
                date_diff = dateutil.relativedelta.relativedelta(days=qual_num)
            elif qual_type == "Weeks":
                start_date -= datetime.timedelta(days=7)
                end_date += datetime.timedelta(days=7)
                date_diff = dateutil.relativedelta.relativedelta(weeks=qual_num)
            elif qual_type == "Months":
                start_date -= datetime.timedelta(days=31)
                end_date += datetime.timedelta(days=31)
                date_diff = dateutil.relativedelta.relativedelta(months=qual_num)
            elif qual_type == "Years":
                start_date -= datetime.timedelta(days=365)
                end_date += datetime.timedelta(days=365)
                date_diff = dateutil.relativedelta.relativedelta(years=qual_num)
            
            for days in range((end_date - start_date).days + 1):
                current_start_date = start_date + datetime.timedelta(days)
                stat_value, matching_rows = handle_date_rows(player_data, player_type, stat, current_start_date, date_diff, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            has_match = True

                    dates_covered = [current_start_date + datetime.timedelta(x) for x in range(date_diff.days)]
                    if not total_matching_dates.intersection(dates_covered):
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                total_matching_dates.update(dates_covered)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if current_start_date ==  (current_start_date + date_diff - datetime.timedelta(days=1)):
                                    range_str += str(current_start_date)
                                else:
                                    range_str += "[" + str(current_start_date) + " - " +  str(current_start_date + date_diff - datetime.timedelta(days=1)) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            total_matching_dates.update(dates_covered)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            if current_start_date ==  (current_start_date + date_diff - datetime.timedelta(days=1)):
                                range_str += "[" + str(current_start_date) + "]"
                            else:
                                range_str += "[" + str(current_start_date) + " - " +  str(current_start_date + date_diff - datetime.timedelta(days=1)) + "]"
            
            if qual_num >= qual_num_end:
                break
            if start_date + end_date > date_diff:
                break
            qual_num += 1
    elif qual_type == "Calendar-Weeks" or qual_type == "Calendar-Months" or qual_type == "Calendar-Years":
        dates = [row["Date"] for row in all_rows]
        start_date = min(dates)
        end_date = max(dates)

        if qual_type == "Calendar-Weeks":
            start_date = start_date - datetime.timedelta(days=start_date.weekday())
            tmp_end_date = end_date - datetime.timedelta(days=end_date.weekday())
            end_date = tmp_end_date + datetime.timedelta(days=6)
            for date in dateutil.rrule.rrule(dateutil.rrule.WEEKLY, dtstart=start_date, until=end_date):
                tmp_real_end_date = date - datetime.timedelta(days=date.weekday())
                real_end_date = tmp_real_end_date + datetime.timedelta(days=6)
                date_diff = real_end_date - date + datetime.timedelta(days=1)

                stat_value, matching_rows = handle_week_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            has_match = True
                    
                    dates_covered = [date + datetime.timedelta(x) for x in range(date_diff.days)]
                    if not total_matching_dates.intersection(dates_covered):
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                total_matching_dates.update(dates_covered)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if date ==  real_end_date:
                                    range_str += str(date)
                                else:
                                    range_str += "[" + str(date.date()) + " - " + str(real_end_date.date()) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            total_matching_dates.update(dates_covered)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            if date ==  real_end_date:
                                range_str += str(date)
                            else:
                                range_str += "[" + str(date.date()) + " - " + str(real_end_date.date()) + "]"
        elif qual_type == "Calendar-Months":
            start_date = datetime.datetime(start_date.year, start_date.month, 1)
            end_date = datetime.datetime(end_date.year, end_date.month, calendar.monthrange(end_date.year, end_date.month)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.MONTHLY, dtstart=start_date, until=end_date):
                date_diff = datetime.datetime(date.year, date.month, calendar.monthrange(date.year, date.month)[1]) - date + datetime.timedelta(days=1)
                stat_value, matching_rows = handle_month_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            has_match = True
                    
                    dates_covered = [date + datetime.timedelta(x) for x in range(date_diff.days)]
                    if not total_matching_dates.intersection(dates_covered):
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                total_matching_dates.update(dates_covered)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += "[" + calendar.month_name[date.month] + " " + str(date.year)  + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            total_matching_dates.update(dates_covered)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += "[" + calendar.month_name[date.month] + " " + str(date.year)  + "]"
        elif qual_type == "Calendar-Years":
            start_date = datetime.datetime(start_date.year, 1, 1)
            end_date = datetime.datetime(end_date.year, 12, calendar.monthrange(end_date.year, 12)[1])
            for date in dateutil.rrule.rrule(dateutil.rrule.YEARLY, dtstart=start_date, until=end_date):
                date_diff = datetime.datetime(date.year, 12, calendar.monthrange(date.year, 12)[1]) - date + datetime.timedelta(days=1)
                stat_value, matching_rows = handle_year_rows(player_data, player_type, stat, date, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            has_match = True
                    
                    dates_covered = [date + datetime.timedelta(x) for x in range(date_diff.days)]
                    if not total_matching_dates.intersection(dates_covered):        
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                total_matching_dates.update(dates_covered)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += str(date.year)
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            total_matching_dates.update(dates_covered)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += str(date.year)
    elif qual_type == "Games":
        qual_num = qual_num_start
        while (True):
            for i in range(len(all_rows)):
                stat_value, matching_rows = handle_game_rows(i, player_data, player_type, stat, qual_num, all_rows, only_seasons)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            has_match = True

                    found_match = False
                    for old_row in total_matching_rows:
                        for new_row in matching_rows:
                            if new_row["GameID"] == old_row["GameID"]:
                                found_match = True
                                break

                    if not found_match:                 
                        if has_match:
                            if not stat_val["negate"]:
                                dates = [matching_row["DateTime"] for matching_row in matching_rows]
                                start_date = min(dates)
                                end_date = max(dates)
                                if total_matching_rows:
                                    total_dates = [matching_row["DateTime"] for matching_row in total_matching_rows]
                                    total_start_date = min(total_dates)
                                    total_end_date = max(total_dates)
                                else:
                                    total_start_date = datetime.datetime.max
                                    total_end_date = datetime.datetime.min
                                if start_date < total_start_date or end_date > total_end_date:
                                    match_count += 1
                                    total_matching_rows.extend(matching_rows)

                                    date_start_link = None
                                    date_end_link = None
                                    for row in all_rows:
                                        if row["DateTime"] == start_date:
                                            if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                                                date_start_link = "https://www.baseball-reference.com" + row["GameLink"]
                                            else:
                                                date_start_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                                        if row["DateTime"] == end_date:
                                            if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                                                date_end_link = "https://www.baseball-reference.com" + row["GameLink"]
                                            else:
                                                date_end_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                                        
                                        if date_start_link and date_end_link:
                                            break
                                    start_date = "[" + str(start_date.date()) + "](" + date_start_link + ")"
                                    end_date = "[" + str(end_date.date()) + "](" + date_end_link + ")"

                                    if range_str:
                                        range_str += " + "
                                    else:
                                        range_str += qual_type + ":" + qual_num_str + "|"
                                    if start_date == end_date:
                                        range_str += str(start_date)
                                    else:
                                        range_str += "[" + str(start_date)  + " - " + str(end_date) + "]"
                        elif stat_val["negate"]:
                            dates = [matching_row["DateTime"] for matching_row in matching_rows]
                            start_date = min(dates)
                            end_date = max(dates)
                            if total_matching_rows:
                                total_dates = [matching_row["DateTime"] for matching_row in total_matching_rows]
                                total_start_date = min(total_dates)
                                total_end_date = max(total_dates)
                            else:
                                total_start_date = datetime.datetime.max
                                total_end_date = datetime.datetime.min
                            if start_date < total_start_date or end_date > total_end_date:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)

                                date_start_link = None
                                date_end_link = None
                                for row in all_rows:
                                    if row["DateTime"] == start_date:
                                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                                            date_start_link = "https://www.baseball-reference.com" + row["GameLink"]
                                        else:
                                            date_start_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                                    if row["DateTime"] == end_date:
                                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                                            date_end_link = "https://www.baseball-reference.com" + row["GameLink"]
                                        else:
                                            date_end_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                                    
                                    if date_start_link and date_end_link:
                                        break
                                start_date = "[" + str(start_date.date()) + "](" + date_start_link + ")"
                                end_date = "[" + str(end_date.date()) + "](" + date_end_link + ")"

                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                if start_date == end_date:
                                    range_str += str(start_date)
                                else:
                                    range_str += "[" + str(start_date)  + " - " + str(end_date) + "]"
            
            if qual_num >= qual_num_end:
                break
            if qual_num > len(all_rows):
                break
            qual_num += 1
    elif qual_type == "Seasons":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        qual_num = qual_num_start
        while (True):
            for i in range(len(seasons)):
                season = seasons[i]
                next_season_index = i + qual_num
                if next_season_index > len(seasons):
                    continue
                if next_season_index == len(seasons):
                    current_end_season = seasons[next_season_index - 1] + 1
                else:
                    current_end_season = seasons[next_season_index]
                stat_value, matching_rows = handle_season_rows(season, current_end_season, player_data, player_type, stat, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            has_match = True

                    dates_covered = [season + x for x in range(current_end_season - season + 1)]
                    if not total_matching_dates.intersection(dates_covered):
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                total_matching_dates.update(dates_covered)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"

                                if season in player_data["game_valid_years"]:
                                    start_date = "[" + str(season) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(season)) + ")"
                                else:
                                    start_date = season
                                if current_end_season - 1 in player_data["game_valid_years"]:
                                    end_date = "[" + str(current_end_season - 1) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(current_end_season - 1)) + ")"
                                else:
                                    end_date = current_end_season - 1

                                if start_date == end_date:
                                    range_str += str(start_date)
                                else:
                                    range_str += "[" + str(start_date) + " to " + str(end_date) + "]"
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            total_matching_dates.update(dates_covered)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            
                            if season in player_data["game_valid_years"]:
                                start_date = "[" + str(season) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(season)) + ")"
                            else:
                                start_date = season
                            if current_end_season - 1 in player_data["game_valid_years"]:
                                end_date = "[" + str(current_end_season - 1) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(current_end_season - 1)) + ")"
                            else:
                                end_date = current_end_season - 1

                            if start_date == end_date:
                                range_str += str(start_date)
                            else:
                                range_str += "[" + str(start_date) + " to " + str(end_date) + "]"
            
            if qual_num >= qual_num_end:
                break
            if qual_num > len(seasons):
                break
            qual_num += 1
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        if only_seasons:
            seasons = sorted(list(set([row["Year"] for row in all_rows])))
            for season in seasons:
                season_rows = [row for row in all_rows if row["Year"] == season]
                teams = set([row[row_stat] for row in season_rows])
                for team in teams:
                    stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, season_rows)
                    if matching_rows:
                        has_match = False
                        has_value_match = False
                        for single_stat in stat_val["values"]:
                            if single_stat["value"] == stat_value:
                                if single_stat["counter"] == single_stat["index"]:
                                    has_value_match = True
                                single_stat["counter"] += 1
                        if has_value_match or match_all:
                            if not stat_quals:
                                has_match = True
                            elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                                has_match = True
                        
                        if has_match:
                            if not stat_val["negate"]:
                                match_count += 1
                                total_matching_rows.extend(matching_rows)
                                if range_str:
                                    range_str += " + "
                                else:
                                    range_str += qual_type + ":" + qual_num_str + "|"
                                range_str += team.upper()
                        elif stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += team.upper()
        else:
            teams = set([row[row_stat] for row in all_rows])
            for team in teams:
                stat_value, matching_rows = handle_team_rows(team, row_stat, player_data, player_type, stat, all_rows)
                if matching_rows:
                    has_match = False
                    has_value_match = False
                    for single_stat in stat_val["values"]:
                        if single_stat["value"] == stat_value:
                            if single_stat["counter"] == single_stat["index"]:
                                has_value_match = True
                            single_stat["counter"] += 1
                    if has_value_match or match_all:
                        if not stat_quals:
                            has_match = True
                        elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                            has_match = True

                    if has_match:
                        if not stat_val["negate"]:
                            match_count += 1
                            total_matching_rows.extend(matching_rows)
                            if range_str:
                                range_str += " + "
                            else:
                                range_str += qual_type + ":" + qual_num_str + "|"
                            range_str += team.upper()
                    elif stat_val["negate"]:
                        match_count += 1
                        total_matching_rows.extend(matching_rows)
                        if range_str:
                            range_str += " + "
                        else:
                            range_str += qual_type + ":" + qual_num_str + "|"
                        range_str += team.upper()

    if not range_str:
        if not match_all:
            stat_val["stat_obj"]["explain_str"] = stat.upper() + "|" + qual_type + ":" + qual_num_str
            if match_count != 1:
                stat_val["stat_obj"]["explain_str"] += "|" + str(match_count) + " Stretches"
        else:
            stat_val["stat_obj"]["explain_str"] += str(match_count) + " Stretches"
        if only_seasons:
            stat_val["stat_obj"]["explain_str"] += "|Only Seasons"
    else:
        if not match_all:
            if match_count != 1:
                stat_val["stat_obj"]["explain_str"] += "|" + str(match_count) + " Stretches"
        else:
            stat_val["stat_obj"]["explain_str"] += str(match_count) + " Stretches"
        if only_seasons:
            stat_val["stat_obj"]["explain_str"] += "|Only Seasons"
        stat_val["stat_obj"]["explain_str"] += "|" + range_str 
    if stat_quals:
        stat_val["stat_obj"]["explain_str"] += "|"
        for stat_qual in stat_quals:
            stat_val["stat_obj"]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_val["stat_obj"]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_val["stat_obj"]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_val["stat_obj"]["explain_str"] += ", "
        stat_val["stat_obj"]["explain_str"] = stat_val["stat_obj"]["explain_str"][:-2]

    stat_val["stat_obj"]["explain_str"] = current_explain_strs + [stat_val["stat_obj"]["explain_str"]]

    return total_matching_rows

def find_stat_sub_match(qual_objects, player_type, stats):
    for qual_object in qual_objects:
        find_sub_stat_sub_match(qual_object["values"], player_type, stats)

def find_sub_stat_sub_match(sub_qual_objects, player_type, stats):
    for sub_qual_object in sub_qual_objects:
        stat = sub_qual_object["stats"][0]["stat"]
        find_sub_sub_stat_match(stat, player_type, stats)

def find_stat_match(qual_objects, player_type, stats, stat_name="values"):
    for qual_object in qual_objects:
        find_sub_stat_match(qual_object[stat_name], player_type, stats)

def find_sub_stat_match(sub_qual_objects, player_type, stats):
    for sub_qual_object in sub_qual_objects:
        stat = sub_qual_object["stat"]
        find_sub_sub_stat_match(stat, player_type, stats)

def find_sub_sub_stat_match(stat, player_type, stats):
    for sub_stat in headers[player_type["da_type"]]:
        if sub_stat.lower() == stat or ("display-value" in headers[player_type["da_type"]][sub_stat] and headers[player_type["da_type"]][sub_stat]["display-value"].lower() == stat):
            stats.add(sub_stat)
            return

def handle_season_stats(all_rows, player_data, player_type, qualifiers):
    if not all_rows:
        return []

    stats = set()
    if "Season Stat" in qualifiers:
        find_stat_match(qualifiers["Season Stat"], player_type, stats)
    if "Previous Season Stat" in qualifiers:
        find_stat_match(qualifiers["Previous Season Stat"], player_type, stats)
    if "Upcoming Season Stat" in qualifiers:
        find_stat_match(qualifiers["Upcoming Season Stat"], player_type, stats)

    season_row_map = {}
    seasons = sorted(list(set([row["Year"] for row in all_rows])))
    for season in seasons:
        season_matching_rows = []
        for row in all_rows:
            year = row["Year"]
            if year == season:
                season_matching_rows.append(row)
        season_row_map[season] = {
            "ind_rows" : season_matching_rows
        }

        if "Season Stat" in qualifiers or "Previous Season Stat" in qualifiers or "Upcoming Season Stat" in qualifiers:
            season_row_map[season]["comb_row"] = comb_rows(season_matching_rows, player_data, player_type, stats=stats)
            season_row_map[season]["comb_row"]["Year"] = season
        if "Season Formula" in qualifiers:
            stats = set()
            for qual_object in qualifiers["Season Formula"]:
                formula = qual_object["values"][0].lower()
                formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula))
                for header in headers[player_type["da_type"]].keys():
                    has_match = False
                    for formula_match in formula_matches:
                        if formula_match.group() == header.lower():
                            has_match = True
                            break

                    if not has_match:
                        new_stat = None
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and header_stat.lower() == header.lower():
                                new_stat = headers[player_type["da_type"]][header_stat]["display-value"].lower()
                                break

                        if new_stat:
                            for formula_match in formula_matches:
                                if formula_match.group() == new_stat.lower():
                                    has_match = True
                                    break
                    if has_match:
                        stats.add(header)
                        
            season_row_map[season]["comb_row_upper"] = comb_rows(season_matching_rows, player_data, player_type, False, stats=stats)
            season_row_map[season]["comb_row_upper"]["Year"] = season

    explain_str_obj = None
    
    new_rows = []
    for season in seasons:
        if "Season Stat" in qualifiers or "Previous Season Stat" in qualifiers or "Upcoming Season Stat" in qualifiers:
            season_row = season_row_map[season]["comb_row"]
            previous_row = None
            if season - 1 in season_row_map:
                previous_row = season_row_map[season - 1]["comb_row"]
            upcoming_row = None
            if season + 1 in season_row_map:
                upcoming_row = season_row_map[season + 1]["comb_row"]

        add_row = True
        if "Season Stat" in qualifiers:
            for qual_object in qualifiers["Season Stat"]:    
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    stat = sub_qual_object["stat"]
                    if stat not in season_row:
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in season_row:
                        has_match = season_row[stat] >= sub_qual_object["start_val"] and season_row[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break

        if add_row and "Previous Season Stat" in qualifiers:
            if not previous_row:
                add_row = False
                continue
            for qual_object in qualifiers["Previous Season Stat"]:
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    if not explain_str_obj:
                        explain_str_obj = sub_qual_object

                    stat = sub_qual_object["stat"]
                    if stat not in previous_row:
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in previous_row:
                        has_match = previous_row[stat] >= sub_qual_object["start_val"] and previous_row[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break

        if add_row and "Upcoming Season Stat" in qualifiers:
            if not upcoming_row:
                add_row = False
                continue
            for qual_object in qualifiers["Upcoming Season Stat"]:                    
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    stat = sub_qual_object["stat"]
                    if stat not in upcoming_row:
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in upcoming_row:
                        has_match = upcoming_row[stat] >= sub_qual_object["start_val"] and upcoming_row[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break
        
        if add_row and "Season Formula" in qualifiers:
            for qual_object in qualifiers["Season Formula"]:
                formula = qual_object["values"][0]
                try:
                    has_match = bool(calculate_formula("custom_formula", player_data, player_type, formula, season_row_map[season]["comb_row_upper"], season_row_map[season]["ind_rows"], safe_eval=True))
                except Exception:
                    has_match = False
                    add_row = False

                if qual_object["negate"]:
                    if has_match:
                        add_row = False
                        break
                else:
                    if not has_match:
                        add_row = False
                        break
        
        if add_row:
            new_rows.extend(season_row_map[season]["ind_rows"])
    
    new_rows =  [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

    if explain_str_obj:
        if "explain_str" not in explain_str_obj:
            explain_str_obj["explain_str"] = []
        current_explain_strs = explain_str_obj["explain_str"]
        explain_str_obj["explain_str"] = ""

        seasons = sorted(list(set([str(row["Year"]) for row in new_rows])))
        explain_str_obj["explain_str"] = ""

        explain_str_obj["explain_str"] += explain_str_obj["stat"].upper() + "="
        if explain_str_obj["start_val"] == explain_str_obj["end_val"]:
             explain_str_obj["explain_str"] += get_time_str(explain_str_obj["start_val"], False)
        else:
             explain_str_obj["explain_str"] += (get_time_str(explain_str_obj["start_val"], False)) + "-" + (get_time_str(explain_str_obj["end_val"], False))

        explain_str_obj["explain_str"] = current_explain_strs + [explain_str_obj["explain_str"]]

    return new_rows

def handle_career_stats(all_rows, player_data, player_type, qualifiers):
    if not all_rows:
        return []

    new_rows = []
    matching_rows = []
    explain_str_obj = None

    found_first_end = False

    stats = set()
    find_stat_match(qualifiers["Total Games Stat"], player_type, stats)

    for row in all_rows:
        matching_rows.append(row)
        comb_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        add_row = True
        for qual_object in qualifiers["Total Games Stat"]:    
            has_match = False
            for sub_qual_object in qual_object["values"]:
                if not explain_str_obj:
                    explain_str_obj = sub_qual_object

                stat = sub_qual_object["stat"]
                if stat not in comb_row:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in comb_row:
                    has_match = comb_row[stat] >= sub_qual_object["start_val"] and comb_row[stat] <= sub_qual_object["end_val"]

                    if not sub_qual_object["end_exclusive"]:
                        if comb_row[stat] >= sub_qual_object["end_val"]:
                            if found_first_end:
                                has_match = False
                            else:
                                has_match = True

                            found_first_end = True
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    add_row = False
                    break
            else:
                if not has_match:
                    add_row = False
                    break
        
        if add_row:
            new_rows.append(row)
    
    new_rows =  [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

    date_diff = None
    if new_rows:
        dates = set([row["Date"] for row in new_rows])
        min_date = min(dates)
        max_date = max(dates)
        date_diff = dateutil.relativedelta.relativedelta(min_date, max_date)

    if explain_str_obj:
        if "explain_str" not in explain_str_obj:
            explain_str_obj["explain_str"] = []
        current_explain_strs = explain_str_obj["explain_str"]
        explain_str_obj["explain_str"] = ""

        explain_str_obj["explain_str"] += explain_str_obj["stat"].upper() + "="
        if explain_str_obj["start_val"] == explain_str_obj["end_val"]:
             explain_str_obj["explain_str"] += get_time_str(explain_str_obj["start_val"], False)
        else:
             explain_str_obj["explain_str"] += (get_time_str(explain_str_obj["start_val"], False)) + "-" + (get_time_str(explain_str_obj["end_val"], False))

        explain_str_obj["explain_str"] += "|" + str(len(new_rows)) + " Total Games"

        if date_diff:
            date_diff_str = "|Time: "
            if date_diff.years:
                date_diff_str += str(date_diff.years).replace("-", "") + "Y"
            if date_diff.months:
                if date_diff.years:
                    date_diff_str += "-"
                date_diff_str += str(date_diff.months).replace("-", "") + "M"
            if date_diff.days:
                if date_diff.years or date_diff.months:
                    date_diff_str += "-"
                date_diff_str += str(date_diff.days).replace("-", "") + "D"

            explain_str_obj["explain_str"] += date_diff_str

        explain_str_obj["explain_str"] = current_explain_strs + [explain_str_obj["explain_str"]]

    return new_rows

def handle_max_streak(all_rows, player_data, player_type, qualifiers, max_streak, is_formula, extra_stats):
    new_rows = []

    if "Max Streak" in qualifiers and max_streak and not is_formula:
        for qual_object in qualifiers["Max Streak"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula, extra_stats)
    
    if "Count Streak" in qualifiers and not max_streak and not is_formula:
        for qual_object in qualifiers["Count Streak"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula, extra_stats)
    
    if "Max Streak Formula" in qualifiers and max_streak and is_formula:
        for qual_object in qualifiers["Max Streak Formula"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula, extra_stats)
    
    if "Count Streak Formula" in qualifiers and not max_streak and is_formula:
        for qual_object in qualifiers["Count Streak Formula"]:
            handle_max_streak_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, max_streak, is_formula, extra_stats)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_max_stretch(all_rows, player_data, player_type, qualifiers, extra_stats):
    new_rows = []

    if "Max Stretch" in qualifiers:
        for qual_object in qualifiers["Max Stretch"]:
            handle_max_stretch_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, extra_stats)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_max_streak_calc(new_rows, stat_objs, player_data, player_type, all_rows, max_streak, is_formula, extra_stats):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))

    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        prev_year = None
        break_next = False
        for i in range(len(all_rows)):
            row = all_rows[i]
            if prev_year != None and prev_year == row["Year"]:
                if break_next:
                    continue
            else:
                break_next = False
            prev_year = row["Year"]

            matching_rows = handle_streak_game_rows(i, player_data, player_type, stat_objs, all_rows, only_seasons, is_formula)
            if matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["GameID"] == old_row["GameID"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["GameID"] == old_row["GameID"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
            elif only_seasons and (is_start == True or is_start == False):
                break_next = True

            if not only_seasons and (is_start == True or is_start == False):
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        for i in range(len(seasons)):
            matching_rows = handle_streak_season_rows(i, seasons, player_data, player_type, stat_objs, all_rows)
            if matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
            if is_start == True or is_start == False:
                break
    elif qual_type == "Teams" or qual_type == "Opponents":
        row_stat = "Tm" if qual_type == "Teams" else "Opponent"
        teams = sorted(list(set([row[row_stat] for row in all_rows])))
        for team in teams:
            team_rows = [row for row in all_rows if row[row_stat] == team]
            prev_year = None
            break_next = False
            for i in range(len(team_rows)):
                row = team_rows[i]
                if prev_year != None and prev_year == row["Year"]:
                    if break_next:
                        continue
                else:
                    break_next = False
                prev_year = row["Year"]

                matching_rows = handle_streak_game_rows(i, player_data, player_type, stat_objs, team_rows, only_seasons, False)
                if matching_rows:
                    if not stat_quals:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                    elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                elif only_seasons and (is_start == True or is_start == False):
                    break_next = True

                if not only_seasons and (is_start == True or is_start == False):
                    break

    all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if max_streak:
        if start_level == float("inf"):
            start_level = len(all_streak_counts) - 1
        elif start_level < 0:
            start_level = 0
        elif start_level >= len(all_streak_counts):
            start_level = len(all_streak_counts) - 1
        
        if end_level == float("inf"):
            end_level = len(all_streak_counts)
        elif end_level < 0:
            end_level = 0
        elif end_level >= len(all_streak_counts):
            end_level = len(all_streak_counts)
            
        our_keys = all_streak_counts[start_level:end_level]
    else:
        our_keys = all_streak_counts

    format_str = "b" if player_type["da_type"] == "Batter" else "p"

    all_streaks = []
    match_count = 0
    for key in our_keys:
        for match in all_streak_obj[key]:
            team = None
            if "Games" in qual_type or qual_type == "Teams" or qual_type == "Opponents":
                dates = [row["DateTime"] for row in match]
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                date_start_link = None
                date_end_link = None
                for row in all_rows:
                    if row["DateTime"] == start_date:
                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                            date_start_link = "https://www.baseball-reference.com" + row["GameLink"]
                        else:
                            date_start_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                    if row["DateTime"] == end_date:
                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                            date_end_link = "https://www.baseball-reference.com" + row["GameLink"]
                        else:
                            date_end_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                    
                    if date_start_link and date_end_link:
                        break

                start_date = "[" + str(start_date.date()) + "](" + date_start_link + ")"
                end_date = "[" + str(end_date.date()) + "](" + date_end_link + ")"
                
                if qual_type == "Teams":
                    team = match[0]["Tm"]
                elif qual_type == "Opponents":
                    team = match[0]["Opponent"]
            else:
                dates = set([row["Year"] for row in match])
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                if start_date in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(start_date)) + ")"
                if end_date in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(end_date)) + ")"
                
            all_streaks.append({
                "start_date" : start_date,
                "end_date" : end_date,
                "games" : match_count,
                "match" : match,
                "team" : team
            })
    
    if not max_streak:
        qual_type = "Streaks"
        match_count = len(all_streaks)
    
    all_streaks = sorted(all_streaks, key=lambda streak: (-streak["games"], streak["start_date"]))

    if max_streak:
        all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    if qual_type == "Teams" or qual_type == "Opponents":
        stat_objs[0]["explain_str"] += qual_type + "|"
    else:
        stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count) + "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if not is_formula:
                if stat["start_val"] == stat["end_val"]:
                    stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
                else:
                    if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if only_seasons:
        stat_objs[0]["explain_str"] += "|Only Seasons"
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    if len(all_streaks) > 1 or qual_type == "Teams" or qual_type == "Opponents":
        for i in range(len(all_streaks)):
            streak = all_streaks[i]
            if i:
                stat_objs[0]["explain_str"] += " + "
            else:
                stat_objs[0]["explain_str"] += "|"
            if qual_type == "Teams" or qual_type == "Opponents":
                stat_objs[0]["explain_str"] += streak["team"].upper() + ": "
            if streak["start_date"] == streak["end_date"]:
                stat_objs[0]["explain_str"] += str(streak["start_date"])
            else:
                stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
                if not max_streak or qual_type == "Teams" or qual_type == "Opponents":
                    stat_objs[0]["explain_str"] += " (" + str(streak["games"]) + " Games)"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]
    
    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def handle_max_stretch_calc(new_rows, stat_objs, player_data, player_type, all_rows, extra_stats):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    only_seasons = False
    if qual_type.startswith("Only-Season-"):
        only_seasons = True
        qual_type = qual_type.replace("Only-Season-", "")
    
    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))

    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        prev_year = None
        break_next = False
        for i in range(len(all_rows)):
            row = all_rows[i]
            if prev_year != None and prev_year == row["Year"]:
                if break_next:
                    continue
            else:
                break_next = False
            prev_year = row["Year"]

            total_matching_rows = handle_stretch_game_rows(i, player_data, player_type, stat_objs, all_rows, only_seasons)
            for matching_rows in total_matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["GameID"] == old_row["GameID"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["GameID"] == old_row["GameID"]:
                                        found_match = True
                                        break
                    if not found_match:
                        streak_length = len(matching_rows)
                        if not streak_length in all_streak_obj:
                            all_streak_obj[streak_length] = []
                        all_streak_obj[streak_length].append(matching_rows)
            
            if not total_matching_rows and only_seasons and (is_start == True or is_start == False):
                break_next = True

            if not only_seasons and (is_start == True or is_start == False):
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        for i in range(len(seasons)):
            total_matching_rows = handle_stretch_season_rows(i, seasons, player_data, player_type, stat_objs, all_rows)
            for matching_rows in total_matching_rows:
                if not stat_quals:
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    if matching_rows not in all_streak_obj[streak_length]:
                        all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                    found_match = False
                    for key in all_streak_obj:
                        for old_rows in all_streak_obj[key]:
                            for old_row in old_rows:
                                for new_row in matching_rows:
                                    if new_row["Year"] == old_row["Year"]:
                                        found_match = True
                                        break
                    dates = set([row["Year"] for row in matching_rows])
                    streak_length = len(dates)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    if matching_rows not in all_streak_obj[streak_length]:
                        all_streak_obj[streak_length].append(matching_rows)
            if is_start == True or is_start == False:
                break

    all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if start_level == float("inf"):
        start_level = len(all_streak_counts) - 1
    elif start_level < 0:
        start_level = 0
    elif start_level >= len(all_streak_counts):
        start_level = len(all_streak_counts) - 1
    
    if end_level == float("inf"):
        end_level = len(all_streak_counts)
    elif end_level < 0:
        end_level = 0
    elif end_level >= len(all_streak_counts):
        end_level = len(all_streak_counts)
        
    our_keys = all_streak_counts[start_level:end_level]

    format_str = "b" if player_type["da_type"] == "Batter" else "p"

    all_streaks = []
    match_count = 0
    for key in our_keys:
        for match in all_streak_obj[key]:
            if "Games" in qual_type:
                dates = [row["DateTime"] for row in match]
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                date_start_link = None
                date_end_link = None
                for row in all_rows:
                    if row["DateTime"] == start_date:
                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                            date_start_link = "https://www.baseball-reference.com" + row["GameLink"]
                        else:
                            date_start_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                    if row["DateTime"] == end_date:
                        if row["GameLink"] and (not "mlb-link" in extra_stats or "MLBGameLink" not in row):
                            date_end_link = "https://www.baseball-reference.com" + row["GameLink"]
                        else:
                            date_end_link = "https://www.mlb.com/gameday/" + str(row["MLBGameLink"])
                    
                    if date_start_link and date_end_link:
                        break
                start_date = "[" + str(start_date.date()) + "](" + date_start_link + ")"
                end_date = "[" + str(end_date.date()) + "](" + date_end_link + ")"
            else:
                dates = set([row["Year"] for row in match])
                match_count = len(dates)
                start_date = min(dates)
                end_date = max(dates)

                if start_date in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(start_date)) + ")"
                if end_date in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(end_date)) + ")"
                
            all_streaks.append({
                "start_date" : start_date,
                "end_date" : end_date,
                "games" : match_count,
                "match" : match
            })
        
    all_streaks = sorted(all_streaks, key=lambda streak: (-streak["games"], streak["start_date"]))

    all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count) + "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if stat["start_val"] == stat["end_val"]:
                stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
            else:
                if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                    stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if only_seasons:
        stat_objs[0]["explain_str"] += "|Only Seasons"
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    if len(all_streaks) > 1:
        for i in range(len(all_streaks)):
            streak = all_streaks[i]
            if i:
                stat_objs[0]["explain_str"] += " + "
            else:
                stat_objs[0]["explain_str"] += "|"
            if streak["start_date"] == streak["end_date"]:
                stat_objs[0]["explain_str"] += str(streak["start_date"])
            else:
                stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
                stat_objs[0]["explain_str"] += " (" + str(streak["games"]) + " Games)"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_objs[0]["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]
    
    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def handle_quick_long(all_rows, player_data, player_type, qualifiers):
    new_rows = []

    if "Quickest" in qualifiers:
        for qual_object in qualifiers["Quickest"]:
            handle_quick_long_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, True)
    
    if "Slowest" in qualifiers:
        for qual_object in qualifiers["Slowest"]:
            handle_quick_long_calc(new_rows, qual_object["values"], player_data, player_type, all_rows, False)
    
    return [row for n, row in enumerate(new_rows) if row not in new_rows[:n]]

def handle_quick_long_calc(new_rows, stat_objs, player_data, player_type, all_rows, is_quickest):
    if not all_rows:
        return

    time_frame = stat_objs[len(stat_objs) - 1]["time_frame"]
    stat_quals = stat_objs[len(stat_objs) - 1]["stat_quals"]
    start_level = stat_objs[len(stat_objs) - 1]["start_level"] - 1
    end_level = stat_objs[len(stat_objs) - 1]["end_level"]
    if "explain_str" not in stat_objs[0]:
        stat_objs[0]["explain_str"] = []
    current_explain_strs = stat_objs[0]["explain_str"]
    stat_objs[0]["explain_str"] = ""

    all_streak_obj = {}

    if time_frame:
        qual_type = time_frame["qual_type"]
    else:
        qual_type = "Games"

    is_start = None
    if qual_type.endswith("-Start") or qual_type.endswith("-End"):
        if qual_type.endswith("-Start"):
            is_start = True
            qual_type = qual_type.replace("-Start", "")
        else:
            is_start = False
            qual_type = qual_type.replace("-End", "")

    if is_start == False:
        all_rows = list(reversed(all_rows))
        
    if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        for season in seasons:
            matching_rows = handle_quickest_game_rows(season, player_data, player_type, stat_objs, all_rows, is_quickest)
            if matching_rows:
                if not stat_quals:
                    streak_length = len(matching_rows)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
                elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                    streak_length = len(matching_rows)
                    if not streak_length in all_streak_obj:
                        all_streak_obj[streak_length] = []
                    all_streak_obj[streak_length].append(matching_rows)
                    
            if is_start == True or is_start == False:
                break
    elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
        seasons = sorted(list(set([row["Year"] for row in all_rows])))
        matching_rows = handle_quickest_season_rows(seasons, player_data, player_type, stat_objs, all_rows)
        if matching_rows:
            if not stat_quals:
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
            elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
    elif qual_type == "Total Games":
        matching_rows = handle_quickest_career_rows(player_data, player_type, stat_objs, all_rows)
        if matching_rows:
            if not stat_quals:
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)
            elif valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
                dates = set([row["Year"] for row in matching_rows])
                streak_length = len(dates)
                if not streak_length in all_streak_obj:
                    all_streak_obj[streak_length] = []
                all_streak_obj[streak_length].append(matching_rows)

    if is_quickest:
        all_streak_counts = sorted(list(all_streak_obj.keys()))
    else:
        all_streak_counts = sorted(list(all_streak_obj.keys()), reverse=True)

    if start_level == float("inf"):
        start_level = len(all_streak_counts) - 1
    elif start_level < 0:
        start_level = 0
    elif start_level >= len(all_streak_counts):
        start_level = len(all_streak_counts) - 1
    
    if end_level == float("inf"):
        end_level = len(all_streak_counts)
    elif end_level < 0:
        end_level = 0
    elif end_level >= len(all_streak_counts):
        end_level = len(all_streak_counts)
        
    our_keys = all_streak_counts[start_level:end_level]

    format_str = "b" if player_type["da_type"] == "Batter" else "p"

    all_streaks = []
    match_count = 0
    age = None
    for key in our_keys:
        for match in all_streak_obj[key]:
            dates = [row["DateTime"] for row in match]
            match_count = len(dates)
            if qual_type == "Games" or qual_type == "Games-Start" or qual_type == "Games-End":
                dates = set([row["Year"] for row in match])
                start_date = min(dates)
                end_date = max(dates)

                if start_date in player_data["game_valid_years"]:
                    start_date = "[" + str(start_date) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(start_date)) + ")"
                if end_date in player_data["game_valid_years"]:
                    end_date = "[" + str(end_date) + "](" + game_splits_url_format.format(player_data["id"], format_str, str(end_date)) + ")"

                all_streaks.append({
                    "start_date" : start_date,
                    "end_date" : end_date,
                    "match" : match
                })
            elif qual_type == "Seasons" or qual_type == "Seasons-Start" or qual_type == "Seasons-End":
                new_rows.extend(match)
                dates = set([row["Year"] for row in match])
                match_count = len(dates)
            elif qual_type == "Total Games":
                new_rows.extend(match)
                dates = set([row["Date"] for row in match])
                end_date = max(dates)
                age = dateutil.relativedelta.relativedelta(player_data["Birthday"], end_date)
    
    all_streaks = all_streaks[-len(our_keys):]

    for streak in all_streaks:
        new_rows.extend(streak["match"])

    stat_objs[0]["explain_str"] += qual_type + ":" + str(match_count)
    # if age:
    #     age_str = "|Age: "
    #     if age.years:
    #         age_str += str(age.years).replace("-", "") + "Y"
    #     if age.months:
    #         if age.years:
    #             age_str += "-"
    #         age_str += str(age.months).replace("-", "") + "M"
    #     if age.days:
    #         if age.years or age.months:
    #             age_str += "-"
    #         age_str += str(age.days).replace("-", "") + "D"

    #     stat_objs[0]["explain_str"] += age_str
    stat_objs[0]["explain_str"] += "|"
    for stat_obj in stat_objs:
        for stat in stat_obj["stats"]:
            stat_objs[0]["explain_str"] += stat["stat"].upper()
            if stat["start_val"] == stat["end_val"]:
                stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
            else:
                if stat["start_val"] != 1 or stat["end_val"] != float("inf"):
                    if stat["end_val"] == float("inf"):
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False))
                    else:
                        stat_objs[0]["explain_str"] += "=" + (get_time_str(stat["start_val"], False)) + "-" + (get_time_str(stat["end_val"], False))
            stat_objs[0]["explain_str"] += " + "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
        stat_objs[0]["explain_str"] += " - "
    stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-3]
    if is_start == True or is_start == False:
        stat_objs[0]["explain_str"] += "|"
        if is_start == True:
            stat_objs[0]["explain_str"] += "Start"
        else:
            stat_objs[0]["explain_str"] += "End"
    for i in range(len(all_streaks)):
        streak = all_streaks[i]
        if i:
            stat_objs[0]["explain_str"] += " + "
        else:
            stat_objs[0]["explain_str"] += "|"
        if streak["start_date"] == streak["end_date"]:
            stat_objs[0]["explain_str"] += str(streak["start_date"])
        else:
            stat_objs[0]["explain_str"] += "[" + str(streak["start_date"]) + " to " + str(streak["end_date"]) + "]"
    start_level += 1
    if start_level == end_level:
        if start_level != 1:
            stat_obj["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result"
    else:
        stat_obj["explain_str"] += "|" + (get_time_str(start_level, True)) + " Result to " + (get_time_str(end_level, True)) + " Result"
    if stat_obj["stat_quals"]:
        stat_objs[0]["explain_str"] += "|"
        for stat_qual in stat_obj["stat_quals"]:
            stat_objs[0]["explain_str"] += stat_qual["stat"].upper() + " = "
            if stat_qual["start_val"] == stat_qual["end_val"]:
                stat_objs[0]["explain_str"] += get_time_str(stat_qual["start_val"], False)
            else:
                stat_objs[0]["explain_str"] += (get_time_str(stat_qual["start_val"], False)) + "-" + (get_time_str(stat_qual["end_val"], False))
            stat_objs[0]["explain_str"] += ", "
        stat_objs[0]["explain_str"] = stat_objs[0]["explain_str"][:-2]

    stat_objs[0]["explain_str"] = current_explain_strs + [stat_objs[0]["explain_str"]]

def valid_matching_rows(matching_rows, stat_quals, player_type, player_data):
    stats = set()
    find_sub_stat_match(stat_quals, player_type, stats)
    row_lower = comb_rows(matching_rows, player_data, player_type, stats=stats)
    for qual_object in stat_quals:
        has_match = False
        stat = qual_object["stat"]

        if stat.startswith("season"):
            season_num = len(set([row["Year"] for row in matching_rows]))
            has_match = season_num >= qual_object["start_val"] and season_num <= qual_object["end_val"]
        else:
            if stat not in row_lower:
                for header_stat in headers[player_type["da_type"]]:
                    if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                        stat = header_stat.lower()
        
            if stat in row_lower:
                has_match = row_lower[stat] >= qual_object["start_val"] and row_lower[stat] <= qual_object["end_val"]

        if not has_match:
            return False
    
    return True

def comb_rows(matching_rows, player_data, player_type, lower=True, stats=None):
    parse_formula_stats = stats == None or set(stats).intersection(formulas[player_type["da_type"]].keys())
    parse_advanced_stats = stats == None or set(stats).intersection(advanced_stats[player_type["da_type"]])

    comb_row = {}
    for header in headers[player_type["da_type"]].keys():
        if parse_formula_stats or parse_advanced_stats or stats == None or header in stats:
            if not header in formulas[player_type["da_type"]] and not header in advanced_stats["Batter"] and not header in advanced_stats["Pitcher"]:
                comb_row[header] = 0.0

    date_start = 0
    date_end = 0
    is_playoffs = None
    for row_data in matching_rows:
        for stat in row_data:
            if parse_formula_stats or parse_advanced_stats or stat == "DateTime" or stats == None or stat in stats:
                if stat in comb_row and isinstance(row_data[stat], numbers.Number) and isinstance(comb_row[stat], numbers.Number) and (not stat in qualifier_map or stat == "Team Score" or stat == "Opponent Score") and not stat in formulas[player_type["da_type"]] and not stat in advanced_stats["Batter"] and not stat in advanced_stats["Pitcher"] and row_data[stat] != 0:
                    if stat in decimal_stats:
                        comb_row[stat] = round_value(comb_row[stat] + row_data[stat], 1)
                    else:
                        comb_row[stat] += row_data[stat]
            
                if stat == "DateTime":
                    start_date_to_use = row_data[stat]
                    end_date_to_use = row_data[stat]

                    if isinstance(start_date_to_use, int) and not isinstance(date_start, int):
                        date_start = date_start.year
                    if isinstance(end_date_to_use, int) and not isinstance(date_end, int):
                        date_end = date_end.year

                    if date_start == 0 or start_date_to_use < date_start:
                        date_start = row_data[stat]
                    if date_end == 0 or end_date_to_use > date_end:
                        date_end = row_data[stat]
        
        if row_data["is_playoffs"]:
            if not is_playoffs or is_playoffs == "Only":
                is_playoffs = "Only"
            else:
                is_playoffs = "Include"
        else:
            if is_playoffs:
                is_playoffs = "Include"
    
    if date_start:
        comb_row["DateStart"] = [date_start]
    else:
        comb_row["DateStart"] = []
    if date_end:
        comb_row["DateEnd"] = [date_end]
    else:
        comb_row["DateEnd"] = []
    comb_row["is_playoffs"] = is_playoffs
    comb_row["all_rows"] = matching_rows

    if "IP" in comb_row:
        frac, whole = math.modf(comb_row["IP"])
        frac = round_value(frac, 1)
        comb_row["IP"] = whole
        if frac == 0.3:
            comb_row["IP"] += 1/3
        elif frac == 0.7:
            comb_row["IP"] += 2/3
        elif frac == 1.0:
            comb_row["IP"] += 1

    if "Inn" in comb_row:
        frac, whole = math.modf(comb_row["Inn"])
        frac = round_value(frac, 1)
        comb_row["Inn"] = whole
        if frac == 0.3:
            comb_row["Inn"] += 1/3
        elif frac == 0.7:
            comb_row["Inn"] += 2/3
        elif frac == 1.0:
            comb_row["Inn"] += 1

    if parse_formula_stats:
        for stat in stats:
            if stat in formulas[player_type["da_type"]]:
                calculate_recursive_formula(stat, player_data, player_type, comb_row, matching_rows)

    if parse_advanced_stats:
        calculate_advanced_stats(comb_row, matching_rows, player_type, None)

    headers_to_remove = set()
    for header in comb_row:
        if is_invalid_stat(header, player_type, comb_row, False)["all_invalid"]:
            headers_to_remove.add(header)

    for key in headers_to_remove:
        del comb_row[key]

    if lower:
        return {key.lower(): value for key, value in comb_row.items()}
    else:
        return comb_row

def calculate_recursive_formula(stat, player_data, player_type, comb_row, matching_rows):
    formula = formulas[player_type["da_type"]][stat]
    formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula.lower()))
    for header_stat in formulas[player_type["da_type"]]:
        if header_stat == stat:
            break
        has_match = False
        for formula_match in formula_matches:
            if formula_match.group() == header_stat.lower():
                has_match = True
                break
        if has_match:
            calculate_recursive_formula(header_stat, player_data, player_type, comb_row, matching_rows)
    comb_row[stat] = calculate_formula(stat, player_data, player_type, formula, comb_row, matching_rows)
            
def handle_date_rows(player_data, player_type, stat, start_date, date_diff, all_rows):
    stat_value = 0
    matching_rows = []
    end_date = start_date + date_diff
    for row in all_rows:
        if row["Date"] >= start_date and row["Date"] < end_date:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()

    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_week_rows(player_data, player_type, stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        if row["Date"].year == date.year and row["Date"].isocalendar()[1] == date.isocalendar()[1]:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()

    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_month_rows(player_data, player_type, stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        if row["Date"].year == date.year and row["Date"].month == date.month:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_year_rows(player_data, player_type, stat, date, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        if row["Date"].year == date.year:
            matching_rows.append(row)
            
    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_game_rows(start_index, player_data, player_type, stat, num_games, all_rows, only_seasons):
    stat_value = 0
    matching_rows = []
    prev_year = None
    for i in range(start_index, start_index + num_games):
        if i >= len(all_rows):
            return 0, []
        
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Year"]:
            return 0, []
        prev_year = row["Year"]

        matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_streak_game_rows(start_index, player_data, player_type, over_stat_objs, all_rows, only_seasons, is_formula):
    matching_rows = []
    prev_year = None
    stats = set()
    if not is_formula:
        find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(all_rows)):
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Year"]:
            break
        prev_year = row["Year"]
        
        if is_formula:
            row_normal = fill_row(row, player_data, player_type, lower=False)
        else:
            row_lower = fill_row(row, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if is_formula:
                    try:
                        if not bool(calculate_formula("custom_formula", player_data, player_type, stat, row_normal, all_rows, safe_eval=True)):
                            all_passed = False
                            break
                    except Exception:
                        all_passed = False
                else:
                    if stat not in row_lower:
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    if stat in row_lower:
                        if row_lower[stat] < stat_obj["start_val"] or row_lower[stat] > stat_obj["end_val"]:
                            all_passed = False
                            break
                    else:
                        all_passed = False
                        break
            if all_passed:
                any_passed = True
                break
        if any_passed:
            matching_rows.append(row)
        else:
            break
    return matching_rows

def handle_stretch_game_rows(start_index, player_data, player_type, over_stat_objs, all_rows, only_seasons):
    total_matching_rows = []

    matching_rows = []
    prev_year = None
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(all_rows)):
        row = all_rows[i]
        if only_seasons and prev_year != None and prev_year != row["Year"]:
            break
        prev_year = row["Year"]
        
        matching_rows.append(row)
        combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in combined_row:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in combined_row:
                    if combined_row[stat] < stat_obj["start_val"] or combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break

        if any_passed:
            row_copy = []
            for row in matching_rows:
                row_copy.append(row)
            total_matching_rows.append(row_copy)

    return total_matching_rows

def handle_quickest_game_rows(season, player_data, player_type, over_stat_objs, all_rows, is_quickest):
    matching_rows = []

    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for row in all_rows:
        year = row["Year"]
        if year == season:
            matching_rows.append(row)
            combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
            any_passed = False
            for over_stat_obj in over_stat_objs:
                all_passed = True
                for stat_obj in over_stat_obj["stats"]:
                    stat = stat_obj["stat"]
                    if stat not in combined_row:
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    if stat in combined_row:
                        if combined_row[stat] < stat_obj["start_val"] or combined_row[stat] > stat_obj["end_val"]:
                            all_passed = False
                    else:
                        all_passed = False
                if all_passed:
                    any_passed = True
                    break
            if any_passed:
                return matching_rows

    if is_quickest:
        return None
    else:
        return matching_rows

def handle_season_rows(start_season, end_season, player_data, player_type, stat, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        year = row["Year"]
        if year >= start_season and year < end_season:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()

    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows

def handle_streak_season_rows(start_index, seasons, player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for i in range(start_index, len(seasons)):
        season = seasons[i]
        season_matching_rows = []
        for row in all_rows:
            year = row["Year"]
            if year == season:
                season_matching_rows.append(row)
        season_combined_row = comb_rows(season_matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in season_combined_row:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in season_combined_row:
                    if season_combined_row[stat] < stat_obj["start_val"] or season_combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break
        if any_passed:
            matching_rows.extend(season_matching_rows)
        else:
            break
    return matching_rows

def handle_stretch_season_rows(start_index, seasons, player_data, player_type, over_stat_objs, all_rows):
    total_matching_rows = []

    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    matching_rows = []
    for i in range(start_index, len(seasons)):
        season = seasons[i]
        for row in all_rows:
            year = row["Year"]
            if year == season:
                matching_rows.append(row)
        combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)

        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in combined_row:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in combined_row:
                    if combined_row[stat] < stat_obj["start_val"] or combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break

        if any_passed:
            row_copy = []
            for row in matching_rows:
                row_copy.append(row)
            total_matching_rows.append(row_copy)

    return total_matching_rows

def handle_quickest_season_rows(seasons, player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for season in seasons:
        for row in all_rows:
            year = row["Year"]
            if year == season:
                matching_rows.append(row)
        season_combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in season_combined_row:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in season_combined_row:
                    if season_combined_row[stat] < stat_obj["start_val"] or season_combined_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break
        if any_passed:
            return matching_rows

    return None

def handle_quickest_career_rows(player_data, player_type, over_stat_objs, all_rows):
    matching_rows = []
    stats = set()
    find_stat_match(over_stat_objs, player_type, stats, stat_name="stats")
    for row in all_rows:
        matching_rows.append(row)
        comb_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
        any_passed = False
        for over_stat_obj in over_stat_objs:
            all_passed = True
            for stat_obj in over_stat_obj["stats"]:
                stat = stat_obj["stat"]
                if stat not in comb_row:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                if stat in comb_row:
                    if comb_row[stat] < stat_obj["start_val"] or comb_row[stat] > stat_obj["end_val"]:
                        all_passed = False
                        break
                else:
                    all_passed = False
                    break
            if all_passed:
                any_passed = True
                break
        if any_passed:
            return matching_rows

    return None

def handle_team_rows(team, row_stat, player_data, player_type, stat, all_rows):
    stat_value = 0
    matching_rows = []
    for row in all_rows:
        row_team = row[row_stat]
        if team == row_team:
            matching_rows.append(row)

    stats = set()
    find_sub_sub_stat_match(stat, player_type, stats)
    combined_row = comb_rows(matching_rows, player_data, player_type, stats=stats)
    if stat not in combined_row:
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                stat = header_stat.lower()
                
    if stat in combined_row:
        stat_value = combined_row[stat]
    else:
        matching_rows = []

    return stat_value, matching_rows
            
def fill_row(row, player_data, player_type, lower=True, stats=None):
    for header in headers[player_type["da_type"]].keys():
        if header not in row:
            if not header in formulas[player_type["da_type"]] and not header in advanced_stats["Batter"] and not header in advanced_stats["Pitcher"]:
                row[header] = 0.0
    
    if stats == None or set(stats).intersection(formulas[player_type["da_type"]].keys()):
        for stat in stats:
            if stat in formulas[player_type["da_type"]]:
                calculate_recursive_formula(stat, player_data, player_type, row, [])

    if stats == None or set(stats).intersection(advanced_stats[player_type["da_type"]]):
        missing_advanced = False
        for advanced_stat in advanced_stats["Batter"]:
            if not advanced_stat in row:
                missing_advanced = True
                break
        if not missing_advanced and player_type["da_type"] != "Batter":
            for advanced_stat in advanced_stats["Pitcher"]:
                if not advanced_stat in row:
                    missing_advanced = True
                    break

        if missing_advanced:
            calculate_advanced_stats(row, [row], player_type, None)
    
    row["DateStart"] = [row["DateTime"]]

    prev_is_playofs = row["is_playoffs"]
    if row["is_playoffs"]:
        row["is_playoffs"] = "Only"
    else:
        row["is_playoffs"] = None

    headers_to_remove = set()
    for header in row:
        if is_invalid_stat(header, player_type, row, False)["all_invalid"]:
            headers_to_remove.add(header)

    row["is_playoffs"] = prev_is_playofs
    
    for key in headers_to_remove:
        del row[key]

    if lower:
        return {key.lower(): value for key, value in row.items()}
    else:
        return row

def url_request(request, timeout=30):
    failed_counter = 0
    while(True):
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
            text = response.read()
            try:
                text = text.decode(response.headers.get_content_charset())
            except UnicodeDecodeError:
                bs = BeautifulSoup(text, "html.parser")
                if not bs.contents:
                    raise urllib.error.URLError("Page is empty!")
                return response, bs

            bs = BeautifulSoup(text, "lxml")
            if not bs.contents:
                raise urllib.error.URLError("Page is empty!")
            return response, bs
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_lxml(session, url, timeout=30):
    failed_counter = 0
    while(True):
        try:
            response = session.get(url, timeout=timeout)
            bs = lxml.html.document_fromstring(response.text)
            if not bs:
                raise urllib.error.URLError("Page is empty!")
            return response, bs
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + url + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_bytes(request, timeout=30):
    failed_counter = 0
    while(True):
        try:
            response = urllib.request.urlopen(request, timeout=timeout)
            return response.read()
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow request to " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_json(session, url, timeout=30):
    failed_counter = 0
    while(True):
        try:
            return session.get(url, timeout=timeout).json()
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow " + url + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def url_request_json_urlib(request, timeout=30):
    failed_counter = 0
    while(True):
        try:
            return json.loads(urllib.request.urlopen(request, timeout=timeout).read())
        except Exception:
            failed_counter += 1
            if failed_counter > max_request_retries:
                raise

        delay_step = 10
        logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow " + request.get_full_url() + " to chill")
        time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
        for i in range(retry_failure_delay, 0, -time_to_wait):
            logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
            time.sleep(time_to_wait)
        logger.info("#" + str(threading.get_ident()) + "#   " + "0")

def get_player_type(player_page):
    player_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Position:")
    if not player_info:
        player_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Positions:")
        if not player_info:
            return "Batter"
        player_type_el = player_info.parent.text.replace("Positions:", "").strip().split(" ")
    else:
        player_type_el = player_info.parent.text.replace("Position:", "").strip().split(" ")

    position = player_type_el[0].replace(",", "").strip().lower()

    return "Batter" if ("pitcher" not in position and "starting" not in position and "relief" not in position) else "Pitcher"

def get_player_position(player_page):
    player_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Position:")
    if not player_info:
        player_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Positions:")
        if not player_info:
            return "UNK"
        main_pos = player_info.parent.text.replace("Positions:", "").strip().lower()
    else:
        main_pos = player_info.parent.text.replace("Position:", "").strip().lower()

    main_pos = re.split(r",\s+|\s+and\s+", main_pos)[0]

    if main_pos.startswith("first baseman"):
        return "1B"
    elif main_pos.startswith("second baseman"):
        return "2B"
    elif main_pos.startswith("third baseman"):
        return "3B"
    elif main_pos.startswith("shortstop"): 
        return "SS"
    elif main_pos.startswith("leftfielder"): 
        return "LF"
    elif main_pos.startswith("centerfielder"):
        return "CF"
    elif main_pos.startswith("rightfielder"):
        return "RF"
    elif main_pos.startswith("catcher"):
        return "C"
    elif main_pos.startswith("outfielder"):
        return "OF"
    elif main_pos.startswith("designated hitter"):
        return "DH"
    elif main_pos.startswith("pinch hitter"):
        return "PH"
    elif main_pos.startswith("pinch runner"):
        return "PR"
    elif "pitcher" in main_pos or "starting" in main_pos or "relief" in main_pos:
        throws_pos = player_page.find("div", {"id" : "meta"}).find("strong", text="Throws: ")
        if throws_pos:
            throw_next_sibling = throws_pos.next_sibling
            if isinstance(throw_next_sibling, element.NavigableString):
                if throw_next_sibling.strip() == "Right":
                    return "RHP"
                elif throw_next_sibling.strip() == "Left":
                    return "LHP"
                else:
                    return "P"
            else:
                return "P"
        return "P"
    else:
        return "UNK"
    return None

def get_player_jaws_position(player_page):
    hof_div = player_page.find("div", {"id" : "div_hof_other"})
    if not hof_div:
        comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_table = temp_soup.find("div", {"id" : "div_hof_other"})
            if temp_table:
                hof_div = temp_table
                break
    if hof_div:
        hof_table = hof_div.find("table")
        if hof_table:
            jaws_row = hof_table.find("a", text="JAWS")
            if jaws_row:
                jaws_parent = jaws_row.find_parent("tr")
                if jaws_parent:
                    next_row = jaws_parent.find_next_sibling("tr")
                    if next_row:
                        player_pos_link = next_row.find("a")
                        if player_pos_link:
                            return re.split(r"\_|\.", player_pos_link["href"])[1].upper()

def get_player_name(player_page):
    player_info = player_page.find("div", {"id" : "meta"})
    player_name_el = player_info.find("h1")
    return str(player_name_el.text).strip()

def get_last_updated(player_page):
    social_info = player_page.find("div", {"id" : "social"})
    site_last_updated_el = social_info.find("strong", text="Site Last Updated:")
    date = dateutil.parser.parse(site_last_updated_el.parent.contents[1])
    localtz = timezone("US/Eastern")
    return localtz.localize(date)

def get_valid_years(player_page, player_type):
    total_valid_years = set()
    reg_valid_years = set()
    game_valid_years = set()
    total_game_valid_years = set()
    pitch_valid_years = set()
    catch_valid_years = set()
    valid_teams_key = {}
    valid_teams_raw_key = {}
    valid_year_teams = {}

    table_names = ["batting_standard", "pitching_standard", "standard_fielding", "batting_postseason", "pitching_postseason"]
    comments = None
    for table_name in table_names:
        table = player_page.find("table", id=table_name)

        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                row_id = row.get("id")
                match = False
                if row_id:
                    if table_name in ["standard_fielding", "advanced_fielding"]:
                        match = re.match(r"^\d+\:" + table_name + "$", row_id)
                    else:
                        match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True
                if match or (table_name.endswith("postseason") and not row.get("class")) and row.parent.name != "thead" and row.parent.name != "tfoot":
                    row_year = int(str(re.sub("[^0-9]", "", row.find("th").find(text=True))))
                    total_valid_years.add(row_year)
                    if not table_name.endswith("_postseason"):
                        reg_valid_years.add(row_year)
                    if table_name == "pitching_standard":
                        pitch_valid_years.add(row_year)
                    elif table_name == "standard_fielding":
                        if row.find("td", {"data-stat" : "pos"}) and str(row.find("td", {"data-stat" : "pos"}).find(text=True)) == "C":
                            catch_valid_years.add(row_year)

                    row_team = row.find("td", {"data-stat" : "team_ID"}).find("a")
                    if row_team:
                        row_abbr = str(row_team.find(text=True)).upper()
                        if row_abbr not in valid_teams_key:
                            valid_teams_key[row_abbr] = set()
                        valid_teams_key[row_abbr].add(row_year)

                        if row.find("td", {"data-stat" : "G"}) and row.find("td", {"data-stat" : "G"}).find(text=True) and int(row.find("td", {"data-stat" : "G"}).find(text=True)):
                            if row_abbr not in valid_teams_raw_key:
                                valid_teams_raw_key[row_abbr] = set()
                            valid_teams_raw_key[row_abbr].add(row_year)

                        if not row_year in valid_year_teams:
                            valid_year_teams[row_year] = []
                        if not row_abbr in valid_year_teams[row_year]:
                            valid_year_teams[row_year].append(row_abbr)

        bottom_nav_container = player_page.find("div", id="bottom_nav_container")
        if bottom_nav_container:
            element_name = "Batting Game Logs" if player_type["da_type"] == "Batter" else "Pitching Game Logs"
            bottom_nav_element = bottom_nav_container.find("p", text=element_name)
            if bottom_nav_element:
                bottom_nav_sibling = bottom_nav_element.find_next_sibling()
                if bottom_nav_sibling:
                    year_elements = bottom_nav_element.find_next_sibling().find_all("a")
                    for year_element in year_elements:
                        row_year = str(year_element.find(text=True))
                        if row_year != "Postseason":
                            row_year = int(row_year)
                            total_game_valid_years.add(row_year)
                            game_valid_years.add(row_year)
            
            element_name = "Batting Game Logs" if player_type["da_type"] != "Batter" else "Pitching Game Logs"
            bottom_nav_element = bottom_nav_container.find("p", text=element_name)
            if bottom_nav_element:
                bottom_nav_sibling = bottom_nav_element.find_next_sibling()
                if bottom_nav_sibling:
                    year_elements = bottom_nav_element.find_next_sibling().find_all("a")
                    for year_element in year_elements:
                        row_year = str(year_element.find(text=True))
                        if row_year != "Postseason":
                            row_year = int(row_year)
                            total_game_valid_years.add(row_year)
    
    total_valid_years = list(total_valid_years)
    reg_valid_years = list(reg_valid_years)
    game_valid_years = list(game_valid_years)
    total_game_valid_years = list(total_game_valid_years)
    pitch_valid_years = list(pitch_valid_years)
    catch_valid_years = list(catch_valid_years)

    total_valid_years.sort()
    reg_valid_years.sort()
    game_valid_years.sort()
    total_game_valid_years.sort()
    pitch_valid_years.sort()
    catch_valid_years.sort()

    return total_valid_years, reg_valid_years, game_valid_years, total_game_valid_years, pitch_valid_years, catch_valid_years, valid_teams_key, valid_teams_raw_key, valid_year_teams

def add_valid_playoff_years(valid_years, playoff_data, time_frame):
    if time_frame["playoffs"] == "Only":
        valid_years = []
        
    for data in playoff_data:
        year = data["Year"]
        if not year in valid_years:
            valid_years.append(year)
    return sorted(valid_years)

def determine_rookie_years(player_page, player_type, rookie_quals):
    rookie_years = []
    player_info = player_page.find("div", {"id" : "meta"})
    rookie_status_link = player_info.find("a", text="Rookie Status:")
    rookie_status_info = str(rookie_status_link.parent.parent.contents[2]).strip().split()
    if rookie_status_info[0] == "Exceeded":
        rookie_year = int(rookie_status_info[4])
    else:
        rookie_year = None

    table_names = ["batting_standard", "pitching_standard"]
    for table_name in table_names:
        table = player_page.find("table", id=table_name)

        comments = None
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True
                if match:
                    row_year = int(str(row.find("th").find(text=True)))
                    if row_year not in rookie_years:
                        if rookie_year == None or row_year <= rookie_year:
                            rookie_years.append(row_year)
    
    for qual_obj in rookie_quals:
        qual_obj["values"] = rookie_years

def get_player_birthday(player_page):
    birthday_span = player_page.find("span", {"id" : "necro-birth"})
    if birthday_span:
        return dateutil.parser.parse(birthday_span["data-birth"]).date()
    else:
        born_span = player_page.find("strong", text="Born:")
        if not born_span:
            born_span = player_page.find("strong", text="Born")
        if born_span:
            born_sibling = born_span.find_next_sibling()
            if born_sibling and born_sibling["id"] == "necro-birth":
                return dateutil.parser.parse(born_sibling["data-birth"]).date()
    return None

def get_player_deathday(player_page):
    birthday_span = player_page.find("span", {"id" : "necro-death"})
    if birthday_span:
        return dateutil.parser.parse(birthday_span["data-death"]).date()
    else:
        born_span = player_page.find("strong", text="Died:")
        if not born_span:
            born_span = player_page.find("strong", text="Died")
        if born_span:
            born_sibling = born_span.find_next_sibling()
            if born_sibling and born_sibling["id"] == "necro-death":
                return dateutil.parser.parse(born_sibling["data-death"]).date()
    return None

def get_player_is_active(player_id, player_page):       
    return bool(player_page.find("div", {"id" : "meta"}).find("strong", text="Team:"))

def get_player_image(player_page):
    image_info = player_page.find("div", {"id" : "meta"}).find("div", {"class" : "media-item"})
    if image_info:
        return image_info.find("img")["src"]
    else:
        return None

def get_player_country(player_page):
    birthday_span = player_page.find("span", {"id" : "necro-birth"})
    if birthday_span:
        player_country = birthday_span.parent.find_all("span")[-1]
        if player_country:
            classes = player_country.get("class")
            if classes and len(classes) == 2:
                flag_class = classes[1]
                if flag_class.startswith("f-"):
                    stylesheet = player_page.find("link", {"rel" : "stylesheet"})
                    if stylesheet:
                        link = stylesheet.get("href")
                        if link:
                            return {
                                "link" : link,
                                "flag_class" : flag_class 
                            }
    return None

def get_player_current_team_number(player_id, player_page):
    team = None
    number = None
    numbers_map = []
    numbers_team_map = {}
    numbers_year_map = {}
    comments = None

    table_names = ["batting_standard", "pitching_standard", "standard_fielding", "batting_postseason", "pitching_postseason"]
    valid_teams = {}
    for table_name in table_names:
        table = player_page.find("table", id=table_name)

        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find_all("tr")
            for row in standard_table_rows:
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True
                if match or (table_name.endswith("postseason") and not row.get("class")) and row.parent.name != "thead" and row.parent.name != "tfoot":
                    row_team = row.find("td", {"data-stat" : "team_ID"}).find("a")
                    row_year = int(str(row.find("th").find(text=True)).strip()[:4])
                    if row_year not in numbers_year_map:
                        numbers_year_map[row_year] = set()
                    if row_team:
                        row_team_str = row_team["title"]
                        numbers_year_map[row_year].add(row.find("td", {"data-stat" : "team_ID"}).find(text=True))
                        if row_team_str not in valid_teams:
                            valid_teams[row_team_str] = {"years" : set(), "order" : len(valid_teams)}
                        valid_teams[row_team_str]["years"].add(row_year)
                        numbers_team_map[row_team_str] = str(row_team.find(text=True))

    team_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Team:")
    number_info = player_page.find("div", {"class" : "uni_holder"})

    if team_info:
        team = str(team_info.find_next_sibling().find(text=True))
    elif valid_teams:
        team =  sorted(valid_teams, key=lambda team: (len(valid_teams[team]["years"]), valid_teams[team]["order"]), reverse=True)[0]

    if number_info:
        pot_numbers = list(reversed(number_info.find_all("a")))
        if pot_numbers:
            if team_info:
                number = re.sub("[^0-9\/]", "", str(pot_numbers[0].text))
            else:
                current_max_years = -1
                for pot_number in pot_numbers:
                    pot_number_text = pot_number["data-tip"]
                    if team:
                        pot_numbers_split = pot_number_text.split("/")
                        has_match = False
                        for pot_number_val in pot_numbers_split:
                            if pot_number_val.endswith(team):
                                has_match = True
                        if not has_match:
                            continue
                    pot_number_text = pot_number_text.split(" ", 1)[0]
                    pot_number_text_split = pot_number_text.split("-", 1)
                    year_count = 1
                    if len(pot_number_text_split) == 2:
                        year_count = int(pot_number_text_split[1]) - int(pot_number_text_split[0])
                    if year_count >= current_max_years:
                        number = re.sub("[^0-9\/]", "", str(pot_number.text))
                        current_max_years = year_count
            
            for pot_number in pot_numbers:
                pot_number_text = pot_number["data-tip"]
                teams = pot_number_text.split(" ", 1)[1]
                parsed_teams = []
                if teams in numbers_team_map:
                    parsed_teams.append(numbers_team_map[teams])
                else:
                    teams = teams.split("/")
                    for sub_team in teams:
                        if sub_team in numbers_team_map:
                            parsed_teams.append(numbers_team_map[sub_team])
                pot_number_text = pot_number_text.split(" ", 1)[0]
                pot_number_text_split = pot_number_text.split("-", 1)
                start_year =  int(pot_number_text_split[0])
                if len(pot_number_text_split) == 2:
                    end_year = int(pot_number_text_split[1])
                else:
                    end_year = start_year
                if pot_number.text and str(pot_number.text).strip():
                    sub_number = int(re.sub("[^0-9\/]", "", str(pot_number.text)).strip())
                    numbers_map.append({
                        "start_year" : start_year,
                        "end_year" : end_year,
                        "number" : sub_number,
                        "teams" : parsed_teams
                    })

    if not numbers_team_map or not numbers_year_map:
        team_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Team:")
        draft_info = player_page.find("div", {"id" : "meta"}).find("strong", text="Draft")
        team_els = []
        if team_info:
            team_els.append(team_info.find_next_sibling())
        for team_el_to_use in  team_els:
            pot_url = urlparse(team_el_to_use.get("href"))
            args = parse_qs(pot_url.query)
            row_team_str = str(team_el_to_use.get("href").split("/")[2].upper())
            if current_season not in numbers_year_map:
                numbers_year_map[current_season] = set()
            numbers_year_map[current_season].add(row_team_str)
            team_name_str = str(team_el_to_use.find(text=True))
            numbers_team_map[team_name_str] = row_team_str
            if not numbers_map and not team:
                team = team_name_str

        if draft_info:
            for pot_link in reversed(draft_info.parent.find_all("a")):
                pot_url = urlparse(pot_link.get("href"))
                args = parse_qs(pot_url.query)
                if "team_ID" in args and args["team_ID"]:
                    if not numbers_map and not team:
                        team = str(pot_link.find(text=True))
    
    if not player_id[len(player_id) - 1].isdigit():
        numbers_team_map = {}
        numbers_year_map = {}
        if team_info:
            team_abbr = team_info.find_next_sibling()["href"].split("/")[2].upper()
            numbers_team_map[team] = team_abbr
            numbers_year_map[current_season] = set()
            numbers_year_map[current_season].add(team_abbr)

    return team, number, numbers_map, {v: k for k, v in numbers_team_map.items()}, numbers_year_map

def get_player_hof(player_page):
    hof_info = player_page.find("ul", id="bling")
    if hof_info and hof_info.find("li", {"data-tip" : "Hall of Fame"}):
        return True
    else:
        return False

def get_mlb_player_link(player_data, s):
    if player_data["id"] in manual_id_maps:
        return "/api/v1/people/" +  str(manual_id_maps[player_data["id"]])
        
    for sub_year in player_data["numbers_year_map"]:
        year_str = str(sub_year)
        for team in player_data["numbers_year_map"][sub_year]:
            if team not in player_data["player_team_map"]:
                continue
            team_name = player_data["player_team_map"][team]

            sleague = get_team_league(team, sub_year)

            if team_name in get_team_ids.manual_mappings:
                og_team_name = team_name
                team_name = get_team_ids.manual_mappings[team_name]
                if isinstance(team_name, dict):
                    if sleague in team_name:
                        team_name = team_name[sleague]
                    else:
                        team_name = og_team_name

            if team_name == "Washington Senators":
                if sleague == "AL":
                    if sub_year < 1961:
                        team_name = "Washington Senators (1901)"
                elif sleague == "NL":
                    if sub_year < 1891:
                        team_name = "Washington Senators (1886)"
            elif team_name == "Baltimore Orioles":
                if sleague == "AA":
                    if sub_year < 1890:
                        team_name = "Baltimore Orioles (1882)"
                elif sleague == "AL":
                    if sub_year < 1903:
                        team_name = "Baltimore Orioles (1901)"
            elif team_name == "Cincinnati Reds":
                if sleague == "NL":
                    if sub_year < 1882:
                        team_name = "Cincinnati Reds (1876)"
            elif team_name == "Columbus Colts":
                if sleague == "AA":
                    if sub_year < 1889:
                        team_name = "Columbus Colts (1883)"
            elif team_name == "Milwaukee Brewers":
                if sleague == "AL":
                    if sub_year < 1968:
                        team_name = "Milwaukee Brewers (1901)"
            elif team_name == "Washington Nationals":
                if sleague == "NL":
                    if sub_year < 1890:
                        team_name = "Washington Senators (1886)"
            elif team_name == "Cleveland Blues":
                if sleague == "NL":
                    if sub_year < 1880:
                        team_name = "Cleveland Spiders (1879)"

            if sleague not in team_ids or team_name not in team_ids[sleague]:
                continue

            team_id = team_ids[sleague][team_name]

            if sub_year == current_season:
                try:
                    da_dates = []

                    scheudle_url = mlb_team_schedule_url_format.format(team_id, sub_year)
                    data = url_request_json(s, scheudle_url)

                    for game in data["dates"]:
                        da_dates.append(game)

                    # for month_int in range(1, (datetime.datetime.now().month + 1)):
                    #     min_date = datetime.date(sub_year, month_int, 1)
                    #     max_date = datetime.date(sub_year, month_int, calendar.monthrange(sub_year, month_int)[1])

                    #     scheudle_url = mlb_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date)))
                    #     data = url_request_json(s, scheudle_url)

                    #     for game in data["dates"]:
                    #         da_dates.append(game)

                    add_missing_schedule_games(team_id, sub_year, da_dates, s)

                    matching_players = []
                    parsed_people = set()
                    for sub_game in da_dates:
                        for game in sub_game["games"]:
                            game_type = game["gameType"]
                            if game_type != "R" and game_type != "F" and game_type != "D" and game_type != "L" and game_type != "W":
                                continue

                            if str(game["season"]) == year_str:
                                game_link = game["link"]
                                sub_data = url_request_json(s, "https://statsapi.mlb.com" + game_link)

                                is_home = sub_data["gameData"]["teams"]["home"]["id"] == team_id
                                team_str = "home" if is_home else "away"

                                for person_str in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
                                    person = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][person_str]
                                    if person["person"]["id"] not in parsed_people:
                                        parsed_people.add(person["person"]["id"])
                                        if "birthDate" not in sub_data["gameData"]["players"][person_str]:
                                            continue
                                        if dateutil.parser.parse(sub_data["gameData"]["players"][person_str]["birthDate"]).date() == player_data["Birthday"]:
                                            matching_players.append(sub_data["gameData"]["players"][person_str])
                    
                    if len(matching_players) == 1:
                        logger.info("#" + str(threading.get_ident()) + "#   " + "Found MLB Player " + matching_players[0]["fullName"] + " (" + str(matching_players[0]["id"]) + ") by birthdate")
                        return matching_players[0]["link"]
                except urllib.error.HTTPError:
                    raise
            else:
                try:
                    data = url_request_json(s, team_roster_url_format.format(team_id, year_str))
                except urllib.error.HTTPError:
                    raise

                if "roster" not in data:
                    continue

                matching_players = []
                for index, person in enumerate(data["roster"]):
                    if "birthDate" not in person["person"]:
                        continue
                    if dateutil.parser.parse(person["person"]["birthDate"]).date() == player_data["Birthday"]:
                        matching_players.append(person)
                
                if len(matching_players) == 1:
                    logger.info("#" + str(threading.get_ident()) + "#   " + "Found MLB Player " + matching_players[0]["person"]["fullName"] + " (" + str(matching_players[0]["person"]["id"]) + ") by birthdate")
                    return matching_players[0]["person"]["link"]
    
    for sub_year in player_data["numbers_year_map"]:
        year_str = str(sub_year)
        for team in player_data["numbers_year_map"][sub_year]:
            if team not in player_data["player_team_map"]:
                continue
            team_name = player_data["player_team_map"][team]
            sleague = get_team_league(team, sub_year)

            if team_name in get_team_ids.manual_mappings:
                og_team_name = team_name
                team_name = get_team_ids.manual_mappings[team_name]
                if isinstance(team_name, dict):
                    if sleague in team_name:
                        team_name = team_name[sleague]
                    else:
                        team_name = og_team_name

            if team_name == "Washington Senators":
                if sleague == "AL":
                    if sub_year < 1961:
                        team_name = "Washington Senators (1901)"
                elif sleague == "NL":
                    if sub_year < 1891:
                        team_name = "Washington Senators (1886)"
            elif team_name == "Baltimore Orioles":
                if sleague == "AA":
                    if sub_year < 1890:
                        team_name = "Baltimore Orioles (1882)"
                elif sleague == "AL":
                    if sub_year < 1903:
                        team_name = "Baltimore Orioles (1901)"
            elif team_name == "Cincinnati Reds":
                if sleague == "NL":
                    if sub_year < 1882:
                        team_name = "Cincinnati Reds (1876)"
            elif team_name == "Columbus Colts":
                if sleague == "AA":
                    if sub_year < 1889:
                        team_name = "Columbus Colts (1883)"
            elif team_name == "Milwaukee Brewers":
                if sleague == "AL":
                    if sub_year < 1968:
                        team_name = "Milwaukee Brewers (1901)"
            elif team_name == "Washington Nationals":
                if sleague == "NL":
                    if sub_year < 1890:
                        team_name = "Washington Senators (1886)"
            elif team_name == "Cleveland Blues":
                if sleague == "NL":
                    if sub_year < 1880:
                        team_name = "Cleveland Spiders (1879)"

            if sleague not in team_ids or team_name not in team_ids[sleague]:
                continue

            team_id = team_ids[sleague][team_name]

            if sub_year == current_season:
                try:
                    da_dates = []

                    scheudle_url = mlb_team_schedule_url_format.format(team_id, sub_year)
                    data = url_request_json(s, scheudle_url)

                    for game in data["dates"]:
                        da_dates.append(game)

                    # for month_int in range(1, (datetime.datetime.now().month + 1)):
                    #     min_date = datetime.date(sub_year, month_int, 1)
                    #     max_date = datetime.date(sub_year, month_int, calendar.monthrange(sub_year, month_int)[1])

                    #     scheudle_url = mlb_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date)))
                    #     data = url_request_json(s, scheudle_url)

                    #     for game in data["dates"]:
                    #         da_dates.append(game)

                    add_missing_schedule_games(team_id, sub_year, da_dates, s)

                    matching_players = []
                    parsed_people = set()
                    for sub_game in da_dates:
                        for game in sub_game["games"]:
                            game_type = game["gameType"]
                            if game_type != "R" and game_type != "F" and game_type != "D" and game_type != "L" and game_type != "W":
                                continue

                            if str(game["season"]) == year_str:
                                game_link = game["link"]
                                sub_data = url_request_json(s, "https://statsapi.mlb.com" + game_link)

                                is_home = sub_data["gameData"]["teams"]["home"]["id"] == team_id
                                team_str = "home" if is_home else "away"

                                for person_str in sub_data["liveData"]["boxscore"]["teams"][team_str]["players"]:
                                    person = sub_data["liveData"]["boxscore"]["teams"][team_str]["players"][person_str]
                                    if person["person"]["id"] not in parsed_people:
                                        parsed_people.add(person["person"]["id"])
                                        if "birthDate" not in sub_data["gameData"]["players"][person_str]:
                                            continue
                                        if dateutil.parser.parse(sub_data["gameData"]["players"][person_str]["birthDate"]).date() == player_data["Birthday"]:
                                            person = sub_data["gameData"]["players"][person_str]
                                            is_position_match = person["primaryPosition"]["abbreviation"] == player_data["player_position"]
                                    
                                            is_exact_match = False
                                            is_first_last_match = False
                                            is_last_match = False

                                            player_name = person["fullName"]
                                            if player_name == player_data["Player"]:
                                                is_exact_match = True
                                            else:
                                                is_exact_match = False
                                                parsed_name = create_human_name(player_name)
                                                real_human_name = create_human_name(player_data["Player"])

                                                if parsed_name.first == real_human_name.first and parsed_name.last == real_human_name.last:
                                                    is_first_last_match = True
                                                if parsed_name.last == real_human_name.last:
                                                    is_last_match = True
                                            
                                            matching_players.append({
                                                "is_exact_match" : is_exact_match,
                                                "is_first_last_match" : is_first_last_match,
                                                "is_last_match" : is_last_match,
                                                "is_position_match" : is_position_match,
                                                "person" : person
                                            })
                                    
                    if matching_players:
                        matching_players.sort(key=lambda player: (-player["is_exact_match"], -player["is_first_last_match"], -player["is_last_match"], -player["is_position_match"]))
                        player = matching_players[0]        
                        if player["is_exact_match"] or player["is_first_last_match"] or player["is_last_match"]:
                            if len(matching_players) > 1:
                                second_player = matching_players[1]
                                if second_player["is_exact_match"] == player["is_exact_match"] and second_player["is_first_last_match"] and second_player["is_last_match"] == player["is_first_last_match"] and second_player["is_position_match"] == player["is_position_match"]:
                                    continue

                            logger.info("#" + str(threading.get_ident()) + "#   " + "Found MLB Player " + player["person"]["fullName"] + " (" + str(player["person"]["id"]) + ") by name")
                            return player["person"]["link"]
                except urllib.error.HTTPError:
                    raise
            else:
                try:
                    data = url_request_json(s, team_roster_url_format.format(team_id, year_str))
                except urllib.error.HTTPError:
                    raise

                if "roster" not in data:
                    continue

                matching_players = []
                for index, person in enumerate(data["roster"]):
                    if "birthDate" not in person["person"]:
                        continue
                    if dateutil.parser.parse(person["person"]["birthDate"]).date() == player_data["Birthday"]:
                        is_position_match = person["position"]["code"] == player_data["player_position"]
                        
                        is_exact_match = False
                        is_first_last_match = False
                        is_last_match = False

                        player_name = person["person"]["fullName"]
                        if player_name == player_data["Player"]:
                            is_exact_match = True
                        else:
                            is_exact_match = False
                            parsed_name = create_human_name(player_name)
                            real_human_name = create_human_name(player_data["Player"])

                            if parsed_name.first == real_human_name.first and parsed_name.last == real_human_name.last:
                                is_first_last_match = True
                            if parsed_name.last == real_human_name.last:
                                is_last_match = True
                        
                        matching_players.append({
                            "is_exact_match" : is_exact_match,
                            "is_first_last_match" : is_first_last_match,
                            "is_last_match" : is_last_match,
                            "is_position_match" : is_position_match,
                            "index" : index
                        })
                        
                if matching_players:
                    matching_players.sort(key=lambda player: (-player["is_exact_match"], -player["is_first_last_match"], -player["is_last_match"], -player["is_position_match"]))
                    player = matching_players[0]        
                    if player["is_exact_match"] or player["is_first_last_match"] or player["is_last_match"]:
                        if len(matching_players) > 1:
                            second_player = matching_players[1]
                            if second_player["is_exact_match"] == player["is_exact_match"] and second_player["is_first_last_match"] and second_player["is_last_match"] == player["is_first_last_match"] and second_player["is_position_match"] == player["is_position_match"]:
                                continue

                        player = data["roster"][player["index"]]
                        logger.info("#" + str(threading.get_ident()) + "#   " + "Found MLB Player " + player["person"]["fullName"] + " (" + str(player["person"]["id"]) + ") by name")
                        return player["person"]["link"]

def parse_table(player_data, time_frame, year, player_type):
    table_names = None
    player_url = None
    
    is_playoffs = not time_frame
    
    if is_playoffs:
        format_str = "b"
        table_names = ["batting_gamelogs_post"]
        if player_type["da_type"] != "Batter":
            table_names = ["pitching_gamelogs_post"]
            format_str = "p"
        player_url = playoffs_url_format.format(player_data["id"], format_str)
    elif not year:
        format_str = "bat"
        table_names = ["batting_standard", "batting_win_probability"]
        if player_type["da_type"] != "Batter":
            table_names = ["pitching_standard", "pitching_starter", "pitching_reliever", "pitching_batting", "pitching_pitches", "pitching_basesituation", "pitching_win_probability"]
            format_str = "pitch"
        player_url = advanced_page_url_format.format(player_data["id"][0], player_data["id"], format_str)
    else:
        format_str = "b"
        table_names = ["batting_gamelogs"]
        if player_type["da_type"] != "Batter":
            table_names = ["pitching_gamelogs"]
            format_str = "p"
        player_url = game_splits_url_format.format(player_data["id"], format_str, year)

    request = urllib.request.Request(player_url, headers=request_headers)
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return []
        else:
            raise

    comments = None

    previous_headers = set()

    game_counter = 0
    prev_year = None

    all_rows = []
    for table_index, table_name in enumerate(table_names):
        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            if table_name == "pitching_basesituation":
                header_columns = table.find("thead").find_all("tr")[1].find_all("th")
            else:
                header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))

            standard_table_rows = table.find_all("tr")

            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                row_id = row.get("id")
                match = False
                if row_id:
                    match = re.match(r"^" + table_name + r"\.\d+$", row_id)
                elif not (year or is_playoffs) and row.get("class") and "partial_table" in row.get("class") and not "spacer" in row.get("class"):
                    match = True

                if match:
                    row_data = parse_row(row, time_frame, year, is_playoffs, player_type, header_values, previous_headers, table_index, table_name)
                    
                    if not row_data:
                        continue

                    if row_data["Tm"] != "TOT":
                        all_rows.append(row_data)

            previous_headers.update(header_values)
    return all_rows

def handle_missing_game_data(all_rows, player_data, player_type, time_frame, valid_years):
    years_to_use = valid_years
    if time_frame["time_start"] or time_frame["time_end"]:
        years_to_use = [valid_year for valid_year in valid_years if time_frame["time_start"] <= valid_year <= time_frame["time_end"]]

    for year in years_to_use:
        year_rows = parse_table(player_data, time_frame, year, player_type)
        for year_row in year_rows:
            for row_data in all_rows:
                if row_data["Year"] == year_row["Year"] and row_data["Tm"] == year_row["Tm"] and not row_data["is_playoffs"]:
                    if year_row["Start"]:
                        if "IPStart" not in row_data:
                            row_data["IPStart"] = 0
                        if "PitStart" not in row_data:
                            row_data["PitStart"] = 0
                        if "GSc" not in row_data:
                            row_data["GSc"] = 0
                        row_data["IPStart"] += year_row.get("IP", 0)
                        row_data["PitStart"] += year_row.get("Pit", 0)
                        row_data["GSc"] += year_row.get("GSc", 0)
                        
                    if year_row.get("Pit", 0):
                        if "GamesPit" not in row_data:
                            row_data["GamesPit"] = 0
                        row_data["GamesPit"] += 1
                        if year_row["Start"]:
                            if "StartsPit" not in row_data:
                                row_data["StartsPit"] = 0
                            row_data["StartsPit"] += 1
                    break

def fix_prob_data(all_rows, player_data, player_type, all_teams_unique):
    season_ranges = {
        True : [],
        False : []
    }

    for row_data in all_rows:
        if "MLBLiveGame" in row_data and row_data["MLBLiveGame"]:
            continue

        if row_data["is_playoffs"] or "RawCrGm" in row_data or all_teams_unique:
            row_data["WPA"] = 0
            row_data["cWPA"] = 0
            row_data["RE24"] = 0
    
    max_reg_year = 0
    max_playoff_year = 0
    for row_data in all_rows:
        if "MLBLiveGame" in row_data and row_data["MLBLiveGame"]:
            continue

        if row_data["is_playoffs"] or "RawCrGm" in row_data:
            season_ranges[row_data["is_playoffs"]].append(row_data["RawCrGm"])
            if row_data["is_playoffs"]:
                if row_data["Year"] > max_playoff_year:
                    max_playoff_year = row_data["Year"]
            else:
                if row_data["Year"] > max_reg_year:
                    max_reg_year = row_data["Year"]
        
    if season_ranges[True] and max_playoff_year >= 1901:
        handle_prob_data(player_type, season_ranges[True], player_data, all_rows, True)

    full_season_ranges = []
    if not season_ranges[False] and all_teams_unique:
        for row_data in all_rows:
            if "MLBLiveGame" in row_data and row_data["MLBLiveGame"]:
                continue

            if not row_data["is_playoffs"] and "RawCrGm" not in row_data:
                if row_data["Year"] not in full_season_ranges:
                    full_season_ranges.append(row_data["Year"])
                    if row_data["Year"] > max_reg_year:
                        max_reg_year = row_data["Year"]
    
    if max_reg_year >= 1916:
        if season_ranges[False]:
            handle_prob_data(player_type, season_ranges[False], player_data, all_rows, False)
        elif full_season_ranges:
            handle_season_prob_data(player_type, full_season_ranges, player_data, all_rows)
        
def handle_prob_data(player_type, all_season_ranges, player_data, all_rows, is_post):
    the_table_name = "batting_gamelogs" if player_type["da_type"] == "Batter" else "pitching_gamelogs"
    if is_post:
        the_table_name += "_post"

    all_season_ranges = sorted(all_season_ranges)
    
    is_consec = False
    if sorted(all_season_ranges) == list(range(min(all_season_ranges), max(all_season_ranges) + 1)):
        season_ranges_split = [all_season_ranges]
        is_consec = True
    else:
        season_ranges_split = calculate_even_chunks(all_season_ranges, 1000)
        
    for season_ranges in season_ranges_split:
        if len(season_ranges) > 1 and is_consec:
            stat_sum_range = str(season_ranges[0]) + "-" + str(season_ranges[len(season_ranges) - 1])
        else:
            stat_sum_range = ",".join([str(season_range) for season_range in season_ranges]) if len(season_ranges) > 1 else str(season_ranges[0]) + "-" + str(season_ranges[0])

        request = urllib.request.Request(sum_stats_format.format(player_data["id"], the_table_name, stat_sum_range), headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError:
            raise

        table_name = "span_stats"

        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            standard_table_rows = table.find("tbody").find_all("tr")
            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]
                for pot_row in all_rows:
                    if "MLBLiveGame" in pot_row and pot_row["MLBLiveGame"]:
                        continue
                    
                    if pot_row["Year"] >= (1901 if is_post else 1916) and pot_row["is_playoffs"] == is_post:
                        wpa_str = row.find("td", {"data-stat" : "wpa_" + ("bat" if player_type["da_type"] == "Batter" else "def")}).find(text=True)
                        if wpa_str:
                            if "WPA" not in pot_row:
                                pot_row["WPA"] = 0
                            pot_row["WPA"] += float(wpa_str)
                        cwpa_str = row.find("td", {"data-stat" : "cwpa_" + ("bat" if player_type["da_type"] == "Batter" else "def")}).find(text=True)
                        if cwpa_str:
                            if "cWPA" not in pot_row:
                                pot_row["cWPA"] = 0
                            pot_row["cWPA"] += float(cwpa_str[:-1]) / 100
                        re24_str = row.find("td", {"data-stat" : "re24_" + ("bat" if player_type["da_type"] == "Batter" else "def")}).find(text=True)
                        if re24_str:
                            if "RE24" not in pot_row:
                                pot_row["RE24"] = 0
                            pot_row["RE24"] += float(re24_str)
                        break

def handle_season_prob_data(player_type, all_season_ranges, player_data, all_rows):
    the_table_name = "batting_win_probability" if player_type["da_type"] == "Batter" else "pitching_win_probability"

    all_season_ranges = sorted(all_season_ranges)
    
    stat_sum_range = ",".join([str(season_range) for season_range in all_season_ranges]) if len(all_season_ranges) > 1 else str(all_season_ranges[0]) + "-" + str(all_season_ranges[0])

    request = urllib.request.Request(sum_stats_format.format(player_data["id"], the_table_name, stat_sum_range), headers=request_headers)
    try:
        response, player_page = url_request(request)
    except urllib.error.HTTPError:
        raise

    table_name = "span_stats"

    table = player_page.find("table", id=table_name)
    if not table:
        if not comments:
            comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
        for c in comments:
            temp_soup = BeautifulSoup(c, "lxml")
            temp_table = temp_soup.find("table", id=table_name)
            if temp_table:
                table = temp_table
                break

    if table:
        standard_table_rows = table.find("tbody").find_all("tr")
        for i in range(len(standard_table_rows)):
            row = standard_table_rows[i]
            for pot_row in all_rows:
                if pot_row["Year"] >= 1916 and pot_row["is_playoffs"] == False:
                    wpa_str = row.find("td", {"data-stat" : "wpa_" + ("bat" if player_type["da_type"] == "Batter" else "def")}).find(text=True)
                    if wpa_str:
                        if "WPA" not in pot_row:
                            pot_row["WPA"] = 0
                        pot_row["WPA"] += float(wpa_str)
                    cwpa_str = row.find("td", {"data-stat" : "cwpa_" + ("bat" if player_type["da_type"] == "Batter" else "def")}).find(text=True)
                    if cwpa_str:
                        if "cWPA" not in pot_row:
                            pot_row["cWPA"] = 0
                        pot_row["cWPA"] += float(cwpa_str[:-1]) / 100
                    re24_str = row.find("td", {"data-stat" : "re24_" + ("bat" if player_type["da_type"] == "Batter" else "def")}).find(text=True)
                    if re24_str:
                        if "RE24" not in pot_row:
                            pot_row["RE24"] = 0
                        pot_row["RE24"] += float(re24_str)
                    break
    
def parse_row(row, time_frame, year, is_playoffs, player_type, header_values, previous_headers, table_index, table_name):
    date = None
    date_time = None
    if not (year or is_playoffs):
        row_year = int(str(re.sub("[^0-9]", "", row.find("th").find(text=True))))
        date = row_year
        date_time = date
        if not time_frame["time_start"] and not time_frame["time_end"]:
            included_table = True
        else:
            included_table = row_year >= time_frame["time_start"] and row_year <= time_frame["time_end"]
    else:
        date_row = row.find("td", {"data-stat" : "date_game"})
        date_row_arr = date_row.get("csk").split(".")
        time_int = int(date_row_arr[1][-1])
        date_time = dateutil.parser.parse(date_row_arr[0]).replace(hour=time_int)
        date = date_time.date()
        if is_playoffs:
            included_table = True
        else:                            
            if isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int):
                included_table = date.year >= time_frame["time_start"] and date.year <= time_frame["time_end"]
            else:
                included_table = date >= time_frame["time_start"] and date <= time_frame["time_end"]

    if included_table:
        columns = row.find_all("td", recursive=False)
        is_start = False
        is_finished = False
        row_data = {}
        for index, column in enumerate(columns):
            real_index = index
            if year or is_playoffs:
                if index <= 4:
                    real_index += 1
            elif not year:
                real_index += 1
            header_value = header_values[real_index]

            if header_value == "Series" and is_playoffs:
                series_str = str(column.text)
                game_number_str = series_str.split("g")

                series = game_number_str[0].strip()[-2:].lower()
                row_data.update({"Round" : series})
                
                game_number = int(game_number_str[1])
                row_data.update({"RoundGame" : game_number})
                continue
            elif hasattr(column, "data-stat") and column["data-stat"] == "team_homeORaway":
                home = True
                text = column.find(text=True)
                if text:
                    text = str(text.strip())
                if not text or text == "@":
                    home = True
                    if text == "@":
                        home = False
                row_data.update({"Location" : home})
                continue
            elif hasattr(column, "data-stat") and column["data-stat"] == "opp_ID" and (year or is_playoffs):
                opponent = str(column.find("a").find(text=True)).lower()
                row_data.update({"Opponent" : opponent})
                continue

            if (year or is_playoffs):
                if hasattr(column, "data-stat") and column["data-stat"] == "player_game_result" and player_type["da_type"] != "Batter":
                    result = column.find(text=True)
                    if result:
                        result = str(result.strip())
                        result = result.split("(")[0].upper()
                        if result == "W":
                            row_data.update({"W" : 1})
                        elif result == "L":
                            row_data.update({"L" : 1})
                        elif result == "BW":
                            row_data.update({"BSv" : 1})
                            row_data.update({"W" : 1})
                        elif result == "BL":
                            row_data.update({"BSv" : 1})
                            row_data.update({"L" : 1})
                        elif result == "HL":
                            row_data.update({"Hold" : 1})
                            row_data.update({"L" : 1})
                        elif result == "S":
                            row_data.update({"SV" : 1})
                        elif result == "BS":
                            row_data.update({"BSv" : 1})
                        elif result == "H":
                            row_data.update({"Hold" : 1})
                    continue
                elif hasattr(column, "data-stat") and column["data-stat"] == "player_game_span":
                    result = column.find(text=True)
                    if result:
                        result = str(result).strip().upper()
                        if result.startswith("SHO"):
                            row_data.update({"SHO" : 1})
                            row_data.update({"CG" : 1})
                            is_start = True
                            is_finished = True
                        elif result.startswith("CG"):
                            row_data.update({"CG" : 1})
                            is_start = True
                            is_finished = True
                        elif result.startswith("GS"):
                            is_start = True
                        if "GF" in result:
                            is_finished = True
                    continue
                elif hasattr(column, "data-stat") and column["data-stat"] == "date_game":
                    result = column.find("a").get("href")
                    row_data.update({"GameLink" : result})
                    row_data.update({"GameID" : result})
                    continue
                elif hasattr(column, "data-stat") and column["data-stat"] == "game_result":
                    result_split = column.find(text=True)
                    if result_split:
                        result_split = str(result_split).strip().upper().split(",", 1)
                        result = result_split[0].strip()
                        if result.startswith("W"):
                            row_data.update({"Result" : "W"})
                        elif result.startswith("L"):
                            row_data.update({"Result" : "L"})
                        elif result.startswith("T"):
                            row_data.update({"Result" : "T"})
                        else:
                            row_data.update({"Result" : None})
                        if len(result_split) == 2:
                            scores = result_split[1].strip().split("-")
                            row_data.update({"Team Score" : int(scores[0])})
                            row_data.update({"Opponent Score" : int(scores[1])})
                        else:
                            row_data.update({"Team Score" : None})
                            row_data.update({"Opponent Score" : None})
                    else:
                        row_data.update({"Result" : None})
                        row_data.update({"Team Score" : None})
                        row_data.update({"Opponent Score" : None})
                    continue
                elif hasattr(column, "data-stat") and column["data-stat"] == "career_game_num":
                    if not is_playoffs:
                        row_data.update({"RawCrGm" : int(column.find(text=True))})
            
            if table_name == "standard_fielding":
                if header_value == "SB" or header_value == "CS":
                    header_value = "FldStolenBases" if header_value == "SB" else "FldCaughtStealing"
                elif header_value == "PO":
                    if hasattr(column, "data-stat") and column["data-stat"] == "PO":
                        header_value = "PutOut"
            
            if table_name == "pitching_value":
                if header_value == "WAA" or header_value == "WAR":
                    header_value += "Pitch"
            elif table_name == "batting_value":
                if header_value == "WAA" or header_value == "WAR":
                    header_value += "Pos"
            elif table_name == "appearances":
                if header_value == "G":
                    header_value = "PosG"
            
            if header_value in headers[player_type["da_type"]] and ((not header_value in formulas[player_type["da_type"]] and not header_value in advanced_stats["Batter"] and not header_value in advanced_stats["Pitcher"]) or header_value == "Rdrs/yr") and (not header_value in previous_headers or header_value == "Tm" or header_value == "Salary"):
                column_value = column.find(text=True)
                if column_value and column_value.strip():
                    column_value = str(column_value)
                    if header_value == "Salary":
                        column_value = float(column_value[1:].replace(",", ""))
                    elif header_value == "cWPA":
                        column_value = float(column_value[:-1]) / 100
                    else:
                        if header_value != "Tm" and header_value != "Entered" and header_value != "Exited" and header_value != "Pos":
                            column_value = float(column_value)
                            if header_value == "IP" or header_value == "Inn":
                                column_value_split = str(column_value).split(".")
                                column_value = float(column_value_split[0])
                                if column_value_split[1] == "1":
                                    column_value += 1/3
                                elif column_value_split[1] == "2":
                                    column_value += 2/3
                    row_data.update({header_value : column_value})

                    if is_start and (header_value == "IP" or header_value == "Pit"):
                        row_data.update({header_value + "Start" : column_value})

                        if header_value == "Pit" and column_value:
                            row_data["GamesPit"] = 1
                            if is_start:
                                row_data["StartsPit"] = 1

        row_data["Start"] = is_start
        row_data["Finished"] = is_finished
        row_data["Date"] = date
        row_data["DateTime"] = date_time
        row_data["Year"] = date if isinstance(date, int) else date.year
        row_data["Month"] = None if isinstance(date, int) else date.month
        row_data["Day"] = None if isinstance(date, int) else date.day
        row_data["YearDay"] = None if isinstance(date, int) else date.timetuple().tm_yday
        if not isinstance(date, int):
            next_date = date - dateutil.relativedelta.relativedelta(weeks=1)
            weekday_in_month = 1
            while next_date.month == date.month:
                weekday_in_month += 1
                next_date -= dateutil.relativedelta.relativedelta(weeks=1)
            row_data["WeekDayInMonth"] = weekday_in_month
        row_data["CalendarYear"] = None if isinstance(date, int) else date.year
                
        row_data["is_playoffs"] = is_playoffs

        if is_playoffs:
            row_data["RawCrGm"] = int(row.find("th", {"data-stat" : "ranker"}).find(text=True))

        if "Tm" in row_data and row_data["Tm"] != "TOT" and not "," in row_data["Tm"]:
            row_data["TmLg"] = get_team_league(row_data["Tm"], row_data["Year"])
        if "Opponent" in row_data:
            row_data["OppLg"] = get_team_league(row_data["Opponent"].upper(), row_data["Year"])

        if table_index == 0:
            if year or is_playoffs:
                row_data.update({"G" : 1})
                if player_type["da_type"] != "Batter" and row_data["Start"]:
                    row_data.update({"GS" : 1})
                    if "R" in row_data and not "ER" in row_data:
                        row_data["ER"] = row_data["R"]
                    if row_data["IP"] >= 6 and row_data["ER"] <= 3:
                        row_data.update({"QS" : 1})

        calculate_sum_stats(player_type, row_data)
    
        return row_data

def calculate_sum_stats(player_type, row_data):
    if player_type["da_type"] == "Batter":
        row_data["1B"] = row_data.get("H", 0) - (row_data.get("2B", 0) + row_data.get("3B", 0) + row_data.get("HR", 0))
        row_data["TB"] = row_data["1B"] + 2 * row_data.get("2B", 0) + 3 * row_data.get("3B", 0) + 4 * row_data.get("HR", 0)
        row_data["XBH"] = row_data.get("2B", 0) + row_data.get("3B", 0) + row_data.get("HR", 0)
        row_data["NS"] = row_data.get("SB", 0) - row_data.get("CS", 0)
        row_data["TOB"] = row_data.get("H", 0) + row_data.get("BB", 0) + row_data.get("HBP", 0)
    else:
        row_data["1B"] = row_data.get("H", 0) - (row_data.get("2B", 0) + row_data.get("3B", 0) + row_data.get("HR", 0))
        row_data["TB"] = row_data["1B"] + 2 * row_data.get("2B", 0) + 3 * row_data.get("3B", 0) + 4 * row_data.get("HR", 0)
        row_data["XBH"] = row_data.get("2B", 0) + row_data.get("3B", 0) + row_data.get("HR", 0)
        if row_data.get("GS", 0) and not row_data.get("W", 0) and not row_data.get("L", 0) and not ("InProgress" in row_data and row_data["InProgress"]):
            row_data["ND"] = 1
        row_data["NS"] = row_data.get("SB", 0) - row_data.get("CS", 0)
        row_data["TOB"] = row_data.get("H", 0) + row_data.get("BB", 0) + row_data.get("HBP", 0)
        row_data["InPly"] = row_data.get("GB", 0) + row_data.get("FB", 0) + row_data.get("LD", 0) + row_data.get("PU", 0) + row_data.get("Unk", 0)

def handle_playoffs_data(all_rows, player_data, player_type, playoff_data, time_frame):
    data_to_include = []
    
    is_qual_match = False
    for qualifier in time_frame["qualifiers"]:
        if qualifier != "Team" and qualifier != "Team Franchise" and qualifier != "Team League" and qualifier != "Team Division" and qualifier != "Rookie" and qualifier != "Max Stat" and qualifier != "Min Stat" and qualifier != "Max Streak" and qualifier != "Max Stretch" and qualifier != "Count Streak" and qualifier != "Quickest"  and qualifier != "Slowest" and qualifier != "Season Stat" and qualifier != "Season Age" and qualifier != "Season" and qualifier != "Season Reversed" and qualifier != "Season Index" and qualifier != "Season Index Reversed" and qualifier != "Previous Season Stat"  and qualifier != "Upcoming Season Stat" and qualifier != "Season Sub Query" and qualifier != "Or Season Sub Query" and qualifier != "Season Before Sub Query" and qualifier != "Season After Sub Query" and qualifier !=  "Winning Team" and qualifier !=  "Losing Team" and qualifier !=  "Tied Team" and qualifier !=  "Winning Or Tied Team" and qualifier !=  "Losing Or Tied Team" and qualifier != "Playoff Team" and qualifier != "WS Winner Team" and qualifier != "Pennant Winner Team" and qualifier != "Division Winner Team" and qualifier != "Team Win Percentage" and qualifier != "Team Games Over 500" and qualifier != "Team Wins" and qualifier != "Team Losses" and qualifier != "Team Runs Rank" and qualifier != "Team Runs Allowed Rank" and qualifier != "Team wRC+ Rank" and qualifier != "Team AVG Rank" and qualifier != "Team SLG Rank" and qualifier != "Team OBP Rank" and qualifier != "Team OPS Rank" and qualifier != "Team ERA- Rank" and qualifier != "Team ERA Rank" and qualifier != "Season Formula" and qualifier != "Season Number" and qualifier != "Even Year" and qualifier != "Odd Year" and qualifier != "Year" and qualifier != "Primary Season Position" and qualifier != "Season Position" and qualifier != "Team City" and qualifier != "Team Exact City" and qualifier != "Team State" and qualifier != "Team Exact State" and qualifier != "Team Country" and qualifier != "Team Exact Country" and qualifier != "Team Time Zone" and qualifier != "Team Exact Time Zone":
            is_qual_match = True
        elif qualifier == "Max Stat" or qualifier == "Min Stat" or qualifier == "Max Streak" or qualifier == "Count Streak" or qualifier == "Quickest" or qualifier == "Slowest":
            for qual_object in time_frame["qualifiers"][qualifier]:
                for stat_obj in qual_object["values"]:
                    if not stat_obj["time_frame"] or not (stat_obj["time_frame"]["qual_type"] == "Seasons" or stat_obj["time_frame"]["qual_type"] == "Teams"):
                        is_qual_match = True
    

    for data in playoff_data:
        data = copy.deepcopy(data)

        if time_frame["type"] == "date" and (isinstance(time_frame["time_start"], int) or isinstance(time_frame["time_end"], int)):
            year = data["Year"]
            if not is_qual_match:
                data["Date"] = year
                data["DateTime"] = year

            if not time_frame["time_start"] and not time_frame["time_end"]:
                data_to_include.append(data)
            else:
                if year >= time_frame["time_start"] and year <= time_frame["time_end"]:
                    data_to_include.append(data)
        else:
            date = data["Date"]                
            if date >= time_frame["time_start"] and date <= time_frame["time_end"]:
                data_to_include.append(data)
                
    return all_rows + data_to_include

def handle_schedule_stats(player_data, live_game, all_rows, qualifiers, is_playoffs, player_type, s):
    all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
    seasons = []
    for row_data in all_rows:
        if not {row_data["Year"], row_data["Tm"]} in [{season["Year"], season["Tm"]} for season in seasons]:
            seasons.append({
                "Year" : row_data["Year"],
                "Tm" : row_data["Tm"],
            })
    
    player_data["team_games_map"] = {}
    team_schedule = get_team_schedule(player_data, seasons, True, True, "Time" in qualifiers, is_playoffs, player_type, s)

    all_dates = set()
    for year in team_schedule:
        for season_obj in team_schedule[year]:
            for data in season_obj["regular_season"]:
                all_dates.add(data["DateTime"])
            for data in season_obj["playoffs"]:
                all_dates.add(data["DateTime"])

    if live_game:
        current_team, sub_datas = live_game[0], live_game[1]
        all_team_rows = []
        for team_year in team_schedule:
            for season_obj in team_schedule[team_year]:
                all_team_rows += season_obj["regular_season"] + season_obj["playoffs"]
        for index, game_data in enumerate(sub_datas):
            row_data = determine_row_data(game_data, player_type, player_data, None, current_team, all_dates, all_team_rows, {"time_start" : datetime.date.min.year, "time_end" : float("inf"), "type" : "date", "qualifiers" : {}}, s)

            if row_data:
                if row_data["Year"] in team_schedule:
                    for season_obj in team_schedule[row_data["Year"]]:
                        if season_obj["team"] == row_data["Tm"]:
                            if row_data["is_playoffs"]:
                                season_obj["playoffs"].append(row_data)
                                season_obj["playoffs"] = sorted(season_obj["playoffs"], key=lambda row: row["DateTime"])
                            else:
                                season_obj["regular_season"].append(row_data)
                                season_obj["regular_season"] = sorted(season_obj["regular_season"], key=lambda row: row["DateTime"])
                            break
    
    for da_year in team_schedule:
        all_rows_order = []
        for season_obj in team_schedule[da_year]:
            da_games = []
            if is_playoffs != "Only":
                da_games += season_obj["regular_season"]
            if is_playoffs:
                da_games += season_obj["playoffs"]
            for data in da_games:
                all_rows_order.append(data)
    
        all_rows_order = sorted(all_rows_order, key=lambda row: row["DateTime"])
        for index, row_data in enumerate(all_rows_order):
            if index == 0:
                row_data["Previous Team Result"] = None
            else:
                row_data["Previous Team Result"] = all_rows_order[index - 1]["Result"]
            
            if index == len(all_rows_order) - 1:
                row_data["Upcoming Team Result"] = None
            else:
                row_data["Upcoming Team Result"] = all_rows_order[index + 1]["Result"]
    
    for da_year in team_schedule:
        player_data["team_games_map"][da_year] = {}
        for season_obj in team_schedule[da_year]:
            team = season_obj["team"]
            division = season_obj["division"]

            if season_obj["regular_season"]:
                player_data["team_games_map"][da_year][team] = max(data["TmGm"] for data in season_obj["regular_season"])
            else:
                player_data["team_games_map"][da_year][team] = 1

            if is_playoffs:
                if is_playoffs == "Only":
                    max_team_games = max(data["TmGm"] for data in season_obj["regular_season"])
                else:
                    max_team_games = max(data["TmGm"] for data in season_obj["regular_season"] + season_obj["playoffs"])
            else:
                max_team_games = max(data["TmGm"] for data in season_obj["regular_season"])

            for row_data in all_rows:
                if row_data["Year"] == da_year and row_data["Tm"] == team:
                    for data in season_obj["regular_season"]:
                        if row_data["DateTime"] == data["DateTime"]:
                            if "Time" in data:
                                row_data["Time"] = data["Time"]
                            row_data["TmGm"] = data["TmGm"]
                            row_data["Previous Team Result"] = data["Previous Team Result"]
                            row_data["Upcoming Team Result"] = data["Upcoming Team Result"]
                            row_data["TmGmRev"] = max_team_games - data["TmGm"] + 1

                            if not isinstance(row_data["Date"], int):
                                if "Games Rest" in qualifiers or "Starts Rest" in qualifiers or "Games In A Row" in qualifiers or "Starts In A Row" in qualifiers:
                                    games_rest = 0
                                    starts_rest = 0
                                    games_in_a_row = 1
                                    starts_in_a_row = 1 if row_data["Start"] else 0
                                    count_games_rest = True
                                    count_starts_rest = True
                                    count_games_rest_2 = True
                                    count_starts_rest_2 = True
                                    not_first_game = False
                                    for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["DateTime"], reverse=True):
                                        if sub_data["DateTime"] < row_data["DateTime"]:
                                            not_first_game = True
                                            if sub_data["DateTime"] in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                                count_games_rest = False
                                            if count_games_rest:
                                                games_rest += 1
                                            if sub_data["DateTime"] in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                count_starts_rest = False
                                            if count_starts_rest:
                                                starts_rest += 1

                                            if sub_data["DateTime"] not in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                                count_games_rest_2 = False
                                            if count_games_rest_2:
                                                games_in_a_row += 1
                                            if row_data["Start"]:
                                                if sub_data["DateTime"] not in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                    count_starts_rest_2 = False
                                                if count_starts_rest_2:
                                                    starts_in_a_row += 1

                                            if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                                break
                                    if not_first_game:
                                        row_data["GamesRest"] = games_rest
                                        row_data["StartsRest"] = starts_rest
                                    else:
                                        row_data["GamesRest"] = float("inf")
                                        row_data["StartsRest"] = float("inf")
                                    row_data["GamesInARow"] = games_in_a_row
                                    row_data["StartsInARow"] = starts_in_a_row
                            
                                if "Game Days Rest" in qualifiers or "Start Days Rest" in qualifiers or "Start Days In A Row" in qualifiers or "Game Days In A Row" in qualifiers:
                                    games_rest = 0
                                    starts_rest = 0
                                    games_in_a_row = 1
                                    starts_in_a_row = 1 if row_data["Start"] else 0
                                    count_games_rest = True
                                    count_starts_rest = True
                                    count_games_rest_2 = True
                                    count_starts_rest_2 = True
                                    not_first_game = False
                                    all_dates = sorted(set([seas_row["DateTime"].date() for seas_row in season_obj["regular_season"] + season_obj["playoffs"]]), reverse=True)
                                    for sub_date in all_dates:
                                        if sub_date < row_data["Date"]:
                                            not_first_game = True
                                            if sub_date in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                                count_games_rest = False
                                            if count_games_rest:
                                                games_rest += 1
                                            if sub_date in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                count_starts_rest = False
                                            if count_starts_rest:
                                                starts_rest += 1

                                            if sub_date not in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                                count_games_rest_2 = False
                                            if count_games_rest_2:
                                                games_in_a_row += 1
                                            if row_data["Start"]:
                                                if sub_date not in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                    count_starts_rest_2 = False
                                                if count_starts_rest_2:
                                                    starts_in_a_row += 1

                                            if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                                break
                                    if not_first_game:
                                        row_data["GameDaysRest"] = games_rest
                                        row_data["StartDaysRest"] = starts_rest
                                    else:
                                        row_data["GameDaysRest"] = float("inf")
                                        row_data["StartDaysRest"] = float("inf")
                                    row_data["GameDaysInARow"] = games_in_a_row
                                    row_data["StartDaysInARow"] = starts_in_a_row

                                if "Games In Days" in qualifiers:
                                    for index, qual_obj in enumerate(qualifiers["Games In Days"]):
                                        days_to_check = qual_obj["values"]["days"]

                                        games = 1
                                        for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["DateTime"], reverse=True):
                                            if sub_data["DateTime"] < row_data["DateTime"]:
                                                if (row_data["DateTime"] - sub_data["DateTime"]).days + 1 > days_to_check:
                                                    break
                                                if sub_data["DateTime"] in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                                    games += 1
                                        row_data["GamesInDays" + str(index)] = games

                                if "Starts In Days" in qualifiers:
                                    for index, qual_obj in enumerate(qualifiers["Starts In Days"]):
                                        days_to_check = qual_obj["values"]["days"]

                                        games = 1 if row_data["Start"] else 0
                                        for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["DateTime"], reverse=True):
                                            if sub_data["DateTime"] < row_data["DateTime"]:
                                                if (row_data["DateTime"] - sub_data["DateTime"]).days + 1 > days_to_check:
                                                    break
                                                if sub_data["DateTime"] not in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                    games += 1
                                        row_data["StartsInDays" + str(index)] = games

                    row_data["Division"] = division

            wild_card_opponent = None
            previous_opponent = None
            current_opp_games = 0
            for data in season_obj["playoffs"]:
                if previous_opponent and previous_opponent != data["Opponent"]:
                    if current_opp_games == 1:
                        wild_card_opponent = previous_opponent
                        break
                previous_opponent = data["Opponent"]
                current_opp_games += 1

            for index, data in enumerate(season_obj["playoffs"]):
                round_index = 0
                team_wins = 0
                opponent_wins = 0

                playoff_rounds = []
                for history in playoff_format_history:
                    league_start_year = history["start"]
                    league_end_year = history["end"]
                    if (not league_start_year or data["Year"] >= league_start_year) and (not league_end_year or data["Year"] <= league_end_year):
                        playoff_rounds = history["rounds"]
                
                if not playoff_rounds:
                    raise Exception("Unknown playoff year " + data["Year"])
                
                for previous_game in reversed(season_obj["playoffs"][0:index]):
                    if previous_game["Opponent"] != data["Opponent"]:
                        break
                    
                    if previous_game["Result"] == "W":
                        team_wins += 1
                    elif previous_game["Result"] == "L":
                        opponent_wins += 1
                    
                previous_loop_game = {}
                for previous_game in season_obj["playoffs"][0:index + 1]:
                    if previous_loop_game and previous_loop_game["Opponent"] != previous_game["Opponent"]:
                        if previous_loop_game["Opponent"] != wild_card_opponent:
                            round_index += 1

                    previous_loop_game = previous_game

                for row_data in all_rows:
                    if not row_data["is_playoffs"]:
                        continue
                    
                    if row_data["DateTime"] == data["DateTime"] and row_data["Tm"] == data["Tm"]:
                        if row_data["Round"] == "wc" and row_data["Year"] != 2020:
                            row_data["Elimination"] = True
                            row_data["Clinching"] = True
                        else:
                            round_length = playoff_rounds[round_index]
                            if opponent_wins == round_length - 1:  
                                row_data["Elimination"] = True
                            else:
                                row_data["Elimination"] = False
                            if team_wins == round_length - 1:
                                row_data["Clinching"] = True
                            else:
                                row_data["Clinching"] = False
                        
                        row_data["SeriesTeamWins"] = team_wins
                        row_data["SeriesOpponentWins"] = opponent_wins
                        row_data["SeriesScore"] = team_wins - opponent_wins
                        row_data["TmGm"] = data["TmGm"]
                        row_data["Previous Team Result"] = data["Previous Team Result"]
                        row_data["Upcoming Team Result"] = data["Upcoming Team Result"]
                        row_data["TmGmRev"] = max_team_games - data["TmGm"] + 1
                        if "Time" in data:
                            row_data["Time"] = data["Time"]

                        if not isinstance(row_data["Date"], int):
                            if "Games Rest" in qualifiers or "Starts Rest" in qualifiers or "Games In A Row" in qualifiers or "Starts In A Row" in qualifiers:
                                games_rest = 0
                                starts_rest = 0
                                games_in_a_row = 1
                                starts_in_a_row = 1 if row_data["Start"] else 0
                                count_games_rest = True
                                count_starts_rest = True
                                count_games_rest_2 = True
                                count_starts_rest_2 = True
                                not_first_game = False
                                for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["DateTime"], reverse=True):
                                    if sub_data["DateTime"] < row_data["DateTime"]:
                                        not_first_game = True
                                        if sub_data["DateTime"] in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                            count_games_rest = False
                                        if count_games_rest:
                                            games_rest += 1
                                        if sub_data["DateTime"] in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                            count_starts_rest = False
                                        if count_starts_rest:
                                            starts_rest += 1

                                        if sub_data["DateTime"] not in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                            count_games_rest_2 = False
                                        if count_games_rest_2:
                                            games_in_a_row += 1
                                        if row_data["Start"]:
                                            if sub_data["DateTime"] not in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                count_starts_rest_2 = False
                                            if count_starts_rest_2:
                                                starts_in_a_row += 1

                                        if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                            break
                                if not_first_game:
                                    row_data["GamesRest"] = games_rest
                                    row_data["StartsRest"] = starts_rest
                                else:
                                    row_data["GamesRest"] = float("inf")
                                    row_data["StartsRest"] = float("inf")
                                row_data["GamesInARow"] = games_in_a_row
                                row_data["StartsInARow"] = starts_in_a_row
                            
                            if "Game Days Rest" in qualifiers or "Start Days Rest" in qualifiers or "Start Days In A Row" in qualifiers or "Game Days In A Row" in qualifiers:
                                games_rest = 0
                                starts_rest = 0
                                games_in_a_row = 1
                                starts_in_a_row = 1 if row_data["Start"] else 0
                                count_games_rest = True
                                count_starts_rest = True
                                count_games_rest_2 = True
                                count_starts_rest_2 = True
                                not_first_game = False
                                all_dates = sorted(set([seas_row["DateTime"].date() for seas_row in season_obj["regular_season"] + season_obj["playoffs"]]), reverse=True)
                                for sub_date in all_dates:
                                    if sub_date < row_data["Date"]:
                                        not_first_game = True
                                        if sub_date in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                            count_games_rest = False
                                        if count_games_rest:
                                            games_rest += 1
                                        if sub_date in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                            count_starts_rest = False
                                        if count_starts_rest:
                                            starts_rest += 1

                                        if sub_date not in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                            count_games_rest_2 = False
                                        if count_games_rest_2:
                                            games_in_a_row += 1
                                        if row_data["Start"]:
                                            if sub_date not in [row_subbest_data["Date"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                count_starts_rest_2 = False
                                            if count_starts_rest_2:
                                                starts_in_a_row += 1

                                        if not count_games_rest and not count_starts_rest and not count_games_rest_2 and not count_starts_rest_2:
                                            break
                                if not_first_game:
                                    row_data["GameDaysRest"] = games_rest
                                    row_data["StartDaysRest"] = starts_rest
                                else:
                                    row_data["GameDaysRest"] = float("inf")
                                    row_data["StartDaysRest"] = float("inf")
                                row_data["GameDaysInARow"] = games_in_a_row
                                row_data["StartDaysInARow"] = starts_in_a_row

                            if "Games In Days" in qualifiers:
                                for index, qual_obj in enumerate(qualifiers["Games In Days"]):
                                    days_to_check = qual_obj["values"]["days"]

                                    games = 1
                                    for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["DateTime"], reverse=True):
                                        if sub_data["DateTime"] < row_data["DateTime"]:
                                            if (row_data["DateTime"] - sub_data["DateTime"]).days + 1 > days_to_check:
                                                break
                                            if sub_data["DateTime"] in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]]]:
                                                games += 1
                                    row_data["GamesInDays" + str(index)] = games

                            if "Starts In Days" in qualifiers:
                                for index, qual_obj in enumerate(qualifiers["Starts In Days"]):
                                    days_to_check = qual_obj["values"]["days"]

                                    games = 1 if row_data["Start"] else 0
                                    for sub_data in sorted(season_obj["regular_season"] + season_obj["playoffs"], key=lambda seas_row: seas_row["DateTime"], reverse=True):
                                        if sub_data["DateTime"] < row_data["DateTime"]:
                                            if (row_data["DateTime"] - sub_data["DateTime"]).days + 1 > days_to_check:
                                                break
                                            if sub_data["DateTime"] not in [row_subbest_data["DateTime"] for row_subbest_data in player_data["all_games"][row_data["Year"]] if row_subbest_data["Start"]]:
                                                games += 1
                                    row_data["StartsInDays" + str(index)] = games

                        break
    
    new_rows = []
    for row in all_rows:
        if perform_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def perform_schedule_qualifiers(row, qualifiers):
    if "Time" in qualifiers:
        if "Time" not in row or row["Time"] == None:
            return False
            
        for qual_object in qualifiers["Time"]:
            if qual_object["negate"]:
                if row["Time"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Time"].lower() in qual_object["values"]:
                    return False
    
    if "Team Division" in qualifiers:
        if not "Division" in row or row["Division"] == None:
            return False
        for qual_object in qualifiers["Team Division"]:
            if qual_object["negate"]:
                if row["Division"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["Division"].lower() in qual_object["values"]:
                    return False
    
    if "Team Game" in qualifiers:    
        for qual_object in qualifiers["Team Game"]:
            if qual_object["negate"]:
                if row["TmGm"] >= qual_object["values"]["start_val"] and row["TmGm"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmGm"] >= qual_object["values"]["start_val"] and row["TmGm"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Game Reversed" in qualifiers:    
        for qual_object in qualifiers["Team Game Reversed"]:
            if qual_object["negate"]:
                if row["TmGmRev"] >= qual_object["values"]["start_val"] and row["TmGmRev"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmGmRev"] >= qual_object["values"]["start_val"] and row["TmGmRev"] <= qual_object["values"]["end_val"]):
                    return False

    if "Games Rest" in qualifiers:
        for qual_object in qualifiers["Games Rest"]:
            if qual_object["negate"]:
                if row["GamesRest"] >= qual_object["values"]["start_val"] and row["GamesRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GamesRest"] >= qual_object["values"]["start_val"] and row["GamesRest"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Game Days Rest" in qualifiers:
        for qual_object in qualifiers["Game Days Rest"]:
            if qual_object["negate"]:
                if row["GameDaysRest"] >= qual_object["values"]["start_val"] and row["GameDaysRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GameDaysRest"] >= qual_object["values"]["start_val"] and row["GameDaysRest"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts Rest" in qualifiers:
        for qual_object in qualifiers["Starts Rest"]:
            if qual_object["negate"]:
                if row["StartsRest"] >= qual_object["values"]["start_val"] and row["StartsRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["StartsRest"] >= qual_object["values"]["start_val"] and row["StartsRest"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Start Days Rest" in qualifiers:
        for qual_object in qualifiers["Start Days Rest"]:
            if qual_object["negate"]:
                if row["StartDaysRest"] >= qual_object["values"]["start_val"] and row["StartDaysRest"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["StartDaysRest"] >= qual_object["values"]["start_val"] and row["StartDaysRest"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Game Days In A Row" in qualifiers:
        for qual_object in qualifiers["Game Days In A Row"]:
            if qual_object["negate"]:
                if row["GameDaysInARow"] >= qual_object["values"]["start_val"] and row["GameDaysInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GameDaysInARow"] >= qual_object["values"]["start_val"] and row["GameDaysInARow"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Games In A Row" in qualifiers:
        for qual_object in qualifiers["Games In A Row"]:
            if qual_object["negate"]:
                if row["GamesInARow"] >= qual_object["values"]["start_val"] and row["GamesInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["GamesInARow"] >= qual_object["values"]["start_val"] and row["GamesInARow"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Starts In A Row" in qualifiers:
        for qual_object in qualifiers["Starts In A Row"]:
            if qual_object["negate"]:
                if row["StartsInARow"] >= qual_object["values"]["start_val"] and row["StartsInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["StartsInARow"] >= qual_object["values"]["start_val"] and row["StartsInARow"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Start Days In A Row" in qualifiers:
        for qual_object in qualifiers["Start Days In A Row"]:
            if qual_object["negate"]:
                if row["StartDaysInARow"] >= qual_object["values"]["start_val"] and row["StartDaysInARow"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["StartDaysInARow"] >= qual_object["values"]["start_val"] and row["StartDaysInARow"] <= qual_object["values"]["end_val"]):
                    return False

    if "Previous Team Result" in qualifiers:
        if not row["Previous Team Result"]:
            return False
        for qual_object in qualifiers["Previous Team Result"]:
            if qual_object["negate"]:
                if row["Previous Team Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Previous Team Result"] in qual_object["values"]:
                    return False

    if "Upcoming Team Result" in qualifiers:
        if not row["Upcoming Team Result"]:
            return False
        for qual_object in qualifiers["Upcoming Team Result"]:
            if qual_object["negate"]:
                if row["Upcoming Team Result"] in qual_object["values"]:
                    return False
            else:
                if not row["Upcoming Team Result"] in qual_object["values"]:
                    return False

    if "Games In Days" in qualifiers:
        for index, qual_object in enumerate(qualifiers["Games In Days"]):
            if qual_object["negate"]:
                if row["GamesInDays" + str(index)] >= qual_object["values"]["games"]["start_val"] and row["GamesInDays" + str(index)] <= qual_object["values"]["games"]["end_val"]:
                    return False
            else:
                if not (row["GamesInDays" + str(index)] >= qual_object["values"]["games"]["start_val"] and row["GamesInDays" + str(index)] <= qual_object["values"]["games"]["end_val"]):
                    return False
    
    if "Starts In Days" in qualifiers:
        for index, qual_object in enumerate(qualifiers["Starts In Days"]):
            if qual_object["negate"]:
                if row["StartsInDays" + str(index)] >= qual_object["values"]["games"]["start_val"] and row["StartsInDays" + str(index)] <= qual_object["values"]["games"]["end_val"]:
                    return False
            else:
                if not (row["StartsInDays" + str(index)] >= qual_object["values"]["games"]["start_val"] and row["StartsInDays" + str(index)] <= qual_object["values"]["games"]["end_val"]):
                    return False
    
    return True

def perform_round_qualifiers(row, qualifiers):
    if "Series Game" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Series Game"]:
            if qual_object["negate"]:
                if row["RoundGame"] >= qual_object["values"]["start_val"] and row["RoundGame"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["RoundGame"] >= qual_object["values"]["start_val"] and row["RoundGame"] <= qual_object["values"]["end_val"]):
                    return False

    if "Series Team Wins" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Series Team Wins"]:
            if qual_object["negate"]:
                if row["SeriesTeamWins"] >= qual_object["values"]["start_val"] and row["SeriesTeamWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["SeriesTeamWins"] >= qual_object["values"]["start_val"] and row["SeriesTeamWins"] <= qual_object["values"]["end_val"]):
                    return False

    if "Series Opponent Wins" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Series Opponent Wins"]:
            if qual_object["negate"]:
                if row["SeriesOpponentWins"] >= qual_object["values"]["start_val"] and row["SeriesOpponentWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["SeriesOpponentWins"] >= qual_object["values"]["start_val"] and row["SeriesOpponentWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Series Score Margin" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Series Score Margin"]:
            if qual_object["negate"]:
                if row["SeriesScore"] >= qual_object["values"]["start_val"] and row["SeriesScore"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["SeriesScore"] >= qual_object["values"]["start_val"] and row["SeriesScore"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Series Score Difference" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Series Score Difference"]:
            if qual_object["negate"]:
                if abs(row["SeriesScore"]) >= qual_object["values"]["start_val"] and abs(row["SeriesScore"]) <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (abs(row["SeriesScore"]) >= qual_object["values"]["start_val"] and abs(row["SeriesScore"]) <= qual_object["values"]["end_val"]):
                    return False

    if "Elimination" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Elimination"]:
            if qual_object["negate"]:
                if row["Elimination"]:
                    return False
            else:
                if not row["Elimination"]:
                    return False

    if "Clinching" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Clinching"]:
            if qual_object["negate"]:
                if row["Clinching"]:
                    return False
            else:
                if not row["Clinching"]:
                    return False
    
    if "Elimination Or Clinching" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Elimination Or Clinching"]:
            if qual_object["negate"]:
                if row["Clinching"] or row["Elimination"]:
                    return False
            else:
                if not (row["Clinching"] or row["Elimination"]):
                    return False
    
    if "Winner Take All" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Winner Take All"]:
            if qual_object["negate"]:
                if row["Elimination"] and row["Clinching"]:
                    return False
            else:
                if not (row["Elimination"] and row["Clinching"]):
                    return False
    
    if "Ahead In Series" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Ahead In Series"]:
            if qual_object["negate"]:
                if row["SeriesScore"] > 0:
                    return False
            else:
                if not row["SeriesScore"] > 0:
                    return False
    
    if "Behind In Series" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Behind In Series"]:
            if qual_object["negate"]:
                if row["SeriesScore"] < 0:
                    return False
            else:
                if not row["SeriesScore"] < 0:
                    return False
    
    if "Even In Series" in qualifiers:
        if not row["is_playoffs"] and not "RoundGame" in row:
            return False

        for qual_object in qualifiers["Even In Series"]:
            if qual_object["negate"]:
                if row["SeriesScore"] == 0:
                    return False
            else:
                if not row["SeriesScore"] == 0:
                    return False
    
    return True

def handle_opponent_schedule_stats(all_rows, qualifiers):
    all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
    seasons = []
    for row_data in all_rows:
        if not row_data["Year"] in [season["Year"] for season in seasons]:
            seasons.append({
                "Year" : row_data["Year"]
            })

    is_runs_diff = "Opponent Runs Rank" in qualifiers or "Opponent Runs Allowed Rank" in qualifiers or "Opponent wRC+ Rank" in qualifiers or "Opponent SLG Rank" in qualifiers or "Opponent AVG Rank" in qualifiers or "Opponent OBP Rank" in qualifiers or "Opponent OPS Rank" in qualifiers or "Opponent ERA- Rank" in qualifiers or "Opponent ERA Rank" in qualifiers or "Team Runs Rank" in qualifiers or "Team Runs Allowed Rank" in qualifiers or "Team wRC+ Rank" in qualifiers or "Team SLG Rank" in qualifiers or "Team AVG Rank" in qualifiers or "Team OBP Rank" in qualifiers or "Team OPS Rank" in qualifiers or "Team ERA- Rank" in qualifiers or "Team ERA Rank" in qualifiers
    is_standings_diff = "Winning Opponent" in qualifiers or "Losing Opponent" in qualifiers or "Tied Opponent" in qualifiers or "Winning Or Tied Opponent" in qualifiers or "Losing Or Tied Opponent" in qualifiers or "Playoff Opponent" in qualifiers or "WS Winner Opponent" in qualifiers or "Pennant Winner Opponent" in qualifiers or "Division Winner Opponent" in qualifiers or "Opponent Win Percentage" in qualifiers or "Winning Team" in qualifiers or "Losing Team" in qualifiers or "Tied Team" in qualifiers or "Winning Or Tied Team" in qualifiers or "Losing Or Tied Team" in qualifiers or "Playoff Team" in qualifiers or "WS Winner Team" in qualifiers or "Pennant Winner Team" in qualifiers or "Division Winner Team" in qualifiers or "Team Win Percentage" in qualifiers or "Opponent Division" in qualifiers or "Interdivision" in qualifiers or "Intradivision" in qualifiers or "Team Standings Rank" in qualifiers or "Opponent Standings Rank" in qualifiers or "Team Wins" in qualifiers or "Team Losses" in qualifiers or "Opponent Wins" in qualifiers or "Opponent Losses" in qualifiers or "Team Games Over 500" in qualifiers or "Opponent Games Over 500" in qualifiers
    opponent_schedule = get_opponent_schedule(seasons, is_standings_diff, is_runs_diff)
    for row_data in all_rows:
        if row_data["Year"] in opponent_schedule:
            opponents_data = opponent_schedule[row_data["Year"]]
            if "Opponent" in row_data and row_data["Opponent"].upper() in opponents_data:
                opponent_data = opponents_data[row_data["Opponent"].upper()]
                
                if "StandingsRank" in opponent_data:
                    row_data["OppWSWinner"] = opponent_data["WSWinner"]
                    row_data["OppPennantWinner"] = opponent_data["PennantWinner"]
                    row_data["OppDivisionWinner"] = opponent_data["DivisionWinner"]
                    row_data["OppWildCard"] = opponent_data["WildCard"]
                    row_data["OppStandingsRank"] = opponent_data["StandingsRank"]
                    row_data["OppWins"] = opponent_data["Wins"]
                    row_data["OppLosses"] = opponent_data["Losses"]
                    if "Division" in opponent_data:
                        row_data["OppDivision"] = opponent_data["Division"]
                    row_data["OppReverseStandingsRank"] = opponent_data["ReverseStandingsRank"]
                if "Runs" in opponent_data:
                    row_data["OppRuns"] = opponent_data["Runs"]
                    row_data["OppRunsAllowed"] = opponent_data["RunsAllowed"]
                    row_data["OppRunDiff"] = opponent_data["RunDiff"]
                    row_data["OppRunsRank"] = opponent_data["RunsRank"]
                    row_data["OppRunsAllowedRank"] = opponent_data["RunsAllowedRank"]
                    row_data["OppRunDiffRank"] = opponent_data["RunDiffRank"]
                    row_data["OppReverseRunsRank"] = opponent_data["ReverseRunsRank"]
                    row_data["OppReverseRunsAllowedRank"] = opponent_data["ReverseRunsAllowedRank"]
                    row_data["OppReverseRunDiffRank"] = opponent_data["ReverseRunDiffRank"]

                    row_data["OppwRC+"] = opponent_data["wRC+"]
                    row_data["OppERA-"] = opponent_data["ERA-"]
                    row_data["OppwRC+Rank"] = opponent_data["wRC+Rank"]
                    row_data["OppAVGRank"] = opponent_data["AVGRank"]
                    row_data["OppSLGRank"] = opponent_data["SLGRank"]
                    row_data["OppOPSRank"] = opponent_data["OPSRank"]
                    row_data["OppOBPRank"] = opponent_data["OBPRank"]
                    row_data["OppERA-Rank"] = opponent_data["ERA-Rank"]
                    row_data["OppERARank"] = opponent_data["ERARank"]
                    row_data["OppReversewRC+Rank"] = opponent_data["ReversewRC+Rank"]
                    row_data["OppReverseAVGRank"] = opponent_data["ReverseAVGRank"]
                    row_data["OppReverseSLGRank"] = opponent_data["ReverseSLGRank"]
                    row_data["OppReverseOPSRank"] = opponent_data["ReverseOPSRank"]
                    row_data["OppReverseOBPRank"] = opponent_data["ReverseOBPRank"]
                    row_data["OppReverseERA-Rank"] = opponent_data["ReverseERA-Rank"]
                    row_data["OppReverseERARank"] = opponent_data["ReverseERARank"]
                
            if row_data["Tm"].upper() in opponents_data:
                team_data = opponents_data[row_data["Tm"].upper()]

                if "StandingsRank" in team_data:
                    row_data["TmWSWinner"] = team_data["WSWinner"]
                    row_data["TmPennantWinner"] = team_data["PennantWinner"]
                    row_data["TmDivisionWinner"] = team_data["DivisionWinner"]
                    row_data["TmWildCard"] = team_data["WildCard"]
                    row_data["OppStandingsRank"] = opponent_data["StandingsRank"]
                    row_data["TmWins"] = team_data["Wins"]
                    row_data["TmLosses"] = team_data["Losses"]
                    if "Division" in team_data:
                        row_data["TmDivision"] = team_data["Division"]
                    row_data["OppReverseStandingsRank"] = opponent_data["ReverseStandingsRank"]
                if "Runs" in team_data:
                    row_data["TmRuns"] = team_data["Runs"]
                    row_data["TmRunsAllowed"] = team_data["RunsAllowed"]
                    row_data["TmRunDiff"] = team_data["RunDiff"]
                    row_data["TmRunsRank"] = team_data["RunsRank"]
                    row_data["TmRunsAllowedRank"] = team_data["RunsAllowedRank"]
                    row_data["TmRunDiffRank"] = team_data["RunDiffRank"]
                    row_data["TmReverseRunsRank"] = team_data["ReverseRunsRank"]
                    row_data["TmReverseRunsAllowedRank"] = team_data["ReverseRunsAllowedRank"]
                    row_data["TmReverseRunDiffRank"] = team_data["ReverseRunDiffRank"]

                    row_data["TmwRC+"] = team_data["wRC+"]
                    row_data["TmERA-"] = team_data["ERA-"]
                    row_data["TmwRC+Rank"] = team_data["wRC+Rank"]
                    row_data["TmAVGRank"] = team_data["AVGRank"]
                    row_data["TmSLGRank"] = team_data["SLGRank"]
                    row_data["TmOPSRank"] = team_data["OPSRank"]
                    row_data["TmOBPRank"] = team_data["OBPRank"]
                    row_data["TmERA-Rank"] = team_data["ERA-Rank"]
                    row_data["TmERARank"] = team_data["ERARank"]
                    row_data["TmReversewRC+Rank"] = team_data["ReversewRC+Rank"]
                    row_data["TmReverseERA-Rank"] = team_data["ReverseERA-Rank"]
                    row_data["TmReverseERARank"] = team_data["ReverseERARank"]
                    row_data["TmReverseAVGRank"] = team_data["ReverseAVGRank"]
                    row_data["TmReverseSLGRank"] = team_data["ReverseSLGRank"]
                    row_data["TmReverseOPSRank"] = team_data["ReverseOPSRank"]
                    row_data["TmReverseOBPRank"] = team_data["ReverseOBPRank"]

    new_rows = []
    for row in all_rows:
        if perform_opponent_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows

def handle_stat_rank_stats(all_rows, qualifiers, player_type, s):
    all_rows = sorted(all_rows, key=lambda row: row["DateTime"])
    seasons = []
    for row_data in all_rows:
        if not row_data["Year"] in [season["Year"] for season in seasons]:
            seasons.append({
                "Year" : row_data["Year"]
            })

    for qual_str in qualifiers:
        call_type = "Batter" if player_type["da_type"] == "Batter" else "Pitcher"
        if qual_str.startswith("Batting"):
            call_type = "Pitcher"

        if call_type == "Batter":
            stat_mapping = {
                "runsScoredPer9": "RS9",
                "battersFaced": "BF",
                "babip": "BABIP",
                "obp": "OBP",
                "slg": "SLG",
                "ops": "OPS",
                "strikeoutsPer9": "K9",
                "baseOnBallsPer9": "BB9",
                "homeRunsPer9": "HR9",
                "hitsPer9": "H9",
                "strikesoutsToWalks": "K/BB",
                "inheritedRunners": "IR",
                "inheritedRunnersScored": "IRS",
                "bequeathedRunners": "BQR",
                "bequeathedRunnersScored": "BQRS",
                "stolenBases": "SB",
                "caughtStealing":"CS",
                "qualityStarts": "QS",
                "gamesFinished": "GF",
                "doubles": "2B",
                "triples": "3B",
                "gidp": "GDP",
                "gidpOpp": "GDPO",
                "wildPitches": "WP",
                "balks": "BK",
                "pickoffs": "PO",
                "totalSwings": "Swg",
                "swingAndMisses": "SwgStr",
                "ballsInPlay": "InPly",
                "runSupport": "RS",
                "pitchesPerInning": "P/IP",
                "pitchesPerPlateAppearance": "P/PA",
                "walksPerPlateAppearance": "BB%",
                "strikeoutsPerPlateAppearance": "K%",
                "homeRunsPerPlateAppearance": "HR%",
                "walksPerStrikeout": "BB/K",
                "iso": "IS",
                "flyOuts": "FO",
                "popOuts": "PO",
                "lineOuts": "LO",
                "groundOuts": "GO",
                "flyHits": "FH",
                "popHits": "PH",
                "lineHits": "LH",
                "groundHits": "GH",
                "gamesPlayed": "GP",
                "gamesStarted": "GS",
                "airOuts": "AO",
                "runs": "R",
                "homeRuns": "HR",
                "strikeOuts": "K",
                "baseOnBalls": "BB",
                "intentionalWalks": "IBB",
                "hits": "H",
                "hitByPitch": "HBP",
                "avg": "AVG",
                "atBats": "AB",
                "stolenBasePercentage": "SB%",
                "groundIntoDoublePlay": "GDP",
                "numberOfPitches": "PIT",
                "era": "ERA",
                "inningsPitched": "IP",
                "wins": "W",
                "losses": "L",
                "saves": "SV",
                "saveOpportunities": "SVO",
                "holds": "HLD",
                "blownSaves": "BSV",
                "earnedRuns": "ER",
                "whip": "WHIP",
                "outs": "OUTS",
                "gamesPitched": "GPit",
                "completeGames": "CG",
                "shutouts": "SO",
                "strikes": "Str",
                "hitBatsmen": "HPB",
                "totalBases": "TB",
                "groundOutsToAirouts": "GB/FB",
                "winPercentage": "W/L%",
                "strikeoutWalkRatio": "K/BB",
                "catchersInterference": "CI",
                "sacBunts": "SH",
                "sacFlies": "SF"
            }
        else:
            stat_mapping = {
                "plateAppearances": "PA",
                "totalBases": "TB",
                "leftOnBase": "LOB",
                "sacBunts": "SH",
                "sacFlies": "SF",
                "babip": "BABIP",
                "extraBaseHits": "XBH",
                "hitByPitch": "HBP",
                "gidp": "GDP",
                "gidpOpp": "GDPO",
                "numberOfPitches": "Pit",
                "pitchesPerPlateAppearance": "P/PA",
                "walksPerPlateAppearance": "BB%",
                "strikeoutsPerPlateAppearance": "K%",
                "homeRunsPerPlateAppearance": "HR%",
                "walksPerStrikeout": "BB/K",
                "iso": "ISO",
                "reachedOnError": "ROE",
                "walkOffs": "WO",
                "flyOuts": "FO",
                "totalSwings": "Swg",
                "swingAndMisses": "SwgStr",
                "ballsInPlay": "InPly",
                "popOuts": "PO",
                "lineOuts": "LO",
                "groundOuts": "GO",
                "flyHits": "FH",
                "popHits": "PH",
                "lineHits": "LH",
                "groundHits": "GAH",
                "gamesPlayed": "GP",
                "airOuts": "AO",
                "runs": "R",
                "doubles": "2B",
                "triples": "3B",
                "homeRuns": "HR",
                "strikeOuts": "K",
                "baseOnBalls": "BB",
                "intentionalWalks": "IBB",
                "hits": "H",
                "avg": "AVG",
                "atBats": "AB",
                "obp": "OBP",
                "slg": "SLG",
                "ops": "OPS",
                "caughtStealing": "CS%",
                "stolenBases": "SB",
                "stolenBasePercentage": "SB%",
                "rbi": "RBI",
                "groundOutsToAirouts": "GB/FB",
                "catchersInterference": "CI",
                "atBatsPerHomeRun": "AB/HR"
            }

        stat_mapping = {v.upper(): k for k, v in stat_mapping.items()}

        func_to_call = None
        if qual_str in ["Facing Stat Rank", "Facing League Stat Rank", "Facing AL Stat Rank", "Facing NL Stat Rank", "Batting In Front Of Stat Rank", "Batting In Front Of League Stat Rank", "Batting In Front Of AL Stat Rank", "Batting In Front Of NL Stat Rank", "Batting Behind Stat Rank", "Batting Behind League Stat Rank", "Batting Behind AL Stat Rank", "Batting Behind NL Stat Rank", "Batting Next To Stat Rank", "Batting Next To League Stat Rank", "Batting Next To AL Stat Rank", "Batting Next To NL Stat Rank"]:
            func_to_call = "handle_facing_stat_rank_qual"
        elif qual_str in ["Facing Stat Percent", "Facing League Stat Percent", "Facing AL Stat Percent", "Facing NL Stat Percent", "Batting In Front Of Stat Percent", "Batting In Front Of League Stat Percent", "Batting In Front Of AL Stat Percent", "Batting In Front Of NL Stat Percent", "Batting Behind Stat Percent", "Batting Behind League Stat Percent", "Batting Behind AL Stat Percent", "Batting Behind NL Stat Percent", "Batting Next To Stat Percent", "Batting Next To League Stat Percent", "Batting Next To AL Stat Percent", "Batting Next To NL Stat Percent"]:
            func_to_call = "handle_facing_stat_percent_qual"
        elif qual_str in ["Facing Stat", "Facing AL Stat", "Facing NL Stat", "Batting In Front Of Stat", "Batting In Front Of AL Stat", "Batting In Front Of NL Stat", "Batting Behind Stat", "Batting Behind AL Stat", "Batting Behind NL Stat", "Batting Next To Stat", "Batting Next To AL Stat", "Batting Next To NL Stat"]:
            func_to_call = "handle_facing_stat_qual"
        elif qual_str in ["Facing Rookie", "Facing Qualified Rookie"]:
            handle_facing_no_stat_qual(qual_str, qualifiers, call_type, seasons, s)

        if func_to_call:
            func = globals().get(func_to_call)
            for qual_obj in qualifiers[qual_str]:
                if "League" in qual_str:
                    al_year_map_obj = func(qual_obj, stat_mapping, call_type, seasons, 103, s)
                    nl_year_map_obj = func(qual_obj, stat_mapping, call_type, seasons, 104, s)
                    if al_year_map_obj != None and nl_year_map_obj != None:
                        year_map_obj = {}
                        for year in al_year_map_obj:
                            if year not in year_map_obj:
                                year_map_obj[year] = set()
                            year_map_obj[year].update(al_year_map_obj[year])
                        for year in nl_year_map_obj:
                            if year not in year_map_obj:
                                year_map_obj[year] = set()
                            year_map_obj[year].update(nl_year_map_obj[year])
                        qual_obj["year_map_obj"] = year_map_obj
                else:
                    league_id = None
                    if "AL" in qual_str:
                        league_id = 103
                    elif "NL" in qual_str:
                        league_id = 104
                    year_map_obj = func(qual_obj, stat_mapping, call_type, seasons, None, s)
                    if year_map_obj != None:
                        qual_obj["year_map_obj"] = year_map_obj

def handle_facing_stat_rank_qual(qual_obj, stat_mapping, call_type, seasons, league, s):
    year_map_obj = {}
    has_one_stat_match = False
    for season_obj in seasons:
        for sub_qual_object in qual_obj["values"]:
            raw_stat = sub_qual_object["stat"].upper()
            if raw_stat not in stat_mapping:
                continue
            has_one_stat_match = True
            stat_name = stat_mapping[raw_stat]
            
            sort_str = "desc"
            for header in headers["Pitcher" if call_type == "Batter" else "Batter"].keys():
                if header.upper() == raw_stat or ("display-value" in headers["Pitcher" if call_type == "Batter" else "Batter"][header] and header.upper() == raw_stat):
                    if not headers["Pitcher" if call_type == "Batter" else "Batter"][header]["positive"]:
                        sort_str = "asc"
                    break

            if "reverse" in qual_obj and qual_obj["reverse"]:
                sort_str = "desc" if sort_str == "asc" else "asc"

            offset = sub_qual_object["start_val"] - 1
            if offset < 0:
                offset = 0
            limit = sub_qual_object["end_val"] - sub_qual_object["start_val"] + 1
            if limit == float("inf"):
                limit = 1000000
            
            qual_str = "QUALIFIED"
            if qual_obj["only_rookies"]:
                if qual_obj["include_all_players"]:
                    qual_str = "ROOKIES"
                else:
                    qual_str = "QUALIFIED_ROOKIES"
            elif qual_obj["include_all_players"]:
                qual_str = "ALL"

            url_to_use = mlb_leaderboard_query.format(season_obj["Year"], qual_str, "pitching" if call_type == "Batter" else "hitting", limit, offset, stat_name, sort_str, league)
            if league:
                url_to_use += "&leagueIds=" + str(league)

            data = url_request_json(s, url_to_use)

            if data["stats"]:
                if season_obj["Year"] not in year_map_obj:
                    year_map_obj[season_obj["Year"]] = set()                
                for player in data["stats"]:
                    year_map_obj[season_obj["Year"]].add(player["playerId"])

    if has_one_stat_match:
        return year_map_obj
    else:
        return None

def handle_facing_stat_percent_qual(qual_obj, stat_mapping, call_type, seasons, league, s):
    year_map_obj = {}
    has_one_stat_match = False
    for season_obj in seasons:
        for sub_qual_object in qual_obj["values"]:
            raw_stat = sub_qual_object["stat"].upper()
            if raw_stat not in stat_mapping:
                continue
            has_one_stat_match = True
            stat_name = stat_mapping[raw_stat]
            
            sort_str = "desc"
            for header in headers["Pitcher" if call_type == "Batter" else "Batter"].keys():
                if header.upper() == raw_stat or ("display-value" in headers["Pitcher" if call_type == "Batter" else "Batter"][header] and header.upper() == raw_stat):
                    if not headers["Pitcher" if call_type == "Batter" else "Batter"][header]["positive"]:
                        sort_str = "asc"
                    break
            
            if "reverse" in qual_obj and qual_obj["reverse"]:
                sort_str = "desc" if sort_str == "asc" else "asc"

            offset = 0
            limit = 1000000

            qual_str = "QUALIFIED"
            if qual_obj["only_rookies"]:
                if qual_obj["include_all_players"]:
                    qual_str = "ROOKIES"
                else:
                    qual_str = "QUALIFIED_ROOKIES"
            elif qual_obj["include_all_players"]:
                qual_str = "ALL"
                
            url_to_use = mlb_leaderboard_query.format(season_obj["Year"], qual_str, "pitching" if call_type == "Batter" else "hitting", limit, offset, stat_name, sort_str, league)
            if league:
                url_to_use += "&leagueIds=" + str(league)

            data = url_request_json(s, url_to_use)

            if data["stats"]:
                if season_obj["Year"] not in year_map_obj:
                    year_map_obj[season_obj["Year"]] = set()                
                for index, player in enumerate(data["stats"]):
                    rank = (index + 1) / len(data["stats"])

                    if rank >= sub_qual_object["start_val"] and rank <= sub_qual_object["end_val"]:
                        year_map_obj[season_obj["Year"]].add(player["playerId"])

    if has_one_stat_match:
        return year_map_obj
    else:
        return None

def handle_facing_stat_qual(qual_obj, stat_mapping, call_type, seasons, league, s):
    year_map_obj = {}
    has_one_stat_match = False
    for season_obj in seasons:
        qual_str = "QUALIFIED"
        if qual_obj["only_rookies"]:
            if qual_obj["include_all_players"]:
                qual_str = "ROOKIES"
            else:
                qual_str = "QUALIFIED_ROOKIES"
        elif qual_obj["include_all_players"]:
            qual_str = "ALL"

        url_to_use = mlb_leaderboard_query_no_sort.format(season_obj["Year"], qual_str, "pitching" if call_type == "Batter" else "hitting", 1000000, 0)
        if league:
            url_to_use += "&leagueIds=" + str(league)

        data = url_request_json(s, url_to_use)

        if data["stats"]:
            for player in data["stats"]:
                has_match = False
                for sub_qual_object in qual_obj["values"]:
                    raw_stat = sub_qual_object["stat"].upper()
                    if raw_stat not in stat_mapping:
                        continue
                    has_one_stat_match = True
                    stat_name = stat_mapping[raw_stat]

                    if season_obj["Year"] not in year_map_obj:
                        year_map_obj[season_obj["Year"]] = set()

                    if player[stat_name] == "-.--":
                        player[stat_name] = math.inf

                    has_match = float(player[stat_name]) >= sub_qual_object["start_val"] and float(player[stat_name]) <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if has_match:
                    year_map_obj[season_obj["Year"]].add(player["playerId"])
    

    if has_one_stat_match:
        return year_map_obj
    else:
        return None

def handle_facing_no_stat_qual(qual_str, qualifiers, call_type, seasons, s):
    for qual_obj in qualifiers[qual_str]:
        year_map_obj = {}
        for season_obj in seasons:
            qualifier_str = "QUALIFIED_ROOKIES" if qual_str == "Facing Qualified Rookie" else "ROOKIES"

            url_to_use = mlb_leaderboard_query_no_sort.format(season_obj["Year"], qualifier_str, "pitching" if call_type == "Batter" else "hitting", 1000000, 0)

            data = url_request_json(s, url_to_use)

            if data["stats"]:
                if season_obj["Year"] not in year_map_obj:
                    year_map_obj[season_obj["Year"]] = set()

                for player in data["stats"]:
                    year_map_obj[season_obj["Year"]].add(player["playerId"])

        qual_obj["year_map_obj"] = year_map_obj

def perform_opponent_schedule_qualifiers(row, qualifiers):
    if "Winning Opponent" in qualifiers:
        opponent_match = row["OppWins"] > row["OppLosses"]
        for qual_object in qualifiers["Winning Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Losing Opponent" in qualifiers:
        opponent_match = row["OppWins"] < row["OppLosses"]
        for qual_object in qualifiers["Losing Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Tied Opponent" in qualifiers:   
        opponent_match = row["OppWins"] == row["OppLosses"]
        for qual_object in qualifiers["Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Winning Or Tied Opponent" in qualifiers:
        opponent_match = row["OppWins"] >= row["OppLosses"]
        for qual_object in qualifiers["Winning Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    
    if "Losing Or Tied Opponent" in qualifiers:
        opponent_match = row["OppWins"] <= row["OppLosses"]
        for qual_object in qualifiers["Losing Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Playoff Opponent" in qualifiers:
        if row["OppWildCard"] == None and row["OppDivisionWinner"] == None:
            return False

        opponent_playoffs = row["OppWildCard"] or row["OppDivisionWinner"] 
        for qual_object in qualifiers["Playoff Opponent"]:
            if qual_object["negate"]:
                if opponent_playoffs:
                    return False
            else:
                if not opponent_playoffs:
                    return False
    
    if "WS Winner Opponent" in qualifiers:
        if row["OppWSWinner"] == None:
            return False

        for qual_object in qualifiers["WS Winner Opponent"]:
            if qual_object["negate"]:
                if row["OppWSWinner"]:
                    return False
            else:
                if not row["OppWSWinner"]:
                    return False
    
    if "Pennant Winner Opponent" in qualifiers:
        if row["OppPennantWinner"] == None:
            return False

        for qual_object in qualifiers["Pennant Winner Opponent"]:
            if qual_object["negate"]:
                if row["OppPennantWinner"]:
                    return False
            else:
                if not row["OppPennantWinner"]:
                    return False
    
    if "Division Winner Opponent" in qualifiers:
        if row["OppDivisionWinner"] == None:
            return False

        for qual_object in qualifiers["Division Winner Opponent"]:
            if qual_object["negate"]:
                if row["OppDivisionWinner"]:
                    return False
            else:
                if not row["OppDivisionWinner"]:
                    return False
    
    if "Opponent Runs Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Runs Rank"]:
            rank_str = "OppReverseRunsRank" if qual_object["values"]["reverse"] else "OppRunsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Standings Rank" in qualifiers:
        for qual_object in qualifiers["Team Standings Rank"]:
            rank_str = "TmReverseStandingsRank" if qual_object["values"]["reverse"] else "TmStandingsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Standings Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Standings Rank"]:
            rank_str = "OppReverseStandingsRank" if qual_object["values"]["reverse"] else "OppStandingsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Runs Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Opponent Runs Allowed Rank"]:
            rank_str = "OppReverseRunsAllowedRank" if qual_object["values"]["reverse"] else "OppRunsAllowedRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent wRC+ Rank" in qualifiers:
        for qual_object in qualifiers["Opponent wRC+ Rank"]:
            rank_str = "OppReversewRC+Rank" if qual_object["values"]["reverse"] else "OppwRC+Rank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent AVG Rank" in qualifiers:
        for qual_object in qualifiers["Opponent AVG Rank"]:
            rank_str = "OppReverseAVGRank" if qual_object["values"]["reverse"] else "OppAVGRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent SLG Rank" in qualifiers:
        for qual_object in qualifiers["Opponent SLG Rank"]:
            rank_str = "OppReverseSLGRank" if qual_object["values"]["reverse"] else "OppSLGRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent OBP Rank" in qualifiers:
        for qual_object in qualifiers["Opponent OBP Rank"]:
            rank_str = "OppReverseOBPRank" if qual_object["values"]["reverse"] else "OppOBPRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent OPS Rank" in qualifiers:
        for qual_object in qualifiers["Opponent OPS Rank"]:
            rank_str = "OppReverseOPSRank" if qual_object["values"]["reverse"] else "OppOPSRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent ERA- Rank" in qualifiers:
        for qual_object in qualifiers["Opponent ERA- Rank"]:
            rank_str = "OppReverseERA-Rank" if qual_object["values"]["reverse"] else "OppERA-Rank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent ERA Rank" in qualifiers:
        for qual_object in qualifiers["Opponent ERA Rank"]:
            rank_str = "OppReverseERARank" if qual_object["values"]["reverse"] else "OppERARank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Opponent Win Percentage" in qualifiers:
        for qual_object in qualifiers["Opponent Win Percentage"]:
            try:
                win_percentage = row["OppWins"] / (row["OppWins"] + row["OppLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Games Over 500" in qualifiers:
        for qual_object in qualifiers["Opponent Games Over 500"]:
            games_over_500 = row["OppWins"] - row["OppLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False

    if "Winning Team" in qualifiers:
        team_match = row["TmWins"] > row["TmLosses"]
        for qual_object in qualifiers["Winning Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Losing Team" in qualifiers:
        team_match = row["TmWins"] < row["TmLosses"]
        for qual_object in qualifiers["Losing Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Tied Team" in qualifiers:   
        team_match = row["TmWins"] == row["TmLosses"]
        for qual_object in qualifiers["Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Winning Or Tied Team" in qualifiers:
        team_match = row["TmWins"] >= row["TmLosses"]
        for qual_object in qualifiers["Winning Or Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Losing Or Tied Team" in qualifiers:
        team_match = row["TmWins"] <= row["TmLosses"]
        for qual_object in qualifiers["Losing Or Tied Team"]:
            if qual_object["negate"]:
                if team_match:
                    return False
            else:
                if not team_match:
                    return False
    
    if "Playoff Team" in qualifiers:
        if row["TmWildCard"] == None and row["TmDivisionWinner"] == None:
            return False

        team_playoffs = row["TmWildCard"] or row["TmDivisionWinner"] 
        for qual_object in qualifiers["Playoff Team"]:
            if qual_object["negate"]:
                if team_playoffs:
                    return False
            else:
                if not team_playoffs:
                    return False
    
    if "WS Winner Team" in qualifiers:
        if row["TmWSWinner"] == None:
            return False

        for qual_object in qualifiers["WS Winner Team"]:
            if qual_object["negate"]:
                if row["TmWSWinner"]:
                    return False
            else:
                if not row["TmWSWinner"]:
                    return False
    
    if "Pennant Winner Team" in qualifiers:
        if row["TmPennantWinner"] == None:
            return False

        for qual_object in qualifiers["Pennant Winner Team"]:
            if qual_object["negate"]:
                if row["TmPennantWinner"]:
                    return False
            else:
                if not row["TmPennantWinner"]:
                    return False
    
    if "Division Winner Team" in qualifiers:
        if row["TmDivisionWinner"] == None:
            return False

        for qual_object in qualifiers["Division Winner Team"]:
            if qual_object["negate"]:
                if row["TmDivisionWinner"]:
                    return False
            else:
                if not row["TmDivisionWinner"]:
                    return False
    
    if "Team Runs Rank" in qualifiers:
        for qual_object in qualifiers["Team Runs Rank"]:
            rank_str = "TmReverseRunsRank" if qual_object["values"]["reverse"] else "TmRunsRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Runs Allowed Rank" in qualifiers:
        for qual_object in qualifiers["Team Runs Allowed Rank"]:
            rank_str = "TmReverseRunsAllowedRank" if qual_object["values"]["reverse"] else "TmRunsAllowedRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team wRC+ Rank" in qualifiers:
        for qual_object in qualifiers["Team wRC+ Rank"]:
            rank_str = "TmReversewRC+Rank" if qual_object["values"]["reverse"] else "TmwRC+Rank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team AVG Rank" in qualifiers:
        for qual_object in qualifiers["Team AVG Rank"]:
            rank_str = "TmReverseAVGRank" if qual_object["values"]["reverse"] else "TmAVGRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team SLG Rank" in qualifiers:
        for qual_object in qualifiers["Team SLG Rank"]:
            rank_str = "TmReverseSLGRank" if qual_object["values"]["reverse"] else "TmSLGRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team OBP Rank" in qualifiers:
        for qual_object in qualifiers["Team OBP Rank"]:
            rank_str = "TmReverseOBPRank" if qual_object["values"]["reverse"] else "TmOBPRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team OPS Rank" in qualifiers:
        for qual_object in qualifiers["Team OPS Rank"]:
            rank_str = "TmReverseOPSRank" if qual_object["values"]["reverse"] else "TmOPSRank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team ERA- Rank" in qualifiers:
        for qual_object in qualifiers["Team ERA- Rank"]:
            rank_str = "TmReverseERA-Rank" if qual_object["values"]["reverse"] else "TmERA-Rank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team ERA Rank" in qualifiers:
        for qual_object in qualifiers["Team ERA Rank"]:
            rank_str = "TmReverseERARank" if qual_object["values"]["reverse"] else "TmERARank"
            if qual_object["negate"]:
                if row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row[rank_str] >= qual_object["values"]["start_val"] and row[rank_str] <= qual_object["values"]["end_val"]):
                    return False

    if "Team Win Percentage" in qualifiers:
        for qual_object in qualifiers["Team Win Percentage"]:
            try:
                win_percentage = row["TmWins"] / (row["TmWins"] + row["TmLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Games Over 500" in qualifiers:
        for qual_object in qualifiers["Team Games Over 500"]:
            games_over_500 = row["TmWins"] - row["TmLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False

    if "Team Wins" in qualifiers:
        for qual_object in qualifiers["Team Wins"]:
            if qual_object["negate"]:
                if row["TmWins"] >= qual_object["values"]["start_val"] and row["TmWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmWins"] >= qual_object["values"]["start_val"] and row["TmWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Team Losses" in qualifiers:
        for qual_object in qualifiers["Team Losses"]:
            if qual_object["negate"]:
                if row["TmLosses"] >= qual_object["values"]["start_val"] and row["TmLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["TmLosses"] >= qual_object["values"]["start_val"] and row["TmLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Wins" in qualifiers:
        for qual_object in qualifiers["Opponent Wins"]:
            if qual_object["negate"]:
                if row["OppWins"] >= qual_object["values"]["start_val"] and row["OppWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["OppWins"] >= qual_object["values"]["start_val"] and row["OppWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Losses" in qualifiers:
        for qual_object in qualifiers["Opponent Losses"]:
            if qual_object["negate"]:
                if row["OppLosses"] >= qual_object["values"]["start_val"] and row["OppLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["OppLosses"] >= qual_object["values"]["start_val"] and row["OppLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Opponent Division" in qualifiers:
        if not "OppDivision" in row or row["OppDivision"] == None:
            return False
        for qual_object in qualifiers["Opponent Division"]:
            if qual_object["negate"]:
                if row["OppDivision"].lower() in qual_object["values"]:
                    return False
            else:
                if not row["OppDivision"].lower() in qual_object["values"]:
                    return False

    return True

def perform_team_opponent_schedule_qualifiers(row, qualifiers):
    if "Interdivision" in qualifiers:
        if not "Division" in row or row["Division"] == None or not "OppDivision" in row or row["OppDivision"] == None:
            return False
        for qual_object in qualifiers["Interdivision"]:
            if qual_object["negate"]:
                if row["Division"] != row["OppDivision"]:
                    return False
            else:
                if not row["Division"] != row["OppDivision"]:
                    return False
    
    if "Intradivision" in qualifiers:
        if not "Division" in row or row["Division"] == None or not "OppDivision" in row or row["OppDivision"] == None:
            return False
        for qual_object in qualifiers["Intradivision"]:
            if qual_object["negate"]:
                if row["Division"] == row["OppDivision"]:
                    return False
            else:
                if not row["Division"] == row["OppDivision"]:
                    return False
    
    return True

def get_team_schedule(player_data, seasons, needs_reg_season, needs_playoffs, needs_time, is_playoffs, player_type, s):
    season_objs = {}

    for season_obj in seasons:
        new_season_obj = {
            "team" : season_obj["Tm"],
            "division" : None,
            "regular_season" : [],
            "playoffs" : []
        }

        playoff_game_counter = 0
        if needs_reg_season:
            request = urllib.request.Request(team_schedule_url_format.format(season_obj["Tm"], season_obj["Year"]), headers=request_headers)
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    continue
                else:
                    raise
                
            table_names = ["team_schedule"]

            team_info = player_page.find("div", {"id" : "meta"})
            if team_info:
                postseason_item = team_info.find("strong", text="Record:")
                if postseason_item:
                    postseason_parent = postseason_item.parent
                    if postseason_parent:
                        division_link = postseason_parent.find("a")
                        if division_link:
                            new_season_obj["division"] = str(division_link.find(text=True)).replace("_", "-")

            for table_name in table_names:
                table = player_page.find("table", id=table_name)

                if table:
                    standard_table_rows = table.find("tbody").find_all("tr")
                    for row in standard_table_rows:
                        classes = row.get("class")
                        if (not classes or not "thead" in classes):
                            row_data = {}
                            row_data["Year"] = season_obj["Year"]
                            row_data["Tm"] = season_obj["Tm"]
                            row_data["Opponent"] = str(row.find("td", {"data-stat" : "opp_ID"}).find(text=True)).strip().upper()
                            row_data["TmGm"] = int(str(row.find("th", {"data-stat" : "team_game"}).find(text=True)))
                            playoff_game_counter = row_data["TmGm"]
                            date_str = str(row.find("td", {"data-stat" : "date_game"}).text).strip()
                            time_int = 0
                            if date_str.endswith(")"):
                                date_str_split = date_str.split("(")
                                date_str = date_str_split[0].strip()
                                time_int = int(date_str_split[1].split(")")[0])
                            row_data["DateTime"] = dateutil.parser.parse(date_str + " " + str(row_data["Year"])).replace(hour=time_int)
                            time_text = row.find("td", {"data-stat" : "day_or_night"}).find(text=True)
                            if time_text:
                                row_data["Time"] = str(time_text).upper()
                            if row.find("td", {"data-stat" : "win_loss_result"}):
                                result_str = row.find("td", {"data-stat" : "win_loss_result"}).find(text=True)
                                if result_str:
                                    result_str = str(result_str[0].upper())
                                    if result_str in ("W", "L", "T"):
                                        row_data["Result"] = result_str
                                new_season_obj["regular_season"].append(row_data)

        if needs_playoffs:
            if season_obj["Year"] in [current_season]:
                if not needs_reg_season:
                    request = urllib.request.Request(team_schedule_url_format.format(season_obj["Tm"], season_obj["Year"]), headers=request_headers)
                    try:
                        response, player_page = url_request(request)
                    except urllib.error.HTTPError as err:
                        if err.status == 404:
                            continue
                        else:
                            raise
                        
                    table_names = ["team_schedule"]
                playoff_game_counter += 1
                team_info = player_page.find("div", {"id" : "meta"})
                if team_info:
                    postseason_item = None
                    postseason_strongs = team_info.find_all("strong")
                    for pot_strong in postseason_strongs:
                        if str(pot_strong.find(text=True)).startswith("Postseason"):
                            postseason_item = pot_strong
                            break
                    if postseason_item:
                        postseason_parent = postseason_item.parent
                        if postseason_parent:
                            for link in reversed(postseason_parent.find_all("a")):
                                links_ref = link["href"]
                                if "/postseason/" in links_ref:
                                    request = urllib.request.Request("https://www.baseball-reference.com" + links_ref, headers=request_headers)
                                    try:
                                        response, playoffs_page = url_request(request)
                                    except urllib.error.HTTPError as err:
                                        if err.status == 404:
                                            continue
                                        else:
                                            raise

                                    game_logs_table = playoffs_page.find("div", {"id" : "div_other_scores"})
                                    if game_logs_table:
                                        for table in game_logs_table.find_all("table"):
                                            date_row = table.find("tr", {"class" : "date"})
                                            if date_row:
                                                row_data = {}
                                                row_data["Year"] = season_obj["Year"]
                                                row_data["Tm"] = season_obj["Tm"]
                                                row_data["DateTime"] = dateutil.parser.parse(date_row.find(text=True).split(",")[1].strip() + " " + str(season_obj["Year"]))
                                                row_data["Date"] = row_data["DateTime"].date()
                                                row_data["TmGm"] = playoff_game_counter
                                                row_data["GameLink"] = table.find("td", {"class" : "gamelink"}).find("a")["href"]
                                                row_data["GameID"] = table.find("td", {"class" : "gamelink"}).find("a")["href"]
                                                playoff_game_counter += 1

                                                winner_row = table.find("tr", {"class" : "winner"})
                                                loser_row = table.find("tr", {"class" : "loser"})
                                                if winner_row and loser_row:
                                                    winner_team = winner_row.find("td").find("a")["href"].split("/")[2].upper()
                                                    loser_team = loser_row.find("td").find("a")["href"].split("/")[2].upper()
                                                    if winner_team == season_obj["Tm"]:
                                                        row_data["Result"] = "W"
                                                        row_data["Opponent"] = loser_team
                                                    else:
                                                        row_data["Result"] = "L"
                                                        row_data["Opponent"] = winner_team
                                                else:
                                                    teams = table.find_all("tr", {"class" : ""})
                                                    team_1 = teams[0].find("td").find("a")["href"].split("/")[2].upper()
                                                    team_2 = teams[1].find("td").find("a")["href"].split("/")[2].upper()
                                                    row_data["Result"] = "T"
                                                    if team_1 == season_obj["Tm"]:
                                                        row_data["Opponent"] = team_2
                                                    else:
                                                        row_data["Opponent"] = team_1

                                                row_data["Round"] = links_ref.split("/")[2].split("_")[1].split(".shtml")[0]
                                                if row_data["Round"][len(row_data["Round"])-1].isdigit():
                                                    row_data["Round"] = row_data["Round"][0:len(row_data["Round"]) - 1]
                                                row_data["Round"] = row_data["Round"][-2:].lower()
                                                new_season_obj["playoffs"].append(row_data)
            else:
                request = urllib.request.Request(total_schedule_url.format(season_obj["Year"]), headers=request_headers)
                try:
                    response, player_page = url_request(request)
                except urllib.error.HTTPError as err:
                    if err.status == 404:
                        continue
                    else:
                        raise
                
                postseason_schedule_header = player_page.find("span", {"data-label" : "Postseason Schedule"})
                playoff_game_counter += 1
                if postseason_schedule_header:
                    div_id = postseason_schedule_header.get("id")
                    if div_id:
                        div_id = div_id.split("_")[0]
                        div_id = "div_" + div_id
                        postseason_games_div = player_page.find("div", {"id" : div_id})
                        if postseason_games_div:
                            postseason_games_by_date = postseason_games_div.find_all("div")
                            for postseason_game_by_date in postseason_games_by_date:
                                is_preview = False
                                games = postseason_game_by_date.find_all("p", {"class" : "game"})
                                for game in games:
                                    links = game.find_all("a")
                                    if len(links) != 3 or links[2].find(text=True) == "Preview":
                                        is_preview = True
                                        break
                                if is_preview:
                                    continue
                                
                                date = postseason_game_by_date.find("h3")
                                if date:
                                    date = dateutil.parser.parse(str(date.find(text=True)))
                                    games = postseason_game_by_date.find_all("p", {"class" : "game"})
                                    for game in games:
                                        teams = game.find_all("a")
                                        away_team = teams[0]["href"].split("/")[2].upper()
                                        home_team = teams[1]["href"].split("/")[2].upper()
                                        if away_team == season_obj["Tm"] or home_team == season_obj["Tm"]:
                                            winning_team = game.find("strong")
                                            if winning_team:
                                                winning_team = winning_team.find("a")["href"].split("/")[2].upper()
                                            row_data = {}
                                            row_data["Year"] = season_obj["Year"]
                                            row_data["Tm"] = season_obj["Tm"]
                                            row_data["DateTime"] = date
                                            row_data["Date"] = row_data["DateTime"].date()
                                            row_data["GameLink"] = game.find("em").find("a")["href"]
                                            row_data["GameID"] = game.find("em").find("a")["href"]
                                            row_data["TmGm"] = playoff_game_counter
                                            playoff_game_counter += 1
                                            if winning_team:
                                                if winning_team == season_obj["Tm"]:
                                                    row_data["Result"] = "W"
                                                else:
                                                    row_data["Result"] = "L"
                                            else:
                                                row_data["Result"] = "T"
                                            
                                            if away_team == season_obj["Tm"]:
                                                row_data["Opponent"] = home_team
                                            else:
                                                row_data["Opponent"] = away_team

                                            new_season_obj["playoffs"].append(row_data)
            
            if needs_time and is_playoffs:
                get_href_mlb_game_stats(new_season_obj["playoffs"], s)

            new_season_obj["playoffs"] = sorted(new_season_obj["playoffs"], key=lambda row: row["DateTime"])

        if not season_obj["Year"] in season_objs:
            season_objs[season_obj["Year"]] = []

        season_objs[season_obj["Year"]].append(new_season_obj)
    
    return season_objs

def handle_mlb_game_stats(all_rows, has_count_stat, qualifiers, player_data, player_type, missing_games, missing_pitch, extra_stats, s):
    if not all_rows:
        return [], missing_games, missing_pitch
    
    games_to_skip = get_games_to_skip(all_rows, qualifiers, player_data, player_type)
    return get_mlb_game_stats(all_rows, has_count_stat, qualifiers, games_to_skip, player_data, missing_games, missing_pitch, player_type, extra_stats, True, s)

def handle_event_stats(qual, all_rows, games_to_skip, qualifiers, player_type, player_data):
    if qual in qualifiers:
        for row_data in all_rows:
            row_data["DateStart"] = [row_data["Date"]]
            prev_is_playofs = row_data["is_playoffs"]
            if row_data["is_playoffs"]:
                row_data["is_playoffs"] = "Only"
            else:
                row_data["is_playoffs"] = None

            for qual_obj in qualifiers[qual]:
                if is_invalid_stat(qual_obj["stat"], player_type, row_data, False)["all_invalid"]:
                    games_to_skip.add(row_data["GameID"])
            
            row_data["is_playoffs"] = prev_is_playofs

def get_games_to_skip(all_rows, qualifiers, player_data, player_type):
    games_to_skip = set()
    if "Batting Against" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Against"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Pitching Against" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Pitching Against"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Teammate On First" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Teammate On First"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Teammate On Second" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Teammate On Second"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Teammate On Third" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Teammate On Third"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Teammate On Base" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Teammate On Base"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Opponent On First" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Opponent On First"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Opponent On Second" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Opponent On Second"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Opponent On Third" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Opponent On Third"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Opponent On Base" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Opponent On Base"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Facing Rookie" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing Rookie"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing Qualified Rookie" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing Qualified Rookie"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing League Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing League Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing AL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing AL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing NL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing NL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing League Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing League Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing AL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing AL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing NL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing NL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing AL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing AL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Facing NL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Facing NL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of League Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of League Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of AL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of AL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of NL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of NL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of League Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of League Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of AL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of AL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of NL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of NL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of AL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of AL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of NL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of NL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind League Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind League Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind AL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind AL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind NL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind NL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind League Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind League Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind AL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind AL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind NL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind NL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind AL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind AL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Behind NL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind NL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To League Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To League Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To AL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To AL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To NL Stat Rank" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To NL Stat Rank"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To League Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To League Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To AL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To AL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To NL Stat Percent" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To NL Stat Percent"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To AL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To AL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Batting Next To NL Stat" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To NL Stat"]:
                if "year_map_obj" not in qual_object:
                    games_to_skip.add(row_data["GameID"])
    if "Driven In" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Driven In"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Batted In" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batted In"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Back To Back With" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Back To Back With"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Batting In Front Of" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting In Front Of"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Batting Behind" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Behind"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Batting Next To" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Batting Next To"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Caught By" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Caught By"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Stealing On" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Stealing On"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "On Field With" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["On Field With"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "On Field Against" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["On Field Against"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["Tm"].lower() in player["games"] and row_data["GameID"] in player["games"][row_data["Tm"].lower()]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Event Sub Query" in qualifiers:
        for row_data in all_rows:
            for qual_object in qualifiers["Event Sub Query"]:
                if not qual_object["negate"]:
                    has_match = False
                    for player in qual_object["values"]:
                        if row_data["GameID"] in player["games"]:
                            has_match = True
                
                    if not has_match:
                        games_to_skip.add(row_data["GameID"])
    if "Or Event Sub Query" in qualifiers:
        for row_data in all_rows:
            has_match = False
            for qual_object in qualifiers["Or Event Sub Query"]:
                if not qual_object["negate"]:
                    for player in qual_object["values"]:
                        if row_data["GameID"] in player["games"]:
                            has_match = True
                else:
                    has_match = True
                
            if not has_match:
                games_to_skip.add(row_data["GameID"])
    if "Walk Off" in qualifiers:
        for row_data in all_rows:
            has_match = False
            for qual_object in qualifiers["Walk Off"]:
                if not qual_object["negate"]:
                    if player_type["da_type"] == "Batter":
                        if row_data["Location"] and row_data["Result"] in ["W", None] and (row_data["Team Score"] - row_data["Opponent Score"]) <= 4:
                            has_match = True
                    else:
                        if not row_data["Location"] and row_data["Result"] in ["L", None] and (row_data["Opponent Score"] - row_data["Team Score"]) <= -4:
                            has_match = True
                else:
                    has_match = True
                
            if not has_match:
                games_to_skip.add(row_data["GameID"])
    if "Position" in qualifiers:
        for row_data in all_rows:
            has_match = False
            if "Pos" in row_data:
                qual_str = re.split(r"\s+", row_data["Pos"].replace("*", "").replace("/", ""))
                if qual_str:
                    for qual_object in qualifiers["Position"]:
                        if not qual_object["negate"]:
                            has_match = False
                            for pos in qual_object["values"]:
                                pos = pos.upper()
                                other_pos = pos
                                if pos in position_map:
                                    other_pos = position_map[pos]
                                if pos in qual_str or other_pos in qual_str:
                                    has_match = True
                                    break
                        else:
                            has_match = True
            if not has_match:
                games_to_skip.add(row_data["GameID"])
    if "Leading Off Game" in qualifiers:
        for row_data in all_rows:
            has_match = False
            for qual_object in qualifiers["Leading Off Game"]:
                if not qual_object["negate"]:
                    if player_type["da_type"] == "Batter":
                        if ("BOP" not in row_data or not row_data["BOP"]) or row_data["BOP"] == 1:
                            has_match = True
                    else:
                        has_match = True
                else:
                    has_match = True
                
            if not has_match:
                games_to_skip.add(row_data["GameID"])
    if "Leading Off Whole Game" in qualifiers:
        for row_data in all_rows:
            has_match = False
            for qual_object in qualifiers["Leading Off Whole Game"]:
                if not qual_object["negate"]:
                    if player_type["da_type"] == "Batter":
                        if ("BOP" not in row_data or not row_data["BOP"]) or row_data["BOP"] == 1:
                            has_match = True
                    else:
                        has_match = True
                else:
                    has_match = True
                
            if not has_match:
                games_to_skip.add(row_data["GameID"])
    for qual in ["Event Stat", "Event Stat Reversed", "Event Stats", "Event Stats Reversed", "Starting Event Stat", "Starting Event Stat Reversed", "Starting Event Stats", "Starting Event Stats Reversed", "Game Event Stat", "Game Event Stat Reversed", "Game Event Stats", "Game Event Stats Reversed", "Starting Game Event Stat", "Starting Game Event Stat Reversed", "Starting Game Event Stats", "Starting Game Event Stats Reversed"]:
        handle_event_stats(qual, all_rows, games_to_skip, qualifiers, player_type, player_data)

    return games_to_skip

def handle_mlb_game_stats_single_thread(all_rows, has_count_stat, qualifiers, player_data, player_type, missing_games, missing_pitch, extra_stats, s):
    if not all_rows:
        return [], missing_games, missing_pitch
    
    games_to_skip = get_games_to_skip(all_rows, qualifiers, player_data, player_type)
    return get_mlb_game_stats_single_thread(all_rows, has_count_stat, qualifiers, games_to_skip, player_data, missing_games, missing_pitch, player_type, extra_stats, s)

def setup_career_stats(row_data, player_game_info, saved_row_data, index, player_type, player_data, qualifiers):
    if not player_game_info or player_game_info["missing_data"]:
        return

    event_stats_needed = {}
    event_start_stats_needed = {}
    event_reversed_stats_needed = {}
    event_start_reversed_stats_needed = {}
    events_stats_needed = {}
    events_reversed_stats_needed = {}
    if "Event Stat" in qualifiers:
        for qual_obj in qualifiers["Event Stat"]:
            if qual_obj["stat"] not in event_stats_needed:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_stats_needed[qual_obj["stat"]]:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_stats_needed:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_stats_needed[qual_obj["stat"]]:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Event Stat Reversed" in qualifiers:
        for qual_obj in qualifiers["Event Stat Reversed"]:
            if qual_obj["stat"] not in event_reversed_stats_needed:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_reversed_stats_needed[qual_obj["stat"]]:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_reversed_stats_needed:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_reversed_stats_needed[qual_obj["stat"]]:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Event Stats" in qualifiers:
        for qual_obj in qualifiers["Event Stats"]:
            if qual_obj["stat"] not in events_stats_needed:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_stats_needed[qual_obj["stat"]]:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
    if "Event Stats Reversed" in qualifiers:
        for qual_obj in qualifiers["Event Stats Reversed"]:
            if qual_obj["stat"] not in events_reversed_stats_needed:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_reversed_stats_needed[qual_obj["stat"]]:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]

    copied_quals = copy.deepcopy(qualifiers)

    career_quals = ["Event Stat", "Event Stat Reversed"]
    for career_qual in career_quals:
        if career_qual in copied_quals:
            del copied_quals[career_qual]

    if event_stats_needed:
        career_stats_info = {}
        for stat in event_stats_needed:
            career_stats_info[stat] = 0
            
        for stat in event_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        hit_end = False
        hit_start = False
        for stat in event_stats_needed:
            if career_stats_info[stat] >= event_start_stats_needed[stat]:
                hit_start = True
        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:
            for stat in event_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue

                if hit_end:
                    at_bat_event["career_stat_" + stat] = -1
                else:
                    if stat == "IP":
                        innings_pitched_to_use = career_stats_info["IP"]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1

                            if at_bat_event["num_outs"] >= 1:
                                innings_pitched_to_use += 1/3
                            
                            frac, whole = math.modf(innings_pitched_to_use)
                            frac = round_value(frac, 1)
                            innings_pitched_to_use = whole
                            if frac == 0.3:
                                innings_pitched_to_use += 1/3
                            elif frac == 0.7:
                                innings_pitched_to_use += 2/3
                            elif frac == 1.0:
                                innings_pitched_to_use += 1
                            
                        at_bat_event["career_stat_IP"] = innings_pitched_to_use
                    elif stat == "Pit":
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                                at_bat_event["career_stat_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                        at_bat_event["career_stat_Pit"] = career_stats_info["Pit"]
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["career_stat_" + stat] = career_stats_info[stat]
                        at_bat_event["career_stat_" + stat] = career_stats_info[stat]
                    else:
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                        at_bat_event["career_stat_" + stat] = career_stats_info[stat]
                    
                    if not hit_start:
                        at_bat_event["career_stat_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_stats_needed[stat]:
                        hit_start = True
                    if career_stats_info[stat] >= event_stats_needed[stat]:
                        hit_end = True

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["career_stat_" + stat] = at_bat_event["career_stat_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue

            if at_bat_event["is_inherited"]:
                for stat in event_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["career_stat_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["career_stat_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["career_stat_" + stat] = career_stats_info[stat]

    if event_reversed_stats_needed:
        career_stats_info = {}
        for stat in event_reversed_stats_needed:
            career_stats_info[stat] = 0
        
        for stat in event_reversed_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue
            
            if at_bat_event["is_inherited"]:
                for stat in event_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["career_stat_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["career_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["career_stat_reversed_" + stat] = career_stats_info[stat]

        hit_end = False
        hit_start = False
        for stat in event_reversed_stats_needed:
            if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                hit_start = True
        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in event_reversed_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue

                if hit_end:
                    at_bat_event["career_stat_reversed_" + stat] = -1
                else:
                    if stat == "IP":
                        innings_pitched_to_use = career_stats_info["IP"]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1

                            if at_bat_event["num_outs"] >= 1:
                                innings_pitched_to_use += 1/3
                            
                            frac, whole = math.modf(innings_pitched_to_use)
                            frac = round_value(frac, 1)
                            innings_pitched_to_use = whole
                            if frac == 0.3:
                                innings_pitched_to_use += 1/3
                            elif frac == 0.7:
                                innings_pitched_to_use += 2/3
                            elif frac == 1.0:
                                innings_pitched_to_use += 1
                            
                        at_bat_event["career_stat_reversed_IP"] = innings_pitched_to_use
                    elif stat == "Pit":
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                                at_bat_event["career_stat_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                        at_bat_event["career_stat_reversed_Pit"] = career_stats_info["Pit"]
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["career_stat_reversed_" + stat] = career_stats_info[stat]
                        at_bat_event["career_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                        at_bat_event["career_stat_reversed_" + stat] = career_stats_info[stat]
                    
                    if not hit_start:
                        at_bat_event["career_stat_reversed_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                        hit_start = True
                    if career_stats_info[stat] >= event_reversed_stats_needed[stat]:
                        hit_end = True

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_reversed_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["career_stat_reversed_" + stat] = at_bat_event["career_stat_reversed_" + stat]

    if events_stats_needed:
        career_stats_info = {}
        for stat in events_stats_needed:
            career_stats_info[stat] = 0
            
        for stat in events_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:        
            for stat in events_stats_needed:
                if stat == "IP":
                    innings_pitched_to_use = career_stats_info["IP"]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1

                        if at_bat_event["num_outs"] >= 1:
                            innings_pitched_to_use += 1/3
                        
                        frac, whole = math.modf(innings_pitched_to_use)
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        
                    at_bat_event["career_stats_IP"] = innings_pitched_to_use
                elif stat == "Pit":
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                            career_stats_info["Pit"] += 1
                        at_bat_event["career_stats_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                    at_bat_event["career_stats_Pit"] = career_stats_info["Pit"]
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["career_stats_" + stat] = career_stats_info[stat]
                    at_bat_event["career_stats_" + stat] = career_stats_info[stat]
                else:
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                    at_bat_event["career_stats_" + stat] = career_stats_info[stat]

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_stats_needed:
                                sub_at_bat_event["career_stats_" + stat] = at_bat_event["career_stats_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["career_stats_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["career_stats_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["career_stats_" + stat] = career_stats_info[stat]

    if events_reversed_stats_needed:
        career_stats_info = {}
        for stat in events_reversed_stats_needed:
            career_stats_info[stat] = 0
        
        for stat in events_reversed_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["career_stats_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["career_stats_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["career_stats_reversed_" + stat] = career_stats_info[stat]

        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in events_reversed_stats_needed:
                if stat == "IP":
                    innings_pitched_to_use = career_stats_info["IP"]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1

                        if at_bat_event["num_outs"] >= 1:
                            innings_pitched_to_use += 1/3
                        
                        frac, whole = math.modf(innings_pitched_to_use)
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        
                    at_bat_event["career_stats_reversed_IP"] = innings_pitched_to_use
                elif stat == "Pit":
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                            at_bat_event["career_stats_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                    at_bat_event["career_stats_reversed_Pit"] = career_stats_info["Pit"]
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["career_stats_reversed_" + stat] = career_stats_info[stat]
                    at_bat_event["career_stats_reversed_" + stat] = career_stats_info[stat]
                else:
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                    at_bat_event["career_stats_reversed_" + stat] = career_stats_info[stat]

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_reversed_stats_needed:
                                sub_at_bat_event["careers_stat_reversed_" + stat] = at_bat_event["career_stats_reversed_" + stat]

def setup_game_stats(row_data, player_game_info, player_type, player_data, qualifiers):
    if not player_game_info or player_game_info["missing_data"]:
        return

    event_stats_needed = {}
    event_start_stats_needed = {}
    event_reversed_stats_needed = {}
    event_start_reversed_stats_needed = {}
    events_stats_needed = {}
    events_reversed_stats_needed = {}
    if "Game Event Stat" in qualifiers:
        for qual_obj in qualifiers["Game Event Stat"]:
            if qual_obj["stat"] not in event_stats_needed:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_stats_needed[qual_obj["stat"]]:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_stats_needed:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_stats_needed[qual_obj["stat"]]:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Game Event Stat Reversed" in qualifiers:
        for qual_obj in qualifiers["Game Event Stat Reversed"]:
            if qual_obj["stat"] not in event_reversed_stats_needed:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_reversed_stats_needed[qual_obj["stat"]]:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_reversed_stats_needed:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_reversed_stats_needed[qual_obj["stat"]]:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Game Event Stats" in qualifiers:
        for qual_obj in qualifiers["Game Event Stats"]:
            if qual_obj["stat"] not in events_stats_needed:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_stats_needed[qual_obj["stat"]]:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
    if "Game Event Stats Reversed" in qualifiers:
        for qual_obj in qualifiers["Game Event Stats Reversed"]:
            if qual_obj["stat"] not in events_reversed_stats_needed:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_reversed_stats_needed[qual_obj["stat"]]:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]

    copied_quals = copy.deepcopy(qualifiers)

    career_quals = ["Game Event Stat", "Game Event Stat Reversed"]
    for career_qual in career_quals:
        if career_qual in copied_quals:
            del copied_quals[career_qual]

    if event_stats_needed:
        career_stats_info = {}
        for stat in event_stats_needed:
            career_stats_info[stat] = 0

        hit_end = False
        hit_start = False
        for stat in event_stats_needed:
            if career_stats_info[stat] >= event_start_stats_needed[stat]:
                hit_start = True
        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:            
            for stat in event_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue

                if hit_end:
                    at_bat_event["game_stat_" + stat] = -1
                else:
                    if stat == "IP":
                        innings_pitched_to_use = career_stats_info["IP"]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1

                            if at_bat_event["num_outs"] >= 1:
                                innings_pitched_to_use += 1/3
                            
                            frac, whole = math.modf(innings_pitched_to_use)
                            frac = round_value(frac, 1)
                            innings_pitched_to_use = whole
                            if frac == 0.3:
                                innings_pitched_to_use += 1/3
                            elif frac == 0.7:
                                innings_pitched_to_use += 2/3
                            elif frac == 1.0:
                                innings_pitched_to_use += 1
                            
                        at_bat_event["game_stat_IP"] = innings_pitched_to_use
                    elif stat == "Pit":
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                                at_bat_event["game_stat_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                        at_bat_event["game_stat_Pit"] = career_stats_info["Pit"]
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["game_stat_" + stat] = career_stats_info[stat]
                        at_bat_event["game_stat_" + stat] = career_stats_info[stat]
                    else:
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                        at_bat_event["game_stat_" + stat] = career_stats_info[stat]
            
                    if not hit_start:
                        at_bat_event["game_stat_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_stats_needed[stat]:
                        hit_start = True
                    if career_stats_info[stat] >= event_stats_needed[stat]:
                        hit_end = True

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["game_stat_" + stat] = at_bat_event["game_stat_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue
            
            if at_bat_event["is_inherited"]:
                for stat in event_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["game_stat_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["game_stat_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["game_stat_" + stat] = career_stats_info[stat]

    if event_reversed_stats_needed:
        career_stats_info = {}
        for stat in event_reversed_stats_needed:
            career_stats_info[stat] = 0

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue
            
            if at_bat_event["is_inherited"]:
                for stat in event_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["game_stat_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["game_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["game_stat_reversed_" + stat] = career_stats_info[stat]

        hit_end = False
        hit_start = False
        for stat in event_reversed_stats_needed:
            if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                hit_start = True
        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in event_reversed_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue
                
                if hit_end:
                    at_bat_event["game_stat_reversed_" + stat] = -1
                else:
                    if stat == "IP":
                        innings_pitched_to_use = career_stats_info["IP"]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1

                            if at_bat_event["num_outs"] >= 1:
                                innings_pitched_to_use += 1/3
                            
                            frac, whole = math.modf(innings_pitched_to_use)
                            frac = round_value(frac, 1)
                            innings_pitched_to_use = whole
                            if frac == 0.3:
                                innings_pitched_to_use += 1/3
                            elif frac == 0.7:
                                innings_pitched_to_use += 2/3
                            elif frac == 1.0:
                                innings_pitched_to_use += 1
                            
                        at_bat_event["game_stat_reversed_IP"] = innings_pitched_to_use
                    elif stat == "Pit":
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                                at_bat_event["game_stat_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                        at_bat_event["game_stat_reversed_Pit"] = career_stats_info["Pit"]
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["game_stat_reversed_" + stat] = career_stats_info[stat]
                        at_bat_event["game_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                        at_bat_event["game_stat_reversed_" + stat] = career_stats_info[stat]
                    
                    if not hit_start:
                        at_bat_event["game_stat_reversed_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                        hit_start = True
                    if career_stats_info[stat] >= event_reversed_stats_needed[stat]:
                        hit_end = True

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_reversed_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["game_stat_reversed_" + stat] = at_bat_event["game_stat_reversed_" + stat]
    

    if events_stats_needed:
        career_stats_info = {}
        for stat in events_stats_needed:
            career_stats_info[stat] = 0

        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:        
            for stat in events_stats_needed:
                if stat == "IP":
                    innings_pitched_to_use = career_stats_info["IP"]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1

                        if at_bat_event["num_outs"] >= 1:
                            innings_pitched_to_use += 1/3
                        
                        frac, whole = math.modf(innings_pitched_to_use)
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        
                    at_bat_event["game_stats_IP"] = innings_pitched_to_use
                elif stat == "Pit":
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                            at_bat_event["game_stats_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                    at_bat_event["game_stats_Pit"] = career_stats_info["Pit"]
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["game_stats_" + stat] = career_stats_info[stat]
                    at_bat_event["game_stats_" + stat] = career_stats_info[stat]
                else:
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                    at_bat_event["game_stats_" + stat] = career_stats_info[stat]

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_stats_needed:
                                sub_at_bat_event["game_stats_" + stat] = at_bat_event["game_stats_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["game_stats_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["game_stats_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["game_stats_" + stat] = career_stats_info[stat]

    if events_reversed_stats_needed:
        career_stats_info = {}
        for stat in events_reversed_stats_needed:
            career_stats_info[stat] = 0
        
        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["game_stats_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["game_stats_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["game_stats_reversed_" + stat] = career_stats_info[stat]

        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in events_reversed_stats_needed:
                if stat == "IP":
                    innings_pitched_to_use = career_stats_info["IP"]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1

                        if at_bat_event["num_outs"] >= 1:
                            innings_pitched_to_use += 1/3
                        
                        frac, whole = math.modf(innings_pitched_to_use)
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        
                    at_bat_event["game_stats_reversed_IP"] = innings_pitched_to_use
                elif stat == "Pit":
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                            at_bat_event["game_stats_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                    at_bat_event["game_stats_reversed_Pit"] = career_stats_info["Pit"]
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["game_stats_reversed_" + stat] = career_stats_info[stat]
                    at_bat_event["game_stats_reversed_" + stat] = career_stats_info[stat]
                else:
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)
                    at_bat_event["game_stats_reversed_" + stat] = career_stats_info[stat]

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_reversed_stats_needed:
                                sub_at_bat_event["game_stats_reversed_" + stat] = at_bat_event["game_stats_reversed_" + stat]

def setup_starting_career_stats(row_data, player_game_info, saved_row_data, index, player_type, player_data, qualifiers):
    if not player_game_info or player_game_info["missing_data"]:
        return

    event_stats_needed = {}
    event_start_stats_needed = {}
    event_reversed_stats_needed = {}
    event_start_reversed_stats_needed = {}
    events_stats_needed = {}
    events_reversed_stats_needed = {}
    if "Starting Event Stat" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stat"]:
            if qual_obj["stat"] not in event_stats_needed:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_stats_needed[qual_obj["stat"]]:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_stats_needed:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_stats_needed[qual_obj["stat"]]:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Starting Event Stat Reversed" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stat Reversed"]:
            if qual_obj["stat"] not in event_reversed_stats_needed:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_reversed_stats_needed[qual_obj["stat"]]:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_reversed_stats_needed:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_reversed_stats_needed[qual_obj["stat"]]:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Starting Event Stats" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stats"]:
            if qual_obj["stat"] not in events_stats_needed:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_stats_needed[qual_obj["stat"]]:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
    if "Starting Event Stats Reversed" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stats Reversed"]:
            if qual_obj["stat"] not in events_reversed_stats_needed:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_reversed_stats_needed[qual_obj["stat"]]:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]

    copied_quals = copy.deepcopy(qualifiers)

    career_quals = ["Starting Event Stat", "Starting Event Stat Reversed"]
    for career_qual in career_quals:
        if career_qual in copied_quals:
            del copied_quals[career_qual]

    if event_stats_needed:
        career_stats_info = {}
        for stat in event_stats_needed:
            career_stats_info[stat] = 0
            
        for stat in event_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        hit_end = False
        hit_start = False
        for stat in event_stats_needed:
            if career_stats_info[stat] >= event_start_stats_needed[stat]:
                hit_start = True
        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:
            for stat in event_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue

                if hit_end:
                    at_bat_event["starting_career_stat_" + stat] = -1
                else:
                    if not hit_start:
                        at_bat_event["starting_career_stat_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_stats_needed[stat]:
                        hit_start = True
                    if career_stats_info[stat] >= event_stats_needed[stat]:
                        hit_end = True

                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_career_stat_" + stat] = innings_pitched_to_use
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1
                    elif stat == "Pit":
                        at_bat_event["starting_career_stat_Pit"] = career_stats_info[stat]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                at_bat_event["starting_career_stat_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["starting_career_stat_" + stat] = career_stats_info[stat]
                        at_bat_event["starting_career_stat_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_career_stat_" + stat] = career_stats_info[stat]
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["starting_career_stat_" + stat] = at_bat_event["starting_career_stat_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue
            
            if at_bat_event["is_inherited"]:
                for stat in event_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_career_stat_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_career_stat_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_career_stat_" + stat] = career_stats_info[stat]

    if event_reversed_stats_needed:
        career_stats_info = {}
        for stat in event_reversed_stats_needed:
            career_stats_info[stat] = 0
        
        for stat in event_reversed_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue
            
            if at_bat_event["is_inherited"]:
                for stat in event_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_career_stat_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_career_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_career_stat_reversed_" + stat] = career_stats_info[stat]

        hit_end = False
        hit_start = False
        for stat in event_reversed_stats_needed:
            if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                hit_start = True
        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in event_reversed_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue

                if hit_end:
                    at_bat_event["starting_career_stat_reversed_" + stat] = -1
                else:
                    if not hit_start:
                        at_bat_event["starting_career_stat_reversed_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                        hit_start = True
                    if career_stats_info[stat] >= event_reversed_stats_needed[stat]:
                        hit_end = True

                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_career_stat_reversed_" + stat] = innings_pitched_to_use
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1
                    elif stat == "Pit":
                        at_bat_event["starting_career_stat_reversed_Pit"] = career_stats_info[stat]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                at_bat_event["starting_career_stat_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["starting_career_stat_reversed_" + stat] = career_stats_info[stat]
                        at_bat_event["starting_career_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_career_stat_reversed_" + stat] = career_stats_info[stat]
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_reversed_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["starting_career_stat_reversed_" + stat] = at_bat_event["starting_career_stat_reversed_" + stat]
    
    if events_stats_needed:
        career_stats_info = {}
        for stat in events_stats_needed:
            career_stats_info[stat] = 0
            
        for stat in events_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:        
            for stat in events_stats_needed:
                if stat == "IP":
                    frac, whole = math.modf(career_stats_info["IP"])
                    frac = round_value(frac, 1)
                    innings_pitched_to_use = whole
                    if frac == 0.3:
                        innings_pitched_to_use += 1/3
                    elif frac == 0.7:
                        innings_pitched_to_use += 2/3
                    elif frac == 1.0:
                        innings_pitched_to_use += 1
                    at_bat_event["starting_career_stats_" + stat] = innings_pitched_to_use
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1
                elif stat == "Pit":
                    at_bat_event["starting_career_stats_Pit"] = career_stats_info[stat]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            at_bat_event["starting_career_stats_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["starting_career_stats_" + stat] = career_stats_info[stat]
                    at_bat_event["starting_career_stats_" + stat] = career_stats_info[stat]
                else:
                    at_bat_event["starting_career_stats_" + stat] = career_stats_info[stat]
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_stats_needed:
                                sub_at_bat_event["starting_career_stats_" + stat] = at_bat_event["starting_career_stats_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_career_stats_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_career_stats_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_career_stats_" + stat] = career_stats_info[stat]

    if events_reversed_stats_needed:
        career_stats_info = {}
        for stat in events_reversed_stats_needed:
            career_stats_info[stat] = 0
        
        for stat in events_reversed_stats_needed:
            career_stats_info[stat] += saved_row_data[stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_career_stats_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_career_stats_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_career_stats_reversed_" + stat] = career_stats_info[stat]

        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in events_reversed_stats_needed:
                if stat == "IP":
                    frac, whole = math.modf(career_stats_info["IP"])
                    frac = round_value(frac, 1)
                    innings_pitched_to_use = whole
                    if frac == 0.3:
                        innings_pitched_to_use += 1/3
                    elif frac == 0.7:
                        innings_pitched_to_use += 2/3
                    elif frac == 1.0:
                        innings_pitched_to_use += 1
                    at_bat_event["starting_career_stats_reversed_" + stat] = innings_pitched_to_use
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1
                elif stat == "Pit":
                    at_bat_event["starting_career_stats_reversed_Pit"] = career_stats_info[stat]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            at_bat_event["starting_career_stats_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["starting_career_stats_reversed_" + stat] = career_stats_info[stat]
                    at_bat_event["starting_career_stats_reversed_" + stat] = career_stats_info[stat]
                else:
                    at_bat_event["starting_career_stats_reversed_" + stat] = career_stats_info[stat]
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_reversed_stats_needed:
                                sub_at_bat_event["careers_stat_reversed_" + stat] = at_bat_event["starting_career_stats_reversed_" + stat]

def setup_starting_game_stats(row_data, player_game_info, player_type, player_data, qualifiers):
    if not player_game_info or player_game_info["missing_data"]:
        return

    event_stats_needed = {}
    event_start_stats_needed = {}
    event_reversed_stats_needed = {}
    event_start_reversed_stats_needed = {}
    events_stats_needed = {}
    events_reversed_stats_needed = {}
    if "Starting Game Event Stat" in qualifiers:
        for qual_obj in qualifiers["Starting Game Event Stat"]:
            if qual_obj["stat"] not in event_stats_needed:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_stats_needed[qual_obj["stat"]]:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_stats_needed:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_stats_needed[qual_obj["stat"]]:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Starting Game Event Stat Reversed" in qualifiers:
        for qual_obj in qualifiers["Starting Game Event Stat Reversed"]:
            if qual_obj["stat"] not in event_reversed_stats_needed:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_reversed_stats_needed[qual_obj["stat"]]:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_reversed_stats_needed:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_reversed_stats_needed[qual_obj["stat"]]:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Starting Game Event Stats" in qualifiers:
        for qual_obj in qualifiers["Starting Game Event Stats"]:
            if qual_obj["stat"] not in events_stats_needed:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_stats_needed[qual_obj["stat"]]:
                events_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
    if "Starting Game Event Stats Reversed" in qualifiers:
        for qual_obj in qualifiers["Starting Game Event Stats Reversed"]:
            if qual_obj["stat"] not in events_reversed_stats_needed:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < events_reversed_stats_needed[qual_obj["stat"]]:
                events_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]

    copied_quals = copy.deepcopy(qualifiers)

    career_quals = ["Starting Game Event Stat", "Starting Game Event Stat Reversed"]
    for career_qual in career_quals:
        if career_qual in copied_quals:
            del copied_quals[career_qual]

    if event_stats_needed:
        career_stats_info = {}
        for stat in event_stats_needed:
            career_stats_info[stat] = 0

        hit_end = False
        hit_start = False
        for stat in event_stats_needed:
            if career_stats_info[stat] >= event_start_stats_needed[stat]:
                hit_start = True
        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:            
            for stat in event_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue

                if hit_end:
                    at_bat_event["starting_game_stat_" + stat] = -1
                else:
                    if not hit_start:
                        at_bat_event["starting_game_stat_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_stats_needed[stat]:
                        hit_start = True

                    if career_stats_info[stat] >= event_stats_needed[stat]:
                        hit_end = True

                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_game_stat_" + stat] = innings_pitched_to_use
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1
                    elif stat == "Pit":
                        at_bat_event["starting_game_stat_Pit"] = career_stats_info[stat]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                at_bat_event["starting_game_stat_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["starting_game_stat_" + stat] = career_stats_info[stat]
                        at_bat_event["starting_game_stat_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_game_stat_" + stat] = career_stats_info[stat]
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["starting_game_stat_" + stat] = at_bat_event["starting_game_stat_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue
            
            if at_bat_event["is_inherited"]:
                for stat in event_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_game_stat_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_game_stat_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_game_stat_" + stat] = career_stats_info[stat]

    if event_reversed_stats_needed:
        career_stats_info = {}
        for stat in event_reversed_stats_needed:
            career_stats_info[stat] = 0

        for at_bat_event in player_game_info["pitching_run_events"]:
            if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                continue
            
            if at_bat_event["is_inherited"]:
                for stat in event_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_game_stat_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_game_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_game_stat_reversed_" + stat] = career_stats_info[stat]

        hit_end = False
        hit_start = False
        for stat in event_reversed_stats_needed:
            if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                hit_start = True
        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in event_reversed_stats_needed:
                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                    continue

                if hit_end:
                    at_bat_event["starting_game_stat_reversed_" + stat] = -1
                else:
                    if not hit_start:
                        at_bat_event["starting_game_stat_reversed_" + stat] = -1
            
                    if career_stats_info[stat] >= event_start_reversed_stats_needed[stat]:
                        hit_start = True

                    if career_stats_info[stat] >= event_reversed_stats_needed[stat]:
                        hit_end = True

                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_game_stat_reversed_" + stat] = innings_pitched_to_use
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            if at_bat_event["num_outs"] == 1:
                                career_stats_info["IP"] += 1/3
                            elif at_bat_event["num_outs"] == 2:
                                career_stats_info["IP"] += 2/3
                            elif at_bat_event["num_outs"] == 3:
                                career_stats_info["IP"] += 1
                    elif stat == "Pit":
                        at_bat_event["starting_game_stat_reversed_Pit"] = career_stats_info[stat]
                        if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                            for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                                at_bat_event["starting_game_stat_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                                if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                    career_stats_info["Pit"] += 1
                    elif stat in ["ER", "R"]:
                        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                            for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                                if copied_quals and not handle_da_mlb_quals(row_data, "pitching_run_events", at_bat_event, sub_at_bat_event, player_data, player_type, player_game_info):
                                    continue
                                if stat == "R":
                                    career_stats_info[stat] += 1
                                else:
                                    if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                        career_stats_info[stat] += 1
                                sub_at_bat_event["starting_game_stat_reversed_" + stat] = career_stats_info[stat]
                        at_bat_event["starting_game_stat_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_game_stat_reversed_" + stat] = career_stats_info[stat]
                        career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in event_reversed_stats_needed:
                                if stat not in ["Pit"] and copied_quals and not handle_da_mlb_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info):
                                    continue
                                sub_at_bat_event["starting_game_stat_reversed_" + stat] = at_bat_event["starting_game_stat_reversed_" + stat]
    
    if events_stats_needed:
        career_stats_info = {}
        for stat in events_stats_needed:
            career_stats_info[stat] = 0

        for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:        
            for stat in events_stats_needed:
                if stat == "IP":
                    frac, whole = math.modf(career_stats_info["IP"])
                    frac = round_value(frac, 1)
                    innings_pitched_to_use = whole
                    if frac == 0.3:
                        innings_pitched_to_use += 1/3
                    elif frac == 0.7:
                        innings_pitched_to_use += 2/3
                    elif frac == 1.0:
                        innings_pitched_to_use += 1
                    at_bat_event["starting_game_stats_" + stat] = innings_pitched_to_use
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1
                elif stat == "Pit":
                    at_bat_event["starting_game_stats_Pit"] = career_stats_info[stat]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            at_bat_event["starting_game_stats_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["starting_game_stats_" + stat] = career_stats_info[stat]
                    at_bat_event["starting_game_stats_" + stat] = career_stats_info[stat]
                else:
                    at_bat_event["starting_game_stats_" + stat] = career_stats_info[stat]
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_stats_needed:
                                sub_at_bat_event["starting_game_stats_" + stat] = at_bat_event["starting_game_stats_" + stat]

        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_game_stats_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_game_stats_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_game_stats_" + stat] = career_stats_info[stat]

    if events_reversed_stats_needed:
        career_stats_info = {}
        for stat in events_reversed_stats_needed:
            career_stats_info[stat] = 0
        
        for at_bat_event in player_game_info["pitching_run_events"]:
            if at_bat_event["is_inherited"]:
                for stat in events_reversed_stats_needed:
                    if stat == "IP":
                        frac, whole = math.modf(career_stats_info["IP"])
                        frac = round_value(frac, 1)
                        innings_pitched_to_use = whole
                        if frac == 0.3:
                            innings_pitched_to_use += 1/3
                        elif frac == 0.7:
                            innings_pitched_to_use += 2/3
                        elif frac == 1.0:
                            innings_pitched_to_use += 1
                        at_bat_event["starting_game_stats_reversed_IP"] = innings_pitched_to_use
                    elif stat in ["ER", "R"]:
                        if stat == "R":
                            career_stats_info[stat] += 1
                        else:
                            if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                career_stats_info[stat] += 1
                        at_bat_event["starting_game_stats_reversed_" + stat] = career_stats_info[stat]
                    else:
                        at_bat_event["starting_game_stats_reversed_" + stat] = career_stats_info[stat]

        for at_bat_event in reversed(player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]):
            for stat in events_reversed_stats_needed:
                if stat == "IP":
                    frac, whole = math.modf(career_stats_info["IP"])
                    frac = round_value(frac, 1)
                    innings_pitched_to_use = whole
                    if frac == 0.3:
                        innings_pitched_to_use += 1/3
                    elif frac == 0.7:
                        innings_pitched_to_use += 2/3
                    elif frac == 1.0:
                        innings_pitched_to_use += 1
                    at_bat_event["starting_game_stats_reversed_" + stat] = innings_pitched_to_use
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        if at_bat_event["num_outs"] == 1:
                            career_stats_info["IP"] += 1/3
                        elif at_bat_event["num_outs"] == 2:
                            career_stats_info["IP"] += 2/3
                        elif at_bat_event["num_outs"] == 3:
                            career_stats_info["IP"] += 1
                elif stat == "Pit":
                    at_bat_event["starting_game_stats_reversed_Pit"] = career_stats_info[stat]
                    if at_bat_event["result"] not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            at_bat_event["starting_game_stats_reversed_Pit_"  + str(pitch_index + 1)] = career_stats_info["Pit"]
                            if not copied_quals or handle_da_pitch_quals(row_data, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, copied_quals, player_data, player_type, player_game_info, pitch_index + 1):
                                career_stats_info["Pit"] += 1
                elif stat in ["ER", "R"]:
                    if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                        for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                            if stat == "R":
                                career_stats_info[stat] += 1
                            else:
                                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                                    career_stats_info[stat] += 1
                            sub_at_bat_event["starting_game_stats_reversed_" + stat] = career_stats_info[stat]
                    at_bat_event["starting_game_stats_reversed_" + stat] = career_stats_info[stat]
                else:
                    at_bat_event["starting_game_stats_reversed_" + stat] = career_stats_info[stat]
                    career_stats_info[stat] += calculate_row_numbers(at_bat_event, at_bat_event["result"], copied_quals, player_type, stat)

            if player_type["da_type"] != "Batter":
                if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
                    for sub_at_bat_event in player_game_info["pitch_event_to_run_event"][at_bat_event["event_id"]]:
                        if not sub_at_bat_event["is_inherited"]:
                            for stat in events_reversed_stats_needed:
                                sub_at_bat_event["starting_game_stats_reversed_" + stat] = at_bat_event["starting_game_stats_reversed_" + stat]

def perform_sub_mlb_inning_qualifiers(row, player_data, qualifiers, player_game_info, player_type):
    clear_data(row)

    if not player_game_info or player_game_info["missing_data"]:
        return False, row

    events_by_inning = {}

    for at_bat_event in player_game_info["batting_events"]:
        if at_bat_event["inning"] not in events_by_inning:
            events_by_inning[at_bat_event["inning"]] = {
                "batting_events" : [],
                "pitching_events" : [],
                "pitching_run_events" : [],
                "pitch_event_to_run_event" : {}
            }
        events_by_inning[at_bat_event["inning"]]["batting_events"].append(at_bat_event)
    for at_bat_event in player_game_info["pitching_events"]:
        if at_bat_event["inning"] not in events_by_inning:
            events_by_inning[at_bat_event["inning"]] = {
                "batting_events" : [],
                "pitching_events" : [],
                "pitching_run_events" : [],
                "pitch_event_to_run_event" : {}
            }
        events_by_inning[at_bat_event["inning"]]["pitching_events"].append(at_bat_event)

        if at_bat_event["event_id"] in player_game_info["pitch_event_to_run_event"]:
            events_by_inning[at_bat_event["inning"]]["pitch_event_to_run_event"][at_bat_event["event_id"]] = at_bat_event

    for at_bat_event in player_game_info["pitching_run_events"]:
        if at_bat_event["inning"] not in events_by_inning:
            events_by_inning[at_bat_event["inning"]] = {
                "batting_events" : [],
                "pitching_events" : [],
                "pitching_run_events" : [],
                "pitch_event_to_run_event" : {}
            }
        events_by_inning[at_bat_event["inning"]]["pitching_run_events"].append(at_bat_event)
    
    overall_has_match = False
    raw_row_data = row
    for inning in events_by_inning:
        inning_events = events_by_inning[inning]
        new_plater_game_info = copy.copy(player_game_info)
        new_plater_game_info["batting_events"] = inning_events["batting_events"]
        new_plater_game_info["pitching_events"] = inning_events["pitching_events"]
        new_plater_game_info["pitching_run_events"] = inning_events["pitching_run_events"]
        new_plater_game_info["pitch_event_to_run_event"] = inning_events["pitch_event_to_run_event"]
        
        row_copy = copy.copy(row)

        perform_sub_mlb_game_qualifiers(row_copy, player_data, qualifiers, new_plater_game_info, player_type, True)

        has_all_match = True
        if "Inning Stat" in qualifiers:
            stats = set()
            find_stat_match(qualifiers["Inning Stat"], player_type, stats)
            row_lower = fill_row(row_copy, player_data, player_type, stats=stats)
            for qual_object in qualifiers["Inning Stat"]:
                has_match = False
                for sub_qual_object in qual_object["values"]:
                    stat = sub_qual_object["stat"]

                    if stat not in row_lower:
                        for header_stat in headers[player_type["da_type"]]:
                            if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                                stat = header_stat.lower()
                    
                    if stat in row_lower:
                        has_match = row_lower[stat] >= sub_qual_object["start_val"] and row_lower[stat] <= sub_qual_object["end_val"]
                    
                    if has_match:
                        break

                if qual_object["negate"]:
                    if has_match:
                        has_all_match = False
                else:
                    if not has_match:
                        has_all_match = False

        if has_all_match:
            row["Ing"] += 1
            raw_row_data = perform_sub_mlb_game_qualifiers(row, player_data, qualifiers, new_plater_game_info, player_type, False)[1]
            overall_has_match = True
    
    return overall_has_match, raw_row_data

def perform_sub_game_quals(qualifiers, player_game_info, row):
    if "Event DateTime" in qualifiers:
        start_event_time = player_game_info["start_event_time"]
        end_event_time = player_game_info["end_event_time"]
        if not start_event_time or not end_event_time:
            return

        for qual_object in qualifiers["Event DateTime"]:
            if not qual_object["negate"]:
                stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(qual_object["values"]["time_zone"])).replace(microsecond=0)
                end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(qual_object["values"]["time_zone"])).replace(microsecond=0)
                start_event_time = start_event_time.astimezone(pytz.timezone(qual_object["values"]["time_zone"])).replace(microsecond=0)
                end_event_time = end_event_time.astimezone(pytz.timezone(qual_object["values"]["time_zone"])).replace(microsecond=0)
                is_match = (stat_val <= end_event_time) and (start_event_time <= end_val)

                if not is_match:
                    return False

    if "Team Event DateTime" in qualifiers:
        start_event_time = player_game_info["start_event_time"]
        end_event_time = player_game_info["end_event_time"]
        if not start_event_time or not end_event_time:
            return

        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        start_event_time = start_event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        end_event_time = end_event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        for qual_object in qualifiers["Team Event DateTime"]:
            if not qual_object["negate"]:
                stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
                end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
                is_match = (stat_val <= end_event_time) and (start_event_time <= end_val)

                if not is_match:
                    return False
    
    if "Opponent Event DateTime" in qualifiers:
        start_event_time = player_game_info["start_event_time"]
        end_event_time = player_game_info["end_event_time"]
        if not start_event_time or not end_event_time:
            return

        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        start_event_time = start_event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        end_event_time = end_event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        for qual_object in qualifiers["Opponent Event DateTime"]:
            if not qual_object["negate"]:
                stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
                end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
                is_match = (stat_val <= end_event_time) and (start_event_time <= end_val)

                if not is_match:
                    return False
    
    if "Local Event DateTime" in qualifiers:
        start_event_time = player_game_info["start_event_time"]
        end_event_time = player_game_info["end_event_time"]
        if not start_event_time or not end_event_time:
            return
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["time_zone"]

        start_event_time = start_event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        end_event_time = end_event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        for qual_object in qualifiers["Local Event DateTime"]:
            if not qual_object["negate"]:
                stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
                end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
                is_match = (stat_val <= end_event_time) and (start_event_time <= end_val)
                    
                if not is_match:
                    return False
    
    return True

def perform_sub_mlb_game_qualifiers(row, player_data, qualifiers, player_game_info, player_type, do_clear):
    if do_clear:
        clear_data(row)

    if not player_game_info or player_game_info["missing_data"]:
        return False, row

    if not perform_sub_game_quals(qualifiers, player_game_info, row):
        return False, row

    skip_run_events = False
    if "Batting Lefty" in qualifiers or "Batting Righty" in qualifiers or "Back To Back With" in qualifiers or "Batting In Front Of" in qualifiers or "Batting Behind" in qualifiers or "Batting Next To" in qualifiers or "Pinch Hitting" in qualifiers or "Leading Off Game" in qualifiers or "Leading Off Whole Game" in qualifiers  or "Leading Off Inning" in qualifiers or "Swung At First Pitch" in qualifiers or "Time Facing Opponent" in qualifiers:
        if player_type["da_type"] == "Batter":
            skip_run_events = True
    
    #include_all_games = "Event Stat" in qualifiers or "Event Stat Reversed" in qualifiers or "Event Stats" in qualifiers or "Event Stats Reversed" in qualifiers or "Starting Event Stat" in qualifiers or "Starting Event Stat Reversed" in qualifiers or "Starting Event Stats" in qualifiers or "Starting Event Stats Reversed" in qualifiers
    include_all_games = True

    raw_row_data = copy.copy(row)
    
    has_any_match = include_all_games
    for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:
        event_name = at_bat_event["result"]
        if event_name == "pitch":
            continue
        if handle_da_mlb_quals(row, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, qualifiers, player_data, player_type, player_game_info):
            add_row_numbers(row, at_bat_event, event_name, qualifiers, player_type)

            if not (skip_run_events and event_name in ("run_scored", "stolen_base", "caught_stealing")):
                has_any_match = True
        
        if handle_da_mlb_quals(row, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, skip_career_events=True):
            add_row_numbers(raw_row_data, at_bat_event, event_name, qualifiers, player_type)
        
        if event_name not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
            if at_bat_event["ind_pitches"]:
                for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                    pitch_event_obj = handle_da_pitch_quals(row, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, pitch_index + 1)
                    if pitch_event_obj:
                        add_pitch_row_numbers(row, at_bat_event, event_name, qualifiers, pitch_index, ind_pitch, pitch_event_obj)

                        if not (skip_run_events and event_name in ("run_scored", "stolen_base", "caught_stealing")):
                            has_any_match = True
                    
                    pitch_event_obj = handle_da_pitch_quals(row, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, pitch_index + 1, skip_career_events=True)
                    if pitch_event_obj:
                        add_pitch_row_numbers(raw_row_data, at_bat_event, event_name, qualifiers, pitch_index, ind_pitch, pitch_event_obj)
                    
                    has_pitch_match = True
                    if "Pitch Speed" in qualifiers:
                        if "pitch_speeds" not in at_bat_event or not at_bat_event["pitch_speeds"]:
                            has_pitch_match = False

                        if has_pitch_match:
                            pitch_speed = at_bat_event["pitch_speeds"][len(at_bat_event["pitch_speeds"]) - 1]
                            if pitch_speed == None:
                                has_pitch_match = False
                    if "Pitch Zone" in qualifiers or "Out Of Zone" in qualifiers or "In Zone" in qualifiers:
                        if "pitch_zones" not in at_bat_event or not at_bat_event["pitch_zones"]:
                            has_pitch_match = False

                        if has_pitch_match:
                            pitch_speed = at_bat_event["pitch_zones"][len(at_bat_event["pitch_zones"]) - 1]
                            if pitch_speed == None:
                                has_pitch_match = False
                    if "Fastball" in qualifiers or "Breaking" in qualifiers or "Offspeed" in qualifiers or "Pitch Type" in qualifiers or "Exact Pitch Type" in qualifiers:
                        if "pitch_types" not in at_bat_event or not at_bat_event["pitch_types"]:
                            has_pitch_match = False    
                        
                        if has_pitch_match:
                            pitch_type = at_bat_event["pitch_types"][len(at_bat_event["pitch_types"]) - 1]
                            if not pitch_type:
                                has_pitch_match = False
                    if "Pitch Spin" in qualifiers:
                        if "pitch_spin" not in at_bat_event or not at_bat_event["pitch_spin"]:
                            has_pitch_match = False

                        if has_pitch_match:
                            pitch_speed = at_bat_event["pitch_spin"][len(at_bat_event["pitch_spin"]) - 1]
                            if pitch_speed == None:
                                has_pitch_match = False
                    if has_pitch_match:
                        if handle_da_pitch_quals(row, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, pitch_index + 1, skip_pitch_events=True):
                            row["TtlPit"] += 1

    if player_type["da_type"] != "Batter":
        for at_bat_event in player_game_info["pitching_run_events"]:
            if handle_da_mlb_quals(row, "pitching_run_events", at_bat_event, qualifiers, player_data, player_type, player_game_info):
                row["R"] += 1
                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                    row["ER"] += 1

                has_any_match = True
            if handle_da_mlb_quals(row, "pitching_run_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, skip_career_events=True):
                raw_row_data["R"] += 1
                if "is_unearned_run" not in at_bat_event or not at_bat_event["is_unearned_run"]:
                    raw_row_data["ER"] += 1

    if not has_any_match:
        if "Pitch Speed" in qualifiers or "Pitch Zone" in qualifiers or "Out Of Zone" in qualifiers or "In Zone" in qualifiers or "Fastball" in qualifiers or "Breaking" in qualifiers or "Offspeed" in qualifiers or "Pitch Type" in qualifiers or "Exact Pitch Type" in qualifiers or "Pitch Spin" in qualifiers:
            for at_bat_event in player_game_info["batting_events" if player_type["da_type"] == "Batter" else "pitching_events"]:
                event_name = at_bat_event["result"]
                if event_name == "pitch":
                    continue
                if handle_da_mlb_quals(row, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, skip_pitch_events=True):
                    if not (skip_run_events and event_name in ("run_scored", "stolen_base", "caught_stealing")):
                        has_any_match = True
                        break
                if event_name not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
                    if at_bat_event["ind_pitches"]:
                        for pitch_index, ind_pitch in enumerate(at_bat_event["ind_pitches"]):
                            pitch_event_obj = handle_da_pitch_quals(row, "batting_events" if player_type["da_type"] == "Batter" else "pitching_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, pitch_index + 1, skip_pitch_events=True)
                            if pitch_event_obj:
                                if not (skip_run_events and event_name in ("run_scored", "stolen_base", "caught_stealing")):
                                    has_any_match = True
                                    break
            
            if not has_any_match:
                if player_type["da_type"] != "Batter":
                    for at_bat_event in player_game_info["pitching_run_events"]:
                        if handle_da_mlb_quals(row, "pitching_run_events", at_bat_event, qualifiers, player_data, player_type, player_game_info, skip_pitch_events=True):
                            has_any_match = True
                            break

    if not has_any_match:
        return False, raw_row_data
    
    calculate_data(row, player_type)

    return True, raw_row_data

def calculate_row_numbers(at_bat_event, event_name, qualifiers, player_type, stat):
    new_row = {}
    clear_data(new_row)
    add_row_numbers(new_row, at_bat_event, event_name, qualifiers, player_type)
    if stat in new_row:
        return new_row[stat]
    else:
        return -1

def add_row_numbers(row, at_bat_event, event_name, qualifiers, player_type):
    row_event_info = event_type_stat_mappings[event_name]
    for stat in row_event_info:
        row[stat] += row_event_info[stat]
    
    if "WalkOff" in at_bat_event and at_bat_event["WalkOff"]:
        if event_name not in ("run_scored", "stolen_base", "caught_stealing", "pick_off", "no_stats", "no_stats_sb", "strikeout"):
            row["WalkOff"] += 1
        else:
            if player_type["da_type"] != "Batter":
                row["WalkOff"] += 1
            elif event_name == "run_scored" and "event_type" in at_bat_event and at_bat_event["event_type"] in ("stolen_base", "no_stats_sb"):
                row["WalkOff"] += 1

    if event_name not in ("run_scored", "stolen_base", "caught_stealing", "pick_off"):
        if "Walk Off" in qualifiers or "Game Tying" in qualifiers or "Go Ahead" in qualifiers or "Go Ahead Or Game Tying" in qualifiers or "Game Winning" in qualifiers or "Driven In" in qualifiers or "Batted In" in qualifiers or "Earned" in qualifiers:
            is_rbi = True
            matching_rbi_players = []
            is_winning_rbi = True
            is_driven_in = True
            matching_driven_in_players = []
            is_winning_driven_in = True
            has_one_qual = False
            if "Walk Off" in qualifiers:
                if at_bat_event["WalkOff"]:
                    has_one_qual = True
                    is_sub_rbi = True
                    is_sub_winning_rbi = True
                    is_sub_driven_in = True
                    is_sub_winning_driven_in = True
                    for qual_object in qualifiers["Walk Off"]:
                        if not qual_object["negate"]:
                            if not at_bat_event["all_runners_rbi_index"][at_bat_event["walk_off_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["walk_off_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if not at_bat_event["all_runners_driven_in_index"][at_bat_event["walk_off_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["walk_off_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                        else:
                            if at_bat_event["all_runners_rbi_index"][at_bat_event["walk_off_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["walk_off_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if at_bat_event["all_runners_driven_in_index"][at_bat_event["walk_off_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["walk_off_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                    if not is_sub_rbi:
                        is_rbi = False
                        is_winning_rbi = False
                        matching_rbi_players = []
                    else:
                        matching_rbi_players.append(at_bat_event["all_runners_index"][at_bat_event["walk_off_index"]])
                        if not is_sub_winning_rbi:
                            is_winning_rbi = False
                        
                    if not is_sub_driven_in:
                        is_driven_in = False
                        is_winning_driven_in = False
                        matching_driven_in_players = []
                    else:
                        matching_driven_in_players.append(at_bat_event["all_runners_index"][at_bat_event["walk_off_index"]])
                        if not is_sub_winning_driven_in:
                            is_winning_driven_in = False
                            
            if "Game Tying" in qualifiers:
                if at_bat_event["GameTying"]:
                    has_one_qual = True
                    is_sub_rbi = True
                    is_sub_winning_rbi = True
                    is_sub_driven_in = True
                    is_sub_winning_driven_in = True
                    for qual_object in qualifiers["Game Tying"]:
                        if not qual_object["negate"]:
                            if not at_bat_event["all_runners_rbi_index"][at_bat_event["game_tying_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if not at_bat_event["all_runners_driven_in_index"][at_bat_event["game_tying_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                        else:
                            if at_bat_event["all_runners_rbi_index"][at_bat_event["game_tying_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if at_bat_event["all_runners_driven_in_index"][at_bat_event["game_tying_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                    if not is_sub_rbi:
                        is_rbi = False
                        is_winning_rbi = False
                        matching_rbi_players = []
                    else:
                        matching_rbi_players.append(at_bat_event["all_runners_index"][at_bat_event["game_tying_index"]])
                        if not is_sub_winning_rbi:
                            is_winning_rbi = False
                        
                    if not is_sub_driven_in:
                        is_driven_in = False
                        is_winning_driven_in = False
                        matching_driven_in_players = []
                    else:
                        matching_driven_in_players.append(at_bat_event["all_runners_index"][at_bat_event["game_tying_index"]])
                        if not is_sub_winning_driven_in:
                            is_winning_driven_in = False
                        
            if "Go Ahead" in qualifiers:
                if at_bat_event["GoAhead"]:
                    has_one_qual = True
                    is_sub_rbi = True
                    is_sub_winning_rbi = True
                    is_sub_driven_in = True
                    is_sub_winning_driven_in = True
                    for qual_object in qualifiers["Go Ahead"]:
                        if not qual_object["negate"]:
                            if not at_bat_event["all_runners_rbi_index"][at_bat_event["go_ahead_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["go_ahead_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if not at_bat_event["all_runners_driven_in_index"][at_bat_event["go_ahead_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["go_ahead_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                        else:
                            if at_bat_event["all_runners_rbi_index"][at_bat_event["go_ahead_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["go_ahead_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if at_bat_event["all_runners_driven_in_index"][at_bat_event["go_ahead_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["go_ahead_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                    if not is_sub_rbi:
                        is_rbi = False
                        is_winning_rbi = False
                        matching_rbi_players = []
                    else:
                        matching_rbi_players.append(at_bat_event["all_runners_index"][at_bat_event["go_ahead_index"]])
                        if not is_sub_winning_rbi:
                            is_winning_rbi = False
                        
                    if not is_sub_driven_in:
                        is_driven_in = False
                        is_winning_driven_in = False
                        matching_driven_in_players = []
                    else:
                        matching_driven_in_players.append(at_bat_event["all_runners_index"][at_bat_event["go_ahead_index"]])
                        if not is_sub_winning_driven_in:
                            is_winning_driven_in = False

            if "Go Ahead Or Game Tying" in qualifiers:
                if at_bat_event["GoAheadOrGameTying"]:
                    has_one_qual = True
                    is_sub_rbi = True
                    is_sub_winning_rbi = True
                    is_sub_driven_in = True
                    is_sub_winning_driven_in = True
                    for qual_object in qualifiers["Go Ahead Or Game Tying"]:
                        if not qual_object["negate"]:
                            if not at_bat_event["all_runners_rbi_index"][at_bat_event["go_ahead_or_game_tying_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["go_ahead_or_game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if not at_bat_event["all_runners_driven_in_index"][at_bat_event["go_ahead_or_game_tying_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["go_ahead_or_game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                        else:
                            if at_bat_event["all_runners_rbi_index"][at_bat_event["go_ahead_or_game_tying_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["go_ahead_or_game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if at_bat_event["all_runners_driven_in_index"][at_bat_event["go_ahead_or_game_tying_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["go_ahead_or_game_tying_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                    if not is_sub_rbi:
                        is_rbi = False
                        is_winning_rbi = False
                        matching_rbi_players = []
                    else:
                        matching_rbi_players.append(at_bat_event["all_runners_index"][at_bat_event["go_ahead_or_game_tying_index"]])
                        if not is_sub_winning_rbi:
                            is_winning_rbi = False
                        
                    if not is_sub_driven_in:
                        is_driven_in = False
                        is_winning_driven_in = False
                        matching_driven_in_players = []
                    else:
                        matching_driven_in_players.append(at_bat_event["all_runners_index"][at_bat_event["go_ahead_or_game_tying_index"]])
                        if not is_sub_winning_driven_in:
                            is_winning_driven_in = False
                        
            if "Game Winning" in qualifiers:
                if at_bat_event["GameWinning"]:
                    has_one_qual = True
                    is_sub_rbi = True
                    is_sub_winning_rbi = True
                    is_sub_driven_in = True
                    is_sub_winning_driven_in = True
                    for qual_object in qualifiers["Game Winning"]:
                        if not qual_object["negate"]:
                            if not at_bat_event["all_runners_rbi_index"][at_bat_event["game_winning_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["game_winning_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if not at_bat_event["all_runners_driven_in_index"][at_bat_event["game_winning_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["game_winning_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                        else:
                            if at_bat_event["all_runners_rbi_index"][at_bat_event["game_winning_index"]]:
                                is_sub_rbi = False
                                is_sub_winning_rbi = False
                            elif at_bat_event["game_winning_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_rbi = False

                            if at_bat_event["all_runners_driven_in_index"][at_bat_event["game_winning_index"]]:
                                is_sub_driven_in = False
                                is_sub_winning_driven_in = False
                            elif at_bat_event["game_winning_index"] != at_bat_event["game_winning_index"]:
                                is_sub_winning_driven_in = False
                    if not is_sub_rbi:
                        is_rbi = False
                        is_winning_rbi = False
                        matching_rbi_players = []
                    else:
                        matching_rbi_players.append(at_bat_event["all_runners_index"][at_bat_event["game_winning_index"]])
                        if not is_sub_winning_rbi:
                            is_winning_rbi = False
                        
                    if not is_sub_driven_in:
                        is_driven_in = False
                        is_winning_driven_in = False
                        matching_driven_in_players = []
                    else:
                        matching_driven_in_players.append(at_bat_event["all_runners_index"][at_bat_event["game_winning_index"]])
                        if not is_sub_winning_driven_in:
                            is_winning_driven_in = False

            if "Driven In" in qualifiers or "Batted In" in qualifiers or "Earned" in qualifiers:
                for index, sub_player in enumerate(at_bat_event["runners_batted_in"]):
                    if "Driven In" in qualifiers:
                        found_player_match = True
                        for qual_object in qualifiers["Driven In"]:
                            has_match = False
                            for player in qual_object["values"]:
                                if sub_player == player["mlb_id"]:
                                    has_match = True
                            if qual_object["negate"]:
                                if has_match:
                                    found_player_match = False
                            else:
                                if not has_match:
                                    found_player_match = False
                        if found_player_match == False:
                            continue
                    if "Batted In" in qualifiers:
                        found_player_match = True
                        for qual_object in qualifiers["Batted In"]:
                            has_match = False
                            for player in qual_object["values"]:
                                if sub_player == player["mlb_id"]:
                                    has_match = True
                            if qual_object["negate"]:
                                if has_match:
                                    found_player_match = False
                            else:
                                if not has_match:
                                    found_player_match = False
                        if found_player_match == False:
                            continue
                    if "Earned" in qualifiers:
                        found_player_match = True
                        for qual_object in qualifiers["Earned"]:
                            has_match = at_bat_event["earned_runners_batted_in"][index]
                            if qual_object["negate"]:
                                if has_match:
                                    found_player_match = False
                            else:
                                if not has_match:
                                    found_player_match = False
                        if found_player_match == False:
                            continue

                    if has_one_qual:
                        if sub_player in matching_rbi_players:
                            row["RBI"] += 1
                            if index == at_bat_event["winning_rbi_runner_index"]:
                                row["GWRBI"] += 1
                    else:
                        row["RBI"] += 1
                        if index == at_bat_event["winning_rbi_runner_index"]:
                            row["GWRBI"] += 1

                for index, sub_player in enumerate(at_bat_event["runners_driven_in"]):
                    if "Driven In" in qualifiers:
                        found_player_match = True
                        for qual_object in qualifiers["Driven In"]:
                            has_match = False
                            for player in qual_object["values"]:
                                if sub_player == player["mlb_id"]:
                                    has_match = True
                            if qual_object["negate"]:
                                if has_match:
                                    found_player_match = False
                            else:
                                if not has_match:
                                    found_player_match = False
                        if found_player_match == False:
                            continue
                    if "Batted In" in qualifiers:
                        found_player_match = True
                        for qual_object in qualifiers["Batted In"]:
                            has_match = False
                            for player in qual_object["values"]:
                                if sub_player == player["mlb_id"]:
                                    has_match = True
                            if qual_object["negate"]:
                                if has_match:
                                    found_player_match = False
                            else:
                                if not has_match:
                                    found_player_match = False
                        if found_player_match == False:
                            continue
                    if "Earned" in qualifiers:
                        found_player_match = True
                        for qual_object in qualifiers["Earned"]:
                            has_match = at_bat_event["earned_runners_driven_in"][index]
                            if qual_object["negate"]:
                                if has_match:
                                    found_player_match = False
                            else:
                                if not has_match:
                                    found_player_match = False
                        if found_player_match == False:
                            continue

                    if has_one_qual:
                        if sub_player in matching_driven_in_players:
                            row["DrivenIn"] += 1
                            if index == at_bat_event["winning_driven_in_runner_index"]:
                                row["GWDrivenIn"] += 1
                    else:
                        row["DrivenIn"] += 1
                        if index == at_bat_event["winning_driven_in_runner_index"]:
                            row["GWDrivenIn"] += 1
            else:
                if has_one_qual:
                    if is_rbi:
                        row["RBI"] += 1
                        if at_bat_event["is_winning_rbi"] and is_winning_rbi:
                            row["GWRBI"] += 1
                    if is_driven_in:
                        row["DrivenIn"] += 1
                        if at_bat_event["is_winning_driven_in"] and is_winning_driven_in:
                            row["GWDrivenIn"] += 1
                else:
                    row["RBI"] += at_bat_event["rbis"]
                    if at_bat_event["is_winning_rbi"]:
                        row["GWRBI"] += 1
                    row["DrivenIn"] += at_bat_event["driven_in"]
                    if at_bat_event["is_winning_driven_in"]:
                        row["GWDrivenIn"] += 1
        else:
            row["RBI"] += at_bat_event["rbis"]
            if at_bat_event["is_winning_rbi"]:
                row["GWRBI"] += 1
            row["DrivenIn"] += at_bat_event["driven_in"]
            if at_bat_event["is_winning_driven_in"]:
                row["GWDrivenIn"] += 1

        if "home_run" in event_name and at_bat_event["rbis"] == 4:
            row["Slam"] += 1

        if event_name not in ("no_stats", "no_stats_sb"):
            if at_bat_event["man_on_first"] and at_bat_event["outs"] < 2:
                row["GDPO"] += 1
        
        if at_bat_event["num_outs"] == 1:
            row["IP"] += 1/3
        elif at_bat_event["num_outs"] == 2:
            row["IP"] += 2/3
        elif at_bat_event["num_outs"] == 3:
            row["IP"] += 1

        if at_bat_event["ind_pitches"]:
            if row_event_info.get("SO", 0):
                ind_pitch = at_bat_event["ind_pitches"][len(at_bat_event["ind_pitches"]) - 1]
                if ind_pitch == "C":
                    row["L/SO"] += 1
                elif ind_pitch in ("S", "M", "Q", "W", "T", "O"):
                    row["S/SO"] += 1
                row["2StrK"] += 1

def add_pitch_row_numbers(row, at_bat_event, event_name, qualifiers, pitch_index, ind_pitch, pitch_event_obj):
    row["Pit"] += 1
    if at_bat_event["pitch_speeds"]:
        pitch_speed = at_bat_event["pitch_speeds"][pitch_index]
        if pitch_speed != None:
            row["MPHRaw"] += pitch_speed
            if pitch_speed > row["MaxMPH"]:
                row["MaxMPH"] = pitch_speed
            if pitch_speed < row["MinMPH"]:
                row["MinMPH"] = pitch_speed
            row["MPHPit"] += 1
    if at_bat_event["pitch_la"]:
        pitch_speed = at_bat_event["pitch_la"][pitch_index]
        if pitch_speed != None:
            row["LARaw"] += pitch_speed
            if pitch_speed > row["MaxLA"]:
                row["MaxLA"] = pitch_speed
            if pitch_speed < row["MinLA"]:
                row["MinLA"] = pitch_speed
            if pitch_speed >= 8 and pitch_speed <= 32:
                row["SwtSpt"] += 1
            row["LAPit"] += 1
    if at_bat_event["pitch_ev"]:
        pitch_speed = at_bat_event["pitch_ev"][pitch_index]
        if pitch_speed != None:
            row["EVRaw"] += pitch_speed
            if pitch_speed > row["MaxEV"]:
                row["MaxEV"] = pitch_speed
            if pitch_speed < row["MinEV"]:
                row["MinEV"] = pitch_speed
            if pitch_speed >= 95:
                row["HardHit"] += 1
            row["EVPit"] += 1
    if at_bat_event["pitch_spin"]:
        pitch_speed = at_bat_event["pitch_spin"][pitch_index]
        if pitch_speed != None:
            row["SpinRaw"] += pitch_speed
            if pitch_speed > row["MaxSpin"]:
                row["MaxSpin"] = pitch_speed
            if pitch_speed < row["MinSpin"]:
                row["MinSpin"] = pitch_speed
            row["SpinPit"] += 1
    if at_bat_event["hit_dist"]:
        pitch_speed = at_bat_event["hit_dist"][pitch_index]
        if pitch_speed != None:
            row["HitDistRaw"] += pitch_speed
            if pitch_speed > row["MaxDist"]:
                row["MaxDist"] = pitch_speed
            if pitch_speed < row["MinDist"]:
                row["MinDist"] = pitch_speed
            row["HitDistPit"] += 1
    if at_bat_event["pitch_x"] and at_bat_event["pitch_y"] and at_bat_event["top_strike_zone"] and at_bat_event["bottom_strike_zone"]:
        pitch_x = at_bat_event["pitch_x"][pitch_index]
        pitch_y = at_bat_event["pitch_y"][pitch_index]
        top_strike_zone = at_bat_event["top_strike_zone"][pitch_index]
        bottom_strike_zone = at_bat_event["bottom_strike_zone"][pitch_index]
        if pitch_x != None and pitch_y != None:
            is_ball = pitch_y > top_strike_zone + (1.5 / 12) or pitch_y < bottom_strike_zone - (1.5 / 12) or pitch_x > (10 / 12) or pitch_x < -(10 / 12)
            if is_ball:
                row["PitBall"] += 1
                if ind_pitch in ("S", "M", "Q", "W", "T", "O", "F", "L", "R", "X", "E", "D", "Y"):
                    row["Chase"] += 1
            else:
                row["PitStrike"] += 1

    if ind_pitch == "C":
        row["LkStr"] += 1
        row["Str"] += 1
        if pitch_index == 0:
            row["1stStr"] += 1
    elif ind_pitch in ("S", "M", "Q", "W", "T", "O"):
        row["SwStr"] += 1
        if ind_pitch not in ["M"]:
            row["SwgStr"] += 1
        row["Str"] += 1
        if pitch_index == 0:
            row["1stStr"] += 1
    elif ind_pitch in ("F", "L", "R", "X", "E", "D", "Y"):
        row["CntStr"] += 1
        row["Str"] += 1
        if pitch_index == 0:
            row["1stStr"] += 1
    elif ind_pitch in ("B", "I", "H", "V", "P"):
        row["Bal"] += 1
    
    two_str_qual = [{
        "negate" : False,
        "values" : {
            "balls" : {
                "start_val" : 0,
                "end_val" : 3
            },
            "strikes" : {
                "start_val" : 2,
                "end_val" : 2
            }
        }
    }]
    if handle_count_qual(pitch_event_obj, two_str_qual, False, False):
        row["2StrPit"] += 1

    pitch_type = pitch_event_obj["pitch_types"][pitch_index]
    if pitch_type:
        row["PitTypes"].add(pitch_type.lower().replace("-", " "))

def handle_da_mlb_quals(row, event_name, at_bat_event, qualifiers, player_data, player_type, player_game_info, skip_pitch_events=False, skip_career_events=False):
    if "Batting Against" in qualifiers:
        for qual_object in qualifiers["Batting Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["pitcher"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Pitching Against" in qualifiers:
        for qual_object in qualifiers["Pitching Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["batter"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Teammate On First" in qualifiers:
        for qual_object in qualifiers["Teammate On First"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["1B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Teammate On Second" in qualifiers:
        for qual_object in qualifiers["Teammate On Second"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["2B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Teammate On Third" in qualifiers:
        for qual_object in qualifiers["Teammate On Third"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["3B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Teammate On Base" in qualifiers:
        for qual_object in qualifiers["Teammate On Base"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["1B"] == player["mlb_id"] or at_bat_event["men_on_base_map"]["2B"] == player["mlb_id"] or at_bat_event["men_on_base_map"]["3B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Opponent On First" in qualifiers:
        for qual_object in qualifiers["Opponent On First"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["1B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent On Second" in qualifiers:
        for qual_object in qualifiers["Opponent On Second"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["2B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent On Third" in qualifiers:
        for qual_object in qualifiers["Opponent On Third"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["3B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Opponent On Base" in qualifiers:
        for qual_object in qualifiers["Opponent On Base"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["men_on_base_map"]["1B"] == player["mlb_id"] or at_bat_event["men_on_base_map"]["2B"] == player["mlb_id"] or at_bat_event["men_on_base_map"]["3B"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Against First Name" in qualifiers:
        for qual_object in qualifiers["Batting Against First Name"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["pitcher_first"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Pitching Against First Name" in qualifiers:
        for qual_object in qualifiers["Pitching Against First Name"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["batter_first"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Against Birth Name" in qualifiers:
        for qual_object in qualifiers["Batting Against Birth Name"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["pitcher_birth_first"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Pitching Against Birth Name" in qualifiers:
        for qual_object in qualifiers["Pitching Against Birth Name"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["batter_birth_first"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Against First Or Birth Name" in qualifiers:
        for qual_object in qualifiers["Batting Against First Or Birth Name"]:
            has_match = False
            for player in qual_object["values"]:
                first_name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["pitcher_birth_first"])).strip()
                birth_name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["pitcher_first"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if first_name.lower() == player or birth_name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Pitching Against First Or Birth Name" in qualifiers:
        for qual_object in qualifiers["Pitching Against First Or Birth Name"]:
            has_match = False
            for player in qual_object["values"]:
                first_name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["batter_birth_first"])).strip()
                birth_name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["batter_first"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if first_name.lower() == player or birth_name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Against Last Name" in qualifiers:
        for qual_object in qualifiers["Batting Against Last Name"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["pitcher_last"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Pitching Against Last Name" in qualifiers:
        for qual_object in qualifiers["Pitching Against Last Name"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["batter_last"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Against Birth Country" in qualifiers:
        if not at_bat_event["pitcher_country"]:
            return False
        for qual_object in qualifiers["Batting Against Birth Country"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["pitcher_country"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
                elif name.lower() in manual_country_map and manual_country_map[name.lower()] == player:
                    has_match = True
                elif player in manual_country_map and manual_country_map[player] == name.lower():
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Pitching Against Birth Country" in qualifiers:
        if not at_bat_event["batter_country"]:
            return False
        for qual_object in qualifiers["Pitching Against Birth Country"]:
            has_match = False
            for player in qual_object["values"]:
                name = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", at_bat_event["batter_country"])).strip()
                player = re.sub(r"\s+", " ", re.sub(r"[^\w\-\s.']", "", player)).strip()
                if name.lower() == player:
                    has_match = True
                elif name.lower() in manual_country_map and manual_country_map[name.lower()] == player:
                    has_match = True
                elif player in manual_country_map and manual_country_map[player] == name.lower():
                    has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Rookie" in qualifiers:
        for qual_object in qualifiers["Facing Rookie"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Qualified Rookie" in qualifiers:
        for qual_object in qualifiers["Facing Qualified Rookie"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Facing Stat Rank" in qualifiers:
        for qual_object in qualifiers["Facing Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing League Stat Rank" in qualifiers:
        for qual_object in qualifiers["Facing League Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing NL Stat Rank" in qualifiers:
        for qual_object in qualifiers["Facing NL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing AL Stat Rank" in qualifiers:
        for qual_object in qualifiers["Facing AL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Stat Percent" in qualifiers:
        for qual_object in qualifiers["Facing Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing League Stat Percent" in qualifiers:
        for qual_object in qualifiers["Facing League Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing NL Stat Percent" in qualifiers:
        for qual_object in qualifiers["Facing NL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing AL Stat Percent" in qualifiers:
        for qual_object in qualifiers["Facing AL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Stat" in qualifiers:
        for qual_object in qualifiers["Facing Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing AL Stat" in qualifiers:
        for qual_object in qualifiers["Facing AL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing NL Stat" in qualifiers:
        for qual_object in qualifiers["Facing NL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False
            has_match = at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in qual_object["year_map_obj"][row["Year"]]
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting In Front Of League Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of League Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of AL Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of AL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of NL Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of NL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Behind Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Behind League Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind League Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Behind AL Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind AL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Behind NL Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind NL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Batting Next To Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Next To League Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To League Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Next To AL Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To AL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Next To NL Stat Rank" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To NL Stat Rank"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting In Front Of Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting In Front Of League Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of League Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of AL Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of AL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of NL Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of NL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Behind Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Behind League Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind League Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Behind AL Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind AL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Behind NL Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind NL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Batting Next To Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Next To League Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To League Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Next To AL Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To AL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Next To NL Stat Percent" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To NL Stat Percent"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting In Front Of Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of AL Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of AL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of NL Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting In Front Of NL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Behind Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Behind AL Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind AL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Behind NL Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Behind NL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Batting Next To Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Next To AL Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To AL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Next To NL Stat" in qualifiers:
        has_row_match = True                        
        for qual_object in qualifiers["Batting Next To NL Stat"]:
            if row["Year"] not in qual_object["year_map_obj"]:
                return False

            match_batter_posses = set()
            if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                match_batter_posses.add(9)
                match_batter_posses.add(2)
            elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                match_batter_posses.add(1)
                match_batter_posses.add(8)
            else:
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1)
                match_batter_posses.add((at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1)

            match_batters = set()
            for match_batter in at_bat_event["team_batting_order_map"]:
                if at_bat_event["team_batting_order_map"][match_batter] in match_batter_posses:
                    match_batters.add(match_batter)

            has_match = match_batters.intersection(qual_object["year_map_obj"][row["Year"]])

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Driven In" in qualifiers:
        if event_name != "batting_events":
            return False

        for qual_object in qualifiers["Driven In"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if player["mlb_id"] in at_bat_event["runners_driven_in"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batted In" in qualifiers:
        if event_name != "batting_events":
            return False

        for qual_object in qualifiers["Batted In"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if player["mlb_id"] in at_bat_event["runners_batted_in"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Back To Back With" in qualifiers:
        if event_name != "batting_events":
            return False

        for index, qual_object in enumerate(qualifiers["Back To Back With"]):
            next_event = at_bat_event
            for event_index in range(0, index + 1):
                if "next_event" in next_event and next_event["next_event"] and next_event["next_event"]["result"] == at_bat_event["result"]:
                    next_event = next_event["next_event"]
                else:
                    next_event = None
                    break
            if not next_event:
                return False
            qualifiers_copy = copy.deepcopy(qualifiers)
            del qualifiers_copy["Back To Back With"]
            if not handle_da_mlb_quals(row, event_name, next_event, qualifiers_copy, player_data, player_type, player_game_info, skip_pitch_events, skip_career_events):
                return False

            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False
            
            has_match = False
            for player in qual_object["values"]:
                if next_event["batter"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Batting Behind" in qualifiers:
        has_row_match = True
        for index, qual_object in enumerate(qualifiers["Batting Behind"]):
            has_match = False
            for player in qual_object["values"]:
                if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                    if player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == 9:
                        has_match = True
                else:
                    if player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1:
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting In Front Of" in qualifiers:
        has_row_match = True
        for index, qual_object in enumerate(qualifiers["Batting In Front Of"]):
            has_match = False
            for player in qual_object["values"]:
                if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                    if player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == 1:
                        has_match = True
                else:
                    if player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1:
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Batting Next To" in qualifiers:
        has_row_match = True
        for index, qual_object in enumerate(qualifiers["Batting Next To"]):
            has_match = False
            for player in qual_object["values"]:
                if (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 1:
                    if player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == 9:
                        has_match = True
                    elif player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1:
                        has_match = True
                elif (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) == 9:
                    if player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == 1:
                        has_match = True
                    elif player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1:
                        has_match = True
                else:
                    if player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) - 1:
                        has_match = True
                    elif player["mlb_id"] in at_bat_event["team_batting_order_map"] and at_bat_event["team_batting_order_map"][player["mlb_id"]] == (at_bat_event["team_batting_order_map"][player_data["mlb_id"]] if player_data["mlb_id"] in at_bat_event["team_batting_order_map"] else at_bat_event["batting_order_pos"]) + 1:
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Caught By" in qualifiers:
        if event_name != "pitching_events" and event_name != "pitching_run_events":
            return False
        if "C" not in at_bat_event["team_position_map"]:
            return False

        for qual_object in qualifiers["Caught By"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False

            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["team_position_map"]["C"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Stealing On" in qualifiers:
        if at_bat_event["result"] not in ["stolen_base", "caught_stealing"]:
            return False
        if "C" not in at_bat_event["opp_position_map"]:
            return False
        if "is_catcher_po" in at_bat_event and not at_bat_event["is_catcher_po"]:
            return False
        
        for qual_object in qualifiers["Stealing On"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False

            has_match = False
            for player in qual_object["values"]:
                if at_bat_event["opp_position_map"]["C"] == player["mlb_id"]:
                    has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "On Field With" in qualifiers:
        for qual_object in qualifiers["On Field With"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False

            has_match = False
            for player in qual_object["values"]:
                for position in player["pos"]:
                    position = position.upper()
                    if position == "ANY":
                        for position in at_bat_event["team_position_map"]:
                            if position in ("PH", "PR"):
                                if player["mlb_id"] in at_bat_event["team_position_map"][position]:
                                    has_match = True
                            else:
                                if at_bat_event["team_position_map"][position] == player["mlb_id"]:
                                    has_match = True
                    else:
                        if position in position_map:
                            position = position_map[position]
                        if position not in at_bat_event["team_position_map"]:
                            continue
                        if position in ("PH", "PR"):
                            if player["mlb_id"] in at_bat_event["team_position_map"][position]:
                                has_match = True
                        else:
                            if at_bat_event["team_position_map"][position] == player["mlb_id"]:
                                has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "On Field Against" in qualifiers:
        for qual_object in qualifiers["On Field Against"]:
            has_match = False
            for player in qual_object["values"]:
                if row["Tm"].lower() in player["games"] and row["GameID"] in player["games"][row["Tm"].lower()]:
                    has_match = True

            if not qual_object["negate"]:
                if not has_match:
                    return False

            has_match = False
            for player in qual_object["values"]:
                for position in player["pos"]:
                    position = position.upper()
                    if position == "ANY":
                        for position in at_bat_event["opp_position_map"]:
                            if position in ("PH", "PR"):
                                if player["mlb_id"] in at_bat_event["opp_position_map"][position]:
                                    has_match = True
                            else:
                                if at_bat_event["opp_position_map"][position] == player["mlb_id"]:
                                    has_match = True
                    else:
                        if position in position_map:
                            position = position_map[position]
                        if position not in at_bat_event["opp_position_map"]:
                            continue
                        if position in ("PH", "PR"):
                            if player["mlb_id"] in at_bat_event["opp_position_map"][position]:
                                has_match = True
                        else:
                            if at_bat_event["opp_position_map"][position] == player["mlb_id"]:
                                has_match = True
    
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Position" in qualifiers:
        for qual_object in qualifiers["Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map:
                    pos = position_map[pos]
                if pos in ("PH", "PR"):
                    if pos in at_bat_event["team_position_map"] and at_bat_event["team_position_map"][pos] and (player_data["id"] in at_bat_event["team_position_map"][pos] or player_data["mlb_id"] in at_bat_event["team_position_map"][pos]):
                        has_match = True
                else:
                    if pos in at_bat_event["team_position_map"] and at_bat_event["team_position_map"][pos] and (at_bat_event["team_position_map"][pos] == player_data["id"] or at_bat_event["team_position_map"][pos] == player_data["mlb_id"]):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "PH For Position" in qualifiers:
        for qual_object in qualifiers["PH For Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map:
                    pos = position_map[pos]
                if pos == at_bat_event["next_play_pinch"]:
                    has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Facing Position" in qualifiers:
        for qual_object in qualifiers["Facing Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map:
                    pos = position_map[pos]
                if pos in ("PH", "PR"):
                    if pos in at_bat_event["opp_position_map"] and at_bat_event["opp_position_map"][pos] and (at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in at_bat_event["opp_position_map"][pos]):
                        has_match = True
                else:
                    if pos in at_bat_event["opp_position_map"] and at_bat_event["opp_position_map"][pos] and (at_bat_event["opp_position_map"][pos] == at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"]):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing PH For Position" in qualifiers:
        for qual_object in qualifiers["Facing PH For Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map:
                    pos = position_map[pos]
                if pos == at_bat_event["next_play_pinch"]:
                    has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Primary Position" in qualifiers:
        for qual_object in qualifiers["Facing Primary Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map:
                    pos = position_map[pos]
                if at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in at_bat_event["opp_primary_position_map"] and at_bat_event["opp_primary_position_map"][at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"]] and (at_bat_event["opp_primary_position_map"][at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"]] == pos):
                    has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Facing Main Position" in qualifiers:
        for qual_object in qualifiers["Facing Main Position"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map:
                    pos = position_map[pos]
                if at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"] in at_bat_event["opp_main_position_map"] and at_bat_event["opp_main_position_map"][at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"]] and (at_bat_event["opp_main_position_map"][at_bat_event["pitcher" if player_type["da_type"] == "Batter" else "batter"]] == pos):
                    has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Facing Pitcher" in qualifiers:
        if player_type["da_type"] == "Batter":
            is_pitcher = at_bat_event["pitcher"] in at_bat_event["opp_main_position_map"] and at_bat_event["opp_main_position_map"][at_bat_event["pitcher"]] and (at_bat_event["opp_main_position_map"][at_bat_event["pitcher"]] == "P")
            if not is_pitcher and at_bat_event["pitcher"] in pitcher_overrides:
                is_pitcher = True
        else:
            is_pitcher = "P" in at_bat_event["opp_position_map"] and at_bat_event["opp_position_map"]["P"] and at_bat_event["opp_position_map"]["P"] == at_bat_event["batter"]
            
        for qual_object in qualifiers["Facing Pitcher"]:
            if qual_object["negate"]:
                if is_pitcher:
                    return False
            else:
                if not is_pitcher:
                    return False

    if "Facing Position Player" in qualifiers:
        if player_type["da_type"] == "Batter":
            is_pitcher = at_bat_event["pitcher"] in at_bat_event["opp_main_position_map"] and at_bat_event["opp_main_position_map"][at_bat_event["pitcher"]] and (at_bat_event["opp_main_position_map"][at_bat_event["pitcher"]] == "P")
            if not is_pitcher and at_bat_event["pitcher"] in pitcher_overrides:
                is_pitcher = True
        else:
            is_pitcher = "P" in at_bat_event["opp_position_map"] and at_bat_event["opp_position_map"]["P"] and at_bat_event["opp_position_map"]["P"] == at_bat_event["batter"]
        
        for qual_object in qualifiers["Facing Position Player"]:
            if qual_object["negate"]:
                if not is_pitcher:
                    return False
            else:
                if is_pitcher:
                    return False

    if "Bases Empty" in qualifiers:
        if not handle_occupied_qual(at_bat_event, qualifiers["Bases Empty"], "Empty"):
            return False

    if "Men On Base" in qualifiers:
        if not handle_occupied_qual(at_bat_event, qualifiers["Men On Base"], "Men_On"):
            return False

    if "RISP" in qualifiers:
        if not handle_occupied_qual(at_bat_event, qualifiers["RISP"], "RISP"):
            return False
    
    if "Inherited" in qualifiers:
        is_inherited = False
        if event_name == "pitching_run_events" and at_bat_event["is_inherited"]:
            is_inherited = True

        for qual_object in qualifiers["Inherited"]:
            if qual_object["negate"]:
                if is_inherited:
                    return False
            else:
                if not is_inherited:
                    return False

    if "Earned" in qualifiers:
        if at_bat_event["result"] == "run_scored":
            is_earned = not at_bat_event["is_unearned_run"]
            for qual_object in qualifiers["Earned"]:
                if qual_object["negate"]:
                    if is_earned:
                        return False
                else:
                    if not is_earned:
                        return False
    
    if "Batter Reached Base" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Batter Reached Base"], "reached_base"):
            return False
    
    if "Pitcher First Batter Faced" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Pitcher First Batter Faced"], "pitcher_first_batter_faced"):
            return False
    
    if "Batter First Plate Appearance" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Batter First Plate Appearance"], "batter_first_plate_appearance"):
            return False
    
    if "Pitcher Last Batter Faced" in qualifiers:
        at_bat_event["pitcher_last_batter_faced"] = at_bat_event["batters_faced"] == (at_bat_event["pitcher_matchup_map"][at_bat_event["pitcher"]]["current_pa"] - 1)

        if not handle_bool_qual(at_bat_event, qualifiers["Pitcher Last Batter Faced"], "pitcher_last_batter_faced"):
            return False
    
    if "Batter Last Plate Appearance" in qualifiers:
        at_bat_event["batter_last_plate_appearance"] = at_bat_event["plate_appearances"] == (at_bat_event["batter_matchup_map"][at_bat_event["batter"]]["current_pa"] - 1)

        if not handle_bool_qual(at_bat_event, qualifiers["Batter Last Plate Appearance"], "batter_last_plate_appearance"):
            return False

    if "Bases Loaded" in qualifiers:
        if not handle_occupied_qual(at_bat_event, qualifiers["Bases Loaded"], "Loaded"):
            return False
    
    if "Man On First" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Man On First"], "man_on_first"):
            return False
    
    if "Man On Second" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Man On Second"], "man_on_second"):
            return False
    
    if "Man On Third" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Man On Third"], "man_on_third"):
            return False
    
    if "Stealing Second" in qualifiers:
        if at_bat_event["result"] not in ["stolen_base", "caught_stealing"]:
            return False
        if "sb_base" not in at_bat_event or not at_bat_event["sb_base"]:
            return False
            
        for qual_object in qualifiers["Stealing Second"]:
            if qual_object["negate"]:
                if at_bat_event["sb_base"].upper() == "2B":
                    return False
            else:
                if not at_bat_event["sb_base"].upper() == "2B":
                    return False
    
    if "Stealing Third" in qualifiers:
        if at_bat_event["result"] not in ["stolen_base", "caught_stealing"]:
            return False
        if "sb_base" not in at_bat_event or not at_bat_event["sb_base"]:
            return False
            
        for qual_object in qualifiers["Stealing Third"]:
            if qual_object["negate"]:
                if at_bat_event["sb_base"].upper() == "3B":
                    return False
            else:
                if not at_bat_event["sb_base"].upper() == "3B":
                    return False
    
    if "Stealing Home" in qualifiers:
        if at_bat_event["result"] not in ["stolen_base", "caught_stealing"]:
            return False
        if "sb_base" not in at_bat_event or not at_bat_event["sb_base"]:
            return False
            
        for qual_object in qualifiers["Stealing Home"]:
            if qual_object["negate"]:
                if at_bat_event["sb_base"].upper() == "HP":
                    return False
            else:
                if not at_bat_event["sb_base"].upper() == "HP":
                    return False

    if "Facing Lefty" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Facing Lefty"], "batting_lefty" if (event_name == "pitching_events" or event_name == "pitching_run_events") else "pitching_lefty"):
            return False

    if "Facing Righty" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Facing Righty"], "batting_righty" if (event_name == "pitching_events" or event_name == "pitching_run_events") else "pitching_righty"):
            return False
    
    if "Platoon Advantage" in qualifiers:
        qual_str = None
        if (event_name == "pitching_events" or event_name == "pitching_run_events"):
            if at_bat_event["pitching_righty"]:
                qual_str = "batting_righty"
            elif at_bat_event["pitching_lefty"]:
                qual_str = "batting_lefty"
        else:
            if at_bat_event["batting_righty"]:
                qual_str = "pitching_lefty"
            elif at_bat_event["batting_lefty"]:
                qual_str = "pitching_righty"

        if not handle_bool_qual(at_bat_event, qualifiers["Platoon Advantage"], qual_str):
            return False

    if "Batting Lefty" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Batting Lefty"], "batting_lefty"):
            return False
    
    if "Batting Righty" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Batting Righty"], "batting_righty"):
            return False

    if "Pitching Lefty" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Pitching Lefty"], "pitching_lefty"):
            return False

    if "Pitching Righty" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Pitching Righty"], "pitching_righty"):
            return False

    if "Bottom Inning" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Bottom Inning"], "is_top_inning", negate=True):
            return False
    
    if "Top Inning" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Top Inning"], "is_top_inning"):
            return False
    
    if "Walk Off" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Walk Off"], "WalkOff"):
            return False
        
    if "Inside The Park HR" in qualifiers:
        if not "home_run" in at_bat_event["result"]:
            return False

        for qual_object in qualifiers["Inside The Park HR"]:
            if qual_object["negate"]:
                if at_bat_event["result"] == "inside_the_park_home_run":
                    return False
            else:
                if not at_bat_event["result"] == "inside_the_park_home_run":
                    return False
    
    if "Walk Off Opportunity" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Walk Off Opportunity"], "WalkOffOpp"):
            return False
    
    if "Game Tying" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Game Tying"], "GameTying"):
            return False
    
    if "Game Tying Opportunity" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Game Tying Opportunity"], "GameTyingOpp"):
            return False

    if "Game Winning" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Game Winning"], "GameWinning"):
            return False
    
    if "Go Ahead Opportunity" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead Opportunity"], "GoAheadOpp"):
            return False
    
    if "Go Ahead Or Game Tying Opportunity" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Game Tying Opportunity"], "GoAheadOrGameTyingOpp"):
            return False

    if "Go Ahead" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead"], "GoAhead"):
            return False

    if "Go Ahead Or Game Tying" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Game Tying"], "GoAheadOrGameTying"):
            return False
    
    if "Close" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Close"], "is_close"):
            return False
    
    if "Late" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Late"], "is_late"):
            return False

    if "Tying On Deck" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Tying On Deck"], "TyingOnDeck"):
            return False
    
    if "Go Ahead On Deck" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead On Deck"], "WinningOnDeck"):
            return False
    
    if "Tying On First" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Tying On First"], "TyingOnFirst"):
            return False
    
    if "Go Ahead On First" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead On First"], "WinningOnFirst"):
            return False
    
    if "Tying On Second" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Tying On Second"], "TyingOnSecond"):
            return False
    
    if "Go Ahead On Second" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead On Second"], "WinningOnSecond"):
            return False
        
    if "Tying On Third" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Tying On Third"], "TyingOnThird"):
            return False
    
    if "Go Ahead On Third" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead On Third"], "WinningOnThird"):
            return False
    
    if "Tying On Base" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Tying On Base"], "TyingOnBase"):
            return False
    
    if "Go Ahead On Base" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead On Base"], "WinningOnBase"):
            return False
    
    if "Tying At Bat" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Tying At Bat"], "TyingAtBat"):
            return False
    
    if "Go Ahead At Bat" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead At Bat"], "WinningAtBat"):
            return False
    
    if "Tying In Scoring" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Tying In Scoring"], "TyingInScoring"):
            return False
    
    if "Go Ahead In Scoring" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Go Ahead In Scoring"], "WinningInScoring"):
            return False
    
    if "Go Ahead Or Tying On Deck" in qualifiers:
        if not (handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Deck"], "WinningOnDeck") or handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Deck"], "TyingOnDeck")):
            return False
    
    if "Go Ahead Or Tying On First" in qualifiers:
        if not (handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On First"], "WinningOnFirst") or handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On First"], "TyingOnFirst")):
            return False
    
    if "Go Ahead Or Tying On Second" in qualifiers:
        if not (handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Second"], "WinningOnSecond") or handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Second"], "TyingOnSecond")):
            return False
    
    if "Go Ahead Or Tying On Third" in qualifiers:
        if not (handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Third"], "WinningOnThird") or handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Third"], "TyingOnThird")):
            return False

    if "Go Ahead Or Tying On Base" in qualifiers:
        if not (handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Base"], "WinningOnBase") or handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying On Base"], "TyingOnBase")):
            return False
    
    if "Go Ahead Or Tying At Bat" in qualifiers:
        if not (handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying At Bat"], "WinningAtBat") or handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying At Bat"], "TyingAtBat")):
            return False
    
    if "Go Ahead Or Tying In Scoring" in qualifiers:
        if not (handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying In Scoring"], "WinningInScoring") or handle_bool_qual(at_bat_event, qualifiers["Go Ahead Or Tying In Scoring"], "TyingInScoring")):
            return False
        
    if "Last Inning" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Last Inning"], "LastInning"):
            return False
    
    if "Last Out" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Last Out"], "LastOut"):
            return False
    
    if "Last Batter" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Last Batter"], "LastBatter"):
            return False
    
    if "Extra Innings" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Extra Innings"], "ExtraInnings"):
            return False

    if "Pitch Count" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Pitch Count"], "pitch_count"):
            return False

    if "Pitcher Batters Faced" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Pitcher Batters Faced"], "batters_faced"):
            return False
    
    if "Batter Plate Appearance" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Batter Plate Appearance"], "plate_appearances"):
            return False
    
    if "Pitcher Batters Faced Reversed" in qualifiers:
        at_bat_event["batters_faced_reversed"] = at_bat_event["pitcher_matchup_map"][at_bat_event["pitcher"]]["current_pa"] - at_bat_event["batters_faced"]

        if not handle_num_qual(at_bat_event, qualifiers["Pitcher Batters Faced Reversed"], "batters_faced_reversed"):
            return False
    
    if "Batter Plate Appearance Reversed" in qualifiers:
        at_bat_event["plate_appearances_reversed"] = at_bat_event["batter_matchup_map"][at_bat_event["batter"]]["current_pa"] - at_bat_event["plate_appearances"]

        if not handle_num_qual(at_bat_event, qualifiers["Batter Plate Appearance Reversed"], "plate_appearances_reversed"):
            return False
    
    if "Team Pitch Count" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Team Pitch Count"], "team_pitch_count"):
            return False
    
    if "Game Pitch Count" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Game Pitch Count"], "game_pitch_count"):
            return False
    
    if "Starting Pitch Count" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Starting Pitch Count"], "starting_pitch_count"):
            return False

    if "Innings Pitched" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Innings Pitched"], "starting_innings_pitched", is_inning=True):
            return False
    
    if "Ending Innings Pitched" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Ending Innings Pitched"], "innings_pitched", is_inning=True):
            return False

    if "At Bat Pitch Count" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["At Bat Pitch Count"], "pitches"):
            return False
    
    if "Team Score" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Team Score"], "team_runs"):
            return False
    
    if "Opponent Score" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Opponent Score"], "opp_runs"):
            return False
    
    if "Score Margin" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Score Margin"], "run_diff"):
            return False
    
    if "Score Difference" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Score Difference"], "run_diff", absolute=True):
            return False
    
    if "Ending Team Score" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Ending Team Score"], "ending_team_runs"):
            return False
    
    if "Ending Opponent Score" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Ending Opponent Score"], "ending_opp_runs"):
            return False
    
    if "Ending Score Margin" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Ending Score Margin"], "ending_run_diff"):
            return False
    
    if "Ending Score Difference" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Ending Score Difference"], "ending_run_diff", absolute=True):
            return False

    if "Outs" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Outs"], "outs"):
            return False
    
    if "Outs Remaining" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Outs Remaining"], "outs_remaining"):
            return False
    
    if "Ending Outs" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Ending Outs"], "current_outs"):
            return False
        
    if "Strikes" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["Strikes"], True, False, False):
            return False
        
    if "Balls" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["Balls"], False, False, False):
            return False
    
    if "After Strikes" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["After Strikes"], True, True, False):
            return False
        
    if "After Balls" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["After Balls"], False, True, False):
            return False
    
    if "Swinging On Strikes" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["Swinging On Strikes"], True, False, True):
            return False
        
    if "Swinging On Balls" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["Swinging On Balls"], False, False, True):
            return False
    
    if "After Swinging On Strikes" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["After Swinging On Strikes"], True, True, True):
            return False
        
    if "After Swinging On Balls" in qualifiers:
        if not handle_strikes_balls_qual(at_bat_event, qualifiers["After Swinging On Balls"], False, True, True):
            return False
    
    if "Runs" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Runs"], "num_runs"):
            return False
    
    if "Play Outs" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Play Outs"], "num_outs"):
            return False
        
    if "RBIs" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["RBIs"], "rbis"):
            return False
    
    if "Number Drove In" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Number Drove In"], "driven_in"):
            return False

    if "Inning" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Inning"], "inning"):
            return False
    
    if "Inning Reversed" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Inning Reversed"], "inning_reversed"):
            return False
    
    if "Scheduled Inning Reversed" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Scheduled Inning Reversed"], "scheduled_inning_reversed"):
            return False
    
    if "Pitching Against Batting Order" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Pitching Against Batting Order"], "batting_order_pos"):
            return False

    if "Count" in qualifiers:
        if not handle_count_qual(at_bat_event, qualifiers["Count"], False, False):
            return False
    
    if "Swinging On Count" in qualifiers:
        if not handle_count_qual(at_bat_event, qualifiers["Swinging On Count"], False, True):
            return False

    if "Batter Ahead" in qualifiers:
        if not handle_bool_count_qual(at_bat_event, qualifiers["Batter Ahead"], False, "batter_ahead"):
            return False
    
    if "Even Count" in qualifiers:
        if not handle_bool_count_qual(at_bat_event, qualifiers["Even Count"], False, "even"):
            return False
    
    if "Pitcher Ahead" in qualifiers:
        if not handle_bool_count_qual(at_bat_event, qualifiers["Pitcher Ahead"], False, "pitcher_ahead"):
            return False
    
    if "After Batter Ahead" in qualifiers:
        if not handle_bool_count_qual(at_bat_event, qualifiers["After Batter Ahead"], True, "batter_ahead"):
            return False
    
    if "After Even Count" in qualifiers:
        if not handle_bool_count_qual(at_bat_event, qualifiers["After Even Count"], True, "even"):
            return False
    
    if "After Pitcher Ahead" in qualifiers:
        if not handle_bool_count_qual(at_bat_event, qualifiers["After Pitcher Ahead"], True, "pitcher_ahead"):
            return False
    
    if "After Count" in qualifiers:
        if not handle_count_qual(at_bat_event, qualifiers["After Count"], True, False):
            return False
    
    if "After Swinging On Count" in qualifiers:
        if not handle_count_qual(at_bat_event, qualifiers["After Swinging On Count"], True, True):
            return False
    
    if "Time Through Lineup" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Time Through Lineup"], "time_through_lineup"):
            return False
    
    if "Time Facing Opponent" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Time Facing Opponent"], "time_facing_opponent"):
            return False
    
    if "Number Of Men On Base" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Number Of Men On Base"], "men_on_base"):
            return False
    
    if "Number Of Men In Scoring" in qualifiers:
        if not handle_num_qual(at_bat_event, qualifiers["Number Of Men In Scoring"], "men_in_scoring"):
            return False

    if not skip_career_events:
        if "Event Stat" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Event Stat"], False, True, False):
                return False
        
        if "Event Stat Reversed" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Event Stat Reversed"], True, True, False):
                return False

        if "Game Event Stat" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Game Event Stat"], False, False, False):
                return False
        
        if "Game Event Stat Reversed" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Game Event Stat Reversed"], True, False, False):
                return False
        
        if "Starting Event Stat" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Starting Event Stat"], False, True, True):
                return False
        
        if "Starting Event Stat Reversed" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Starting Event Stat Reversed"], True, True, True):
                return False

        if "Starting Game Event Stat" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Starting Game Event Stat"], False, False, True):
                return False
        
        if "Starting Game Event Stat Reversed" in qualifiers:
            if not handle_stat_num_qual(at_bat_event, qualifiers["Starting Game Event Stat Reversed"], True, False, True):
                return False
    
    if "Event Stats" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Event Stats"], False, True, False):
            return False
    
    if "Event Stats Reversed" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Event Stats Reversed"], True, True, False):
            return False
    
    if "Game Event Stats" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Game Event Stats"], False, False, False):
            return False
    
    if "Game Event Stats Reversed" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Game Event Stats Reversed"], True, False, False):
            return False
    
    if "Starting Event Stats" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Starting Event Stats"], False, True, True):
            return False
    
    if "Starting Event Stats Reversed" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Starting Event Stats Reversed"], True, True, True):
            return False
    
    if "Starting Game Event Stats" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Starting Game Event Stats"], False, False, True):
            return False
    
    if "Starting Game Event Stats Reversed" in qualifiers:
        if not handle_stats_num_qual(at_bat_event, qualifiers["Starting Game Event Stats Reversed"], True, False, True):
            return False

    if "Leading Off Game" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Leading Off Game"], "leading_off_team"):
            return False
    
    if "Leading Off Whole Game" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Leading Off Whole Game"], "leading_off_game"):
            return False
    
    if "Leading Off Inning" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Leading Off Inning"], "leading_off_inning"):
            return False
    
    if "Swung At First Pitch" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Swung At First Pitch"], "swung_at_first_pitch"):
            return False
    
    if "First Pitch" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["First Pitch"], "first_pitch"):
            return False

    if "Pinch Hitting" in qualifiers:
        for qual_object in qualifiers["Pinch Hitting"]:
            if qual_object["negate"]:
                if at_bat_event["next_play_pinch"] != None:
                    return False
            else:
                if at_bat_event["next_play_pinch"] == None:
                    return False
    
    if "Facing Starter" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Facing Starter"], "is_starter_pitcher" if player_type["da_type"] == "Batter" else "is_starter_batter"):
            return False
    
    if "Facing Reliever" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Facing Reliever"], "is_reliever_pitcher" if player_type["da_type"] == "Batter" else "is_reliever_batter"):
            return False

    if "Inning Started" in qualifiers:
        if not handle_bool_qual(at_bat_event, qualifiers["Inning Started"], "starting_inning"):
            return False
    
    if "Full Count" in qualifiers:
        for qual_object in qualifiers["Full Count"]:
            has_match = at_bat_event["strikes"] == 2 and at_bat_event["balls"] == 3

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Event Formula" in qualifiers:
        at_bat_event_copy = {}
        for copy_key in at_bat_event:
            at_bat_event_copy[copy_key] = at_bat_event[copy_key]
        at_bat_event_copy["Tm"] = row["Tm"]
        at_bat_event_copy["Opponent"] = row["Opponent"]
        at_bat_event_copy["Year"] = row["Year"]
        at_bat_event_copy["Date"] = row["Date"]
        at_bat_event_copy["DateTime"] = row["DateTime"]
        at_bat_event_copy["is_playoffs"] = row["is_playoffs"]
        sub_player_game_info = {
            "missing_data" : False,
            "batting_events" : [],
            "pitching_events" : [],
            "pitching_run_events" : [],
            "pitch_event_to_run_event" : {}
        }
        sub_player_game_info[event_name].append(at_bat_event)
        perform_sub_mlb_game_qualifiers(at_bat_event_copy, player_data, {}, sub_player_game_info, player_type, True)

        at_bat_event_copy = {k.lower(): v for k, v in at_bat_event_copy.items()}

        for qual_object in qualifiers["Event Formula"]:
            formula = qual_object["values"][0]
            try:
                has_match = bool(calculate_formula("custom_formula", player_data, player_type, formula, at_bat_event_copy, [], safe_eval=True))
            except Exception:
                return False
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Individual Event Stat" in qualifiers:
        at_bat_event_copy = {}
        for copy_key in at_bat_event:
            at_bat_event_copy[copy_key] = at_bat_event[copy_key]
        at_bat_event_copy["Tm"] = row["Tm"]
        at_bat_event_copy["Opponent"] = row["Opponent"]
        at_bat_event_copy["Year"] = row["Year"]
        at_bat_event_copy["Date"] = row["Date"]
        at_bat_event_copy["DateTime"] = row["DateTime"]
        at_bat_event_copy["is_playoffs"] = row["is_playoffs"]
        sub_player_game_info = {
            "missing_data" : False,
            "batting_events" : [],
            "pitching_events" : [],
            "pitching_run_events" : [],
            "pitch_event_to_run_event" : {}
        }
        sub_player_game_info[event_name].append(at_bat_event)
        perform_sub_mlb_game_qualifiers(at_bat_event_copy, player_data, {}, sub_player_game_info, player_type, True)

        at_bat_event_copy = {k.lower(): v for k, v in at_bat_event_copy.items()}

        for qual_object in qualifiers["Individual Event Stat"]:
            has_match = False
            for sub_qual_object in qual_object["values"]:
                stat = sub_qual_object["stat"]

                if stat not in at_bat_event_copy:
                    for header_stat in headers[player_type["da_type"]]:
                        if "display-value" in headers[player_type["da_type"]][header_stat] and headers[player_type["da_type"]][header_stat]["display-value"].lower() == stat:
                            stat = header_stat.lower()
                
                if stat in at_bat_event_copy:
                    has_match = at_bat_event_copy[stat] >= sub_qual_object["start_val"] and at_bat_event_copy[stat] <= sub_qual_object["end_val"]
                
                if has_match:
                    break

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Event Time" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return

        for qual_object in qualifiers["Event Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            event_time = event_time.astimezone(pytz.timezone(qual_object["values"]["time_zone"])).time().replace(microsecond=0)
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Team Event Time" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return

        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        event_time = event_time.astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0)
        for qual_object in qualifiers["Team Event Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Opponent Event Time" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return

        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        event_time = event_time.astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0)
        for qual_object in qualifiers["Opponent Event Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Local Event Time" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["time_zone"]

        event_time = event_time.astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0)
        for qual_object in qualifiers["Local Event Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val
                
            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False

    if "Event DateTime" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return

        for qual_object in qualifiers["Event DateTime"]:
            stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(qual_object["values"]["time_zone"])).replace(microsecond=0)
            end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(qual_object["values"]["time_zone"])).replace(microsecond=0)
            event_time = event_time.astimezone(pytz.timezone(qual_object["values"]["time_zone"])).replace(microsecond=0)
            is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False

    if "Team Event DateTime" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return

        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        event_time = event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        for qual_object in qualifiers["Team Event DateTime"]:
            stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
            end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
            is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Opponent Event DateTime" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return

        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        event_time = event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        for qual_object in qualifiers["Opponent Event DateTime"]:
            stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
            end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
            is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Local Event DateTime" in qualifiers:
        event_time = at_bat_event["event_time"]
        if not event_time:
            return
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["time_zone"]

        event_time = event_time.astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
        for qual_object in qualifiers["Local Event DateTime"]:
            stat_val = qual_object["values"]["start_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
            end_val = qual_object["values"]["end_val"].astimezone(pytz.timezone(val_to_check)).replace(microsecond=0)
            is_match = event_time >= stat_val and event_time <= end_val
                
            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False

    if "Event Type" in qualifiers:
        event_type = at_bat_event["event_type"] if "event_type" in at_bat_event else at_bat_event["result"]
        if not event_type:
            return

        for qual_object in qualifiers["Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium in event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Event Type" in qualifiers:
        event_type = at_bat_event["event_type"] if "event_type" in at_bat_event else at_bat_event["result"]
        if not event_type:
            return

        for qual_object in qualifiers["Exact Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium == event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Previous Event Type" in qualifiers:
        event_type = at_bat_event["previous_event_type"] if "previous_event_type" in at_bat_event else at_bat_event["previous_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Previous Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium in event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Previous Exact Event Type" in qualifiers:
        event_type = at_bat_event["previous_event_type"] if "previous_event_type" in at_bat_event else at_bat_event["previous_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Previous Exact Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium == event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Previous Player Event Type" in qualifiers:
        event_type = at_bat_event["previous_player_event_type"] if "previous_player_event_type" in at_bat_event else at_bat_event["previous_player_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Previous Player Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium in event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
            
    if "Previous Exact Player Event Type" in qualifiers:
        event_type = at_bat_event["previous_player_event_type"] if "previous_player_event_type" in at_bat_event else at_bat_event["previous_player_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Previous Exact Player Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium == event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Upcoming Player Event Type" in qualifiers:
        event_type = at_bat_event["upcoming_player_event_type"] if "upcoming_player_event_type" in at_bat_event else at_bat_event["upcoming_player_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Upcoming Player Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium in event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Upcoming Exact Player Event Type" in qualifiers:
        event_type = at_bat_event["upcoming_player_event_type"] if "upcoming_player_event_type" in at_bat_event else at_bat_event["upcoming_player_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Upcoming Exact Player Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium == event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Upcoming Event Type" in qualifiers:
        event_type = at_bat_event["upcoming_event_type"] if "upcoming_event_type" in at_bat_event else at_bat_event["upcoming_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Upcoming Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium in event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Upcoming Exact Event Type" in qualifiers:
        event_type = at_bat_event["upcoming_event_type"] if "upcoming_event_type" in at_bat_event else at_bat_event["upcoming_result"]
        if not event_type:
            return

        for qual_object in qualifiers["Upcoming Exact Event Type"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "out":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "strikeout", "caught_stealing", "pick_off"):
                        has_match = True
                        break
                elif stadium == "hit":
                    if event_type in ("single", "double", "triple", "home_run", "inside_the_park_home_run"):
                        has_match = True
                        break
                elif stadium == "inplay":
                    if event_type in ("out", "grounded_into_double_play", "grounded_into_triple_play", "single", "double", "triple", "home_run", "inside_the_park_home_run", "error", "sac_fly", "sac_bunt"):
                        has_match = True
                        break
                elif stadium == event_type.lower().replace("_", "-"):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Event Description" in qualifiers:
        event_type = at_bat_event["description"]
        if not event_type:
            return

        for qual_object in qualifiers["Event Description"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in event_type.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Event Description" in qualifiers:
        event_type = at_bat_event["description"]
        if not event_type:
            return
            
        for qual_object in qualifiers["Exact Event Description"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == event_type.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Bunting" in qualifiers:
        if "ind_pitches" not in at_bat_event or not at_bat_event["ind_pitches"]:
            return False

        pitch_type = at_bat_event["ind_pitches"][len(at_bat_event["ind_pitches"]) - 1]
        if not pitch_type:
            return False
        is_pitch = pitch_type in ['L', 'M', 'O']

        if not is_pitch:
            event_type = at_bat_event["event_type"] if "event_type" in at_bat_event else at_bat_event["result"]
            if event_type == "sac_bunt":
                is_pitch = True
            if not is_pitch:
                event_type = at_bat_event["description"]
                if event_type and re.search(r"\s+bunts?\s+", event_type):
                    is_pitch = True

        for qual_object in qualifiers["Bunting"]:
            if qual_object["negate"]:
                if is_pitch:
                    return False
            else:
                if not is_pitch:
                    return False
    
    if not skip_pitch_events:
        if "Pitch Type" in qualifiers:
            if "pitch_types" not in at_bat_event or not at_bat_event["pitch_types"]:
                return False

            pitch_type = at_bat_event["pitch_types"][len(at_bat_event["pitch_types"]) - 1]
            if not pitch_type:
                return False

            for qual_object in qualifiers["Pitch Type"]:
                has_match = False
                for stadium in qual_object["values"]:
                    if stadium in pitch_type.lower().replace("-", " "):
                        has_match = True
                        break
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False
        
        if "Exact Pitch Type" in qualifiers:
            if "pitch_types" not in at_bat_event or not at_bat_event["pitch_types"]:
                return False

            pitch_type = at_bat_event["pitch_types"][len(at_bat_event["pitch_types"]) - 1]
            if not pitch_type:
                return False

            for qual_object in qualifiers["Exact Pitch Type"]:
                has_match = False
                for stadium in qual_object["values"]:
                    if stadium == pitch_type.lower().replace("-", " "):
                        has_match = True
                        break
                if qual_object["negate"]:
                    if has_match:
                        return False
                else:
                    if not has_match:
                        return False

        if "Fastball" in qualifiers:
            if "pitch_types" not in at_bat_event or not at_bat_event["pitch_types"]:
                return False

            pitch_type = at_bat_event["pitch_types"][len(at_bat_event["pitch_types"]) - 1]
            if not pitch_type:
                return False
            is_pitch = pitch_type.lower() in ["four-seam fastball", "two-seam fastball", "fastball", "sinker", "cutter", "gyroball"]

            for qual_object in qualifiers["Fastball"]:
                if qual_object["negate"]:
                    if is_pitch:
                        return False
                else:
                    if not is_pitch:
                        return False
            
        if "Offspeed" in qualifiers:
            if "pitch_types" not in at_bat_event or not at_bat_event["pitch_types"]:
                return False

            pitch_type = at_bat_event["pitch_types"][len(at_bat_event["pitch_types"]) - 1]
            if not pitch_type:
                return False
            is_pitch = pitch_type.lower() in ["splitter", "changeup", "forkball", "screwball"]

            for qual_object in qualifiers["Offspeed"]:
                if qual_object["negate"]:
                    if is_pitch:
                        return False
                else:
                    if not is_pitch:
                        return False
        
        if "Breaking" in qualifiers:
            if "pitch_types" not in at_bat_event or not at_bat_event["pitch_types"]:
                return False

            pitch_type = at_bat_event["pitch_types"][len(at_bat_event["pitch_types"]) - 1]
            if not pitch_type:
                return False
            is_pitch = pitch_type.lower() in ["slider", "curveball", "knuckle curve", "slow curve", "eephus", "slurve"]

            for qual_object in qualifiers["Breaking"]:
                if qual_object["negate"]:
                    if is_pitch:
                        return False
                else:
                    if not is_pitch:
                        return False
        
        if "Pitch Speed" in qualifiers:
            if "pitch_speeds" not in at_bat_event or not at_bat_event["pitch_speeds"]:
                return False

            pitch_speed = at_bat_event["pitch_speeds"][len(at_bat_event["pitch_speeds"]) - 1]
            if pitch_speed == None:
                return False

            has_row_match = True
            for qual_object in qualifiers["Pitch Speed"]:
                stat_val = qual_object["values"]["start_val"]
                end_val = qual_object["values"]["end_val"]

                if qual_object["negate"]:
                    if pitch_speed >= stat_val and pitch_speed <= end_val:
                        return False
                else:
                    if not (pitch_speed >= stat_val and pitch_speed <= end_val):
                        return False

        if "Pitch Zone" in qualifiers:
            if "pitch_zones" not in at_bat_event or not at_bat_event["pitch_zones"]:
                return False

            pitch_speed = at_bat_event["pitch_zones"][len(at_bat_event["pitch_zones"]) - 1]
            if pitch_speed == None:
                return False

            has_row_match = True
            for qual_object in qualifiers["Pitch Zone"]:
                stat_val = qual_object["values"]["start_val"]
                end_val = qual_object["values"]["end_val"]

                if qual_object["negate"]:
                    if pitch_speed >= stat_val and pitch_speed <= end_val:
                        return False
                else:
                    if not (pitch_speed >= stat_val and pitch_speed <= end_val):
                        return False
        
        if "Out Of Zone" in qualifiers:
            if "top_strike_zone" not in at_bat_event or not at_bat_event["top_strike_zone"] or "bottom_strike_zone" not in at_bat_event or not at_bat_event["bottom_strike_zone"]:
                return False

            if "pitch_x" not in at_bat_event or not at_bat_event["pitch_x"] or "pitch_y" not in at_bat_event or not at_bat_event["pitch_y"]:
                return False

            pitch_x = at_bat_event["pitch_x"][len(at_bat_event["pitch_x"]) - 1]
            if pitch_x == None:
                return False
            
            pitch_y = at_bat_event["pitch_y"][len(at_bat_event["pitch_y"]) - 1]
            if pitch_y == None:
                return False
            
            top_strike_zone = at_bat_event["top_strike_zone"][len(at_bat_event["top_strike_zone"]) - 1]
            if top_strike_zone == None:
                return False
            
            bottom_strike_zone = at_bat_event["bottom_strike_zone"][len(at_bat_event["bottom_strike_zone"]) - 1]
            if bottom_strike_zone == None:
                return False

            is_ball = pitch_y > top_strike_zone + (1.5 / 12) or pitch_y < bottom_strike_zone - (1.5 / 12) or pitch_x > (10 / 12) or pitch_x < -(10 / 12)

            for qual_object in qualifiers["Out Of Zone"]:
                if qual_object["negate"]:
                    if is_ball:
                        return False
                else:
                    if not is_ball:
                        return False
        
        if "In Zone" in qualifiers:
            if "top_strike_zone" not in at_bat_event or not at_bat_event["top_strike_zone"] or "bottom_strike_zone" not in at_bat_event or not at_bat_event["bottom_strike_zone"]:
                return False

            if "pitch_x" not in at_bat_event or not at_bat_event["pitch_x"] or "pitch_y" not in at_bat_event or not at_bat_event["pitch_y"]:
                return False

            pitch_x = at_bat_event["pitch_x"][len(at_bat_event["pitch_x"]) - 1]
            if pitch_x == None:
                return False
            
            pitch_y = at_bat_event["pitch_y"][len(at_bat_event["pitch_y"]) - 1]
            if pitch_y == None:
                return False
            
            top_strike_zone = at_bat_event["top_strike_zone"][len(at_bat_event["top_strike_zone"]) - 1]
            if top_strike_zone == None:
                return False
            
            bottom_strike_zone = at_bat_event["bottom_strike_zone"][len(at_bat_event["bottom_strike_zone"]) - 1]
            if bottom_strike_zone == None:
                return False

            is_ball = pitch_y > top_strike_zone + (1.5 / 12) or pitch_y < bottom_strike_zone - (1.5 / 12) or pitch_x > (10 / 12) or pitch_x < -(10 / 12)

            for qual_object in qualifiers["In Zone"]:
                if qual_object["negate"]:
                    if not is_ball:
                        return False
                else:
                    if is_ball:
                        return False
        
        if "Pitch Spin" in qualifiers:
            if "pitch_spin" not in at_bat_event or not at_bat_event["pitch_spin"]:
                return False

            pitch_speed = at_bat_event["pitch_spin"][len(at_bat_event["pitch_spin"]) - 1]
            if pitch_speed == None:
                return False

            has_row_match = True
            for qual_object in qualifiers["Pitch Spin"]:
                stat_val = qual_object["values"]["start_val"]
                end_val = qual_object["values"]["end_val"]

                if qual_object["negate"]:
                    if pitch_speed >= stat_val and pitch_speed <= end_val:
                        return False
                else:
                    if not (pitch_speed >= stat_val and pitch_speed <= end_val):
                        return False
    
    if "Exit Velocity" in qualifiers:
        if "pitch_ev" not in at_bat_event or not at_bat_event["pitch_ev"]:
            return False

        pitch_speed = at_bat_event["pitch_ev"][len(at_bat_event["pitch_ev"]) - 1]
        if pitch_speed == None:
            return False

        has_row_match = True
        for qual_object in qualifiers["Exit Velocity"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]

            if qual_object["negate"]:
                if pitch_speed >= stat_val and pitch_speed <= end_val:
                    return False
            else:
                if not (pitch_speed >= stat_val and pitch_speed <= end_val):
                    return False
    
    if "Hit Distance" in qualifiers:
        if "hit_dist" not in at_bat_event or not at_bat_event["hit_dist"]:
            return False

        pitch_speed = at_bat_event["hit_dist"][len(at_bat_event["hit_dist"]) - 1]
        if pitch_speed == None:
            return False

        has_row_match = True
        for qual_object in qualifiers["Hit Distance"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]

            if qual_object["negate"]:
                if pitch_speed >= stat_val and pitch_speed <= end_val:
                    return False
            else:
                if not (pitch_speed >= stat_val and pitch_speed <= end_val):
                    return False
    
    if "Hit Trajectory" in qualifiers:
        if "hit_traj" not in at_bat_event or not at_bat_event["hit_traj"]:
            return False

        pitch_speed = at_bat_event["hit_traj"][len(at_bat_event["hit_traj"]) - 1]
        if pitch_speed == None:
            return False

        for qual_object in qualifiers["Hit Trajectory"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == pitch_speed.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Hit Hardness" in qualifiers:
        if "hit_hard" not in at_bat_event or not at_bat_event["hit_hard"]:
            return False

        pitch_speed = at_bat_event["hit_hard"][len(at_bat_event["hit_hard"]) - 1]
        if pitch_speed == None:
            return False

        for qual_object in qualifiers["Hit Hardness"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == pitch_speed.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Hit Location" in qualifiers:
        if "hit_loc" not in at_bat_event or not at_bat_event["hit_loc"]:
            return False

        pitch_speed = at_bat_event["hit_loc"][len(at_bat_event["hit_loc"]) - 1]
        if pitch_speed == None:
            return False
        pitch_speed = [loc for loc in pitch_speed]

        has_row_match = True
        for qual_object in qualifiers["Hit Location"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map_reversed:
                    pos = position_map_reversed[pos]
                if pos in pitch_speed:
                    has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Hit Location" in qualifiers:
        if "hit_loc" not in at_bat_event or not at_bat_event["hit_loc"]:
            return False

        pitch_speed = at_bat_event["hit_loc"][len(at_bat_event["hit_loc"]) - 1]
        if pitch_speed == None:
            return False

        has_row_match = True
        for qual_object in qualifiers["Exact Hit Location"]:
            has_match = False
            for pos in qual_object["values"]:
                pos = pos.upper()
                if pos in position_map_reversed:
                    pos = position_map_reversed[pos]
                if pos == pitch_speed:
                    has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Launch Angle" in qualifiers:
        if "pitch_la" not in at_bat_event or not at_bat_event["pitch_la"]:
            return False

        pitch_speed = at_bat_event["pitch_la"][len(at_bat_event["pitch_la"]) - 1]
        if pitch_speed == None:
            return False

        has_row_match = True
        for qual_object in qualifiers["Launch Angle"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]

            if qual_object["negate"]:
                if pitch_speed >= stat_val and pitch_speed <= end_val:
                    return False
            else:
                if not (pitch_speed >= stat_val and pitch_speed <= end_val):
                    return False
    
    if "Hit Coordinates" in qualifiers:
        if not perform_coordinates_qual(at_bat_event, qualifiers["Hit Coordinates"], True, False):
            return False
    
    if "Hit X Coordinate" in qualifiers:
        if not perform_side_coordinates_qual(at_bat_event, qualifiers["Hit X Coordinate"], True, True, False):
            return False
    
    if "Hit Y Coordinate" in qualifiers:
        if not perform_side_coordinates_qual(at_bat_event, qualifiers["Hit Y Coordinate"], True, False, False):
            return False
    
    if "Pitch Coordinates" in qualifiers:
        if not perform_coordinates_qual(at_bat_event, qualifiers["Pitch Coordinates"], False, False):
            return False
    
    if "Pitch X Coordinate" in qualifiers:
        if not perform_side_coordinates_qual(at_bat_event, qualifiers["Pitch X Coordinate"], False, True, False):
            return False
    
    if "Pitch Y Coordinate" in qualifiers:
        if not perform_side_coordinates_qual(at_bat_event, qualifiers["Pitch Y Coordinate"], False, False, False):
            return False
    
    if "Absolute Pitch Coordinates" in qualifiers:
        if not perform_coordinates_qual(at_bat_event, qualifiers["Pitch Coordinates"], False, True):
            return False
    
    if "Absolute Pitch X Coordinate" in qualifiers:
        if not perform_side_coordinates_qual(at_bat_event, qualifiers["Pitch X Coordinate"], False, True, True):
            return False
    
    if "Absolute Pitch Y Coordinate" in qualifiers:
        if not perform_side_coordinates_qual(at_bat_event, qualifiers["Pitch Y Coordinate"], False, False, True):
            return False
        
    if "Hit Within Distance" in qualifiers:
        if not perform_custom_circle_qual(at_bat_event, qualifiers["Hit Within Distance"], True, False):
            return False
    
    if "Pitch Within Distance" in qualifiers:
        if not perform_custom_circle_qual(at_bat_event, qualifiers["Pitch Absolute Within Distance"], False, False):
            return False
    
    if "Absolute Pitch Raw Within Distance" in qualifiers:
        if not perform_custom_circle_qual(at_bat_event, qualifiers["Absolute Pitch Within Distance"], False, True):
            return False
    
    if "Event Sub Query" in qualifiers:
        for qual_object in qualifiers["Event Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["GameID"] in player["games"]:
                    has_match = handle_da_mlb_quals(row, event_name, at_bat_event, player["quals"], player_data, player_type, player_game_info, skip_pitch_events, skip_career_events)
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Or Event Sub Query" in qualifiers:
        has_any_match = False
        for qual_object in qualifiers["Or Event Sub Query"]:
            has_match = False
            for player in qual_object["values"]:
                if row["GameID"] in player["games"]:
                    has_match = handle_da_mlb_quals(row, event_name, at_bat_event, player["quals"], player_data, player_type, player_game_info, skip_pitch_events, skip_career_events)
            if qual_object["negate"]:
                if not has_match:
                    has_any_match = True
            else:
                if has_match:
                    has_any_match = True
        if not has_any_match:
            return False

    return True

def perform_coordinates_qual(event, qualifiers, is_hit, is_absolute):
    if is_hit:
        x_coord_str = "hit_x"
        y_coord_str = "hit_y"
    else:
        x_coord_str = "pitch_x"
        y_coord_str = "pitch_y"
        
    if x_coord_str not in event or event[x_coord_str] == None:
        return False
    
    x_val = event[x_coord_str][len(event[x_coord_str]) - 1]
    if x_val == None:
        return False
    
    y_val = event[y_coord_str][len(event[y_coord_str]) - 1]
    if y_val == None:
        return False

    if is_absolute:
        x_val = abs(x_val)
        y_val = abs(y_val)
        
    for qual_object in qualifiers:
        stat_val_x = qual_object["values"]["x_coord"]["start_val"]
        stat_val_y = qual_object["values"]["y_coord"]["start_val"]
        end_val_x = qual_object["values"]["x_coord"]["end_val"]
        end_val_y = qual_object["values"]["y_coord"]["end_val"]

        if qual_object["negate"]:
            if ((x_val >= stat_val_x and x_val <= end_val_x) and (y_val >= stat_val_y and y_val <= end_val_y)):
                return False
        else:
            if not ((x_val >= stat_val_x and x_val <= end_val_x) and (y_val >= stat_val_y and y_val <= end_val_y)):
                return False
    
    return True

def perform_side_coordinates_qual(event, qualifiers, is_hit, is_x, is_absolute):
    if is_hit:
        x_coord_str = "hit_x"
        y_coord_str = "hit_y"
    else:
        x_coord_str = "pitch_x"
        y_coord_str = "pitch_y"
        
    if x_coord_str not in event or event[x_coord_str] == None:
        return False
    
    if is_x:
        val_to_use = event[x_coord_str][len(event[x_coord_str]) - 1]
    else:
        val_to_use = event[y_coord_str][len(event[y_coord_str]) - 1]

    if val_to_use == None:
        return False
    
    if is_absolute:
        val_to_use = abs(val_to_use)
        
    for qual_object in qualifiers:
        start_val = qual_object["values"]["start_val"]
        end_val = qual_object["values"]["end_val"]

        if qual_object["negate"]:
            if (val_to_use >= start_val and val_to_use <= end_val):
                return False
        else:
            if not (val_to_use >= start_val and val_to_use <= end_val):
                return False
    
    return True

def perform_custom_circle_qual(event, qualifiers, is_hit, is_absolute):
    if is_hit:
        x_coord_str = "hit_x"
        y_coord_str = "hit_y"
    else:
        x_coord_str = "pitch_x"
        y_coord_str = "pitch_y"
        
    if x_coord_str not in event or event[x_coord_str] == None:
        return False
    
    x_val = event[x_coord_str][len(event[x_coord_str]) - 1]
    if x_val == None:
        return False
    
    y_val = event[y_coord_str][len(event[y_coord_str]) - 1]
    if y_val == None:
        return False

    if is_absolute:
        x_val = abs(x_val)
        y_val = abs(y_val)
    
    for qual_object in qualifiers:
        has_match = pow((x_val - qual_object["values"]["x_coord"]), 2) + pow((y_val - qual_object["values"]["y_coord"]), 2) <= pow(qual_object["values"]["radius"], 2)

        if qual_object["negate"]:
            if has_match:
                return False
        else:
            if not has_match:
                return False

    return True

def handle_da_pitch_quals(row, event_name, at_bat_event, qualifiers, player_data, player_type, player_game_info, pitch_index, skip_pitch_events=False, skip_career_events=False):
    sub_play_index = -1
    for play_index, play in enumerate(at_bat_event["playEvents"]):
        if play["isPitch"]:
            if play["pitchNumber"] == pitch_index:
                sub_play_index = play_index
                break

    sub_play = at_bat_event["playEvents"][sub_play_index]

    if at_bat_event["is_home_team"]:
        is_team_batting = False if at_bat_event["is_top_inning"] else True
    else:
        is_team_batting = True if at_bat_event["is_top_inning"] else False

    sub_tm_position_map = at_bat_event["team_position_map"].copy()
    sub_opp_position_map = at_bat_event["opp_position_map"].copy()
    sub_team_batting_order_map = at_bat_event["team_batting_order_map"].copy()
    sub_opp_batting_order_map = at_bat_event["opp_batting_order_map"].copy()
    sub_next_play_pinch = None
    for play in at_bat_event["playEvents"][0:sub_play_index]:
        if "isSubstitution" in play and play["isSubstitution"]:
            is_top_inning = at_bat_event["is_top_inning"]
            if play["details"]["eventType"] == "pitching_substitution":
                if is_team_batting:
                    sub_opp_position_map["P"] = play["player"]["id"]
                    if "battingOrder" in play:
                        if sub_opp_position_map["P"] and sub_opp_position_map["P"] in sub_opp_batting_order_map:
                            del sub_opp_batting_order_map[sub_opp_position_map["P"]]
                        sub_opp_batting_order_map[play["player"]["id"]] = int(play["battingOrder"][0])
                else:
                    sub_tm_position_map["P"] = play["player"]["id"]
                    if "battingOrder" in play:
                        if sub_tm_position_map["P"] and sub_tm_position_map["P"] in sub_team_batting_order_map:
                            del sub_team_batting_order_map[sub_tm_position_map["P"]]
                        sub_team_batting_order_map[play["player"]["id"]] = int(play["battingOrder"][0])
            elif play["details"]["eventType"] == "defensive_switch" or play["details"]["eventType"] == "defensive_substitution":
                new_player = play["player"]["id"]
                new_position = play["position"]["abbreviation"]
                if "replacedPlayer" in play:
                    old_player = play["replacedPlayer"]["id"]
                else:
                    old_player = new_player

                if is_team_batting:
                    for position in sub_opp_position_map:
                        if position in ("PR", "PH"):
                            if old_player in sub_opp_position_map[position]:
                                sub_opp_position_map[position].remove(old_player)
                            if new_player in sub_opp_position_map[position]:
                                sub_opp_position_map[position].remove(new_player)
                        else:
                            if sub_opp_position_map[position] == old_player:
                                sub_opp_position_map[position] = None
                            if sub_opp_position_map[position] == new_player:
                                sub_opp_position_map[position] = None
                else:
                    for position in sub_tm_position_map:
                        if position in ("PR", "PH"):
                            if old_player in sub_tm_position_map[position]:
                                sub_tm_position_map[position].remove(old_player)
                            if new_player in sub_tm_position_map[position]:
                                sub_tm_position_map[position].remove(new_player)
                        else:
                            if sub_tm_position_map[position] == old_player:
                                sub_tm_position_map[position] = None
                            if sub_tm_position_map[position] == new_player:
                                sub_tm_position_map[position] = None

                if is_team_batting:
                    if new_position in ("PR", "PH"):
                        sub_opp_position_map[new_position].add(new_player)
                    else:
                        sub_opp_position_map[new_position] = new_player
                    
                    if old_player in sub_opp_batting_order_map:
                        del sub_opp_batting_order_map[old_player]
                    if "battingOrder" in play:
                        sub_opp_batting_order_map[new_player] = int(play["battingOrder"][0])
                else:
                    if new_position in ("PR", "PH"):
                        sub_tm_position_map[new_position].add(new_player)
                    else:
                        sub_tm_position_map[new_position] = new_player
                    
                    if old_player in sub_team_batting_order_map:
                        del sub_team_batting_order_map[old_player]
                    if "battingOrder" in play:
                        sub_team_batting_order_map[new_player] = int(play["battingOrder"][0])
            elif play["details"]["eventType"] == "offensive_substitution":
                pinch_hitter = play["player"]["id"]
                old_player = play["replacedPlayer"]["id"] if "replacedPlayer" in play else None

                if is_team_batting:
                    sub_tm_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                    for position in sub_tm_position_map:
                        if position in ("PR", "PH"):
                            if old_player in sub_tm_position_map[position]:
                                sub_tm_position_map[position].remove(old_player)
                                if play["position"]["abbreviation"] == "PH":
                                    sub_next_play_pinch = position
                        else:
                            if sub_tm_position_map[position] == old_player:
                                sub_tm_position_map[position] = None
                                if play["position"]["abbreviation"] == "PH":
                                    sub_next_play_pinch = position
                    
                    if old_player in sub_team_batting_order_map:
                        del sub_team_batting_order_map[old_player]
                    if "battingOrder" in play:
                        sub_team_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])
                else:
                    sub_opp_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                    for position in sub_opp_position_map:
                        if position in ("PR", "PH"):
                            if old_player in sub_opp_position_map[position]:
                                sub_opp_position_map[position].remove(old_player)
                                if play["position"]["abbreviation"] == "PH":
                                    sub_next_play_pinch = position
                        else:
                            if sub_opp_position_map[position] == old_player:
                                sub_opp_position_map[position] = None
                                if play["position"]["abbreviation"] == "PH":
                                    sub_next_play_pinch = position
                    
                    if old_player in sub_opp_batting_order_map:
                        del sub_opp_batting_order_map[old_player]
                    if "battingOrder" in play:
                        sub_opp_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])

    if at_bat_event["is_home_team"]:
        sub_home_score = at_bat_event["team_runs"]
        sub_away_score = at_bat_event["opp_runs"]
    else:
        sub_home_score = at_bat_event["opp_runs"]
        sub_away_score = at_bat_event["team_runs"]

    if sub_play_index != 0:
        sub_outs = at_bat_event["playEvents"][sub_play_index - 1]["count"]["outs"]
    else:
        sub_outs = at_bat_event["outs"]

    sub_outs_remaining = ((9 - at_bat_event["inning"]) * 3) + (3 - sub_outs)
    if at_bat_event["inning"] > 9:
        sub_outs_remaining = 3 - sub_outs
    if (row["DateTime"].hour == 1 or row["DateTime"].hour == 2) and row["Year"] >= 2020:
        sub_outs_remaining = ((7 - at_bat_event["inning"]) * 3) + (3 - sub_outs)
        if at_bat_event["inning"] > 7:
            sub_outs_remaining = 3 - sub_outs

    sub_current_outs = sub_play["count"]["outs"]
    sub_num_outs = sub_current_outs - sub_outs

    sub_counts = [{
        "balls" : 0,
        "strikes" : 0
    }]

    sub_pitches = []
    sub_pitch_types = []
    sub_pitch_speeds = []
    sub_pitch_zones = []
    sub_pitch_spin = []
    sub_pitch_x = []
    sub_pitch_y = []
    sub_hit_x = []
    sub_hit_y = []
    sub_pitch_top_strike_zone = []
    sub_pitch_bottom_strike_zone = []
    sub_hit_dist = []
    sub_hit_traj = []
    sub_hit_loc = []
    sub_hit_hard = []
    sub_pitch_ev = []
    sub_pitch_la = []
    sub_num_pitches = 0
    sub_index_to_use = 0

    current_batter = None
    current_pitcher = None
    pitching_lefty = -1
    pitching_righty = -1
    batting_lefty = -1
    batting_righty = -1

    is_starter_pitcher = at_bat_event["is_starter_pitcher"]
    is_starter_batter = at_bat_event["is_starter_batter"],
    is_reliever_pitcher = at_bat_event["is_reliever_pitcher"]
    is_reliever_batter = at_bat_event["is_reliever_batter"]
    time_facing_opponent = at_bat_event["time_facing_opponent"]

    for sub_sub_play_index, play in enumerate(at_bat_event["playEvents"][:sub_play_index]):
        if play["isPitch"]:
            sub_num_pitches += 1
            if play["details"]["isStrike"]:
                last_count = sub_counts[len(sub_counts) - 1].copy()
                if last_count["strikes"] != 2:
                    last_count["strikes"] += 1
                sub_counts.append(last_count)
            elif play["details"]["isBall"]:
                last_count = sub_counts[len(sub_counts) - 1].copy()
                if last_count["balls"] != 3:
                    last_count["balls"] += 1
                sub_counts.append(last_count)

    sub_swung_at_first_pitch = False
    first_pitch_num_pitches = 0
    first_pitch = True

    for sub_sub_play_index, play in enumerate(at_bat_event["playEvents"][:(sub_play_index + 1)]):
        if "isSubstitution" in play and play["isSubstitution"]:
            if play["count"]["balls"] != 0 or play["count"]["strikes"] != 0:
                if play["details"]["eventType"] == "pitching_substitution":
                    current_pitcher = play["player"]["id"]
                    pitch_pos = player_game_info["pitch_sides"][current_pitcher]
                    if pitch_pos == "S":
                        bat_pos = player_game_info["bat_sides"][current_batter if current_batter else at_bat_event["batter"]]
                        if bat_pos == "S":
                            pitching_lefty = None
                            pitching_righty = None
                        else:
                            if bat_pos == "R":
                                pitching_lefty = True
                            else:
                                pitching_righty = True
                    else:
                        if pitch_pos == "L":
                            pitching_lefty = True
                        else:
                            pitching_righty = True
                    is_starter_pitcher = False
                    is_reliever_pitcher = True
                    time_facing_opponent = 1
                elif play["details"]["eventType"] == "offensive_substitution":
                    if "replacedPlayer" in play:
                        if play["position"]["abbreviation"] == "PH":
                            current_batter = play["player"]["id"]
                            bat_pos = player_game_info["bat_sides"][current_batter]
                            if bat_pos == "S":
                                pitch_pos = player_game_info["pitch_sides"][current_pitcher if current_pitcher else at_bat_event["pitcher"]]
                                if pitch_pos == "S":
                                    batting_lefty = None
                                    batting_righty = None
                                else:
                                    if pitch_pos == "R":
                                        batting_lefty = True
                                    else:
                                        batting_righty = True
                            else:
                                if bat_pos == "L":
                                    batting_lefty = True
                                else:
                                    batting_righty = True
                            is_starter_batter = False
                            is_reliever_batter = True
                            time_facing_opponent = 1
        elif play["isPitch"]:
            first_pitch_num_pitches += 1
            code = play["details"]["call"]["code"][-1:].upper()
            sub_pitches.append(code)
            if first_pitch:
                sub_swung_at_first_pitch = play["details"]["call"]["code"][-1:].upper() in ('F', 'S', 'D', 'X', 'E', 'T', 'L', 'W', 'M', 'O', 'Y')
                first_pitch = False
            if "type" in play["details"] and play["details"]["type"] and play["details"]["type"]["description"]:
                sub_pitch_types.append(play["details"]["type"]["description"])
            else:
                sub_pitch_types.append(None)

            if "pitchData" in play and "startSpeed" in play["pitchData"]:
                sub_pitch_speeds.append(play["pitchData"]["startSpeed"])
            else:
                sub_pitch_speeds.append(None)
            
            if "pitchData" in play and "zone" in play["pitchData"]:
                sub_pitch_zones.append(play["pitchData"]["zone"])
            else:
                sub_pitch_zones.append(None)

            if "pitchData" in play and "breaks" in play["pitchData"] and "spinRate" in play["pitchData"]["breaks"]:
                sub_pitch_spin.append(play["pitchData"]["breaks"]["spinRate"])
            else:
                sub_pitch_spin.append(None)
            
            if "pitchData" in play and "coordinates" in play["pitchData"] and "pX" in play["pitchData"]["coordinates"]:
                sub_pitch_x.append(play["pitchData"]["coordinates"]["pX"])
            else:
                sub_pitch_x.append(None)
            
            if "pitchData" in play and "coordinates" in play["pitchData"] and "pZ" in play["pitchData"]["coordinates"]:
                sub_pitch_y.append(play["pitchData"]["coordinates"]["pZ"])
            else:
                sub_pitch_y.append(None)
            
            if "pitchData" in play and "strikeZoneTop" in play["pitchData"]:
                sub_pitch_top_strike_zone.append(play["pitchData"]["strikeZoneTop"])
            else:
                sub_pitch_top_strike_zone.append(None)
            
            if "pitchData" in play and "strikeZoneBottom" in play["pitchData"]:
                sub_pitch_bottom_strike_zone.append(play["pitchData"]["strikeZoneBottom"])
            else:
                sub_pitch_bottom_strike_zone.append(None)

            if "hitData" in play and "launchSpeed" in play["hitData"]:
                sub_pitch_ev.append(play["hitData"]["launchSpeed"])
            else:
                sub_pitch_ev.append(None)
            
            if "hitData" in play and "launchAngle" in play["hitData"]:
                sub_pitch_la.append(play["hitData"]["launchAngle"])
            else:
                sub_pitch_la.append(None)

            if "hitData" in play and "totalDistance" in play["hitData"]:
                sub_hit_dist.append(play["hitData"]["totalDistance"])
            else:
                sub_hit_dist.append(None)
            
            if "hitData" in play and "trajectory" in play["hitData"]:
                sub_hit_traj.append(play["hitData"]["trajectory"])
            else:
                sub_hit_traj.append(None)
            
            if "hitData" in play and "hardness" in play["hitData"]:
                sub_hit_hard.append(play["hitData"]["hardness"])
            else:
                sub_hit_hard.append(None)
            
            if "hitData" in play and "location" in play["hitData"]:
                sub_hit_loc.append(play["hitData"]["location"])
            else:
                sub_hit_loc.append(None)
            
            if "hitData" in play and "coordinates" in play["hitData"] and "coordX" in play["hitData"]["coordinates"]:
                sub_hit_x.append(play["hitData"]["coordinates"]["coordX"])
            else:
                sub_hit_x.append(None)
            
            if "hitData" in play and "coordinates" in play["hitData"] and "coordY" in play["hitData"]["coordinates"]:
                sub_hit_y.append(play["hitData"]["coordinates"]["coordY"])
            else:
                sub_hit_y.append(None)
    
    if current_batter == None:
        current_batter = at_bat_event["batter"]
    if current_pitcher == None:
        current_pitcher = at_bat_event["pitcher"]
        
    if player_type["da_type"] == "Batter":
        if current_batter != at_bat_event["batter"]:
            return None
    else:
        if current_pitcher != at_bat_event["pitcher"]:
            return None

    if pitching_lefty == -1:
        pitching_lefty = at_bat_event["pitching_lefty"]
    if pitching_righty == -1:
        pitching_righty = at_bat_event["pitching_righty"]
    if batting_lefty == -1:
        batting_lefty = at_bat_event["batting_lefty"]
    if batting_righty == -1:
        batting_righty = at_bat_event["batting_righty"]

    sub_first_pitch = first_pitch_num_pitches == 1
    
    sub_balls = sub_counts[len(sub_counts) - 1]["balls"]
    sub_strikes = sub_counts[len(sub_counts) - 1]["strikes"]
    
    sub_starting_pitch_count = at_bat_event["starting_pitch_count"]
    sub_pitch_count = sub_starting_pitch_count + sub_num_pitches

    sub_starting_team_pitch_count = at_bat_event["starting_team_pitch_count"]
    sub_team_pitch_count = sub_starting_team_pitch_count + sub_num_pitches + 1

    sub_starting_game_pitch_count = at_bat_event["starting_game_pitch_count"]
    sub_game_pitch_count = sub_starting_game_pitch_count + sub_num_pitches + 1

    sub_starting_innings_pitched = at_bat_event["starting_innings_pitched"]
    sub_innings_pitched = sub_starting_innings_pitched + sub_num_outs * (1/3)

    frac, whole = math.modf(sub_starting_innings_pitched)
    frac = round_value(frac, 1)
    sub_starting_innings_pitched = whole
    if frac == 0.3:
        sub_starting_innings_pitched += 1/3
    elif frac == 0.7:
        sub_starting_innings_pitched += 2/3
    elif frac == 1.0:
        sub_starting_innings_pitched += 1
    frac, whole = math.modf(sub_innings_pitched)
    frac = round_value(frac, 1)
    sub_innings_pitched = whole
    if frac == 0.3:
        sub_innings_pitched += 1/3
    elif frac == 0.7:
        sub_innings_pitched += 2/3
    elif frac == 1.0:
        sub_innings_pitched += 1

    sub_man_on_first = False
    sub_man_on_second = False
    sub_man_on_third = False

    sub_men_on_base_map = {
        "1B" : None,
        "2B" : None,
        "3B" : None
    }

    if at_bat_event["postOnFirst"]:
        sub_man_on_first = True
        sub_men_on_base_map["1B"] = at_bat_event["postOnFirst"] 
    if at_bat_event["postOnSecond"]:
        sub_man_on_second = True
        sub_men_on_base_map["2B"] = at_bat_event["postOnSecond"] 
    if at_bat_event["postOnThird"]:
        sub_man_on_third = True
        sub_men_on_base_map["3B"] = at_bat_event["postOnThird"] 
    
    for inherited_play in at_bat_event["playEvents"]:
        if "eventType" in inherited_play["details"] and inherited_play["details"]["eventType"] and inherited_play["details"]["eventType"] == "runner_placed":
            sub_man_on_second = True

    runners_by_play = {}
    for sub_runner in at_bat_event["runners"]:
        if sub_runner["details"]["playIndex"] < sub_play_index:
            if sub_runner["details"]["playIndex"] not in runners_by_play:
                runners_by_play[sub_runner["details"]["playIndex"]] = []
            runners_by_play[sub_runner["details"]["playIndex"]].append(sub_runner)
            
            if sub_runner["details"]["isScoringEvent"]:
                if is_team_batting:
                    if at_bat_event["is_home_team"]:
                        sub_home_score += 1
                    else:
                        sub_away_score += 1
                else:
                    if at_bat_event["is_home_team"]:
                        sub_away_score += 1
                    else:
                        sub_home_score += 1
    
    for play_index in runners_by_play:
        new_man_on_second = False
        new_man_on_third = False
        for sub_run_index, sub_runner in enumerate(runners_by_play[play_index]):
            if sub_run_index == len(runners_by_play[play_index]) - 1 or runners_by_play[play_index][sub_run_index + 1]["details"]["runner"]["id"] != sub_runner["details"]["runner"]["id"]:
                if sub_runner["movement"]["end"] == "2B":
                    sub_man_on_second = True
                    new_man_on_second = True
                    sub_men_on_base_map["2B"] = sub_runner["details"]["runner"]["id"]
                if sub_runner["movement"]["end"] == "3B":
                    sub_man_on_third = True
                    new_man_on_third = True
                    sub_men_on_base_map["3B"] = sub_runner["details"]["runner"]["id"]
        
        for sub_runner in runners_by_play[play_index]:
            if sub_runner["movement"]["start"] == "1B" and sub_runner["movement"]["end"] != "1B":
                sub_man_on_first = False
                sub_men_on_base_map["1B"] = None
            if sub_runner["movement"]["start"] == "2B" and sub_runner["movement"]["end"] != "2B" and not new_man_on_second:
                sub_man_on_second = False
                sub_men_on_base_map["2B"] = None
            if sub_runner["movement"]["start"] == "3B" and sub_runner["movement"]["end"] != "3B" and not new_man_on_third:
                sub_man_on_third = False
                sub_men_on_base_map["3B"] = None

    sub_men_on_base = int(sub_man_on_first) + int(sub_man_on_second) + int(sub_man_on_third)
    sub_men_in_scoring = int(sub_man_on_second) + int(sub_man_on_third)

    if "awayScore" in sub_play["details"]:
        sub_current_away_score = sub_play["details"]["awayScore"]
        sub_current_home_score = sub_play["details"]["homeScore"]
    elif play_index == len(at_bat_event["playEvents"]) - 1:
        sub_current_away_score = at_bat_event["current_away_score"]
        sub_current_home_score = at_bat_event["current_home_score"]
    else:
        sub_current_away_score = sub_away_score
        sub_current_home_score = sub_home_score
    
    sub_num_runs = (sub_current_away_score + sub_current_home_score) - (sub_away_score + sub_home_score)

    if at_bat_event["is_home_team"]:
        sub_team_score = sub_home_score
        sub_opp_score = sub_away_score
        sub_ending_team_score = sub_current_home_score
        sub_ending_opp_score = sub_current_away_score
    else:
        sub_team_score = sub_away_score
        sub_opp_score = sub_home_score
        sub_ending_team_score = sub_current_away_score
        sub_ending_opp_score = sub_current_home_score

    if is_team_batting:
        sub_bat_score = sub_team_score
        sub_pitch_score = sub_opp_score
    else:
        sub_bat_score = sub_opp_score
        sub_pitch_score = sub_team_score

    sub_walk_off = False
    sub_walk_off_opp = False
    sub_last_out = False
    if not at_bat_event["is_top_inning"] and at_bat_event["LastInning"]:
        sub_score_diff = sub_pitch_score - sub_bat_score
        if sub_score_diff >= 0:
            sub_walk_off_opp = sub_score_diff < sub_men_on_base + 1
            sub_walk_off = sub_num_runs > sub_score_diff
    
    if at_bat_event["LastInning"] and sub_pitch_score > sub_bat_score and sub_outs == 2:
        sub_last_out = True

    sub_game_tying = False
    sub_game_tying_opp = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 1:
        sub_game_tying_opp = sub_score_diff <= sub_men_on_base + 1
        sub_game_tying = sub_num_runs >= sub_score_diff

    sub_go_ahead = False
    sub_go_ahead_opp = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 0:
        sub_go_ahead_opp = sub_score_diff < sub_men_on_base + 1
        sub_go_ahead = sub_num_runs > sub_score_diff
    
    sub_go_ahead_or_game_tying = False
    sub_go_ahead_or_game_tying_opp = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 0:
        sub_go_ahead_or_game_tying_opp = sub_score_diff <= sub_men_on_base + 1
        if sub_game_tying_opp:
            sub_go_ahead_or_game_tying = sub_num_runs >= sub_score_diff
        else:
            sub_go_ahead_or_game_tying = sub_num_runs > sub_score_diff
    
    sub_tying_on_deck = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 1:
        sub_tying_on_deck = sub_score_diff <= sub_men_on_base + 2

    sub_winning_on_deck = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 0:
        sub_winning_on_deck = sub_score_diff < sub_men_on_base + 2
    
    sub_tying_on_base = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 1:
        sub_tying_on_base = sub_score_diff <= sub_men_on_base

    sub_winning_on_base = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 0:
        sub_winning_on_base = sub_score_diff < sub_men_on_base
    
    sub_tying_at_bat = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 1:
        sub_tying_at_bat = sub_score_diff <= sub_men_on_base + 1

    sub_winning_at_bat = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 0:
        sub_winning_at_bat = sub_score_diff < sub_men_on_base + 1

    sub_tying_in_scoring = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 1:
        sub_tying_in_scoring = sub_score_diff <= sub_men_in_scoring

    sub_winning_in_scoring = False
    sub_score_diff = sub_pitch_score - sub_bat_score
    if sub_score_diff >= 0:
        sub_winning_in_scoring = sub_score_diff < sub_men_in_scoring
    
    sub_game_winning = False
    if sub_num_runs and is_team_batting:
        if at_bat_event["game_winning_run"] and at_bat_event["game_winning_team"] == row["Tm"] and at_bat_event["game_winning_run"] > sub_team_score and at_bat_event["game_winning_run"] <= (sub_team_score + sub_num_runs):
            sub_game_winning = True

    sub_tying_on_first = False
    if sub_man_on_first:
        sub_score_diff = sub_pitch_score - sub_bat_score
        if sub_score_diff >= 1:
            sub_men_on_base_to_use = 1
            if sub_man_on_second:
                sub_men_on_base_to_use += 1
            if sub_man_on_third:
                sub_men_on_base_to_use += 1
            sub_tying_on_first = sub_score_diff == sub_men_on_base_to_use
    
    sub_winning_on_first = False
    if sub_man_on_first:
        sub_score_diff = sub_pitch_score - sub_bat_score
        if sub_score_diff >= 0:
            sub_men_on_base_to_use = 1
            if sub_man_on_second:
                sub_men_on_base_to_use += 1
            if sub_man_on_third:
                sub_men_on_base_to_use += 1
            sub_tying_on_first = sub_score_diff == sub_men_on_base_to_use - 1
    
    sub_tying_on_second = False
    if sub_man_on_second:
        sub_score_diff = sub_pitch_score - sub_bat_score
        if sub_score_diff >= 1:
            sub_men_on_base_to_use = 1
            if sub_man_on_third:
                sub_men_on_base_to_use += 1
            sub_tying_on_second = sub_score_diff == sub_men_on_base_to_use
    
    sub_winning_on_second = False
    if sub_man_on_second:
        sub_score_diff = sub_pitch_score - sub_bat_score
        if sub_score_diff >= 0:
            sub_men_on_base_to_use = 1
            if sub_man_on_third:
                sub_men_on_base_to_use += 1
            sub_winning_on_second = sub_score_diff == sub_men_on_base_to_use - 1
    
    sub_tying_on_third = False
    if sub_man_on_third:
        sub_score_diff = sub_pitch_score - sub_bat_score
        if sub_score_diff >= 1:
            sub_men_on_base_to_use = 1
            sub_tying_on_third = sub_score_diff == sub_men_on_base_to_use
    
    sub_winning_on_third = False
    if sub_man_on_third:
        sub_score_diff = sub_pitch_score - sub_bat_score
        if sub_score_diff >= 0:
            sub_men_on_base_to_use = 1
            sub_winning_on_third = sub_score_diff == sub_men_on_base_to_use - 1

    sub_end_time = None
    if "endTime" in sub_play and sub_play["endTime"]:
        sub_end_time = dateutil.parser.parse(sub_play["endTime"])

    batter_first = player_game_info["first_names"][current_batter]
    batter_birth_first = player_game_info["birth_first_names"][current_batter]
    batter_last = player_game_info["last_names"][current_batter]
    pitcher_first = player_game_info["first_names"][current_pitcher]
    pitcher_birth_first = player_game_info["birth_first_names"][current_pitcher]
    pitcher_last = player_game_info["last_names"][current_pitcher]
    batter_country = player_game_info["countries"][current_batter] if current_batter in player_game_info["countries"] else None
    pitcher_country = player_game_info["countries"][current_pitcher] if current_pitcher in player_game_info["countries"] else None

    sub_event_obj = {
        "result" : "pitch",
        "event_time" : sub_end_time,
        "event_type" : at_bat_event["result"],
        "previous_event_type" : at_bat_event["previous_result"],
        "upcoming_event_type" : at_bat_event["upcoming_result"],
        "previous_player_event_type" : at_bat_event["previous_player_result"],
        "upcoming_player_event_type" : at_bat_event["upcoming_player_result"],
        "men_on_base_map" : sub_men_on_base_map,
        "batter" : current_batter,
        "pitcher" : current_pitcher,
        "batter_first" : batter_first,
        "pitcher_first" : pitcher_first,
        "batter_birth_first" : batter_birth_first,
        "pitcher_birth_first" : pitcher_birth_first,
        "batter_last" : batter_last,
        "pitcher_last" : pitcher_last,
        "batter_country" : batter_country,
        "pitcher_country" : pitcher_country,
        "runners_driven_in" : at_bat_event["runners_driven_in"],
        "runners_batted_in" : at_bat_event["runners_batted_in"],
        "eanred_runners_driven_in" : at_bat_event["earned_runners_driven_in"],
        "earned_runners_batted_in" : at_bat_event["earned_runners_batted_in"],
        "description" : sub_play["details"]["description"] if "description" in sub_play["details"] and sub_play["details"]["description"] else None,
        "pitches" : first_pitch_num_pitches,
        "ind_pitches" : sub_pitches,
        "pitch_types" : sub_pitch_types,
        "pitch_speeds" : sub_pitch_speeds,
        "pitch_zones" : sub_pitch_zones,
        "pitch_x" : sub_pitch_x,
        "pitch_y" : sub_pitch_y,
        "hit_x" : sub_hit_x,
        "hit_y" : sub_hit_y,
        "top_strike_zone" : sub_pitch_top_strike_zone,
        "bottom_strike_zone" : sub_pitch_bottom_strike_zone,
        "hit_dist" : sub_hit_dist,
        "pitch_la" : sub_pitch_la,
        "pitch_ev" : sub_pitch_ev,
        "pitch_spin" : sub_pitch_spin,
        "num_runs" : sub_num_runs,
        "rbis" : at_bat_event["rbis"],
        "driven_in" : at_bat_event["driven_in"],
        "hit_hard" : sub_hit_hard,
        "hit_loc" : sub_hit_loc,
        "hit_traj" : sub_hit_traj,
        "balls"  : sub_balls,
        "strikes"  : sub_strikes,
        "counts" : sub_counts,
        "pitching_lefty" : pitching_lefty,
        "pitching_righty" : pitching_righty,
        "batting_lefty" : batting_lefty,
        "batting_righty" : batting_righty,
        "team_position_map" : sub_tm_position_map,
        "opp_position_map" : sub_opp_position_map,
        "team_main_position_map" : at_bat_event["team_main_position_map"],
        "opp_main_position_map" : at_bat_event["opp_main_position_map"],
        "team_primary_position_map" : at_bat_event["team_primary_position_map"],
        "opp_primary_position_map" : at_bat_event["opp_primary_position_map"],
        "team_batting_order_map" : sub_team_batting_order_map,
        "opp_batting_order_map" : sub_opp_batting_order_map,
        "leading_off_game" : at_bat_event["leading_off_game"],
        "leading_off_team" : at_bat_event["leading_off_team"],
        "leading_off_inning" : at_bat_event["leading_off_inning"],
        "batting_order_pos" : at_bat_event["batting_order_pos"],
        "swung_at_first_pitch" : sub_swung_at_first_pitch,
        "first_pitch" : sub_first_pitch,
        "next_play_pinch" : sub_next_play_pinch,
        "is_starter_pitcher" : is_starter_pitcher,
        "is_starter_batter" : is_starter_batter,
        "is_reliever_pitcher" : is_reliever_pitcher,
        "is_reliever_batter" : is_reliever_batter,
        "starting_inning" : at_bat_event["starting_inning"],
        "time_through_lineup" : at_bat_event["time_through_lineup"],
        "time_facing_opponent" : time_facing_opponent,
        "starting_pitch_count" : sub_starting_pitch_count,
        "pitch_count" : sub_pitch_count,
        "batter_matchup_map" : at_bat_event["batter_matchup_map"],
        "pitcher_matchup_map" : at_bat_event["pitcher_matchup_map"],
        "batters_faced" : at_bat_event["batters_faced"],
        "plate_appearances" : at_bat_event["plate_appearances"],
        "pitcher_first_batter_faced" : at_bat_event["batters_faced"] == 0,
        "batter_first_plate_appearance" : at_bat_event["plate_appearances"] == 0,
        "game_pitch_count" : sub_game_pitch_count,
        "team_pitch_count" : sub_team_pitch_count,
        "starting_innings_pitched" : sub_starting_innings_pitched,
        "innings_pitched" : sub_innings_pitched,
        "team_runs" : sub_team_score,
        "opp_runs" : sub_opp_score,
        "run_diff" : sub_team_score - sub_opp_score,
        "ending_team_runs" : sub_ending_team_score,
        "ending_opp_runs" : sub_ending_opp_score,
        "ending_run_diff" : sub_ending_team_score - sub_ending_opp_score,
        "man_on_first" : sub_man_on_first,
        "man_on_second" : sub_man_on_second,
        "man_on_third" : sub_man_on_third,
        "men_on_base" : sub_men_on_base,
        "men_in_scoring" : sub_men_in_scoring,
        "num_outs" : sub_num_outs,
        "outs" : sub_outs,
        "outs_remaining" : sub_outs_remaining,
        "inning" : at_bat_event["inning"],
        "inning_reversed" : at_bat_event["inning_reversed"],
        "scheduled_inning_reversed" : at_bat_event["scheduled_inning_reversed"],
        "is_top_inning" : at_bat_event["is_top_inning"],
        "GameTying" : sub_game_tying,
        "GameTyingOpp" : sub_game_tying_opp,
        "GoAhead" : sub_go_ahead,
        "is_close" : ((sub_bat_score - sub_pitch_score) >= 0 and (sub_bat_score - sub_pitch_score) <= 1) or sub_tying_on_deck,
        "is_late" : at_bat_event["inning"] >= 7,
        "GoAheadOpp" : sub_go_ahead_opp,
        "GoAheadOrGameTying" : sub_go_ahead_or_game_tying,
        "GoAheadOrGameTyingOpp" : sub_go_ahead_or_game_tying_opp,
        "GameWinning" : sub_game_winning,
        "walk_off_index" :  at_bat_event["walk_off_index"],
        "go_ahead_index" :  at_bat_event["go_ahead_index"],
        "game_tying_index" :  at_bat_event["game_tying_index"],
        "go_ahead_or_game_tying_index" :  at_bat_event["go_ahead_or_game_tying_index"],
        "game_winning_index" :  at_bat_event["game_winning_index"],
        "TyingOnDeck" : sub_tying_on_deck,
        "WinningOnDeck" : sub_winning_on_deck,
        "TyingOnFirst" : sub_tying_on_first,
        "WinningOnFirst" : sub_winning_on_first,
        "TyingOnSecond" : sub_tying_on_second,
        "WinningOnSecond" : sub_winning_on_second,
        "TyingOnThird" : sub_tying_on_third,
        "WinningOnThird" : sub_winning_on_third,
        "TyingOnBase" : sub_tying_on_base,
        "WinningOnBase" : sub_winning_on_base,
        "TyingAtBat" : sub_tying_at_bat,
        "WinningAtBat" : sub_winning_at_bat,
        "TyingInScoring" : sub_tying_in_scoring,
        "WinningInScoring" : sub_winning_in_scoring,
        "LastInning" : at_bat_event["LastInning"],
        "LastOut" : sub_last_out,
        "LastBatter" : at_bat_event["LastBatter"],
        "ExtraInnings" : at_bat_event["ExtraInnings"],
        "WalkOff" : sub_walk_off,
        "WalkOffOpp" : sub_walk_off_opp,
        "event_id" : at_bat_event["event_id"],
        "playEvents" : at_bat_event["playEvents"],
        "runners" : at_bat_event["runners"],
        "is_home_team" : at_bat_event["is_home_team"],
        "current_outs" : at_bat_event["current_outs"],
        "current_away_score" : at_bat_event["current_away_score"],
        "current_home_score" : at_bat_event["current_home_score"],
        "postOnFirst" : at_bat_event["postOnFirst"],
        "postOnSecond" : at_bat_event["postOnSecond"],
        "postOnThird" : at_bat_event["postOnThird"],
        "is_final" : at_bat_event["is_final"],
        "has_play_id" : at_bat_event["has_play_id"],
        "game_winning_run" : at_bat_event["game_winning_run"],
        "game_winning_team" : at_bat_event["game_winning_team"],
        "sb_base" : None,
        "reached_base" : None,
        "pitch_index" : pitch_index
    }

    for stat_str in at_bat_event:
        if stat_str.startswith("career_stat_") or stat_str.startswith("game_stat_") or stat_str.startswith("starting_career_stat_") or stat_str.startswith("starting_game_stat_"):
            if "_Pit" in stat_str:
                if stat_str.endswith("_Pit_" + str(pitch_index)):
                    new_stat_str = stat_str.replace("_Pit_" + str(pitch_index), "_Pit")
                    sub_event_obj[new_stat_str] = at_bat_event[stat_str]
            else:
                sub_event_obj[stat_str] = at_bat_event[stat_str]

    if handle_da_mlb_quals(row, event_name, sub_event_obj, qualifiers, player_data, player_type, player_game_info, skip_pitch_events=skip_pitch_events, skip_career_events=skip_career_events):
        return sub_event_obj
    else:
        return None

def handle_occupied_qual(at_bat_event, qualifiers, loaded_str):
    for qual_object in qualifiers:
        if loaded_str == "Empty":
            has_match = not at_bat_event["man_on_first"] and not at_bat_event["man_on_second"] and not at_bat_event["man_on_third"]
        elif loaded_str == "Men_On":
            has_match = at_bat_event["man_on_first"] or at_bat_event["man_on_second"] or at_bat_event["man_on_third"]
        elif loaded_str == "RISP":
            has_match = at_bat_event["man_on_second"] or at_bat_event["man_on_third"]
        else:
            has_match = at_bat_event["man_on_first"] and at_bat_event["man_on_second"] and at_bat_event["man_on_third"]

        if qual_object["negate"]:
            if has_match:
                return False
        else:
            if not has_match:
                return False

    return True

def handle_bool_qual(at_bat_event, qualifiers, loaded_str, negate=False):
    if loaded_str not in at_bat_event or at_bat_event[loaded_str] == None:
        return False

    for qual_object in qualifiers:
        if negate:
            has_match = not at_bat_event[loaded_str]
        else:
            has_match = at_bat_event[loaded_str]

        if qual_object["negate"]:
            if has_match:
                return False
        else:
            if not has_match:
                return False

    return True

def handle_stat_num_qual(at_bat_event, qualifiers, is_reversed, is_career, is_starting):
    has_any_match = False
    for qual_object in qualifiers:
        if is_reversed:
            num_str = ("career_stat_reversed_" + qual_object["stat"]) if is_career else ("game_stat_reversed_" + qual_object["stat"])
        else:
            num_str = ("career_stat_" + qual_object["stat"]) if is_career else ("game_stat_" + qual_object["stat"])
        if is_starting:
            num_str = "starting_" + num_str
        if num_str not in at_bat_event or at_bat_event[num_str] == None:
            return False
            
        has_row_match = True
        num_val = at_bat_event[num_str]
        stat_val = qual_object["values"]["start_val"]
        end_val = qual_object["values"]["end_val"]
        if qual_object["stat"] in ["IP"]:
            num_val = round(num_val, 1)

        if qual_object["negate"]:
            if num_val >= stat_val and num_val <= end_val:
                has_row_match = False
        else:
            if not (num_val >= stat_val and num_val <= end_val):
                has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def handle_stats_num_qual(at_bat_event, qualifiers, is_reversed, is_career, is_starting):
    has_any_match = False
    for qual_object in qualifiers:
        if is_reversed:
            num_str = ("career_stats_reversed_" + qual_object["stat"]) if is_career else ("game_stats_reversed_" + qual_object["stat"])
        else:
            num_str = ("career_stats_" + qual_object["stat"]) if is_career else ("game_stats_" + qual_object["stat"])
        if is_starting:
            num_str = "starting_" + num_str
        if num_str not in at_bat_event or at_bat_event[num_str] == None:
            return False
            
        has_row_match = True
        num_val = at_bat_event[num_str]
        stat_val = qual_object["values"]["start_val"]
        end_val = qual_object["values"]["end_val"]
        if qual_object["stat"] in ["IP"]:
            num_val = round(num_val, 1)

        if qual_object["negate"]:
            if num_val >= stat_val and num_val <= end_val:
                has_row_match = False
        else:
            if not (num_val >= stat_val and num_val <= end_val):
                has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def handle_num_qual(at_bat_event, qualifiers, num_str, is_inning=False, absolute=False):
    has_any_match = False
    if num_str not in at_bat_event or at_bat_event[num_str] == None:
        return False
        
    has_row_match = True
    for qual_object in qualifiers:
        num_val = at_bat_event[num_str]
        if absolute:
            num_val = abs(num_val)
        stat_val = qual_object["values"]["start_val"]
        end_val = qual_object["values"]["end_val"]
        if is_inning:
            num_val = round(num_val, 1)

        if qual_object["negate"]:
            if num_val >= stat_val and num_val <= end_val:
                has_row_match = False
        else:
            if not (num_val >= stat_val and num_val <= end_val):
                has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def handle_strikes_balls_qual(at_bat_event, qualifiers, is_strikes, is_after, is_swinging):
    has_any_match = False
    if is_after:
        if "counts" not in at_bat_event or not at_bat_event["counts"]:
            return False
    else:
        if "balls" not in at_bat_event or at_bat_event["balls"] == None or "strikes" not in at_bat_event or at_bat_event["strikes"] == None:
            return False

    if is_swinging:
        if "ind_pitches" not in at_bat_event or not at_bat_event["ind_pitches"]:
            return False
        
    has_row_match = True
    for qual_object in qualifiers:
        stat_val = qual_object["values"]["start_val"]
        end_val = qual_object["values"]["start_val"]

        has_count_match = False
        if is_after:
            for index, count_obj in enumerate(at_bat_event["counts"]):
                balls = count_obj["balls"]
                strikes = count_obj["strikes"]

                has_count_match_1 = False
                has_count_match_2 = False
                if is_swinging:
                    swung_at_first_pitch = at_bat_event["ind_pitches"][index] in ('F', 'S', 'D', 'X', 'E', 'T', 'L', 'W', 'M', 'O', 'Y')
                    if qual_object["negate"]:
                        if not swung_at_first_pitch:
                            has_count_match_1 = True
                    else:
                        if swung_at_first_pitch:
                            has_count_match_1 = True
                else:
                    has_count_match_1 = True

                if qual_object["negate"] and not is_swinging:
                    if is_strikes:
                        if not (strikes >= stat_val and strikes <= end_val):
                            has_count_match_2 = True
                    else:
                        if not (balls >= stat_val and balls <= end_val):
                            has_count_match_2 = True
                else:
                    if is_strikes:
                        if strikes >= stat_val and strikes <= end_val:
                            has_count_match_2 = True
                    else:
                        if balls >= stat_val and balls <= end_val:
                            has_count_match_2 = True
                
                if has_count_match_1 and has_count_match_2:
                    has_count_match = True
                    break
        else:
            balls = at_bat_event["balls"]
            strikes = at_bat_event["strikes"]

            has_count_match_1 = False
            has_count_match_2 = False
            if is_swinging:
                swung_at_first_pitch = at_bat_event["ind_pitches"][len(at_bat_event["ind_pitches"]) - 1] in ('F', 'S', 'D', 'X', 'E', 'T', 'L', 'W', 'M', 'O', 'Y')
                if qual_object["negate"]:
                    if not swung_at_first_pitch:
                        has_count_match_1 = True
                else:
                    if swung_at_first_pitch:
                        has_count_match_1 = True
            else:
                has_count_match_1 = True

            if qual_object["negate"] and not is_swinging:
                if is_strikes:
                    if not (strikes >= stat_val and strikes <= end_val):
                        has_count_match_2 = True
                else:
                    if not (balls >= stat_val and balls <= end_val):
                        has_count_match_2 = True
            else:
                if is_strikes:
                    if strikes >= stat_val and strikes <= end_val:
                        has_count_match_2 = True
                else:
                    if balls >= stat_val and balls <= end_val:
                        has_count_match_2 = True
            
            if has_count_match_1 and has_count_match_2:
                has_count_match = True
                break

        if not has_count_match:
            has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def handle_count_qual(at_bat_event, qualifiers, is_after, is_swinging):
    has_any_match = False
    if is_after:
        if "counts" not in at_bat_event or not at_bat_event["counts"]:
            return False
    else:
        if "balls" not in at_bat_event or at_bat_event["balls"] == None or "strikes" not in at_bat_event or at_bat_event["strikes"] == None:
            return False

    if is_swinging:
        if "ind_pitches" not in at_bat_event or not at_bat_event["ind_pitches"]:
            return False
        
    has_row_match = True
    for qual_object in qualifiers:
        stat_val_balls = qual_object["values"]["balls"]["start_val"]
        stat_val_strike = qual_object["values"]["strikes"]["start_val"]
        end_val_balls = qual_object["values"]["balls"]["end_val"]
        end_val_strikes = qual_object["values"]["strikes"]["end_val"]

        has_count_match = False
        if is_after:
            for index, count_obj in enumerate(at_bat_event["counts"]):
                balls = count_obj["balls"]
                strikes = count_obj["strikes"]

                has_count_match_1 = False
                has_count_match_2 = False
                if is_swinging:
                    swung_at_first_pitch = at_bat_event["ind_pitches"][index] in ('F', 'S', 'D', 'X', 'E', 'T', 'L', 'W', 'M', 'O', 'Y')
                    if qual_object["negate"]:
                        if not swung_at_first_pitch:
                            has_count_match_1 = True
                    else:
                        if swung_at_first_pitch:
                            has_count_match_1 = True
                else:
                    has_count_match_1 = True

                if qual_object["negate"] and not is_swinging:
                    if not ((balls >= stat_val_balls and balls <= end_val_balls) and (strikes >= stat_val_strike and strikes <= end_val_strikes)):
                        has_count_match_2 = True
                else:
                    if (balls >= stat_val_balls and balls <= end_val_balls) and (strikes >= stat_val_strike and strikes <= end_val_strikes):
                        has_count_match_2 = True
                
                if has_count_match_1 and has_count_match_2:
                    has_count_match = True
                    break
        else:
            balls = at_bat_event["balls"]
            strikes = at_bat_event["strikes"]

            has_count_match_1 = False
            has_count_match_2 = False
            if is_swinging:
                swung_at_first_pitch = at_bat_event["ind_pitches"][len(at_bat_event["ind_pitches"]) - 1] in ('F', 'S', 'D', 'X', 'E', 'T', 'L', 'W', 'M', 'O', 'Y')
                if qual_object["negate"]:
                    if not swung_at_first_pitch:
                        has_count_match_1 = True
                else:
                    if swung_at_first_pitch:
                        has_count_match_1 = True
            else:
                has_count_match_1 = True

            if qual_object["negate"] and not is_swinging:
                if not ((balls >= stat_val_balls and balls <= end_val_balls) and (strikes >= stat_val_strike and strikes <= end_val_strikes)):
                    has_count_match_2 = True
            else:
                if (balls >= stat_val_balls and balls <= end_val_balls) and (strikes >= stat_val_strike and strikes <= end_val_strikes):
                    has_count_match_2 = True
            
            if has_count_match_1 and has_count_match_2:
                has_count_match = True
                break

        if not has_count_match:
            has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def handle_bool_count_qual(at_bat_event, qualifiers, is_after, count_str):
    has_any_match = False
    if is_after:
        if "counts" not in at_bat_event or not at_bat_event["counts"]:
            return False
    else:
        if "balls" not in at_bat_event or at_bat_event["balls"] == None or "strikes" not in at_bat_event or at_bat_event["strikes"] == None:
            return False
        
    has_row_match = True
    for qual_object in qualifiers:
        has_count_match = False
        if is_after:
            for count_obj in at_bat_event["counts"]:
                balls = count_obj["balls"]
                strikes = count_obj["strikes"]
                if count_str == "batter_ahead":
                    has_match_qual = balls > strikes
                elif count_str == "pitcher_ahead":
                    has_match_qual = balls < strikes
                else:
                    has_match_qual = strikes == balls

                if qual_object["negate"]:
                    if not has_match_qual:
                        has_count_match = True
                        break
                else:
                    if has_match_qual:
                        has_count_match = True
                        break
        else:
            balls = at_bat_event["balls"]
            strikes = at_bat_event["strikes"]
            if count_str == "batter_ahead":
                has_match_qual = balls > strikes
            elif count_str == "pitcher_ahead":
                has_match_qual = balls < strikes
            else:
                has_match_qual = strikes == balls

            if qual_object["negate"]:
                if not has_match_qual:
                    has_count_match = True
                    break
            else:
                if has_match_qual:
                    has_count_match = True
                    break
        if not has_count_match:
            has_row_match = False
    
    if has_row_match:
        has_any_match = True
    
    return has_any_match

def perform_mlb_game_qualifiers(row, qualifiers):
    if "Run Support" in qualifiers:
        if "RS" not in row or row["RS"] == None:
            return False

        for qual_object in qualifiers["Run Support"]:
            if qual_object["negate"]:
                if row["RS"] >= qual_object["values"]["start_val"] and row["RS"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["RS"] >= qual_object["values"]["start_val"] and row["RS"] <= qual_object["values"]["end_val"]):
                    return False

    if "Game Number" in qualifiers:
        if "Number" not in row or row["Number"] == None:
            return False

        for qual_object in qualifiers["Game Number"]:
            if qual_object["negate"]:
                if row["Number"] >= qual_object["values"]["start_val"] and row["Number"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Number"] >= qual_object["values"]["start_val"] and row["Number"] <= qual_object["values"]["end_val"]):
                    return False
    
    return True

def get_mlb_game_stats(all_rows, has_count_stat, qualifiers, games_to_skip, player_data, missing_games, missing_pitch, player_type, extra_stats, needs_plays, s):
    if needs_plays:
        logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " starting game data")
    count_info = {
        "current_percent" : 10,
        "count" : 1,
        "total_count" : len(all_rows) - len(games_to_skip),
        "missing_games" : missing_games,
        "missing_pitch" : missing_pitch,
        "exception" : None
    }
    new_rows = []

    if not count_info["total_count"]:
        return new_rows, count_info["missing_games"], count_info["missing_pitch"]

    with ThreadPoolExecutor(max_workers=5) as sub_executor:
        for index, row_data in enumerate(sorted(all_rows, key=lambda row: row["DateTime"])):
            if row_data["GameID"] not in games_to_skip:
                future = sub_executor.submit(get_live_game_data, index, has_count_stat, player_data, row_data, player_type, qualifiers, needs_plays, s)
                future.add_done_callback(functools.partial(result_call_back, qualifiers, count_info, new_rows, player_type, player_data, needs_plays, row_data, extra_stats))
    
    if count_info["exception"]:
        raise count_info["exception"]

    if needs_plays:
        logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " completed game data")

    return sorted(new_rows, key=lambda row: row["DateTime"]), count_info["missing_games"], count_info["missing_pitch"]


def get_href_mlb_game_stats(all_rows, s):
    for index, row_data in enumerate(sorted(all_rows, key=lambda row: row["DateTime"])):
        get_href_game_data(row_data, s)

def get_mlb_game_stats_single_thread(all_rows, has_count_stat, qualifiers, games_to_skip, player_data, missing_games, missing_pitch, player_type, extra_stats, s):
    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " starting game data")
    count_info = {
        "current_percent" : 10,
        "count" : 1,
        "total_count" : len(all_rows) - len(games_to_skip),
        "missing_games" : missing_games,
        "missing_pitch" : missing_pitch,
        "exception" : None
    }
    new_rows = []

    if not count_info["total_count"]:
        return new_rows, count_info["missing_games"], count_info["missing_pitch"]

    event_stats_needed = {}
    event_start_stats_needed = {}
    event_reversed_stats_needed = {}
    event_start_reversed_stats_needed = {}
    starting_event_stats_needed = {}
    starting_event_start_stats_needed = {}
    starting_event_reversed_stats_needed = {}
    starting_event_start_reversed_stats_needed = {}

    event_stats_negate = False
    event_stats_reversed_negate = False
    starting_event_stat_negate = False
    starting_event_stat_reversed_negate = False

    if "Event Stat" in qualifiers:
        for qual_obj in qualifiers["Event Stat"]:
            if qual_obj["negate"]:
                event_stats_negate = True
            if qual_obj["stat"] not in event_stats_needed:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_stats_needed[qual_obj["stat"]]:
                event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_stats_needed:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_stats_needed[qual_obj["stat"]]:
                event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Event Stat Reversed" in qualifiers:
        for qual_obj in qualifiers["Event Stat Reversed"]:
            if qual_obj["negate"]:
                event_stats_reversed_negate = True
            if qual_obj["stat"] not in event_reversed_stats_needed:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < event_reversed_stats_needed[qual_obj["stat"]]:
                event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in event_start_reversed_stats_needed:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > event_start_reversed_stats_needed[qual_obj["stat"]]:
                event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Starting Event Stat" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stat"]:
            if qual_obj["negate"]:
                starting_event_stat_negate = True
            if qual_obj["stat"] not in starting_event_stats_needed:
                starting_event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < starting_event_stats_needed[qual_obj["stat"]]:
                starting_event_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in starting_event_start_stats_needed:
                starting_event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > starting_event_start_stats_needed[qual_obj["stat"]]:
                starting_event_start_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    if "Starting Event Stat Reversed" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stat Reversed"]:
            if qual_obj["negate"]:
                starting_event_stat_reversed_negate = True
            if qual_obj["stat"] not in starting_event_reversed_stats_needed:
                starting_event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["values"]["end_val"] < starting_event_reversed_stats_needed[qual_obj["stat"]]:
                starting_event_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["end_val"]
            if qual_obj["stat"] not in starting_event_start_reversed_stats_needed:
                starting_event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
            if qual_obj["values"]["start_val"] > starting_event_start_reversed_stats_needed[qual_obj["stat"]]:
                starting_event_start_reversed_stats_needed[qual_obj["stat"]] = qual_obj["values"]["start_val"]
    stats_needed = set(list(event_stats_needed.keys()) + list(event_reversed_stats_needed.keys()) + list(starting_event_stats_needed.keys()) + list(starting_event_reversed_stats_needed.keys()))

    og_stats_needed_length = len(stats_needed)
    if "Event Stats" in qualifiers:
        for qual_obj in qualifiers["Event Stats"]:
            stats_needed.add(qual_obj["stat"])
    if "Event Stats Reversed" in qualifiers:
        for qual_obj in qualifiers["Event Stats Reversed"]:
            stats_needed.add(qual_obj["stat"])
    if "Starting Event Stats" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stats"]:
            stats_needed.add(qual_obj["stat"])
    if "Starting Event Stats Reversed" in qualifiers:
        for qual_obj in qualifiers["Starting Event Stats Reversed"]:
            stats_needed.add(qual_obj["stat"])
    
    saved_row_data = {}
    for stat in stats_needed:
        saved_row_data[stat] = 0

    is_reverse = "Event Stat Reversed" in qualifiers or "Starting Event Stat Reversed" in qualifiers

    for index, row_data in enumerate(sorted(all_rows, key=lambda row: row["DateTime"], reverse=is_reverse)):
        if row_data["GameID"] not in games_to_skip:
            try:
                game_data, row_data, index, sub_missing_games, sub_missing_pitch = get_live_game_data(index, has_count_stat, player_data, row_data, player_type, qualifiers, True, s)
                has_match, raw_row_data = handle_result_qualifiers(game_data, index, row_data, sub_missing_games, sub_missing_pitch, player_type, player_data, qualifiers, saved_row_data, count_info, extra_stats)
                
                if stat not in raw_row_data:
                    break

                hit_end = False
                hit_start = False
                if og_stats_needed_length:
                    for stat in stats_needed:
                        if stat in starting_event_stats_needed:
                            saved_row_data["starting_career_stat_" + stat] = saved_row_data[stat]
                            if starting_event_stat_negate:
                                if (saved_row_data[stat] - raw_row_data[stat]) < starting_event_start_stats_needed[stat] or saved_row_data[stat] > starting_event_stats_needed[stat]:
                                    hit_start = True
                            else:
                                if saved_row_data[stat] >= starting_event_start_stats_needed[stat]:
                                    hit_start = True
                                if saved_row_data[stat] >= starting_event_stats_needed[stat]:
                                    hit_end = True
                        if stat in starting_event_reversed_stats_needed:
                            saved_row_data["starting_career_stat_reversed_" + stat] = saved_row_data[stat]
                            if starting_event_stat_reversed_negate:
                                if (saved_row_data[stat] - raw_row_data[stat]) < starting_event_start_reversed_stats_needed[stat] or saved_row_data[stat] > starting_event_reversed_stats_needed[stat]:
                                    hit_start = True
                            else:
                                if saved_row_data[stat] >= starting_event_start_reversed_stats_needed[stat]:
                                    hit_start = True
                                if saved_row_data[stat] >= starting_event_reversed_stats_needed[stat]:
                                    hit_end = True

                        if stat == "IP":
                            frac, whole = math.modf(raw_row_data["IP"])
                            frac = round_value(frac, 1)
                            innings_pitched_to_use = whole
                            if frac == 0.3:
                                innings_pitched_to_use += 1/3
                            elif frac == 0.7:
                                innings_pitched_to_use += 2/3
                            elif frac == 1.0:
                                innings_pitched_to_use += 1
                            saved_row_data[stat] += innings_pitched_to_use
                        else:
                            saved_row_data[stat] += raw_row_data[stat]
                    
                        if stat in event_stats_needed:
                            saved_row_data["career_stat_" + stat] = saved_row_data[stat]
                            if event_stats_negate:
                                if (saved_row_data[stat] - raw_row_data[stat]) < event_start_stats_needed[stat] or saved_row_data[stat] > event_stats_needed[stat]:
                                    hit_start = True
                            else:
                                if saved_row_data[stat] >= event_start_stats_needed[stat]:
                                    hit_start = True
                                if saved_row_data[stat] >= event_stats_needed[stat]:
                                    hit_end = True
                        if stat in event_reversed_stats_needed:
                            saved_row_data["career_stat_reversed_" + stat] = saved_row_data[stat]
                            if event_stats_reversed_negate:
                                if (saved_row_data[stat] - raw_row_data[stat]) < event_start_reversed_stats_needed[stat] or saved_row_data[stat] > event_reversed_stats_needed[stat]:
                                    hit_start = True
                            else:
                                if saved_row_data[stat] >= event_start_reversed_stats_needed[stat]:
                                    hit_start = True
                                if saved_row_data[stat] >= event_reversed_stats_needed[stat]:
                                    hit_end = True
                else:
                    hit_start = True
                
                percent_complete = 100 * (count_info["count"] / count_info["total_count"])
                if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                    count_info["current_percent"] += 10
                count_info["count"] += 1

                if hit_start:
                    new_rows.append(row_data)
                if hit_end:
                    break
            except Exception:
                logger.info("Error parsing date " + str(row_data["Date"]) + " for player " + str(player_data["id"]))
                raise

    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " completed game data")

    return sorted(new_rows, key=lambda row: row["DateTime"]), count_info["missing_games"], count_info["missing_pitch"]

def handle_mlb_schedule_stats(all_rows, qualifiers, player_data, player_type, missing_games, extra_stats):
    new_rows = []
    for row in all_rows:
        if "MLBGameLink" not in row:
            missing_games.append("[" + str(row_data["Date"]) + "](" + "https://www.mlb.com/gameday/" + str(row["MLBGameLink"]) + ")")
            continue
        if perform_mlb_schedule_qualifiers(row, qualifiers):
            new_rows.append(row)
    return new_rows, missing_games

def perform_mlb_schedule_qualifiers(row, qualifiers):
    if "National Game" in qualifiers:
        if "IsNational" not in row:
            return False

        for qual_object in qualifiers["National Game"]:
            if qual_object["negate"]:
                if row["IsNational"]:
                    return False
            else:
                if not row["IsNational"]:
                    return False
    
    if "Any National Game" in qualifiers:
        if "AnyIsNational" not in row:
            return False

        for qual_object in qualifiers["Any National Game"]:
            if qual_object["negate"]:
                if row["AnyIsNational"]:
                    return False
            else:
                if not row["AnyIsNational"]:
                    return False
    
    if "Exact TV Network" in qualifiers:
        if "TVNetworks" not in row or not row["TVNetworks"]:
            return False

        tv_networks = row["TVNetworks"]

        for qual_object in qualifiers["Exact TV Network"]:
            if qual_object["negate"]:
                if set(tv_networks).intersection(set(qual_object["values"])):
                    return False
            else:
                if not set(tv_networks).intersection(set(qual_object["values"])):
                    return False
    
    if "Exact Radio Network" in qualifiers:
        if "RadioNetworks" not in row or not row["RadioNetworks"]:
            return False

        radio_networks = row["RadioNetworks"]

        for qual_object in qualifiers["Exact Radio Network"]:
            if qual_object["negate"]:
                if set(radio_networks).intersection(set(qual_object["values"])):
                    return False
            else:
                if not set(radio_networks).intersection(set(qual_object["values"])):
                    return False
    
    if "TV Network" in qualifiers:
        if "TVNetworks" not in row or not row["TVNetworks"]:
            return False

        tv_networks = row["TVNetworks"]

        for qual_object in qualifiers["TV Network"]:
            has_match = False
            for network_val in qual_object["values"]:
                for network in tv_networks:
                    if network.startswith(network_val):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Radio Network" in qualifiers:
        if "RadioNetworks" not in row or not row["RadioNetworks"]:
            return False

        radio_networks = row["RadioNetworks"]

        for qual_object in qualifiers["Radio Network"]:
            has_match = False
            for network_val in qual_object["values"]:
                for network in radio_networks:
                    if network.startswith(network_val):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "National Exact TV Network" in qualifiers:
        if "NationalTVNetworks" not in row or not row["NationalTVNetworks"]:
            return False

        tv_networks = row["NationalTVNetworks"]

        for qual_object in qualifiers["National Exact TV Network"]:
            if qual_object["negate"]:
                if set(tv_networks).intersection(set(qual_object["values"])):
                    return False
            else:
                if not set(tv_networks).intersection(set(qual_object["values"])):
                    return False
    
    if "National TV Network" in qualifiers:
        if "NationalTVNetworks" not in row or not row["NationalTVNetworks"]:
            return False

        tv_networks = row["NationalTVNetworks"]

        for qual_object in qualifiers["National TV Network"]:
            has_match = False
            for network_val in qual_object["values"]:
                for network in tv_networks:
                    if network.startswith(network_val):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Any National Exact TV Network" in qualifiers:
        if "AnyNationalTVNetworks" not in row or not row["AnyNationalTVNetworks"]:
            return False

        tv_networks = row["AnyNationalTVNetworks"]

        for qual_object in qualifiers["Any National Exact TV Network"]:
            if qual_object["negate"]:
                if set(tv_networks).intersection(set(qual_object["values"])):
                    return False
            else:
                if not set(tv_networks).intersection(set(qual_object["values"])):
                    return False
    
    if "Any National TV Network" in qualifiers:
        if "AnyNationalTVNetworks" not in row or not row["AnyNationalTVNetworks"]:
            return False

        tv_networks = row["AnyNationalTVNetworks"]

        for qual_object in qualifiers["Any National TV Network"]:
            has_match = False
            for network_val in qual_object["values"]:
                for network in tv_networks:
                    if network.startswith(network_val):
                        has_match = True

            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Current Winning Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] > row["CurrOppLosses"]
        for qual_object in qualifiers["Current Winning Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] < row["CurrOppLosses"]
        for qual_object in qualifiers["Current Losing Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] == row["CurrOppLosses"]
        for qual_object in qualifiers["Current Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Or Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] >= row["CurrOppLosses"]
        for qual_object in qualifiers["Current Winning Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Or Tied Opponent" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrOppWins"] <= row["CurrOppLosses"]
        for qual_object in qualifiers["Current Losing Or Tied Opponent"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrTmWins"] > row["CurrTmLosses"]
        for qual_object in qualifiers["Current Winning Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False
            
        opponent_match = row["CurrTmWins"] < row["CurrTmLosses"]
        for qual_object in qualifiers["Current Losing Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Tied Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrTmWins"] == row["CurrTmLosses"]
        for qual_object in qualifiers["Current Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Winning Or Tied Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        opponent_match = row["CurrTmWins"] >= row["CurrTmLosses"]
        for qual_object in qualifiers["Current Winning Or Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Losing Or Tied Team" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False
            
        opponent_match = row["CurrTmWins"] <= row["CurrTmLosses"]
        for qual_object in qualifiers["Current Losing Or Tied Team"]:
            if qual_object["negate"]:
                if opponent_match:
                    return False
            else:
                if not opponent_match:
                    return False
    
    if "Current Team Win Percentage" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Win Percentage"]:
            try:
                win_percentage = row["CurrTmWins"] / (row["CurrTmWins"] + row["CurrTmLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Current Team Games Over 500" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Games Over 500"]:
            games_over_500 = row["CurrTmWins"] - row["CurrTmLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Wins" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Wins"]:
            if qual_object["negate"]:
                if row["CurrTmWins"] >= qual_object["values"]["start_val"] and row["CurrTmWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrTmWins"] >= qual_object["values"]["start_val"] and row["CurrTmWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Team Losses" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Team Losses"]:
            if qual_object["negate"]:
                if row["CurrTmLosses"] >= qual_object["values"]["start_val"] and row["CurrTmLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrTmLosses"] >= qual_object["values"]["start_val"] and row["CurrTmLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Win Percentage" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Win Percentage"]:
            try:
                win_percentage = row["CurrOppWins"] / (row["CurrOppWins"] + row["CurrOppLosses"])
            except ZeroDivisionError:
                win_percentage = 0
            if qual_object["negate"]:
                if win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (win_percentage >= qual_object["values"]["start_val"] and win_percentage <= qual_object["values"]["end_val"]):
                    return False

    if "Current Opponent Games Over 500" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Games Over 500"]:
            games_over_500 = row["CurrOppWins"] - row["CurrOppLosses"]
            if qual_object["negate"]:
                if games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (games_over_500 >= qual_object["values"]["start_val"] and games_over_500 <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Wins" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Wins"]:
            if qual_object["negate"]:
                if row["CurrOppWins"] >= qual_object["values"]["start_val"] and row["CurrOppWins"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrOppWins"] >= qual_object["values"]["start_val"] and row["CurrOppWins"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Current Opponent Losses" in qualifiers:
        if "CurrOppWins" not in row or row["CurrOppWins"] == None:
            return False

        for qual_object in qualifiers["Current Opponent Losses"]:
            if qual_object["negate"]:
                if row["CurrOppLosses"] >= qual_object["values"]["start_val"] and row["CurrOppLosses"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["CurrOppLosses"] >= qual_object["values"]["start_val"] and row["CurrOppLosses"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Attendance" in qualifiers:
        if "Attendance" not in row or row["Attendance"] == None:
            return False

        for qual_object in qualifiers["Attendance"]:
            if qual_object["negate"]:
                if row["Attendance"] >= qual_object["values"]["start_val"] and row["Attendance"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Attendance"] >= qual_object["values"]["start_val"] and row["Attendance"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "Wind" in qualifiers:
        if "Wind" not in row or row["Wind"] == None:
            return False

        for qual_object in qualifiers["Wind"]:
            if qual_object["negate"]:
                if row["Wind"] >= qual_object["values"]["start_val"] and row["Wind"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Wind"] >= qual_object["values"]["start_val"] and row["Wind"] <= qual_object["values"]["end_val"]):
                    return False
    
    if "City" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
                elif venue_obj["state"] and venue_obj["state"].lower() == "ny" and val_to_check.lower() in ["brooklyn", "bronx", "flushing"]:
                    if stadium in "new york":
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact City" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["city"]

        for qual_object in qualifiers["Exact City"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "State" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact State" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["state"]
        if not val_to_check:
            return False

        for qual_object in qualifiers["Exact State"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Country" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Country" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["country"]

        for qual_object in qualifiers["Exact Country"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Time Zone" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium in val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Time Zone" in qualifiers:
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["time_zone"]

        for qual_object in qualifiers["Exact Time Zone"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == val_to_check.lower().replace("_", ""):
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Local Start Time" in qualifiers:
        if "StartTime" not in row or row["StartTime"] == None:
            return False
        if "StadiumID" not in row or row["StadiumID"] == None:
            return False

        venue_obj = team_venues[str(row["StadiumID"])]
        val_to_check = venue_obj["time_zone"]
         
        event_time = row["StartTime"].astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0)
        for qual_object in qualifiers["Local Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]

            is_match = event_time >= stat_val and event_time <= end_val
            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Start Time" in qualifiers:
        if "StartTime" not in row or row["StartTime"] == None:
            return False

        for qual_object in qualifiers["Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            event_time = row["StartTime"].astimezone(pytz.timezone(qual_object["values"]["time_zone"])).time().replace(microsecond=0)
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False

    if "Team Start Time" in qualifiers:
        if "StartTime" not in row or row["StartTime"] == None:
            return False
        
        venue_obj = determine_venue_obj(row, True)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        event_time = row["StartTime"].astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0)
        for qual_object in qualifiers["Team Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
        
    if "Opponent Start Time" in qualifiers:
        if "StartTime" not in row or row["StartTime"] == None:
            return False
        
        venue_obj = determine_venue_obj(row, False)
        if not venue_obj:
            return False

        val_to_check = venue_obj["time_zone"]

        event_time = row["StartTime"].astimezone(pytz.timezone(val_to_check)).time().replace(microsecond=0)
        for qual_object in qualifiers["Opponent Start Time"]:
            stat_val = qual_object["values"]["start_val"]
            end_val = qual_object["values"]["end_val"]
            if end_val < stat_val:
                is_match = event_time >= stat_val or event_time <= end_val
            else:
                is_match = event_time >= stat_val and event_time <= end_val

            if qual_object["negate"]:
                if is_match:
                    return False
            else:
                if not is_match:
                    return False
    
    if "Team Stadium" in qualifiers:
        if "Stadium" not in row or row["Stadium"] == None:
            return False
        
        for qual_object in qualifiers["Team Stadium"]:
            has_match = False
            for team in qual_object["values"]:
                sleague = get_team_league(team.upper(), row["Year"])
                venue_id = get_venue_obj(team.upper(), sleague, row["Year"])[0]
                if venue_id == None:
                    continue

                if venue_id == row["StadiumID"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Franchise Stadium" in qualifiers:
        if "Stadium" not in row or row["Stadium"] == None:
            return False
        
        for qual_object in qualifiers["Franchise Stadium"]:
            has_match = False
            for franchise in qual_object["values"]:
                venue_id = None
                for sleague in team_main_abbr:
                    if str(row["Year"]) in team_main_abbr[sleague]:
                        for team in team_main_abbr[sleague][str(row["Year"])]:
                            if team_main_abbr[sleague][str(row["Year"])][team] == franchise.upper():
                                venue_id = get_venue_obj(team, sleague, row["Year"])[0]
                if venue_id == None:
                    continue

                if venue_id == row["StadiumID"]:
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Stadium" in qualifiers:
        if "Stadium" not in row or row["Stadium"] == None:
            return False
        
        for qual_object in qualifiers["Stadium"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium.isdigit():
                    if int(stadium) == row["StadiumID"]:
                        has_match = True
                        break
                elif stadium in manual_stadium_map:
                    if manual_stadium_map[stadium] == row["StadiumID"]:
                        has_match = True
                        break
                else:
                    for sub_stadium in team_venues[str(row["StadiumID"])]["values"]:
                        if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", sub_stadium.lower()).strip():
                            has_match = True
                            break
                    if has_match:
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
        
    if "Exact Stadium" in qualifiers:
        if "Stadium" not in row or row["Stadium"] == None:
            return False

        for qual_object in qualifiers["Exact Stadium"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium.isdigit():
                    if int(stadium) == row["StadiumID"]:
                        has_match = True
                        break
                elif stadium in manual_stadium_map:
                    if manual_stadium_map[stadium] == row["StadiumID"]:
                        has_match = True
                        break
                else:
                    if stadium == row["Stadium"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False

    if "Surface" in qualifiers:
        if "Surface" not in row or row["Surface"] == None:
            return False

        for qual_object in qualifiers["Surface"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == "artificial":
                    if row["Surface"].lower() != "grass":
                        has_match = True
                        break
                else:
                    if stadium == row["Surface"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Condition" in qualifiers:
        if "Condition" not in row or row["Condition"] == None or row["Condition"] == "Unknown":
            return False

        for qual_object in qualifiers["Condition"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium == row["Condition"].lower():
                    has_match = True
                    break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Umpire" in qualifiers:
        if ("HPUmpire" not in row or row["HPUmpire"] == None) and ("1BUmpire" not in row or row["1BUmpire"] == None) and ("2BUmpire" not in row or row["2BUmpire"] == None) and ("3BUmpire" not in row or row["3BUmpire"] == None) and ("LFUmpire" not in row or row["LFUmpire"] == None) and ("RFUmpire" not in row or row["RFUmpire"] == None) and ("OtherUmpire" not in row or row["OtherUmpire"] == None):
            return False

        for qual_object in qualifiers["Umpire"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["HPUmpire", "1BUmpire", "2BUmpire", "3BUmpire", "LFUmpire", "RFUmpire", "OtherUmpire"]:
                    if (ump_str not in row or row[ump_str] == None):
                        continue
                    if stadium.isdigit():
                        if int(stadium) == row[ump_str + "ID"]:
                            has_match = True
                            break
                    else:
                        if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", row[ump_str].lower()).strip():
                            has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Home Plate Umpire" in qualifiers:
        if "HPUmpire" not in row or row["HPUmpire"] == None:
            return False

        for qual_object in qualifiers["Home Plate Umpire"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium.isdigit():
                    if int(stadium) == row["HPUmpireID"]:
                        has_match = True
                        break
                else:
                    if re.sub(r"[^A-Za-z\s]", "", stadium).strip() in re.sub(r"[^A-Za-z\s]", "", row["HPUmpire"].lower()).strip():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Umpire" in qualifiers:
        if ("HPUmpire" not in row or row["HPUmpire"] == None) and ("1BUmpire" not in row or row["1BUmpire"] == None) and ("2BUmpire" not in row or row["2BUmpire"] == None) and ("3BUmpire" not in row or row["3BUmpire"] == None) and ("LFUmpire" not in row or row["LFUmpire"] == None) and ("RFUmpire" not in row or row["RFUmpire"] == None) and ("OtherUmpire" not in row or row["OtherUmpire"] == None):
            return False

        for qual_object in qualifiers["Exact Umpire"]:
            has_match = False
            for stadium in qual_object["values"]:
                for ump_str in ["HPUmpire", "1BUmpire", "2BUmpire", "3BUmpire", "LFUmpire", "RFUmpire", "OtherUmpire"]:
                    if (ump_str not in row or row[ump_str] == None):
                        continue
                    if stadium.isdigit():
                        if int(stadium) == row[ump_str + "ID"]:
                            has_match = True
                            break
                    else:
                        if stadium == row[ump_str].lower():
                            has_match = True
                            break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Exact Home Plate Umpire" in qualifiers:
        if "HPUmpire" not in row or row["HPUmpire"] == None:
            return False

        for qual_object in qualifiers["Exact Home Plate Umpire"]:
            has_match = False
            for stadium in qual_object["values"]:
                if stadium.isdigit():
                    if int(stadium) == row["HPUmpireID"]:
                        has_match = True
                        break
                else:
                    if stadium == row["HPUmpire"].lower():
                        has_match = True
                        break
            if qual_object["negate"]:
                if has_match:
                    return False
            else:
                if not has_match:
                    return False
    
    if "Temperature" in qualifiers:
        if "Temperature" not in row or row["Temperature"] == None:
            return False

        for qual_object in qualifiers["Temperature"]:
            if qual_object["negate"]:
                if row["Temperature"] >= qual_object["values"]["start_val"] and row["Temperature"] <= qual_object["values"]["end_val"]:
                    return False
            else:
                if not (row["Temperature"] >= qual_object["values"]["start_val"] and row["Temperature"] <= qual_object["values"]["end_val"]):
                    return False
    
    return True

def result_call_back(qualifiers, count_info, new_rows, player_type, player_data, needs_plays, old_row_data, extra_stats, result):
    # profile = cProfile.Profile()
    # profile.enable()
    try:
        if result.exception():
            logger.info("Error parsing date " + str(old_row_data["Date"]) + " for player " + str(player_data["id"]))
            if not count_info["exception"]:
                count_info["exception"] = result.exception()
            percent_complete = 100 * (count_info["count"] / count_info["total_count"])
            if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                if needs_plays:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                count_info["current_percent"] += 10
            count_info["count"] += 1
            return

        game_data, row_data, index, sub_missing_games, sub_missing_pitch = result.result()

        if handle_result_qualifiers(game_data, index, row_data, sub_missing_games, sub_missing_pitch, player_type, player_data, qualifiers, None, count_info, extra_stats)[0]:
            new_rows.append(row_data)

        percent_complete = 100 * (count_info["count"] / count_info["total_count"])
        if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
            if needs_plays:
                logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
            count_info["current_percent"] += 10
        count_info["count"] += 1
    except Exception as err:
        try:
            if not count_info["exception"]:
                count_info["exception"] = err
            percent_complete = 100 * (count_info["count"] / count_info["total_count"])
            if count_info["total_count"] >= 10 and percent_complete >= count_info["current_percent"]:
                if needs_plays:
                    logger.info("#" + str(threading.get_ident()) + "#   " + player_data["id"] + " game data " + str(count_info["current_percent"]) + "% complete")
                count_info["current_percent"] += 10
            count_info["count"] += 1
        except Exception as err:
            if not count_info["exception"]:
                count_info["exception"] = err
        return
    # finally:
    #     ps = pstats.Stats(profile)
    #     ps.sort_stats(pstats.SortKey.TIME)
    #     ps.print_stats()

def handle_result_qualifiers(game_data, index, row_data, sub_missing_games, sub_missing_pitch, player_type, player_data, qualifiers, saved_row_data, count_info, extra_stats):
    set_row_data(game_data, row_data, player_type)

    raw_row_data = row_data
    if "Event Stat" in qualifiers or "Event Stat Reversed" in qualifiers or "Event Stats" in qualifiers or "Event Stats Reversed" in qualifiers:
        setup_career_stats(row_data, game_data, saved_row_data, index, player_type, player_data, qualifiers)
    
    if "Starting Event Stat" in qualifiers or "Starting Event Stat Reversed" in qualifiers or "Starting Event Stats" in qualifiers or "Starting Event Stats Reversed" in qualifiers:
        setup_starting_career_stats(row_data, game_data, saved_row_data, index, player_type, player_data, qualifiers)
    
    if "Game Event Stat" in qualifiers or "Game Event Stat Reversed" in qualifiers or "Game Event Stats" in qualifiers or "Game Event Stats Reversed" in qualifiers:
        setup_game_stats(row_data, game_data, player_type, player_data, qualifiers)
    
    if "Starting Game Event Stat" in qualifiers or "Starting Game Event Stat Reversed" in qualifiers or "Starting Game Event Stats" in qualifiers or "Starting Game Event Stats Reversed" in qualifiers:
        setup_starting_game_stats(row_data, game_data, player_type, player_data, qualifiers)

    if "Game Number" in qualifiers or "Run Support" in qualifiers:
        if not perform_mlb_game_qualifiers(row_data, qualifiers):
            return False, raw_row_data

    if "current-stats" in extra_stats:    
        if sub_missing_games:
            count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.mlb.com/gameday/" + str(row_data["MLBGameLink"]) + ")")
        if sub_missing_pitch:
            count_info["missing_pitch"].append("[" + str(row_data["Date"]) + "](" + "https://www.mlb.com/gameday/" + str(row_data["MLBGameLink"]) + ")")
        has_match, raw_row_data = perform_sub_mlb_game_qualifiers(row_data, player_data, qualifiers, game_data, player_type, True)
        if not has_match:
            return False, raw_row_data
    
    if "Inning Stat" in qualifiers:
        if sub_missing_games:
            count_info["missing_games"].append("[" + str(row_data["Date"]) + "](" + "https://www.mlb.com/gameday/" + str(row_data["MLBGameLink"]) + ")")
        if sub_missing_pitch:
            count_info["missing_pitch"].append("[" + str(row_data["Date"]) + "](" + "https://www.mlb.com/gameday/" + str(row_data["MLBGameLink"]) + ")")
        has_match, raw_row_data = perform_sub_mlb_inning_qualifiers(row_data, player_data, qualifiers, game_data, player_type)
        if not has_match:
            return False, raw_row_data

    return True, raw_row_data

def set_row_data(player_game_info, row_data, player_type):
    if not player_game_info:
        return
    if player_game_info["RS"] != None:
        row_data["RS"] = player_game_info["RS"]
        row_data["BQS"] = player_game_info["BQS"]
        row_data["IR"] = player_game_info["IR"]
        row_data["IS"] = player_game_info["IS"]
        row_data["ExitRuns"] = player_game_info["ExitRuns"]
    row_data["TmH"] = player_game_info["TmH"]
    row_data["OppH"] = player_game_info["OppH"]
    row_data["TmR"] = player_game_info["TmR"]
    row_data["OppR"] = player_game_info["OppR"]
    row_data["TmRBI"] = player_game_info["TmRBI"]
    row_data["OppRBI"] = player_game_info["OppRBI"]
    row_data["TmHR"] = player_game_info["TmHR"]
    row_data["OppHR"] = player_game_info["OppHR"]
    row_data["Wind"] = player_game_info["Wind"]
    row_data["Number"] = player_game_info["Number"]

    if player_type["da_type"] != "Batter" and "RS" in row_data:
        if row_data["RS"] > row_data.get("R", 0):
            row_data["RunSW"] = 1
        elif row_data["RS"] < row_data.get("R", 0):
            row_data["RunSL"] = 1
        elif row_data.get("GS", 0):
            row_data["RunSND"] = 1

        if row_data["RS"] > row_data["ExitRuns"]:
            row_data["ExitW"] = 1
        elif row_data["RS"] < row_data["ExitRuns"]:
            row_data["ExitL"] = 1
        elif row_data.get("GS", 0):
            row_data["ExitND"] = 1

def get_mlb_game_links_schedule_links(player_data, player_type, player_link, all_rows, qualifiers, s):
    seasons_without_id = list(set([row["Year"] for row in all_rows if not "MLBGameLink" in row]))
    for season in seasons_without_id:
        sub_year = season
        for team in player_data["numbers_year_map"][sub_year]:
            if team not in player_data["player_team_map"]:
                continue
            team_name = player_data["player_team_map"][team]
            
            sleague = get_team_league(team, sub_year)

            if team_name in get_team_ids.manual_mappings:
                og_team_name = team_name
                team_name = get_team_ids.manual_mappings[team_name]
                if isinstance(team_name, dict):
                    if sleague in team_name:
                        team_name = team_name[sleague]
                    else:
                        team_name = og_team_name

            if team_name == "Washington Senators":
                if sleague == "AL":
                    if sub_year < 1961:
                        team_name = "Washington Senators (1901)"
                elif sleague == "NL":
                    if sub_year < 1891:
                        team_name = "Washington Senators (1886)"
            elif team_name == "Baltimore Orioles":
                if sleague == "AA":
                    if sub_year < 1890:
                        team_name = "Baltimore Orioles (1882)"
                elif sleague == "AL":
                    if sub_year < 1903:
                        team_name = "Baltimore Orioles (1901)"
            elif team_name == "Cincinnati Reds":
                if sleague == "NL":
                    if sub_year < 1882:
                        team_name = "Cincinnati Reds (1876)"
            elif team_name == "Columbus Colts":
                if sleague == "AA":
                    if sub_year < 1889:
                        team_name = "Columbus Colts (1883)"
            elif team_name == "Milwaukee Brewers":
                if sleague == "AL":
                    if sub_year < 1968:
                        team_name = "Milwaukee Brewers (1901)"
            elif team_name == "Washington Nationals":
                if sleague == "NL":
                    if sub_year < 1890:
                        team_name = "Washington Senators (1886)"
            elif team_name == "Cleveland Blues":
                if sleague == "NL":
                    if sub_year < 1880:
                        team_name = "Cleveland Spiders (1879)"

            if sleague not in team_ids or team_name not in team_ids[sleague]:
                continue

            team_id = team_ids[sleague][team_name]
            parse_mlb_team_year_link(team_id, sub_year, qualifiers, all_rows, team, s)

    seasons_with_id = list(set([row["Year"] for row in all_rows if "MLBGameLink" in row and "FoundScheduleGame" not in row]))
    for season in seasons_with_id:
        sesaon_team_ids = list(set([row["MLBTmID"] for row in all_rows if "MLBGameLink" in row and "FoundScheduleGame" not in row and row["Year"] == season]))
        for team_id in sesaon_team_ids:
            parse_mlb_team_year_link(team_id, season, qualifiers, all_rows, None, s)
            
def parse_mlb_team_year_link(team_id, sub_year, qualifiers, all_rows, team, s):
    da_dates = []
    scheudle_url = mlb_team_schedule_url_format.format(team_id, sub_year) + "&hydrate="
    if "National Game" in qualifiers or "Any National Game" in qualifiers or "TV Network" in qualifiers or "Radio Network" in qualifiers or "Exact TV Network" in qualifiers or "Exact Radio Network" in qualifiers or "National TV Network" in qualifiers or "National Exact TV Network" in qualifiers or "Any National TV Network" in qualifiers or "Any National Exact TV Network" in qualifiers:
        scheudle_url += "broadcasts(all),"
    if "Surface" in qualifiers:
        scheudle_url += "venue(fieldInfo),"
    if "Condition" in qualifiers or "Temperature" in qualifiers or "Wind" in qualifiers:
        scheudle_url += "weather,"
    if "Exact Umpire" in qualifiers or "Exact Home Plate Umpire" in qualifiers or "Umpire" in qualifiers or "Home Plate Umpire" in qualifiers:
        scheudle_url += "officials,"
    if "Attendance" in qualifiers or "Start Time" in qualifiers or "Local Start Time" in qualifiers or "Team Start Time" in qualifiers or "Opponent Start Time" in qualifiers:
        scheudle_url += "gameInfo,"
        
    if scheudle_url.endswith(","):
        scheudle_url = scheudle_url[:-1]
    else:
        scheudle_url = scheudle_url[:-9]

    data = url_request_json(s, scheudle_url)

    for game in data["dates"]:
        da_dates.append(game)

    # for month_int in range(1, 13):
    #     min_date = datetime.date(sub_year, month_int, 1)
    #     max_date = datetime.date(sub_year, month_int, calendar.monthrange(sub_year, month_int)[1])

    #     scheudle_url = mlb_team_schedule_url_format.format(team_id, urllib.parse.quote_plus(str(min_date)), urllib.parse.quote_plus(str(max_date))) + "&hydrate="
    #     if "National Game" in qualifiers or "Any National Game" in qualifiers or "TV Network" in qualifiers or "Radio Network" in qualifiers or "Exact TV Network" in qualifiers or "Exact Radio Network" in qualifiers or "National TV Network" in qualifiers or "National Exact TV Network" in qualifiers or "Any National TV Network" in qualifiers or "Any National Exact TV Network" in qualifiers:
    #         scheudle_url += "broadcasts(all),"

    #     if "National Game" in qualifiers or "Any National Game" in qualifiers or "TV Network" in qualifiers or "Radio Network" in qualifiers or "Exact TV Network" in qualifiers or "Exact Radio Network" in qualifiers or "National TV Network" in qualifiers or "National Exact TV Network" in qualifiers or "Any National TV Network" in qualifiers or "Any National Exact TV Network" in qualifiers:
    #         scheudle_url += "broadcasts(all),"
    #     if "Surface" in qualifiers:
    #         scheudle_url += "venue(fieldInfo),"
    #     if "Condition" in qualifiers or "Temperature" in qualifiers or "Wind" in qualifiers:
    #         scheudle_url += "weather,"
    #     if "Exact Umpire" in qualifiers or "Exact Home Plate Umpire" in qualifiers or "Umpire" in qualifiers or "Home Plate Umpire" in qualifiers:
    #         scheudle_url += "officials,"
    #     if "Attendance" in qualifiers:
    #         scheudle_url += "gameInfo,"
            
    #     if scheudle_url.endswith(","):
    #         scheudle_url = scheudle_url[:-1]
    #     else:
    #         scheudle_url = scheudle_url[:-9]
    #     data = url_request_json(s, scheudle_url)

    #     for game in data["dates"]:
    #         da_dates.append(game)

    add_missing_schedule_games(team_id, sub_year, da_dates, s)

    national_networks_to_skip = ["MLBN", "MLBN-INT", "Twitter", "YouTube", "FB-WATCH", "ESPN+", "Apple TV+", "Peacock"]

    all_games = []
    for sub_game in da_dates:
        ids_to_header = {}
        for game in sub_game["games"]:
            if game["officialDate"] != sub_game["date"]:
                continue
            game_type = game["gameType"]
            if game_type != "R" and game_type != "F" and game_type != "D" and game_type != "L" and game_type != "W":
                continue
            if game["status"]["detailedState"]:
                if game["status"]["detailedState"] == "Cancelled" or game["status"]["detailedState"] == "Warmup" or game["status"]["detailedState"] == "Postponed" or game["status"]["detailedState"].startswith("Suspended"):
                    continue
            if not "score" in game["teams"]["home"]:
                continue
            ids_to_header[game["gamePk"]] = len(ids_to_header)
        
        if len(ids_to_header) > 1:
            for game_pk in ids_to_header:
                ids_to_header[game_pk] += 1

        for game in sub_game["games"]:
            if game["gamePk"] not in ids_to_header:
                continue

            if game["season"] == str(sub_year):
                game_type = game["gameType"]
                if game_type != "R" and game_type != "F" and game_type != "D" and game_type != "L" and game_type != "W":
                    continue
                if game["status"]["detailedState"]:
                    if game["status"]["detailedState"] == "Cancelled" or game["status"]["detailedState"] == "Warmup" or game["status"]["detailedState"] == "Postponed" or game["status"]["detailedState"].startswith("Suspended"):
                        continue
                if not "score" in game["teams"]["home"]:
                    continue

                game["time_int"] = ids_to_header[game["gamePk"]]
            
                all_games.append(game)

    for game_index, game in enumerate(all_games):
        game_datetime = dateutil.parser.parse(game["officialDate"])
        game_date = game_datetime.date()
        time_int = game["time_int"]
        game_datetime = game_datetime.replace(hour=time_int)

        is_national = False
        is_any_national = False
        tv_networks = []
        radio_networks = []
        national_tv_networks = []
        any_national_tv_networks = []

        if "broadcasts" in game and game["broadcasts"]:
            for broadcast in game["broadcasts"]:
                if "callSign" in broadcast and broadcast["callSign"]:
                    call_sign = broadcast["callSign"]
                else:
                    call_sign = broadcast["name"].split(" ")[0]
                    
                if broadcast["type"] == "TV":
                    if "isNational" in broadcast and broadcast["isNational"]:
                        is_any_national = True
                        if call_sign not in national_networks_to_skip:
                            is_national = True
                            national_tv_networks.append(re.sub(r"\s+", "", call_sign.lower()))
                        any_national_tv_networks.append(re.sub(r"\s+", "", call_sign.lower()))
                    tv_networks.append(re.sub(r"\s+", "", call_sign.lower()))
                elif broadcast["type"] in ["AM", "FM"]:
                    radio_networks.append(re.sub(r"\s+", "", call_sign.lower()))
        for index, row_data in enumerate(all_rows):
            if "FoundScheduleGame" in row_data:
                continue

            if row_data["Date"] == game_date:
                if row_data["DateTime"] == game_datetime or (str(game_date) in special_doubleheaders and team in special_doubleheaders[str(game_date)]["single_teams"]):
                    team_match = False
                    if "MLBTmID" in row_data:
                        team_match = row_data["MLBTmID"] == team_id
                    else:
                        team_match = row_data["Tm"] == team
                    if team_match:
                        row_data["MLBGameLink"] = game["gamePk"]
                        row_data["MLBTmID"] = game["teams"]["home"]["team"]["id"]
                        row_data["MLBOppID"] = game["teams"]["home"]["team"]["id"]
                        row_data["FoundScheduleGame"] = True
                        if "broadcasts" in game and game["broadcasts"]:
                            row_data["IsNational"] = is_national
                            row_data["AnyIsNational"] = is_any_national
                            row_data["TVNetworks"] = tv_networks
                            row_data["RadioNetworks"] = radio_networks
                            row_data["NationalTVNetworks"] = national_tv_networks
                            row_data["AnyNationalTVNetworks"] = any_national_tv_networks
                        
                        is_home = game["teams"]["home"]["team"]["id"] == team_id
                        is_final = game["status"]["abstractGameState"] == "Final"

                        if is_home:
                            row_data["CurrTmWins"] = game["teams"]["home"]["leagueRecord"]["wins"]
                            row_data["CurrTmLosses"] = game["teams"]["home"]["leagueRecord"]["losses"]

                            row_data["CurrOppWins"] = game["teams"]["away"]["leagueRecord"]["wins"]
                            row_data["CurrOppLosses"] = game["teams"]["away"]["leagueRecord"]["losses"]

                            if is_final:
                                if game["teams"]["home"]["score"] > game["teams"]["away"]["score"]:
                                    row_data["CurrTmWins"] -= 1
                                    row_data["CurrOppLosses"] -= 1
                                elif game["teams"]["home"]["score"] < game["teams"]["away"]["score"]:
                                    row_data["CurrTmLosses"] -= 1
                                    row_data["CurrOppWins"] -= 1
                        else:
                            row_data["CurrTmWins"] = game["teams"]["away"]["leagueRecord"]["wins"]
                            row_data["CurrTmLosses"] = game["teams"]["away"]["leagueRecord"]["losses"]

                            row_data["CurrOppWins"] = game["teams"]["home"]["leagueRecord"]["wins"]
                            row_data["CurrOppLosses"] = game["teams"]["home"]["leagueRecord"]["losses"]

                            if is_final:
                                if game["teams"]["away"]["score"] > game["teams"]["home"]["score"]:
                                    row_data["CurrTmWins"] -= 1
                                    row_data["CurrOppLosses"] -= 1
                                elif game["teams"]["away"]["score"] < game["teams"]["home"]["score"]:
                                    row_data["CurrTmLosses"] -= 1
                                    row_data["CurrOppWins"] -= 1
                        
                        if game["dayNight"] == "day":
                            row_data["Time"] = "D"
                        elif game["dayNight"] == "night":
                            row_data["Time"] = "N"


                        if "gameInfo" in game and "firstPitch" in game["gameInfo"]:
                            row_data["StartTime"] = dateutil.parser.parse(game["gameInfo"]["firstPitch"])

                        if "gameInfo" in game and "attendance" in game["gameInfo"]:
                            row_data["Attendance"] = game["gameInfo"]["attendance"]

                        if "officials" in game:
                            for index, umpire_obj in enumerate(game["officials"]):
                                if umpire_obj["officialType"] == "Home Plate":
                                    row_data["HPUmpire"] = umpire_obj["official"]["fullName"]
                                    row_data["HPUmpireID"] = umpire_obj["official"]["id"]
                                elif umpire_obj["officialType"] == "First Base":
                                    row_data["1BUmpire"] = umpire_obj["official"]["fullName"]
                                    row_data["1BUmpireID"] = umpire_obj["official"]["id"]
                                elif umpire_obj["officialType"] == "Second Base":
                                    row_data["2BUmpire"] = umpire_obj["official"]["fullName"]
                                    row_data["2BUmpireID"] = umpire_obj["official"]["id"]
                                elif umpire_obj["officialType"] == "Third Base":
                                    row_data["3BUmpire"] = umpire_obj["official"]["fullName"]
                                    row_data["3BUmpireID"] = umpire_obj["official"]["id"]
                                elif umpire_obj["officialType"] == "Left Field":
                                    row_data["LFUmpire"] = umpire_obj["official"]["fullName"]
                                    row_data["LFUmpireID"] = umpire_obj["official"]["id"]
                                elif umpire_obj["officialType"] == "Right Field":
                                    row_data["RFUmpire"] = umpire_obj["official"]["fullName"]
                                    row_data["RFUmpireID"] = umpire_obj["official"]["id"]
                                else:
                                    row_data["OtherUmpire"] = umpire_obj["official"]["fullName"]
                                    row_data["OtherUmpireID"] = umpire_obj["official"]["id"]

                        if "weather" in game:
                            if "temp" in game["weather"]:
                                row_data["Temperature"] = int(game["weather"]["temp"])
                            if "wind" in game["weather"]:
                                row_data["Wind"] = int(game["weather"]["wind"].split()[0])
                            if "condition" in game["weather"]:
                                row_data["Condition"] = game["weather"]["condition"]

                        if "fieldInfo" in game["venue"]:
                            row_data["Surface"] = game["venue"]["fieldInfo"]["turfType"]
                        
                        row_data["Stadium"] = unidecode.unidecode(game["venue"]["name"]).strip()
                        row_data["StadiumID"] = game["venue"]["id"]

                        if row_data["is_playoffs"]:
                            continue

                        if "seriesNumber" in game["teams"]["home"]:
                            if is_home:
                                row_data["SeriesID"] = game["teams"]["home"]["seriesNumber"]
                            else:
                                row_data["SeriesID"] = game["teams"]["away"]["seriesNumber"]

                            row_data["RoundGame"] = game["seriesGameNumber"]
                            row_data["SeriesLength"] = game["gamesInSeries"]

                            round_length = round(row_data["SeriesLength"] / 2)
                            if row_data["SeriesLength"] % 2 == 0:
                                round_length += 1
                            team_wins = 0
                            opponent_wins = 0
                            
                            has_missing_game = False
                            for previous_game in reversed(all_games[0:game_index]):
                                if previous_game["gameType"] in ("F", "D", "L", "W"):
                                    continue

                                prev_is_home = previous_game["teams"]["home"]["team"]["id"] == team_id
                                prev_is_final = previous_game["status"]["abstractGameState"] == "Final"
                                
                                prev_result = None
                                if "seriesNumber" in previous_game["teams"]["home"]:
                                    if is_home:
                                        prev_series_id = previous_game["teams"]["home"]["seriesNumber"]

                                        if prev_is_final:
                                            if previous_game["teams"]["home"]["score"] > previous_game["teams"]["away"]["score"]:
                                                prev_result = "W"
                                            elif previous_game["teams"]["home"]["score"] < previous_game["teams"]["away"]["score"]:
                                                prev_result = "L"
                                    else:
                                        prev_series_id = previous_game["teams"]["away"]["seriesNumber"]

                                        if prev_is_final:
                                            if previous_game["teams"]["away"]["score"] > previous_game["teams"]["home"]["score"]:
                                                prev_result = "W"
                                            elif previous_game["teams"]["away"]["score"] < previous_game["teams"]["home"]["score"]:
                                                prev_result = "L"

                                    if prev_series_id == row_data["SeriesID"]:
                                        if prev_result == "W":
                                            team_wins += 1
                                        elif prev_result == "L":
                                            opponent_wins += 1
                                else:
                                    has_missing_game = True
                        
                            if not has_missing_game:
                                if opponent_wins > round_length or team_wins > round_length:
                                    row_data["Clinching"] = False
                                    row_data["Elimination"] = False
                                else:
                                    if opponent_wins == round_length - 1:  
                                        row_data["Elimination"] = True
                                    else:
                                        row_data["Elimination"] = False
                                    if team_wins == round_length - 1:
                                        row_data["Clinching"] = True
                                    else:
                                        row_data["Clinching"] = False
                                
                                row_data["SeriesTeamWins"] = team_wins
                                row_data["SeriesOpponentWins"] = opponent_wins
                                row_data["SeriesScore"] = team_wins - opponent_wins

def add_missing_schedule_games(team_id, sub_year, da_dates, s):
    if sub_year in missing_mlb_schedule_games and team_id in missing_mlb_schedule_games[sub_year]:
        for missing_game_id in missing_mlb_schedule_games[sub_year][team_id]:
            schedule_url = mlb_team_schedule_url_date_format.format(team_id, missing_mlb_schedule_games[sub_year][team_id][missing_game_id]["date"], missing_mlb_schedule_games[sub_year][team_id][missing_game_id]["date"])
            data = url_request_json(s, schedule_url)
            for game in data["dates"]:
                existing_match = False
                for index, existing_game in enumerate(da_dates):
                    if existing_game["date"] == game["date"]:
                        da_dates[index] = existing_game
                        existing_match = True
                        break
                if not existing_match:
                    da_dates.insert(missing_mlb_schedule_games[sub_year][team_id][missing_game_id]["index"], game)
    
def get_live_game_data(row_index, has_count_stat, player_data, row_data, player_type, qualifiers, needs_plays, s):
    missing_games = False
    missing_pitch = False
    game_data = {
        "missing_data" : False,
        "batting_events" : [],
        "pitching_events" : [],
        "pitching_run_events" : [],
        "pitch_event_to_run_event" : {},
        "start_event_time" : None,
        "end_event_time" : None,
        "RS" : None,
        "BQS" : None,
        "IR" : None,
        "IS" : None,
        "ExitRuns" : None,
        "TmH" : None,
        "OppH" : None,
        "TmR" : None,
        "OppR" : None,
        "TmRBI" : None,
        "OppRBI" : None,
        "TmHR" : None,
        "OppHR" : None,
        "Wind" : None,
        "Number" : None,
        "final_team_position_map" : None
    }

    if "MLBGameLink" not in row_data:
        sleague = row_data["TmLg"]
        if sleague in ["AL", "NL"]:
            raise Exception("#" + str(threading.get_ident()) + "#   " + "Unable to get MLB game data for BRef ID : " + player_data["id"] + " and date " + str(row_data["DateTime"]) + ". Will be missing game")
        else:
            missing_games = True
            game_data["missing_data"] = True
            return game_data, row_data, row_index, missing_games, missing_pitch
    
    #print("https://statsapi.mlb.com/api/v1.1/game/" + str(row_data["MLBGameLink"]) + "/feed/live")
    try:
        sub_data = url_request_json(s, "https://statsapi.mlb.com/api/v1.1/game/" + str(row_data["MLBGameLink"]) + "/feed/live")
    except urllib.error.HTTPError as err:
        if err.status == 404:
            missing_games = True
            game_data["missing_data"] = True
            return game_data, row_data, row_index, missing_games, missing_pitch
        else:
            raise

    if "message" in sub_data:
        missing_games = True
        game_data["missing_data"] = True
        return game_data, row_data, row_index, missing_games, missing_pitch

    team_position_map = {
        "PH" : set(),
        "PR" : set()
    }
    opp_position_map = {
        "PH" : set(),
        "PR" : set()
    }

    team_primary_position_map = {}
    opp_primary_position_map = {}

    team_main_position_map = {}
    opp_main_position_map = {}

    team_batting_order_map = {}
    opp_batting_order_map = {}

    is_home_team = None
    for player in sub_data["liveData"]["boxscore"]["teams"]["away"]["players"]:
        player = sub_data["liveData"]["boxscore"]["teams"]["away"]["players"][player]
        if player["person"]["id"] == player_data["mlb_id"]:
            is_home_team = False
            if "jerseyNumber" in player and player["jerseyNumber"] and player["jerseyNumber"].isdigit():
                game_data["Number"] = int(player["jerseyNumber"])
            break
    
    for player in sub_data["liveData"]["boxscore"]["teams"]["home"]["players"]:
        player = sub_data["liveData"]["boxscore"]["teams"]["home"]["players"][player]
        if player["person"]["id"] == player_data["mlb_id"]:
            is_home_team = True
            if "jerseyNumber" in player and player["jerseyNumber"] and player["jerseyNumber"].isdigit():
                game_data["Number"] = int(player["jerseyNumber"])
            break
    if is_home_team == None:
        raise Exception("Could not determine home team")

    if is_home_team:
        game_data["TmH"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["hits"]
        game_data["TmR"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["runs"]
        game_data["TmRBI"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["rbi"]
        game_data["TmHR"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["homeRuns"]
        game_data["OppH"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["hits"]
        game_data["OppR"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["runs"]
        game_data["OppRBI"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["rbi"]
        game_data["OppHR"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["homeRuns"]
    else:
        game_data["TmH"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["hits"]
        game_data["TmR"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["runs"]
        game_data["TmRBI"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["rbi"]
        game_data["TmHR"] = sub_data["liveData"]["boxscore"]["teams"]["away"]["teamStats"]["batting"]["homeRuns"]
        game_data["OppH"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["hits"]
        game_data["OppR"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["runs"]
        game_data["OppRBI"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["rbi"]
        game_data["OppHR"] = sub_data["liveData"]["boxscore"]["teams"]["home"]["teamStats"]["batting"]["homeRuns"]

    if needs_plays:
        if not sub_data["liveData"]["plays"]["allPlays"]:
            missing_games = True
            game_data["missing_data"] = True
            return game_data, row_data, row_index, missing_games, missing_pitch

        game_data["strike_zone_map"] = {}
        game_data["first_names"] = {}
        game_data["birth_first_names"] = {}
        game_data["last_names"] = {}
        game_data["countries"] = {}
        game_data["pitch_sides"] = {}
        game_data["bat_sides"] = {}
        for player in sub_data["gameData"]["players"]:
            player = sub_data["gameData"]["players"][player]

            if "strikeZoneTop" in player and "strikeZoneBottom" in player:
                game_data["strike_zone_map"][player["id"]] = {
                    "strikeZoneTop" : player["strikeZoneTop"],
                    "strikeZoneBottom" : player["strikeZoneBottom"]
                }

            if "useName" in player and player["useName"]:
                game_data["first_names"][player["id"]] = player["useName"]
            else:
                game_data["first_names"][player["id"]] = player["firstName"]
            game_data["birth_first_names"][player["id"]] = player["firstName"]
            
            game_data["last_names"][player["id"]] = player["lastName"]
            if "birthCountry" in player:
                game_data["countries"][player["id"]] = player["birthCountry"]
            game_data["pitch_sides"][player["id"]] = player["pitchHand"]["code"]
            game_data["bat_sides"][player["id"]] = player["batSide"]["code"]
            
        for player in sub_data["liveData"]["boxscore"]["teams"]["away"]["players"]:
            player = sub_data["liveData"]["boxscore"]["teams"]["away"]["players"][player]

            if not player["gameStatus"]["isOnBench"] and not player["gameStatus"]["isSubstitute"] and not player["allPositions"][0]["abbreviation"] == "P":
                if is_home_team:
                    opp_position_map[player["allPositions"][0]["abbreviation"]] = player["person"]["id"]
                    if "battingOrder" in player:
                        opp_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])
                else:
                    team_position_map[player["allPositions"][0]["abbreviation"]] = player["person"]["id"]
                    if "battingOrder" in player:
                        team_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])

            if player["stats"]["pitching"] and player["stats"]["pitching"]["gamesStarted"]:
                if is_home_team:
                    opp_position_map["P"] = player["person"]["id"]
                    if "battingOrder" in player:
                        opp_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])
                else:
                    team_position_map["P"] = player["person"]["id"]
                    if "battingOrder" in player:
                        team_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])

            if is_home_team:
                opp_primary_position_map[player["person"]["id"]] = player["position"]["abbreviation"]
                opp_main_position_map[player["person"]["id"]] = sub_data["gameData"]["players"]["ID" + str(player["person"]["id"])]["primaryPosition"]["abbreviation"]
            else:
                team_primary_position_map[player["person"]["id"]] = player["position"]["abbreviation"]
                team_primary_position_map[player["person"]["id"]] = sub_data["gameData"]["players"]["ID" + str(player["person"]["id"])]["primaryPosition"]["abbreviation"]
        
        for player in sub_data["liveData"]["boxscore"]["teams"]["home"]["players"]:
            player = sub_data["liveData"]["boxscore"]["teams"]["home"]["players"][player]

            if not player["gameStatus"]["isOnBench"] and not player["gameStatus"]["isSubstitute"] and not player["allPositions"][0]["abbreviation"] == "P":
                if is_home_team:
                    team_position_map[player["allPositions"][0]["abbreviation"]] = player["person"]["id"]
                    team_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])
                    if "battingOrder" in player:
                        team_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])
                else:
                    opp_position_map[player["allPositions"][0]["abbreviation"]] = player["person"]["id"]
                    opp_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])
                    if "battingOrder" in player:
                        opp_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])

            if player["stats"]["pitching"] and player["stats"]["pitching"]["gamesStarted"]:
                if is_home_team:
                    team_position_map["P"] = player["person"]["id"]
                    if "battingOrder" in player:
                        team_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])
                else:
                    opp_position_map["P"] = player["person"]["id"]
                    if "battingOrder" in player:
                        opp_batting_order_map[player["person"]["id"]] = int(player["battingOrder"][0])
            
            if is_home_team:
                team_primary_position_map[player["person"]["id"]] = player["position"]["abbreviation"]
                team_primary_position_map[player["person"]["id"]] = sub_data["gameData"]["players"]["ID" + str(player["person"]["id"])]["primaryPosition"]["abbreviation"]
            else:
                opp_primary_position_map[player["person"]["id"]] = player["position"]["abbreviation"]
                opp_main_position_map[player["person"]["id"]] = sub_data["gameData"]["players"]["ID" + str(player["person"]["id"])]["primaryPosition"]["abbreviation"]

        run_support = 0
        exit_runs = 0
        inherited_runners = 0
        inherited_runners_scored = 0
        bequeathed_runners_scored = 0
        is_pitching = False
        if "GS" in row_data and row_data["GS"]:
            is_pitching = True

        batter_matchup_map = {}
        pitcher_matchup_map = {}
        # pitcher_responsible_map = {}

        starter_team_position_map = team_position_map.copy()
        starter_opp_position_map = opp_position_map.copy()

        pitch_count_obj = {
            "team_pitch_count" : 0,
            "opp_pitch_count" : 0
        }

        innings_pitched_obj = {
            "team_pitch_count" : 0,
            "opp_pitch_count" : 0
        }
        
        first_batter_inning = False
        last_top = None
        last_top_event = None
        next_play_pinch = None
        all_events = []
        
        game_winning_rbi = None
        game_winning_driven_in = None
        game_winning_run = None
        game_winning_team = None
        team_score = 0
        opp_score = 0
        team_rbis = 0
        opp_rbis = 0
        team_driven_in = 0
        opp_driven_in = 0

        has_play_id = False
        for scoring_play in sub_data["liveData"]["plays"]["allPlays"]:
            for inherited_play in scoring_play["playEvents"]:
                if "playId" in inherited_play:
                    has_play_id = True
                    break

        is_final = sub_data["gameData"]["status"]["abstractGameState"] == "Final"

        for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
            if scoring_play["result"]["type"] != "atBat" or "eventType" not in scoring_play["result"]:
                continue

            runners_in_order = []
            own_runners = []
            for runner in scoring_play["runners"]:
                if runner["details"]["runner"]["id"] == scoring_play["matchup"]["batter"]["id"]:
                    own_runners.append(runner)
                else:
                    runners_in_order.append(runner)
            runners_in_order += own_runners
            scoring_play["runners"] = runners_in_order
        
            if scoring_play["result"]["eventType"] == "ejection":
                if scoring_play["count"]["strikes"] == 3:
                    scoring_play["result"]["eventType"] = "strikeout"
                    scoring_play["playEvents"].pop()
        
        has_count_data = False
        has_pitch_type_data = False
        all_has_pitch_type_data = True

        for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
            if scoring_play["result"]["type"] != "atBat" or "eventType" not in scoring_play["result"]:
                continue
            
            for play in scoring_play["playEvents"]:
                if play["isPitch"]:
                    code = play["details"]["call"]["code"][-1:].upper()
                    if code not in ["S", "B", "E", "X", "D", "K", "I", "H"]:
                        has_count_data = True

                    if code not in ["V"]:
                        if "type" in play["details"] and play["details"]["type"] and play["details"]["type"]["description"]:
                            has_pitch_type_data = True
                        else:
                            all_has_pitch_type_data = False
        
        if not has_count_data:
            missing_pitch = True
            if has_count_stat or "Hit Location" in qualifiers or "Exact Hit Location" in qualifiers or "Bunting" in qualifiers or "Fastball" in qualifiers or "Out Of Zone" in qualifiers or "In Zone" in qualifiers or "Breaking" in qualifiers or "Offspeed" in qualifiers or "Swung At First Pitch" in qualifiers or "First Pitch" in qualifiers or "Batter Ahead" in qualifiers or "Even Count" in qualifiers or "Pitcher Ahead" in qualifiers or "After Batter Ahead" in qualifiers or "After Even Count" in qualifiers or "After Pitcher Ahead" in qualifiers or "Full Count" in qualifiers or "Swinging On Strikes" in qualifiers or "Swinging On Balls" in qualifiers or "After Swinging On Strikes" in qualifiers or "After Swinging On Balls" in qualifiers or "After Strikes" in qualifiers or "After Balls" in qualifiers or "Strikes" in qualifiers or "Balls" in qualifiers or "Pitch Speed" in qualifiers or "Pitch Zone" in qualifiers or "Pitch Spin" in qualifiers or "Exit Velocity" in qualifiers or "Hit Distance" in qualifiers or "Hit Coordinates" in qualifiers or "Hit Y Coordinate" in qualifiers or "Hit X Coordinate" in qualifiers or "Pitch Coordinates" in qualifiers or "Pitch Y Coordinate" in qualifiers or "Pitch X Coordinate" in qualifiers or "Absolute Pitch Coordinates" in qualifiers or "Absolute Pitch Y Coordinate" in qualifiers or "Absolute Pitch X Coordinate" in qualifiers or "Hit Within Distance" in qualifiers or "Pitch Within Distance" in qualifiers or "Absolute Pitch Within Distance" in qualifiers or "Launch Angle" in qualifiers or "Count" in qualifiers or "After Count" in qualifiers or "After Swinging On Count" in qualifiers or "Swinging On Count" in qualifiers or "Game Pitch Count" in qualifiers or "Team Pitch Count" in qualifiers or "Pitch Count" in qualifiers or "Batters Faced" in qualifiers or "Plate Appearances" in qualifiers or "Starting Pitch Count" in qualifiers or "At Bat Pitch Count" in qualifiers or "Pitch Type" in qualifiers or "Exact Pitch Type" in qualifiers or "Hit Trajectory" in qualifiers or "Hit Hardness" in qualifiers:
                missing_games = True
                game_data["missing_data"] = True
                return game_data, row_data, row_index, missing_games, missing_pitch
        
        if ("Fastball" in qualifiers or "Breaking" in qualifiers or "Offspeed" in qualifiers or "Pitch Type" in qualifiers or "Exact Pitch Type" in qualifiers):
            if not has_pitch_type_data:
                missing_games = True
                game_data["missing_data"] = True
                return game_data, row_data, row_index, missing_games, missing_pitch
            # elif not all_has_pitch_type_data:
            #     missing_pitch = True

        prev_team_pitcher = starter_team_position_map["P"] if "P" in starter_team_position_map else None
        prev_opp_pitcher = starter_opp_position_map["P"] if "P" in starter_opp_position_map else None

        for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
            if scoring_play["result"]["type"] != "atBat" or "eventType" not in scoring_play["result"]:
                continue

            is_top_inning = scoring_play["about"]["isTopInning"]

            if is_home_team:
                is_team_batting = False if is_top_inning else True
            else:
                is_team_batting = True if is_top_inning else False

            current_batter = None
            current_pitcher = None

            for play in scoring_play["playEvents"]:
                if "isSubstitution" in play and play["isSubstitution"]:
                    if play["details"]["eventType"] == "pitching_substitution":
                        current_pitcher = play["player"]["id"]
                        if is_team_batting:
                            old_player = prev_opp_pitcher
                            prev_opp_pitcher = current_pitcher
                        else:
                            old_player = prev_team_pitcher
                            prev_team_pitcher = current_pitcher
                        if play["count"]["balls"] != 0 or play["count"]["strikes"] != 0:
                            if (play["count"]["balls"] == 2 and play["count"]["strikes"] == 0) or (play["count"]["balls"] == 2 and play["count"]["strikes"] == 1) or (play["count"]["balls"] == 3 and play["count"]["strikes"] == 0) or (play["count"]["balls"] == 3 and play["count"]["strikes"] == 0) or (play["count"]["balls"] == 3 and play["count"]["strikes"] == 1) or (play["count"]["balls"] == 3 and play["count"]["strikes"] == 2):
                                if scoring_play["result"]["eventType"].endswith("walk"):
                                    play["postPlay"] = play["player"]["id"]
                                    play["player"]["id"] = old_player
                                    scoring_play["matchup"]["pitcher"]["id"] = old_player

                                    pitch_pos = game_data["pitch_sides"][current_pitcher]
                                    if pitch_pos == "S":
                                        bat_pos = game_data["bat_sides"][current_batter if current_batter else scoring_play["matchup"]["batter"]["id"]]
                                        if bat_pos == "S":
                                            scoring_play["matchup"]["splits"]["batter"] = None
                                        else:
                                            if bat_pos == "R":
                                                scoring_play["matchup"]["splits"]["batter"] = "vs_LHP"
                                            else:
                                                scoring_play["matchup"]["splits"]["batter"] = "vs_RHP"
                                    else:
                                        scoring_play["matchup"]["splits"]["batter"] = "vs_" + pitch_pos + "HP"

                                    if old_player == player_data["mlb_id"] and ("Pitching Lefty" in qualifiers or "Pitching Righty" in qualifiers):
                                        missing_games = True
                                    
                                    if scoring_play["matchup"]["batter"]["id"] == player_data["mlb_id"] and player_type["da_type"] == "Batter" and ("Facing Lefty" in qualifiers or "Facing Righty" in qualifiers or "Platoon Advantage" in qualifiers):
                                        missing_games = True
                            
                            if old_player == player_data["mlb_id"] and ("Pitching Lefty" in qualifiers or "Pitching Righty" in qualifiers):
                                missing_pitch = True
                            
                            if scoring_play["matchup"]["batter"]["id"] == player_data["mlb_id"] and player_type["da_type"] == "Batter" and ("Facing Lefty" in qualifiers or "Facing Righty" in qualifiers or "Platoon Advantage" in qualifiers):
                                missing_pitch = True
                    elif play["details"]["eventType"] == "offensive_substitution":
                        if play["count"]["balls"] != 0 or play["count"]["strikes"] != 0:
                            if "replacedPlayer" in play:
                                if play["position"]["abbreviation"] == "PH":
                                    current_batter = play["player"]["id"]
                                    old_player = play["replacedPlayer"]["id"]
                                    if play["count"]["strikes"] == 2:
                                        event_type = scoring_play["result"]["eventType"]
                                        if event_type in ["field_out", "double_play", "triple_play", "fielders_choice", "fielders_choice_out", "force_out", "cs_double_play"]:
                                            event_type = "out"
                                        elif event_type in ["field_error"]:
                                            event_type = "error"
                                        elif event_type in ["strike_out", "strikeout_double_play", "strikeout_triple_play"]:
                                            event_type = "strikeout"
                                        elif event_type in ["sac_fly_double_play"]:
                                            event_type = "sac_fly"
                                        elif event_type in ["sac_bunt_double_play"]:
                                            event_type = "sac_bunt"

                                        if event_type.startswith("stolen_base") or event_type.startswith("passed_ball"):
                                            event_type = "no_stats_sb"
                                        else:
                                            if event_type not in event_type_stat_mappings or event_type in ["caught_stealing", "run_scored", "pick_off"]:
                                                event_type = "no_stats"

                                        if event_type == "home_run" and "description" in scoring_play["result"] and scoring_play["result"]["description"] and "inside-the-park" in scoring_play["result"]["description"]:
                                            event_type = "inside_the_park_home_run"

                                        if event_type == "strikeout":
                                            play["postPlay"] = play["player"]["id"]
                                            play["player"]["id"] = old_player
                                            scoring_play["matchup"]["batter"]["id"] = old_player
                                            
                                            bat_pos = game_data["bat_sides"][current_batter]
                                            if bat_pos == "S":
                                                pitch_pos = game_data["pitch_sides"][current_pitcher if current_pitcher else scoring_play["matchup"]["pitcher"]["id"]]
                                                if pitch_pos == "S":
                                                    scoring_play["matchup"]["splits"]["pitcher"] = None
                                                else:
                                                    if pitch_pos == "R":
                                                        scoring_play["matchup"]["splits"]["pitcher"] = "vs_LHB"
                                                    else:
                                                        scoring_play["matchup"]["splits"]["pitcher"] = "vs_RHB"
                                            else:
                                                scoring_play["matchup"]["splits"]["pitcher"] = "vs_" + bat_pos + "HB"


                                            if old_player == player_data["mlb_id"] and ("Batting Lefty" in qualifiers or "Batting Righty" in qualifiers):
                                                missing_games = True
                                            
                                            if scoring_play["matchup"]["pitcher"]["id"] == player_data["mlb_id"] and player_type["da_type"] != "Batter" and ("Facing Lefty" in qualifiers or "Facing Righty" in qualifiers or "Platoon Advantage" in qualifiers):
                                                missing_games = True
                                    
                                    if old_player == player_data["mlb_id"] and ("Batting Lefty" in qualifiers or "Batting Righty" in qualifiers):
                                        missing_pitch = True
                                    
                                    if scoring_play["matchup"]["pitcher"]["id"] == player_data["mlb_id"] and player_type["da_type"] != "Batter" and ("Facing Lefty" in qualifiers or "Facing Righty" in qualifiers or "Platoon Advantage" in qualifiers):
                                        missing_pitch = True

        if is_final:
            for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
                if scoring_play["result"]["type"] != "atBat" or "eventType" not in scoring_play["result"]:
                    continue
                is_top_inning = scoring_play["about"]["isTopInning"]

                if is_home_team:
                    is_team_batting = False if is_top_inning else True
                else:
                    is_team_batting = True if is_top_inning else False
                
                for runner in scoring_play["runners"]:
                    if runner["details"]["isScoringEvent"]:
                        sub_play_index = runner["details"]["playIndex"]
                        sub_play = scoring_play["playEvents"][sub_play_index]
                        is_driven_in = ("isInPlay" in sub_play["details"] and sub_play["details"]["isInPlay"]) or (runner["details"]["rbi"])
                        is_rbi = runner["details"]["rbi"]
                        if is_team_batting:
                            team_score += 1
                            if is_rbi:
                                team_rbis += 1
                            if is_driven_in:
                                team_driven_in += 1
                            if team_score == opp_score + 1:
                                game_winning_team = row_data["Tm"]
                                if is_rbi:
                                    game_winning_rbi = team_rbis
                                else:
                                    game_winning_rbi = None
                                if is_driven_in:
                                    game_winning_driven_in = team_driven_in
                                else:
                                    game_winning_driven_in = None
                                game_winning_run = team_score
                        else:
                            opp_score += 1
                            if is_rbi:
                                opp_rbis += 1
                            if is_driven_in:
                                opp_driven_in += 1
                            if opp_score == team_score + 1:
                                game_winning_team = row_data["Opponent"]
                                if is_rbi:
                                    game_winning_rbi = opp_rbis
                                else:
                                    game_winning_rbi = None
                                if is_driven_in:
                                    game_winning_driven_in = team_driven_in
                                else:
                                    game_winning_driven_in = None
                                game_winning_run = opp_score

        first_play = -1
        first_play_team = -1
        team_rbis = 0
        team_driven_in = 0
        event_id = 1
        game_game_pitch_count = 0
        team_team_pitch_count = 0
        opp_team_pitch_count = 0
        max_innings = 0
        scheduled_max_innings = 7 if (row_data["DateTime"].hour == 1 or row_data["DateTime"].hour == 2) and row_data["Year"] >= 2020 else 9
        for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
            if scoring_play["result"]["type"] != "atBat" or "eventType" not in scoring_play["result"]:
                continue

            if scoring_play["about"]["inning"] > max_innings:
                max_innings = scoring_play["about"]["inning"]

            event_type = scoring_play["result"]["eventType"]
            if event_type in ["field_out", "double_play", "triple_play", "fielders_choice", "fielders_choice_out", "force_out", "cs_double_play"]:
                event_type = "out"
            elif event_type in ["field_error"]:
                event_type = "error"
            elif event_type in ["strike_out", "strikeout_double_play", "strikeout_triple_play"]:
                event_type = "strikeout"
            elif event_type in ["sac_fly_double_play"]:
                event_type = "sac_fly"
            elif event_type in ["sac_bunt_double_play"]:
                event_type = "sac_bunt"

            if event_type.startswith("stolen_base") or event_type.startswith("passed_ball"):
                event_type = "no_stats_sb"
            else:
                if event_type not in event_type_stat_mappings or event_type in ["caught_stealing", "run_scored", "pick_off"]:
                    event_type = "no_stats"

            if event_type == "home_run" and "description" in scoring_play["result"] and scoring_play["result"]["description"] and "inside-the-park" in scoring_play["result"]["description"]:
                event_type = "inside_the_park_home_run"

            if first_play == -1:
                if event_type not in ["no_stats", "no_stats_sb"]:
                    first_play = index

            is_top_inning = scoring_play["about"]["isTopInning"]

            if first_play_team == -1:
                if is_home_team:
                    is_team_batting = False if is_top_inning else True
                else:
                    is_team_batting = True if is_top_inning else False

                if event_type not in ["no_stats", "no_stats_sb"]:
                    if player_type["da_type"] == "Batter":
                        if is_team_batting:
                            first_play_team = index
                    else:
                        if not is_team_batting:
                            first_play_team = index

        all_times = set()
        for index, scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
            starting_tm_position_map = team_position_map.copy()
            starting_opp_position_map = opp_position_map.copy()
            starting_team_batting_order_map = team_batting_order_map.copy()
            starting_opp_batting_order_map = opp_batting_order_map.copy()
            pinch_run_for_map = {}
            before_first_pitch = True
            post_play_events = []
            for play in scoring_play["playEvents"]:
                if not ("eventType" in play["details"] and play["details"]["eventType"] == "game_advisory") and "endTime" in play and play["endTime"]:
                    end_time = dateutil.parser.parse(play["endTime"])
                    all_times.add(end_time)

                if "isSubstitution" in play and play["isSubstitution"]:
                    if "postPlay" in play and play["postPlay"]:
                        post_play_events.append(play)
                    is_top_inning = scoring_play["about"]["isTopInning"]
                    if is_home_team:
                        is_team_batting = False if is_top_inning else True
                    else:
                        is_team_batting = True if is_top_inning else False

                    if play["details"]["eventType"] == "pitching_substitution":
                        if is_team_batting:
                            opp_position_map["P"] = play["player"]["id"]
                            if "battingOrder" in play:
                                if opp_position_map["P"] and opp_position_map["P"] in opp_batting_order_map:
                                    del opp_batting_order_map[opp_position_map["P"]]
                                opp_batting_order_map[play["player"]["id"]] = int(play["battingOrder"][0])
                        else:
                            team_position_map["P"] = play["player"]["id"]
                            if "battingOrder" in play:
                                if team_position_map["P"] and team_position_map["P"] in team_batting_order_map:
                                    del team_batting_order_map[team_position_map["P"]]
                                team_batting_order_map[play["player"]["id"]] = int(play["battingOrder"][0])

                            if play["player"]["id"] == player_data["mlb_id"]:
                                sub_man_on_first = False
                                sub_man_on_second = False
                                sub_man_on_third = False

                                if index != 0 and sub_data["liveData"]["plays"]["allPlays"][index - 1]["about"]["isTopInning"] == is_top_inning:
                                    if "postOnFirst" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                        sub_man_on_first = True
                                    if "postOnSecond" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                        sub_man_on_second = True
                                    if "postOnThird" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                        sub_man_on_third = True

                                runners_by_play = {}
                                for sub_runner in scoring_play["runners"]:
                                    if sub_runner["details"]["playIndex"] < play["index"]:
                                        if sub_runner["details"]["playIndex"] not in runners_by_play:
                                            runners_by_play[sub_runner["details"]["playIndex"]] = []
                                        runners_by_play[sub_runner["details"]["playIndex"]].append(sub_runner)
                                
                                for play_index in runners_by_play:
                                    new_man_on_second = False
                                    new_man_on_third = False
                                    for sub_run_index, sub_runner in enumerate(runners_by_play[play_index]):
                                        if sub_run_index == len(runners_by_play[play_index]) - 1 or runners_by_play[play_index][sub_run_index + 1]["details"]["runner"]["id"] != sub_runner["details"]["runner"]["id"]:
                                            if sub_runner["movement"]["end"] == "2B":
                                                sub_man_on_second = True
                                                new_man_on_second = True
                                            if sub_runner["movement"]["end"] == "3B":
                                                sub_man_on_third = True
                                                new_man_on_third = True
                                    
                                    for sub_runner in runners_by_play[play_index]:
                                        if sub_runner["movement"]["start"] == "1B" and sub_runner["movement"]["end"] != "1B":
                                            sub_man_on_first = False
                                        if sub_runner["movement"]["start"] == "2B" and sub_runner["movement"]["end"] != "2B" and not new_man_on_second:
                                            sub_man_on_second = False
                                        if sub_runner["movement"]["start"] == "3B" and sub_runner["movement"]["end"] != "3B" and not new_man_on_third:
                                            sub_man_on_third = False

                                sub_men_on_base = int(sub_man_on_first) + int(sub_man_on_second) + int(sub_man_on_third)

                                if play["player"]["id"] == player_data["mlb_id"]:
                                    inherited_runners += sub_men_on_base
                    elif play["details"]["eventType"] == "defensive_switch" or play["details"]["eventType"] == "defensive_substitution":
                        new_player = play["player"]["id"]
                        new_position = play["position"]["abbreviation"]
                        if "replacedPlayer" in play:
                            old_player = play["replacedPlayer"]["id"]
                        else:
                            old_player = new_player

                        if is_team_batting:
                            for position in opp_position_map:
                                if position in ("PR", "PH"):
                                    if old_player in opp_position_map[position]:
                                        opp_position_map[position].remove(old_player)
                                    if new_player in opp_position_map[position]:
                                        opp_position_map[position].remove(new_player)
                                else:
                                    if opp_position_map[position] == old_player:
                                        opp_position_map[position] = None
                                    if opp_position_map[position] == new_player:
                                        opp_position_map[position] = None
                        else:
                            for position in team_position_map:
                                if position in ("PR", "PH"):
                                    if old_player in team_position_map[position]:
                                        team_position_map[position].remove(old_player)
                                    if new_player in team_position_map[position]:
                                        team_position_map[position].remove(new_player)
                                else:
                                    if team_position_map[position] == old_player:
                                        team_position_map[position] = None
                                    if team_position_map[position] == new_player:
                                        team_position_map[position] = None

                        if is_team_batting:
                            if new_position in ("PR", "PH"):
                                opp_position_map[new_position].add(new_player)
                            else:
                                opp_position_map[new_position] = new_player

                            if old_player in opp_batting_order_map:
                                del opp_batting_order_map[old_player]
                            if "battingOrder" in play:
                                opp_batting_order_map[new_player] = int(play["battingOrder"][0])
                        else:
                            if new_position in ("PR", "PH"):
                                team_position_map[new_position].add(new_player)
                            else:
                                team_position_map[new_position] = new_player

                            if old_player in team_batting_order_map:
                                del team_batting_order_map[old_player]
                            if "battingOrder" in play:
                                team_batting_order_map[new_player] = int(play["battingOrder"][0])
                    elif play["details"]["eventType"] == "offensive_substitution":
                        pinch_hitter = play["player"]["id"]
                        old_player = play["replacedPlayer"]["id"] if "replacedPlayer" in play else None

                        if is_team_batting:
                            team_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                            for position in team_position_map:
                                if position in ("PR", "PH"):
                                    if old_player in team_position_map[position]:
                                        team_position_map[position].remove(old_player)
                                        if play["position"]["abbreviation"] == "PH":
                                            next_play_pinch = position
                                else:
                                    if team_position_map[position] == old_player:
                                        team_position_map[position] = None
                                        if play["position"]["abbreviation"] == "PH":
                                            next_play_pinch = position
                            
                            if old_player in team_batting_order_map:
                                del team_batting_order_map[old_player]
                            if "battingOrder" in play:
                                team_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])
                        else:
                            opp_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                            for position in opp_position_map:
                                if position in ("PR", "PH"):
                                    if old_player in opp_position_map[position]:
                                        opp_position_map[position].remove(old_player)
                                        if play["position"]["abbreviation"] == "PH":
                                            next_play_pinch = position
                                else:
                                    if opp_position_map[position] == old_player:
                                        opp_position_map[position] = None
                                        if play["position"]["abbreviation"] == "PH":
                                            next_play_pinch = position

                            if old_player in opp_batting_order_map:
                                del opp_batting_order_map[old_player]
                            if "battingOrder" in play:
                                opp_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])

                        if play["position"]["abbreviation"] == "PR" and before_first_pitch:
                            pinch_run_for_map[play["base"]] = pinch_hitter
                elif play["isPitch"]:
                    before_first_pitch = False 

            if scoring_play["result"]["type"] != "atBat" or "eventType" not in scoring_play["result"]:
                continue

            inning = scoring_play["about"]["inning"]
            is_top_inning = scoring_play["about"]["isTopInning"]
            if index == 0:
                away_score = 0
                home_score = 0
            else:
                away_score = sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["awayScore"]
                home_score = sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["homeScore"]

            if index != 0 and sub_data["liveData"]["plays"]["allPlays"][index - 1]["about"]["isTopInning"] == is_top_inning:
                outs = sub_data["liveData"]["plays"]["allPlays"][index - 1]["count"]["outs"]
            else:
                outs = 0

            outs_remaining = ((9 - inning) * 3) + (3 - outs)
            if inning > 9:
                outs_remaining = 3 - outs
            if (row_data["DateTime"].hour == 1 or row_data["DateTime"].hour == 2) and row_data["Year"] >= 2020:
                outs_remaining = ((7 - inning) * 3) + (3 - outs)
                if inning > 7:
                    outs_remaining = 3 - outs

            current_away_score = scoring_play["result"]["awayScore"]
            current_home_score = scoring_play["result"]["homeScore"]
            current_outs = scoring_play["count"]["outs"]

            previous_event_type = None
            upcoming_event_type = None
            previous_player_event_type = None
            upcoming_player_event_type = None
            if "Previous Event Type" in qualifiers or "Upcoming Exact Event Type" in qualifiers or "Upcoming Player Event Type" in qualifiers or "Previous Exact Event Type" in qualifiers or "Previous Player Event Type" in qualifiers or "Previous Exact Player Event Type" in qualifiers or "Upcoming Event Type" in qualifiers or "Upcoming Exact Event Type" in qualifiers:
                for sub_index, sub_scoring_play in enumerate(sub_data["liveData"]["plays"]["allPlays"]):
                    if sub_scoring_play["result"]["type"] != "atBat" or "eventType" not in sub_scoring_play["result"]:
                        continue

                    sub_inning = sub_scoring_play["about"]["inning"]
                    sub_is_top_inning = sub_scoring_play["about"]["isTopInning"]

                    event_type = sub_scoring_play["result"]["eventType"]
                    if event_type in ["field_out", "double_play", "triple_play", "fielders_choice", "fielders_choice_out", "force_out", "cs_double_play"]:
                        event_type = "out"
                    elif event_type in ["field_error"]:
                        event_type = "error"
                    elif event_type in ["strike_out", "strikeout_double_play", "strikeout_triple_play"]:
                        event_type = "strikeout"
                    elif event_type in ["sac_fly_double_play"]:
                        event_type = "sac_fly"
                    elif event_type in ["sac_bunt_double_play"]:
                        event_type = "sac_bunt"

                    if event_type.startswith("stolen_base") or event_type.startswith("passed_ball"):
                        event_type = "no_stats_sb"
                    else:
                        if event_type not in event_type_stat_mappings or event_type in ["caught_stealing", "run_scored", "pick_off"]:
                            event_type = "no_stats"

                    if event_type == "home_run" and "description" in sub_scoring_play["result"] and sub_scoring_play["result"]["description"] and "inside-the-park" in sub_scoring_play["result"]["description"]:
                        event_type = "inside_the_park_home_run"

                    if sub_inning == inning and sub_is_top_inning == is_top_inning:
                        if sub_index < index:
                            previous_event_type = event_type
                        elif sub_index > index:
                            if not upcoming_event_type:
                                upcoming_event_type = event_type
                    
                    if player_type["da_type"] == "Batter":
                        if sub_scoring_play["matchup"]["batter"]["id"] == player_data["mlb_id"]:
                            if sub_index < index:
                                previous_player_event_type = event_type
                            elif sub_index > index:
                                if not upcoming_player_event_type:
                                    upcoming_player_event_type = event_type
                    else:
                        if sub_scoring_play["matchup"]["pitcher"]["id"] == player_data["mlb_id"]:
                            if sub_index < index:
                                previous_player_event_type = event_type
                            elif sub_index > index:
                                if not upcoming_player_event_type:
                                    upcoming_player_event_type = event_type

            counts = [{
                "balls" : 0,
                "strikes" : 0
            }]
            pitches = []
            pitch_types = []
            pitch_speeds = []
            pitch_zones = []
            pitch_spin = []
            pitch_x = []
            pitch_y = []
            hit_x = []
            hit_y = []
            pitch_top_strike_zone = []
            pitch_bottom_strike_zone = []
            hit_dist = []
            hit_traj = []
            hit_loc = []
            hit_hard = []
            pitch_ev = []
            pitch_la = []
            num_pitches = 0
            last_pitch_index = -1
            runners_driven_in = []
            runners_batted_in = []
            earned_runners_driven_in = []
            earned_runners_batted_in = []
            all_runners_rbi_index = []
            all_runners_driven_in_index = []
            all_runners_index = []
            for sub_sub_play_index, play in enumerate(scoring_play["playEvents"]):
                if play["isPitch"]:
                    last_pitch_index = sub_sub_play_index
            for sub_sub_play_index, play in enumerate(scoring_play["playEvents"]):
                if play["isPitch"]:
                    num_pitches += 1
                    code = play["details"]["call"]["code"][-1:].upper()
                    pitches.append(code)
                    if play["details"]["isStrike"]:
                        last_count = counts[len(counts) - 1].copy()
                        if last_count["strikes"] != 2:
                            last_count["strikes"] += 1
                        if sub_sub_play_index != last_pitch_index:
                            counts.append(last_count)
                    elif play["details"]["isBall"]:
                        last_count = counts[len(counts) - 1].copy()
                        if last_count["balls"] != 3:
                            last_count["balls"] += 1
                        if sub_sub_play_index != last_pitch_index:
                            counts.append(last_count)
                    elif sub_sub_play_index != last_pitch_index:
                        counts.append(last_count)

                    if "type" in play["details"] and play["details"]["type"] and play["details"]["type"]["description"]:
                        pitch_types.append(play["details"]["type"]["description"])
                    else:
                        pitch_types.append(None)

                    if "pitchData" in play and "startSpeed" in play["pitchData"]:
                        pitch_speeds.append(play["pitchData"]["startSpeed"])
                    else:
                        pitch_speeds.append(None)

                    if "pitchData" in play and "zone" in play["pitchData"]:
                        pitch_zones.append(play["pitchData"]["zone"])
                    else:
                        pitch_zones.append(None)

                    if "pitchData" in play and "breaks" in play["pitchData"] and "spinRate" in play["pitchData"]["breaks"]:
                        pitch_spin.append(play["pitchData"]["breaks"]["spinRate"])
                    else:
                        pitch_spin.append(None)

                    if "pitchData" in play and "coordinates" in play["pitchData"] and "pX" in play["pitchData"]["coordinates"]:
                        pitch_x.append(play["pitchData"]["coordinates"]["pX"])
                    else:
                        pitch_x.append(None)
                    
                    if "pitchData" in play and "coordinates" in play["pitchData"] and "pZ" in play["pitchData"]["coordinates"]:
                        pitch_y.append(play["pitchData"]["coordinates"]["pZ"])
                    else:
                        pitch_y.append(None)
                    
                    if "pitchData" in play and "strikeZoneTop" in play["pitchData"]:
                        pitch_top_strike_zone.append(play["pitchData"]["strikeZoneTop"])
                    else:
                        pitch_top_strike_zone.append(None)
                    
                    if "pitchData" in play and "strikeZoneBottom" in play["pitchData"]:
                        pitch_bottom_strike_zone.append(play["pitchData"]["strikeZoneBottom"])
                    else:
                        pitch_bottom_strike_zone.append(None)

                    if "hitData" in play and "launchSpeed" in play["hitData"]:
                        pitch_ev.append(play["hitData"]["launchSpeed"])
                    else:
                        pitch_ev.append(None)
                    
                    if "hitData" in play and "launchAngle" in play["hitData"]:
                        pitch_la.append(play["hitData"]["launchAngle"])
                    else:
                        pitch_la.append(None)

                    if "hitData" in play and "totalDistance" in play["hitData"]:
                        hit_dist.append(play["hitData"]["totalDistance"])
                    else:
                        hit_dist.append(None)
                    
                    if "hitData" in play and "trajectory" in play["hitData"]:
                        hit_traj.append(play["hitData"]["trajectory"])
                    else:
                        hit_traj.append(None)
                    
                    if "hitData" in play and "hardness" in play["hitData"]:
                        hit_hard.append(play["hitData"]["hardness"])
                    else:
                        hit_hard.append(None)
                    
                    if "hitData" in play and "location" in play["hitData"]:
                        hit_loc.append(play["hitData"]["location"])
                    else:
                        hit_loc.append(None)

                    if "hitData" in play and "coordinates" in play["hitData"] and "coordX" in play["hitData"]["coordinates"]:
                        hit_x.append(play["hitData"]["coordinates"]["coordX"])
                    else:
                        hit_x.append(None)
                    
                    if "hitData" in play and "coordinates" in play["hitData"] and "coordY" in play["hitData"]["coordinates"]:
                        hit_y.append(play["hitData"]["coordinates"]["coordY"])
                    else:
                        hit_y.append(None)
            
            if not has_count_data:
                pitches = None
                      
            if pitches:
                balls = counts[len(counts) - 1]["balls"]
                strikes = counts[len(counts) - 1]["strikes"]
            else:
                balls = None
                strikes = None
                num_pitches = None
                pitches = None
                counts = None

            num_outs = current_outs - outs
            batter = scoring_play["matchup"]["batter"]["id"]
            pitcher = scoring_play["matchup"]["pitcher"]["id"]
            man_on_first = False
            man_on_second = False
            man_on_third = False

            men_on_base_map = {
                "1B" : None,
                "2B" : None,
                "3B" : None
            }

            batter_first = game_data["first_names"][batter]
            batter_birth_first = game_data["birth_first_names"][batter]
            batter_last = game_data["last_names"][batter]
            pitcher_first = game_data["first_names"][pitcher]
            pitcher_birth_first = game_data["birth_first_names"][pitcher]
            pitcher_last = game_data["last_names"][pitcher]
            batter_country = game_data["countries"][batter] if batter in game_data["countries"] else None
            pitcher_country = game_data["countries"][pitcher] if pitcher in game_data["countries"] else None

            if is_home_team:
                is_team_batting = False if is_top_inning else True
            else:
                is_team_batting = True if is_top_inning else False

            man_on_first = False
            man_on_second = False
            man_on_third = False
            post_man_on_first = None
            post_man_on_second = None
            post_man_on_third = None
            if index != 0 and sub_data["liveData"]["plays"]["allPlays"][index - 1]["about"]["isTopInning"] == is_top_inning:
                if "postOnFirst" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                    man_on_first = True
                    post_man_on_first = sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]["postOnFirst"]["id"]
                    if 1 in pinch_run_for_map:
                        post_man_on_first = pinch_run_for_map[1]
                    else:
                        post_man_on_first = sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]["postOnFirst"]["id"]
                    men_on_base_map["1B"] = post_man_on_first
                if "postOnSecond" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                    man_on_second = True
                    if 2 in pinch_run_for_map:
                        post_man_on_second = pinch_run_for_map[2]
                    else:
                        post_man_on_second = sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]["postOnSecond"]["id"]
                    men_on_base_map["2B"] = post_man_on_second
                if "postOnThird" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                    man_on_third = True
                    if 3 in pinch_run_for_map:
                        post_man_on_third = pinch_run_for_map[3]
                    else:
                        post_man_on_third = sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]["postOnThird"]["id"]
                    men_on_base_map["3B"] = post_man_on_third

            for inherited_play in scoring_play["playEvents"]:
                if "eventType" in inherited_play["details"] and inherited_play["details"]["eventType"] and inherited_play["details"]["eventType"] == "runner_placed":
                    man_on_second = True

            runners_by_play = {}
            reached_base = False
            for sub_runner in scoring_play["runners"]:
                if sub_runner["details"]["playIndex"] != len(scoring_play["playEvents"]) - 1:
                    if sub_runner["details"]["playIndex"] not in runners_by_play:
                        runners_by_play[sub_runner["details"]["playIndex"]] = []
                    runners_by_play[sub_runner["details"]["playIndex"]].append(sub_runner)
                    
                    if sub_runner["movement"]["isOut"]:
                        outs += 1
                    elif sub_runner["details"]["isScoringEvent"]:
                        if is_team_batting:
                            if is_home_team:
                                home_score += 1
                            else:
                                away_score += 1
                        else:
                            if is_home_team:
                                away_score += 1
                            else:
                                home_score += 1
                
                if sub_runner["movement"]["start"] == None and sub_runner["movement"]["end"] != None:
                    reached_base = True
            
            for play_index in runners_by_play:
                new_man_on_second = False
                new_man_on_third = False
                for sub_run_index, sub_runner in enumerate(runners_by_play[play_index]):
                    if sub_run_index == len(runners_by_play[play_index]) - 1 or runners_by_play[play_index][sub_run_index + 1]["details"]["runner"]["id"] != sub_runner["details"]["runner"]["id"]:
                        if sub_runner["movement"]["end"] == "2B":
                            man_on_second = True
                            new_man_on_second = True
                            men_on_base_map["2B"] = sub_runner["details"]["runner"]["id"]
                        if sub_runner["movement"]["end"] == "3B":
                            man_on_third = True
                            new_man_on_third = True
                            men_on_base_map["3B"] = sub_runner["details"]["runner"]["id"]
                
                for sub_runner in runners_by_play[play_index]:
                    if sub_runner["movement"]["start"] == "1B" and sub_runner["movement"]["end"] != "1B":
                        man_on_first = False
                        men_on_base_map["1B"] = None
                    if sub_runner["movement"]["start"] == "2B" and sub_runner["movement"]["end"] != "2B" and not new_man_on_second:
                        man_on_second = False
                        men_on_base_map["2B"] = None
                    if sub_runner["movement"]["start"] == "3B" and sub_runner["movement"]["end"] != "3B" and not new_man_on_third:
                        man_on_third = False
                        men_on_base_map["3B"] = None

            men_on_base = int(man_on_first) + int(man_on_second) + int(man_on_third)
            men_in_scoring = int(man_on_second) + int(man_on_third)

            rbis = scoring_play["result"]["rbi"]

            last_runner_to_add = None
            for runner_index, runner in enumerate(scoring_play["runners"]):
                if runner["details"]["isScoringEvent"]:
                    if runner["details"]["runner"]["id"] == batter:
                        last_runner_to_add = runner
                    else:
                        all_runners_rbi_index.append(runner["details"]["rbi"])
                        all_runners_index.append(runner["details"]["runner"]["id"])
                        if runner["details"]["rbi"]:
                            runners_batted_in.append(runner["details"]["runner"]["id"])
                            earned_runners_batted_in.append(runner["details"]["earned"])
                            runners_driven_in.append(runner["details"]["runner"]["id"])
                            earned_runners_driven_in.append(runner["details"]["earned"])
                            all_runners_driven_in_index.append(True)
                        else:
                            sub_play_index = runner["details"]["playIndex"]
                            sub_play = scoring_play["playEvents"][sub_play_index]
                            if ("isInPlay" in sub_play["details"] and sub_play["details"]["isInPlay"]) or (runner["details"]["rbi"]):
                                runners_driven_in.append(runner["details"]["runner"]["id"])
                                earned_runners_driven_in.append(runner["details"]["earned"])
                                all_runners_driven_in_index.append(True)
                            else:
                                all_runners_driven_in_index.append(False)

            if last_runner_to_add:
                all_runners_rbi_index.append(last_runner_to_add["details"]["rbi"])
                all_runners_index.append(last_runner_to_add["details"]["runner"]["id"])
                if last_runner_to_add["details"]["rbi"]:
                    runners_batted_in.append(last_runner_to_add["details"]["runner"]["id"])
                    earned_runners_batted_in.append(last_runner_to_add["details"]["earned"])
                    runners_driven_in.append(last_runner_to_add["details"]["runner"]["id"])
                    earned_runners_driven_in.append(last_runner_to_add["details"]["earned"])
                    all_runners_driven_in_index.append(True)
                else:
                    sub_play_index = last_runner_to_add["details"]["playIndex"]
                    sub_play = scoring_play["playEvents"][sub_play_index]
                    if ("isInPlay" in sub_play["details"] and sub_play["details"]["isInPlay"]) or (last_runner_to_add["details"]["rbi"]):
                        runners_driven_in.append(last_runner_to_add["details"]["runner"]["id"])
                        earned_runners_driven_in.append(last_runner_to_add["details"]["earned"])
                        all_runners_driven_in_index.append(True)
                    else:
                        all_runners_driven_in_index.append(False)

            driven_in = len(runners_driven_in)

            if is_team_batting:
                is_starter_pitcher = pitcher == starter_opp_position_map["P"]
                is_starter_batter = False
                for pos in starter_team_position_map:
                    if starter_team_position_map[pos] == batter:
                        is_starter_batter = True
                        break
                batting_order_pos = team_batting_order_map[batter]
                pitch_count_to_use = "opp_pitch_count"
            else:
                is_starter_pitcher = pitcher == starter_team_position_map["P"]
                is_starter_batter = False
                for pos in starter_opp_position_map:
                    if starter_opp_position_map[pos] == batter:
                        is_starter_batter = True
                        break
                batting_order_pos = opp_batting_order_map[batter]
                pitch_count_to_use = "team_pitch_count"

            if batter not in batter_matchup_map:
                batter_matchup_map[batter] = {
                    "current_ab" : 0,
                    "current_pa" : 0,
                    "times_around" : 1
                }
            if pitcher not in batter_matchup_map[batter]:
                batter_matchup_map[batter][pitcher] = 1

            if pitcher not in pitcher_matchup_map:
                pitch_count_obj[pitch_count_to_use] = 0
                innings_pitched_obj[pitch_count_to_use] = 0
                pitcher_matchup_map[pitcher] = {
                    "current_ab" : 0,
                    "current_pa" : 0,
                    "times_around" : 1
                }
            if batter not in pitcher_matchup_map[pitcher]:
                pitcher_matchup_map[pitcher][batter] = 1

            event_type = scoring_play["result"]["eventType"]
            if event_type in ["field_out", "double_play", "triple_play", "fielders_choice", "fielders_choice_out", "force_out", "cs_double_play"]:
                event_type = "out"
            elif event_type in ["field_error"]:
                event_type = "error"
            elif event_type in ["strike_out", "strikeout_double_play", "strikeout_triple_play"]:
                event_type = "strikeout"
            elif event_type in ["sac_fly_double_play"]:
                event_type = "sac_fly"
            elif event_type in ["sac_bunt_double_play"]:
                event_type = "sac_bunt"

            if event_type.startswith("stolen_base") or event_type.startswith("passed_ball"):
                event_type = "no_stats_sb"
            else:
                if event_type not in event_type_stat_mappings or event_type in ["caught_stealing", "run_scored", "pick_off"]:
                    event_type = "no_stats"

            if event_type == "home_run" and "description" in scoring_play["result"] and scoring_play["result"]["description"] and "inside-the-park" in scoring_play["result"]["description"]:
                event_type = "inside_the_park_home_run"

            if num_pitches != None:
                starting_pitch_count = pitch_count_obj[pitch_count_to_use]
                starting_game_pitch_count = game_game_pitch_count
                pitch_count = pitch_count_obj[pitch_count_to_use] + num_pitches
                game_game_pitch_count += num_pitches
                game_pitch_count = game_game_pitch_count
                pitch_count_obj[pitch_count_to_use] += num_pitches
            else:
                starting_pitch_count = None
                starting_game_pitch_count = None
                game_pitch_count = None
                starting_team_pitch_count = None
                team_pitch_count = None
                pitch_count = None

            starting_innings_pitched = innings_pitched_obj[pitch_count_to_use]
            innings_pitched_obj[pitch_count_to_use] += num_outs * (1/3)
            innings_pitched = innings_pitched_obj[pitch_count_to_use]

            frac, whole = math.modf(starting_innings_pitched)
            frac = round_value(frac, 1)
            starting_innings_pitched = whole
            if frac == 0.3:
                starting_innings_pitched += 1/3
            elif frac == 0.7:
                starting_innings_pitched += 2/3
            elif frac == 1.0:
                starting_innings_pitched += 1
            frac, whole = math.modf(innings_pitched)
            frac = round_value(frac, 1)
            innings_pitched = whole
            if frac == 0.3:
                innings_pitched += 1/3
            elif frac == 0.7:
                innings_pitched += 2/3
            elif frac == 1.0:
                innings_pitched += 1

            first_batter_inning = False
            leading_off_game = False
            leading_off_team = False
            if event_type not in ["no_stats", "no_stats_sb"]:
                if last_top_event != is_top_inning:
                    first_batter_inning = True
                leading_off_game = index == first_play
                leading_off_team = index == first_play_team


            if last_top != is_top_inning:
                starting_inning = True

            last_top = is_top_inning
            if event_type not in ["no_stats", "no_stats_sb"]:
                last_top_event = is_top_inning
            
            if num_pitches != None:
                first_pitch = num_pitches == 1
                for pitch_char in pitches:
                    swung_at_first_pitch = pitch_char in ('F', 'S', 'D', 'X', 'E', 'T', 'L', 'W', 'M', 'O', 'Y')
                    break
            else:
                first_pitch = None
                swung_at_first_pitch = None
            
            extra_innings = inning > 9 or ((row_data["DateTime"].hour == 1 or row_data["DateTime"].hour == 2) and row_data["Year"] >= 2020 and inning > 7)
            walk_off = False
            walk_off_opp = False
            last_inning = False
            last_out = False
            is_winning_rbi = False
            is_winning_driven_in = False
            winning_rbi_runner_index = -1
            winning_driven_in_runner_index = -1

            num_runs = (current_away_score + current_home_score) - (away_score + home_score)

            if is_home_team:
                team_score = home_score
                opp_score = away_score
                ending_team_score = current_home_score
                ending_opp_score = current_away_score
            else:
                team_score = away_score
                opp_score = home_score
                ending_team_score = current_away_score
                ending_opp_score = current_home_score

            if is_team_batting:
                bat_score = team_score
                pitch_score = opp_score
                if num_pitches != None:
                    starting_team_pitch_count = team_team_pitch_count
                    team_team_pitch_count += num_pitches
                    team_pitch_count = team_team_pitch_count
            else:
                bat_score = opp_score
                pitch_score = team_score
                if num_pitches != None:
                    starting_team_pitch_count = opp_team_pitch_count
                    opp_team_pitch_count += num_pitches
                    team_pitch_count = opp_team_pitch_count
            
            last_inning = inning >= 9 or ((row_data["DateTime"].hour == 1 or row_data["DateTime"].hour == 2) and row_data["Year"] >= 2020 and inning >= 7)
            walk_off_index = -1
            go_ahead_index = -1
            game_tying_index = -1
            go_ahead_or_game_tying_index = -1
            game_winning_index = -1
            if not is_top_inning and last_inning:
                score_diff = pitch_score - bat_score
                if score_diff >= 0:
                    walk_off_opp = score_diff < men_on_base + 1
                    walk_off = num_runs > score_diff
                    if walk_off:
                        walk_off_index = score_diff

            if last_inning and pitch_score > bat_score and outs == 2:
                last_out = True

            if is_team_batting:
                if rbis:
                    prev_total_rbis = team_rbis
                    team_rbis += rbis
                    if game_winning_rbi and game_winning_team == row_data["Tm"] and game_winning_rbi > prev_total_rbis and game_winning_rbi <= team_rbis:
                        is_winning_rbi = True
                        winning_rbi_runner_index = game_winning_rbi - prev_total_rbis - 1
                
                if driven_in:
                    prev_total_driven_in = team_driven_in
                    team_driven_in += driven_in
                    if game_winning_driven_in and game_winning_team == row_data["Tm"] and game_winning_driven_in > prev_total_driven_in and game_winning_driven_in <= team_driven_in:
                        is_winning_driven_in = True
                        winning_driven_in_runner_index = game_winning_driven_in - prev_total_driven_in - 1

            game_tying = False
            game_tying_opp = False
            score_diff = pitch_score - bat_score
            if score_diff >= 1:
                game_tying_opp = score_diff <= men_on_base + 1
                game_tying = num_runs >= score_diff
                if game_tying:
                    game_tying_index = score_diff - 1

            go_ahead = False
            go_ahead_opp = False
            score_diff = pitch_score - bat_score
            if score_diff >= 0:
                go_ahead_opp = score_diff < men_on_base + 1
                go_ahead = num_runs > score_diff
                if go_ahead:
                    go_ahead_index = score_diff
            
            go_ahead_or_game_tying = False
            go_ahead_or_game_tying_opp = False
            score_diff = pitch_score - bat_score
            if score_diff >= 0:
                go_ahead_or_game_tying_opp = score_diff <= men_on_base + 1
                if game_tying_opp:
                    go_ahead_or_game_tying = num_runs >= score_diff
                    if go_ahead_or_game_tying:
                        go_ahead_or_game_tying_index = score_diff - 1
                else:
                    go_ahead_or_game_tying = num_runs > score_diff
                    if go_ahead_or_game_tying:
                        go_ahead_or_game_tying_index = score_diff

            tying_on_deck = False
            score_diff = pitch_score - bat_score
            if score_diff >= 1:
                tying_on_deck = score_diff <= men_on_base + 2

            winning_on_deck = False
            score_diff = pitch_score - bat_score
            if score_diff >= 0:
                winning_on_deck = score_diff < men_on_base + 2

            tying_on_base = False
            score_diff = pitch_score - bat_score
            if score_diff >= 1:
                tying_on_base = score_diff <= men_on_base

            winning_on_base = False
            score_diff = pitch_score - bat_score
            if score_diff >= 0:
                winning_on_base = score_diff < men_on_base
            
            tying_at_bat = False
            score_diff = pitch_score - bat_score
            if score_diff >= 1:
                tying_at_bat = score_diff <= men_on_base + 1

            winning_at_bat = False
            score_diff = pitch_score - bat_score
            if score_diff >= 0:
                winning_at_bat = score_diff < men_on_base + 1
            
            tying_in_scoring = False
            score_diff = pitch_score - bat_score
            if score_diff >= 1:
                tying_in_scoring = score_diff <= men_in_scoring

            winning_in_scoring = False
            score_diff = pitch_score - bat_score
            if score_diff >= 0:
                winning_in_scoring = score_diff < men_in_scoring

            game_winning = False
            if num_runs and is_team_batting:
                if game_winning_run and game_winning_team == row_data["Tm"] and game_winning_run > team_score and game_winning_run <= (team_score + num_runs):
                    game_winning = True
                    game_winning_index = score_diff
            
            tying_on_first = False
            if man_on_first:
                score_diff = pitch_score - bat_score
                if score_diff >= 1:
                    men_on_base_to_use = 1
                    if man_on_second:
                        men_on_base_to_use += 1
                    if man_on_third:
                        men_on_base_to_use += 1
                    tying_on_first = score_diff == men_on_base_to_use
            
            winning_on_first = False
            if man_on_first:
                score_diff = pitch_score - bat_score
                if score_diff >= 0:
                    men_on_base_to_use = 1
                    if man_on_second:
                        men_on_base_to_use += 1
                    if man_on_third:
                        men_on_base_to_use += 1
                    tying_on_first = score_diff == men_on_base_to_use - 1
            
            tying_on_second = False
            if man_on_second:
                score_diff = pitch_score - bat_score
                if score_diff >= 1:
                    men_on_base_to_use = 1
                    if man_on_third:
                        men_on_base_to_use += 1
                    tying_on_second = score_diff == men_on_base_to_use
            
            winning_on_second = False
            if man_on_second:
                score_diff = pitch_score - bat_score
                if score_diff >= 0:
                    men_on_base_to_use = 1
                    if man_on_third:
                        men_on_base_to_use += 1
                    winning_on_second = score_diff == men_on_base_to_use - 1
            
            tying_on_third = False
            if man_on_third:
                score_diff = pitch_score - bat_score
                if score_diff >= 1:
                    men_on_base_to_use = 1
                    tying_on_third = score_diff == men_on_base_to_use
            
            winning_on_third = False
            if man_on_third:
                score_diff = pitch_score - bat_score
                if score_diff >= 0:
                    men_on_base_to_use = 1
                    winning_on_third = score_diff == men_on_base_to_use - 1

            pitching_lefty = None
            pitching_righty = None
            if scoring_play["matchup"]["splits"]["batter"] == "vs_LHP":
                pitching_lefty = True
                pitching_righty = False
            elif scoring_play["matchup"]["splits"]["batter"] == "vs_RHP":
                pitching_lefty = False
                pitching_righty = True

            batting_lefty = None
            batting_righty = None
            if scoring_play["matchup"]["splits"]["pitcher"] == "vs_LHB":
                batting_lefty = True
                batting_righty = False
            elif scoring_play["matchup"]["splits"]["pitcher"] == "vs_RHB":
                batting_lefty = False
                batting_righty = True

            end_time = None
            if "endTime" in scoring_play["about"] and scoring_play["about"]["endTime"]:
                end_time = dateutil.parser.parse(scoring_play["about"]["endTime"])
                all_times.add(end_time)

            event_obj = {
                "batter" : batter,
                "pitcher" : pitcher,
                "men_on_base_map" : men_on_base_map,
                "batter_first" : batter_first,
                "pitcher_first" : pitcher_first,
                "batter_birth_first" : batter_birth_first,
                "pitcher_birth_first" : pitcher_birth_first,
                "batter_last" : batter_last,
                "pitcher_last" : pitcher_last,
                "batter_country" : batter_country,
                "pitcher_country" : pitcher_country,
                "event_time" : end_time,
                "runners_driven_in" : runners_driven_in,
                "runners_batted_in" : runners_batted_in,
                "earned_runners_driven_in" : earned_runners_driven_in,
                "earned_runners_batted_in" : earned_runners_batted_in,
                "description" : scoring_play["result"]["description"] if "description" in scoring_play["result"] and scoring_play["result"]["description"] else None,
                "pitches" : num_pitches,
                "ind_pitches" : pitches,
                "pitch_types" : pitch_types,
                "pitch_speeds" : pitch_speeds,
                "pitch_zones" : pitch_zones,
                "pitch_x" : pitch_x,
                "pitch_y" : pitch_y,
                "hit_x" : hit_x,
                "hit_y" : hit_y,
                "top_strike_zone" : pitch_top_strike_zone,
                "bottom_strike_zone" : pitch_bottom_strike_zone,
                "hit_dist" : hit_dist,
                "hit_hard" : hit_hard,
                "hit_loc" : hit_loc,
                "hit_traj" : hit_traj,
                "pitch_la" : pitch_la,
                "pitch_ev" : pitch_ev,
                "pitch_spin" : pitch_spin,
                "result" : event_type,
                "previous_result" : previous_event_type,
                "upcoming_result" : upcoming_event_type,
                "previous_player_result" : previous_player_event_type,
                "upcoming_player_result" : upcoming_player_event_type,
                "rbis" : rbis,
                "driven_in" : driven_in,
                "all_runners_index" : all_runners_index,
                "all_runners_rbi_index" : all_runners_rbi_index,
                "all_runners_driven_in_index" : all_runners_driven_in_index,
                "num_runs" : num_runs,
                "is_winning_rbi" : is_winning_rbi,
                "is_winning_driven_in" : is_winning_driven_in,
                "winning_rbi_runner_index" : winning_rbi_runner_index,
                "winning_driven_in_runner_index" : winning_driven_in_runner_index,
                "balls"  : balls,
                "strikes"  : strikes,
                "counts" : counts,
                "pitching_lefty" : pitching_lefty,
                "pitching_righty" : pitching_righty,
                "batting_lefty" : batting_lefty,
                "batting_righty" : batting_righty,
                "team_position_map" : team_position_map.copy(),
                "opp_position_map" : opp_position_map.copy(),
                "team_main_position_map" : team_main_position_map,
                "opp_main_position_map" : opp_main_position_map,
                "team_primary_position_map" : team_primary_position_map,
                "opp_primary_position_map" : opp_primary_position_map,
                "team_batting_order_map" : team_batting_order_map.copy(),
                "opp_batting_order_map" : opp_batting_order_map.copy(),
                "leading_off_game" : leading_off_game,
                "leading_off_team" : leading_off_team,
                "leading_off_inning" : first_batter_inning,
                "swung_at_first_pitch" : swung_at_first_pitch,
                "batting_order_pos" : batting_order_pos,
                "first_pitch" : first_pitch,
                "next_play_pinch" : next_play_pinch if event_type not in ["no_stats", "no_stats_sb"] else None,
                "is_starter_pitcher" : is_starter_pitcher,
                "is_starter_batter" : is_starter_batter,
                "is_reliever_pitcher" : not is_starter_pitcher,
                "is_reliever_batter" : not is_starter_batter,
                "starting_inning" : starting_inning,
                "time_through_lineup" : pitcher_matchup_map[pitcher]["times_around"],
                "time_facing_opponent" : pitcher_matchup_map[pitcher][batter],
                "starting_pitch_count" : starting_pitch_count,
                "pitch_count" : pitch_count,
                "batter_matchup_map" : batter_matchup_map,
                "pitcher_matchup_map" : pitcher_matchup_map,
                "batters_faced" : pitcher_matchup_map[pitcher]["current_pa"],
                "plate_appearances" : batter_matchup_map[batter]["current_pa"],
                "pitcher_first_batter_faced" : pitcher_matchup_map[pitcher]["current_pa"] == 0,
                "batter_first_plate_appearance" : batter_matchup_map[batter]["current_pa"] == 0,
                "game_pitch_count" : game_pitch_count,
                "team_pitch_count" : team_pitch_count,
                "starting_game_pitch_count" : starting_game_pitch_count,
                "starting_team_pitch_count" : starting_team_pitch_count,
                "starting_innings_pitched" : starting_innings_pitched,
                "innings_pitched" : innings_pitched,
                "team_runs" : team_score,
                "opp_runs" : opp_score,
                "run_diff" : team_score - opp_score,
                "ending_team_runs" : ending_team_score,
                "ending_opp_runs" : ending_opp_score,
                "ending_run_diff" : ending_team_score - ending_opp_score,
                "man_on_first" : man_on_first,
                "man_on_second" : man_on_second,
                "man_on_third" : man_on_third,
                "men_on_base" : men_on_base,
                "men_in_scoring" : men_in_scoring,
                "num_outs" : num_outs,
                "outs" : outs,
                "outs_remaining" : outs_remaining,
                "inning" : inning,
                "inning_reversed" : max_innings - inning + 1,
                "scheduled_inning_reversed" : (scheduled_max_innings - inning + 1) if (scheduled_max_innings - inning + 1) >= 1 else 1,
                "is_top_inning" : is_top_inning,
                "GameTying" : game_tying,
                "GameTyingOpp" : game_tying_opp,
                "GoAhead" : go_ahead,
                "is_close" : ((bat_score - pitch_score) >= 0 and (bat_score - pitch_score) <= 1) or tying_on_deck,
                "is_late" : inning >= 7,
                "GoAheadOpp" : go_ahead_opp,
                "GoAheadOrGameTying" : go_ahead_or_game_tying,
                "GoAheadOrGameTyingOpp" : go_ahead_or_game_tying_opp,
                "GameWinning" : game_winning,
                "walk_off_index" :  walk_off_index,
                "go_ahead_index" :  go_ahead_index,
                "game_tying_index" :  game_tying_index,
                "go_ahead_or_game_tying_index" :  go_ahead_or_game_tying_index,
                "game_winning_index" :  game_winning_index,
                "TyingOnDeck" : tying_on_deck,
                "WinningOnDeck" : winning_on_deck,
                "TyingOnFirst" : tying_on_first,
                "WinningOnFirst" : winning_on_first,
                "TyingOnSecond" : tying_on_second,
                "WinningOnSecond" : winning_on_second,
                "TyingOnThird" : tying_on_third,
                "WinningOnThird" : winning_on_third,
                "TyingOnBase" : tying_on_base,
                "WinningOnBase" : winning_on_base,
                "TyingAtBat" : tying_at_bat,
                "WinningAtBat" : winning_at_bat,
                "TyingInScoring" : tying_in_scoring,
                "WinningInScoring" : winning_in_scoring,
                "LastInning" : last_inning,
                "LastOut" : last_out,
                "LastBatter" : index == len(sub_data["liveData"]["plays"]["allPlays"]) - 1,
                "ExtraInnings" : extra_innings,
                "WalkOff" : walk_off,
                "WalkOffOpp" : walk_off_opp,
                "event_id" : event_id,
                "playEvents" : scoring_play["playEvents"],
                "runners" : scoring_play["runners"],
                "is_home_team" : is_home_team,
                "current_outs" : scoring_play["count"]["outs"],
                "current_away_score" : current_away_score,
                "current_home_score" : current_home_score,
                "postOnFirst" : post_man_on_first,
                "postOnSecond" : post_man_on_second,
                "postOnThird" : post_man_on_third,
                "is_final" : is_final,
                "has_play_id" : has_play_id,
                "game_winning_run" : game_winning_run,
                "game_winning_team" : game_winning_team,
                "sb_base" : None,
                "reached_base" : reached_base
            }
                
            all_events.append(event_obj)

            run_event = None

            for runner_index, runner in enumerate(scoring_play["runners"]):
                sub_play_index = runner["details"]["playIndex"]
                sub_play = scoring_play["playEvents"][sub_play_index]

                sub_tm_position_map = starting_tm_position_map.copy()
                sub_opp_position_map = starting_opp_position_map.copy()
                sub_team_batting_order_map = starting_team_batting_order_map.copy()
                sub_opp_batting_order_map = starting_opp_batting_order_map.copy()
                sub_next_play_pinch = None
                for play in scoring_play["playEvents"][0:sub_play_index]:
                    if "isSubstitution" in play and play["isSubstitution"]:
                        is_top_inning = scoring_play["about"]["isTopInning"]
                        if is_home_team:
                            is_team_batting = False if is_top_inning else True
                        else:
                            is_team_batting = True if is_top_inning else False

                        if play["details"]["eventType"] == "pitching_substitution":
                            if is_team_batting:
                                sub_opp_position_map["P"] = play["player"]["id"]
                                if "battingOrder" in play:
                                    if sub_opp_position_map["P"] and sub_opp_position_map["P"] in sub_opp_batting_order_map:
                                        del sub_opp_batting_order_map[sub_opp_position_map["P"]]
                                    sub_opp_batting_order_map[play["player"]["id"]] = int(play["battingOrder"][0])
                            else:
                                sub_tm_position_map["P"] = play["player"]["id"]
                                if "battingOrder" in play:
                                    if sub_tm_position_map["P"] and sub_tm_position_map["P"] in sub_team_batting_order_map:
                                        del sub_team_batting_order_map[sub_tm_position_map["P"]]
                                    sub_team_batting_order_map[play["player"]["id"]] = int(play["battingOrder"][0])
                        elif play["details"]["eventType"] == "defensive_switch" or play["details"]["eventType"] == "defensive_substitution":
                            new_player = play["player"]["id"]
                            new_position = play["position"]["abbreviation"]
                            if "replacedPlayer" in play:
                                old_player = play["replacedPlayer"]["id"]
                            else:
                                old_player = new_player

                            if is_team_batting:
                                for position in sub_opp_position_map:
                                    if position in ("PR", "PH"):
                                        if old_player in sub_opp_position_map[position]:
                                            sub_opp_position_map[position].remove(old_player)
                                        if new_player in sub_opp_position_map[position]:
                                            sub_opp_position_map[position].remove(new_player)
                                    else:
                                        if sub_opp_position_map[position] == old_player:
                                            sub_opp_position_map[position] = None
                                        if sub_opp_position_map[position] == new_player:
                                            sub_opp_position_map[position] = None
                            else:
                                for position in sub_tm_position_map:
                                    if position in ("PR", "PH"):
                                        if old_player in sub_tm_position_map[position]:
                                            sub_tm_position_map[position].remove(old_player)
                                        if new_player in sub_tm_position_map[position]:
                                            sub_tm_position_map[position].remove(new_player)
                                    else:
                                        if sub_tm_position_map[position] == old_player:
                                            sub_tm_position_map[position] = None
                                        if sub_tm_position_map[position] == new_player:
                                            sub_tm_position_map[position] = None

                            if is_team_batting:
                                if new_position in ("PR", "PH"):
                                    sub_opp_position_map[new_position].add(new_player)
                                else:
                                    sub_opp_position_map[new_position] = new_player
                                
                                if old_player in sub_opp_batting_order_map:
                                    del sub_opp_batting_order_map[old_player]
                                if "battingOrder" in play:
                                    sub_opp_batting_order_map[new_player] = int(play["battingOrder"][0])
                            else:
                                if new_position in ("PR", "PH"):
                                    sub_tm_position_map[new_position].add(new_player)
                                else:
                                    sub_tm_position_map[new_position] = new_player
                                
                                if old_player in sub_team_batting_order_map:
                                    del sub_team_batting_order_map[old_player]
                                if "battingOrder" in play:
                                    sub_team_batting_order_map[new_player] = int(play["battingOrder"][0])
                        elif play["details"]["eventType"] == "offensive_substitution":
                            pinch_hitter = play["player"]["id"]
                            old_player = play["replacedPlayer"]["id"] if "replacedPlayer" in play else None

                            if is_team_batting:
                                sub_tm_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                                for position in sub_tm_position_map:
                                    if position in ("PR", "PH"):
                                        if old_player in sub_tm_position_map[position]:
                                            sub_tm_position_map[position].remove(old_player)
                                            if play["position"]["abbreviation"] == "PH":
                                                ub_next_play_pinch = position
                                    else:
                                        if sub_tm_position_map[position] == old_player:
                                            sub_tm_position_map[position] = None
                                            if play["position"]["abbreviation"] == "PH":
                                                ub_next_play_pinch = position
                                
                                if old_player in sub_team_batting_order_map:
                                    del sub_team_batting_order_map[old_player]
                                if "battingOrder" in play:
                                    sub_team_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])
                            else:
                                sub_opp_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                                for position in sub_opp_position_map:
                                    if position in ("PR", "PH"):
                                        if old_player in sub_opp_position_map[position]:
                                            sub_opp_position_map[position].remove(old_player)
                                            if play["position"]["abbreviation"] == "PH":
                                                ub_next_play_pinch = position
                                    else:
                                        if sub_opp_position_map[position] == old_player:
                                            sub_opp_position_map[position] = None
                                            if play["position"]["abbreviation"] == "PH":
                                                ub_next_play_pinch = position
                                
                                if old_player in sub_opp_batting_order_map:
                                    del sub_opp_batting_order_map[old_player]
                                if "battingOrder" in play:
                                    sub_opp_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])

                if index == 0:
                    sub_away_score = 0
                    sub_home_score = 0
                else:
                    sub_away_score = sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["awayScore"]
                    sub_home_score = sub_data["liveData"]["plays"]["allPlays"][index - 1]["result"]["homeScore"]

                if sub_play_index != 0:
                    sub_outs = scoring_play["playEvents"][sub_play_index - 1]["count"]["outs"]
                else:
                    sub_outs = outs

                sub_outs_remaining = ((9 - inning) * 3) + (3 - sub_outs)
                if inning > 9:
                    sub_outs_remaining = 3 - sub_outs
                if (row_data["DateTime"].hour == 1 or row_data["DateTime"].hour == 2) and row_data["Year"] >= 2020:
                    sub_outs_remaining = ((7 - inning) * 3) + (3 - sub_outs)
                    if inning > 7:
                        sub_outs_remaining = 3 - sub_outs

                sub_current_outs = sub_play["count"]["outs"]
                sub_num_outs = sub_current_outs - sub_outs

                sub_counts = [{
                    "balls" : 0,
                    "strikes" : 0
                }]

                sub_pitches = []
                sub_pitch_types = []
                sub_pitch_speeds = []
                sub_pitch_zones = []
                sub_pitch_spin = []
                sub_pitch_x = []
                sub_pitch_y = []
                sub_hit_x = []
                sub_hit_y = []
                sub_pitch_top_strike_zone = []
                sub_pitch_bottom_strike_zone = []
                sub_hit_dist = []
                sub_hit_traj = []
                sub_hit_loc = []
                sub_hit_hard = []
                sub_pitch_ev = []
                sub_pitch_la = []
                sub_num_pitches = 0
                sub_index_to_use = 0
                
                if not has_play_id:
                    play_id = sub_play["index"]
                else:
                    if "actionPlayId" not in sub_play and "playId" not in sub_play:
                        play_id = None
                    else:
                        play_id = sub_play["actionPlayId"] if "actionPlayId" in sub_play else sub_play["playId"]

                for inherited_play in reversed(scoring_play["playEvents"][:sub_play_index]):
                    if "playId" not in inherited_play and has_play_id:
                        continue

                    sub_play_id = inherited_play["playId"] if has_play_id else inherited_play["index"]
                    if sub_play_id != play_id:
                        sub_index_to_use = inherited_play["index"] + 1
                        break

                for sub_sub_play_index, play in enumerate(scoring_play["playEvents"][:sub_index_to_use]):
                    if play["isPitch"]:
                        sub_num_pitches += 1
                        if play["details"]["isStrike"]:
                            last_count = sub_counts[len(sub_counts) - 1].copy()
                            if last_count["strikes"] != 2:
                                last_count["strikes"] += 1
                            sub_counts.append(last_count)
                        elif play["details"]["isBall"]:
                            last_count = sub_counts[len(sub_counts) - 1].copy()
                            if last_count["balls"] != 3:
                                last_count["balls"] += 1
                            sub_counts.append(last_count)
                        else:
                            sub_counts.append(last_count)

                sub_swung_at_first_pitch = False
                first_pitch_num_pitches = 0
                first_pitch = True
                for sub_sub_play_index, play in enumerate(scoring_play["playEvents"][:(sub_play_index + 1)]):
                    if play["isPitch"]:
                        code = play["details"]["call"]["code"][-1:].upper()
                        sub_pitches.append(code)
                        first_pitch_num_pitches += 1
                        if first_pitch:
                            sub_swung_at_first_pitch = play["details"]["call"]["code"][-1:].upper() in ('F', 'S', 'D', 'X', 'E', 'T', 'L', 'W', 'M', 'O', 'Y')
                            first_pitch = False
                        if "type" in play["details"] and play["details"]["type"] and play["details"]["type"]["description"]:
                            sub_pitch_types.append(play["details"]["type"]["description"])
                        else:
                            sub_pitch_types.append(None)

                        if "pitchData" in play and "startSpeed" in play["pitchData"]:
                            sub_pitch_speeds.append(play["pitchData"]["startSpeed"])
                        else:
                            sub_pitch_speeds.append(None)
                        
                        if "pitchData" in play and "zone" in play["pitchData"]:
                            sub_pitch_zones.append(play["pitchData"]["zone"])
                        else:
                            sub_pitch_zones.append(None)

                        if "pitchData" in play and "breaks" in play["pitchData"] and "spinRate" in play["pitchData"]["breaks"]:
                            sub_pitch_spin.append(play["pitchData"]["breaks"]["spinRate"])
                        else:
                            sub_pitch_spin.append(None)

                        if "pitchData" in play and "coordinates" in play["pitchData"] and "pX" in play["pitchData"]["coordinates"]:
                            sub_pitch_x.append(play["pitchData"]["coordinates"]["pX"])
                        else:
                            sub_pitch_x.append(None)
                        
                        if "pitchData" in play and "coordinates" in play["pitchData"] and "pZ" in play["pitchData"]["coordinates"]:
                            sub_pitch_y.append(play["pitchData"]["coordinates"]["pZ"])
                        else:
                            sub_pitch_y.append(None)

                        if "pitchData" in play and "strikeZoneTop" in play["pitchData"]:
                            sub_pitch_top_strike_zone.append(play["pitchData"]["strikeZoneTop"])
                        else:
                            sub_pitch_top_strike_zone.append(None)
                        
                        if "pitchData" in play and "strikeZoneBottom" in play["pitchData"]:
                            sub_pitch_bottom_strike_zone.append(play["pitchData"]["strikeZoneBottom"])
                        else:
                            sub_pitch_bottom_strike_zone.append(None)
                        
                        if "hitData" in play and "launchSpeed" in play["hitData"]:
                            sub_pitch_ev.append(play["hitData"]["launchSpeed"])
                        else:
                            sub_pitch_ev.append(None)
                        
                        if "hitData" in play and "launchAngle" in play["hitData"]:
                            sub_pitch_la.append(play["hitData"]["launchAngle"])
                        else:
                            sub_pitch_la.append(None)

                        if "hitData" in play and "totalDistance" in play["hitData"]:
                            sub_hit_dist.append(play["hitData"]["totalDistance"])
                        else:
                            sub_hit_dist.append(None)

                        if "hitData" in play and "totalDistance" in play["hitData"]:
                            sub_hit_dist.append(play["hitData"]["totalDistance"])
                        else:
                            sub_hit_dist.append(None)
                        
                        if "hitData" in play and "trajectory" in play["hitData"]:
                            sub_hit_traj.append(play["hitData"]["trajectory"])
                        else:
                            sub_hit_traj.append(None)
                        
                        if "hitData" in play and "hardness" in play["hitData"]:
                            sub_hit_hard.append(play["hitData"]["hardness"])
                        else:
                            sub_hit_hard.append(None)
                        
                        if "hitData" in play and "location" in play["hitData"]:
                            sub_hit_loc.append(play["hitData"]["location"])
                        else:
                            sub_hit_loc.append(None)

                        if "hitData" in play and "coordinates" in play["hitData"] and "coordX" in play["hitData"]["coordinates"]:
                            sub_hit_x.append(play["hitData"]["coordinates"]["coordX"])
                        else:
                            sub_hit_x.append(None)
                        
                        if "hitData" in play and "coordinates" in play["hitData"] and "coordY" in play["hitData"]["coordinates"]:
                            sub_hit_y.append(play["hitData"]["coordinates"]["coordY"])
                        else:
                            sub_hit_y.append(None)
                    elif sub_sub_play_index == sub_play_index:
                        sub_pitches.append("N")
                
                sub_first_pitch = first_pitch_num_pitches == 1
                
                if pitches:
                    sub_balls = sub_counts[len(sub_counts) - 1]["balls"]
                    sub_strikes = sub_counts[len(sub_counts) - 1]["strikes"]
                else:
                    sub_balls = None
                    sub_strikes = None
                    sub_num_pitches = None
                    sub_pitches = None
                    sub_counts = None
                    sub_swung_at_first_pitch = None
                    sub_first_pitch = None
                
                if sub_num_pitches != None:
                    sub_starting_pitch_count = starting_pitch_count
                    sub_pitch_count = sub_starting_pitch_count + sub_num_pitches

                    sub_starting_team_pitch_count = starting_team_pitch_count
                    sub_team_pitch_count = sub_starting_team_pitch_count + sub_num_pitches + 1

                    sub_starting_game_pitch_count = starting_game_pitch_count
                    sub_game_pitch_count = sub_starting_game_pitch_count + sub_num_pitches + 1
                else:
                    sub_starting_pitch_count = None
                    sub_pitch_count = None
                    sub_team_pitch_count = None
                    sub_game_pitch_count = None

                sub_starting_innings_pitched = starting_innings_pitched
                sub_innings_pitched = sub_starting_innings_pitched + sub_num_outs * (1/3)

                frac, whole = math.modf(sub_starting_innings_pitched)
                frac = round_value(frac, 1)
                sub_starting_innings_pitched = whole
                if frac == 0.3:
                    sub_starting_innings_pitched += 1/3
                elif frac == 0.7:
                    sub_starting_innings_pitched += 2/3
                elif frac == 1.0:
                    sub_starting_innings_pitched += 1
                frac, whole = math.modf(sub_innings_pitched)
                frac = round_value(frac, 1)
                sub_innings_pitched = whole
                if frac == 0.3:
                    sub_innings_pitched += 1/3
                elif frac == 0.7:
                    sub_innings_pitched += 2/3
                elif frac == 1.0:
                    sub_innings_pitched += 1

                sub_man_on_first = False
                sub_man_on_second = False
                sub_man_on_third = False

                sub_men_on_base_map = {
                    "1B" : None,
                    "2B" : None,
                    "3B" : None
                }

                if index != 0 and sub_data["liveData"]["plays"]["allPlays"][index - 1]["about"]["isTopInning"] == is_top_inning:
                    if post_man_on_first:
                        sub_man_on_first = True
                        sub_men_on_base_map["1B"] = post_man_on_first
                    if post_man_on_second:
                        sub_man_on_second = True
                        sub_men_on_base_map["2B"] = post_man_on_second
                    if post_man_on_third:
                        sub_man_on_third = True
                        sub_men_on_base_map["3B"] = post_man_on_third
                
                for inherited_play in scoring_play["playEvents"]:
                    if "eventType" in inherited_play["details"] and inherited_play["details"]["eventType"] and inherited_play["details"]["eventType"] == "runner_placed":
                        sub_man_on_second = True

                runners_by_play = {}
                for sub_runner in scoring_play["runners"]:
                    if sub_runner["details"]["playIndex"] < sub_play_index:
                        if sub_runner["details"]["playIndex"] not in runners_by_play:
                            runners_by_play[sub_runner["details"]["playIndex"]] = []
                        runners_by_play[sub_runner["details"]["playIndex"]].append(sub_runner)
                        
                        if sub_runner["details"]["isScoringEvent"]:
                            if is_team_batting:
                                if is_home_team:
                                    sub_home_score += 1
                                else:
                                    sub_away_score += 1
                            else:
                                if is_home_team:
                                    sub_away_score += 1
                                else:
                                    sub_home_score += 1
                
                for play_index in runners_by_play:
                    new_man_on_second = False
                    new_man_on_third = False
                    for sub_run_index, sub_runner in enumerate(runners_by_play[play_index]):
                        if sub_run_index == len(runners_by_play[play_index]) - 1 or runners_by_play[play_index][sub_run_index + 1]["details"]["runner"]["id"] != sub_runner["details"]["runner"]["id"]:
                            if sub_runner["movement"]["end"] == "2B":
                                sub_man_on_second = True
                                new_man_on_second = True
                                sub_men_on_base_map["2B"] = sub_runner["details"]["runner"]["id"]
                            if sub_runner["movement"]["end"] == "3B":
                                sub_man_on_third = True
                                new_man_on_third = True
                                sub_men_on_base_map["3B"] = sub_runner["details"]["runner"]["id"]
                    
                    for sub_runner in runners_by_play[play_index]:
                        if sub_runner["movement"]["start"] == "1B" and sub_runner["movement"]["end"] != "1B":
                            sub_man_on_first = False
                            sub_men_on_base_map["1B"] = None
                        if sub_runner["movement"]["start"] == "2B" and sub_runner["movement"]["end"] != "2B" and not new_man_on_second:
                            sub_man_on_second = False
                            sub_men_on_base_map["2B"] = None
                        if sub_runner["movement"]["start"] == "3B" and sub_runner["movement"]["end"] != "3B" and not new_man_on_third:
                            sub_man_on_third = False
                            sub_men_on_base_map["3B"] = None

                sub_men_on_base = int(sub_man_on_first) + int(sub_man_on_second) + int(sub_man_on_third)
                sub_men_in_scoring = int(sub_man_on_second) + int(sub_man_on_third)

                sub_play_home_score = sub_home_score
                sub_play_away_score = sub_away_score
                sub_current_home_score = sub_home_score
                sub_current_away_score = sub_away_score
                sub_play_outs = sub_outs
                for sub_runner_index, sub_runner in enumerate(scoring_play["runners"]):
                    sub_runner_index = len(scoring_play["runners"]) - sub_runner_index - 1
                    if sub_runner["details"]["playIndex"] == sub_play_index:
                        if sub_runner["movement"]["isOut"]:
                            if sub_runner_index > runner_index:
                                sub_play_outs += 1
                        elif sub_runner["details"]["isScoringEvent"]:
                            if is_team_batting:
                                if sub_runner_index >= runner_index:
                                    if is_home_team:
                                        sub_current_home_score += 1
                                    else:
                                        sub_current_away_score += 1
                                    if sub_runner_index > runner_index:
                                        if is_home_team:
                                            sub_play_home_score += 1
                                        else:
                                            sub_play_away_score += 1
                            else:
                                if sub_runner_index >= runner_index:
                                    if is_home_team:
                                        sub_current_away_score += 1
                                    else:
                                        sub_current_home_score += 1
                                    if sub_runner_index > runner_index:
                                        if is_home_team:
                                            sub_play_away_score += 1
                                        else:
                                            sub_play_home_score += 1

                sub_num_runs = (sub_current_away_score + sub_current_home_score) - (sub_play_away_score + sub_play_home_score)

                if is_home_team:
                    sub_team_score = sub_home_score
                    sub_opp_score = sub_away_score
                    sub_play_team_score = sub_play_home_score
                    sub_play_opp_score = sub_play_away_score
                    sub_ending_team_score = sub_current_home_score
                    sub_ending_opp_score = sub_current_away_score
                else:
                    sub_team_score = sub_away_score
                    sub_opp_score = sub_home_score
                    sub_play_team_score = sub_play_away_score
                    sub_play_opp_score = sub_play_home_score
                    sub_ending_team_score = sub_current_away_score
                    sub_ending_opp_score = sub_current_home_score

                if is_team_batting:
                    sub_bat_score = sub_team_score
                    sub_pitch_score = sub_opp_score
                    sub_play_bat_score = sub_play_team_score
                    sub_play_pitch_score = sub_play_opp_score
                else:
                    sub_bat_score = sub_opp_score
                    sub_pitch_score = sub_team_score
                    sub_play_bat_score = sub_play_opp_score
                    sub_play_pitch_score = sub_play_team_score

                sub_walk_off = False
                sub_walk_off_opp = False
                sub_last_out = False
                if not is_top_inning and last_inning:
                    sub_score_diff = sub_play_pitch_score - sub_play_bat_score
                    if sub_score_diff >= 0:
                        sub_walk_off_opp = sub_score_diff < sub_men_on_base + 1
                        sub_walk_off = sub_num_runs > sub_score_diff
                
                if last_inning and sub_play_pitch_score > sub_play_bat_score and sub_play_outs == 2:
                    sub_last_out = True

                sub_game_tying = False
                sub_game_tying_opp = False
                sub_score_diff = sub_play_pitch_score - sub_play_bat_score
                if sub_score_diff >= 1:
                    sub_game_tying_opp = sub_score_diff <= sub_men_on_base + 1
                    sub_game_tying = sub_num_runs >= sub_score_diff

                sub_go_ahead = False
                sub_go_ahead_opp = False
                sub_score_diff = sub_play_pitch_score - sub_play_bat_score
                if sub_score_diff >= 0:
                    sub_go_ahead_opp = sub_score_diff < sub_men_on_base + 1
                    sub_go_ahead = sub_num_runs > sub_score_diff
                
                sub_go_ahead_or_game_tying = False
                sub_go_ahead_or_game_tying_opp = False
                sub_score_diff = sub_play_pitch_score - sub_play_bat_score
                if sub_score_diff >= 0:
                    sub_go_ahead_or_game_tying_opp = sub_score_diff <= sub_men_on_base + 1
                    if sub_game_tying_opp:
                        sub_go_ahead_or_game_tying = sub_num_runs >= sub_score_diff
                    else:
                        sub_go_ahead_or_game_tying = sub_num_runs > sub_score_diff
                
                sub_tying_on_deck = False
                sub_score_diff = sub_play_pitch_score - sub_play_bat_score
                if sub_score_diff >= 1:
                    sub_tying_on_deck = sub_score_diff <= sub_men_on_base + 2

                sub_winning_on_deck = False
                sub_score_diff = sub_play_pitch_score - sub_play_bat_score
                if sub_score_diff >= 0:
                    sub_winning_on_deck = sub_score_diff < sub_men_on_base + 2

                sub_tying_on_base = False
                sub_score_diff = sub_pitch_score - sub_bat_score
                if sub_score_diff >= 1:
                    sub_tying_on_base = sub_score_diff <= sub_men_on_base

                sub_winning_on_base = False
                sub_score_diff = sub_pitch_score - sub_bat_score
                if sub_score_diff >= 0:
                    sub_winning_on_base = sub_score_diff < sub_men_on_base
                
                sub_tying_at_bat = False
                sub_score_diff = sub_pitch_score - sub_bat_score
                if sub_score_diff >= 1:
                    sub_tying_at_bat = sub_score_diff <= sub_men_on_base + 1

                sub_winning_at_bat = False
                sub_score_diff = sub_pitch_score - sub_bat_score
                if sub_score_diff >= 0:
                    sub_winning_at_bat = sub_score_diff < sub_men_on_base + 1
                
                sub_tying_in_scoring = False
                sub_score_diff = sub_pitch_score - sub_bat_score
                if sub_score_diff >= 1:
                    sub_tying_in_scoring = sub_score_diff <= sub_men_in_scoring

                sub_winning_in_scoring = False
                sub_score_diff = sub_pitch_score - sub_bat_score
                if sub_score_diff >= 0:
                    sub_winning_in_scoring = sub_score_diff < sub_men_in_scoring
                
                sub_game_winning = False
                if sub_num_runs and is_team_batting:
                    if game_winning_run and game_winning_team == row_data["Tm"] and game_winning_run > sub_team_score and game_winning_run <= (sub_team_score + sub_num_runs):
                        sub_game_winning = True
                
                sub_tying_on_first = False
                if sub_man_on_first:
                    sub_score_diff = sub_pitch_score - sub_bat_score
                    if sub_score_diff >= 1:
                        sub_men_on_base_to_use = 1
                        if sub_man_on_second:
                            sub_men_on_base_to_use += 1
                        if sub_man_on_third:
                            sub_men_on_base_to_use += 1
                        sub_tying_on_first = sub_score_diff == sub_men_on_base_to_use
                
                sub_winning_on_first = False
                if sub_man_on_first:
                    sub_score_diff = sub_pitch_score - sub_bat_score
                    if sub_score_diff >= 0:
                        sub_men_on_base_to_use = 1
                        if sub_man_on_second:
                            sub_men_on_base_to_use += 1
                        if sub_man_on_third:
                            sub_men_on_base_to_use += 1
                        sub_tying_on_first = sub_score_diff == sub_men_on_base_to_use - 1
                
                sub_tying_on_second = False
                if sub_man_on_second:
                    sub_score_diff = sub_pitch_score - sub_bat_score
                    if sub_score_diff >= 1:
                        sub_men_on_base_to_use = 1
                        if sub_man_on_third:
                            sub_men_on_base_to_use += 1
                        sub_tying_on_second = sub_score_diff == sub_men_on_base_to_use
                
                sub_winning_on_second = False
                if sub_man_on_second:
                    sub_score_diff = sub_pitch_score - sub_bat_score
                    if sub_score_diff >= 0:
                        sub_men_on_base_to_use = 1
                        if sub_man_on_third:
                            sub_men_on_base_to_use += 1
                        sub_winning_on_second = sub_score_diff == sub_men_on_base_to_use - 1
                
                sub_tying_on_third = False
                if sub_man_on_third:
                    sub_score_diff = sub_pitch_score - sub_bat_score
                    if sub_score_diff >= 1:
                        sub_men_on_base_to_use = 1
                        sub_tying_on_third = sub_score_diff == sub_men_on_base_to_use
                
                sub_winning_on_third = False
                if sub_man_on_third:
                    sub_score_diff = sub_pitch_score - sub_bat_score
                    if sub_score_diff >= 0:
                        sub_men_on_base_to_use = 1
                        sub_winning_on_third = sub_score_diff == sub_men_on_base_to_use - 1

                sub_end_time = None
                if "endTime" in sub_play and sub_play["endTime"]:
                    sub_end_time = dateutil.parser.parse(sub_play["endTime"])
                    all_times.add(end_time)

                sub_event_obj = {
                    "batter" : batter,
                    "pitcher" : pitcher,
                    "men_on_base_map" : sub_men_on_base_map,
                    "batter_first" : batter_first,
                    "pitcher_first" : pitcher_first,
                    "batter_birth_first" : batter_birth_first,
                    "pitcher_birth_first" : pitcher_birth_first,
                    "batter_last" : batter_last,
                    "pitcher_last" : pitcher_last,
                    "batter_country" : batter_country,
                    "pitcher_country" : pitcher_country,
                    "event_time" : sub_end_time,
                    "runners_driven_in" : runners_driven_in,
                    "runners_batted_in" : runners_batted_in,
                    "earned_runners_driven_in" : earned_runners_driven_in,
                    "earned_runners_batted_in" : earned_runners_batted_in,
                    "description" : sub_play["details"]["description"] if "description" in sub_play["details"] and sub_play["details"]["description"] else None,
                    "pitches" : first_pitch_num_pitches,
                    "ind_pitches" : sub_pitches,
                    "pitch_types" : sub_pitch_types,
                    "pitch_speeds" : sub_pitch_speeds,
                    "pitch_zones" : sub_pitch_zones,
                    "pitch_x" : sub_pitch_x,
                    "pitch_y" : sub_pitch_y,
                    "hit_x" : sub_hit_x,
                    "hit_y" : sub_hit_y,
                    "top_strike_zone" : sub_pitch_top_strike_zone,
                    "bottom_strike_zone" : sub_pitch_bottom_strike_zone,
                    "pitch_la" : sub_pitch_la,
                    "pitch_ev" : sub_pitch_ev,
                    "pitch_spin" : sub_pitch_spin,
                    "num_runs" : sub_num_runs,
                    "rbis" : rbis,
                    "driven_in" : driven_in,
                    "hit_hard" : sub_hit_hard,
                    "hit_loc" : sub_hit_loc,
                    "hit_traj" : sub_hit_traj,
                    "hit_dist" : sub_hit_dist,
                    "balls"  : sub_balls,
                    "strikes"  : sub_strikes,
                    "counts" : sub_counts,
                    "pitching_lefty" : pitching_lefty,
                    "pitching_righty" : pitching_righty,
                    "batting_lefty" : batting_lefty,
                    "batting_righty" : batting_righty,
                    "team_position_map" : sub_tm_position_map,
                    "opp_position_map" : sub_opp_position_map,
                    "team_main_position_map" : team_main_position_map,
                    "opp_main_position_map" : opp_main_position_map,
                    "team_primary_position_map" : team_primary_position_map,
                    "opp_primary_position_map" : opp_primary_position_map,
                    "team_batting_order_map" : sub_team_batting_order_map,
                    "opp_batting_order_map" : sub_opp_batting_order_map,
                    "leading_off_game" : leading_off_game,
                    "leading_off_team" : leading_off_team,
                    "leading_off_inning" : first_batter_inning,
                    "swung_at_first_pitch" : sub_swung_at_first_pitch,
                    "batting_order_pos" : batting_order_pos,
                    "first_pitch" : sub_first_pitch,
                    "next_play_pinch" : sub_next_play_pinch,
                    "is_starter_pitcher" : is_starter_pitcher,
                    "is_starter_batter" : is_starter_batter,
                    "is_reliever_pitcher" : not is_starter_pitcher,
                    "is_reliever_batter" : not is_starter_batter,
                    "starting_inning" : starting_inning,
                    "time_through_lineup" : pitcher_matchup_map[pitcher]["times_around"],
                    "time_facing_opponent" : pitcher_matchup_map[pitcher][batter],
                    "starting_pitch_count" : sub_starting_pitch_count,
                    "pitch_count" : sub_pitch_count,
                    "batter_matchup_map" : batter_matchup_map,
                    "pitcher_matchup_map" : pitcher_matchup_map,
                    "batters_faced" : pitcher_matchup_map[pitcher]["current_pa"],
                    "plate_appearances" : batter_matchup_map[batter]["current_pa"],
                    "pitcher_first_batter_faced" : pitcher_matchup_map[pitcher]["current_pa"] == 0,
                    "batter_first_plate_appearance" : batter_matchup_map[batter]["current_pa"] == 0,
                    "game_pitch_count" : sub_game_pitch_count,
                    "team_pitch_count" : sub_team_pitch_count,
                    "starting_innings_pitched" : sub_starting_innings_pitched,
                    "innings_pitched" : sub_innings_pitched,
                    "team_runs" : sub_team_score,
                    "opp_runs" : sub_opp_score,
                    "run_diff" : sub_team_score - sub_opp_score,
                    "ending_team_runs" : sub_ending_team_score,
                    "ending_opp_runs" : sub_ending_opp_score,
                    "ending_run_diff" : sub_ending_team_score - sub_ending_opp_score,
                    "man_on_first" : sub_man_on_first,
                    "man_on_second" : sub_man_on_second,
                    "man_on_third" : sub_man_on_third,
                    "men_on_base" : sub_men_on_base,
                    "men_in_scoring" : sub_men_in_scoring,
                    "num_outs" : sub_num_outs,
                    "outs" : sub_outs,
                    "outs_remaining" : sub_outs_remaining,
                    "inning" : inning,
                    "inning_reversed" : max_innings - inning + 1,
                    "scheduled_inning_reversed" : (scheduled_max_innings - inning + 1) if (scheduled_max_innings - inning + 1) >= 1 else 1,
                    "is_top_inning" : is_top_inning,
                    "GameTying" : sub_game_tying,
                    "GameTyingOpp" : sub_game_tying_opp,
                    "GoAhead" : sub_go_ahead,
                    "is_close" : ((sub_bat_score - sub_pitch_score) >= 0 and (sub_bat_score - sub_pitch_score) <= 1) or sub_tying_on_deck,
                    "is_late" : inning >= 7,
                    "GoAheadOpp" : sub_go_ahead_opp,
                    "GoAheadOrGameTying" : sub_go_ahead_or_game_tying,
                    "GoAheadOrGameTyingOpp" : sub_go_ahead_or_game_tying_opp,
                    "GameWinning" : sub_game_winning,
                    "walk_off_index" :  walk_off_index,
                    "go_ahead_index" :  go_ahead_index,
                    "game_tying_index" :  game_tying_index,
                    "go_ahead_or_game_tying_index" :  go_ahead_or_game_tying_index,
                    "game_winning_index" :  game_winning_index,
                    "TyingOnDeck" : sub_tying_on_deck,
                    "WinningOnDeck" : sub_winning_on_deck,
                    "TyingOnFirst" : sub_tying_on_first,
                    "WinningOnFirst" : sub_winning_on_first,
                    "TyingOnSecond" : sub_tying_on_second,
                    "WinningOnSecond" : sub_winning_on_second,
                    "TyingOnThird" : sub_tying_on_third,
                    "WinningOnThird" : sub_winning_on_third,
                    "TyingOnBase" : sub_tying_on_base,
                    "WinningOnBase" : sub_winning_on_base,
                    "TyingAtBat" : sub_tying_at_bat,
                    "WinningAtBat" : sub_winning_at_bat,
                    "TyingInScoring" : sub_tying_in_scoring,
                    "WinningInScoring" : sub_winning_in_scoring,
                    "LastInning" : last_inning,
                    "LastOut" : sub_last_out,
                    "LastBatter" : index == len(sub_data["liveData"]["plays"]["allPlays"]) - 1,
                    "ExtraInnings" : extra_innings,
                    "WalkOff" : sub_walk_off,
                    "WalkOffOpp" : sub_walk_off_opp,
                    "event_id" : event_id,
                    "playEvents" : scoring_play["playEvents"],
                    "runners" : scoring_play["runners"],
                    "is_home_team" : is_home_team,
                    "current_outs" : scoring_play["count"]["outs"],
                    "current_away_score" : current_away_score,
                    "current_home_score" : current_home_score,
                    "postOnFirst" : post_man_on_first,
                    "postOnSecond" : post_man_on_second,
                    "postOnThird" : post_man_on_third,
                    "is_final" : is_final,
                    "has_play_id" : has_play_id,
                    "game_winning_run" : game_winning_run,
                    "game_winning_team" : game_winning_team,
                    "sb_base" : None,
                    "reached_base" : None
                }

                if sub_play_index == len(scoring_play["playEvents"]) - 1:
                    sub_event_obj["event_type"] = event_obj["result"]
                sub_event_obj["previous_event_type"] = event_obj["previous_result"]
                sub_event_obj["upcoming_event_type"] = event_obj["upcoming_result"]
                sub_event_obj["previous_player_event_type"] = event_obj["previous_player_result"]
                sub_event_obj["upcoming_player_event_type"] = event_obj["upcoming_player_result"]

                the_runner = runner["details"]["runner"]["id"]
                if runner["details"]["isScoringEvent"]:
                    run_pitcher = pitcher
                    if runner["details"]["responsiblePitcher"]:
                        run_pitcher = runner["details"]["responsiblePitcher"]["id"]
                    is_inherited = run_pitcher != pitcher
                    
                    if run_pitcher == player_data["mlb_id"]:
                        pitch_run_data = sub_event_obj.copy()

                        if is_inherited:
                            last_pitch_event = game_data["pitching_events"][len(game_data["pitching_events"]) - 1]
                            pitch_run_data["time_facing_opponent"] = last_pitch_event["time_facing_opponent"]
                            pitch_run_data["starting_pitch_count"] = last_pitch_event["starting_pitch_count"]
                            pitch_run_data["pitch_count"] = last_pitch_event["pitch_count"]
                            pitch_run_data["batters_faced"] = last_pitch_event["batters_faced"]
                            pitch_run_data["plate_appearances"] = last_pitch_event["plate_appearances"]
                            pitch_run_data["starting_innings_pitched"] = last_pitch_event["starting_innings_pitched"]
                            pitch_run_data["innings_pitched"] = last_pitch_event["innings_pitched"]

                        pitch_run_data["is_unearned_run"] = not runner["details"]["earned"]
                        pitch_run_data["is_inherited"] = is_inherited
                        pitch_run_data["result"] = "run_scored"
                        game_data["pitching_run_events"].append(pitch_run_data)
                        if event_id not in game_data["pitch_event_to_run_event"]:
                            game_data["pitch_event_to_run_event"][event_id] = []
                        game_data["pitch_event_to_run_event"][event_id].append(pitch_run_data)
                    elif the_runner == player_data["mlb_id"]:
                        bat_run_data = sub_event_obj.copy()
                        bat_run_data["result"] = "run_scored"
                        bat_run_data["is_unearned_run"] = not runner["details"]["earned"]
                        if player_data["mlb_id"] == batter:
                            run_event = bat_run_data
                        else:
                            game_data["batting_events"].append(bat_run_data)

                    if pitcher == player_data["mlb_id"] and run_pitcher != player_data["mlb_id"]:
                        inherited_runners_scored += 1
                    elif run_pitcher == player_data["mlb_id"] and pitcher != player_data["mlb_id"]:
                        bequeathed_runners_scored += 1
                
                if runner["details"]["movementReason"] == "r_stolen_base" or runner["details"]["movementReason"] == "r_stolen_base_2b" or runner["details"]["movementReason"] == "r_stolen_base_3b" or runner["details"]["movementReason"] == "r_stolen_base_home":
                    sb_base = runner["details"]["movementReason"].split("_")
                    sb_base = sb_base[len(sb_base) - 1].upper()
                    if sb_base == "HOME":
                        sb_base = "HP"
                    sb_data = sub_event_obj.copy()
                    sb_data["result"] = "stolen_base"
                    if runner["details"]["movementReason"] != "r_stolen_base":
                        sb_data["sb_base"] = sb_base
                    if the_runner == player_data["mlb_id"]:
                        game_data["batting_events"].append(sb_data)
                    elif pitcher == player_data["mlb_id"]:
                        game_data["pitching_events"].append(sb_data)
                elif runner["details"]["movementReason"] == "r_caught_stealing" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing" or runner["details"]["movementReason"] == "r_caught_stealing_2b" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing_2b" or runner["details"]["movementReason"] == "r_caught_stealing_3b" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing_3b" or runner["details"]["movementReason"] == "r_caught_stealing_home" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing_home":
                    sb_base = runner["details"]["movementReason"].split("_")
                    sb_base = sb_base[len(sb_base) - 1].upper()
                    if sb_base == "HOME":
                        sb_base = "HP"
                    sb_data = sub_event_obj.copy()
                    sb_data["result"] = "caught_stealing"
                    if runner["details"]["movementReason"] != "r_caught_stealing" and runner["details"]["movementReason"] != "r_pickoff_caught_stealing":
                        sb_data["sb_base"] = sb_base
                    if the_runner == player_data["mlb_id"]:
                        game_data["batting_events"].append(sb_data)
                    elif pitcher == player_data["mlb_id"]:
                        game_data["pitching_events"].append(sb_data)

                    if runner["details"]["movementReason"].startswith("r_pickoff"):
                        if runner["credits"][0]["position"]["abbreviation"] == "C":
                            sb_data["is_catcher_po"] = True
                        else:
                            sb_data["is_catcher_po"] = False
                
                if runner["details"]["movementReason"] == "r_pickoff" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing" or runner["details"]["movementReason"] == "r_pickoff_2b" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing_2b" or runner["details"]["movementReason"] == "r_pickoff_3b" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing_3b" or runner["details"]["movementReason"] == "r_pickoff_home" or runner["details"]["movementReason"] == "r_pickoff_caught_stealing_home":
                    sb_data = sub_event_obj.copy()
                    sb_data["result"] = "pick_off"
                    if runner["credits"] and runner["credits"][0]["player"] == player_data["mlb_id"] and runner["credits"][0]["position"]["abbreviation"] == "P":
                        game_data["pitching_events"].append(sb_data)

            if is_team_batting:
                if batter == player_data["mlb_id"]:
                    game_data["batting_events"].append(event_obj)
                if run_event:
                    game_data["batting_events"].append(run_event)
            else:
                if pitcher == player_data["mlb_id"]:
                    is_pitching = True
                    game_data["pitching_events"].append(event_obj)
                else:
                    is_pitching = False
                            
            if event_type not in ["no_stats", "no_stats_sb"]:
                next_play_pinch = None
                batter_matchup_map[batter]["current_ab"] += 1
                pitcher_matchup_map[pitcher]["current_ab"] += 1
                batter_matchup_map[batter]["current_pa"] += 1
                pitcher_matchup_map[pitcher]["current_pa"] += 1
                batter_matchup_map[batter][pitcher] += 1
                pitcher_matchup_map[pitcher][batter] += 1

                if batter_matchup_map[batter]["current_ab"] == 9:
                    batter_matchup_map[batter]["current_ab"] = 0
                    batter_matchup_map[batter]["times_around"] += 1
                
                if pitcher_matchup_map[pitcher]["current_ab"] == 9:
                    pitcher_matchup_map[pitcher]["current_ab"] = 0
                    pitcher_matchup_map[pitcher]["times_around"] += 1

            if is_pitching:
                if is_team_batting:
                    run_support += num_runs
                else:
                    exit_runs += num_runs
            
            event_id += 1

            for play in post_play_events:
                if "isSubstitution" in play and play["isSubstitution"]:
                    if play["details"]["eventType"] == "pitching_substitution":
                        if is_team_batting:
                            opp_position_map["P"] = play["postPlay"]
                            if "battingOrder" in play:
                                if opp_position_map["P"] and opp_position_map["P"] in opp_batting_order_map:
                                    del opp_batting_order_map[opp_position_map["P"]]
                                opp_batting_order_map[play["postPlay"]] = int(play["battingOrder"][0])
                        else:
                            team_position_map["P"] = play["postPlay"]
                            if "battingOrder" in play:
                                if team_position_map["P"] and team_position_map["P"] in team_batting_order_map:
                                    del team_batting_order_map[team_position_map["P"]]
                                team_batting_order_map[play["postPlay"]] = int(play["battingOrder"][0])

                            if play["postPlay"] == player_data["mlb_id"]:
                                sub_man_on_first = False
                                sub_man_on_second = False
                                sub_man_on_third = False

                                if index != 0 and sub_data["liveData"]["plays"]["allPlays"][index - 1]["about"]["isTopInning"] == is_top_inning:
                                    if "postOnFirst" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                        sub_man_on_first = True
                                    if "postOnSecond" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                        sub_man_on_second = True
                                    if "postOnThird" in sub_data["liveData"]["plays"]["allPlays"][index - 1]["matchup"]:
                                        sub_man_on_third = True

                                runners_by_play = {}
                                for sub_runner in scoring_play["runners"]:
                                    if sub_runner["details"]["playIndex"] < play["index"]:
                                        if sub_runner["details"]["playIndex"] not in runners_by_play:
                                            runners_by_play[sub_runner["details"]["playIndex"]] = []
                                        runners_by_play[sub_runner["details"]["playIndex"]].append(sub_runner)
                                
                                for play_index in runners_by_play:
                                    new_man_on_second = False
                                    new_man_on_third = False
                                    for sub_run_index, sub_runner in enumerate(runners_by_play[play_index]):
                                        if sub_run_index == len(runners_by_play[play_index]) - 1 or runners_by_play[play_index][sub_run_index + 1]["details"]["runner"]["id"] != sub_runner["details"]["runner"]["id"]:
                                            if sub_runner["movement"]["end"] == "2B":
                                                sub_man_on_second = True
                                                new_man_on_second = True
                                            if sub_runner["movement"]["end"] == "3B":
                                                sub_man_on_third = True
                                                new_man_on_third = True
                                    
                                    for sub_runner in runners_by_play[play_index]:
                                        if sub_runner["movement"]["start"] == "1B" and sub_runner["movement"]["end"] != "1B":
                                            sub_man_on_first = False
                                        if sub_runner["movement"]["start"] == "2B" and sub_runner["movement"]["end"] != "2B" and not new_man_on_second:
                                            sub_man_on_second = False
                                        if sub_runner["movement"]["start"] == "3B" and sub_runner["movement"]["end"] != "3B" and not new_man_on_third:
                                            sub_man_on_third = False

                                sub_men_on_base = int(sub_man_on_first) + int(sub_man_on_second) + int(sub_man_on_third)

                                if play["postPlay"] == player_data["mlb_id"]:
                                    inherited_runners += sub_men_on_base
                    elif play["details"]["eventType"] == "offensive_substitution":
                        pinch_hitter = play["postPlay"]
                        old_player = play["replacedPlayer"]["id"] if "replacedPlayer" in play else None

                        if is_team_batting:
                            team_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                            for position in team_position_map:
                                if position in ("PR", "PH"):
                                    if old_player in team_position_map[position]:
                                        team_position_map[position].remove(old_player)
                                else:
                                    if team_position_map[position] == old_player:
                                        team_position_map[position] = None
                            
                            if old_player in team_batting_order_map:
                                del team_batting_order_map[old_player]
                            if "battingOrder" in play:
                                team_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])
                        else:
                            opp_position_map[play["position"]["abbreviation"]].add(pinch_hitter)
                            for position in opp_position_map:
                                if position in ("PR", "PH"):
                                    if old_player in opp_position_map[position]:
                                        opp_position_map[position].remove(old_player)
                                else:
                                    if opp_position_map[position] == old_player:
                                        opp_position_map[position] = None

                            if old_player in opp_batting_order_map:
                                del opp_batting_order_map[old_player]
                            if "battingOrder" in play:
                                opp_batting_order_map[pinch_hitter] = int(play["battingOrder"][0])
        
        game_data["RS"] = run_support
        game_data["BQS"] = bequeathed_runners_scored
        game_data["IR"] = inherited_runners
        game_data["IS"] = inherited_runners_scored
        game_data["ExitRuns"] = exit_runs
        
        for index, all_event in enumerate(all_events):
            event_index = all_events.index(all_event)
            for sub_event in reversed(all_events[:event_index]):
                if sub_event["result"] not in ["no_stats", "no_stats_sb"] and sub_event["inning"] == all_event["inning"] and sub_event["is_top_inning"] == all_event["is_top_inning"]:
                    all_event["previous_event"] = sub_event
                    break
            for sub_event in all_events[(event_index + 1):]:
                if sub_event["result"] not in ["no_stats", "no_stats_sb"] and sub_event["inning"] == all_event["inning"] and sub_event["is_top_inning"] == all_event["is_top_inning"]:
                    all_event["next_event"] = sub_event
                    break
            
            if index == len(all_events) - 1:
                game_data["final_team_position_map"] = all_event["team_position_map"]

        
        if all_times:
            game_data["start_event_time"] = min(all_times)
            game_data["end_event_time"] = max(all_times)
        
    return game_data, row_data, row_index, missing_games, missing_pitch


def get_href_game_data(row_data, s):    
    #print("https://www.baseball-reference.com" + row["GameLink"])
    try:
        response, player_page_xml = url_request_lxml(s, "https://www.baseball-reference.com" + row_data["GameLink"])
    except urllib.error.HTTPError as err:
        if err.status == 404:
            return
        else:
            raise

    scorebox = player_page_xml.xpath("//div[@class = 'scorebox']")[0]
    scor_divs = scorebox.xpath("./div")

    scorebox_info = scor_divs[2]
    scorebox_divs = scorebox_info.xpath("./div")
    for scorebox_div in scorebox_divs:
        div_text = str(scorebox_div.text_content()).strip()
        if div_text.startswith("Day Game"):
            row_data["Time"] = "D"
        elif div_text.startswith("Night Game"):
            row_data["Time"] = "N"

def clear_data(row):
    row["Ing"] = 0
    row["PA"] = 0
    row["AB"] = 0
    row["1B"] = 0
    row["2B"] = 0
    row["3B"] = 0
    row["HR"] = 0
    row["H"] = 0
    row["XBH"] = 0
    row["TB"] = 0
    row["BB"] = 0
    row["IBB"] = 0
    row["HBP"] = 0
    row["TOB"] = 0
    row["SF"] = 0
    row["SH"] = 0
    row["SO"] = 0
    row["L/SO"] = 0
    row["S/SO"] = 0
    row["LkStr"] = 0
    row["SwStr"] = 0
    row["SwgStr"] = 0
    row["2StrPit"] = 0
    row["2StrK"] = 0
    row["CntStr"] = 0
    row["1stStr"] = 0
    row["WalkOff"] = 0
    row["Pit"] = 0
    row["TtlPit"] = 0
    row["MPHRaw"] = 0
    row["MPHPit"] = 0
    row["EVRaw"] = 0
    row["MaxEV"] = 0
    row["MaxMPH"] = 0
    row["MaxSpin"] = 0
    row["MaxLA"] = 0
    row["MaxDist"] = 0
    row["MinEV"] = float("inf")
    row["MinMPH"] = float("inf")
    row["MinSpin"] = float("inf")
    row["MinLA"] = float("inf")
    row["MinDist"] = float("inf")
    row["HardHit"] = 0
    row["SwtSpt"] = 0
    row["Chase"] = 0
    row["PitBall"] = 0
    row["PitStrike"] = 0
    row["EVPit"] = 0
    row["LARaw"] = 0
    row["LAPit"] = 0
    row["HitDistPit"] = 0
    row["HitDistRaw"] = 0
    row["SpinRaw"] = 0
    row["SpinPit"] = 0
    row["Str"] = 0
    row["Bal"] = 0
    row["GDP"] = 0
    row["GDPO"] = 0
    row["R"] = 0
    row["RBI"] = 0
    row["GWRBI"] = 0
    row["DrivenIn"] = 0
    row["GWDrivenIn"] = 0
    row["Slam"] = 0
    row["Cycle"] = 0
    row["IP"] = 0
    row["BF"] = 0
    row["R"] = 0
    row["ER"] = 0
    row["CS"] = 0
    row["SB"] = 0
    row["NS"] = 0
    row["PitTypes"] = set()

def calculate_data(row, player_type):
    if player_type["da_type"] == "Batter":
        if row["1B"] and row["2B"] and row["3B"] and row["HR"]:
            row["Cycle"] += 1
    
    calculate_sum_stats(player_type, row)

def get_opponent_schedule(seasons, is_schedule_diff, is_runs_diff):
    team_obj = {}

    has_live = False
    for season_obj in seasons:
        if season_obj["Year"] == current_season and not show_title_current_season:
            has_live = True
            break
    
    if not has_live:
        global totals
        global constants
        global park_factors
    else:
        totals = copy.deepcopy(totals)
        get_constant_data.get_totals(current_season, totals, log=False)

        constants = copy.deepcopy(constants)
        get_constant_data.get_constants(current_season, constants, log=False)

        park_factors = copy.deepcopy(park_factors)
        get_constant_data.get_park_factors(current_season, park_factors, log=False)

    for season_obj in seasons:
        year = str(season_obj["Year"])
        constant_year = year
        if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
            constant_year = str(int(current_season) - 1)
        if is_schedule_diff:
            request = urllib.request.Request(opponent_schedule_url_format.format(season_obj["Year"]), headers=request_headers)
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    continue
                else:
                    raise

            table_names = ["expanded_standings_overall", "postseason"]
            team_obj[season_obj["Year"]] = {}

            all_rank = []

            comments = None
            for table_name in table_names:
                table = player_page.find("table", id=table_name)

                if not table:
                    if not comments:
                        comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                    for c in comments:
                        temp_soup = BeautifulSoup(c, "lxml")
                        temp_table = temp_soup.find("table", id=table_name)
                        if temp_table:
                            table = temp_table
                            break

                if table_name == "postseason":
                    pennant_winners = set()
                    world_series_winner = None
                    if table:
                        rows = table.find_all("tr")
                        for row in rows:
                            columns = row.find_all("td")
                            if len(columns) == 3 and str(columns[0].find(text=True)) == "World Series":
                                teams = columns[2].find_all("a")
                                for team in teams:
                                    tm_text = team["href"].split("/")[2].upper()
                                    pennant_winners.add(tm_text)
                                    if team.parent.name == "strong":
                                        world_series_winner = tm_text  
                    
                    for tm_text in team_obj[season_obj["Year"]]:
                        if tm_text in pennant_winners:
                            if tm_text == world_series_winner:
                                team_obj[season_obj["Year"]][tm_text]["WSWinner"] = True
                            else:
                                team_obj[season_obj["Year"]][tm_text]["WSWinner"] = False
                            team_obj[season_obj["Year"]][tm_text]["PennantWinner"] = True
                        else:
                            team_obj[season_obj["Year"]][tm_text]["WSWinner"] = False
                            team_obj[season_obj["Year"]][tm_text]["PennantWinner"] = False
                        
                        if not world_series_winner:
                            team_obj[season_obj["Year"]][tm_text]["WSWinner"] = None
                        if not pennant_winners:
                            team_obj[season_obj["Year"]][tm_text]["PennantWinner"] = None
                else:
                    standard_table_rows = table.find("tbody").find_all("tr")
                    for row in standard_table_rows:
                        classes = row.get("class")
                        if (not classes or not "thead" in classes):
                            row_data = {}
                            row_data["Year"] = season_obj["Year"]
                            team_name = row.find("td", {"data-stat" : "team_name"}).find("a")
                            if not team_name:
                                continue
                        
                            tm_text = team_name["href"].split("/")[2]

                            row_data["Tm"] = tm_text.strip()
                            row_data["Rk"] = int(str(row.find("th", {"data-stat" : "ranker"}).find(text=True)))
                            row_data["Wins"] = int(str(row.find("td", {"data-stat" : "W"}).find(text=True)))
                            row_data["Losses"] = int(str(row.find("td", {"data-stat" : "L"}).find(text=True)))

                            team_obj[season_obj["Year"]][row_data["Tm"]] = row_data

                            all_rank.append(row_data["Rk"])
                        
            standings_divs = player_page.find_all("div", id="div_standings")
            if not standings_divs:
                for tm_text in team_obj[season_obj["Year"]]:
                    team_obj[season_obj["Year"]][tm_text]["DivisionWinner"] = None
                    team_obj[season_obj["Year"]][tm_text]["WildCard"] = None
            else:
                has_division_winner = False
                has_wild_card = False
                for standings_div in standings_divs:
                    tables = standings_div.find_all("div", {"class" : "table_wrapper"})
                    for table in tables:
                        division_name = table.find("span", {"class" : "section_anchor"})["data-label"].split(" Division")[0].strip()
                        for team_row in table.find("tbody").find_all("tr"):
                            tm_text = team_row.find("th", {"data-stat" : "team_ID"}).find("a")["href"].split("/")[2].upper()
                            sleague = get_team_league(tm_text, season_obj["Year"])
                            team_obj[season_obj["Year"]][tm_text]["Division"] = sleague + "-" + division_name

                            has_bold = team_row.find("th").find("strong")
                            has_italix = team_row.find("th").find("em")

                            if has_bold:
                                has_division_winner = True
                                team_obj[season_obj["Year"]][tm_text]["DivisionWinner"] = True
                                team_obj[season_obj["Year"]][tm_text]["WildCard"] = False
                            elif has_italix:
                                has_wild_card = True
                                team_obj[season_obj["Year"]][tm_text]["WildCard"] = True
                                team_obj[season_obj["Year"]][tm_text]["DivisionWinner"] = False
                            else:
                                team_obj[season_obj["Year"]][tm_text]["DivisionWinner"] = False
                                team_obj[season_obj["Year"]][tm_text]["WildCard"] = False
                
                if not has_division_winner or not has_wild_card:
                    for team in team_obj[season_obj["Year"]]:
                        if not has_division_winner:
                            team_obj[season_obj["Year"]][tm_text]["DivisionWinner"] = None
                        if not has_wild_card:
                            team_obj[season_obj["Year"]][tm_text]["WildCard"] = None


            all_rank = sorted(all_rank)
            
            for team in team_obj[season_obj["Year"]]:
                team_obj[season_obj["Year"]][team]["StandingsRank"] = all_rank.index(team_obj[season_obj["Year"]][team]["Rk"]) + 1
                
                team_obj[season_obj["Year"]][team]["ReverseStandingsRank"] = all_rank[::-1].index(team_obj[season_obj["Year"]][team]["Rk"]) + 1
        
        if is_runs_diff:
            request = urllib.request.Request(opponent_schedule_main_url_format.format(season_obj["Year"]), headers=request_headers)
            try:
                response, player_page = url_request(request)
            except urllib.error.HTTPError as err:
                if err.status == 404:
                    continue
                else:
                    raise

            table_names = ["teams_standard_batting", "teams_standard_pitching"]

            all_runs = []
            all_avg = []
            all_slg = []
            all_obp = []
            all_ops = []
            all_runs_allowed = []
            all_runs_diff = []

            all_wrc_plus = []
            all_era_minus = []
            all_era = []

            comments = None
            for table_name in table_names:
                table = player_page.find("table", id=table_name)

                if not table:
                    if not comments:
                        comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
                    for c in comments:
                        temp_soup = BeautifulSoup(c, "lxml")
                        temp_table = temp_soup.find("table", id=table_name)
                        if temp_table:
                            table = temp_table
                            break

                standard_table_rows = table.find("tbody").find_all("tr")
                for row in standard_table_rows:
                    classes = row.get("class")
                    if (not classes or not "thead" in classes):
                        team_name = row.find("th", {"data-stat" : "team_name"}).find("a")
                        if not team_name:
                            continue
                    
                        tm_text = team_name["href"].split("/")[2]
                        
                        if is_schedule_diff or table_name == "teams_standard_pitching":
                            row_data = team_obj[season_obj["Year"]][tm_text]
                        else:
                            if not season_obj["Year"] in team_obj:
                                team_obj[season_obj["Year"]] = {}
                            row_data = {}

                        row_data["Year"] = season_obj["Year"]
                        row_data["Tm"] = tm_text
                        runs = int(str(row.find("td", {"data-stat" : "R"}).find(text=True)))
                        if table_name == "teams_standard_batting":
                            row_data["Runs"] = runs
                            all_runs.append(row_data["Runs"])

                            if tm_text not in park_factors[constant_year]:
                                all_wrc_plus.append(-1)
                                continue
                            
                            sleague = get_team_league(tm_text, constant_year)
                            park_factor = park_factors[constant_year][tm_text]["Basic (5yr)"]

                            yearly_woba_stats = {
                                "BB" : int(str(row.find("td", {"data-stat" : "BB"}).find(text=True))) if row.find("td", {"data-stat" : "BB"}) and str(row.find("td", {"data-stat" : "BB"}).find(text=True)) else 0,
                                "IBB" : int(str(row.find("td", {"data-stat" : "IBB"}).find(text=True))) if row.find("td", {"data-stat" : "IBB"}) and str(row.find("td", {"data-stat" : "IBB"}).find(text=True)) else 0,
                                "HBP" : int(str(row.find("td", {"data-stat" : "HBP"}).find(text=True))) if row.find("td", {"data-stat" : "HBP"}) and str(row.find("td", {"data-stat" : "HBP"}).find(text=True)) else 0,
                                "H" : int(str(row.find("td", {"data-stat" : "H"}).find(text=True))) if row.find("td", {"data-stat" : "H"}) and str(row.find("td", {"data-stat" : "H"}).find(text=True)) else 0,
                                "1B" : int(str(row.find("td", {"data-stat" : "1B"}).find(text=True))) if row.find("td", {"data-stat" : "1B"}) and str(row.find("td", {"data-stat" : "1B"}).find(text=True)) else 0,
                                "2B" : int(str(row.find("td", {"data-stat" : "2B"}).find(text=True))) if row.find("td", {"data-stat" : "2B"}) and str(row.find("td", {"data-stat" : "2B"}).find(text=True)) else 0,
                                "3B" : int(str(row.find("td", {"data-stat" : "3B"}).find(text=True))) if row.find("td", {"data-stat" : "3B"}) and str(row.find("td", {"data-stat" : "3B"}).find(text=True)) else 0,
                                "HR" : int(str(row.find("td", {"data-stat" : "HR"}).find(text=True))) if row.find("td", {"data-stat" : "HR"}) and str(row.find("td", {"data-stat" : "HR"}).find(text=True)) else 0,
                                "PA" : int(str(row.find("td", {"data-stat" : "PA"}).find(text=True))) if row.find("td", {"data-stat" : "PA"}) and str(row.find("td", {"data-stat" : "PA"}).find(text=True)) else 0,
                                "AB" : int(str(row.find("td", {"data-stat" : "AB"}).find(text=True))) if row.find("td", {"data-stat" : "AB"}) and str(row.find("td", {"data-stat" : "AB"}).find(text=True)) else 0,
                                "SF" : int(str(row.find("td", {"data-stat" : "SF"}).find(text=True))) if row.find("td", {"data-stat" : "SF"}) and str(row.find("td", {"data-stat" : "SF"}).find(text=True)) else 0
                            }
                            yearly_woba_stats["1B"] = yearly_woba_stats["H"] - (yearly_woba_stats["2B"] + yearly_woba_stats["3B"] + yearly_woba_stats["HR"])
                            yearly_woba_stats["TB"] = yearly_woba_stats["1B"] + 2 * yearly_woba_stats["2B"] + 3 * yearly_woba_stats["3B"] + 4 * yearly_woba_stats["HR"]

                            row_data["BA"] = yearly_woba_stats["H"] / yearly_woba_stats["AB"]
                            row_data["OBP"] = (yearly_woba_stats["H"] + yearly_woba_stats["BB"] + yearly_woba_stats["HBP"]) / (yearly_woba_stats["AB"] + yearly_woba_stats["BB"] + yearly_woba_stats["HBP"] + yearly_woba_stats["SF"])
                            row_data["SLG"] = yearly_woba_stats["TB"] / yearly_woba_stats["AB"]
                            row_data["OPS"] = row_data["OBP"] + row_data["SLG"]
                            all_avg.append(row_data["BA"])
                            all_obp.append(row_data["OBP"])
                            all_slg.append(row_data["SLG"])
                            all_ops.append(row_data["OPS"])

                            wOBA = 0.0
                            try:
                                wOBA = ((constants[constant_year]["wBB"] * (yearly_woba_stats["BB"] - (yearly_woba_stats["IBB"] if int(constant_year) >= 1955 else 0))) + (constants[constant_year]["wHBP"] * yearly_woba_stats["HBP"]) + (constants[constant_year]["w1B"] * yearly_woba_stats["1B"]) + (constants[constant_year]["w2B"] * yearly_woba_stats["2B"]) + (constants[constant_year]["w3B"] * yearly_woba_stats["3B"]) + (constants[constant_year]["wHR"] * yearly_woba_stats["HR"])) / (yearly_woba_stats["AB"] + yearly_woba_stats["BB"] - (yearly_woba_stats["IBB"] if int(constant_year) >= 1955 else 0) + yearly_woba_stats["SF"] + yearly_woba_stats["HBP"])
                            except ZeroDivisionError:
                                pass
                            lgwOBA = ((constants[constant_year]["wBB"] * (totals["MLB"]["Batter"][constant_year]["BB"] - (totals["MLB"]["Batter"][constant_year]["IBB"] if int(constant_year) >= 1955 else 0))) + (constants[constant_year]["wHBP"] * totals["MLB"]["Batter"][constant_year]["HBP"]) + (constants[constant_year]["w1B"] * (totals["MLB"]["Batter"][constant_year]["H"] - (totals["MLB"]["Batter"][constant_year]["2B"] + totals["MLB"]["Batter"][constant_year]["3B"] + totals["MLB"]["Batter"][constant_year]["HR"]))) + (constants[constant_year]["w2B"] * totals["MLB"]["Batter"][constant_year]["2B"]) + (constants[constant_year]["w3B"] * totals["MLB"]["Batter"][constant_year]["3B"]) + (constants[constant_year]["wHR"] * totals["MLB"]["Batter"][constant_year]["HR"])) / (totals["MLB"]["Batter"][constant_year]["AB"] + totals["MLB"]["Batter"][constant_year]["BB"] - (totals["MLB"]["Batter"][constant_year]["IBB"] if int(constant_year) >= 1955 else 0) + (totals["MLB"]["Batter"][constant_year]["SF"] if int(constant_year) >= 1954 else 0) + totals["MLB"]["Batter"][constant_year]["HBP"])

                            lgRPA = totals["MLB"]["Batter"][constant_year]["R"] / totals["MLB"]["Batter"][constant_year]["PA"]

                            wRCPlus = ((wOBA - lgwOBA) / constants[constant_year]["wOBAScale"]) + lgRPA
                            wRCPlus += lgRPA - ((park_factor / 100) * lgRPA)
                            wRCPlus /= (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["wRC"] / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"])
                            row_data["wRC+"] = wRCPlus * 100
                            if row_data["wRC+"] < -100:
                                row_data["wRC+"] = -100
                            all_wrc_plus.append(row_data["wRC+"])
                        else:
                            row_data["RunsAllowed"] = runs
                            row_data["RunDiff"] = row_data["Runs"] - row_data["RunsAllowed"]
                            all_runs_allowed.append(row_data["RunsAllowed"])
                            all_runs_diff.append(row_data["RunDiff"])

                            if tm_text not in park_factors[constant_year]:
                                all_era_minus.append(-1)
                                continue

                            sleague = get_team_league(tm_text, constant_year)
                            park_factor = park_factors[constant_year][tm_text]["Basic (5yr)"]

                            innings_pitches = 0
                            innings_row = row.find("td", {"data-stat" : "IP"})
                            if innings_row:
                                innings_str = innings_row.find(text=True)
                                if innings_str:
                                    innings_split = str(innings_str).split(".")
                                    innings_pitches = float(innings_split[0])
                                    if innings_split[1] == "1":
                                        innings_pitches += 1/3
                                    elif innings_split[1] == "2":
                                        innings_pitches += 2/3

                            yearly_woba_stats = {
                                "ER" : int(str(row.find("td", {"data-stat" : "ER"}).find(text=True))) if row.find("td", {"data-stat" : "ER"}) and row.find("td", {"data-stat" : "ER"}).find(text=True) else 0,
                                "IP" : innings_pitches
                            }

                            era = 0.0
                            try:
                                era = (9 * yearly_woba_stats["ER"]) / yearly_woba_stats["IP"]
                            except ZeroDivisionError:
                                pass

                            s_league_innings = totals[sleague]["Pitcher"][constant_year]["IP"]
                            s_league_innings_split = str(s_league_innings).split(".")
                            s_league_innings = float(s_league_innings_split[0])
                            if s_league_innings_split[1] == "1":
                                s_league_innings += 1/3
                            elif s_league_innings_split[1] == "2":
                                s_league_innings += 2/3

                            sleagueEra = (9 * totals[sleague]["Pitcher"][constant_year]["ER"]) / s_league_innings

                            eraminus = era + (era - (era * (park_factor / 100)))
                            eraminus /= sleagueEra
                            row_data["ERA-"] = eraminus * 100
                            row_data["ERA"] = era
                            all_era_minus.append(row_data["ERA-"])
                            all_era.append(row_data["ERA"])
                        if not (is_schedule_diff or table_name == "teams_standard_pitching"):
                            team_obj[season_obj["Year"]][row_data["Tm"]] = row_data

            all_runs = sorted(all_runs, reverse=True)
            all_avg = sorted(all_avg, reverse=True)
            all_obp = sorted(all_obp, reverse=True)
            all_ops = sorted(all_ops, reverse=True)
            all_slg = sorted(all_slg, reverse=True)
            all_runs_allowed = sorted(all_runs_allowed)
            all_runs_diff = sorted(all_runs_diff, reverse=True)

            all_wrc_plus = sorted(all_wrc_plus, reverse=True)
            all_era_minus = sorted(all_era_minus)
            all_era = sorted(all_era)
            
            for team in team_obj[season_obj["Year"]]:
                team_obj[season_obj["Year"]][team]["RunsRank"] = all_runs.index(team_obj[season_obj["Year"]][team]["Runs"]) + 1
                team_obj[season_obj["Year"]][team]["RunsAllowedRank"] = all_runs_allowed.index(team_obj[season_obj["Year"]][team]["RunsAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["RunDiffRank"] = all_runs_diff.index(team_obj[season_obj["Year"]][team]["RunDiff"]) + 1

                team_obj[season_obj["Year"]][team]["ReverseRunsRank"] = all_runs[::-1].index(team_obj[season_obj["Year"]][team]["Runs"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRunsAllowedRank"] = all_runs_allowed[::-1].index(team_obj[season_obj["Year"]][team]["RunsAllowed"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseRunDiffRank"] = all_runs_diff[::-1].index(team_obj[season_obj["Year"]][team]["RunDiff"]) + 1

                team_obj[season_obj["Year"]][team]["wRC+Rank"] = all_wrc_plus.index(team_obj[season_obj["Year"]][team]["wRC+"]) + 1
                team_obj[season_obj["Year"]][team]["ERA-Rank"] = all_era_minus.index(team_obj[season_obj["Year"]][team]["ERA-"]) + 1
                team_obj[season_obj["Year"]][team]["ERARank"] = all_era.index(team_obj[season_obj["Year"]][team]["ERA"]) + 1
                team_obj[season_obj["Year"]][team]["AVGRank"] = all_avg.index(team_obj[season_obj["Year"]][team]["BA"]) + 1
                team_obj[season_obj["Year"]][team]["OBPRank"] = all_obp.index(team_obj[season_obj["Year"]][team]["OBP"]) + 1
                team_obj[season_obj["Year"]][team]["OPSRank"] = all_ops.index(team_obj[season_obj["Year"]][team]["OPS"]) + 1
                team_obj[season_obj["Year"]][team]["SLGRank"] = all_slg.index(team_obj[season_obj["Year"]][team]["SLG"]) + 1

                team_obj[season_obj["Year"]][team]["ReversewRC+Rank"] = all_wrc_plus[::-1].index(team_obj[season_obj["Year"]][team]["wRC+"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseERA-Rank"] = all_era_minus[::-1].index(team_obj[season_obj["Year"]][team]["ERA-"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseERARank"] = all_era[::-1].index(team_obj[season_obj["Year"]][team]["ERA"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseAVGRank"] = all_avg[::-1].index(team_obj[season_obj["Year"]][team]["BA"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseOBPRank"] = all_obp[::-1].index(team_obj[season_obj["Year"]][team]["OBP"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseOPSRank"] = all_ops[::-1].index(team_obj[season_obj["Year"]][team]["OPS"]) + 1
                team_obj[season_obj["Year"]][team]["ReverseSLGRank"] = all_slg[::-1].index(team_obj[season_obj["Year"]][team]["SLG"]) + 1
    
    return team_obj

def calculate_advanced_stats(data, all_rows, player_type, time_frames):
    total_wSB = 0.0
    total_wRC = 0.0
    total_wRAA = 0.0
    total_bat = 0.0
    total_OBPPlus = 0.0
    total_KPlus = 0.0
    total_BBPlus = 0.0
    total_HRPlus = 0.0
    total_TTOPlus = 0.0
    total_XBHPlus = 0.0
    total_XHPlus = 0.0
    total_BBMKPlus = 0.0
    total_AVGPlus = 0.0
    total_SLGPlus = 0.0
    total_ISOPlus = 0.0
    total_BABIPPlus = 0.0
    total_wRCPlus = 0.0
    total_wOBA = 0.0
    total_BBKPlus = 0.0

    is_location = None
    is_away = None
    if time_frames:
        for sub_time_frame in time_frames:
            for sub_sub_time_frame in sub_time_frame:
                if "Location" in sub_sub_time_frame["qualifiers"]:
                    if is_location != False:
                        is_location = True
                        if any("away" in qual_object["values"] and not qual_object["negate"] for qual_object in sub_sub_time_frame["qualifiers"]["Location"]) or any("home" in qual_object["values"] and qual_object["negate"] for qual_object in sub_sub_time_frame["qualifiers"]["Location"]):
                            if is_away != False:
                                is_away = True
                            else:
                                is_location = False
                        else:
                            if is_away != True:
                                is_away = False
                            else:
                                is_location = False
                else:
                    is_location = False
    
    has_live = False
    for row_data in all_rows:
        if row_data["Year"] == current_season and not show_title_current_season and not row_data["is_playoffs"]:
            has_live = True
            break
    
    if not has_live:
        global totals
        global constants
        global park_factors
    else:
        totals = copy.deepcopy(totals)
        get_constant_data.get_totals(current_season, totals, log=False)

        constants = copy.deepcopy(constants)
        get_constant_data.get_constants(current_season, constants, log=False)

        park_factors = copy.deepcopy(park_factors)
        get_constant_data.get_park_factors(current_season, park_factors, log=False)

    total_woba_weight = data["AB"] + data["BB"] - data["IBB"] + data["SF"] + data["HBP"]
    total_bb_k_weight = data["SO"]
    total_sb_weight = data["SB"] + data["CS"]
    total_h_weight = data["H"]
    total_ab_weight = data["AB"]
    total_babip_weight = data["AB"] - data["SO"] - data["HR"]
    total_obp_weight = data["AB"] + data["BB"] + data["HBP"]
    if player_type["da_type"] == "Batter":
        total_wrcplus_weight = data["PA"]
        total_k_weight = data["PA"]
    else:
        total_wrcplus_weight = data["BF"]
        total_k_weight = data["BF"]
    if total_wrcplus_weight:

        yearly_woba_stats = {}

        for row_data in all_rows:
            try:
                year = row_data["Year"]
                team = row_data["Tm"]

                if player_type["da_type"] != "Batter" and year < 1916 and not row_data["is_playoffs"]:
                    continue
                year = str(year)
                constant_year = year
                if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                    constant_year = str(int(current_season) - 1)

                if not year in yearly_woba_stats:
                    yearly_woba_stats[year] = {}
                if not team in yearly_woba_stats[year]:
                    yearly_woba_stats[year][team] = {
                        "H" : 0,
                        "BB" : 0,
                        "BB_SO" : 0,
                        "SO" : 0,
                        "IBB" : 0,
                        "HBP" : 0,
                        "1B" : 0,
                        "2B" : 0,
                        "3B" : 0,
                        "HR" : 0,
                        "PA" : 0,
                        "AB" : 0,
                        "SF" : 0,
                        "SB" : 0,
                        "CS" : 0,
                        "TmLg" : row_data["TmLg"]
                    }

                yearly_woba_stats[year][team]["BB"] += row_data.get("BB", 0)
                yearly_woba_stats[year][team]["BB_SO"] += row_data.get("BB", 0)
                yearly_woba_stats[year][team]["SO"] += row_data.get("SO", 0)
                yearly_woba_stats[year][team]["IBB"] += row_data.get("IBB", 0) if int(constant_year) >= 1955 else 0
                yearly_woba_stats[year][team]["HBP"] += row_data.get("HBP", 0)
                yearly_woba_stats[year][team]["1B"] += row_data.get("H", 0) - (row_data.get("2B", 0) + row_data.get("3B", 0) + row_data.get("HR", 0))
                yearly_woba_stats[year][team]["2B"] += row_data.get("2B", 0)
                yearly_woba_stats[year][team]["3B"] += row_data.get("3B", 0)
                yearly_woba_stats[year][team]["HR"] += row_data.get("HR", 0)
                yearly_woba_stats[year][team]["H"] += row_data.get("H", 0)
                yearly_woba_stats[year][team]["PA"] += row_data.get("PA", 0) if player_type["da_type"] == "Batter" else row_data.get("BF", 0)
                yearly_woba_stats[year][team]["AB"] += row_data.get("AB", 0)
                yearly_woba_stats[year][team]["SF"] += row_data.get("SF", 0)
                yearly_woba_stats[year][team]["SB"] += row_data.get("SB", 0)
                yearly_woba_stats[year][team]["CS"] += row_data.get("CS", 0)
            except ZeroDivisionError:
                pass


        if data["SO"]:
            season_index = 0
            for year in yearly_woba_stats:
                for team in yearly_woba_stats[year]:
                    if not yearly_woba_stats[year][team]["SO"]:
                        nearest_match = {}
                        sub_season_index = 0
                        for sub_year in yearly_woba_stats:
                            for sub_team in yearly_woba_stats[sub_year]:
                                if yearly_woba_stats[sub_year][sub_team]["SO"]:
                                    if not nearest_match or abs(sub_season_index - season_index) <= abs(nearest_match["index"] - season_index):
                                        nearest_match = {
                                            "index" : sub_season_index,
                                            "year" : sub_year,
                                            "team" : sub_team
                                        }
                                sub_season_index += 1
                        if nearest_match:
                            yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["BB_SO"] += yearly_woba_stats[year][team]["BB_SO"]
                    season_index += 1

        for year in yearly_woba_stats:
            constant_year = year
            if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                constant_year = str(int(current_season) - 1)
            for team in yearly_woba_stats[year]:
                sleague = yearly_woba_stats[year][team]["TmLg"]
                if team not in park_factors[constant_year]:
                    total_wrcplus_weight -= yearly_woba_stats[year][team]["PA"]
                    total_sb_weight -= yearly_woba_stats[year][team]["SB"] + yearly_woba_stats[year][team]["CS"]
                    total_k_weight -= yearly_woba_stats[year][team]["PA"]
                    total_babip_weight -= yearly_woba_stats[year][team]["AB"] - yearly_woba_stats[year][team]["SO"] - yearly_woba_stats[year][team]["HR"]
                    total_obp_weight -= yearly_woba_stats[year][team]["AB"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["HBP"]
                    total_bb_k_weight - yearly_woba_stats[year][team]["SO"]
                    total_h_weight -= yearly_woba_stats[year][team]["H"]
                    total_ab_weight -= yearly_woba_stats[year][team]["AB"]
                    total_woba_weight -= yearly_woba_stats[year][team]["AB"] + yearly_woba_stats[year][team]["BB"] - yearly_woba_stats[year][team]["IBB"] + yearly_woba_stats[year][team]["SF"] + yearly_woba_stats[year][team]["HBP"]
                else:
                    if int(year) < 1913 and (sleague == "AL" or int(year) < 1910):
                        total_k_weight -= yearly_woba_stats[year][team]["PA"]
                        total_babip_weight -= yearly_woba_stats[year][team]["AB"] - yearly_woba_stats[year][team]["SO"] - yearly_woba_stats[year][team]["HR"]
                    
                    if int(year) < 1920:
                        total_sb_weight -= yearly_woba_stats[year][team]["SB"] + yearly_woba_stats[year][team]["CS"]
                    
        for year in yearly_woba_stats:
            constant_year = year
            if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                constant_year = str(int(current_season) - 1)

            for team in yearly_woba_stats[year]:
                if team not in park_factors[constant_year]:
                    continue

                sleague = yearly_woba_stats[year][team]["TmLg"]

                park_factor = park_factors[constant_year][team]["Basic (5yr)"]
                if is_location:
                    if is_away:
                        park_factor = 100
                    else:
                        park_factor_diff = park_factors[constant_year][team]["Basic (5yr)"] - 100
                        park_factor = park_factors[constant_year][team]["Basic (5yr)"] + park_factor_diff

                wOBA = 0.0
                try:
                    wOBA = ((constants[constant_year]["wBB"] * (yearly_woba_stats[year][team]["BB"] - (yearly_woba_stats[year][team]["IBB"] if int(constant_year) >= 1955 else 0))) + (constants[constant_year]["wHBP"] * yearly_woba_stats[year][team]["HBP"]) + (constants[constant_year]["w1B"] * yearly_woba_stats[year][team]["1B"]) + (constants[constant_year]["w2B"] * yearly_woba_stats[year][team]["2B"]) + (constants[constant_year]["w3B"] * yearly_woba_stats[year][team]["3B"]) + (constants[constant_year]["wHR"] * yearly_woba_stats[year][team]["HR"])) / (yearly_woba_stats[year][team]["AB"] + yearly_woba_stats[year][team]["BB"] - (yearly_woba_stats[year][team]["IBB"] if int(constant_year) >= 1955 else 0) + yearly_woba_stats[year][team]["SF"] + yearly_woba_stats[year][team]["HBP"])
                except ZeroDivisionError:
                    pass
                lgwOBA = ((constants[constant_year]["wBB"] * (totals["MLB"]["Batter"][constant_year]["BB"] - (totals["MLB"]["Batter"][constant_year]["IBB"] if int(constant_year) >= 1955 else 0))) + (constants[constant_year]["wHBP"] * totals["MLB"]["Batter"][constant_year]["HBP"]) + (constants[constant_year]["w1B"] * (totals["MLB"]["Batter"][constant_year]["H"] - (totals["MLB"]["Batter"][constant_year]["2B"] + totals["MLB"]["Batter"][constant_year]["3B"] + totals["MLB"]["Batter"][constant_year]["HR"]))) + (constants[constant_year]["w2B"] * totals["MLB"]["Batter"][constant_year]["2B"]) + (constants[constant_year]["w3B"] * totals["MLB"]["Batter"][constant_year]["3B"]) + (constants[constant_year]["wHR"] * totals["MLB"]["Batter"][constant_year]["HR"])) / (totals["MLB"]["Batter"][constant_year]["AB"] + totals["MLB"]["Batter"][constant_year]["BB"] - (totals["MLB"]["Batter"][constant_year]["IBB"] if int(constant_year) >= 1955 else 0) + (totals["MLB"]["Batter"][constant_year]["SF"] if int(constant_year) >= 1954 else 0) + totals["MLB"]["Batter"][constant_year]["HBP"])

                wRAA = ((wOBA - lgwOBA) / constants[constant_year]["wOBAScale"]) * yearly_woba_stats[year][team]["PA"] 
                total_wRAA += wRAA

                lgRPA = totals["MLB"]["Batter"][constant_year]["R"] / totals["MLB"]["Batter"][constant_year]["PA"]

                wRC = (((wOBA - lgwOBA) / constants[constant_year]["wOBAScale"]) + lgRPA) * yearly_woba_stats[year][team]["PA"] 
                total_wRC += wRC

                bat = wRAA + (lgRPA - ((park_factor / 100) * lgRPA)) * yearly_woba_stats[year][team]["PA"]  + (lgRPA - ((totals[sleague]["Batter"][constant_year]["pitcherless_values"]["wRC"] / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"]))) * yearly_woba_stats[year][team]["PA"]
                total_bat += bat

                wRCPlus = ((wOBA - lgwOBA) / constants[constant_year]["wOBAScale"]) + lgRPA
                wRCPlus += lgRPA - ((park_factor / 100) * lgRPA)
                wRCPlus /= (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["wRC"] / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"])
                wRCPlus *= 100

                if wRCPlus < -100:
                    wRCPlus = -100

                woba_weight = yearly_woba_stats[year][team]["AB"] + yearly_woba_stats[year][team]["BB"] - yearly_woba_stats[year][team]["IBB"] + yearly_woba_stats[year][team]["SF"] + yearly_woba_stats[year][team]["HBP"]
                wrcplus_weight = yearly_woba_stats[year][team]["PA"]
        
                total_wRCPlus += wRCPlus * (wrcplus_weight / total_wrcplus_weight)

                try:
                    total_wOBA += wOBA * (woba_weight / total_woba_weight)
                except ZeroDivisionError:
                    pass

                league_total_singles = totals["MLB"]["Batter"][constant_year]["H"] - (totals["MLB"]["Batter"][constant_year]["2B"] + totals["MLB"]["Batter"][constant_year]["3B"] + totals["MLB"]["Batter"][constant_year]["HR"])

                lgwSB = ((totals["MLB"]["Batter"][constant_year]["SB"] * constants[constant_year]["runSB"]) + ((totals["MLB"]["Batter"][constant_year]["CS"] if "CS" in totals["MLB"]["Batter"][constant_year] else 0) * constants[constant_year]["runCS"])) / (league_total_singles + totals["MLB"]["Batter"][constant_year]["BB"] + totals["MLB"]["Batter"][constant_year]["HBP"] - (totals["MLB"]["Batter"][constant_year]["IBB"] if int(constant_year) >= 1955 else 0))
                wSB = (yearly_woba_stats[year][team]["SB"] * constants[constant_year]["runSB"]) + ((yearly_woba_stats[year][team]["CS"] if "CS" in totals["MLB"]["Batter"][constant_year] else 0) * constants[constant_year]["runCS"]) - (lgwSB * (yearly_woba_stats[year][team]["1B"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["HBP"] - (yearly_woba_stats[year][team]["IBB"] if int(constant_year) >= 1955 else 0)))
                total_wSB += wSB
                
                try:
                    avg = yearly_woba_stats[year][team]["H"] / yearly_woba_stats[year][team]["AB"]
                    league_avg = totals[sleague]["Batter"][constant_year]["pitcherless_values"]["H"] / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["AB"]
                    avg_plus = 100 + (((avg - league_avg) / league_avg) * 100)
                    total_AVGPlus += avg_plus * (yearly_woba_stats[year][team]["AB"] / total_ab_weight)
                except ZeroDivisionError:
                    pass
                
                try:
                    if int(year) >= 1954:
                        obp = (yearly_woba_stats[year][team]["H"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["HBP"]) / (yearly_woba_stats[year][team]["AB"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["HBP"] + yearly_woba_stats[year][team]["SF"])
                        league_obp = (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["H"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["BB"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HBP"]) / (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["AB"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["BB"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HBP"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["SF"])
                    else:
                        obp = (yearly_woba_stats[year][team]["H"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["HBP"]) / (yearly_woba_stats[year][team]["AB"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["HBP"])
                        league_obp = (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["H"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["BB"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HBP"]) / (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["AB"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["BB"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HBP"])
                    obp_plus = 100 + (((obp - league_obp) / league_obp) * 100)
                    total_OBPPlus += obp_plus * ((yearly_woba_stats[year][team]["AB"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["HBP"]) / total_obp_weight)
                except ZeroDivisionError:
                    pass

                total_bases = yearly_woba_stats[year][team]["1B"] + (yearly_woba_stats[year][team]["2B"] * 2) + (yearly_woba_stats[year][team]["3B"] * 3) + (yearly_woba_stats[year][team]["HR"] * 4)
                league_total_bases = totals[sleague]["Batter"][constant_year]["pitcherless_values"]["1B"] + (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["2B"] * 2) + (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["3B"] * 3) + (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"] * 4)

                try:
                    slg = (total_bases / yearly_woba_stats[year][team]["AB"])
                    league_slg = (league_total_bases / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["AB"])
                    slg_plus = 100 + (((slg - league_slg) / league_slg) * 100)
                    total_SLGPlus += slg_plus * (yearly_woba_stats[year][team]["AB"] / total_ab_weight)
                except ZeroDivisionError:
                    pass

                if int(year) >= 1910 and (sleague == "NL" or int(year) >= 1913):
                    try:
                        k_per = yearly_woba_stats[year][team]["SO"] / yearly_woba_stats[year][team]["PA"]
                        league_k_per = totals[sleague]["Batter"][constant_year]["pitcherless_values"]["SO"] / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"]
                        k_plus = 100 + (((k_per - league_k_per) / league_k_per) * 100)
                        total_KPlus += k_plus * (yearly_woba_stats[year][team]["PA"] / total_k_weight)
                    except ZeroDivisionError:
                        pass

                try:
                    bb_per = yearly_woba_stats[year][team]["BB"] / yearly_woba_stats[year][team]["PA"]
                    league_bb_per = totals[sleague]["Batter"][constant_year]["pitcherless_values"]["BB"] / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"]
                    bb_plus = 100 + (((bb_per - league_bb_per) / league_bb_per) * 100)
                    total_BBPlus += bb_plus * (wrcplus_weight / total_wrcplus_weight)
                except ZeroDivisionError:
                    pass

                try:
                    hr_per = yearly_woba_stats[year][team]["HR"] / yearly_woba_stats[year][team]["PA"]
                    league_hr_per = totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"] / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"]
                    hr_plus = 100 + (((hr_per - league_hr_per) / league_hr_per) * 100)
                    total_HRPlus += hr_plus * (wrcplus_weight / total_wrcplus_weight)
                except ZeroDivisionError:
                    pass

                if int(year) >= 1910 and (sleague == "NL" or int(year) >= 1913):
                    try:
                        tto_per = (yearly_woba_stats[year][team]["HR"] + yearly_woba_stats[year][team]["BB"] + yearly_woba_stats[year][team]["SO"]) / yearly_woba_stats[year][team]["PA"]
                        league_tto_per = (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["BB"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["SO"]) / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"]
                        tto_plus = 100 + (((tto_per - league_tto_per) / league_tto_per) * 100)
                        total_TTOPlus += tto_plus * (yearly_woba_stats[year][team]["PA"] / total_k_weight)
                    except ZeroDivisionError:
                        pass

                try:
                    player_xbh = yearly_woba_stats[year][team]["2B"] + yearly_woba_stats[year][team]["3B"] + yearly_woba_stats[year][team]["HR"]
                    league_xbh = totals[sleague]["Batter"][constant_year]["pitcherless_values"]["2B"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["3B"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"]
                    
                    xbh_per = player_xbh / yearly_woba_stats[year][team]["PA"]
                    league_xbh_per = league_xbh / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["PA"]
                    xbh_plus = 100 + (((xbh_per - league_xbh_per) / league_xbh_per) * 100)
                    total_XBHPlus += xbh_plus * (wrcplus_weight / total_wrcplus_weight)
                except ZeroDivisionError:
                    pass

                try:
                    player_xbh = yearly_woba_stats[year][team]["2B"] + yearly_woba_stats[year][team]["3B"] + yearly_woba_stats[year][team]["HR"]
                    league_xbh = totals[sleague]["Batter"][constant_year]["pitcherless_values"]["2B"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["3B"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"]

                    xh_per = player_xbh / yearly_woba_stats[year][team]["H"]
                    league_xh_per = league_xbh / totals[sleague]["Batter"][constant_year]["pitcherless_values"]["H"]
                    xh_plus = 100 + (((xh_per - league_xh_per) / league_xh_per) * 100)
                    total_XHPlus += xh_plus * (yearly_woba_stats[year][team]["H"] / total_h_weight)
                except ZeroDivisionError:
                    pass

                if int(year) >= 1910 and (sleague == "NL" or int(year) >= 1913) and yearly_woba_stats[year][team]["PA"]:
                    try:
                        bbmk_per = bb_per - k_per
                        if bbmk_per:
                            league_bbmk_per = league_bb_per - league_k_per
                            bbmk_per_plus = 100 + (((bbmk_per - league_bbmk_per) / abs(league_bbmk_per)) * 100)
                            total_BBMKPlus += bbmk_per_plus * (yearly_woba_stats[year][team]["PA"] / total_k_weight)
                    except ZeroDivisionError:
                        pass

                if yearly_woba_stats[year][team]["AB"] and totals[sleague]["Batter"][constant_year]["pitcherless_values"]["AB"]:
                    iso = slg - avg
                    league_iso = league_slg - league_avg
                    iso_plus = 100 + (((iso - league_iso) / league_iso) * 100)
                    total_ISOPlus += iso_plus * (yearly_woba_stats[year][team]["AB"] / total_ab_weight)

                if int(year) >= 1910 and (sleague == "NL" or int(year) >= 1913):
                    try:
                        if int(year) >= 1954:
                            babip = (yearly_woba_stats[year][team]["H"] - yearly_woba_stats[year][team]["HR"]) / (yearly_woba_stats[year][team]["AB"] - yearly_woba_stats[year][team]["SO"] - yearly_woba_stats[year][team]["HR"] + yearly_woba_stats[year][team]["SF"])
                            league_babip = (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["H"] - totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"]) / (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["AB"] - totals[sleague]["Batter"][constant_year]["pitcherless_values"]["SO"] - totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"] + totals[sleague]["Batter"][constant_year]["pitcherless_values"]["SF"])
                        else:
                            babip = (yearly_woba_stats[year][team]["H"] - yearly_woba_stats[year][team]["HR"]) / (yearly_woba_stats[year][team]["AB"] - yearly_woba_stats[year][team]["SO"] - yearly_woba_stats[year][team]["HR"])
                            league_babip = (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["H"] - totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"]) / (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["AB"] - totals[sleague]["Batter"][constant_year]["pitcherless_values"]["SO"] - totals[sleague]["Batter"][constant_year]["pitcherless_values"]["HR"])
                        babip_plus = 100 + (((babip - league_babip) / league_babip) * 100)
                        total_BABIPPlus += babip_plus * ((yearly_woba_stats[year][team]["AB"] - yearly_woba_stats[year][team]["SO"] - yearly_woba_stats[year][team]["HR"]) / total_babip_weight)
                    except ZeroDivisionError:
                        pass

                if int(year) >= 1910 and (sleague == "NL" or int(year) >= 1913):
                    try:
                        bbk = (yearly_woba_stats[year][team]["BB_SO"]) / (yearly_woba_stats[year][team]["SO"])
                        league_bbk = (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["BB"]) / (totals[sleague]["Batter"][constant_year]["pitcherless_values"]["SO"])
                        bbk_plus = 100 + (((bbk - league_bbk) / league_bbk) * 100)
                        total_BBKPlus += bbk_plus * (yearly_woba_stats[year][team]["SO"] / total_bb_k_weight)
                    except ZeroDivisionError:
                        pass

        data["wSB"] = total_wSB
        data["wRC"] = total_wRC
        data["wRAA"] = total_wRAA
        data["BRuns"] = total_bat
        data["wRC+"] = total_wRCPlus
        data["OBP+"] = total_OBPPlus
        data["SO%+"] = total_KPlus
        data["BB%+"] = total_BBPlus
        data["HR%+"] = total_HRPlus
        data["TTO%+"] = total_TTOPlus
        data["XBH%+"] = total_XBHPlus
        data["X/H%+"] = total_XHPlus
        data["BB-SO%+"] = total_BBMKPlus
        data["BA+"] = total_AVGPlus
        data["SLG+"] = total_SLGPlus
        data["ISO+"] = total_ISOPlus
        data["BAbip+"] = total_BABIPPlus
        if data["SO"]:
            data["BB/SO+"] = total_BBKPlus
        else:
            if data["BB"]:
                data["BB/SO+"] = math.inf
        data["wOBA"] = total_wOBA

    if player_type["da_type"] != "Batter":
        total_OBPPlus = 0
        total_KPlus = 0
        total_BBPlus = 0
        total_HRPlus = 0.0
        total_TTOPlus = 0.0
        total_XBHPlus = 0.0
        total_XHPlus = 0.0
        total_BBMKPlus = 0.0
        total_KMBBPlus = 0.0
        total_AVGPlus = 0
        total_SLGPlus = 0
        total_ISOPlus = 0
        total_BABIPPlus = 0
        total_BBKPlus = 0
        
        total_wrcplus_weight = data["BF"]

        data["OBP+"] = 0
        data["SO%+"] = 0
        data["BB%+"] = 0
        data["HR%+"] = 0
        data["TTO%+"] = 0
        data["XBH%+"] = 0
        data["X/H%+"] = 0
        data["BB-SO%+"] = 0
        data["SO-BB%+"] = 0
        data["BA+"] = 0
        data["SLG+"] = 0
        data["ISO+"] = 0
        data["BAbip+"] = 0
        data["BB/SO+"] = 0

        if total_wrcplus_weight:
            total_FIP = 0.0
            total_fip_weight = data["IP"]
            total_ERAMinus = 0.0
            total_eraminus_weight = data["IP"]
            total_FIPMinus = 0.0
            total_fipminus_weight = data["IP"]
            total_K9Plus = 0.0
            total_BB9Plus = 0.0
            total_HR9Plus = 0.0
            total_H9Plus = 0.0
            total_KBBPlus = 0.0
            total_WHIPPlus = 0.0

            total_k_bb_weight = data["BB"]

            yearly_woba_stats = {}

            for row_data in all_rows:
                try:
                    if "G" in row_data:
                        year = row_data["Year"]
                        team = row_data["Tm"]
                        year = str(year)

                        if not year in yearly_woba_stats:
                            yearly_woba_stats[year] = {}
                        if not team in yearly_woba_stats[year]:
                            yearly_woba_stats[year][team] = {
                                "H" : 0,
                                "H_IP" : 0,
                                "H_IP_ER" : 0,
                                "IP" : 0,
                                "ER" : 0,
                                "HR" : 0,
                                "HBP" : 0,
                                "BB" : 0,
                                "SO" : 0,
                                "SO_BB" : 0,
                                "BF" : 0,
                                "SF" : 0,
                                "ER_IP" : 0,
                                "HR_IP" : 0,
                                "HBP_IP" : 0,
                                "BB_IP" : 0,
                                "SO_IP" : 0,
                                "SF_IP" : 0,
                                "ER_IP_ER" : 0,
                                "HR_IP_ER" : 0,
                                "HBP_IP_ER" : 0,
                                "BB_IP_ER" : 0,
                                "SO_IP_ER" : 0,
                                "SF_IP_ER" : 0,
                                "TmLg" : row_data["TmLg"]
                            }

                        yearly_woba_stats[year][team]["IP"] += row_data.get("IP", 0)
                        yearly_woba_stats[year][team]["H"] += row_data.get("H", 0)
                        yearly_woba_stats[year][team]["H_IP"] += row_data.get("H", 0)
                        yearly_woba_stats[year][team]["H_IP_ER"] += row_data.get("H", 0)
                        yearly_woba_stats[year][team]["ER"] += row_data.get("ER", 0)
                        yearly_woba_stats[year][team]["HR"] += row_data.get("HR", 0)
                        yearly_woba_stats[year][team]["HBP"] += row_data.get("HBP", 0)
                        yearly_woba_stats[year][team]["BB"] += row_data.get("BB", 0)
                        yearly_woba_stats[year][team]["SO"] += row_data.get("SO", 0)
                        yearly_woba_stats[year][team]["SO_BB"] += row_data.get("SO", 0)
                        yearly_woba_stats[year][team]["BF"] += row_data.get("BF", 0)
                        yearly_woba_stats[year][team]["SF"] += row_data.get("SF", 0)
                        yearly_woba_stats[year][team]["ER_IP"] += row_data.get("ER", 0)
                        yearly_woba_stats[year][team]["HR_IP"] += row_data.get("HR", 0)
                        yearly_woba_stats[year][team]["HBP_IP"] += row_data.get("HBP", 0)
                        yearly_woba_stats[year][team]["BB_IP"] += row_data.get("BB", 0)
                        yearly_woba_stats[year][team]["SO_IP"] += row_data.get("SO", 0)
                        yearly_woba_stats[year][team]["SF_IP"] += row_data.get("SF", 0)
                        yearly_woba_stats[year][team]["ER_IP_ER"] += row_data.get("ER", 0)
                        yearly_woba_stats[year][team]["HR_IP_ER"] += row_data.get("HR", 0)
                        yearly_woba_stats[year][team]["HBP_IP_ER"] += row_data.get("HBP", 0)
                        yearly_woba_stats[year][team]["BB_IP_ER"] += row_data.get("BB", 0)
                        yearly_woba_stats[year][team]["SO_IP_ER"] += row_data.get("SO", 0)
                        yearly_woba_stats[year][team]["SF_IP_ER"] += row_data.get("SF", 0)
                except ZeroDivisionError:
                    pass

            for year in yearly_woba_stats:
                for team in yearly_woba_stats[year]:
                    frac, whole = math.modf(yearly_woba_stats[year][team]["IP"])
                    frac = round_value(frac, 1)
                    yearly_woba_stats[year][team]["IP"] = whole
                    if frac == 0.3:
                        yearly_woba_stats[year][team]["IP"] += 1/3
                    elif frac == 0.7:
                        yearly_woba_stats[year][team]["IP"] += 2/3
                    elif frac == 1.0:
                        yearly_woba_stats[year][team]["IP"] += 1

            real_yearly_woba_stats = {}
            for year in yearly_woba_stats:
                real_yearly_woba_stats[year] = {}
                constant_year = year
                if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                    constant_year = str(int(current_season) - 1)
                for team in yearly_woba_stats[year]:
                    if team not in park_factors[constant_year]:
                        continue
                    for key in yearly_woba_stats[year][team]:
                        if key != "TmLg":
                            if key not in real_yearly_woba_stats[year]:
                                real_yearly_woba_stats[year][key] = 0
                            real_yearly_woba_stats[year][key] += yearly_woba_stats[year][team][key]

            if data["BB"]:
                season_index = 0
                for year in yearly_woba_stats:
                    for team in yearly_woba_stats[year]:
                        if not yearly_woba_stats[year][team]["BB"]:
                            nearest_match = {}
                            sub_season_index = 0
                            for sub_year in yearly_woba_stats:
                                for sub_team in yearly_woba_stats[sub_year]:
                                    if yearly_woba_stats[sub_year][sub_team]["BB"]:
                                        if not nearest_match or abs(sub_season_index - season_index) <= abs(nearest_match["index"] - season_index):
                                            nearest_match = {
                                                "index" : sub_season_index,
                                                "year" : sub_year,
                                                "team" : sub_team
                                            }
                                    sub_season_index += 1
                            if nearest_match:
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["SO_BB"] += yearly_woba_stats[year][team]["SO_BB"]
                        season_index += 1

            if data["IP"]:
                season_index = 0
                for year in yearly_woba_stats:
                    for team in yearly_woba_stats[year]:
                        if not yearly_woba_stats[year][team]["IP"]:
                            nearest_match = {}
                            sub_season_index = 0
                            for sub_year in yearly_woba_stats:
                                for sub_team in yearly_woba_stats[sub_year]:
                                    if yearly_woba_stats[sub_year][sub_team]["IP"]:
                                        if not nearest_match or abs(sub_season_index - season_index) <= abs(nearest_match["index"] - season_index):
                                            nearest_match = {
                                                "index" : sub_season_index,
                                                "year" : sub_year,
                                                "team" : sub_team
                                            }
                                    sub_season_index += 1
                            if nearest_match:
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["H_IP"] += yearly_woba_stats[year][team]["H_IP"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["ER_IP"] += yearly_woba_stats[year][team]["ER_IP"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["HR_IP"] += yearly_woba_stats[year][team]["HR_IP"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["HBP_IP"] += yearly_woba_stats[year][team]["HBP_IP"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["BB_IP"] += yearly_woba_stats[year][team]["BB_IP"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["SO_IP"] += yearly_woba_stats[year][team]["SO_IP"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["SF_IP"] += yearly_woba_stats[year][team]["SF_IP"]
                        season_index += 1
            
            if data["IP"]:
                season_index = 0
                for year in yearly_woba_stats:
                    constant_year = year
                    if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                        constant_year = str(int(current_season) - 1)
                    for team in yearly_woba_stats[year]:
                        if team not in park_factors[constant_year]:
                            continue
                        if not yearly_woba_stats[year][team]["IP"]:
                            nearest_match = {}
                            sub_season_index = 0
                            for sub_year in yearly_woba_stats:
                                constant_year = sub_year
                                if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                                    constant_year = str(int(current_season) - 1)
                                for sub_team in yearly_woba_stats[sub_year]:
                                    if sub_team not in park_factors[constant_year]:
                                        continue
                                    if yearly_woba_stats[sub_year][sub_team]["IP"]:
                                        if not nearest_match or abs(sub_season_index - season_index) <= abs(nearest_match["index"] - season_index):
                                            nearest_match = {
                                                "index" : sub_season_index,
                                                "year" : sub_year,
                                                "team" : sub_team
                                            }
                                    sub_season_index += 1
                            if nearest_match:
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["H_IP_ER"] += yearly_woba_stats[year][team]["H_IP_ER"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["ER_IP_ER"] += yearly_woba_stats[year][team]["ER_IP_ER"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["HR_IP_ER"] += yearly_woba_stats[year][team]["HR_IP_ER"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["HBP_IP_ER"] += yearly_woba_stats[year][team]["HBP_IP_ER"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["BB_IP_ER"] += yearly_woba_stats[year][team]["BB_IP_ER"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["SO_IP_ER"] += yearly_woba_stats[year][team]["SO_IP_ER"]
                                yearly_woba_stats[nearest_match["year"]][nearest_match["team"]]["SF_IP_ER"] += yearly_woba_stats[year][team]["SF_IP_ER"]
                        season_index += 1

            if data["IP"]:
                season_index = 0
                for year in real_yearly_woba_stats:
                    if real_yearly_woba_stats[year] and not real_yearly_woba_stats[year]["IP"]:
                        nearest_match = {}
                        sub_season_index = 0
                        for sub_year in real_yearly_woba_stats:
                            if real_yearly_woba_stats[sub_year] and real_yearly_woba_stats[sub_year]["IP"]:
                                if not nearest_match or abs(sub_season_index - season_index) <= abs(nearest_match["index"] - season_index):
                                    nearest_match = {
                                        "index" : sub_season_index,
                                        "year" : sub_year
                                    }
                            sub_season_index += 1
                        if nearest_match:
                            real_yearly_woba_stats[nearest_match["year"]]["H_IP"] += real_yearly_woba_stats[year]["H_IP"]
                            real_yearly_woba_stats[nearest_match["year"]]["ER_IP"] += real_yearly_woba_stats[year]["ER_IP"]
                            real_yearly_woba_stats[nearest_match["year"]]["HR_IP"] += real_yearly_woba_stats[year]["HR_IP"]
                            real_yearly_woba_stats[nearest_match["year"]]["HBP_IP"] += real_yearly_woba_stats[year]["HBP_IP"]
                            real_yearly_woba_stats[nearest_match["year"]]["BB_IP"] += real_yearly_woba_stats[year]["BB_IP"]
                            real_yearly_woba_stats[nearest_match["year"]]["SO_IP"] += real_yearly_woba_stats[year]["SO_IP"]
                            real_yearly_woba_stats[nearest_match["year"]]["SF_IP"] += real_yearly_woba_stats[year]["SF_IP"]
                    season_index += 1

            for year in yearly_woba_stats:
                constant_year = year
                if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                    constant_year = str(int(current_season) - 1)
                for team in yearly_woba_stats[year]:
                    if team not in park_factors[constant_year]:
                        total_fip_weight -= yearly_woba_stats[year][team]["IP"]
                        total_eraminus_weight -= yearly_woba_stats[year][team]["IP"]
                        total_fipminus_weight -= yearly_woba_stats[year][team]["IP"]
                        total_wrcplus_weight -= yearly_woba_stats[year][team]["BF"]
                        total_k_bb_weight -= yearly_woba_stats[year][team]["BB"]
                    elif int(year) < 1916:
                        total_wrcplus_weight -= yearly_woba_stats[year][team]["BF"]

            for year in real_yearly_woba_stats:
                constant_year = year
                if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                    constant_year = str(int(current_season) - 1)

                if data["IP"] and real_yearly_woba_stats[year]:
                    league_innings = totals["MLB"]["Pitcher"][constant_year]["IP"]
                    league_innings_split = str(league_innings).split(".")
                    league_innings = float(league_innings_split[0])
                    if league_innings_split[1] == "1":
                        league_innings += 1/3
                    elif league_innings_split[1] == "2":
                        league_innings += 2/3
                        
                    total_ERA = (9 * totals["MLB"]["Pitcher"][constant_year]["ER"]) / (league_innings)
                    cFIP = total_ERA - (((13 * totals["MLB"]["Pitcher"][constant_year]["HR"]) + (3 * (totals["MLB"]["Pitcher"][constant_year]["BB"] + totals["MLB"]["Pitcher"][constant_year]["HBP"])) - (2 * totals["MLB"]["Pitcher"][constant_year]["SO"])) / league_innings)

                    FIP = 0.0
                    fip_weight = real_yearly_woba_stats[year]["IP"]
                    try:
                        FIP = (((13 * real_yearly_woba_stats[year]["HR_IP"]) + (3 * (real_yearly_woba_stats[year]["HBP_IP"] + real_yearly_woba_stats[year]["BB_IP"])) - (2 * real_yearly_woba_stats[year]["SO_IP"])) / real_yearly_woba_stats[year]["IP"]) + cFIP
                    except ZeroDivisionError:
                        pass
                    total_FIP += FIP * (fip_weight / total_fip_weight)

            for year in yearly_woba_stats:
                constant_year = year
                if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                    constant_year = str(int(current_season) - 1)

                for team in yearly_woba_stats[year]:
                    if team not in park_factors[constant_year]:
                        continue

                    sleague = yearly_woba_stats[year][team]["TmLg"]
                    
                    park_factor = park_factors[constant_year][team]["Basic (5yr)"]
                    if park_factors[constant_year][team]["FIP"]:
                        fip_park_factor = park_factors[constant_year][team]["FIP"]
                    else:
                        fip_park_factor = park_factor

                    if is_location:
                        if is_away:
                            park_factor = 100
                            fip_park_factor = 100
                        else:
                            park_factor_diff = park_factors[constant_year][team]["Basic (5yr)"] - 100
                            park_factor = park_factors[constant_year][team]["Basic (5yr)"] + park_factor_diff

                            if park_factors[constant_year][team]["FIP"]: 
                                fip_park_factor_diff = park_factors[constant_year][team]["FIP"] - 100
                                fip_park_factor = park_factors[constant_year][team]["FIP"] + fip_park_factor_diff
                            else:
                                fip_park_factor = park_factor

                    if data["IP"]:
                        era = 0.0
                        try:
                            era = (9 * yearly_woba_stats[year][team]["ER_IP_ER"]) / yearly_woba_stats[year][team]["IP"]
                        except ZeroDivisionError:
                            pass

                        league_innings = totals["MLB"]["Pitcher"][constant_year]["IP"]
                        league_innings_split = str(league_innings).split(".")
                        league_innings = float(league_innings_split[0])
                        if league_innings_split[1] == "1":
                            league_innings += 1/3
                        elif league_innings_split[1] == "2":
                            league_innings += 2/3

                        s_league_innings = totals[sleague]["Pitcher"][constant_year]["IP"]
                        s_league_innings_split = str(s_league_innings).split(".")
                        s_league_innings = float(s_league_innings_split[0])
                        if s_league_innings_split[1] == "1":
                            s_league_innings += 1/3
                        elif s_league_innings_split[1] == "2":
                            s_league_innings += 2/3

                        sleagueEra = (9 * totals[sleague]["Pitcher"][constant_year]["ER"]) / s_league_innings

                        eraminus = era + (era - (era * (park_factor / 100)))
                        eraminus /= sleagueEra
                        eraminus *= 100

                        eraminus_weight = yearly_woba_stats[year][team]["IP"]
                        total_ERAMinus += eraminus * (eraminus_weight / total_eraminus_weight)

                        total_ERA = (9 * totals["MLB"]["Pitcher"][constant_year]["ER"]) / (league_innings)
                        cFIP = total_ERA - (((13 * totals["MLB"]["Pitcher"][constant_year]["HR"]) + (3 * (totals["MLB"]["Pitcher"][constant_year]["BB"] + totals["MLB"]["Pitcher"][constant_year]["HBP"])) - (2 * totals["MLB"]["Pitcher"][constant_year]["SO"])) / league_innings)

                        FIP = 0.0
                        fip_weight = yearly_woba_stats[year][team]["IP"]
                        try:
                            FIP = (((13 * yearly_woba_stats[year][team]["HR_IP"]) + (3 * (yearly_woba_stats[year][team]["HBP_IP"] + yearly_woba_stats[year][team]["BB_IP"])) - (2 * yearly_woba_stats[year][team]["SO_IP"])) / yearly_woba_stats[year][team]["IP"]) + cFIP
                        except ZeroDivisionError:
                            pass

                        sLeaugeFIP = (((13 * totals[sleague]["Pitcher"][constant_year]["HR"]) + (3 * (totals[sleague]["Pitcher"][constant_year]["HBP"] + totals[sleague]["Pitcher"][constant_year]["BB"])) - (2 * totals[sleague]["Pitcher"][constant_year]["SO"])) / s_league_innings) + cFIP

                        fipminus = FIP + (FIP - (FIP * (fip_park_factor / 100)))
                        fipminus /= sLeaugeFIP
                        fipminus *= 100

                        fipminus_weight = yearly_woba_stats[year][team]["IP"]
                        total_FIPMinus += fipminus * (fipminus_weight / total_fipminus_weight)

                        wrcplus_weight = yearly_woba_stats[year][team]["BF"]
                        
                        try:
                            whip = (yearly_woba_stats[year][team]["BB_IP"] + yearly_woba_stats[year][team]["H_IP"]) / (yearly_woba_stats[year][team]["IP"])
                            league_whip = (totals[sleague]["Pitcher"][constant_year]["BB"] + totals[sleague]["Pitcher"][constant_year]["H"]) / (totals[sleague]["Pitcher"][constant_year]["IP"])
                            whip_plus = 100 + (((whip - league_whip) / league_whip) * 100)
                            total_WHIPPlus += whip_plus * (eraminus_weight / total_eraminus_weight)
                        except ZeroDivisionError:
                            pass
                        
                        try:
                            k9 = (yearly_woba_stats[year][team]["SO_IP"] * 9) / (yearly_woba_stats[year][team]["IP"])
                            league_k9 = (totals[sleague]["Pitcher"][constant_year]["SO"] * 9) / (totals[sleague]["Pitcher"][constant_year]["IP"])
                            k9_plus = 100 + (((k9 - league_k9) / league_k9) * 100)
                            total_K9Plus += k9_plus * (eraminus_weight / total_eraminus_weight)
                        except ZeroDivisionError:
                            pass
                    
                        try:
                            bb9 = (yearly_woba_stats[year][team]["BB_IP"] * 9) / (yearly_woba_stats[year][team]["IP"])
                            league_bb9 = (totals[sleague]["Pitcher"][constant_year]["BB"] * 9) / (totals[sleague]["Pitcher"][constant_year]["IP"])
                            bb9_plus = 100 + (((bb9 - league_bb9) / league_bb9) * 100)
                            total_BB9Plus += bb9_plus * (eraminus_weight / total_eraminus_weight)
                        except ZeroDivisionError:
                            pass

                        try:
                            hr9 = (yearly_woba_stats[year][team]["HR_IP"] * 9) / (yearly_woba_stats[year][team]["IP"])
                            league_hr9 = (totals[sleague]["Pitcher"][constant_year]["HR"] * 9) / (totals[sleague]["Pitcher"][constant_year]["IP"])
                            hr9_plus = 100 + (((hr9 - league_hr9) / league_hr9) * 100)
                            total_HR9Plus += hr9_plus * (eraminus_weight / total_eraminus_weight)
                        except ZeroDivisionError:
                            pass

                        try:
                            h9 = (yearly_woba_stats[year][team]["H_IP"] * 9) / (yearly_woba_stats[year][team]["IP"])
                            league_h9 = (totals[sleague]["Pitcher"][constant_year]["H"] * 9) / (totals[sleague]["Pitcher"][constant_year]["IP"])
                            h9_plus = 100 + (((h9 - league_h9) / league_h9) * 100)
                            total_H9Plus += h9_plus * (eraminus_weight / total_eraminus_weight)
                        except ZeroDivisionError:
                            pass

                    try:
                        kbb = (yearly_woba_stats[year][team]["SO_BB"]) / (yearly_woba_stats[year][team]["BB"])
                        league_kbb = (totals[sleague]["Pitcher"][constant_year]["SO"]) / (totals[sleague]["Pitcher"][constant_year]["BB"])
                        kbb_plus = 100 + (((kbb - league_kbb) / league_kbb) * 100)
                        total_KBBPlus += kbb_plus * (yearly_woba_stats[year][team]["BB"] / total_k_bb_weight)
                    except ZeroDivisionError:
                        pass

                    if int(year) >= 1916:
                        try:
                            hr_per = yearly_woba_stats[year][team]["HR"] / yearly_woba_stats[year][team]["BF"]
                            league_hr_per = totals[sleague]["Pitcher"][constant_year]["HR"] / totals[sleague]["Pitcher"][constant_year]["TBF"]
                            hr_plus = 100 + (((hr_per - league_hr_per) / league_hr_per) * 100)
                            total_HRPlus += hr_plus * (wrcplus_weight / total_wrcplus_weight)
                        except ZeroDivisionError:
                            pass

                        try:
                            k_per = yearly_woba_stats[year][team]["SO"] / yearly_woba_stats[year][team]["BF"]
                            league_k_per = totals[sleague]["Pitcher"][constant_year]["SO"] / totals[sleague]["Pitcher"][constant_year]["TBF"]
                            k_plus = 100 + (((k_per - league_k_per) / league_k_per) * 100)
                            total_KPlus += k_plus * (wrcplus_weight / total_wrcplus_weight)
                        except ZeroDivisionError:
                            pass

                        try:
                            bb_per = yearly_woba_stats[year][team]["BB"] / yearly_woba_stats[year][team]["BF"]
                            league_bb_per = totals[sleague]["Pitcher"][constant_year]["BB"] / totals[sleague]["Pitcher"][constant_year]["TBF"]
                            bb_plus = 100 + (((bb_per - league_bb_per) / league_bb_per) * 100)
                            total_BBPlus += bb_plus * (wrcplus_weight / total_wrcplus_weight)
                        except ZeroDivisionError:
                            pass


                        if yearly_woba_stats[year][team]["BF"]:
                            try:
                                kmbb_per = k_per - bb_per
                                if kmbb_per:
                                    league_kmbb_per = league_k_per - league_bb_per
                                    kmbb_per_plus = 100 + (((kmbb_per - league_kmbb_per) / abs(league_kmbb_per)) * 100)
                                    total_KMBBPlus += kmbb_per_plus * (wrcplus_weight / total_wrcplus_weight)
                            except ZeroDivisionError:
                                pass
            
            data["HR%+"] = total_HRPlus
            data["SO%+"] = total_KPlus
            data["BB%+"] = total_BBPlus
            data["SO-BB%+"] = total_KMBBPlus

            if data["BB"]:
                data["SO/BB+"] = total_KBBPlus
            else:
                if data["SO"]:
                    data["SO/BB+"] = math.inf

            if data["IP"]:
                data["FIP"] = total_FIP
                data["ERA-"] = total_ERAMinus
                data["FIP-"] = total_FIPMinus
                data["WHIP+"] = total_WHIPPlus
                data["SO9+"] = total_K9Plus
                data["BB9+"] = total_BB9Plus
                data["HR9+"] = total_HR9Plus
                data["H9+"] = total_H9Plus
            else:
                if data["ER"]:
                    data["ERA-"] = math.inf
                if data["HR"] or data["BB"] or data["HBP"]:
                    data["FIP"] = math.inf
                    data["FIP-"] = math.inf
                if data["BB"] or data["H"]:
                    data["WHIP+"] = math.inf
                if data["SO"]:
                    data["SO9+"] = math.inf
                if data["BB"]:
                    data["BB9+"] = math.inf
                if data["HR"]:
                    data["HR9+"] = math.inf
                if data["H"]:
                    data["H9+"] = math.inf

def calculate_formula(stat, player_data, player_type, formula, data, all_rows, safe_eval=False):
    if formula == "Special":
        if stat == "DaysOnEarth":
            value = 0
            if "Birthday" in player_data:
                if player_data["Birthday"]:
                    if player_data["Deathday"]:
                        value += (player_data["Deathday"] - player_data["Birthday"]).days
                    else:
                        value += (datetime.datetime.now().date() - player_data["Birthday"]).days
            else:
                for index, birthday in enumerate(player_data["stat_values"]["Birthdays"]):
                    if birthday:
                        death_day = player_data["stat_values"]["Deathdays"][index]
                        if death_day:
                            value += (death_day - birthday).days
                        else:
                            value += (datetime.datetime.now().date() - birthday).days
            return value
        elif stat == "DaysSpan":
            value = 0
            if "seperate_rows" in player_data["stat_values"]:
                for sub_rows in player_data["stat_values"]["seperate_rows"]:
                    if sub_rows:
                        first_date = min(row["Date"] for row in sub_rows)
                        last_date = max(row["Date"] for row in sub_rows)
                        if not isinstance(first_date, int):
                            value += (last_date - first_date).days
            else:
                if all_rows:
                    first_date = min(row["Date"] for row in all_rows)
                    last_date = max(row["Date"] for row in all_rows)
                    if not isinstance(first_date, int):
                        value = (last_date - first_date).days
            return value
        elif stat == "TmW":
            return calculate_team_win_losses(data, all_rows, "W")
        elif stat == "TmL":
            return calculate_team_win_losses(data, all_rows, "L")
        elif stat == "TmT":
            return calculate_team_win_losses(data, all_rows, "T")
        elif stat == "TmRec":
            if data["TmT"]:
                return str(data["TmW"]) + ":" + str(data["TmL"]) + ":" + str(data["TmT"])
            else:
                return str(data["TmW"]) + ":" + str(data["TmL"])
        elif stat == "TmScore":
            return data["Team Score"]
        elif stat == "OppScore":
            return data["Opponent Score"]
        elif stat == "Str%":
            if not all_rows:
                all_rows = [data]
            total_pitches = 0
            total_strikes = 0
            for row in all_rows:
                if "Year" not in row:
                    continue
                total_strikes += row.get("Str", 0)
                total_pitches += row.get("Pit", 0)
                if row["Year"] < 2017:
                    total_pitches -= row.get("IBB", 0) * 4
            if total_pitches <= 0:
                return 0
            return total_strikes / total_pitches
        elif stat == "Rdrs/yr":
            total_innings = 0
            total_drs = 0
            if not all_rows:
                all_rows = [data]
            for row in all_rows:
                if "Year" not in row:
                    continue
                if "Rdrs" in row:
                    total_drs += row["Rdrs"]
                if "Inn" in row and row["Year"] >= 2003:
                    total_innings += row["Inn"]
                if "Rdrs/yr" in row:
                    return row["Rdrs/yr"]
            
            if total_innings:
                return total_drs / (total_innings / 1200)
            else:
                return 0
            
            if total_innings:
                return total_drs / (total_innings / 1200)
            else:
                return 0
    elif formula == "MAX":
        max_value = 0
        all_rows = [data] if not all_rows else all_rows
        for row in all_rows:
            if stat in row and row[stat] > max_value:
                max_value = row[stat]
        return max_value
    elif formula == "MIN":
        max_value = float("inf")
        all_rows = [data] if not all_rows else all_rows
        for row in all_rows:
            if stat in row and row[stat] < max_value:
                max_value = row[stat]
        if max_value != float("inf"):
            return max_value
        else:
            return 0

    earliest_invalid_data = {}
    formula = formula.lower()

    formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula))
    
    if all_rows:
        data["all_rows"] = all_rows
        for sub_stat in data:
            if stat == "custom_formula" or (sub_stat != "Tm" and sub_stat != "Result" and sub_stat != "Entered" and sub_stat != "Exited" and sub_stat != "Pos" and sub_stat != "is_playoffs" and (not sub_stat in qualifier_map or sub_stat == "Team Score" or sub_stat == "Opponent Score")):
                calculate_earliest_invalid_data(sub_stat, player_type, data, formula, earliest_invalid_data, stat, formula_matches)

    for sub_stat in data:
        if stat == "custom_formula" or (sub_stat != "Tm" and sub_stat != "Result" and sub_stat != "Entered" and sub_stat != "Exited" and sub_stat != "Pos" and sub_stat != "is_playoffs" and (not sub_stat in qualifier_map or sub_stat == "Team Score" or sub_stat == "Opponent Score")):
            formula, formula_matches = replace_formula(data, sub_stat, formula, all_rows, earliest_invalid_data, player_type, stat, formula_matches)

    try:
        if safe_eval:
            val = float(numexpr.evaluate(formula))
        else:
            val = eval(formula)
        if val < 0 and "nonnegative" in headers[player_type["da_type"]][stat] and headers[player_type["da_type"]][stat]["nonnegative"]:
            if "isinf" in headers[player_type["da_type"]][stat]:
                for inf_stat in headers[player_type["da_type"]][stat]["isinf"].split("|"):
                    if data[inf_stat] != 0:
                        return math.inf
                return 0.0
            else:
                return 0.0
        return val
    except ZeroDivisionError:
        if "isinf" in headers[player_type["da_type"]][stat]:
            for inf_stat in headers[player_type["da_type"]][stat]["isinf"].split("|"):
                if data[inf_stat] != 0:
                    return math.inf
            return 0.0
        else:
            return 0.0
    except Exception:
        if stat == "custom_formula":
            raise CustomMessageException("Invalid formula!")
        else:
            raise

def calculate_earliest_invalid_data(stat, player_type, data, formula, earliest_invalid_data, real_stat, formula_matches):
    if real_stat in ["OBP", "BAbip"]:
        return

    has_match = False
    for formula_match in formula_matches:
        if formula_match.group() == stat.lower():
            has_match = True
            break
    
    if has_match:
        invalid_data = is_invalid_stat(stat, player_type, data, False)
        if invalid_data:
            for league in invalid_data:
                if league != "all_invalid":
                    if league not in earliest_invalid_data or invalid_data[league] > earliest_invalid_data[league]:
                        earliest_invalid_data[league] = invalid_data[league]
    elif real_stat == "custom_formula":
        new_stat = None
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and header_stat.lower() == stat.lower():
                new_stat = headers[player_type["da_type"]][header_stat]["display-value"].lower()
                break

        if new_stat:
            for formula_match in formula_matches:
                if formula_match.group() == new_stat.lower():
                    invalid_data = is_invalid_stat(stat, player_type, data, False)
                    if invalid_data:
                        for league in invalid_data:
                            if league != "all_invalid":
                                if league not in earliest_invalid_data or invalid_data[league] > earliest_invalid_data[league]:
                                    earliest_invalid_data[league] = invalid_data[league]
                    break

def replace_formula(data, stat, formula, all_rows, earliest_invalid_date, player_type, real_stat, formula_matches):
    value = data[stat]
    if not isinstance(value, numbers.Number) and real_stat != "custom_formula":
        return formula, formula_matches

    old_formula = formulas
    formula, formula_matches = perform_replacement(formula_matches, stat, value, formula, earliest_invalid_date, all_rows)

    if old_formula == formula and real_stat == "custom_formula":
        new_stat = None
        for header_stat in headers[player_type["da_type"]]:
            if "display-value" in headers[player_type["da_type"]][header_stat] and header_stat.lower() == stat.lower():
                new_stat = headers[player_type["da_type"]][header_stat]["display-value"].lower()
                break

        if new_stat:
            formula, formula_matches = perform_replacement(formula_matches, new_stat, value, formula, earliest_invalid_date, all_rows)

    return formula, formula_matches

def perform_replacement(formula_matches, stat, value, formula, earliest_invalid_date, all_rows):
    for formula_match in formula_matches:
        if formula_match.group() == stat.lower():
            if isinstance(value, numbers.Number):
                value = str(calculate_valid_value(stat, value, earliest_invalid_date, all_rows))
            span = formula_match.span()
            formula = formula[:span[0]] + value + formula[span[1]:]
            formula_matches = list(re.finditer(r"(?:(?:[A-Za-z_:~])\d?|\d?(?:[A-Za-z_:~]))+", formula))
            return perform_replacement(formula_matches, stat, value, formula, earliest_invalid_date, all_rows)
    
    return formula, formula_matches

def calculate_valid_value(stat, value, earliest_invalid_data, all_rows):
    if not earliest_invalid_data or not earliest_invalid_data["any_invalid"]:
        return value
    else:
        for row_data in all_rows:
            if stat in row_data and row_data[stat]:
                year = str(row_data["Year"])
                sleague = row_data["TmLg"]
                
                if sleague in earliest_invalid_data and int(year) < earliest_invalid_data[sleague]:
                    value = value - row_data[stat]
        return value
    
def calculate_war_7yr(player_data, all_rows, player_type, is_pitching_jaws):
    top_7_war = 0
    war_by_year = {}
    
    for row in all_rows:
        if "Year" in row:
            if not row["Year"] in war_by_year:
                war_by_year[row["Year"]] = 0

            if not is_pitching_jaws:
                war_by_year[row["Year"]] = round_value(war_by_year[row["Year"]] + row.get("RawWARPos", 0), 1)
            else:
                war_by_year[row["Year"]] = round_value(war_by_year[row["Year"]] + (row.get("RawWARPitch", 0) + row.get("RawWARPos", 0)), 1)
    
    for index, war_info in enumerate(sorted(war_by_year.items(), key=operator.itemgetter(1), reverse=True)):
        top_7_war += war_info[1]
        if index >= 6:
            break
            
    return top_7_war

def calculate_war_7yr_multiplayer(player_datas, player_type, is_pitching_jaws):
    top_7_war = 0

    all_wars = []
    for player_data in player_datas:
        for rows in player_data["seperate_rows"]:
            war_by_year = {}
            
            for row in rows:
                if "Year" in row:
                    if not row["Year"] in war_by_year:
                        war_by_year[row["Year"]] = 0

                    if not is_pitching_jaws:
                        war_by_year[row["Year"]] = round_value(war_by_year[row["Year"]] + row.get("RawWARPos", 0), 1)
                    else:
                        war_by_year[row["Year"]] = round_value(war_by_year[row["Year"]] + (row.get("RawWARPitch", 0) + row.get("RawWARPos", 0)), 1)
            
            all_wars += war_by_year.values()

    for index, war in enumerate(sorted(all_wars, reverse=True)):
        top_7_war += war
        if index >= 6:
            break
    
    return top_7_war

def calculate_manual_war_7yr(all_rows, player_data, player_type, time_frame, is_pitching_jaws):
    war_by_year = {}
    total_war = 0
    for row in all_rows:
        if perform_qualifier(player_data, player_type, row, time_frame, all_rows):
            if not row["Year"] in war_by_year:
                war_by_year[row["Year"]] = 0

            if not is_pitching_jaws:
                war_by_year[row["Year"]] += row.get("RawWARPos", 0)
                if "WARPos" in row:
                    total_war += row["WARPos"]
            else:
                war_by_year[row["Year"]] += row.get("RawWARPitch", 0) + row.get("RawWARPos", 0)
                if "WARPitch" in row:
                    total_war += row["WARPitch"]
                if "WARPos" in row:
                    total_war += row["WARPos"]
    
    if len(war_by_year) <= 7:
        return total_war
    
    years_to_sum = []
    top_7_war = 0
    for index, war_info in enumerate(sorted(war_by_year.items(), key=operator.itemgetter(1), reverse=True)):
        years_to_sum.append(str(war_info[0]))
        top_7_war += war_info[1]
        if index >= 6:
            break
    
    top_7_war = 0

    stat_sum_range = ",".join(years_to_sum) if len(years_to_sum) > 1 else list(years_to_sum)[0] + "-" + list(years_to_sum)[0]

    table_names = ["batting_value", "pitching_value"] if is_pitching_jaws else ["batting_value"]

    comments = None
    previous_headers = set()
    for table_index, table_name in enumerate(table_names):
        request = urllib.request.Request(sum_stats_format.format(player_data["id"], table_name, stat_sum_range), headers=request_headers)
        try:
            response, player_page = url_request(request)
        except urllib.error.HTTPError:
            raise

        table_name = "span_stats"

        table = player_page.find("table", id=table_name)
        if not table:
            if not comments:
                comments = player_page.find_all(string=lambda text: isinstance(text, Comment))
            for c in comments:
                temp_soup = BeautifulSoup(c, "lxml")
                temp_table = temp_soup.find("table", id=table_name)
                if temp_table:
                    table = temp_table
                    break

        if table:
            header_columns = table.find("thead").find_all("th")

            header_values = []
            for header in header_columns:
                contents = header.find(text=True)
                if contents:
                    header_values.append(str(contents))

            standard_table_rows = table.find("tbody").find_all("tr")

            for i in range(len(standard_table_rows)):
                row = standard_table_rows[i]

                row_year = row.find("th", {"data-stat" : "year_ID"})
                year_to_set = str(row_year.find(text=True)).split("-")[1]
                row_year.string = year_to_set

                row_data = parse_row(row, time_frame, False, False, player_type, header_values, previous_headers, table_index, table_names[table_index])
                
                if not row_data:
                    continue
                
                if stat_sum_range:
                    for pot_row in all_rows:
                        if pot_row["Year"] == row_data["Year"]:
                            if is_pitching_jaws:
                                if "WARPitch" in row_data:
                                    top_7_war += row_data["WARPitch"]
                                if "WARPos" in row_data:
                                    top_7_war += row_data["WARPos"]
                            else:
                                if "WARPos" in row_data:
                                    top_7_war += row_data["WARPos"]
                            break

    return top_7_war

def calculate_team_win_losses(data, all_rows, result):
    if not all_rows:
        all_rows = [data]

    result_count = 0
    for row in all_rows:
        if "Result" in row and row["Result"] == result:
            result_count += 1
    return result_count

def print_player_data(player_datas, player_type, highest_vals, lowest_vals, has_non_playoffs, debug_mode, extra_stats, has_one_player_games):
    html_info = {
        "player_image_url" : [],
        "tables" : []
    }
    all_unique_quals = True
    quals = None
    player_index = 0
    for index, player_data in enumerate(player_datas):
        if not player_data["stat_values"]["Raw Quals"] or player_data["stat_values"]["Raw Quals"] == "Query: ":
            continue
        player_index = index
        if not quals:
            quals = player_data["stat_values"]["Raw Quals"]
        if quals != player_data["stat_values"]["Raw Quals"]:
            all_unique_quals = False
            break

    ranges_str = ""
    for index, player_data in enumerate(player_datas):
        html_info["player_image_url"].append({"urls" : player_data["player_image_url"], "positions" : player_data["player_position"], "teams" : player_data["player_current_team"], "flags" : player_data["player_flag"], "numbers" : player_data["player_current_number"], "hofs" : player_data["player_hof"], "names" : player_data["stat_values"]["Player"], "ids" : player_data["ids"]})
        if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
            player_str = player_data["stat_values"]["Raw Player"]
        else:
            player_str = ""
            for index, player in enumerate(player_data["stat_values"]["Player"]):
                player_str += create_player_url_string(player, player_data["ids"][index], extra_stats)
                if index != len(player_data["stat_values"]["Player"]) - 1:
                    if player_data["add_type"] == "minus":
                        player_str += " DIFF "
                    else:
                        player_str += " + "

        has_one_player_missing = False
        missing_all_players = True
        for player in player_data["stat_values"]["Player"]:
            if player == "No Player Match!":
                has_one_player_missing = True
            else:
                missing_all_players = False

        player_search_str = ""
        if has_one_player_missing:
            player_search_str = " Searched Term: \"" + "+".join(player_data["stat_values"]["Search Term"]) + "\""

        ranges_str += player_str + player_search_str
        if missing_all_players:
            ranges_str += "\n"
        else:
            ranges_str += ": "  + player_data["stat_values"]["Raw Range"] + " " + player_data["stat_values"]["Raw Time"] + "\n"

        if not all_unique_quals:
            ranges_str += player_data["stat_values"]["Raw Quals"]
            if index != len(player_datas) - 1:
                ranges_str += "\n----------------------------------------\n"
    
    if all_unique_quals and player_datas[player_index]["stat_values"]["Raw Quals"] != "Query: ":
         ranges_str += "----------------------------------------\n" + player_datas[player_index]["stat_values"]["Raw Quals"]

    if debug_mode:
        logger.info("#" + str(threading.get_ident()) + "#   " + ranges_str)

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    rate_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") == "Per Game/Advanced", headers[player_type["da_type"]].items()))
    adjusted_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") == "Adjusted", headers[player_type["da_type"]].items()))
    defense_value_headers = collections.OrderedDict(filter(lambda header: (header[1].get("type") and header[1].get("type").startswith("Defense")), headers[player_type["da_type"]].items()))
    award_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") == "Awards/Honors", headers[player_type["da_type"]].items()))
    non_rate_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") != "Per Game/Advanced" and header[1].get("type") != "Adjusted" and not (header[1].get("type") and header[1].get("type").startswith("Defense")) and header[1].get("type") != "Awards/Honors", headers[player_type["da_type"]].items()))
    all_headers = {}
    if non_rate_headers:
        all_headers["Standard"] = non_rate_headers
    if rate_headers:
        if non_rate_headers and "Player" in non_rate_headers:
            if player_type["da_type"] != "Batter":
                rate_headers.update({"GS" : non_rate_headers["GS"]})
                rate_headers.move_to_end("GS", last=False)
            rate_headers.update({"G" : non_rate_headers["G"]})
            rate_headers.move_to_end("G", last=False)
            rate_headers.update({"Player" : non_rate_headers["Player"]})
            rate_headers.move_to_end("Player", last=False)
        all_headers["Per Game/Advanced"] = rate_headers
    if adjusted_headers:
        if non_rate_headers and "Player" in non_rate_headers:
            if player_type["da_type"] != "Batter":
                adjusted_headers.update({"GS" : non_rate_headers["GS"]})
                adjusted_headers.move_to_end("GS", last=False)
            adjusted_headers.update({"G" : non_rate_headers["G"]})
            adjusted_headers.move_to_end("G", last=False)
            adjusted_headers.update({"Player" : non_rate_headers["Player"]})
            adjusted_headers.move_to_end("Player", last=False)
        all_headers["Adjusted"] = adjusted_headers
    if defense_value_headers:
        has_season_stats = True
        for player_data in player_datas:
            if not player_data["has_season_stats"]:
                has_season_stats = False
                break
        if has_season_stats:
            if non_rate_headers and "Player" in non_rate_headers:
                defense_value_headers.update({"Seasons" : non_rate_headers["Seasons"]})
                defense_value_headers.move_to_end("Seasons", last=False)
                defense_value_headers.update({"Player" : non_rate_headers["Player"]})
                defense_value_headers.move_to_end("Player", last=False)
            all_headers["Defense/Value (Baseball Reference)"] = defense_value_headers
    if award_headers:
        has_award_stats = True
        for player_data in player_datas:
            if not player_data["has_award_stats"]:
                has_award_stats = False
                break
        if has_award_stats:
            has_playoffs = False
            has_reg_season = False
            for player_data in player_datas:
                if player_data["stat_values"]["is_playoffs"]:
                    if player_data["stat_values"]["is_playoffs"] == "Only":
                        has_playoffs = True
                    else:
                        has_reg_season = True
                else:
                    has_reg_season = True
            if has_playoffs and has_reg_season:
                has_award_stats = False
        if has_award_stats:
            if non_rate_headers and "Player" in non_rate_headers:
                award_headers.update({"Seasons" : non_rate_headers["Seasons"]})
                award_headers.move_to_end("Seasons", last=False)
                award_headers.update({"Player" : non_rate_headers["Player"]})
                award_headers.move_to_end("Player", last=False)
            all_headers["Awards/Honors"] = award_headers
    
    tables_to_skip = set()
    headers_to_skip = {}
    for over_header in all_headers:
        has_table_match = False
        if all_headers[over_header]:
            for header in all_headers[over_header]:
                has_header_match = False
                for index, player_data in enumerate(player_datas):
                    value = handle_table_data(over_header, player_data, player_datas, player_type, header, highest_vals, lowest_vals, index, has_non_playoffs, True, extra_stats)
                    if value != "N/A" and value != None:
                        if header != "BatBInk" and header != "BatGInk" and header != "PitchBInk" and header != "PitchGInk":
                            has_header_match = True
                        elif ordinal_to_number(value):
                            has_header_match = True
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                            if (over_header != "Awards/Honors" or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                has_table_match = True
                                break
                        else:
                            if ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                                if (over_header != "Awards/Honors" or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                    has_table_match = True
                                    break
                if not has_header_match:
                    if not over_header in headers_to_skip:
                        headers_to_skip[over_header] = set()
                    headers_to_skip[over_header].add(header)
        if not has_table_match:
            tables_to_skip.add(over_header)
    
    if player_type["da_type"] == "Batter":
        has_season_pitch_stats = False
        for player_data in player_datas:
            if player_data["has_season_pitch_stats"]:
                has_season_pitch_stats = True
                break
    
        if not has_season_pitch_stats:
            if not "Defense/Value (Baseball Reference)" in headers_to_skip:
                headers_to_skip["Defense/Value (Baseball Reference)"] = set()
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPos")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPitch")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPitch")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPos/Yr")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPitch/Yr")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPos/Yr")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPitch/Yr")

            if not seasons_leading:
                headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPos")

            if not "Awards/Honors" in headers_to_skip:
                headers_to_skip["Awards/Honors"] = set()
            if "Awards/Honors" in headers_to_skip:
                headers_to_skip["Awards/Honors"].add("BatBInk")
                headers_to_skip["Awards/Honors"].add("BatGInk")
                headers_to_skip["Awards/Honors"].add("PitchBInk")
                headers_to_skip["Awards/Honors"].add("PitchGInk")
    
    if "Awards/Honors" in headers_to_skip:
        if not (("BatBInk" not in headers_to_skip["Awards/Honors"] and "PitchBInk" not in headers_to_skip["Awards/Honors"]) or ("BatGInk" not in headers_to_skip["Awards/Honors"] and "PitchGInk" not in headers_to_skip["Awards/Honors"])):
            headers_to_skip["Awards/Honors"].add("PitchBInk")
            headers_to_skip["Awards/Honors"].add("BatBInk")
            headers_to_skip["Awards/Honors"].add("PitchGInk")
            headers_to_skip["Awards/Honors"].add("BatGInk")
        else:
            headers_to_skip["Awards/Honors"].discard("PitchBInk")
            headers_to_skip["Awards/Honors"].discard("BatBInk")
            headers_to_skip["Awards/Honors"].discard("PitchGInk")
            headers_to_skip["Awards/Honors"].discard("BatGInk")

    for over_header in headers_to_skip:
        for header in headers_to_skip[over_header]:
            if over_header in all_headers and header in all_headers[over_header]:
                del all_headers[over_header][header]
    
    for over_header in tables_to_skip:
        if over_header in all_headers:
            del all_headers[over_header]

    for over_header in all_headers:
        for extra_stat in extra_stats:
            if extra_stat.startswith("show-only-table-"):
                if "show-only-table-" + over_header.lower() not in extra_stats:
                    continue
        if "hide-table-" + over_header.lower() in extra_stats:
            continue
        if all_headers[over_header]:
            table = PrettyTable()
            field_names = []
            for header in all_headers[over_header]:
                if player_data["add_type"] == "minus":
                    if header == "TmRec":
                        if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                            continue
                if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header.lower() + ">" + header.lower() in extra_stats:
                    continue
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "hide-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "hide-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        continue
                for extra_stat in extra_stats:
                    if extra_stat.startswith("show-only-stat-"):
                        if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                            if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                                if not ("show-only-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats):
                                    if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                                        continue
                            else:
                                if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                                    continue
                override_show = False
                if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats:
                    override_show = True
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "show-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        override_show = True
                if header in ("TmRec", "TmW/L%") and "record" in extra_stats:
                    override_show = True
                if header in ("RunSW", "RunSL", "RunSW/L%") and "run-support-record" in extra_stats:
                    override_show = True
                if header in ("ExitW", "ExitL", "ExitW/L%") and "exit-record" in extra_stats:
                    override_show = True
                if header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G") and "score" in extra_stats:
                    override_show = True
                if seasons_leading and header in div_id_to_stat[player_type["da_type"]].values():
                    override_show = True
                if "current-stats" in extra_stats:
                    if header == "AB" or header == "1B" or header == "2B" or header == "3B" or header == "HR" or header == "GWRBI" or header == "Slam" or header == "GDP%":
                        override_show = True
                if "walk-off" in extra_stats:
                     if header == "WalkOff":
                         override_show = True
                if "statcast" in extra_stats:
                    if header == "Pit" or header == "Chase%" or header == "EV" or header == "Spin" or header == "MPH" or header == "HardHit%" or header == "SwtSpt%" or header == "LA" or header == "HitDist" or header == "PutAway%" or header == "Whiff%":
                        override_show = True
                if "run-support" in extra_stats:
                    if header == "RS9" or header == "RS":
                        override_show = True
                if "advanced-runner" in extra_stats:
                    if header == "BQS" or header == "IS" or header == "IR" or header == "IS%":
                        override_show = True

                if "for-pos" in all_headers[over_header][header] and ("display" not in all_headers[over_header][header] or all_headers[over_header][header]["display"]):
                    for player_data in player_datas:
                        if set(all_headers[over_header][header]["for-pos"]) & set(player_data["ind_type"]):
                            display_header = all_headers[over_header][header]["display-value"] if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"] else header
                            field_names.append(display_header)
                            break
                else:
                    if override_show or ("display" not in all_headers[over_header][header] or all_headers[over_header][header]["display"] or (header == "Seasons" and (over_header.startswith("Defense") or over_header == "Awards/Honors"))):
                        if not ("type" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["type"] == "Awards/Honors" and not has_non_playoffs and not (header.startswith("WS") or header.startswith("CS") or header.startswith("Seasons") or header.startswith("Player") or header == "G/Yr" or header == "GS/Yr" or header == "IP/Yr")):
                            display_header = all_headers[over_header][header]["display-value"] if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"] else header
                            field_names.append(display_header)

            table.field_names = field_names

            rows = []
            for index, player_data in enumerate(player_datas):
                if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
                    values = []
                    for header in all_headers[over_header]:
                        value = handle_table_data(over_header, player_data, player_datas, player_type, header, highest_vals, lowest_vals, index, has_non_playoffs, False, extra_stats)
                        if value:
                            values.append(value)
                    table.add_row(values)
                    rows.append(values)

            if debug_mode:
                logger.info("#" + str(threading.get_ident()) + "#   " + over_header + "\n\n" + str(table))
            
            html_info["tables"].append({
                "title" : over_header,
                "headers" : field_names,
                "rows" : rows
            })
                
    return html_info

def get_reddit_player_table(player_datas, player_type, debug_mode, original_comment, last_updated, comment_id, hide_table, extra_stats, has_one_player, has_one_player_games):
    has_non_playoffs = False
    for player_data in player_datas:
        if player_data["stat_values"]["is_playoffs"] != "Only":
            has_non_playoffs = True
    
    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1

    highest_vals, lowest_vals = calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, seasons_leading, extra_stats)
    
    rate_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") == "Per Game/Advanced", headers[player_type["da_type"]].items()))
    adjusted_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") == "Adjusted", headers[player_type["da_type"]].items()))
    defense_value_headers = collections.OrderedDict(filter(lambda header: (header[1].get("type") and header[1].get("type").startswith("Defense")), headers[player_type["da_type"]].items()))
    award_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") == "Awards/Honors", headers[player_type["da_type"]].items()))
    non_rate_headers = collections.OrderedDict(filter(lambda header: header[1].get("type") != "Per Game/Advanced" and header[1].get("type") != "Adjusted" and not (header[1].get("type") and header[1].get("type").startswith("Defense")) and header[1].get("type") != "Awards/Honors", headers[player_type["da_type"]].items()))

    all_headers = {}
    if non_rate_headers:
        all_headers["Standard"] = non_rate_headers
    if rate_headers:
        if non_rate_headers and "Player" in non_rate_headers:
            if player_type["da_type"] != "Batter":
                rate_headers.update({"GS" : non_rate_headers["GS"]})
                rate_headers.move_to_end("GS", last=False)
            rate_headers.update({"G" : non_rate_headers["G"]})
            rate_headers.move_to_end("G", last=False)
            rate_headers.update({"Player" : non_rate_headers["Player"]})
            rate_headers.move_to_end("Player", last=False)
        all_headers["Per Game/Advanced"] = rate_headers
    if adjusted_headers:
        if non_rate_headers and "Player" in non_rate_headers:
            if player_type["da_type"] != "Batter":
                adjusted_headers.update({"GS" : non_rate_headers["GS"]})
                adjusted_headers.move_to_end("GS", last=False)
            adjusted_headers.update({"G" : non_rate_headers["G"]})
            adjusted_headers.move_to_end("G", last=False)
            adjusted_headers.update({"Player" : non_rate_headers["Player"]})
            adjusted_headers.move_to_end("Player", last=False)
        all_headers["Adjusted"] = adjusted_headers
    if defense_value_headers:
        has_season_stats = True
        for player_data in player_datas:
            if not player_data["has_season_stats"]:
                has_season_stats = False
                break
        if has_season_stats:
            if non_rate_headers and "Player" in non_rate_headers:
                defense_value_headers.update({"Seasons" : non_rate_headers["Seasons"]})
                defense_value_headers.move_to_end("Seasons", last=False)
                defense_value_headers.update({"Player" : non_rate_headers["Player"]})
                defense_value_headers.move_to_end("Player", last=False)
            all_headers["Defense/Value (Baseball Reference)"] = defense_value_headers
    if award_headers:
        has_award_stats = True
        for player_data in player_datas:
            if not player_data["has_award_stats"]:
                has_award_stats = False
                break
        if has_award_stats:
            has_playoffs = False
            has_reg_season = False
            for player_data in player_datas:
                if player_data["stat_values"]["is_playoffs"]:
                    if player_data["stat_values"]["is_playoffs"] == "Only":
                        has_playoffs = True
                    else:
                        has_reg_season = True
                else:
                    has_reg_season = True
            if has_playoffs and has_reg_season:
                has_award_stats = False
        if has_award_stats:
            if non_rate_headers and "Player" in non_rate_headers:
                award_headers.update({"Seasons" : non_rate_headers["Seasons"]})
                award_headers.move_to_end("Seasons", last=False)
                award_headers.update({"Player" : non_rate_headers["Player"]})
                award_headers.move_to_end("Player", last=False)
            all_headers["Awards/Honors"] = award_headers
    
    tables_to_skip = set()
    headers_to_skip = {}
    for over_header in all_headers:
        has_table_match = False
        if all_headers[over_header]:
            for header in all_headers[over_header]:
                has_header_match = False
                for index, player_data in enumerate(player_datas):
                    value = handle_table_data(over_header, player_data, player_datas, player_type, header, highest_vals, lowest_vals, index, has_non_playoffs, True, extra_stats)
                    if value != "N/A" and value != None:
                        if header != "BatBInk" and header != "BatGInk" and header != "PitchBInk" and header != "PitchGInk":
                            has_header_match = True
                        elif ordinal_to_number(value):
                            has_header_match = True
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                            if (over_header != "Awards/Honors" or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                has_table_match = True
                                break
                        else:
                            if ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                                if (over_header != "Awards/Honors" or seasons_leading) or (ordinal_to_number(value) or "award" in extra_stats):
                                    has_table_match = True
                                    break
                if not has_header_match:
                    if not over_header in headers_to_skip:
                        headers_to_skip[over_header] = set()
                    headers_to_skip[over_header].add(header)
        if not has_table_match:
            tables_to_skip.add(over_header)
        
    if player_type["da_type"] == "Batter":
        has_season_pitch_stats = False
        for player_data in player_datas:
            if player_data["has_season_pitch_stats"]:
                has_season_pitch_stats = True
                break
    
        if not has_season_pitch_stats:
            if not "Defense/Value (Baseball Reference)" in headers_to_skip:
                headers_to_skip["Defense/Value (Baseball Reference)"] = set()
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPos")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPitch")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPitch")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPos/Yr")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WAAPitch/Yr")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPos/Yr")
            headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPitch/Yr")

            if not seasons_leading:
                headers_to_skip["Defense/Value (Baseball Reference)"].add("WARPos")

            if not "Awards/Honors" in headers_to_skip:
                headers_to_skip["Awards/Honors"] = set()
            if "Awards/Honors" in headers_to_skip:
                headers_to_skip["Awards/Honors"].add("BatBInk")
                headers_to_skip["Awards/Honors"].add("BatGInk")
                headers_to_skip["Awards/Honors"].add("PitchBInk")
                headers_to_skip["Awards/Honors"].add("PitchGInk")
    
    if "Awards/Honors" in headers_to_skip:
        if not (("BatBInk" not in headers_to_skip["Awards/Honors"] and "PitchBInk" not in headers_to_skip["Awards/Honors"]) or ("BatGInk" not in headers_to_skip["Awards/Honors"] and "PitchGInk" not in headers_to_skip["Awards/Honors"])):
            headers_to_skip["Awards/Honors"].add("PitchBInk")
            headers_to_skip["Awards/Honors"].add("BatBInk")
            headers_to_skip["Awards/Honors"].add("PitchGInk")
            headers_to_skip["Awards/Honors"].add("BatGInk")
        else:
            headers_to_skip["Awards/Honors"].discard("PitchBInk")
            headers_to_skip["Awards/Honors"].discard("BatBInk")
            headers_to_skip["Awards/Honors"].discard("PitchGInk")
            headers_to_skip["Awards/Honors"].discard("BatGInk")
    
    for over_header in headers_to_skip:
        for header in headers_to_skip[over_header]:
            if over_header in all_headers and header in all_headers[over_header]:
                del all_headers[over_header][header]
    
    for over_header in tables_to_skip:
        if over_header in all_headers:
            del all_headers[over_header]
            
    all_unique_quals = True
    quals = None
    player_index = 0
    for index, player_data in enumerate(player_datas):
        if not player_data["stat_values"]["Raw Quals"] or player_data["stat_values"]["Raw Quals"] == "Query: ":
            continue
        player_index = index
        if not quals:
            quals = player_data["stat_values"]["Raw Quals"]
        if quals != player_data["stat_values"]["Raw Quals"]:
            all_unique_quals = False
            break

    ranges_str = ""
    for index, player_data in enumerate(player_datas):
        if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
            player_str = player_data["stat_values"]["Raw Player"]
        else:
            player_str = ""
            for index, player in enumerate(player_data["stat_values"]["Player"]):
                player_str += create_player_url_string(player, player_data["ids"][index], extra_stats)
                if index != len(player_data["stat_values"]["Player"]) - 1:
                    if player_data["add_type"] == "minus":
                        player_str += " DIFF "
                    else:
                        player_str += " + "
        
        has_one_player_missing = False
        missing_all_players = True
        for player in player_data["stat_values"]["Player"]:
            if player == "No Player Match!":
                has_one_player_missing = True
            else:
                missing_all_players = False

        player_search_str = ""
        if has_one_player_missing:
            player_search_str = " Searched Term: \"" + "+".join(player_data["stat_values"]["Search Term"]) + "\""

        ranges_str += player_str + player_search_str
        if missing_all_players:
            ranges_str += "\n\n"
        else:
            ranges_str += ": "  + player_data["stat_values"]["Raw Range"] + " " + player_data["stat_values"]["Raw Time"] + "\n\n"

        if not all_unique_quals:
            ranges_str += player_data["stat_values"]["Raw Quals"]
            if index != len(player_datas) - 1:
                ranges_str += "\n\n\\----------------------------------------\n\n"
    
    if all_unique_quals and player_datas[player_index]["stat_values"]["Raw Quals"] != "Query: ":
         ranges_str += "\\----------------------------------------\n\n" + player_datas[player_index]["stat_values"]["Raw Quals"]
                
    table_str = ranges_str + "\n\n---\n"

    
    for over_header in all_headers:
        for extra_stat in extra_stats:
            if extra_stat.startswith("show-only-table-"):
                if "show-only-table-" + over_header.lower() not in extra_stats:
                    continue
        if "hide-table-" + over_header.lower() in extra_stats:
            continue
        if all_headers[over_header]:
            table_str += "**" + over_header + "**\n\n"

            field_names = []
            for header in all_headers[over_header]:
                if player_data["add_type"] == "minus":
                    if header == "TmRec":
                        if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                            continue
                if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header.lower() + ">" + header.lower() in extra_stats:
                    continue
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "hide-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "hide-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        continue
                for extra_stat in extra_stats:
                    if extra_stat.startswith("show-only-stat-"):
                        if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                            if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                                if not ("show-only-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats):
                                    if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                                        continue
                            else:
                                if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                                    continue
                override_show = False
                if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats:
                    override_show = True
                if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"]:
                    if "show-stat-" + all_headers[over_header][header]["display-value"].lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + all_headers[over_header][header]["display-value"].lower() in extra_stats:
                        override_show = True
                if header in ("TmRec", "TmW/L%") and "record" in extra_stats:
                    override_show = True
                if header in ("RunSW", "RunSL", "RunSW/L%") and "run-support-record" in extra_stats:
                    override_show = True
                if header in ("ExitW", "ExitL", "ExitW/L%") and "exit-record" in extra_stats:
                    override_show = True
                if header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G") and "score" in extra_stats:
                    override_show = True
                if seasons_leading and header in div_id_to_stat[player_type["da_type"]].values():
                    override_show = True
                if "current-stats" in extra_stats:
                    if header == "AB" or header == "1B" or header == "2B" or header == "3B" or header == "HR" or header == "GWRBI" or header == "Slam" or header == "GDP%":
                        override_show = True
                if "walk-off" in extra_stats:
                     if header == "WalkOff":
                         override_show = True
                if "statcast" in extra_stats:
                    if header == "Pit" or header == "Chase%" or header == "EV" or header == "Spin" or header == "MPH" or header == "HardHit%" or header == "SwtSpt%" or header == "LA" or header == "HitDist" or header == "PutAway%" or header == "Whiff%":
                        override_show = True
                if "run-support" in extra_stats:
                    if header == "RS9" or header == "RS":
                        override_show = True
                if "advanced-runner" in extra_stats:
                    if header == "BQS" or header == "IS" or header == "IR" or header == "IS%":
                        override_show = True
                
                if "for-pos" in all_headers[over_header][header] and ("display" not in all_headers[over_header][header] or all_headers[over_header][header]["display"]):
                    for player_data in player_datas:
                        if set(all_headers[over_header][header]["for-pos"]) & set(player_data["ind_type"]):
                            display_header = all_headers[over_header][header]["display-value"] if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"] else header
                            field_names.append(display_header)
                            break
                else:
                    if override_show or ("display" not in all_headers[over_header][header] or all_headers[over_header][header]["display"] or (header == "Seasons" and (over_header.startswith("Defense") or over_header == "Awards/Honors"))):
                        if not ("type" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["type"] == "Awards/Honors" and not has_non_playoffs and not (header.startswith("WS") or header.startswith("CS") or header.startswith("Seasons") or header.startswith("Player") or header == "G/Yr" or header == "GS/Yr" or header == "IP/Yr")):
                            display_header = all_headers[over_header][header]["display-value"] if "display-value" in all_headers[over_header][header] and all_headers[over_header][header]["display-value"] else header
                            field_names.append(display_header)

            table_str += "|".join(field_names) + "\n"
            for index in range(len(field_names)):
                table_str += ":-:|"
            table_str = table_str[:-1] + "\n"

            for index, player_data in enumerate(player_datas):
                if "all_rows" in player_data["stat_values"] and len(player_data["stat_values"]["all_rows"]):
                    values = []
                    for header in all_headers[over_header]:
                        value = handle_table_data(over_header, player_data, player_datas, player_type, header, highest_vals, lowest_vals, index, has_non_playoffs, True, extra_stats)
                        if value:
                            values.append(value)
                    table_str += "|".join(values) + "\n"

    html_info = print_player_data(player_datas, player_type, highest_vals, lowest_vals, has_non_playoffs, debug_mode, extra_stats, has_one_player_games)

    imgur_link = None
    if has_one_player:
        failed_counter = 0
        while(True):
            try:
                logger.info("#" + str(threading.get_ident()) + "#   " + "Starting image generation")
                imgur_link = create_table_html(html_info, player_datas, player_type, original_comment, last_updated, comment_id, extra_stats)
                logger.info("#" + str(threading.get_ident()) + "#   " + "Done with image generation")
                break
            except Exception:
                failed_counter += 1
                if failed_counter > max_request_retries:
                    if hide_table:
                        raise
                    else:
                        logger.exception("#" + str(threading.get_ident()) + "#   " + "Error generating image")
                        break

            delay_step = 10
            logger.info("#" + str(threading.get_ident()) + "#   " + "Retrying in " + str(retry_failure_delay) + " seconds to allow image generation to chill")
            time_to_wait = int(math.ceil(float(retry_failure_delay)/float(delay_step)))
            for i in range(retry_failure_delay, 0, -time_to_wait):
                logger.info("#" + str(threading.get_ident()) + "#   " + str(i))
                time.sleep(time_to_wait)
            logger.info("#" + str(threading.get_ident()) + "#   " + "0")

    return table_str, imgur_link, "Defense" in [table["title"].split("/")[0] for table in html_info["tables"]]

def calculate_highest_lowest_vals(player_datas, player_type, has_non_playoffs, seasons_leading, extra_stats):
    highest_vals = {}
    lowest_vals = {}
    for index, player_data in enumerate(player_datas):
        if "all_rows" in player_data["stat_values"] and player_data["stat_values"]["all_rows"]:
            for header in headers[player_type["da_type"]]:
                set_value = False
                add_value = False
                over_header = headers[player_type["da_type"]][header]["type"] if "type" in headers[player_type["da_type"]][header] else "Standard"
                if not seasons_leading:
                    if over_header in ("Defense/Value (Baseball Reference)", "Awards/Honors"):
                        if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                            continue
                    else:
                        if not ("G" in player_data["stat_values"] and player_data["stat_values"]["G"]):
                            continue
                else:
                    if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                        continue

                if header in player_data["stat_values"] and handle_table_data(over_header, player_data, player_datas, player_type, header, highest_vals, lowest_vals, index, has_non_playoffs, True, extra_stats) != "N/A":
                    value = player_data["stat_values"][header]
                    original_value = value

                    if header == "TmRec":
                        rec_split = value.split(":")
                        try:
                            value = float(rec_split[0]) / (float(rec_split[0]) + float(rec_split[1]))
                        except ZeroDivisionError:
                            value = 0

                    if isinstance(value, numbers.Number):
                        if header in highest_vals:
                            if "skipzero" in headers[player_type["da_type"]][header]:
                                if not value:
                                    if not highest_vals[header]["value"]:
                                        add_value = True
                                    else:
                                        continue
                                elif not highest_vals[header]["value"]:
                                    set_value = True

                            positive_to_use = headers[player_type["da_type"]][header]["positive"]
                            if seasons_leading and header in ["ERA", "FIP", "AB/HR", "WHIP", "BB9", "HR9", "H9"]:
                                positive_to_use = True

                            if not set_value:
                                if value > highest_vals[header]["value"]:
                                    set_value = positive_to_use
                                elif value < highest_vals[header]["value"]:
                                    set_value = not positive_to_use
                                else:
                                    add_value = True
                        else:
                            set_value = True
                        if set_value:
                            highest_vals[header] = {
                                "players" : [index],
                                "original_value" : original_value,
                                "value" : value
                            }
                        elif add_value:
                            highest_vals[header]["players"].append(index)

            for header in headers[player_type["da_type"]]:
                set_value = False
                add_value = False
                over_header = headers[player_type["da_type"]][header]["type"] if "type" in headers[player_type["da_type"]][header] else "Standard"
                if not seasons_leading:
                    if over_header in ("Defense/Value (Baseball Reference)", "Awards/Honors"):
                        if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                            continue
                    else:
                        if not ("G" in player_data["stat_values"] and player_data["stat_values"]["G"]):
                            continue
                else:
                    if not ("Seasons" in player_data["stat_values"] and player_data["stat_values"]["Seasons"]):
                        continue
                
                if header in player_data["stat_values"] and handle_table_data(over_header, player_data, player_datas, player_type, header, highest_vals, lowest_vals, index, has_non_playoffs, True, extra_stats) != "N/A":
                    value = player_data["stat_values"][header]
                    original_value = value

                    if header == "TmRec":
                        rec_split = value.split(":")
                        try:
                            value = float(rec_split[0]) / (float(rec_split[0]) + float(rec_split[1]))
                        except ZeroDivisionError:
                            value = 0

                    if isinstance(value, numbers.Number):
                        if header in lowest_vals:
                            if "skipzero" in headers[player_type["da_type"]][header]:
                                if not value:
                                    if not lowest_vals[header]["value"]:
                                        add_value = True
                                    else:
                                        set_value = True
                                elif not lowest_vals[header]["value"]:
                                    continue

                            positive_to_use = headers[player_type["da_type"]][header]["positive"]
                            if seasons_leading and header in ["ERA", "FIP", "AB/HR", "WHIP", "BB9", "HR9", "H9"]:
                                positive_to_use = True

                            if not set_value:
                                if value < lowest_vals[header]["value"]:
                                    set_value = positive_to_use
                                elif value > lowest_vals[header]["value"]:
                                    set_value = not positive_to_use
                                else:
                                    add_value = True
                        else:
                            set_value = True
                        if set_value:
                            lowest_vals[header] = {
                                "players" : [index],
                                "original_value" : original_value,
                                "value" : value
                            }
                        elif add_value:
                            lowest_vals[header]["players"].append(index)
        
    return highest_vals, lowest_vals

def sort_player_datats(player_datas, sort_vals, player_type, extra_stats):
    has_non_playoffs = False
    for sub_player_data in player_datas:
        if sub_player_data["stat_values"]["is_playoffs"] != "Only":
            has_non_playoffs = True

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1
    
    def sort_player_datas(player_data_1, player_data_2):
        if ("all_rows" in player_data_1["stat_values"] and player_data_1["stat_values"]["all_rows"]) and ("all_rows" in player_data_2["stat_values"] and player_data_2["stat_values"]["all_rows"]):
            for sort_val in sort_vals:
                for header in headers[player_type["da_type"]]:
                    found_stat_match = False
                    over_header = headers[player_type["da_type"]][header]["type"] if "type" in headers[player_type["da_type"]][header] else "Standard"
                    if header.lower() == sort_val["stat"] or over_header.lower() + ">" + header.lower() == sort_val["stat"]:
                        found_stat_match = True
                    if "display-value" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["display-value"]:
                        if headers[player_type["da_type"]][header]["display-value"].lower() == sort_val["stat"] or over_header.lower() + ">" + headers[player_type["da_type"]][header]["display-value"].lower() == sort_val["stat"]:
                            found_stat_match = True
                    if found_stat_match:
                        value_1 = calculate_sort_value(over_header, header, player_data_1, player_datas, player_type, has_non_playoffs, extra_stats)
                        value_2 = calculate_sort_value(over_header, header, player_data_2, player_datas, player_type, has_non_playoffs, extra_stats)

                        if value_1 != None and value_2 != None:
                            if "skipzero" in headers[player_type["da_type"]][header]:
                                if value_1 and not value_2:
                                    return -1
                                elif value_2 and not value_1:
                                    return 1

                            positive_to_use = headers[player_type["da_type"]][header]["positive"]
                            if seasons_leading and header in ["ERA", "FIP", "AB/HR", "WHIP", "BB9", "HR9", "H9"]:
                                positive_to_use = True

                            if (value_1 > value_2 and positive_to_use) or (value_1 < value_2 and not positive_to_use):
                                if sort_val["is_desc"]:
                                    return -1
                                else:
                                    return 1
                            elif (value_1 < value_2 and positive_to_use) or (value_1 > value_2 and not positive_to_use):
                                if sort_val["is_desc"]:
                                    return 1
                                else:
                                    return -1
                        elif value_1 != None:
                            return -1
                        elif value_2 != None:
                            return 1
                        break
        elif "all_rows" in player_data_1["stat_values"] and player_data_1["stat_values"]["all_rows"]:
            return -1
        elif ("all_rows" in player_data_2["stat_values"] and player_data_2["stat_values"]["all_rows"]):
            return 1
        
        return 0
        
    return sorted(player_datas, key=functools.cmp_to_key(sort_player_datas))

def calculate_sort_value(over_header, header, player_data, player_datas, player_type, has_non_playoffs, extra_stats):
    if header in player_data["stat_values"] and handle_table_data(over_header, player_data, player_datas, player_type, header, {}, {}, -1, has_non_playoffs, True, extra_stats) != "N/A":
        value = player_data["stat_values"][header]
        if header == "TmRec":
            rec_split = value.split(":")
            try:
                value = float(rec_split[0]) / (float(rec_split[0]) + float(rec_split[1]))
            except ZeroDivisionError:
                value = 0
        return value
    else:
        return None

def create_table_html(html_info, player_datas, player_type, original_comment, last_updated, comment_id, extra_stats):
    dirpath = tempfile.mkdtemp()

    try:
        soup = BeautifulSoup("", "lxml")
        html_tag = soup.new_tag("html")
        head_tag = soup.new_tag("head")
        head_tag.append(BeautifulSoup("<meta charset=\"UTF-8\" />", "lxml"))
        style_tag = soup.new_tag("style")
        body_tag = soup.new_tag("body")
        body_tag["style"] = "text-rendering: geometricPrecision;"
        body_div = soup.new_tag("div")

        style_tag.append(css_string)
        head_tag.append(style_tag)

        # courtesy_div = soup.new_tag("div")
        # courtesy_div.string = "Data courtesy of Pro Football Reference"
        # courtesy_div["style"] = "font-size: 12px; text-align: right;"
        # body_div.append(courtesy_div)

        total_image_div = soup.new_tag("div")
        if "hide-name" in extra_stats:
            total_image_div["style"] = "height: 170px; padding-bottom: 10px; display: inline-block;"
        else:
            total_image_div["style"] = "height: 170px; border: dashed; border-width: 0px 1px 1px 0px; padding-bottom: 10px; display: inline-block;"
        title_div_tag = soup.new_tag("div")
        title_div_tag["style"] = "text-align: center;"
        images_div_tag = soup.new_tag("div")

        # league_div = soup.new_tag("div")
        # league_div["style"] = "float: right; max-width: 5%;"
        # league_total_div = soup.new_tag("div")
        # league_total_div["style"] = "float: right;"
        # league_div_tag = soup.new_tag("div")
        # league_tag = soup.new_tag("img")
        # league_tag["src"] = "file:///" + os.path.abspath("../team_logos/leagues/mlb.png")
        # league_tag["style"] = "width: 50px;"
        # league_div_tag.append(league_tag)
        # league_total_div.append(league_div_tag)
        # league_div.append(league_total_div)
        # body_div.append(league_div)

        # images_div_tag["style"] = "overflow: hidden; position: relative;"
        tables_div_tag = soup.new_tag("div")
        parsed_ids = set()
        max_comb_players = 0
        if not "hide-name" in extra_stats:
            for player_image_urls in html_info["player_image_url"]:
                if len(player_image_urls["urls"]) > max_comb_players:
                    max_comb_players = len(player_image_urls["urls"])
                for index, player_image_url in enumerate(player_image_urls["urls"]):
                    if player_image_urls["names"][index] != "No Player Match!" and len(parsed_ids) < 10:
                        url = player_image_url if player_image_url else "file:///" + os.path.abspath("../team_logos/leagues/missing.png")
                        id = player_image_urls["ids"][index]
                        name = player_image_urls["names"][index]
                        parsed_name = create_human_name(name)
                        team = player_image_urls["teams"][index]
                        position = player_image_urls["positions"][index]
                        flag = parse_flag(player_image_urls["flags"][index])
                        number = player_image_urls["numbers"][index]
                        hof = player_image_urls["hofs"][index]
                        team_link = None
                        if not id in parsed_ids:
                            total_div = soup.new_tag("div")
                            total_div["style"] = "display: table-cell; width: 85px; padding-right: 10px;"
                            #player_name_div_tag = soup.new_tag("div")
                            #player_name_div_tag["stule"] = "max-width: 100px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                            #player_name_div_tag.string = name

                            team_color = "black"
                            secondary_color = "white"
                            if hof:
                                team_color = "gold"
                                secondary_color = "black"
                                team_link = "file:///" + os.path.abspath("../team_logos/leagues/mlb_hof.png")
                            else:
                                if team:
                                    team = re.sub(r"[^A-Za-z0-9 ]+", "", team)
                                    team = re.sub(r"\s+", " ", team).strip().lower()
                                    if team in team_renames:
                                        team = team_renames[team]
                                    for team_obj in team_colors:
                                        if team_obj["league"] == "mlb":
                                            pot_team = team_obj["name"]
                                            pot_team = re.sub(r"[^A-Za-z0-9 ]+", "", pot_team)
                                            pot_team = re.sub(r"\s+", " ", pot_team).strip().lower()

                                            if team == pot_team:
                                                if "hex" in team_obj["colors"] and team_obj["colors"]["hex"]:
                                                    team_color = "#" + team_obj["colors"]["hex"][0]
                                                    if len(team_obj["colors"]["hex"]) > 1:
                                                        secondary_color = "#" + team_obj["colors"]["hex"][1]
                                                elif "rgb" in team_obj["colors"] and team_obj["colors"]["rgb"]:
                                                    team_color = "rgb(" + team_obj["colors"]["rgb"][0].replace(" ", ",") + ")"
                                                    if len(team_obj["colors"]["rgb"]) > 1:
                                                        secondary_color = "rgb(" + team_obj["colors"]["rgb"][1].replace(" ", ",") + ")"
                                                if os.path.isfile(os.path.abspath("../team_logos/mlb/" + pot_team.replace(" ", "-") + ".svg")):
                                                    team_link = "file:///" + os.path.abspath("../team_logos/mlb/" + pot_team.replace(" ", "-") + ".svg")
                                                elif os.path.isfile(os.path.abspath("../team_logos/mlb/" + pot_team.replace(" ", "-") + ".png")):
                                                    team_link = "file:///" + os.path.abspath("../team_logos/mlb/" + pot_team.replace(" ", "-") + ".png")
                                                break

                            url_div_tag = soup.new_tag("div")
                            images_tag = soup.new_tag("img")
                            images_tag["src"] = url
                            if player_image_url:
                                images_tag["style"] = "height: 165px; width: 110px; border-color: " + team_color + "; border-width:2px 2px 3px 2px; border-style: solid;"
                            else:
                                images_tag["style"] = "height: 165px; width: 110px; border-color: " + team_color + "; border-width:2px 2px 3px 2px; border-style: solid;"
                            url_div_tag.append(images_tag)
                            if team_link:
                                images_tag = soup.new_tag("img")
                                images_tag["src"] = team_link
                                if hof:
                                    images_tag["style"] = "width: 28px; height: 28px; position: relative; bottom: 52px; left: 3px;"
                                else:
                                    images_tag["style"] = "width: 30px; height: 30px; position: relative; bottom: 49px; right: 1px;"
                                url_div_tag.append(images_tag)
                            if flag and "cairosvg.svg" in sys.modules:
                                flat_split = flag.split("/")
                                flag_name_split = os.path.splitext(flat_split[len(flat_split) - 1])
                                flag_name = dirpath + "/" + flag_name_split[0] + ".png"
                                if not os.path.isfile(flag_name):
                                    svg2png(bytestring=url_request_bytes(flag).decode("UTF-8"), write_to=flag_name)
                                images_tag = soup.new_tag("img")
                                images_tag["src"] = "file:///" + os.path.abspath(flag_name)
                                if team_link:
                                    if hof:
                                        images_tag["style"] = "width: 25px; height: 18.75px; position: relative; bottom: 53px; left: 56px; box-shadow: 2px 2px 4px 0 rgba(0,0,0,0.5);"
                                    else:
                                        images_tag["style"] = "width: 25px; height: 18.75px; position: relative; bottom: 55px; left: 54px; box-shadow: 2px 2px 4px 0 rgba(0,0,0,0.5);"
                                else:
                                    images_tag["style"] = "width: 25px; height: 18.75px; position: relative; bottom: 43px; left: 84px; box-shadow: 2px 2px 4px 0 rgba(0,0,0,0.5);"
                                url_div_tag.append(images_tag)
                            if number:
                                number_tag = soup.new_tag("p")
                                if team_link:
                                    if hof:
                                        number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 218px; left: 88px; font-size: 20px;"
                                    else:
                                        number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 220px; left: 88px; font-size: 20px;"
                                else:
                                    number_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: right; width: 18px; position: relative; bottom: 208px; left: 88px; font-size: 20px;"
                                number_tag["style"] += "-webkit-text-stroke-width: 3px; -webkit-text-stroke-color: " + secondary_color + "; display: flex;"
                                
                                number_str = str(number)
                                if len(number_str) == 1:
                                    number_span = soup.new_tag("span")
                                    number_span.string = "0"
                                    number_span["style"] = "visibility:hidden;"
                                    number_tag.append(number_span)
                                for digit in number_str:
                                    number_span = soup.new_tag("span")
                                    number_span.string = digit
                                    number_tag.append(number_span)

                                url_div_tag.append(number_tag)
                            if position:
                                position_tag = soup.new_tag("p")
                                position_tag.string = position
                                if team_link:
                                    if hof:
                                        if number:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 265px; left: 4px; font-size: 20px;"
                                        else:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 218px; left: 4px; font-size: 20px;"
                                    else:
                                        if number:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 267px; left: 4px; font-size: 20px;"
                                        else:
                                            position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 220px; left: 4px; font-size: 20px;"
                                else:
                                    if number:
                                        position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 255px; left: 4px; font-size: 20px;"
                                    else:
                                        position_tag["style"] = "font-weight: bold; color: " + team_color + "; text-align: left; width: 18px; position: relative; bottom: 208px; left: 4px; font-size: 20px;"
                                position_tag["style"] += "-webkit-text-stroke-width: 3px; -webkit-text-stroke-color: " + secondary_color + ";"
                                url_div_tag.append(position_tag)
                            player_name_tag = soup.new_tag("p")
                            player_name_tag.string = parsed_name.first[0] + ". " + parsed_name.last
                            if team_link:
                                if hof:
                                    if number:
                                        player_name_tag["style"] = "position: relative; bottom: 164px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        if position:
                                            player_name_tag["style"] = "position: relative; bottom: 117px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                        else:
                                            player_name_tag["style"] = "position: relative; bottom: 65px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                else:
                                    if number:
                                        player_name_tag["style"] = "position: relative; bottom: 166px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        if position:
                                            player_name_tag["style"] = "position: relative; bottom: 119px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                        else:
                                            player_name_tag["style"] = "position: relative; bottom: 67px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                            else:
                                if number:
                                    player_name_tag["style"] = "position: relative; bottom: 154px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                else:
                                    if position:
                                        player_name_tag["style"] = "position: relative; bottom: 107px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                                    else:
                                        player_name_tag["style"] = "position: relative; bottom: 55px; left: 2px; color: " + team_color + "; background-color: white; font-weight: bold; font-size: 15px; text-overflow: ellipsis; max-width: 110px; white-space: nowrap; overflow: hidden; text-align: center;"
                            url_div_tag.append(player_name_tag)

                            parsed_ids.add(id)
                        
                            total_div.append(url_div_tag)
                            #total_div.append(player_name_div_tag)
                            images_div_tag.append(total_div)
        
        total_image_div.append(images_div_tag)
        body_div.append(total_image_div)

        all_unique_quals = True
        quals = None
        player_index = 0
        for index, player_data in enumerate(player_datas):
            if not player_data["stat_values"]["Raw Quals"] or player_data["stat_values"]["Raw Quals"] == "Query: ":
                continue
            player_index = index
            if not quals:
                quals = player_data["stat_values"]["Raw Quals"]
            if quals != player_data["stat_values"]["Raw Quals"]:
                all_unique_quals = False
                break
        
        has_season_pitch_stats = False
        if player_type["da_type"] == "Batter":
            for player_data in player_datas:
                if player_data["has_season_pitch_stats"]:
                    has_season_pitch_stats = True
                    break

        for index, player_data in enumerate(player_datas):
            current_div = soup.new_tag("div")
            if True:
                current_div["style"] = "display: inline-block; vertical-align: top;"
            else:
                current_div["style"] = "display: inline-block; border: dashed; border-width: 0px 0px 0px 1px; vertical-align: top;"
            
            has_one_player_missing = False
            missing_all_players = True
            for player in player_data["stat_values"]["Player"]:
                if player == "No Player Match!":
                    has_one_player_missing = True
                else:
                    missing_all_players = False

            h2 = soup.new_tag("h2")
            h2.string = player_data["stat_values"]["Raw Player"]
            h2["style"] = "float: left; padding-left:10px; padding-right:10px;"
            raw_range = player_data["stat_values"]["Raw Range"]
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_range)
            while match:
                raw_range = raw_range.replace(match.group(0), match.group(1), 1)
                match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_range)

            if has_one_player_missing:
                h2_div = soup.new_tag("div")
                h2_div.string = "Searched Term: \"" + "+".join(player_data["stat_values"]["Search Term"]) + "\""
                h2_div["style"] = "font-size: medium;"
                h2.append(h2_div)

            if not missing_all_players:
                h2_div = soup.new_tag("div")
                h2_div.string = raw_range
                h2_div["style"] = "font-size: medium;"
                h2.append(h2_div)

            if player_data["stat_values"]["Raw Time"] and not missing_all_players:
                h2_div = soup.new_tag("div")
                h2_div.string = player_data["stat_values"]["Raw Time"]
                h2_div["style"] = "font-size: small;"
                h2.append(h2_div)
                
            if not all_unique_quals and not missing_all_players:
                raw_quals = player_data["stat_values"]["Raw Quals"]
                if raw_quals and raw_quals != "Query: ":
                    match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
                    while match:
                        raw_quals = raw_quals.replace(match.group(0), match.group(1), 1)
                        match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
                        
                    h2_div = soup.new_tag("div")
                    h2_div.string = raw_quals
                    h2_div["style"] = "font-size: x-small;"
                    h2.append(h2_div)
            current_div.append(h2)
            title_div_tag.append(current_div)

        if all_unique_quals and player_datas[player_index]["stat_values"]["Raw Quals"] != "Query: ":
            h2 = soup.new_tag("h2")
            raw_quals = player_datas[player_index]["stat_values"]["Raw Quals"]
            match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
            while match:
                raw_quals = raw_quals.replace(match.group(0), match.group(1), 1)
                match = re.search(r"(?:\[([^\]\[]+?)(?<!\\)\])(?:\s*\((?:http[s]?://|www\.)(?:[a-zA-Z]|[0-9]|[$-'\*-_@.&+^]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\))", raw_quals)
            border_div = soup.new_tag("div")
            border_div["style"] = "border: dashed; border-width: 1px 0px 0px 0px; width: 160px; margin: auto; margin-top: 2px;"
            h2.append(border_div)
            h2_div = soup.new_tag("div")
            h2_div.string = raw_quals
            h2_div["style"] = "font-size: large;"
            h2.append(h2_div)
            title_div_tag.append(h2)

        body_div.append(title_div_tag)

        has_value = "Defense" in [table["title"].split("/")[0] for table in html_info["tables"]]

        for tab_index, table in enumerate(html_info["tables"]):
            div_tag = soup.new_tag("div")
            table_tag = soup.new_tag("table")
            caption_tag = soup.new_tag("caption")
            t_head_tag = soup.new_tag("thead")
            t_body_tag = soup.new_tag("tbody")

            if tab_index == 0:
                caption_span_1 = soup.new_tag("span")
                caption_span_1.string = table["title"]
                caption_tag.append(caption_span_1)
                caption_span_2 = soup.new_tag("span")
                if has_value:
                    caption_span_2.string = "FanGraphs/Statcast stats may lose precision"
                else:
                    caption_span_2.string = "FanGraphs/Statcast stats may lose precision"
                caption_span_2["style"] = "float: right; font-size: 12px; font-weight: normal; bottom: -3px; position: relative; white-space: nowrap;"
                caption_tag.append(caption_span_2)
            else:
                caption_tag.string = table["title"]

            header_row = soup.new_tag("tr")
            for header in table["headers"]:
                th_tag = soup.new_tag("th")
                th_tag.string = header
                header_row.append(th_tag)
            t_head_tag.append(header_row)

            for index, row in enumerate(table["rows"]):
                column_row = soup.new_tag("tr")
                for column in row:
                    column_tag = soup.new_tag("td")
                    column, highest = re.subn(r"(?<!\\)\*{2}", "", column)
                    column = column.replace("\\*", "*")
                    if highest:
                        bold_tag = soup.new_tag("b")
                        bold_tag.string = column
                        column_tag.append(bold_tag)
                        column_tag["style"] = "color : green;"
                    else:
                        column_tag.string = column
                        column_tag["style"] = ""

                    if index % 2 == 0:
                        column_tag["style"] += " background-color: #EEEEEE;"
                    else:
                        column_tag["style"] += " background-color: #FFFFFF;"

                    column_row.append(column_tag)
                t_body_tag.append(column_row)
            
            table_tag.append(caption_tag)
            table_tag.append(t_head_tag)
            table_tag.append(t_body_tag)
            div_tag.append(table_tag)
            tables_div_tag.append(div_tag)

        body_div.append(tables_div_tag)

        info_div = soup.new_tag("div")
        stats_last_updated_div = soup.new_tag("div")
        comment_div = soup.new_tag("div")

        tz = pytz.timezone("US/Eastern")
        current_date = datetime.datetime.now(tz)

        stats_updated_div_1 = soup.new_tag("div")
        stats_updated_div_2 = soup.new_tag("div")
        stats_updated_div_1.string = "Generated: " + current_date.strftime("%b %d %Y, %I:%M%p %Z")
        if last_updated:
            stats_updated_div_2.string = "Stats last updated: " + last_updated.strftime("%b %d %Y, %I:%M%p %Z")
            stats_last_updated_div.append(stats_updated_div_1)
            stats_last_updated_div.append(stats_updated_div_2)
        else:
            stats_updated_div_2.string = "h"
            stats_updated_div_2["style"] = "color: white;"
            stats_last_updated_div.append(stats_updated_div_2)
            stats_last_updated_div.append(stats_updated_div_1)
        stats_last_updated_div["style"] = "float: left; width: 30%;"
        info_div.append(stats_last_updated_div)
        comment_div_1 = soup.new_tag("div")
        comment_div_2 = soup.new_tag("div")
        comment_div_1.string = "N/A indicates stat was not tracked at all during the time frame, * indicates stat was not tracked consistently throughout the entire time frame"
        if not "hide-name" in extra_stats:
            comment_div_2.string = "Generated from command: " + original_comment
        comment_div.append(comment_div_1)
        comment_div.append(comment_div_2)
        comment_div["style"] = "float: right; width: 70%; text-align: right;"
        info_div.append(comment_div)
        info_div["style"] = "padding-top: 20px; font-size: 12px;"
        body_div.append(info_div)

        body_tag.append(body_div)

        soup.append(html_tag)
        html_tag.append(head_tag)
        html_tag.append(body_tag)

        with open(dirpath + "/out.html", "w", encoding="utf-8") as file:
            file.write(str(soup))
        
        if max_comb_players > 10 or has_season_pitch_stats:
            options = {
                "quiet" : "",
                "page-width": "417",
                "page-height": "420"
            }
        else:
            options = {
                "quiet" : "",
                "page-size": "A3"
            }

        img = pdfkit.from_string(str(soup), False, options)
        img_file = io.BytesIO(img)

        the_uuid = str(uuid.uuid1())

        pdf_file_name = os.path.abspath(dirpath + "/" + the_uuid + ".pdf")
        image_file_name = os.path.abspath(dirpath + "/" + the_uuid + ".png")

        with open(pdf_file_name, "wb") as temp_pdf:
            temp_pdf.write(img_file.getbuffer())
        
        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting mupdf conversion")

        subprocess.check_output("/opt/mupdf/bin/mutool convert -O resolution=600 -o " + image_file_name + " " + temp_pdf.name, stderr=subprocess.STDOUT, shell=True)

        image_file_name_split = os.path.splitext(image_file_name)
        comb_image_file_name = image_file_name_split[0] + "*" + image_file_name_split[1]

        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting imagemagick conversion")

        subprocess.check_output("convert -trim -append -bordercolor White -border 30x30 " + comb_image_file_name + " " + image_file_name, stderr=subprocess.STDOUT, shell=True)

        logger.info("#" + str(threading.get_ident()) + "#   " + "Starting imgur upload")

        with open(image_file_name, "rb") as image_file:
            data = {
                "image" : base64.standard_b64encode(image_file.read()),
                "title" : comment_id
            }
            request = urllib.request.Request(url=imgur_upload_url, data=urllib.parse.urlencode(data).encode("utf-8"), headers=imgur_headers)
            return url_request_json_urlib(request, timeout=30)["data"]["link"]
    finally:
        #logger.info("#" + str(threading.get_ident()) + "# " + dirpath)
        shutil.rmtree(dirpath)

def parse_flag(flag):
    if flag:
        link = flag["link"]
        flag_class = flag["flag_class"]
        request = urllib.request.Request(link, headers=request_headers)
        css = url_request_bytes(request).decode("UTF-8")
        stylesheet = tinycss.make_parser().parse_stylesheet(css)
        for rule in stylesheet.rules:
            if isinstance(rule, tinycss.css21.RuleSet):
                for selector in rule.selector:
                    if isinstance(selector, tinycss.token_data.Token):
                        if str(selector.value) == flag_class:
                            if rule.declarations and rule.declarations[0] and rule.declarations[0].name == "background-image":
                                return rule.declarations[0].value[0].value
    return None

def handle_table_data(over_header, player_data, player_datas, player_type, header, highest_vals, lowest_vals, index, has_non_playoffs, for_reddit, extra_stats):
    for extra_stat in extra_stats:
        if extra_stat.startswith("show-only-table-"):
            if "show-only-table-" + over_header.lower() not in extra_stats:
                return None
    if "hide-table-" + over_header.lower() in extra_stats:
        return None
    if player_data["add_type"] == "minus":
        if header == "TmRec":
            if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                return None
    if "hide-stat-" + header.lower() in extra_stats or "hide-stat-" + over_header.lower() + ">" + header.lower() in extra_stats:
        return None
    if "display-value" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["display-value"]:
        if "hide-stat-" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats or "hide-stat-" + over_header.lower() + ">" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats:
            return None
    for extra_stat in extra_stats:
        if extra_stat.startswith("show-only-stat-"):
            if not ("show-only-stat-" + header.lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + header.lower() in extra_stats or "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats):
                if "display-value" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["display-value"]:
                    if not ("show-only-stat-" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats or "show-only-stat-" + over_header.lower() + ">" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats or "show-stat-" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats):
                        if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                            return None
                else:
                    if header != "Player" and header != "G" and header != "GS" and header != "G/Yr" and header != "GS/Yr" and header != "IP/Yr" and header != "Seasons":
                        return None
    override_show = False
    if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats:
        override_show = True
    if "display-value" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["display-value"]:
        if "show-stat-" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + headers[player_type["da_type"]][header]["display-value"].lower() in extra_stats:
            override_show = True
    if header in ("TmRec", "TmW/L%") and "record" in extra_stats:
        override_show = True
    if header in ("RunSW", "RunSL", "RunSW/L%") and "run-support-record" in extra_stats:
        override_show = True
    if header in ("ExitW", "ExitL", "ExitW/L%") and "exit-record" in extra_stats:
        override_show = True
    if header in ("TmScore", "OppScore", "TtlScore", "ScoreDiff", "TmScore/G", "OppScore/G", "TtlScore/G", "ScoreDiff/G") and "score" in extra_stats:
        override_show = True
    if "current-stats" in extra_stats:
        if header == "AB" or header == "1B" or header == "2B" or header == "3B" or header == "HR" or header == "GWRBI" or header == "Slam" or header == "GDP%":
            override_show = True
    if "walk-off" in extra_stats:
        if header == "WalkOff":
            override_show = True
    if "statcast" in extra_stats:
        if header == "Pit" or header == "Chase%" or header == "EV" or header == "Spin" or header == "MPH" or header == "HardHit%" or header == "SwtSpt%" or header == "LA" or header == "HitDist" or header == "PutAway%" or header == "Whiff%":
            override_show = True
    if "run-support" in extra_stats:
        if header == "RS9" or header == "RS":
            override_show = True
    if "advanced-runner" in extra_stats:
        if header == "BQS" or header == "IS" or header == "IR" or header == "IS%":
            override_show = True

    seasons_leading = 0
    for extra_stat in extra_stats:
        if extra_stat.startswith("seasons-leading"):
            if len(extra_stat.split("-")) >= 3:
                seasons_leading = int(extra_stat.split("-")[2])
            else:
                seasons_leading = 1
    
    if seasons_leading and header in div_id_to_stat[player_type["da_type"]].values():
        override_show = True

    for_pos = None
    if "for-pos" in headers[player_type["da_type"]][header] and ("display" not in headers[player_type["da_type"]][header] or headers[player_type["da_type"]][header]["display"]):
        if set(headers[player_type["da_type"]][header]["for-pos"]) & set(player_data["ind_type"]):
            for_pos = True
        else:
            for sub_player_data in player_datas:
                if set(headers[player_type["da_type"]][header]["for-pos"]) & set(sub_player_data["ind_type"]):
                    return "N/A"
        if not for_pos:
            for_pos = False

    if override_show or (for_pos != False and (for_pos or ("display" not in headers[player_type["da_type"]][header] or headers[player_type["da_type"]][header]["display"] or (header == "Seasons" and (over_header.startswith("Defense") or over_header == "Awards/Honors"))))):
        og_value = player_data["stat_values"][header] if header in player_data["stat_values"] else 0.0
        value = og_value

        if "type" in headers[player_type["da_type"]][header] and ((headers[player_type["da_type"]][header]["type"].startswith("Defense") and not player_data["has_season_stats"]) or (headers[player_type["da_type"]][header]["type"] == "Awards/Honors" and not player_data["has_award_stats"])):
            return "N/A"
        if "type" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["type"] == "Awards/Honors" and player_data["stat_values"]["is_playoffs"] == "Only" and not (header.startswith("WS") or header.startswith("CS") or header.startswith("Seasons") or header.startswith("Player") or header == "G/Yr" or header == "GS/Yr" or header == "IP/Yr"):
            if has_non_playoffs:
                return "N/A"
            else:
                return None
        if "type" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["type"] == "Awards/Honors" and header.startswith("WS") and not player_data["is_only_ws"]:
            return "N/A"
        if "type" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["type"] == "Awards/Honors" and header.startswith("CS") and not player_data["is_only_cs"]:
            return "N/A"

        if is_against_header(header, over_header, extra_stats, player_type):
            return "N/A"
        
        if seasons_leading and header not in div_id_to_stat[player_type["da_type"]].values() and not header.startswith("Player") and not header == "Seasons":
            return "N/A"

        missing_all_star = False
        if "AllStar" in header and "all_rows" in player_data["stat_values"]:
            seasons = list(set([row["Year"] for row in player_data["stat_values"]["all_rows"]]))
            missing_all_star = 2020 in seasons
            if missing_all_star and len(seasons) == 1:
                return "N/A"

        if header.startswith("Player"):
            players = value
            value = ""
            first = True
            for index, player in enumerate(players):
                if not first:
                    value += "/"
                else:
                    first = False

                if len(players) > 1:
                    if player != "No Player Match!":
                        parsed_name = create_human_name(player)
                        player = parsed_name.last

                if for_reddit and player_data["ids"]:
                    value += create_player_url_string(player, player_data["ids"][index], extra_stats)
                else:
                    value += player
        else:
            has_valid_stat = False
            has_missing_park_factors = False
            has_any_park_factors = False
            has_live_stats = False
            has_non_live_stats = False
            if "all_rows" in player_data["stat_values"]:
                for row in player_data["stat_values"]["all_rows"]:
                    row["DateStart"] = [row["DateTime"]]
                    if row["is_playoffs"]:
                        row["is_playoffs"] = "Only"
                    else:
                        row["is_playoffs"] = None

                    if not is_invalid_stat(header, player_type, row, False)["all_invalid"]:
                        has_valid_stat = True   

                    constant_year = str(row["Year"])
                    if constant_year not in totals["MLB"]["Batter"] or not totals["MLB"]["Batter"][constant_year]:
                        constant_year = str(int(current_season) - 1)

                    if row["Tm"] in park_factors[constant_year]:
                        has_any_park_factors = True
                    else:
                        has_missing_park_factors = True
                    
                    if "MLBLiveGame" in row and row["MLBLiveGame"]:
                        has_live_stats = True
                    else:
                        has_non_live_stats = True

            if not has_valid_stat:
                return "N/A"
            
            if isinstance(value, numbers.Number):
                if player_data["add_type"] == "minus":
                    value = ("{:.2f}").format(round_value(100 * value, 2)) + "%"
                elif "round" in headers[player_type["da_type"]][header] and not seasons_leading:
                    round_val = headers[player_type["da_type"]][header]["round"]
                    if isinstance(round_val, str):
                        if round_val == "percent":
                            value = ("{:.2f}").format(round_value(100 * value, 2)) + "%"
                        elif round_val.startswith("percent-"):
                            rount_int = int(round_val.split("-")[1])
                            value = ("{:." + str(rount_int) + "f}").format(round_value(100 * value, rount_int)) + "%"
                        elif round_val == "dollar":
                            value = round_value(value / 1000000, 2)
                            value = ("{:." + str(2) + "f}").format(value)
                            value = "$" + value + "m"
                        else:
                            frac, whole = math.modf(value)
                            if round_val == "innings-round":
                                frac = round_value(frac / (10/3), 2)
                            else:
                                frac = round_value(frac / (10/3), 1)
                            if frac == 0.3:
                                frac = 0
                                whole += 1
                            value = round_value(frac + whole, 2)
                            if round_val == "innings-round":
                                value = ("{:.2f}").format(value)
                            else:
                                value = ("{:.1f}").format(value)
                    else:
                        value = round_value(value, round_val)
                        value = ("{:." + str(round_val) + "f}").format(value)
                else:
                    value = round_value(value)
            elif header == "TmRec":
                rec_split = value.split(":")
                value = str(round_value(float(rec_split[0]))) + ":" + str(round_value(float(rec_split[1])))
                if len(rec_split) == 3:
                    value += ":" + str(round_value(float(rec_split[2])))
            value = str(value)
            
            if header == "G":
                if player_data["stat_values"]["any_missing_games"]:
                    value += "*"
            elif header == "Pit":
                if player_data["stat_values"]["any_missing_pitch"] or is_invalid_stat(header, player_type, player_data["stat_values"], True)["any_invalid"]:
                    value += "*"
            elif header in ("wOBA", "wSB", "wRC", "wRAA", "BRuns", "FIP") or header.endswith("-") or (header.endswith("+") and not header == "OPS+" and not header == "ERA+"):
                if not has_any_park_factors:
                    return "N/A"
                
                if has_missing_park_factors:
                    value += "*"
                elif is_invalid_stat(header, player_type, player_data["stat_values"], True)["any_invalid"]:
                    value += "*"
            elif "Salary" in header or "$" in header:
                if not og_value and not seasons_leading:
                    return "N/A"

                if player_data["stat_values"]["any_missing_salary"]:
                    value += "*"
                elif "Infl" in header and player_data["stat_values"]["any_missing_inf"]:
                    value += "*"
                elif header in ("$/WAR", "Infl$/WAR") and has_live_stats:
                    value += "*"
            elif is_invalid_stat(header, player_type, player_data["stat_values"], True)["any_invalid"]:
                value += "*"
            elif "AllStar" in header and missing_all_star:
                value += "*"
            elif has_live_stats:
                if header in ("WPA", "cWPA", "RE24", "WPA/162", "cWPA/162"):
                    if has_non_live_stats:
                        value += "*"
                    else:
                        return "N/A"
                elif over_header == "Defense/Value (Baseball Reference)" and header not in ("Fld%", "FldCaughtStealing%") and "Seasons" not in header:
                    if has_non_live_stats:
                        value += "*"
                    else:
                        return "N/A"
                elif over_header == "Awards/Honors" and ("GInk" in header or "BInk" in header):
                    if has_non_live_stats:
                        value += "*"
                    else:
                        return "N/A"

            if header in highest_vals and index in highest_vals[header]["players"] and not (header in lowest_vals and index in lowest_vals[header]["players"]):
                value = "**" + value + "**"

        return value

def has_against_quals(extra_stats):
    return "current-stats" in extra_stats

def has_time_quals(qualifiers):
    return "Event Time" in qualifiers or "Team Event Time" in qualifiers or "Opponent Event Time" in qualifiers or "Local Event Time" in qualifiers or "Event DateTime" in qualifiers or "Team Event DateTime" in qualifiers or "Opponent Event DateTime" in qualifiers or "Local Event DateTime" in qualifiers

def is_against_header(header, over_header, extra_stats, player_type):
    if not has_against_quals(extra_stats):
        return False

    if header.startswith("Player") or (header.startswith("G") and not header.startswith("GS") and not header.startswith("GDP") and not header.startswith("GWRBI")):
        return False

    if "show-stat-" + header.lower() in extra_stats or "show-stat-" + over_header.lower() + ">" + header.lower() in extra_stats:
        return False

    if "type" in headers[player_type["da_type"]][header] and headers[player_type["da_type"]][header]["type"] != "Per Game/Advanced" and headers[player_type["da_type"]][header]["type"] != "Adjusted":
        return True

    if "stolen-base" in extra_stats and header not in ("SB", "CS", "NS", "SB%", "PO"):
        return True

    if "at-bat" in extra_stats and header not in ("AB", "H", "1B", "2B", "3B", "HR", "XBH", "TB", "Cycle", "SO", "GDP", "GDPO", "GDP%", "BA", "SLG", "X/H%", "EV", "HardHit%", "SwtSpt%", "LA", "HitDist", "Slam"):
        return True

    if "hide-rate" in extra_stats and header not in non_rate_stats:
        return True

    if player_type["da_type"] == "Batter":
        if "no-steals" in extra_stats and header in ("R", "SB", "CS", "NS", "R/162", "SB/162", "CS/162", "SB%", "wSB"):
            return True
        return header in ("WPA", "cWPA", "RE24", "WPA/162", "cWPA/162") or ("162" in header and not "per-game" in extra_stats)
    else:
        if "no-steals" in extra_stats and header in ("SB", "CS", "NS", "SB%", "wSB", "PO"):
            return True
        return header in ("WPA", "cWPA", "RE24", "WPA/162", "cWPA/162", "GS", "W", "L", "W/L%", "QS", "QS%", "CG", "CG%", "SHO", "SHO%", "Hold", "SV", "BSv", "SV%", "HLD", "NoHit", "Prfct", "IP/GS", "Pit/GS", "GSc/GS") or header.startswith("GS/") or header.startswith("GS_") or "162" in header

def is_invalid_stat(stat, player_type, data, count_inconsistent):
    invalid_data = {}
    all_leagues = set()

    if stat in headers[player_type["da_type"]]:
        rows_to_use = data["all_rows"] if "all_rows" in data else [data]
        for row in rows_to_use:
            date_start = row["DateTime"]
            sleague = row["TmLg"]
            all_leagues.add(sleague)

            stat_obj_to_use = None
            if stat in league_data_mapping[player_type["da_type"]]:
                for league_key in league_data_mapping[player_type["da_type"]][stat]:
                    leagues = league_key.split("-")
                    if sleague in leagues:
                        stat_obj_to_use = league_data_mapping[player_type["da_type"]][stat][league_key]
                        break
            
            if not stat_obj_to_use and "valid_since" in headers[player_type["da_type"]][stat]:
                stat_obj_to_use =  headers[player_type["da_type"]][stat]["valid_since"]

            if stat_obj_to_use:
                date_to_use = None
                if isinstance(date_start, int):
                    if "season" in stat_obj_to_use and date_start < stat_obj_to_use["season"]:
                        date_to_use = stat_obj_to_use["season"]
                    elif "season-np" in stat_obj_to_use and date_start < stat_obj_to_use["season-np"]:
                        if data["is_playoffs"] == "Include":
                            if count_inconsistent:
                                date_to_use = stat_obj_to_use["season-np"]
                        elif data["is_playoffs"] != "Only":
                            date_to_use = stat_obj_to_use["season-np"]
                    elif count_inconsistent and "inconsistent" in stat_obj_to_use and date_start < stat_obj_to_use["inconsistent"]:
                        date_to_use = stat_obj_to_use["inconsistent"]
                else:
                    if "game" in stat_obj_to_use and (date_start if isinstance(date_start, int) else date_start.year) < stat_obj_to_use["game"] and (not data["is_playoffs"] or data["is_playoffs"] == "No"):
                        date_to_use = stat_obj_to_use["game"]
                    elif "game-np" in stat_obj_to_use and (date_start if isinstance(date_start, int) else date_start.year) < stat_obj_to_use["game-np"]:
                        if data["is_playoffs"] == "Include":
                            if count_inconsistent:
                                date_to_use = stat_obj_to_use["game-np"]
                        elif data["is_playoffs"] != "Only":
                            date_to_use = stat_obj_to_use["game-np"]
                    elif "game" in stat_obj_to_use and (date_start if isinstance(date_start, int) else date_start.year) < stat_obj_to_use["game"] and ("game-np" not in stat_obj_to_use or (date_start if isinstance(date_start, int) else date_start.year) < stat_obj_to_use["game-np"]):
                        date_to_use = stat_obj_to_use["game"]
                    elif count_inconsistent and "inconsistent-game" in stat_obj_to_use and (date_start if isinstance(date_start, int) else date_start.year) < stat_obj_to_use["inconsistent-game"]:
                        date_to_use = stat_obj_to_use["inconsistent-game"]
                
                if date_to_use:
                    if sleague not in invalid_data or date_to_use < invalid_data[sleague]:
                        invalid_data[sleague] = date_to_use
    
    if invalid_data:
        invalid_data["all_invalid"] = all_leagues.issubset(invalid_data.keys())
        invalid_data["any_invalid"] = bool(all_leagues.intersection(invalid_data.keys()))
    else:
        invalid_data["all_invalid"] = False
        invalid_data["any_invalid"] = False

    return invalid_data

def ordinal_to_number(ordinal):
    if ordinal:
        is_exclusive = ordinal.endswith("excl")
        if is_exclusive:
            ordinal = ordinal[:-4]
            is_start_val = True
        else:
            is_exclusive = ordinal.startswith("excl")
            if is_exclusive:
                ordinal = ordinal[4:]
                is_start_val = False

        is_inclusive = ordinal.endswith("incl")
        if is_inclusive:
            ordinal = ordinal[:-4]
            is_start_val = True
        else:
            is_inclusive = ordinal.startswith("incl")
            if is_inclusive:
                ordinal = ordinal[4:]
                is_start_val = False

        is_percent = "%" in ordinal
        if is_percent:
            ordinal = ordinal.replace('%', '')
        ordinal = ordinal.replace('*', '')
        
        try:
            ordinal = float(numeral.roman2int(ordinal))
        except Exception:
            try:
                ordinal = float(ordinal)
            except ValueError:
                if ordinal == "min":
                    ordinal = -float('inf')
                elif ordinal == "max" or ordinal == "today" or ordinal == "present" or ordinal == "now":
                    ordinal = float('inf')
                else:
                    if ordinal.endswith("no"):
                        ordinal = ordinal.replace("no", "zero")
                    elif ordinal.endswith("first"):
                        ordinal = ordinal.replace("first", "one")
                    elif ordinal.endswith("second"):
                        ordinal = ordinal.replace("second", "two")
                    elif ordinal.endswith("third"):
                        ordinal = ordinal.replace("third", "three")
                    elif ordinal.endswith("fifth"):
                        ordinal = ordinal.replace("fifth", "five")
                    elif ordinal.endswith("eighth"):
                        ordinal = ordinal.replace("eighth", "eight")
                    elif ordinal.endswith("ninth"):
                        ordinal = ordinal.replace("ninth", "nine")
                    elif ordinal.endswith("th"):
                        ordinal = ordinal.replace("th", "")
                    elif ordinal.endswith("st"):
                        ordinal = ordinal.replace("st", "")
                    elif ordinal.endswith("nd"):
                        ordinal = ordinal.replace("nd", "")
                    elif ordinal.endswith("rd"):
                        ordinal = ordinal.replace("rd", "")

                    try:
                        ordinal = float(w2n.word_to_num(ordinal))
                    except Exception:
                        raise Exception("Invalid ordinal: " + str(ordinal))

        if is_percent:
            ordinal = ordinal / 100
        
        if is_exclusive:
            if is_start_val:
                ordinal = numpy.nextafter(ordinal, ordinal + 1)
            else:
                ordinal = numpy.nextafter(ordinal, ordinal - 1)
        elif is_inclusive:
            if is_start_val:
                ordinal = numpy.nextafter(ordinal, ordinal - 1)
            else:
                ordinal = numpy.nextafter(ordinal, ordinal + 1)
        
        if ordinal.is_integer():
            ordinal = int(ordinal)

        return ordinal
    else:
        raise Exception("Invalid ordinal: " + str(ordinal))

def unescape_string(escaped_string):
    if escaped_string:
        return escaped_string.replace("\\", "")
    else:
        return escaped_string

def get_team_league(team, year):
    year = int(year)
    if team in teams_to_league:
        leagues = teams_to_league[team]
        for league in leagues:
            if year in leagues[league]:
                return league

    raise Exception("Unknown team " + team + " for year " + str(year))

def create_human_name(human_name):
    parsed_name = HumanName(human_name)
    if not parsed_name.first and parsed_name.title:
        parsed_name.first = parsed_name.title
        parsed_name.title = ""
    if not parsed_name.last and parsed_name.suffix:
        parsed_name.last = parsed_name.suffix
        parsed_name.suffix = ""
    return parsed_name

def handle_string_year(string_year, is_first, replace_first_year):
    if len(re.findall(r"(?<!\\)-", string_year)) == 1:
        raise ValueError

    string_year = string_year.replace("'", "")
    if string_year.isdigit():
        if len(string_year) == 2:
            pot_string_year = int("20" + string_year)
            if pot_string_year > current_season:
                string_year = int("19" + string_year)
            else:
                string_year = pot_string_year
        if int(string_year) > current_season:
            return current_season
        return int(string_year)
    else:
        if string_year == "min":
            return datetime.date.min.year
        elif string_year == "max" or string_year == "now" or string_year == "present":
            return current_season
        elif string_year == "today":
            return datetime.date.today()
        elif string_year == "yesterday":
            return datetime.date.today() - datetime.timedelta(days=1)
        else:
            date = dateutil.parser.parse(string_year).date()
            if is_first or replace_first_year["replace"]:
                today = datetime.date.today()
                if date > today:
                    date = date.replace(year=today.year)
                    if date > today:
                        date = date.replace(year=date.year - 1)
                    replace_first_year["replace"] = True
            return date
    
def round_value(value, round_val=0):
    if value == math.inf or value == -math.inf:
        return value
    decimal_val = decimal.Decimal(str(value)).quantize(
        decimal.Decimal(("{:." + str(round_val) + "f}").format(0)), 
        rounding=decimal.ROUND_HALF_UP
    )
    if round_val == 0:
        return int(decimal_val)
    else:
        return float(decimal_val)

def create_player_url_string(player, player_id, extra_stats):
    if player == "No Player Match!":
        return player

    if "hide-name" in extra_stats:
        return player
        
    if player_id[len(player_id) - 1].isdigit():
        player_url = main_page_url_format.format(player_id[0], player_id)
    else:
        player_url = register_url_format.format(player_id)
    return "[" + player + "](" + player_url + ")"

def format_alert_message(comment_obj, do_update=True):
    now_time = datetime.datetime.now(timezone("US/Eastern"))
    if do_update:
        comment_obj["player_count"] += 1

    percent_complete = str(round((comment_obj["player_count"] / comment_obj["total_players"]) * 100))
    if isinstance(comment_obj["comment"], Message):
        est_message = alert_message_no_update
    else:
        if not comment_obj["is_approved"]:
            return alert_message_no_approved
        else:
            est_message = alert_message + "\n\nPlayers Complete: " + str(comment_obj["player_count"]) + "/" + str(comment_obj["total_players"]) + " (" + percent_complete + "%)"
            if do_update:
                if percent_complete == "100":
                    est_message += "\n\nGenerating tables/images and making comment"
                else:
                    elapsed_time = now_time - comment_obj["start_time"]
                    player_rate = (elapsed_time) / comment_obj["player_count"]
                    est_completion_time = now_time + (player_rate * (comment_obj["total_players"] - comment_obj["player_count"]))
                    est_message += "\n\nElapsed Time: " + str(elapsed_time).split(".")[0]
                    #est_message += "\n\nEstimated Completion: " + est_completion_time.strftime("%I:%M:%S%p %Z")

                est_message += "\n\nLast Update: " + now_time.strftime("%I:%M:%S%p %Z")
    
    return est_message

def get_time_str(value, ordinal, percent=False):
    if value == float("inf"):
        return "MAX"
    elif value == -float("inf"):
        return "MIN"
    else:
        if percent:
            return ("{:.2f}").format(round_value(100 * value, 2)) + "%"
        else:
            if isinstance(value, float) and value.is_integer():
                value = int(value)

            if ordinal and isinstance(value, int):
                return inflect_engine.ordinal(value)
            else:
                return str(value)

def chop_microseconds(delta):
    return delta - datetime.timedelta(microseconds=delta.microseconds)

class CustomMessageException(Exception):
    message = None
    def __init__(self, message):
        super().__init__(message)
        self.message = message

class FakeComment(object):
    def __init__(self, body, id, author):
        self.body = body
        self.id = id
        self.author = FakeAuthor(author)

class FakeAuthor(object):
    def __init__(self, name):
        self.name = name

if __name__ == "__main__":
    main()